
Test_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002659c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005200  0802676c  0802676c  0003676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00005260  0802b96c  0802b96c  0003b96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000af630  08030bcc  08030bcc  00040bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000188  080e01fc  080e01fc  000f01fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080e0384  080e0384  001000fc  2**0
                  CONTENTS
  7 .ARM          00000008  080e0384  080e0384  000f0384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080e038c  080e038c  001000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080e038c  080e038c  000f038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080e03a0  080e03a0  000f03a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  080e03a8  00100000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000ba54  200000fc  080e04a4  001000fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000bb50  080e04a4  0010bb50  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  001000fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   000faab8  00000000  00000000  0010012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0001950a  00000000  00000000  001fabe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005890  00000000  00000000  002140f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005158  00000000  00000000  00219980  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003f7ae  00000000  00000000  0021ead8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00051557  00000000  00000000  0025e286  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013a6e4  00000000  00000000  002af7dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  003e9ec1  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00017e34  00000000  00000000  003e9fbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08026754 	.word	0x08026754

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08026754 	.word	0x08026754

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f00b fa6a 	bl	800ba94 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 f9b4 	bl	800092c <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 f998 	bl	800092c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f00b fa25 	bl	800ba58 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f97e 	bl	800094c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f00b f9ef 	bl	800ba58 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000118 	.word	0x20000118

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f00b f93c 	bl	800ba58 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00b f92e 	bl	800ba58 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f00b f913 	bl	800ba58 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f00b f905 	bl	800ba58 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000118 	.word	0x20000118
 8000890:	2000011c 	.word	0x2000011c

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00b f8b8 	bl	800ba24 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00b f8a4 	bl	800ba24 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800091a:	781b      	ldrb	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000118 	.word	0x20000118

0800092c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000930:	f7ff fff0 	bl	8000914 <ft5336_Get_I2C_InitializedStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d104      	bne.n	8000944 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800093a:	f00b f869 	bl	800ba10 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800093e:	4b02      	ldr	r3, [pc, #8]	; (8000948 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
  }
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000118 	.word	0x20000118

0800094c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <PollingControlMusicInit>:
uint8_t msg;

//extern osSemaphoreId binarySemControlQHandle;

void PollingControlMusicInit()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	music_msg_q = xQueueGenericCreate(1, 1, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2101      	movs	r1, #1
 8000970:	2001      	movs	r0, #1
 8000972:	f008 fca0 	bl	80092b6 <xQueueGenericCreate>
 8000976:	4602      	mov	r2, r0
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <PollingControlMusicInit+0x48>)
 800097a:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <PollingControlMusicInit+0x4c>)
 8000984:	f003 fc64 	bl	8004250 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N2_GPIO_Port, N2_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <PollingControlMusicInit+0x50>)
 8000990:	f003 fc5e 	bl	8004250 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N1_GPIO_Port, N1_Pin, RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <PollingControlMusicInit+0x50>)
 800099c:	f003 fc58 	bl	8004250 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N0_GPIO_Port, N0_Pin, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2104      	movs	r1, #4
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <PollingControlMusicInit+0x54>)
 80009a6:	f003 fc53 	bl	8004250 <HAL_GPIO_WritePin>

	//xSemaphoreGive(binarySemControlQHandle);
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000b62c 	.word	0x2000b62c
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40022000 	.word	0x40022000

080009c0 <signalOut>:

void signalOut(uint8_t controlSignal)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState n2_stat = RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState n1_stat = RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState n0_stat = RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	737b      	strb	r3, [r7, #13]

	switch (controlSignal)
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	3b01      	subs	r3, #1
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d82f      	bhi.n	8000a3e <signalOut+0x7e>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <signalOut+0x24>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a01 	.word	0x08000a01
 80009e8:	08000a07 	.word	0x08000a07
 80009ec:	08000a0d 	.word	0x08000a0d
 80009f0:	08000a17 	.word	0x08000a17
 80009f4:	08000a1d 	.word	0x08000a1d
 80009f8:	08000a27 	.word	0x08000a27
 80009fc:	08000a31 	.word	0x08000a31
	{
	case 1:
		n0_stat = SET;
 8000a00:	2301      	movs	r3, #1
 8000a02:	737b      	strb	r3, [r7, #13]
		break;
 8000a04:	e01b      	b.n	8000a3e <signalOut+0x7e>
	case 2:
		n1_stat = SET;
 8000a06:	2301      	movs	r3, #1
 8000a08:	73bb      	strb	r3, [r7, #14]
		break;
 8000a0a:	e018      	b.n	8000a3e <signalOut+0x7e>
	case 3:
		n0_stat = SET;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	737b      	strb	r3, [r7, #13]
		n1_stat = SET;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73bb      	strb	r3, [r7, #14]
		break;
 8000a14:	e013      	b.n	8000a3e <signalOut+0x7e>
	case 4:
		n2_stat = SET;
 8000a16:	2301      	movs	r3, #1
 8000a18:	73fb      	strb	r3, [r7, #15]
		break;
 8000a1a:	e010      	b.n	8000a3e <signalOut+0x7e>
	case 5:
		n0_stat = SET;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	737b      	strb	r3, [r7, #13]
		n2_stat = SET;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
		break;
 8000a24:	e00b      	b.n	8000a3e <signalOut+0x7e>
	case 6:
		n1_stat = SET;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73bb      	strb	r3, [r7, #14]
		n2_stat = SET;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a2e:	e006      	b.n	8000a3e <signalOut+0x7e>
	case 7:
		n0_stat = SET;
 8000a30:	2301      	movs	r3, #1
 8000a32:	737b      	strb	r3, [r7, #13]
		n1_stat = SET;
 8000a34:	2301      	movs	r3, #1
 8000a36:	73bb      	strb	r3, [r7, #14]
		n2_stat = SET;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
		break;
 8000a3c:	bf00      	nop
	}


	HAL_GPIO_WritePin(N2_GPIO_Port, N2_Pin, n2_stat);
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	461a      	mov	r2, r3
 8000a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <signalOut+0xb0>)
 8000a48:	f003 fc02 	bl	8004250 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N1_GPIO_Port, N1_Pin, n1_stat);
 8000a4c:	7bbb      	ldrb	r3, [r7, #14]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <signalOut+0xb0>)
 8000a56:	f003 fbfb 	bl	8004250 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N0_GPIO_Port, N0_Pin, n0_stat);
 8000a5a:	7b7b      	ldrb	r3, [r7, #13]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <signalOut+0xb4>)
 8000a62:	f003 fbf5 	bl	8004250 <HAL_GPIO_WritePin>
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40022000 	.word	0x40022000

08000a78 <PollingControlMusic>:

// PORT LSB->MSB I-A-A-B
void PollingControlMusic()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if (xQueueReceive(music_msg_q, &msg, 0) == pdTRUE)
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <PollingControlMusic+0x4c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4911      	ldr	r1, [pc, #68]	; (8000ac8 <PollingControlMusic+0x50>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f008 fe79 	bl	800977c <xQueueReceive>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d116      	bne.n	8000abe <PollingControlMusic+0x46>
	{
		signalOut(msg);
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <PollingControlMusic+0x50>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff93 	bl	80009c0 <signalOut>
		vTaskDelay(10);
 8000a9a:	200a      	movs	r0, #10
 8000a9c:	f009 fbae 	bl	800a1fc <vTaskDelay>

		// Pulse out
		HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa6:	4809      	ldr	r0, [pc, #36]	; (8000acc <PollingControlMusic+0x54>)
 8000aa8:	f003 fbd2 	bl	8004250 <HAL_GPIO_WritePin>
		vTaskDelay(2);
 8000aac:	2002      	movs	r0, #2
 8000aae:	f009 fba5 	bl	800a1fc <vTaskDelay>
		HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <PollingControlMusic+0x54>)
 8000aba:	f003 fbc9 	bl	8004250 <HAL_GPIO_WritePin>
		//xSemaphoreGive(binarySemControlQHandle);

	}
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000b62c 	.word	0x2000b62c
 8000ac8:	2000b628 	.word	0x2000b628
 8000acc:	40020400 	.word	0x40020400

08000ad0 <PollingInit>:
uint8_t uartMsgBuffer[UART_BUFF_SIZE];
uint8_t uartMsgData[2];
uint8_t msgIndex = 0;
uint8_t msgRdyFlag = 0;

void PollingInit(){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, uartMsgData, 1);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4903      	ldr	r1, [pc, #12]	; (8000ae4 <PollingInit+0x14>)
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <PollingInit+0x18>)
 8000ada:	f007 f901 	bl	8007ce0 <HAL_UART_Receive_IT>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000b630 	.word	0x2000b630
 8000ae8:	2000b9c4 	.word	0x2000b9c4

08000aec <PollingRoutine>:


void PollingRoutine(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

	if(msgRdyFlag){
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <PollingRoutine+0x24>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d009      	beq.n	8000b0c <PollingRoutine+0x20>
		xSemaphoreGive(binarySemMsgUartHandle);
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <PollingRoutine+0x28>)
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	2300      	movs	r3, #0
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	f008 fca7 	bl	8009454 <xQueueGenericSend>
		msgRdyFlag = 0;
 8000b06:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <PollingRoutine+0x24>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
	}

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000011f 	.word	0x2000011f
 8000b14:	2000b99c 	.word	0x2000b99c

08000b18 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if(msgIndex == 0){
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_UART_RxCpltCallback+0x6c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d104      	bne.n	8000b32 <HAL_UART_RxCpltCallback+0x1a>
		memset(&uartMsgBuffer, 0, sizeof(uartMsgBuffer));
 8000b28:	2210      	movs	r2, #16
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4816      	ldr	r0, [pc, #88]	; (8000b88 <HAL_UART_RxCpltCallback+0x70>)
 8000b2e:	f024 fe60 	bl	80257f2 <memset>
	}

	if(uartMsgData[0] == 13 || msgIndex==15){
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_UART_RxCpltCallback+0x74>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b0d      	cmp	r3, #13
 8000b38:	d003      	beq.n	8000b42 <HAL_UART_RxCpltCallback+0x2a>
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_UART_RxCpltCallback+0x6c>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d10c      	bne.n	8000b5c <HAL_UART_RxCpltCallback+0x44>
		uartMsgBuffer[msgIndex] = 0;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_UART_RxCpltCallback+0x6c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_UART_RxCpltCallback+0x70>)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	5499      	strb	r1, [r3, r2]
		msgIndex = 0;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_UART_RxCpltCallback+0x6c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]

		msgRdyFlag = 1;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_UART_RxCpltCallback+0x78>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e00a      	b.n	8000b72 <HAL_UART_RxCpltCallback+0x5a>
	}else {
		uartMsgBuffer[msgIndex++] = uartMsgData[0];
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_UART_RxCpltCallback+0x6c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	b2d1      	uxtb	r1, r2
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_UART_RxCpltCallback+0x6c>)
 8000b66:	7011      	strb	r1, [r2, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_UART_RxCpltCallback+0x74>)
 8000b6c:	7819      	ldrb	r1, [r3, #0]
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_UART_RxCpltCallback+0x70>)
 8000b70:	5499      	strb	r1, [r3, r2]
	}

	HAL_UART_Receive_IT(&huart6, uartMsgData, 1);
 8000b72:	2201      	movs	r2, #1
 8000b74:	4905      	ldr	r1, [pc, #20]	; (8000b8c <HAL_UART_RxCpltCallback+0x74>)
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <HAL_UART_RxCpltCallback+0x7c>)
 8000b78:	f007 f8b2 	bl	8007ce0 <HAL_UART_Receive_IT>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000011e 	.word	0x2000011e
 8000b88:	2000b634 	.word	0x2000b634
 8000b8c:	2000b630 	.word	0x2000b630
 8000b90:	2000011f 	.word	0x2000011f
 8000b94:	2000b9c4 	.word	0x2000b9c4

08000b98 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <vApplicationGetIdleTaskMemory+0x30>)
 8000be2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000120 	.word	0x20000120
 8000bfc:	20000178 	.word	0x20000178

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b5b0      	push	{r4, r5, r7, lr}
 8000c02:	b098      	sub	sp, #96	; 0x60
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c06:	f001 ff08 	bl	8002a1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0a:	f000 f873 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0e:	f000 fdbf 	bl	8001790 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000c12:	f000 f927 	bl	8000e64 <MX_ADC3_Init>
  MX_CRC_Init();
 8000c16:	f000 f977 	bl	8000f08 <MX_CRC_Init>
  MX_DCMI_Init();
 8000c1a:	f000 f997 	bl	8000f4c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000c1e:	f000 f9c9 	bl	8000fb4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000c22:	f000 fd09 	bl	8001638 <MX_FMC_Init>
  MX_I2C1_Init();
 8000c26:	f000 f9f7 	bl	8001018 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000c2a:	f000 fa35 	bl	8001098 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000c2e:	f000 fa73 	bl	8001118 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000c32:	f000 fb27 	bl	8001284 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000c36:	f000 fb51 	bl	80012dc <MX_RTC_Init>
  MX_SAI2_Init();
 8000c3a:	f000 fbf5 	bl	8001428 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000c3e:	f000 fc9b 	bl	8001578 <MX_SPDIFRX_Init>
  MX_USART6_UART_Init();
 8000c42:	f000 fcc9 	bl	80015d8 <MX_USART6_UART_Init>
  MX_TouchGFX_Init();
 8000c46:	f00a ff30 	bl	800baaa <MX_TouchGFX_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemMsgUart */
  osSemaphoreDef(binarySemMsgUart);
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c4e:	2300      	movs	r3, #0
 8000c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  binarySemMsgUartHandle = osSemaphoreCreate(osSemaphore(binarySemMsgUart), 1);
 8000c52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c56:	2101      	movs	r1, #1
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f008 f8cc 	bl	8008df6 <osSemaphoreCreate>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <main+0xd8>)
 8000c62:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <main+0xdc>)
 8000c66:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c6a:	461d      	mov	r5, r3
 8000c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f008 f859 	bl	8008d36 <osThreadCreate>
 8000c84:	4602      	mov	r2, r0
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <main+0xe0>)
 8000c88:	601a      	str	r2, [r3, #0]

  /* definition and creation of uartTask */
  osThreadDef(uartTask, StartUartTask, osPriorityNormal, 0, 512);
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <main+0xe4>)
 8000c8c:	f107 0420 	add.w	r4, r7, #32
 8000c90:	461d      	mov	r5, r3
 8000c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f008 f846 	bl	8008d36 <osThreadCreate>
 8000caa:	4602      	mov	r2, r0
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <main+0xe8>)
 8000cae:	601a      	str	r2, [r3, #0]

  /* definition and creation of musicTask */
  osThreadDef(musicTask, StartMusicTask, osPriorityIdle, 0, 128);
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <main+0xec>)
 8000cb2:	1d3c      	adds	r4, r7, #4
 8000cb4:	461d      	mov	r5, r3
 8000cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  musicTaskHandle = osThreadCreate(osThread(musicTask), NULL);
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f008 f835 	bl	8008d36 <osThreadCreate>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <main+0xf0>)
 8000cd0:	601a      	str	r2, [r3, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cd2:	f008 f829 	bl	8008d28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <main+0xd6>
 8000cd8:	2000b99c 	.word	0x2000b99c
 8000cdc:	08026778 	.word	0x08026778
 8000ce0:	2000b6c8 	.word	0x2000b6c8
 8000ce4:	080267a0 	.word	0x080267a0
 8000ce8:	2000b900 	.word	0x2000b900
 8000cec:	080267c8 	.word	0x080267c8
 8000cf0:	2000bab8 	.word	0x2000bab8

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0b4      	sub	sp, #208	; 0xd0
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000cfe:	2230      	movs	r2, #48	; 0x30
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f024 fd75 	bl	80257f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	2284      	movs	r2, #132	; 0x84
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f024 fd66 	bl	80257f2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d26:	f004 fbf5 	bl	8005514 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <SystemClock_Config+0x164>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a4a      	ldr	r2, [pc, #296]	; (8000e58 <SystemClock_Config+0x164>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <SystemClock_Config+0x164>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d42:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <SystemClock_Config+0x168>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a45      	ldr	r2, [pc, #276]	; (8000e5c <SystemClock_Config+0x168>)
 8000d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b43      	ldr	r3, [pc, #268]	; (8000e5c <SystemClock_Config+0x168>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d5a:	2309      	movs	r3, #9
 8000d5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d7c:	2319      	movs	r3, #25
 8000d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d82:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d90:	2309      	movs	r3, #9
 8000d92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f004 fcdc 	bl	8005758 <HAL_RCC_OscConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000da6:	f000 ff39 	bl	8001c1c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000daa:	f004 fbc3 	bl	8005534 <HAL_PWREx_EnableOverDrive>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000db4:	f000 ff32 	bl	8001c1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db8:	230f      	movs	r3, #15
 8000dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000dda:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000dde:	2106      	movs	r1, #6
 8000de0:	4618      	mov	r0, r3
 8000de2:	f004 ff5d 	bl	8005ca0 <HAL_RCC_ClockConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000dec:	f000 ff16 	bl	8001c1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <SystemClock_Config+0x16c>)
 8000df2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000df4:	2364      	movs	r3, #100	; 0x64
 8000df6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000e04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e08:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000e12:	2303      	movs	r3, #3
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 f932 	bl	80060a8 <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8000e4a:	f000 fee7 	bl	8001c1c <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	37d0      	adds	r7, #208	; 0xd0
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40007000 	.word	0x40007000
 8000e60:	01114828 	.word	0x01114828

08000e64 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <MX_ADC3_Init+0x9c>)
 8000e7a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e82:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <MX_ADC3_Init+0xa0>)
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_ADC3_Init+0x98>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_ADC3_Init+0x98>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_ADC3_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ec6:	f001 fdf7 	bl	8002ab8 <HAL_ADC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000ed0:	f000 fea4 	bl	8001c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ee6:	f001 fe2b 	bl	8002b40 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000ef0:	f000 fe94 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000b904 	.word	0x2000b904
 8000f00:	40012200 	.word	0x40012200
 8000f04:	0f000001 	.word	0x0f000001

08000f08 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <MX_CRC_Init+0x40>)
 8000f10:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f32:	f002 f95b 	bl	80031ec <HAL_CRC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f3c:	f000 fe6e 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000b834 	.word	0x2000b834
 8000f48:	40023000 	.word	0x40023000

08000f4c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f52:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <MX_DCMI_Init+0x64>)
 8000f54:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000f68:	4b10      	ldr	r3, [pc, #64]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f9a:	f002 fa11 	bl	80033c0 <HAL_DCMI_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000fa4:	f000 fe3a 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000b94c 	.word	0x2000b94c
 8000fb0:	50050000 	.word	0x50050000

08000fb4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fba:	4a16      	ldr	r2, [pc, #88]	; (8001014 <MX_DMA2D_Init+0x60>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fea:	f002 fa85 	bl	80034f8 <HAL_DMA2D_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ff4:	f000 fe12 	bl	8001c1c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000ffc:	f002 fd46 	bl	8003a8c <HAL_DMA2D_ConfigLayer>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001006:	f000 fe09 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000ba44 	.word	0x2000ba44
 8001014:	4002b000 	.word	0x4002b000

08001018 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_I2C1_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <MX_I2C1_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_I2C1_Init+0x74>)
 8001024:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <MX_I2C1_Init+0x7c>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_I2C1_Init+0x74>)
 8001030:	2201      	movs	r2, #1
 8001032:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_I2C1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_I2C1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_I2C1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <MX_I2C1_Init+0x74>)
 8001054:	f003 f916 	bl	8004284 <HAL_I2C_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105e:	f000 fddd 	bl	8001c1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001062:	2100      	movs	r1, #0
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <MX_I2C1_Init+0x74>)
 8001066:	f003 fe25 	bl	8004cb4 <HAL_I2CEx_ConfigAnalogFilter>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001070:	f000 fdd4 	bl	8001c1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_I2C1_Init+0x74>)
 8001078:	f003 fe67 	bl	8004d4a <HAL_I2CEx_ConfigDigitalFilter>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 fdcb 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000b7e8 	.word	0x2000b7e8
 8001090:	40005400 	.word	0x40005400
 8001094:	00c0eaff 	.word	0x00c0eaff

08001098 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_I2C3_Init+0x74>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <MX_I2C3_Init+0x78>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_I2C3_Init+0x74>)
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <MX_I2C3_Init+0x7c>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_I2C3_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_I2C3_Init+0x74>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_I2C3_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_I2C3_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C3_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_I2C3_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C3_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <MX_I2C3_Init+0x74>)
 80010d4:	f003 f8d6 	bl	8004284 <HAL_I2C_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010de:	f000 fd9d 	bl	8001c1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <MX_I2C3_Init+0x74>)
 80010e6:	f003 fde5 	bl	8004cb4 <HAL_I2CEx_ConfigAnalogFilter>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010f0:	f000 fd94 	bl	8001c1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_I2C3_Init+0x74>)
 80010f8:	f003 fe27 	bl	8004d4a <HAL_I2CEx_ConfigDigitalFilter>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001102:	f000 fd8b 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000b6cc 	.word	0x2000b6cc
 8001110:	40005c00 	.word	0x40005c00
 8001114:	00c0eaff 	.word	0x00c0eaff

08001118 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b09a      	sub	sp, #104	; 0x68
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800111e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001122:	2234      	movs	r2, #52	; 0x34
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f024 fb63 	bl	80257f2 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2234      	movs	r2, #52	; 0x34
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f024 fb5d 	bl	80257f2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <MX_LTDC_Init+0x164>)
 800113a:	4a51      	ldr	r2, [pc, #324]	; (8001280 <MX_LTDC_Init+0x168>)
 800113c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800113e:	4b4f      	ldr	r3, [pc, #316]	; (800127c <MX_LTDC_Init+0x164>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001144:	4b4d      	ldr	r3, [pc, #308]	; (800127c <MX_LTDC_Init+0x164>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800114a:	4b4c      	ldr	r3, [pc, #304]	; (800127c <MX_LTDC_Init+0x164>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001150:	4b4a      	ldr	r3, [pc, #296]	; (800127c <MX_LTDC_Init+0x164>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001156:	4b49      	ldr	r3, [pc, #292]	; (800127c <MX_LTDC_Init+0x164>)
 8001158:	2228      	movs	r2, #40	; 0x28
 800115a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800115c:	4b47      	ldr	r3, [pc, #284]	; (800127c <MX_LTDC_Init+0x164>)
 800115e:	2209      	movs	r2, #9
 8001160:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001162:	4b46      	ldr	r3, [pc, #280]	; (800127c <MX_LTDC_Init+0x164>)
 8001164:	2235      	movs	r2, #53	; 0x35
 8001166:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001168:	4b44      	ldr	r3, [pc, #272]	; (800127c <MX_LTDC_Init+0x164>)
 800116a:	220b      	movs	r2, #11
 800116c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800116e:	4b43      	ldr	r3, [pc, #268]	; (800127c <MX_LTDC_Init+0x164>)
 8001170:	f240 2215 	movw	r2, #533	; 0x215
 8001174:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <MX_LTDC_Init+0x164>)
 8001178:	f240 121b 	movw	r2, #283	; 0x11b
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800117e:	4b3f      	ldr	r3, [pc, #252]	; (800127c <MX_LTDC_Init+0x164>)
 8001180:	f240 2235 	movw	r2, #565	; 0x235
 8001184:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <MX_LTDC_Init+0x164>)
 8001188:	f240 121d 	movw	r2, #285	; 0x11d
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <MX_LTDC_Init+0x164>)
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001196:	4b39      	ldr	r3, [pc, #228]	; (800127c <MX_LTDC_Init+0x164>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <MX_LTDC_Init+0x164>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011a6:	4835      	ldr	r0, [pc, #212]	; (800127c <MX_LTDC_Init+0x164>)
 80011a8:	f003 fe1c 	bl	8004de4 <HAL_LTDC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80011b2:	f000 fd33 	bl	8001c1c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 80011ba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 80011c4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011c8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80011ca:	2301      	movs	r3, #1
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80011ce:	23ff      	movs	r3, #255	; 0xff
 80011d0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011da:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011dc:	2305      	movs	r3, #5
 80011de:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 80011e0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80011e4:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 80011e6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 80011ec:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011f0:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001204:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	481b      	ldr	r0, [pc, #108]	; (800127c <MX_LTDC_Init+0x164>)
 800120e:	f003 ff71 	bl	80050f4 <HAL_LTDC_ConfigLayer>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001218:	f000 fd00 	bl	8001c1c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001238:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800123a:	2305      	movs	r3, #5
 800123c:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	2201      	movs	r2, #1
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_LTDC_Init+0x164>)
 8001264:	f003 ff46 	bl	80050f4 <HAL_LTDC_ConfigLayer>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 800126e:	f000 fcd5 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3768      	adds	r7, #104	; 0x68
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000b858 	.word	0x2000b858
 8001280:	40016800 	.word	0x40016800

08001284 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 800128a:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <MX_QUADSPI_Init+0x54>)
 800128c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 8001290:	22ff      	movs	r2, #255	; 0xff
 8001292:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 8001296:	2201      	movs	r2, #1
 8001298:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 80012c0:	f004 f988 	bl	80055d4 <HAL_QSPI_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80012ca:	f000 fca7 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000babc 	.word	0x2000babc
 80012d8:	a0001000 	.word	0xa0001000

080012dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b092      	sub	sp, #72	; 0x48
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
 80012f2:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	222c      	movs	r2, #44	; 0x2c
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f024 fa77 	bl	80257f2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001304:	4b46      	ldr	r3, [pc, #280]	; (8001420 <MX_RTC_Init+0x144>)
 8001306:	4a47      	ldr	r2, [pc, #284]	; (8001424 <MX_RTC_Init+0x148>)
 8001308:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800130a:	4b45      	ldr	r3, [pc, #276]	; (8001420 <MX_RTC_Init+0x144>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001310:	4b43      	ldr	r3, [pc, #268]	; (8001420 <MX_RTC_Init+0x144>)
 8001312:	227f      	movs	r2, #127	; 0x7f
 8001314:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001316:	4b42      	ldr	r3, [pc, #264]	; (8001420 <MX_RTC_Init+0x144>)
 8001318:	22ff      	movs	r2, #255	; 0xff
 800131a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800131c:	4b40      	ldr	r3, [pc, #256]	; (8001420 <MX_RTC_Init+0x144>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001322:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <MX_RTC_Init+0x144>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001328:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <MX_RTC_Init+0x144>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800132e:	483c      	ldr	r0, [pc, #240]	; (8001420 <MX_RTC_Init+0x144>)
 8001330:	f005 fbdc 	bl	8006aec <HAL_RTC_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800133a:	f000 fc6f 	bl	8001c1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001344:	2300      	movs	r3, #0
 8001346:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800134a:	2300      	movs	r3, #0
 800134c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001350:	2300      	movs	r3, #0
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800135c:	2201      	movs	r2, #1
 800135e:	4619      	mov	r1, r3
 8001360:	482f      	ldr	r0, [pc, #188]	; (8001420 <MX_RTC_Init+0x144>)
 8001362:	f005 fc3f 	bl	8006be4 <HAL_RTC_SetTime>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800136c:	f000 fc56 	bl	8001c1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001370:	2301      	movs	r3, #1
 8001372:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001376:	2301      	movs	r3, #1
 8001378:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800137c:	2301      	movs	r3, #1
 800137e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001382:	2300      	movs	r3, #0
 8001384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800138c:	2201      	movs	r2, #1
 800138e:	4619      	mov	r1, r3
 8001390:	4823      	ldr	r0, [pc, #140]	; (8001420 <MX_RTC_Init+0x144>)
 8001392:	f005 fce5 	bl	8006d60 <HAL_RTC_SetDate>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800139c:	f000 fc3e 	bl	8001c1c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80013ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	2201      	movs	r2, #1
 80013d4:	4619      	mov	r1, r3
 80013d6:	4812      	ldr	r0, [pc, #72]	; (8001420 <MX_RTC_Init+0x144>)
 80013d8:	f005 fd6a 	bl	8006eb0 <HAL_RTC_SetAlarm>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80013e2:	f000 fc1b 	bl	8001c1c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80013e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	2201      	movs	r2, #1
 80013f0:	4619      	mov	r1, r3
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <MX_RTC_Init+0x144>)
 80013f4:	f005 fd5c 	bl	8006eb0 <HAL_RTC_SetAlarm>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80013fe:	f000 fc0d 	bl	8001c1c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001402:	2202      	movs	r2, #2
 8001404:	2100      	movs	r1, #0
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_RTC_Init+0x144>)
 8001408:	f005 fedc 	bl	80071c4 <HAL_RTCEx_SetTimeStamp>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001412:	f000 fc03 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3748      	adds	r7, #72	; 0x48
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000b9a0 	.word	0x2000b9a0
 8001424:	40002800 	.word	0x40002800

08001428 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800142c:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <MX_SAI2_Init+0x13c>)
 800142e:	4a4e      	ldr	r2, [pc, #312]	; (8001568 <MX_SAI2_Init+0x140>)
 8001430:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001432:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001434:	2200      	movs	r2, #0
 8001436:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001438:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <MX_SAI2_Init+0x13c>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800143e:	4b49      	ldr	r3, [pc, #292]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001440:	2240      	movs	r2, #64	; 0x40
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001444:	4b47      	ldr	r3, [pc, #284]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001446:	2200      	movs	r2, #0
 8001448:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800144a:	4b46      	ldr	r3, [pc, #280]	; (8001564 <MX_SAI2_Init+0x13c>)
 800144c:	2200      	movs	r2, #0
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001450:	4b44      	ldr	r3, [pc, #272]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001456:	4b43      	ldr	r3, [pc, #268]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <MX_SAI2_Init+0x13c>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001462:	4b40      	ldr	r3, [pc, #256]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001468:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <MX_SAI2_Init+0x13c>)
 800146a:	4a40      	ldr	r2, [pc, #256]	; (800156c <MX_SAI2_Init+0x144>)
 800146c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001474:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <MX_SAI2_Init+0x13c>)
 800147c:	2200      	movs	r2, #0
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001480:	4b38      	ldr	r3, [pc, #224]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001482:	2200      	movs	r2, #0
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001488:	2208      	movs	r2, #8
 800148a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800148c:	4b35      	ldr	r3, [pc, #212]	; (8001564 <MX_SAI2_Init+0x13c>)
 800148e:	2201      	movs	r2, #1
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001492:	4b34      	ldr	r3, [pc, #208]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001494:	2200      	movs	r2, #0
 8001496:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001498:	4b32      	ldr	r3, [pc, #200]	; (8001564 <MX_SAI2_Init+0x13c>)
 800149a:	2200      	movs	r2, #0
 800149c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <MX_SAI2_Init+0x13c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <MX_SAI2_Init+0x13c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <MX_SAI2_Init+0x13c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80014b0:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <MX_SAI2_Init+0x13c>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80014b6:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <MX_SAI2_Init+0x13c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80014bc:	4829      	ldr	r0, [pc, #164]	; (8001564 <MX_SAI2_Init+0x13c>)
 80014be:	f005 fed7 	bl	8007270 <HAL_SAI_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80014c8:	f000 fba8 	bl	8001c1c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <MX_SAI2_Init+0x148>)
 80014ce:	4a29      	ldr	r2, [pc, #164]	; (8001574 <MX_SAI2_Init+0x14c>)
 80014d0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_SAI2_Init+0x148>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <MX_SAI2_Init+0x148>)
 80014da:	2203      	movs	r2, #3
 80014dc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_SAI2_Init+0x148>)
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_SAI2_Init+0x148>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_SAI2_Init+0x148>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_SAI2_Init+0x148>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <MX_SAI2_Init+0x148>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_SAI2_Init+0x148>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_SAI2_Init+0x148>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_SAI2_Init+0x148>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_SAI2_Init+0x148>)
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_SAI2_Init+0x148>)
 8001516:	2200      	movs	r2, #0
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_SAI2_Init+0x148>)
 800151c:	2208      	movs	r2, #8
 800151e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_SAI2_Init+0x148>)
 8001522:	2201      	movs	r2, #1
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_SAI2_Init+0x148>)
 8001528:	2200      	movs	r2, #0
 800152a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_SAI2_Init+0x148>)
 800152e:	2200      	movs	r2, #0
 8001530:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_SAI2_Init+0x148>)
 8001534:	2200      	movs	r2, #0
 8001536:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_SAI2_Init+0x148>)
 800153a:	2200      	movs	r2, #0
 800153c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_SAI2_Init+0x148>)
 8001540:	2200      	movs	r2, #0
 8001542:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_SAI2_Init+0x148>)
 8001546:	2201      	movs	r2, #1
 8001548:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_SAI2_Init+0x148>)
 800154c:	2200      	movs	r2, #0
 800154e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001550:	4807      	ldr	r0, [pc, #28]	; (8001570 <MX_SAI2_Init+0x148>)
 8001552:	f005 fe8d 	bl	8007270 <HAL_SAI_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 800155c:	f000 fb5e 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000b764 	.word	0x2000b764
 8001568:	40015c04 	.word	0x40015c04
 800156c:	0002ee00 	.word	0x0002ee00
 8001570:	2000b644 	.word	0x2000b644
 8001574:	40015c24 	.word	0x40015c24

08001578 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 800157e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001582:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 80015c2:	f006 f87d 	bl	80076c0 <HAL_SPDIFRX_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80015cc:	f000 fb26 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000b718 	.word	0x2000b718

080015d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_USART6_UART_Init+0x58>)
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <MX_USART6_UART_Init+0x5c>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_USART6_UART_Init+0x58>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_USART6_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_USART6_UART_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_USART6_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART6_UART_Init+0x58>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_USART6_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART6_UART_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_USART6_UART_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_USART6_UART_Init+0x58>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_USART6_UART_Init+0x58>)
 800161c:	f006 fb12 	bl	8007c44 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001626:	f000 faf9 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000b9c4 	.word	0x2000b9c4
 8001634:	40011400 	.word	0x40011400

08001638 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001650:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <MX_FMC_Init+0x14c>)
 8001652:	4a4d      	ldr	r2, [pc, #308]	; (8001788 <MX_FMC_Init+0x150>)
 8001654:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001656:	4b4b      	ldr	r3, [pc, #300]	; (8001784 <MX_FMC_Init+0x14c>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800165c:	4b49      	ldr	r3, [pc, #292]	; (8001784 <MX_FMC_Init+0x14c>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001662:	4b48      	ldr	r3, [pc, #288]	; (8001784 <MX_FMC_Init+0x14c>)
 8001664:	2204      	movs	r2, #4
 8001666:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001668:	4b46      	ldr	r3, [pc, #280]	; (8001784 <MX_FMC_Init+0x14c>)
 800166a:	2210      	movs	r2, #16
 800166c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800166e:	4b45      	ldr	r3, [pc, #276]	; (8001784 <MX_FMC_Init+0x14c>)
 8001670:	2240      	movs	r2, #64	; 0x40
 8001672:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001674:	4b43      	ldr	r3, [pc, #268]	; (8001784 <MX_FMC_Init+0x14c>)
 8001676:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800167a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800167c:	4b41      	ldr	r3, [pc, #260]	; (8001784 <MX_FMC_Init+0x14c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001682:	4b40      	ldr	r3, [pc, #256]	; (8001784 <MX_FMC_Init+0x14c>)
 8001684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001688:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800168a:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <MX_FMC_Init+0x14c>)
 800168c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001692:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <MX_FMC_Init+0x14c>)
 8001694:	2200      	movs	r2, #0
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001698:	2302      	movs	r3, #2
 800169a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800169c:	2307      	movs	r3, #7
 800169e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80016a0:	2304      	movs	r3, #4
 80016a2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80016a4:	2307      	movs	r3, #7
 80016a6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80016a8:	2303      	movs	r3, #3
 80016aa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4832      	ldr	r0, [pc, #200]	; (8001784 <MX_FMC_Init+0x14c>)
 80016ba:	f005 ff81 	bl	80075c0 <HAL_SDRAM_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80016c4:	f000 faaa 	bl	8001c1c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  __IO uint32_t tmpmrd = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	603b      	str	r3, [r7, #0]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <MX_FMC_Init+0x154>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <MX_FMC_Init+0x154>)
 80016d4:	2210      	movs	r2, #16
 80016d6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80016d8:	4b2c      	ldr	r3, [pc, #176]	; (800178c <MX_FMC_Init+0x154>)
 80016da:	2201      	movs	r2, #1
 80016dc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80016de:	4b2b      	ldr	r3, [pc, #172]	; (800178c <MX_FMC_Init+0x154>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80016e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e8:	4928      	ldr	r1, [pc, #160]	; (800178c <MX_FMC_Init+0x154>)
 80016ea:	4826      	ldr	r0, [pc, #152]	; (8001784 <MX_FMC_Init+0x14c>)
 80016ec:	f005 ff9c 	bl	8007628 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f001 f9bf 	bl	8002a74 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <MX_FMC_Init+0x154>)
 80016f8:	2202      	movs	r2, #2
 80016fa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <MX_FMC_Init+0x154>)
 80016fe:	2210      	movs	r2, #16
 8001700:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <MX_FMC_Init+0x154>)
 8001704:	2201      	movs	r2, #1
 8001706:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <MX_FMC_Init+0x154>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800170e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001712:	491e      	ldr	r1, [pc, #120]	; (800178c <MX_FMC_Init+0x154>)
 8001714:	481b      	ldr	r0, [pc, #108]	; (8001784 <MX_FMC_Init+0x14c>)
 8001716:	f005 ff87 	bl	8007628 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <MX_FMC_Init+0x154>)
 800171c:	2203      	movs	r2, #3
 800171e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_FMC_Init+0x154>)
 8001722:	2210      	movs	r2, #16
 8001724:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_FMC_Init+0x154>)
 8001728:	2208      	movs	r2, #8
 800172a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <MX_FMC_Init+0x154>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001736:	4915      	ldr	r1, [pc, #84]	; (800178c <MX_FMC_Init+0x154>)
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <MX_FMC_Init+0x14c>)
 800173a:	f005 ff75 	bl	8007628 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800173e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001742:	603b      	str	r3, [r7, #0]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
           SDRAM_MODEREG_CAS_LATENCY_3            | \
           SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_FMC_Init+0x154>)
 8001746:	2204      	movs	r2, #4
 8001748:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_FMC_Init+0x154>)
 800174c:	2210      	movs	r2, #16
 800174e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_FMC_Init+0x154>)
 8001752:	2201      	movs	r2, #1
 8001754:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	4a0c      	ldr	r2, [pc, #48]	; (800178c <MX_FMC_Init+0x154>)
 800175a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800175c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001760:	490a      	ldr	r1, [pc, #40]	; (800178c <MX_FMC_Init+0x154>)
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <MX_FMC_Init+0x14c>)
 8001764:	f005 ff60 	bl	8007628 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001768:	f240 712b 	movw	r1, #1835	; 0x72b
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_FMC_Init+0x14c>)
 800176e:	f005 ff86 	bl	800767e <HAL_SDRAM_ProgramRefreshRate>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8001772:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001776:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800177a:	601a      	str	r2, [r3, #0]

  /* USER CODE END FMC_Init 2 */
}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000ba84 	.word	0x2000ba84
 8001788:	a0000140 	.word	0xa0000140
 800178c:	20000378 	.word	0x20000378

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b090      	sub	sp, #64	; 0x40
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a6:	4bb0      	ldr	r3, [pc, #704]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4aaf      	ldr	r2, [pc, #700]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017ac:	f043 0310 	orr.w	r3, r3, #16
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4bad      	ldr	r3, [pc, #692]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80017bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	4baa      	ldr	r3, [pc, #680]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4aa9      	ldr	r2, [pc, #676]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4ba7      	ldr	r3, [pc, #668]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	4ba4      	ldr	r3, [pc, #656]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4aa3      	ldr	r2, [pc, #652]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017dc:	f043 0308 	orr.w	r3, r3, #8
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4ba1      	ldr	r3, [pc, #644]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	623b      	str	r3, [r7, #32]
 80017ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b9e      	ldr	r3, [pc, #632]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a9d      	ldr	r2, [pc, #628]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b9b      	ldr	r3, [pc, #620]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001806:	4b98      	ldr	r3, [pc, #608]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a97      	ldr	r2, [pc, #604]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800180c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b95      	ldr	r3, [pc, #596]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800181e:	4b92      	ldr	r3, [pc, #584]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a91      	ldr	r2, [pc, #580]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001824:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b8f      	ldr	r3, [pc, #572]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001836:	4b8c      	ldr	r3, [pc, #560]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a8b      	ldr	r2, [pc, #556]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b89      	ldr	r3, [pc, #548]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800184e:	4b86      	ldr	r3, [pc, #536]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a85      	ldr	r2, [pc, #532]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b83      	ldr	r3, [pc, #524]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	4b80      	ldr	r3, [pc, #512]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a7f      	ldr	r2, [pc, #508]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b7d      	ldr	r3, [pc, #500]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800187e:	4b7a      	ldr	r3, [pc, #488]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a79      	ldr	r2, [pc, #484]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001884:	f043 0320 	orr.w	r3, r3, #32
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b77      	ldr	r3, [pc, #476]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001896:	4b74      	ldr	r3, [pc, #464]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a73      	ldr	r2, [pc, #460]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800189c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b71      	ldr	r3, [pc, #452]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, N1_Pin|N2_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80018b4:	486d      	ldr	r0, [pc, #436]	; (8001a6c <MX_GPIO_Init+0x2dc>)
 80018b6:	f002 fccb 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	2120      	movs	r1, #32
 80018be:	486c      	ldr	r0, [pc, #432]	; (8001a70 <MX_GPIO_Init+0x2e0>)
 80018c0:	f002 fcc6 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|N0_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	210c      	movs	r1, #12
 80018c8:	486a      	ldr	r0, [pc, #424]	; (8001a74 <MX_GPIO_Init+0x2e4>)
 80018ca:	f002 fcc1 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2108      	movs	r1, #8
 80018d2:	4869      	ldr	r0, [pc, #420]	; (8001a78 <MX_GPIO_Init+0x2e8>)
 80018d4:	f002 fcbc 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018de:	4865      	ldr	r0, [pc, #404]	; (8001a74 <MX_GPIO_Init+0x2e4>)
 80018e0:	f002 fcb6 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ea:	4864      	ldr	r0, [pc, #400]	; (8001a7c <MX_GPIO_Init+0x2ec>)
 80018ec:	f002 fcb0 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	21c8      	movs	r1, #200	; 0xc8
 80018f4:	4862      	ldr	r0, [pc, #392]	; (8001a80 <MX_GPIO_Init+0x2f0>)
 80018f6:	f002 fcab 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001900:	4860      	ldr	r0, [pc, #384]	; (8001a84 <MX_GPIO_Init+0x2f4>)
 8001902:	f002 fca5 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001906:	2308      	movs	r3, #8
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001916:	4619      	mov	r1, r3
 8001918:	485b      	ldr	r0, [pc, #364]	; (8001a88 <MX_GPIO_Init+0x2f8>)
 800191a:	f002 f9e5 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 800191e:	f643 0323 	movw	r3, #14371	; 0x3823
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001930:	230a      	movs	r3, #10
 8001932:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001938:	4619      	mov	r1, r3
 800193a:	4852      	ldr	r0, [pc, #328]	; (8001a84 <MX_GPIO_Init+0x2f4>)
 800193c:	f002 f9d4 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001940:	2310      	movs	r3, #16
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001950:	2302      	movs	r3, #2
 8001952:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001958:	4619      	mov	r1, r3
 800195a:	484a      	ldr	r0, [pc, #296]	; (8001a84 <MX_GPIO_Init+0x2f4>)
 800195c:	f002 f9c4 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : N1_Pin N2_Pin */
  GPIO_InitStruct.Pin = N1_Pin|N2_Pin;
 8001960:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001966:	2301      	movs	r3, #1
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001976:	4619      	mov	r1, r3
 8001978:	483c      	ldr	r0, [pc, #240]	; (8001a6c <MX_GPIO_Init+0x2dc>)
 800197a:	f002 f9b5 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800197e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	483e      	ldr	r0, [pc, #248]	; (8001a8c <MX_GPIO_Init+0x2fc>)
 8001994:	f002 f9a8 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800199c:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <MX_GPIO_Init+0x300>)
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a8:	4619      	mov	r1, r3
 80019aa:	4831      	ldr	r0, [pc, #196]	; (8001a70 <MX_GPIO_Init+0x2e0>)
 80019ac:	f002 f99c 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80019b0:	2320      	movs	r3, #32
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c4:	4619      	mov	r1, r3
 80019c6:	482a      	ldr	r0, [pc, #168]	; (8001a70 <MX_GPIO_Init+0x2e0>)
 80019c8:	f002 f98e 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin N0_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|N0_Pin|LCD_DISP_Pin;
 80019cc:	f241 030c 	movw	r3, #4108	; 0x100c
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e2:	4619      	mov	r1, r3
 80019e4:	4823      	ldr	r0, [pc, #140]	; (8001a74 <MX_GPIO_Init+0x2e4>)
 80019e6:	f002 f97f 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80019ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	4825      	ldr	r0, [pc, #148]	; (8001a94 <MX_GPIO_Init+0x304>)
 8001a00:	f002 f972 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a04:	2308      	movs	r3, #8
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4817      	ldr	r0, [pc, #92]	; (8001a78 <MX_GPIO_Init+0x2e8>)
 8001a1c:	f002 f964 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a20:	2310      	movs	r3, #16
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	4619      	mov	r1, r3
 8001a32:	480f      	ldr	r0, [pc, #60]	; (8001a70 <MX_GPIO_Init+0x2e0>)
 8001a34:	f002 f958 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001a38:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <MX_GPIO_Init+0x2ec>)
 8001a4e:	f002 f94b 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a64:	e018      	b.n	8001a98 <MX_GPIO_Init+0x308>
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	40022000 	.word	0x40022000
 8001a78:	40022800 	.word	0x40022800
 8001a7c:	40021c00 	.word	0x40021c00
 8001a80:	40021800 	.word	0x40021800
 8001a84:	40020400 	.word	0x40020400
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40022400 	.word	0x40022400
 8001a90:	10120000 	.word	0x10120000
 8001a94:	40020800 	.word	0x40020800
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	483e      	ldr	r0, [pc, #248]	; (8001b98 <MX_GPIO_Init+0x408>)
 8001aa0:	f002 f922 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001abc:	4619      	mov	r1, r3
 8001abe:	4837      	ldr	r0, [pc, #220]	; (8001b9c <MX_GPIO_Init+0x40c>)
 8001ac0:	f002 f912 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001aca:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <MX_GPIO_Init+0x410>)
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4830      	ldr	r0, [pc, #192]	; (8001b9c <MX_GPIO_Init+0x40c>)
 8001ada:	f002 f905 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001ade:	2310      	movs	r3, #16
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001aee:	230a      	movs	r3, #10
 8001af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af6:	4619      	mov	r1, r3
 8001af8:	4827      	ldr	r0, [pc, #156]	; (8001b98 <MX_GPIO_Init+0x408>)
 8001afa:	f002 f8f5 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001afe:	23c8      	movs	r3, #200	; 0xc8
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b12:	4619      	mov	r1, r3
 8001b14:	4823      	ldr	r0, [pc, #140]	; (8001ba4 <MX_GPIO_Init+0x414>)
 8001b16:	f002 f8e7 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b32:	4619      	mov	r1, r3
 8001b34:	481c      	ldr	r0, [pc, #112]	; (8001ba8 <MX_GPIO_Init+0x418>)
 8001b36:	f002 f8d7 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4815      	ldr	r0, [pc, #84]	; (8001ba4 <MX_GPIO_Init+0x414>)
 8001b4e:	f002 f8cb 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001b52:	2328      	movs	r3, #40	; 0x28
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b62:	230a      	movs	r3, #10
 8001b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480f      	ldr	r0, [pc, #60]	; (8001bac <MX_GPIO_Init+0x41c>)
 8001b6e:	f002 f8bb 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : N3_Pin */
  GPIO_InitStruct.Pin = N3_Pin;
 8001b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(N3_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <MX_GPIO_Init+0x420>)
 8001b8c:	f002 f8ac 	bl	8003ce8 <HAL_GPIO_Init>

}
 8001b90:	bf00      	nop
 8001b92:	3740      	adds	r7, #64	; 0x40
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	10120000 	.word	0x10120000
 8001ba4:	40021800 	.word	0x40021800
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001bbc:	f009 ff7b 	bl	800bab6 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f007 f904 	bl	8008dce <osDelay>
 8001bc6:	e7fb      	b.n	8001bc0 <StartDefaultTask+0xc>

08001bc8 <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
  /* Infinite loop */

	PollingInit();
 8001bd0:	f7fe ff7e 	bl	8000ad0 <PollingInit>
  for(;;)
  {
	PollingRoutine();
 8001bd4:	f7fe ff8a 	bl	8000aec <PollingRoutine>
    osDelay(1);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f007 f8f8 	bl	8008dce <osDelay>
	PollingRoutine();
 8001bde:	e7f9      	b.n	8001bd4 <StartUartTask+0xc>

08001be0 <StartMusicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMusicTask */
void StartMusicTask(void const * argument)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMusicTask */
  /* Infinite loop */
	PollingControlMusicInit();
 8001be8:	f7fe febe 	bl	8000968 <PollingControlMusicInit>
  for(;;)
  {
	  PollingControlMusic();
 8001bec:	f7fe ff44 	bl	8000a78 <PollingControlMusic>
	  osDelay(1);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f007 f8ec 	bl	8008dce <osDelay>
	  PollingControlMusic();
 8001bf6:	e7f9      	b.n	8001bec <StartMusicTask+0xc>

08001bf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c0a:	f000 ff13 	bl	8002a34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40001000 	.word	0x40001000

08001c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	210f      	movs	r1, #15
 8001c66:	f06f 0001 	mvn.w	r0, #1
 8001c6a:	f001 fa87 	bl	800317c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <HAL_ADC_MspInit+0xa4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d13c      	bne.n	8001d18 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c9e:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_ADC_MspInit+0xa8>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a20      	ldr	r2, [pc, #128]	; (8001d24 <HAL_ADC_MspInit+0xa8>)
 8001ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_ADC_MspInit+0xa8>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_ADC_MspInit+0xa8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <HAL_ADC_MspInit+0xa8>)
 8001cbc:	f043 0320 	orr.w	r3, r3, #32
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_ADC_MspInit+0xa8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_ADC_MspInit+0xa8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_ADC_MspInit+0xa8>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_ADC_MspInit+0xa8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001ce6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001cea:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cec:	2303      	movs	r3, #3
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480b      	ldr	r0, [pc, #44]	; (8001d28 <HAL_ADC_MspInit+0xac>)
 8001cfc:	f001 fff4 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001d00:	2301      	movs	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d04:	2303      	movs	r3, #3
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <HAL_ADC_MspInit+0xb0>)
 8001d14:	f001 ffe8 	bl	8003ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	; 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40012200 	.word	0x40012200
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40021400 	.word	0x40021400
 8001d2c:	40020000 	.word	0x40020000

08001d30 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_CRC_MspInit+0x38>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10b      	bne.n	8001d5a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_CRC_MspInit+0x3c>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <HAL_CRC_MspInit+0x3c>)
 8001d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_CRC_MspInit+0x3c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023000 	.word	0x40023000
 8001d6c:	40023800 	.word	0x40023800

08001d70 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08e      	sub	sp, #56	; 0x38
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a50      	ldr	r2, [pc, #320]	; (8001ed0 <HAL_DCMI_MspInit+0x160>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	f040 809a 	bne.w	8001ec8 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001d94:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	4a4e      	ldr	r2, [pc, #312]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6353      	str	r3, [r2, #52]	; 0x34
 8001da0:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	623b      	str	r3, [r7, #32]
 8001daa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dac:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	4a48      	ldr	r2, [pc, #288]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
 8001db8:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc4:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	4a42      	ldr	r2, [pc, #264]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd0:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	4a3c      	ldr	r2, [pc, #240]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de6:	6313      	str	r3, [r2, #48]	; 0x30
 8001de8:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001df4:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	4a36      	ldr	r2, [pc, #216]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001e00:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	4a30      	ldr	r2, [pc, #192]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6313      	str	r3, [r2, #48]	; 0x30
 8001e18:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <HAL_DCMI_MspInit+0x164>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001e24:	2360      	movs	r3, #96	; 0x60
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e34:	230d      	movs	r3, #13
 8001e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4826      	ldr	r0, [pc, #152]	; (8001ed8 <HAL_DCMI_MspInit+0x168>)
 8001e40:	f001 ff52 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001e44:	2308      	movs	r3, #8
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e54:	230d      	movs	r3, #13
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	481f      	ldr	r0, [pc, #124]	; (8001edc <HAL_DCMI_MspInit+0x16c>)
 8001e60:	f001 ff42 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e76:	230d      	movs	r3, #13
 8001e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4817      	ldr	r0, [pc, #92]	; (8001ee0 <HAL_DCMI_MspInit+0x170>)
 8001e82:	f001 ff31 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001e86:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e98:	230d      	movs	r3, #13
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4810      	ldr	r0, [pc, #64]	; (8001ee4 <HAL_DCMI_MspInit+0x174>)
 8001ea4:	f001 ff20 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ea8:	2350      	movs	r3, #80	; 0x50
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001eb8:	230d      	movs	r3, #13
 8001eba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4809      	ldr	r0, [pc, #36]	; (8001ee8 <HAL_DCMI_MspInit+0x178>)
 8001ec4:	f001 ff10 	bl	8003ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001ec8:	bf00      	nop
 8001eca:	3738      	adds	r7, #56	; 0x38
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	50050000 	.word	0x50050000
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	40021800 	.word	0x40021800
 8001ee4:	40021c00 	.word	0x40021c00
 8001ee8:	40020000 	.word	0x40020000

08001eec <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <HAL_DMA2D_MspInit+0x44>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d113      	bne.n	8001f26 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_DMA2D_MspInit+0x48>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <HAL_DMA2D_MspInit+0x48>)
 8001f04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_DMA2D_MspInit+0x48>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	205a      	movs	r0, #90	; 0x5a
 8001f1c:	f001 f92e 	bl	800317c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f20:	205a      	movs	r0, #90	; 0x5a
 8001f22:	f001 f947 	bl	80031b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	4002b000 	.word	0x4002b000
 8001f34:	40023800 	.word	0x40023800

08001f38 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_DMA2D_MspDeInit+0x2c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d108      	bne.n	8001f5c <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_DMA2D_MspDeInit+0x30>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <HAL_DMA2D_MspDeInit+0x30>)
 8001f50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8001f56:	205a      	movs	r0, #90	; 0x5a
 8001f58:	f001 f93a 	bl	80031d0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	4002b000 	.word	0x4002b000
 8001f68:	40023800 	.word	0x40023800

08001f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	; 0x30
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a2f      	ldr	r2, [pc, #188]	; (8002048 <HAL_I2C_MspInit+0xdc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d129      	bne.n	8001fe2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	; (800204c <HAL_I2C_MspInit+0xe0>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a2e      	ldr	r2, [pc, #184]	; (800204c <HAL_I2C_MspInit+0xe0>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	; (800204c <HAL_I2C_MspInit+0xe0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001fa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fac:	2312      	movs	r3, #18
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4823      	ldr	r0, [pc, #140]	; (8002050 <HAL_I2C_MspInit+0xe4>)
 8001fc4:	f001 fe90 	bl	8003ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_I2C_MspInit+0xe0>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	; (800204c <HAL_I2C_MspInit+0xe0>)
 8001fce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_I2C_MspInit+0xe0>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001fe0:	e02d      	b.n	800203e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <HAL_I2C_MspInit+0xe8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d128      	bne.n	800203e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_I2C_MspInit+0xe0>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	4a16      	ldr	r2, [pc, #88]	; (800204c <HAL_I2C_MspInit+0xe0>)
 8001ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_I2C_MspInit+0xe0>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002004:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800200a:	2312      	movs	r3, #18
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800200e:	2301      	movs	r3, #1
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002016:	2304      	movs	r3, #4
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <HAL_I2C_MspInit+0xec>)
 8002022:	f001 fe61 	bl	8003ce8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_I2C_MspInit+0xe0>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_I2C_MspInit+0xe0>)
 800202c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_I2C_MspInit+0xe0>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
}
 800203e:	bf00      	nop
 8002040:	3730      	adds	r7, #48	; 0x30
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40005400 	.word	0x40005400
 800204c:	40023800 	.word	0x40023800
 8002050:	40020400 	.word	0x40020400
 8002054:	40005c00 	.word	0x40005c00
 8002058:	40021c00 	.word	0x40021c00

0800205c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <HAL_I2C_MspDeInit+0x64>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d110      	bne.n	8002090 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_I2C_MspDeInit+0x68>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <HAL_I2C_MspDeInit+0x68>)
 8002074:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002078:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 800207a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207e:	4812      	ldr	r0, [pc, #72]	; (80020c8 <HAL_I2C_MspDeInit+0x6c>)
 8002080:	f001 ffdc 	bl	800403c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002088:	480f      	ldr	r0, [pc, #60]	; (80020c8 <HAL_I2C_MspDeInit+0x6c>)
 800208a:	f001 ffd7 	bl	800403c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800208e:	e013      	b.n	80020b8 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <HAL_I2C_MspDeInit+0x70>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10e      	bne.n	80020b8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_I2C_MspDeInit+0x68>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_I2C_MspDeInit+0x68>)
 80020a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	4809      	ldr	r0, [pc, #36]	; (80020d0 <HAL_I2C_MspDeInit+0x74>)
 80020aa:	f001 ffc7 	bl	800403c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80020ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b2:	4807      	ldr	r0, [pc, #28]	; (80020d0 <HAL_I2C_MspDeInit+0x74>)
 80020b4:	f001 ffc2 	bl	800403c <HAL_GPIO_DeInit>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40005400 	.word	0x40005400
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020400 	.word	0x40020400
 80020cc:	40005c00 	.word	0x40005c00
 80020d0:	40021c00 	.word	0x40021c00

080020d4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08e      	sub	sp, #56	; 0x38
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a55      	ldr	r2, [pc, #340]	; (8002248 <HAL_LTDC_MspInit+0x174>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	f040 80a3 	bne.w	800223e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80020f8:	4b54      	ldr	r3, [pc, #336]	; (800224c <HAL_LTDC_MspInit+0x178>)
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	4a53      	ldr	r2, [pc, #332]	; (800224c <HAL_LTDC_MspInit+0x178>)
 80020fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002102:	6453      	str	r3, [r2, #68]	; 0x44
 8002104:	4b51      	ldr	r3, [pc, #324]	; (800224c <HAL_LTDC_MspInit+0x178>)
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800210c:	623b      	str	r3, [r7, #32]
 800210e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002110:	4b4e      	ldr	r3, [pc, #312]	; (800224c <HAL_LTDC_MspInit+0x178>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	4a4d      	ldr	r2, [pc, #308]	; (800224c <HAL_LTDC_MspInit+0x178>)
 8002116:	f043 0310 	orr.w	r3, r3, #16
 800211a:	6313      	str	r3, [r2, #48]	; 0x30
 800211c:	4b4b      	ldr	r3, [pc, #300]	; (800224c <HAL_LTDC_MspInit+0x178>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002128:	4b48      	ldr	r3, [pc, #288]	; (800224c <HAL_LTDC_MspInit+0x178>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	4a47      	ldr	r2, [pc, #284]	; (800224c <HAL_LTDC_MspInit+0x178>)
 800212e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002132:	6313      	str	r3, [r2, #48]	; 0x30
 8002134:	4b45      	ldr	r3, [pc, #276]	; (800224c <HAL_LTDC_MspInit+0x178>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002140:	4b42      	ldr	r3, [pc, #264]	; (800224c <HAL_LTDC_MspInit+0x178>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4a41      	ldr	r2, [pc, #260]	; (800224c <HAL_LTDC_MspInit+0x178>)
 8002146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800214a:	6313      	str	r3, [r2, #48]	; 0x30
 800214c:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_LTDC_MspInit+0x178>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002158:	4b3c      	ldr	r3, [pc, #240]	; (800224c <HAL_LTDC_MspInit+0x178>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	4a3b      	ldr	r2, [pc, #236]	; (800224c <HAL_LTDC_MspInit+0x178>)
 800215e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002162:	6313      	str	r3, [r2, #48]	; 0x30
 8002164:	4b39      	ldr	r3, [pc, #228]	; (800224c <HAL_LTDC_MspInit+0x178>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002170:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_LTDC_MspInit+0x178>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	4a35      	ldr	r2, [pc, #212]	; (800224c <HAL_LTDC_MspInit+0x178>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217a:	6313      	str	r3, [r2, #48]	; 0x30
 800217c:	4b33      	ldr	r3, [pc, #204]	; (800224c <HAL_LTDC_MspInit+0x178>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002188:	2310      	movs	r3, #16
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002198:	230e      	movs	r3, #14
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800219c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a0:	4619      	mov	r1, r3
 80021a2:	482b      	ldr	r0, [pc, #172]	; (8002250 <HAL_LTDC_MspInit+0x17c>)
 80021a4:	f001 fda0 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80021a8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021ba:	230e      	movs	r3, #14
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c2:	4619      	mov	r1, r3
 80021c4:	4823      	ldr	r0, [pc, #140]	; (8002254 <HAL_LTDC_MspInit+0x180>)
 80021c6:	f001 fd8f 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80021ca:	23f7      	movs	r3, #247	; 0xf7
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021da:	230e      	movs	r3, #14
 80021dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80021de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e2:	4619      	mov	r1, r3
 80021e4:	481c      	ldr	r0, [pc, #112]	; (8002258 <HAL_LTDC_MspInit+0x184>)
 80021e6:	f001 fd7f 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80021ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021fc:	2309      	movs	r3, #9
 80021fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002204:	4619      	mov	r1, r3
 8002206:	4815      	ldr	r0, [pc, #84]	; (800225c <HAL_LTDC_MspInit+0x188>)
 8002208:	f001 fd6e 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800220c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800221e:	230e      	movs	r3, #14
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002226:	4619      	mov	r1, r3
 8002228:	480d      	ldr	r0, [pc, #52]	; (8002260 <HAL_LTDC_MspInit+0x18c>)
 800222a:	f001 fd5d 	bl	8003ce8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2058      	movs	r0, #88	; 0x58
 8002234:	f000 ffa2 	bl	800317c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002238:	2058      	movs	r0, #88	; 0x58
 800223a:	f000 ffbb 	bl	80031b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800223e:	bf00      	nop
 8002240:	3738      	adds	r7, #56	; 0x38
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40016800 	.word	0x40016800
 800224c:	40023800 	.word	0x40023800
 8002250:	40021000 	.word	0x40021000
 8002254:	40022400 	.word	0x40022400
 8002258:	40022800 	.word	0x40022800
 800225c:	40021800 	.word	0x40021800
 8002260:	40022000 	.word	0x40022000

08002264 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	; 0x30
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a3b      	ldr	r2, [pc, #236]	; (8002370 <HAL_QSPI_MspInit+0x10c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d170      	bne.n	8002368 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_QSPI_MspInit+0x110>)
 8002288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228a:	4a3a      	ldr	r2, [pc, #232]	; (8002374 <HAL_QSPI_MspInit+0x110>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	6393      	str	r3, [r2, #56]	; 0x38
 8002292:	4b38      	ldr	r3, [pc, #224]	; (8002374 <HAL_QSPI_MspInit+0x110>)
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800229e:	4b35      	ldr	r3, [pc, #212]	; (8002374 <HAL_QSPI_MspInit+0x110>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a34      	ldr	r2, [pc, #208]	; (8002374 <HAL_QSPI_MspInit+0x110>)
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b32      	ldr	r3, [pc, #200]	; (8002374 <HAL_QSPI_MspInit+0x110>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <HAL_QSPI_MspInit+0x110>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a2e      	ldr	r2, [pc, #184]	; (8002374 <HAL_QSPI_MspInit+0x110>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <HAL_QSPI_MspInit+0x110>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_QSPI_MspInit+0x110>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a28      	ldr	r2, [pc, #160]	; (8002374 <HAL_QSPI_MspInit+0x110>)
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_QSPI_MspInit+0x110>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80022e6:	2304      	movs	r3, #4
 80022e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f2:	2303      	movs	r3, #3
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022f6:	2309      	movs	r3, #9
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	4619      	mov	r1, r3
 8002300:	481d      	ldr	r0, [pc, #116]	; (8002378 <HAL_QSPI_MspInit+0x114>)
 8002302:	f001 fcf1 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002306:	2340      	movs	r3, #64	; 0x40
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002316:	230a      	movs	r3, #10
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 031c 	add.w	r3, r7, #28
 800231e:	4619      	mov	r1, r3
 8002320:	4816      	ldr	r0, [pc, #88]	; (800237c <HAL_QSPI_MspInit+0x118>)
 8002322:	f001 fce1 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002326:	2304      	movs	r3, #4
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002336:	2309      	movs	r3, #9
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	4619      	mov	r1, r3
 8002340:	480e      	ldr	r0, [pc, #56]	; (800237c <HAL_QSPI_MspInit+0x118>)
 8002342:	f001 fcd1 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002346:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800234a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002358:	2309      	movs	r3, #9
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4619      	mov	r1, r3
 8002362:	4807      	ldr	r0, [pc, #28]	; (8002380 <HAL_QSPI_MspInit+0x11c>)
 8002364:	f001 fcc0 	bl	8003ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002368:	bf00      	nop
 800236a:	3730      	adds	r7, #48	; 0x30
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	a0001000 	.word	0xa0001000
 8002374:	40023800 	.word	0x40023800
 8002378:	40021000 	.word	0x40021000
 800237c:	40020400 	.word	0x40020400
 8002380:	40020c00 	.word	0x40020c00

08002384 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <HAL_RTC_MspInit+0x2c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d105      	bne.n	80023a2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_RTC_MspInit+0x30>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <HAL_RTC_MspInit+0x30>)
 800239c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40002800 	.word	0x40002800
 80023b4:	40023800 	.word	0x40023800

080023b8 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80023d8:	d127      	bne.n	800242a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_SPDIFRX_MspInit+0x7c>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a15      	ldr	r2, [pc, #84]	; (8002434 <HAL_SPDIFRX_MspInit+0x7c>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_SPDIFRX_MspInit+0x7c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_SPDIFRX_MspInit+0x7c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_SPDIFRX_MspInit+0x7c>)
 80023f8:	f043 0308 	orr.w	r3, r3, #8
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_SPDIFRX_MspInit+0x7c>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800241a:	2308      	movs	r3, #8
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	4804      	ldr	r0, [pc, #16]	; (8002438 <HAL_SPDIFRX_MspInit+0x80>)
 8002426:	f001 fc5f 	bl	8003ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800242a:	bf00      	nop
 800242c:	3728      	adds	r7, #40	; 0x28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	40020c00 	.word	0x40020c00

0800243c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <HAL_UART_MspInit+0x8c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d12f      	bne.n	80024be <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_UART_MspInit+0x90>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a1a      	ldr	r2, [pc, #104]	; (80024cc <HAL_UART_MspInit+0x90>)
 8002464:	f043 0320 	orr.w	r3, r3, #32
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_UART_MspInit+0x90>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_UART_MspInit+0x90>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a14      	ldr	r2, [pc, #80]	; (80024cc <HAL_UART_MspInit+0x90>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_UART_MspInit+0x90>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800248e:	23c0      	movs	r3, #192	; 0xc0
 8002490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249a:	2303      	movs	r3, #3
 800249c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800249e:	2308      	movs	r3, #8
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4809      	ldr	r0, [pc, #36]	; (80024d0 <HAL_UART_MspInit+0x94>)
 80024aa:	f001 fc1d 	bl	8003ce8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	2047      	movs	r0, #71	; 0x47
 80024b4:	f000 fe62 	bl	800317c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80024b8:	2047      	movs	r0, #71	; 0x47
 80024ba:	f000 fe7b 	bl	80031b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80024be:	bf00      	nop
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40011400 	.word	0x40011400
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40020800 	.word	0x40020800

080024d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80024e8:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <HAL_FMC_MspInit+0x100>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d16d      	bne.n	80025cc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80024f0:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_FMC_MspInit+0x100>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_FMC_MspInit+0x104>)
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	4a37      	ldr	r2, [pc, #220]	; (80025d8 <HAL_FMC_MspInit+0x104>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6393      	str	r3, [r2, #56]	; 0x38
 8002502:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <HAL_FMC_MspInit+0x104>)
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800250e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002512:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251c:	2303      	movs	r3, #3
 800251e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002520:	230c      	movs	r3, #12
 8002522:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	4619      	mov	r1, r3
 8002528:	482c      	ldr	r0, [pc, #176]	; (80025dc <HAL_FMC_MspInit+0x108>)
 800252a:	f001 fbdd 	bl	8003ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800252e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002532:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002540:	230c      	movs	r3, #12
 8002542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	4619      	mov	r1, r3
 8002548:	4825      	ldr	r0, [pc, #148]	; (80025e0 <HAL_FMC_MspInit+0x10c>)
 800254a:	f001 fbcd 	bl	8003ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800254e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002552:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002560:	230c      	movs	r3, #12
 8002562:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	4619      	mov	r1, r3
 8002568:	481e      	ldr	r0, [pc, #120]	; (80025e4 <HAL_FMC_MspInit+0x110>)
 800256a:	f001 fbbd 	bl	8003ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800256e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002572:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002580:	230c      	movs	r3, #12
 8002582:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4817      	ldr	r0, [pc, #92]	; (80025e8 <HAL_FMC_MspInit+0x114>)
 800258a:	f001 fbad 	bl	8003ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800258e:	2328      	movs	r3, #40	; 0x28
 8002590:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259a:	2303      	movs	r3, #3
 800259c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800259e:	230c      	movs	r3, #12
 80025a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4811      	ldr	r0, [pc, #68]	; (80025ec <HAL_FMC_MspInit+0x118>)
 80025a8:	f001 fb9e 	bl	8003ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80025ac:	2308      	movs	r3, #8
 80025ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025bc:	230c      	movs	r3, #12
 80025be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	4619      	mov	r1, r3
 80025c4:	480a      	ldr	r0, [pc, #40]	; (80025f0 <HAL_FMC_MspInit+0x11c>)
 80025c6:	f001 fb8f 	bl	8003ce8 <HAL_GPIO_Init>
 80025ca:	e000      	b.n	80025ce <HAL_FMC_MspInit+0xfa>
    return;
 80025cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000388 	.word	0x20000388
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40021800 	.word	0x40021800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40021400 	.word	0x40021400
 80025ec:	40021c00 	.word	0x40021c00
 80025f0:	40020800 	.word	0x40020800

080025f4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80025fc:	f7ff ff6a 	bl	80024d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2b      	ldr	r2, [pc, #172]	; (80026c4 <HAL_SAI_MspInit+0xbc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d124      	bne.n	8002664 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_SAI_MspInit+0xc0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002622:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <HAL_SAI_MspInit+0xc4>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a29      	ldr	r2, [pc, #164]	; (80026cc <HAL_SAI_MspInit+0xc4>)
 8002628:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
 800262e:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_SAI_MspInit+0xc4>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800263a:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_SAI_MspInit+0xc0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	4a21      	ldr	r2, [pc, #132]	; (80026c8 <HAL_SAI_MspInit+0xc0>)
 8002642:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002644:	23f0      	movs	r3, #240	; 0xf0
 8002646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2300      	movs	r3, #0
 8002652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002654:	230a      	movs	r3, #10
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	4619      	mov	r1, r3
 800265e:	481c      	ldr	r0, [pc, #112]	; (80026d0 <HAL_SAI_MspInit+0xc8>)
 8002660:	f001 fb42 	bl	8003ce8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <HAL_SAI_MspInit+0xcc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d125      	bne.n	80026ba <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <HAL_SAI_MspInit+0xc0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_SAI_MspInit+0xc4>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <HAL_SAI_MspInit+0xc4>)
 800267c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_SAI_MspInit+0xc4>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_SAI_MspInit+0xc0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <HAL_SAI_MspInit+0xc0>)
 8002696:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800269c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026aa:	230a      	movs	r3, #10
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	4808      	ldr	r0, [pc, #32]	; (80026d8 <HAL_SAI_MspInit+0xd0>)
 80026b6:	f001 fb17 	bl	8003ce8 <HAL_GPIO_Init>

    }
}
 80026ba:	bf00      	nop
 80026bc:	3728      	adds	r7, #40	; 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40015c04 	.word	0x40015c04
 80026c8:	2000038c 	.word	0x2000038c
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40015c24 	.word	0x40015c24
 80026d8:	40021800 	.word	0x40021800

080026dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	; 0x30
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	2036      	movs	r0, #54	; 0x36
 80026f2:	f000 fd43 	bl	800317c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026f6:	2036      	movs	r0, #54	; 0x36
 80026f8:	f000 fd5c 	bl	80031b4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_InitTick+0xa0>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	4a1e      	ldr	r2, [pc, #120]	; (800277c <HAL_InitTick+0xa0>)
 8002702:	f043 0310 	orr.w	r3, r3, #16
 8002706:	6413      	str	r3, [r2, #64]	; 0x40
 8002708:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_InitTick+0xa0>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002714:	f107 0210 	add.w	r2, r7, #16
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f003 fc90 	bl	8006044 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002724:	f003 fc66 	bl	8005ff4 <HAL_RCC_GetPCLK1Freq>
 8002728:	4603      	mov	r3, r0
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <HAL_InitTick+0xa4>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0c9b      	lsrs	r3, r3, #18
 8002738:	3b01      	subs	r3, #1
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_InitTick+0xa8>)
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <HAL_InitTick+0xac>)
 8002740:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <HAL_InitTick+0xa8>)
 8002744:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002748:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800274a:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <HAL_InitTick+0xa8>)
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_InitTick+0xa8>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_InitTick+0xa8>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800275c:	4809      	ldr	r0, [pc, #36]	; (8002784 <HAL_InitTick+0xa8>)
 800275e:	f005 f80b 	bl	8007778 <HAL_TIM_Base_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002768:	4806      	ldr	r0, [pc, #24]	; (8002784 <HAL_InitTick+0xa8>)
 800276a:	f005 f83b 	bl	80077e4 <HAL_TIM_Base_Start_IT>
 800276e:	4603      	mov	r3, r0
 8002770:	e000      	b.n	8002774 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
}
 8002774:	4618      	mov	r0, r3
 8002776:	3730      	adds	r7, #48	; 0x30
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40023800 	.word	0x40023800
 8002780:	431bde83 	.word	0x431bde83
 8002784:	2000bb08 	.word	0x2000bb08
 8002788:	40001000 	.word	0x40001000

0800278c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800279e:	e7fe      	b.n	800279e <HardFault_Handler+0x4>

080027a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <MemManage_Handler+0x4>

080027a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <BusFault_Handler+0x4>

080027ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <UsageFault_Handler+0x4>

080027b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <TIM6_DAC_IRQHandler+0x10>)
 80027c6:	f005 f837 	bl	8007838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2000bb08 	.word	0x2000bb08

080027d4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <USART6_IRQHandler+0x10>)
 80027da:	f005 fb23 	bl	8007e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	2000b9c4 	.word	0x2000b9c4

080027e8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <LTDC_IRQHandler+0x10>)
 80027ee:	f002 fbc9 	bl	8004f84 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000b858 	.word	0x2000b858

080027fc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <DMA2D_IRQHandler+0x10>)
 8002802:	f001 f832 	bl	800386a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	2000ba44 	.word	0x2000ba44

08002810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
	return 1;
 8002814:	2301      	movs	r3, #1
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <_kill>:

int _kill(int pid, int sig)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800282a:	f022 ff8b 	bl	8025744 <__errno>
 800282e:	4602      	mov	r2, r0
 8002830:	2316      	movs	r3, #22
 8002832:	6013      	str	r3, [r2, #0]
	return -1;
 8002834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_exit>:

void _exit (int status)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ffe7 	bl	8002820 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002852:	e7fe      	b.n	8002852 <_exit+0x12>

08002854 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	e00a      	b.n	800287c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002866:	f3af 8000 	nop.w
 800286a:	4601      	mov	r1, r0
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	60ba      	str	r2, [r7, #8]
 8002872:	b2ca      	uxtb	r2, r1
 8002874:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3301      	adds	r3, #1
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	429a      	cmp	r2, r3
 8002882:	dbf0      	blt.n	8002866 <_read+0x12>
	}

return len;
 8002884:	687b      	ldr	r3, [r7, #4]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e009      	b.n	80028b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	60ba      	str	r2, [r7, #8]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	3301      	adds	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	dbf1      	blt.n	80028a0 <_write+0x12>
	}
	return len;
 80028bc:	687b      	ldr	r3, [r7, #4]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <_close>:

int _close(int file)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
	return -1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ee:	605a      	str	r2, [r3, #4]
	return 0;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <_isatty>:

int _isatty(int file)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
	return 1;
 8002906:	2301      	movs	r3, #1
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
	return 0;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <_sbrk+0x5c>)
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <_sbrk+0x60>)
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <_sbrk+0x64>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <_sbrk+0x64>)
 800294e:	4a12      	ldr	r2, [pc, #72]	; (8002998 <_sbrk+0x68>)
 8002950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	429a      	cmp	r2, r3
 800295e:	d207      	bcs.n	8002970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002960:	f022 fef0 	bl	8025744 <__errno>
 8002964:	4602      	mov	r2, r0
 8002966:	230c      	movs	r3, #12
 8002968:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
 800296e:	e009      	b.n	8002984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <_sbrk+0x64>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	4a05      	ldr	r2, [pc, #20]	; (8002994 <_sbrk+0x64>)
 8002980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002982:	68fb      	ldr	r3, [r7, #12]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20050000 	.word	0x20050000
 8002990:	00000400 	.word	0x00000400
 8002994:	20000390 	.word	0x20000390
 8002998:	2000bb50 	.word	0x2000bb50

0800299c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <SystemInit+0x28>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <SystemInit+0x28>)
 80029a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <SystemInit+0x28>)
 80029b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029b6:	609a      	str	r2, [r3, #8]
#endif
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ce:	e003      	b.n	80029d8 <LoopCopyDataInit>

080029d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029d6:	3104      	adds	r1, #4

080029d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029d8:	480b      	ldr	r0, [pc, #44]	; (8002a08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029e0:	d3f6      	bcc.n	80029d0 <CopyDataInit>
  ldr  r2, =_sbss
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029e4:	e002      	b.n	80029ec <LoopFillZerobss>

080029e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029e8:	f842 3b04 	str.w	r3, [r2], #4

080029ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029f0:	d3f9      	bcc.n	80029e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029f2:	f7ff ffd3 	bl	800299c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f6:	f022 febd 	bl	8025774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029fa:	f7fe f901 	bl	8000c00 <main>
  bx  lr    
 80029fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a00:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002a04:	080e03a8 	.word	0x080e03a8
  ldr  r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a0c:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8002a10:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8002a14:	2000bb50 	.word	0x2000bb50

08002a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a18:	e7fe      	b.n	8002a18 <ADC_IRQHandler>

08002a1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a1e:	2003      	movs	r0, #3
 8002a20:	f000 fba1 	bl	8003166 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7ff fe59 	bl	80026dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002a2a:	f7ff f8ff 	bl	8001c2c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_IncTick+0x20>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_IncTick+0x24>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_IncTick+0x24>)
 8002a46:	6013      	str	r3, [r2, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000034 	.word	0x20000034
 8002a58:	2000bb48 	.word	0x2000bb48

08002a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_GetTick+0x14>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	2000bb48 	.word	0x2000bb48

08002a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff ffee 	bl	8002a5c <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d005      	beq.n	8002a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_Delay+0x40>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a9a:	bf00      	nop
 8002a9c:	f7ff ffde 	bl	8002a5c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d8f7      	bhi.n	8002a9c <HAL_Delay+0x28>
  {
  }
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000034 	.word	0x20000034

08002ab8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e031      	b.n	8002b32 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff f8d0 	bl	8001c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_ADC_Init+0x84>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	f043 0202 	orr.w	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f964 	bl	8002dd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
 8002b22:	e001      	b.n	8002b28 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	ffffeefd 	.word	0xffffeefd

08002b40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1c>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e12a      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x272>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b09      	cmp	r3, #9
 8002b6a:	d93a      	bls.n	8002be2 <HAL_ADC_ConfigChannel+0xa2>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b74:	d035      	beq.n	8002be2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68d9      	ldr	r1, [r3, #12]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	3b1e      	subs	r3, #30
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43da      	mvns	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	400a      	ands	r2, r1
 8002b9a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a87      	ldr	r2, [pc, #540]	; (8002dc0 <HAL_ADC_ConfigChannel+0x280>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10a      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68d9      	ldr	r1, [r3, #12]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	061a      	lsls	r2, r3, #24
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bba:	e035      	b.n	8002c28 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68d9      	ldr	r1, [r3, #12]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	4618      	mov	r0, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4403      	add	r3, r0
 8002bd4:	3b1e      	subs	r3, #30
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002be0:	e022      	b.n	8002c28 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6919      	ldr	r1, [r3, #16]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43da      	mvns	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	400a      	ands	r2, r1
 8002c04:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6919      	ldr	r1, [r3, #16]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	4618      	mov	r0, r3
 8002c18:	4603      	mov	r3, r0
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4403      	add	r3, r0
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b06      	cmp	r3, #6
 8002c2e:	d824      	bhi.n	8002c7a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	3b05      	subs	r3, #5
 8002c42:	221f      	movs	r2, #31
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	400a      	ands	r2, r1
 8002c50:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	3b05      	subs	r3, #5
 8002c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	635a      	str	r2, [r3, #52]	; 0x34
 8002c78:	e04c      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	d824      	bhi.n	8002ccc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	3b23      	subs	r3, #35	; 0x23
 8002c94:	221f      	movs	r2, #31
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	3b23      	subs	r3, #35	; 0x23
 8002cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cca:	e023      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	3b41      	subs	r3, #65	; 0x41
 8002cde:	221f      	movs	r2, #31
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	400a      	ands	r2, r1
 8002cec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	3b41      	subs	r3, #65	; 0x41
 8002d08:	fa00 f203 	lsl.w	r2, r0, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <HAL_ADC_ConfigChannel+0x284>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d10a      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x1f4>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d26:	d105      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_ADC_ConfigChannel+0x288>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <HAL_ADC_ConfigChannel+0x288>)
 8002d2e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d32:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_ADC_ConfigChannel+0x284>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d109      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x212>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b12      	cmp	r3, #18
 8002d44:	d105      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_ADC_ConfigChannel+0x288>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a1f      	ldr	r2, [pc, #124]	; (8002dc8 <HAL_ADC_ConfigChannel+0x288>)
 8002d4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d50:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_ADC_ConfigChannel+0x284>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d125      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x268>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <HAL_ADC_ConfigChannel+0x280>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d003      	beq.n	8002d6e <HAL_ADC_ConfigChannel+0x22e>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b11      	cmp	r3, #17
 8002d6c:	d11c      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_ADC_ConfigChannel+0x288>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <HAL_ADC_ConfigChannel+0x288>)
 8002d74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d78:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <HAL_ADC_ConfigChannel+0x280>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d111      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_ADC_ConfigChannel+0x28c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a11      	ldr	r2, [pc, #68]	; (8002dd0 <HAL_ADC_ConfigChannel+0x290>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	0c9a      	lsrs	r2, r3, #18
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002d9a:	e002      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f9      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	10000012 	.word	0x10000012
 8002dc4:	40012000 	.word	0x40012000
 8002dc8:	40012300 	.word	0x40012300
 8002dcc:	2000002c 	.word	0x2000002c
 8002dd0:	431bde83 	.word	0x431bde83

08002dd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ddc:	4b78      	ldr	r3, [pc, #480]	; (8002fc0 <ADC_Init+0x1ec>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a77      	ldr	r2, [pc, #476]	; (8002fc0 <ADC_Init+0x1ec>)
 8002de2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002de6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002de8:	4b75      	ldr	r3, [pc, #468]	; (8002fc0 <ADC_Init+0x1ec>)
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4973      	ldr	r1, [pc, #460]	; (8002fc0 <ADC_Init+0x1ec>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	021a      	lsls	r2, r3, #8
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6899      	ldr	r1, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	4a58      	ldr	r2, [pc, #352]	; (8002fc4 <ADC_Init+0x1f0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6899      	ldr	r1, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6899      	ldr	r1, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	e00f      	b.n	8002ece <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ebc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ecc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0202 	bic.w	r2, r2, #2
 8002edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6899      	ldr	r1, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	005a      	lsls	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01b      	beq.n	8002f34 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6859      	ldr	r1, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	3b01      	subs	r3, #1
 8002f28:	035a      	lsls	r2, r3, #13
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	e007      	b.n	8002f44 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	051a      	lsls	r2, r3, #20
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6899      	ldr	r1, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f86:	025a      	lsls	r2, r3, #9
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6899      	ldr	r1, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	029a      	lsls	r2, r3, #10
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	40012300 	.word	0x40012300
 8002fc4:	0f000001 	.word	0x0f000001

08002fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <__NVIC_SetPriorityGrouping+0x40>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff6:	4a04      	ldr	r2, [pc, #16]	; (8003008 <__NVIC_SetPriorityGrouping+0x40>)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	60d3      	str	r3, [r2, #12]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000ed00 	.word	0xe000ed00
 800300c:	05fa0000 	.word	0x05fa0000

08003010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <__NVIC_GetPriorityGrouping+0x18>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 0307 	and.w	r3, r3, #7
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	2b00      	cmp	r3, #0
 800303c:	db0b      	blt.n	8003056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	4907      	ldr	r1, [pc, #28]	; (8003064 <__NVIC_EnableIRQ+0x38>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2001      	movs	r0, #1
 800304e:	fa00 f202 	lsl.w	r2, r0, r2
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	e000e100 	.word	0xe000e100

08003068 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	2b00      	cmp	r3, #0
 8003078:	db10      	blt.n	800309c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	4909      	ldr	r1, [pc, #36]	; (80030a8 <__NVIC_DisableIRQ+0x40>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2001      	movs	r0, #1
 800308a:	fa00 f202 	lsl.w	r2, r0, r2
 800308e:	3320      	adds	r3, #32
 8003090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003094:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003098:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000e100 	.word	0xe000e100

080030ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	db0a      	blt.n	80030d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	490c      	ldr	r1, [pc, #48]	; (80030f8 <__NVIC_SetPriority+0x4c>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	440b      	add	r3, r1
 80030d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d4:	e00a      	b.n	80030ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4908      	ldr	r1, [pc, #32]	; (80030fc <__NVIC_SetPriority+0x50>)
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3b04      	subs	r3, #4
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	440b      	add	r3, r1
 80030ea:	761a      	strb	r2, [r3, #24]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000e100 	.word	0xe000e100
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f1c3 0307 	rsb	r3, r3, #7
 800311a:	2b04      	cmp	r3, #4
 800311c:	bf28      	it	cs
 800311e:	2304      	movcs	r3, #4
 8003120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3304      	adds	r3, #4
 8003126:	2b06      	cmp	r3, #6
 8003128:	d902      	bls.n	8003130 <NVIC_EncodePriority+0x30>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3b03      	subs	r3, #3
 800312e:	e000      	b.n	8003132 <NVIC_EncodePriority+0x32>
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	401a      	ands	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003148:	f04f 31ff 	mov.w	r1, #4294967295
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	43d9      	mvns	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003158:	4313      	orrs	r3, r2
         );
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ff2a 	bl	8002fc8 <__NVIC_SetPriorityGrouping>
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800318e:	f7ff ff3f 	bl	8003010 <__NVIC_GetPriorityGrouping>
 8003192:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	6978      	ldr	r0, [r7, #20]
 800319a:	f7ff ffb1 	bl	8003100 <NVIC_EncodePriority>
 800319e:	4602      	mov	r2, r0
 80031a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff80 	bl	80030ac <__NVIC_SetPriority>
}
 80031ac:	bf00      	nop
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff32 	bl	800302c <__NVIC_EnableIRQ>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff42 	bl	8003068 <__NVIC_DisableIRQ>
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e054      	b.n	80032a8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7f5b      	ldrb	r3, [r3, #29]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe fd8e 	bl	8001d30 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	791b      	ldrb	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10c      	bne.n	800323c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a22      	ldr	r2, [pc, #136]	; (80032b0 <HAL_CRC_Init+0xc4>)
 8003228:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0218 	bic.w	r2, r2, #24
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	e00c      	b.n	8003256 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6899      	ldr	r1, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	461a      	mov	r2, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f834 	bl	80032b4 <HAL_CRCEx_Polynomial_Set>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e028      	b.n	80032a8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	795b      	ldrb	r3, [r3, #5]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d105      	bne.n	800326a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f04f 32ff 	mov.w	r2, #4294967295
 8003266:	611a      	str	r2, [r3, #16]
 8003268:	e004      	b.n	8003274 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6912      	ldr	r2, [r2, #16]
 8003272:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	04c11db7 	.word	0x04c11db7

080032b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032c4:	231f      	movs	r3, #31
 80032c6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80032c8:	bf00      	nop
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1e5a      	subs	r2, r3, #1
 80032ce:	613a      	str	r2, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d009      	beq.n	80032e8 <HAL_CRCEx_Polynomial_Set+0x34>
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b18      	cmp	r3, #24
 80032ec:	d846      	bhi.n	800337c <HAL_CRCEx_Polynomial_Set+0xc8>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003383 	.word	0x08003383
 80032f8:	0800337d 	.word	0x0800337d
 80032fc:	0800337d 	.word	0x0800337d
 8003300:	0800337d 	.word	0x0800337d
 8003304:	0800337d 	.word	0x0800337d
 8003308:	0800337d 	.word	0x0800337d
 800330c:	0800337d 	.word	0x0800337d
 8003310:	0800337d 	.word	0x0800337d
 8003314:	08003371 	.word	0x08003371
 8003318:	0800337d 	.word	0x0800337d
 800331c:	0800337d 	.word	0x0800337d
 8003320:	0800337d 	.word	0x0800337d
 8003324:	0800337d 	.word	0x0800337d
 8003328:	0800337d 	.word	0x0800337d
 800332c:	0800337d 	.word	0x0800337d
 8003330:	0800337d 	.word	0x0800337d
 8003334:	08003365 	.word	0x08003365
 8003338:	0800337d 	.word	0x0800337d
 800333c:	0800337d 	.word	0x0800337d
 8003340:	0800337d 	.word	0x0800337d
 8003344:	0800337d 	.word	0x0800337d
 8003348:	0800337d 	.word	0x0800337d
 800334c:	0800337d 	.word	0x0800337d
 8003350:	0800337d 	.word	0x0800337d
 8003354:	08003359 	.word	0x08003359
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b06      	cmp	r3, #6
 800335c:	d913      	bls.n	8003386 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003362:	e010      	b.n	8003386 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b07      	cmp	r3, #7
 8003368:	d90f      	bls.n	800338a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800336e:	e00c      	b.n	800338a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b0f      	cmp	r3, #15
 8003374:	d90b      	bls.n	800338e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800337a:	e008      	b.n	800338e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	75fb      	strb	r3, [r7, #23]
      break;
 8003380:	e006      	b.n	8003390 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003382:	bf00      	nop
 8003384:	e004      	b.n	8003390 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003386:	bf00      	nop
 8003388:	e002      	b.n	8003390 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800338e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10d      	bne.n	80033b2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f023 0118 	bic.w	r1, r3, #24
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e069      	b.n	80034a6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fe fcc6 	bl	8001d70 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6819      	ldr	r1, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <HAL_DCMI_Init+0xf0>)
 8003406:	400b      	ands	r3, r1
 8003408:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6819      	ldr	r1, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800341e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800342a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003436:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003442:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800344e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b10      	cmp	r3, #16
 800345e:	d112      	bne.n	8003486 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	7f1b      	ldrb	r3, [r3, #28]
 8003464:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	7f5b      	ldrb	r3, [r3, #29]
 800346a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800346c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	7f9b      	ldrb	r3, [r3, #30]
 8003472:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003474:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7fdb      	ldrb	r3, [r3, #31]
 800347c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003482:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003484:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 021e 	orr.w	r2, r2, #30
 8003494:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	ffe0f007 	.word	0xffe0f007

080034b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d004      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2280      	movs	r2, #128	; 0x80
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e00c      	b.n	80034ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2205      	movs	r2, #5
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0201 	bic.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e039      	b.n	800357e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe fce4 	bl	8001eec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	f023 0107 	bic.w	r1, r3, #7
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <HAL_DMA2D_Init+0x90>)
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68d1      	ldr	r1, [r2, #12]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	430b      	orrs	r3, r1
 800356c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	ffffc000 	.word	0xffffc000

0800358c <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e05f      	b.n	800365e <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800359e:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_DMA2D_DeInit+0xdc>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d02e      	beq.n	8003608 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d107      	bne.n	80035c8 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f8c1 	bl	8003740 <HAL_DMA2D_Abort>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d021      	beq.n	8003608 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e04a      	b.n	800365e <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d108      	bne.n	80035e8 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 80035d6:	2100      	movs	r1, #0
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8f7 	bl	80037cc <HAL_DMA2D_CLUTLoading_Abort>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d011      	beq.n	8003608 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e03a      	b.n	800365e <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d108      	bne.n	8003608 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80035f6:	2101      	movs	r1, #1
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f8e7 	bl	80037cc <HAL_DMA2D_CLUTLoading_Abort>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e02a      	b.n	800365e <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	223f      	movs	r2, #63	; 0x3f
 8003616:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2200      	movs	r2, #0
 800361e:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2200      	movs	r2, #0
 8003626:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2200      	movs	r2, #0
 800362e:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2200      	movs	r2, #0
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2200      	movs	r2, #0
 800363e:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7fe fc79 	bl	8001f38 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800

0800366c <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_DMA2D_Start_IT+0x1c>
 8003684:	2302      	movs	r3, #2
 8003686:	e020      	b.n	80036ca <HAL_DMA2D_Start_IT+0x5e>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fa84 	bl	8003bb0 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80036b6:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af02      	add	r7, sp, #8
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_DMA2D_BlendingStart_IT+0x1c>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e024      	b.n	8003738 <HAL_DMA2D_BlendingStart_IT+0x66>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2202      	movs	r2, #2
 80036fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fa4d 	bl	8003bb0 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003724:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0201 	orr.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 0205 	bic.w	r2, r3, #5
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0204 	orr.w	r2, r2, #4
 800375a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800375c:	f7ff f97e 	bl	8002a5c <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003762:	e017      	b.n	8003794 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003764:	f7ff f97a 	bl	8002a5c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003772:	d90f      	bls.n	8003794 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	f043 0220 	orr.w	r2, r3, #32
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2203      	movs	r2, #3
 8003784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e017      	b.n	80037c4 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e0      	bne.n	8003764 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80037b0:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3324      	adds	r3, #36	; 0x24
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0204 	orr.w	r2, r2, #4
 80037ec:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d103      	bne.n	80037fc <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	331c      	adds	r3, #28
 80037fa:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80037fc:	f7ff f92e 	bl	8002a5c <HAL_GetTick>
 8003800:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003802:	e017      	b.n	8003834 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003804:	f7ff f92a 	bl	8002a5c <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003812:	d90f      	bls.n	8003834 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	f043 0220 	orr.w	r2, r3, #32
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2203      	movs	r2, #3
 8003824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e016      	b.n	8003862 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e1      	bne.n	8003804 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800384e:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d026      	beq.n	80038da <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d021      	beq.n	80038da <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	f043 0201 	orr.w	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2201      	movs	r2, #1
 80038b8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2204      	movs	r2, #4
 80038be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d026      	beq.n	8003932 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d021      	beq.n	8003932 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038fc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2220      	movs	r2, #32
 8003904:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	f043 0202 	orr.w	r2, r3, #2
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2204      	movs	r2, #4
 8003916:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d026      	beq.n	800398a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003942:	2b00      	cmp	r3, #0
 8003944:	d021      	beq.n	800398a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003954:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2208      	movs	r2, #8
 800395c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	f043 0204 	orr.w	r2, r3, #4
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2204      	movs	r2, #4
 800396e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d013      	beq.n	80039bc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00e      	beq.n	80039bc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2204      	movs	r2, #4
 80039b4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f853 	bl	8003a62 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d024      	beq.n	8003a10 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01f      	beq.n	8003a10 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2202      	movs	r2, #2
 80039e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01f      	beq.n	8003a5a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01a      	beq.n	8003a5a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a32:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2210      	movs	r2, #16
 8003a3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f80e 	bl	8003a76 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_DMA2D_ConfigLayer+0x20>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e079      	b.n	8003ba0 <HAL_DMA2D_ConfigLayer+0x114>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	3318      	adds	r3, #24
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003ad6:	4b35      	ldr	r3, [pc, #212]	; (8003bac <HAL_DMA2D_ConfigLayer+0x120>)
 8003ad8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b0a      	cmp	r3, #10
 8003ae0:	d003      	beq.n	8003aea <HAL_DMA2D_ConfigLayer+0x5e>
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b09      	cmp	r3, #9
 8003ae8:	d107      	bne.n	8003afa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e005      	b.n	8003b06 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	061b      	lsls	r3, r3, #24
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d120      	bne.n	8003b4e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	ea02 0103 	and.w	r1, r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b0a      	cmp	r3, #10
 8003b34:	d003      	beq.n	8003b3e <HAL_DMA2D_ConfigLayer+0xb2>
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b09      	cmp	r3, #9
 8003b3c:	d127      	bne.n	8003b8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b4c:	e01f      	b.n	8003b8e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	ea02 0103 	and.w	r1, r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b0a      	cmp	r3, #10
 8003b76:	d003      	beq.n	8003b80 <HAL_DMA2D_ConfigLayer+0xf4>
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b09      	cmp	r3, #9
 8003b7e:	d106      	bne.n	8003b8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b8c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	ff03000f 	.word	0xff03000f

08003bb0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b08b      	sub	sp, #44	; 0x2c
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	041a      	lsls	r2, r3, #16
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003be8:	d174      	bne.n	8003cd4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bf0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bf8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c00:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d108      	bne.n	8003c22 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c20:	e053      	b.n	8003cca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d106      	bne.n	8003c38 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
 8003c36:	e048      	b.n	8003cca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d111      	bne.n	8003c64 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	0cdb      	lsrs	r3, r3, #19
 8003c44:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	0a9b      	lsrs	r3, r3, #10
 8003c4a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	08db      	lsrs	r3, r3, #3
 8003c50:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	02db      	lsls	r3, r3, #11
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
 8003c62:	e032      	b.n	8003cca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d117      	bne.n	8003c9c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	0fdb      	lsrs	r3, r3, #31
 8003c70:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	0cdb      	lsrs	r3, r3, #19
 8003c76:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	0adb      	lsrs	r3, r3, #11
 8003c7c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	08db      	lsrs	r3, r3, #3
 8003c82:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	029b      	lsls	r3, r3, #10
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	03db      	lsls	r3, r3, #15
 8003c92:	4313      	orrs	r3, r2
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	e016      	b.n	8003cca <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	0f1b      	lsrs	r3, r3, #28
 8003ca0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	0d1b      	lsrs	r3, r3, #20
 8003ca6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	0b1b      	lsrs	r3, r3, #12
 8003cac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	011a      	lsls	r2, r3, #4
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	031b      	lsls	r3, r3, #12
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003cd2:	e003      	b.n	8003cdc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	60da      	str	r2, [r3, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	372c      	adds	r7, #44	; 0x2c
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	e175      	b.n	8003ff4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d08:	2201      	movs	r2, #1
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	f040 8164 	bne.w	8003fee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d00b      	beq.n	8003d46 <HAL_GPIO_Init+0x5e>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d007      	beq.n	8003d46 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d3a:	2b11      	cmp	r3, #17
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b12      	cmp	r3, #18
 8003d44:	d130      	bne.n	8003da8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	2203      	movs	r2, #3
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	43db      	mvns	r3, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 0201 	and.w	r2, r3, #1
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	2203      	movs	r2, #3
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d003      	beq.n	8003de8 <HAL_GPIO_Init+0x100>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b12      	cmp	r3, #18
 8003de6:	d123      	bne.n	8003e30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	08da      	lsrs	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3208      	adds	r2, #8
 8003df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	220f      	movs	r2, #15
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	08da      	lsrs	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3208      	adds	r2, #8
 8003e2a:	69b9      	ldr	r1, [r7, #24]
 8003e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0203 	and.w	r2, r3, #3
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80be 	beq.w	8003fee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e72:	4b65      	ldr	r3, [pc, #404]	; (8004008 <HAL_GPIO_Init+0x320>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	4a64      	ldr	r2, [pc, #400]	; (8004008 <HAL_GPIO_Init+0x320>)
 8003e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7e:	4b62      	ldr	r3, [pc, #392]	; (8004008 <HAL_GPIO_Init+0x320>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e8a:	4a60      	ldr	r2, [pc, #384]	; (800400c <HAL_GPIO_Init+0x324>)
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	3302      	adds	r3, #2
 8003e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	220f      	movs	r2, #15
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a57      	ldr	r2, [pc, #348]	; (8004010 <HAL_GPIO_Init+0x328>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d037      	beq.n	8003f26 <HAL_GPIO_Init+0x23e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a56      	ldr	r2, [pc, #344]	; (8004014 <HAL_GPIO_Init+0x32c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d031      	beq.n	8003f22 <HAL_GPIO_Init+0x23a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a55      	ldr	r2, [pc, #340]	; (8004018 <HAL_GPIO_Init+0x330>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02b      	beq.n	8003f1e <HAL_GPIO_Init+0x236>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a54      	ldr	r2, [pc, #336]	; (800401c <HAL_GPIO_Init+0x334>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d025      	beq.n	8003f1a <HAL_GPIO_Init+0x232>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a53      	ldr	r2, [pc, #332]	; (8004020 <HAL_GPIO_Init+0x338>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01f      	beq.n	8003f16 <HAL_GPIO_Init+0x22e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_GPIO_Init+0x33c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d019      	beq.n	8003f12 <HAL_GPIO_Init+0x22a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a51      	ldr	r2, [pc, #324]	; (8004028 <HAL_GPIO_Init+0x340>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <HAL_GPIO_Init+0x226>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a50      	ldr	r2, [pc, #320]	; (800402c <HAL_GPIO_Init+0x344>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00d      	beq.n	8003f0a <HAL_GPIO_Init+0x222>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4f      	ldr	r2, [pc, #316]	; (8004030 <HAL_GPIO_Init+0x348>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <HAL_GPIO_Init+0x21e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4e      	ldr	r2, [pc, #312]	; (8004034 <HAL_GPIO_Init+0x34c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_GPIO_Init+0x21a>
 8003efe:	2309      	movs	r3, #9
 8003f00:	e012      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f02:	230a      	movs	r3, #10
 8003f04:	e010      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f06:	2308      	movs	r3, #8
 8003f08:	e00e      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f0a:	2307      	movs	r3, #7
 8003f0c:	e00c      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f0e:	2306      	movs	r3, #6
 8003f10:	e00a      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f12:	2305      	movs	r3, #5
 8003f14:	e008      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f16:	2304      	movs	r3, #4
 8003f18:	e006      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e004      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e002      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f26:	2300      	movs	r3, #0
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	f002 0203 	and.w	r2, r2, #3
 8003f2e:	0092      	lsls	r2, r2, #2
 8003f30:	4093      	lsls	r3, r2
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f38:	4934      	ldr	r1, [pc, #208]	; (800400c <HAL_GPIO_Init+0x324>)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	3302      	adds	r3, #2
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f46:	4b3c      	ldr	r3, [pc, #240]	; (8004038 <HAL_GPIO_Init+0x350>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f6a:	4a33      	ldr	r2, [pc, #204]	; (8004038 <HAL_GPIO_Init+0x350>)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f70:	4b31      	ldr	r3, [pc, #196]	; (8004038 <HAL_GPIO_Init+0x350>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f94:	4a28      	ldr	r2, [pc, #160]	; (8004038 <HAL_GPIO_Init+0x350>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f9a:	4b27      	ldr	r3, [pc, #156]	; (8004038 <HAL_GPIO_Init+0x350>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fbe:	4a1e      	ldr	r2, [pc, #120]	; (8004038 <HAL_GPIO_Init+0x350>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fc4:	4b1c      	ldr	r3, [pc, #112]	; (8004038 <HAL_GPIO_Init+0x350>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fe8:	4a13      	ldr	r2, [pc, #76]	; (8004038 <HAL_GPIO_Init+0x350>)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b0f      	cmp	r3, #15
 8003ff8:	f67f ae86 	bls.w	8003d08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3724      	adds	r7, #36	; 0x24
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	40023800 	.word	0x40023800
 800400c:	40013800 	.word	0x40013800
 8004010:	40020000 	.word	0x40020000
 8004014:	40020400 	.word	0x40020400
 8004018:	40020800 	.word	0x40020800
 800401c:	40020c00 	.word	0x40020c00
 8004020:	40021000 	.word	0x40021000
 8004024:	40021400 	.word	0x40021400
 8004028:	40021800 	.word	0x40021800
 800402c:	40021c00 	.word	0x40021c00
 8004030:	40022000 	.word	0x40022000
 8004034:	40022400 	.word	0x40022400
 8004038:	40013c00 	.word	0x40013c00

0800403c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e0d9      	b.n	800420c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004058:	2201      	movs	r2, #1
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	429a      	cmp	r2, r3
 8004070:	f040 80c9 	bne.w	8004206 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004074:	4a6a      	ldr	r2, [pc, #424]	; (8004220 <HAL_GPIO_DeInit+0x1e4>)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	089b      	lsrs	r3, r3, #2
 800407a:	3302      	adds	r3, #2
 800407c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004080:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	220f      	movs	r2, #15
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	4013      	ands	r3, r2
 8004094:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a62      	ldr	r2, [pc, #392]	; (8004224 <HAL_GPIO_DeInit+0x1e8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d037      	beq.n	800410e <HAL_GPIO_DeInit+0xd2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a61      	ldr	r2, [pc, #388]	; (8004228 <HAL_GPIO_DeInit+0x1ec>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d031      	beq.n	800410a <HAL_GPIO_DeInit+0xce>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a60      	ldr	r2, [pc, #384]	; (800422c <HAL_GPIO_DeInit+0x1f0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d02b      	beq.n	8004106 <HAL_GPIO_DeInit+0xca>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a5f      	ldr	r2, [pc, #380]	; (8004230 <HAL_GPIO_DeInit+0x1f4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d025      	beq.n	8004102 <HAL_GPIO_DeInit+0xc6>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a5e      	ldr	r2, [pc, #376]	; (8004234 <HAL_GPIO_DeInit+0x1f8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01f      	beq.n	80040fe <HAL_GPIO_DeInit+0xc2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a5d      	ldr	r2, [pc, #372]	; (8004238 <HAL_GPIO_DeInit+0x1fc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d019      	beq.n	80040fa <HAL_GPIO_DeInit+0xbe>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a5c      	ldr	r2, [pc, #368]	; (800423c <HAL_GPIO_DeInit+0x200>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_GPIO_DeInit+0xba>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a5b      	ldr	r2, [pc, #364]	; (8004240 <HAL_GPIO_DeInit+0x204>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00d      	beq.n	80040f2 <HAL_GPIO_DeInit+0xb6>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a5a      	ldr	r2, [pc, #360]	; (8004244 <HAL_GPIO_DeInit+0x208>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <HAL_GPIO_DeInit+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a59      	ldr	r2, [pc, #356]	; (8004248 <HAL_GPIO_DeInit+0x20c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d101      	bne.n	80040ea <HAL_GPIO_DeInit+0xae>
 80040e6:	2309      	movs	r3, #9
 80040e8:	e012      	b.n	8004110 <HAL_GPIO_DeInit+0xd4>
 80040ea:	230a      	movs	r3, #10
 80040ec:	e010      	b.n	8004110 <HAL_GPIO_DeInit+0xd4>
 80040ee:	2308      	movs	r3, #8
 80040f0:	e00e      	b.n	8004110 <HAL_GPIO_DeInit+0xd4>
 80040f2:	2307      	movs	r3, #7
 80040f4:	e00c      	b.n	8004110 <HAL_GPIO_DeInit+0xd4>
 80040f6:	2306      	movs	r3, #6
 80040f8:	e00a      	b.n	8004110 <HAL_GPIO_DeInit+0xd4>
 80040fa:	2305      	movs	r3, #5
 80040fc:	e008      	b.n	8004110 <HAL_GPIO_DeInit+0xd4>
 80040fe:	2304      	movs	r3, #4
 8004100:	e006      	b.n	8004110 <HAL_GPIO_DeInit+0xd4>
 8004102:	2303      	movs	r3, #3
 8004104:	e004      	b.n	8004110 <HAL_GPIO_DeInit+0xd4>
 8004106:	2302      	movs	r3, #2
 8004108:	e002      	b.n	8004110 <HAL_GPIO_DeInit+0xd4>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <HAL_GPIO_DeInit+0xd4>
 800410e:	2300      	movs	r3, #0
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	f002 0203 	and.w	r2, r2, #3
 8004116:	0092      	lsls	r2, r2, #2
 8004118:	4093      	lsls	r3, r2
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	429a      	cmp	r2, r3
 800411e:	d132      	bne.n	8004186 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004120:	4b4a      	ldr	r3, [pc, #296]	; (800424c <HAL_GPIO_DeInit+0x210>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	43db      	mvns	r3, r3
 8004128:	4948      	ldr	r1, [pc, #288]	; (800424c <HAL_GPIO_DeInit+0x210>)
 800412a:	4013      	ands	r3, r2
 800412c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800412e:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_GPIO_DeInit+0x210>)
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	43db      	mvns	r3, r3
 8004136:	4945      	ldr	r1, [pc, #276]	; (800424c <HAL_GPIO_DeInit+0x210>)
 8004138:	4013      	ands	r3, r2
 800413a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800413c:	4b43      	ldr	r3, [pc, #268]	; (800424c <HAL_GPIO_DeInit+0x210>)
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	43db      	mvns	r3, r3
 8004144:	4941      	ldr	r1, [pc, #260]	; (800424c <HAL_GPIO_DeInit+0x210>)
 8004146:	4013      	ands	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800414a:	4b40      	ldr	r3, [pc, #256]	; (800424c <HAL_GPIO_DeInit+0x210>)
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43db      	mvns	r3, r3
 8004152:	493e      	ldr	r1, [pc, #248]	; (800424c <HAL_GPIO_DeInit+0x210>)
 8004154:	4013      	ands	r3, r2
 8004156:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	220f      	movs	r2, #15
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004168:	4a2d      	ldr	r2, [pc, #180]	; (8004220 <HAL_GPIO_DeInit+0x1e4>)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	3302      	adds	r3, #2
 8004170:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	43da      	mvns	r2, r3
 8004178:	4829      	ldr	r0, [pc, #164]	; (8004220 <HAL_GPIO_DeInit+0x1e4>)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	400a      	ands	r2, r1
 8004180:	3302      	adds	r3, #2
 8004182:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2103      	movs	r1, #3
 8004190:	fa01 f303 	lsl.w	r3, r1, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	401a      	ands	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	08da      	lsrs	r2, r3, #3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3208      	adds	r2, #8
 80041a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	220f      	movs	r2, #15
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	08d2      	lsrs	r2, r2, #3
 80041bc:	4019      	ands	r1, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3208      	adds	r2, #8
 80041c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	2103      	movs	r1, #3
 80041d0:	fa01 f303 	lsl.w	r3, r1, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	401a      	ands	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	2101      	movs	r1, #1
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	401a      	ands	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	2103      	movs	r1, #3
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	401a      	ands	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	3301      	adds	r3, #1
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b0f      	cmp	r3, #15
 8004210:	f67f af22 	bls.w	8004058 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40013800 	.word	0x40013800
 8004224:	40020000 	.word	0x40020000
 8004228:	40020400 	.word	0x40020400
 800422c:	40020800 	.word	0x40020800
 8004230:	40020c00 	.word	0x40020c00
 8004234:	40021000 	.word	0x40021000
 8004238:	40021400 	.word	0x40021400
 800423c:	40021800 	.word	0x40021800
 8004240:	40021c00 	.word	0x40021c00
 8004244:	40022000 	.word	0x40022000
 8004248:	40022400 	.word	0x40022400
 800424c:	40013c00 	.word	0x40013c00

08004250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]
 800425c:	4613      	mov	r3, r2
 800425e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004260:	787b      	ldrb	r3, [r7, #1]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004266:	887a      	ldrh	r2, [r7, #2]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800426c:	e003      	b.n	8004276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800426e:	887b      	ldrh	r3, [r7, #2]
 8004270:	041a      	lsls	r2, r3, #16
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	619a      	str	r2, [r3, #24]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e07f      	b.n	8004396 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd fe5e 	bl	8001f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	; 0x24
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d107      	bne.n	80042fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	e006      	b.n	800430c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800430a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d104      	bne.n	800431e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800431c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6859      	ldr	r1, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <HAL_I2C_Init+0x11c>)
 800432a:	430b      	orrs	r3, r1
 800432c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800433c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	ea42 0103 	orr.w	r1, r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	021a      	lsls	r2, r3, #8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69d9      	ldr	r1, [r3, #28]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1a      	ldr	r2, [r3, #32]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	02008000 	.word	0x02008000

080043a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e021      	b.n	80043fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2224      	movs	r2, #36	; 0x24
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fd fe44 	bl	800205c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	4608      	mov	r0, r1
 800440e:	4611      	mov	r1, r2
 8004410:	461a      	mov	r2, r3
 8004412:	4603      	mov	r3, r0
 8004414:	817b      	strh	r3, [r7, #10]
 8004416:	460b      	mov	r3, r1
 8004418:	813b      	strh	r3, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b20      	cmp	r3, #32
 8004428:	f040 80f9 	bne.w	800461e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_I2C_Mem_Write+0x34>
 8004432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	d105      	bne.n	8004444 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0ed      	b.n	8004620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_I2C_Mem_Write+0x4e>
 800444e:	2302      	movs	r3, #2
 8004450:	e0e6      	b.n	8004620 <HAL_I2C_Mem_Write+0x21c>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800445a:	f7fe faff 	bl	8002a5c <HAL_GetTick>
 800445e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2319      	movs	r3, #25
 8004466:	2201      	movs	r2, #1
 8004468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fad1 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0d1      	b.n	8004620 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2221      	movs	r2, #33	; 0x21
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2240      	movs	r2, #64	; 0x40
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a3a      	ldr	r2, [r7, #32]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800449c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044a4:	88f8      	ldrh	r0, [r7, #6]
 80044a6:	893a      	ldrh	r2, [r7, #8]
 80044a8:	8979      	ldrh	r1, [r7, #10]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4603      	mov	r3, r0
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f9e1 	bl	800487c <I2C_RequestMemoryWrite>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0a9      	b.n	8004620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2bff      	cmp	r3, #255	; 0xff
 80044d4:	d90e      	bls.n	80044f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	22ff      	movs	r2, #255	; 0xff
 80044da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	8979      	ldrh	r1, [r7, #10]
 80044e4:	2300      	movs	r3, #0
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fbb3 	bl	8004c58 <I2C_TransferConfig>
 80044f2:	e00f      	b.n	8004514 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	b2da      	uxtb	r2, r3
 8004504:	8979      	ldrh	r1, [r7, #10]
 8004506:	2300      	movs	r3, #0
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fba2 	bl	8004c58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fabb 	bl	8004a94 <I2C_WaitOnTXISFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e07b      	b.n	8004620 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004542:	b29b      	uxth	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d034      	beq.n	80045cc <HAL_I2C_Mem_Write+0x1c8>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	d130      	bne.n	80045cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	2200      	movs	r2, #0
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fa4d 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e04d      	b.n	8004620 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2bff      	cmp	r3, #255	; 0xff
 800458c:	d90e      	bls.n	80045ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	22ff      	movs	r2, #255	; 0xff
 8004592:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	b2da      	uxtb	r2, r3
 800459a:	8979      	ldrh	r1, [r7, #10]
 800459c:	2300      	movs	r3, #0
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 fb57 	bl	8004c58 <I2C_TransferConfig>
 80045aa:	e00f      	b.n	80045cc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	8979      	ldrh	r1, [r7, #10]
 80045be:	2300      	movs	r3, #0
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fb46 	bl	8004c58 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d19e      	bne.n	8004514 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fa9a 	bl	8004b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e01a      	b.n	8004620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2220      	movs	r2, #32
 80045f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <HAL_I2C_Mem_Write+0x224>)
 80045fe:	400b      	ands	r3, r1
 8004600:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	fe00e800 	.word	0xfe00e800

0800462c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af02      	add	r7, sp, #8
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	4608      	mov	r0, r1
 8004636:	4611      	mov	r1, r2
 8004638:	461a      	mov	r2, r3
 800463a:	4603      	mov	r3, r0
 800463c:	817b      	strh	r3, [r7, #10]
 800463e:	460b      	mov	r3, r1
 8004640:	813b      	strh	r3, [r7, #8]
 8004642:	4613      	mov	r3, r2
 8004644:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b20      	cmp	r3, #32
 8004650:	f040 80fd 	bne.w	800484e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_I2C_Mem_Read+0x34>
 800465a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d105      	bne.n	800466c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004666:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0f1      	b.n	8004850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_I2C_Mem_Read+0x4e>
 8004676:	2302      	movs	r3, #2
 8004678:	e0ea      	b.n	8004850 <HAL_I2C_Mem_Read+0x224>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004682:	f7fe f9eb 	bl	8002a5c <HAL_GetTick>
 8004686:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2319      	movs	r3, #25
 800468e:	2201      	movs	r2, #1
 8004690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f9bd 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0d5      	b.n	8004850 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2222      	movs	r2, #34	; 0x22
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2240      	movs	r2, #64	; 0x40
 80046b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a3a      	ldr	r2, [r7, #32]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046cc:	88f8      	ldrh	r0, [r7, #6]
 80046ce:	893a      	ldrh	r2, [r7, #8]
 80046d0:	8979      	ldrh	r1, [r7, #10]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	4603      	mov	r3, r0
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f921 	bl	8004924 <I2C_RequestMemoryRead>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0ad      	b.n	8004850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2bff      	cmp	r3, #255	; 0xff
 80046fc:	d90e      	bls.n	800471c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	22ff      	movs	r2, #255	; 0xff
 8004702:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004708:	b2da      	uxtb	r2, r3
 800470a:	8979      	ldrh	r1, [r7, #10]
 800470c:	4b52      	ldr	r3, [pc, #328]	; (8004858 <HAL_I2C_Mem_Read+0x22c>)
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 fa9f 	bl	8004c58 <I2C_TransferConfig>
 800471a:	e00f      	b.n	800473c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	b2da      	uxtb	r2, r3
 800472c:	8979      	ldrh	r1, [r7, #10]
 800472e:	4b4a      	ldr	r3, [pc, #296]	; (8004858 <HAL_I2C_Mem_Read+0x22c>)
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fa8e 	bl	8004c58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	2200      	movs	r2, #0
 8004744:	2104      	movs	r1, #4
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f964 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e07c      	b.n	8004850 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d034      	beq.n	80047fc <HAL_I2C_Mem_Read+0x1d0>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004796:	2b00      	cmp	r3, #0
 8004798:	d130      	bne.n	80047fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	2200      	movs	r2, #0
 80047a2:	2180      	movs	r1, #128	; 0x80
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f935 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e04d      	b.n	8004850 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2bff      	cmp	r3, #255	; 0xff
 80047bc:	d90e      	bls.n	80047dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	22ff      	movs	r2, #255	; 0xff
 80047c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	8979      	ldrh	r1, [r7, #10]
 80047cc:	2300      	movs	r3, #0
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 fa3f 	bl	8004c58 <I2C_TransferConfig>
 80047da:	e00f      	b.n	80047fc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	8979      	ldrh	r1, [r7, #10]
 80047ee:	2300      	movs	r3, #0
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fa2e 	bl	8004c58 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d19a      	bne.n	800473c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f982 	bl	8004b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e01a      	b.n	8004850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2220      	movs	r2, #32
 8004820:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6859      	ldr	r1, [r3, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_I2C_Mem_Read+0x230>)
 800482e:	400b      	ands	r3, r1
 8004830:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	80002400 	.word	0x80002400
 800485c:	fe00e800 	.word	0xfe00e800

08004860 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800486e:	b2db      	uxtb	r3, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	4608      	mov	r0, r1
 8004886:	4611      	mov	r1, r2
 8004888:	461a      	mov	r2, r3
 800488a:	4603      	mov	r3, r0
 800488c:	817b      	strh	r3, [r7, #10]
 800488e:	460b      	mov	r3, r1
 8004890:	813b      	strh	r3, [r7, #8]
 8004892:	4613      	mov	r3, r2
 8004894:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	8979      	ldrh	r1, [r7, #10]
 800489c:	4b20      	ldr	r3, [pc, #128]	; (8004920 <I2C_RequestMemoryWrite+0xa4>)
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f9d7 	bl	8004c58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	69b9      	ldr	r1, [r7, #24]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f8f0 	bl	8004a94 <I2C_WaitOnTXISFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e02c      	b.n	8004918 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d105      	bne.n	80048d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048c4:	893b      	ldrh	r3, [r7, #8]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	629a      	str	r2, [r3, #40]	; 0x28
 80048ce:	e015      	b.n	80048fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048d0:	893b      	ldrh	r3, [r7, #8]
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	69b9      	ldr	r1, [r7, #24]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f8d6 	bl	8004a94 <I2C_WaitOnTXISFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e012      	b.n	8004918 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048f2:	893b      	ldrh	r3, [r7, #8]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2200      	movs	r2, #0
 8004904:	2180      	movs	r1, #128	; 0x80
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f884 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	80002000 	.word	0x80002000

08004924 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	4608      	mov	r0, r1
 800492e:	4611      	mov	r1, r2
 8004930:	461a      	mov	r2, r3
 8004932:	4603      	mov	r3, r0
 8004934:	817b      	strh	r3, [r7, #10]
 8004936:	460b      	mov	r3, r1
 8004938:	813b      	strh	r3, [r7, #8]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	8979      	ldrh	r1, [r7, #10]
 8004944:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <I2C_RequestMemoryRead+0xa4>)
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2300      	movs	r3, #0
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 f984 	bl	8004c58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	69b9      	ldr	r1, [r7, #24]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f89d 	bl	8004a94 <I2C_WaitOnTXISFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e02c      	b.n	80049be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d105      	bne.n	8004976 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800496a:	893b      	ldrh	r3, [r7, #8]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
 8004974:	e015      	b.n	80049a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004976:	893b      	ldrh	r3, [r7, #8]
 8004978:	0a1b      	lsrs	r3, r3, #8
 800497a:	b29b      	uxth	r3, r3
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	69b9      	ldr	r1, [r7, #24]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f883 	bl	8004a94 <I2C_WaitOnTXISFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e012      	b.n	80049be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004998:	893b      	ldrh	r3, [r7, #8]
 800499a:	b2da      	uxtb	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2200      	movs	r2, #0
 80049aa:	2140      	movs	r1, #64	; 0x40
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f831 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	80002000 	.word	0x80002000

080049cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d103      	bne.n	80049ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2200      	movs	r2, #0
 80049e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d007      	beq.n	8004a08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	619a      	str	r2, [r3, #24]
  }
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	4613      	mov	r3, r2
 8004a22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a24:	e022      	b.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	d01e      	beq.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2e:	f7fe f815 	bl	8002a5c <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d302      	bcc.n	8004a44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d113      	bne.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a48:	f043 0220 	orr.w	r2, r3, #32
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e00f      	b.n	8004a8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4013      	ands	r3, r2
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d0cd      	beq.n	8004a26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004aa0:	e02c      	b.n	8004afc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f870 	bl	8004b8c <I2C_IsAcknowledgeFailed>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e02a      	b.n	8004b0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d01e      	beq.n	8004afc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f7fd ffcd 	bl	8002a5c <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d113      	bne.n	8004afc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e007      	b.n	8004b0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d1cb      	bne.n	8004aa2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b20:	e028      	b.n	8004b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 f830 	bl	8004b8c <I2C_IsAcknowledgeFailed>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e026      	b.n	8004b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b36:	f7fd ff91 	bl	8002a5c <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d113      	bne.n	8004b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e007      	b.n	8004b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d1cf      	bne.n	8004b22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d151      	bne.n	8004c4a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ba6:	e022      	b.n	8004bee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bae:	d01e      	beq.n	8004bee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb0:	f7fd ff54 	bl	8002a5c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d302      	bcc.n	8004bc6 <I2C_IsAcknowledgeFailed+0x3a>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d113      	bne.n	8004bee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bca:	f043 0220 	orr.w	r2, r3, #32
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e02e      	b.n	8004c4c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d1d5      	bne.n	8004ba8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2210      	movs	r2, #16
 8004c02:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f7ff fedd 	bl	80049cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6859      	ldr	r1, [r3, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <I2C_IsAcknowledgeFailed+0xc8>)
 8004c1e:	400b      	ands	r3, r1
 8004c20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	f043 0204 	orr.w	r2, r3, #4
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	fe00e800 	.word	0xfe00e800

08004c58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	460b      	mov	r3, r1
 8004c64:	817b      	strh	r3, [r7, #10]
 8004c66:	4613      	mov	r3, r2
 8004c68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	0d5b      	lsrs	r3, r3, #21
 8004c74:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004c78:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <I2C_TransferConfig+0x58>)
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	ea02 0103 	and.w	r1, r2, r3
 8004c82:	897b      	ldrh	r3, [r7, #10]
 8004c84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c88:	7a7b      	ldrb	r3, [r7, #9]
 8004c8a:	041b      	lsls	r3, r3, #16
 8004c8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	431a      	orrs	r2, r3
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	03ff63ff 	.word	0x03ff63ff

08004cb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d138      	bne.n	8004d3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e032      	b.n	8004d3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2224      	movs	r2, #36	; 0x24
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6819      	ldr	r1, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e000      	b.n	8004d3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d3c:	2302      	movs	r3, #2
  }
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d139      	bne.n	8004dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e033      	b.n	8004dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2224      	movs	r2, #36	; 0x24
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dd4:	2302      	movs	r3, #2
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e0bf      	b.n	8004f76 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fd f962 	bl	80020d4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004e26:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6999      	ldr	r1, [r3, #24]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e3c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6899      	ldr	r1, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b4a      	ldr	r3, [pc, #296]	; (8004f80 <HAL_LTDC_Init+0x19c>)
 8004e58:	400b      	ands	r3, r1
 8004e5a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6899      	ldr	r1, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68d9      	ldr	r1, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4b3e      	ldr	r3, [pc, #248]	; (8004f80 <HAL_LTDC_Init+0x19c>)
 8004e86:	400b      	ands	r3, r1
 8004e88:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	041b      	lsls	r3, r3, #16
 8004e90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68d9      	ldr	r1, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1a      	ldr	r2, [r3, #32]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6919      	ldr	r1, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b33      	ldr	r3, [pc, #204]	; (8004f80 <HAL_LTDC_Init+0x19c>)
 8004eb4:	400b      	ands	r3, r1
 8004eb6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6919      	ldr	r1, [r3, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6959      	ldr	r1, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4b27      	ldr	r3, [pc, #156]	; (8004f80 <HAL_LTDC_Init+0x19c>)
 8004ee2:	400b      	ands	r3, r1
 8004ee4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6959      	ldr	r1, [r3, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f0a:	021b      	lsls	r3, r3, #8
 8004f0c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0206 	orr.w	r2, r2, #6
 8004f52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	f000f800 	.word	0xf000f800

08004f84 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d023      	beq.n	8004fee <HAL_LTDC_IRQHandler+0x6a>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01e      	beq.n	8004fee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0204 	bic.w	r2, r2, #4
 8004fbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fce:	f043 0201 	orr.w	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2204      	movs	r2, #4
 8004fdc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f86f 	bl	80050cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d023      	beq.n	8005040 <HAL_LTDC_IRQHandler+0xbc>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01e      	beq.n	8005040 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0202 	bic.w	r2, r2, #2
 8005010:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2202      	movs	r2, #2
 8005018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005020:	f043 0202 	orr.w	r2, r3, #2
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2204      	movs	r2, #4
 800502e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f846 	bl	80050cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01b      	beq.n	8005082 <HAL_LTDC_IRQHandler+0xfe>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d016      	beq.n	8005082 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2201      	movs	r2, #1
 800506a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f010 fb2b 	bl	80156d8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01b      	beq.n	80050c4 <HAL_LTDC_IRQHandler+0x140>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d016      	beq.n	80050c4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0208 	bic.w	r2, r2, #8
 80050a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2208      	movs	r2, #8
 80050ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f80e 	bl	80050e0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80050f4:	b5b0      	push	{r4, r5, r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_LTDC_ConfigLayer+0x1a>
 800510a:	2302      	movs	r3, #2
 800510c:	e02c      	b.n	8005168 <HAL_LTDC_ConfigLayer+0x74>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2202      	movs	r2, #2
 800511a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2134      	movs	r1, #52	; 0x34
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	4413      	add	r3, r2
 800512a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4614      	mov	r4, r2
 8005132:	461d      	mov	r5, r3
 8005134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800513a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800513c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800513e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	68b9      	ldr	r1, [r7, #8]
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f849 	bl	80051e0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2201      	movs	r2, #1
 8005154:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bdb0      	pop	{r4, r5, r7, pc}

08005170 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_LTDC_ProgramLineEvent+0x18>
 8005184:	2302      	movs	r3, #2
 8005186:	e023      	b.n	80051d0 <HAL_LTDC_ProgramLineEvent+0x60>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0201 	bic.w	r2, r2, #1
 80051a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80051a8:	4a0c      	ldr	r2, [pc, #48]	; (80051dc <HAL_LTDC_ProgramLineEvent+0x6c>)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	40016800 	.word	0x40016800

080051e0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b089      	sub	sp, #36	; 0x24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	0c1b      	lsrs	r3, r3, #16
 80051f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051fc:	4413      	add	r3, r2
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	01db      	lsls	r3, r3, #7
 800520c:	4413      	add	r3, r2
 800520e:	3384      	adds	r3, #132	; 0x84
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	4611      	mov	r1, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	01d2      	lsls	r2, r2, #7
 800521c:	440a      	add	r2, r1
 800521e:	3284      	adds	r2, #132	; 0x84
 8005220:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005224:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	0c1b      	lsrs	r3, r3, #16
 8005232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005236:	4413      	add	r3, r2
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4619      	mov	r1, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	01db      	lsls	r3, r3, #7
 8005244:	440b      	add	r3, r1
 8005246:	3384      	adds	r3, #132	; 0x84
 8005248:	4619      	mov	r1, r3
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4313      	orrs	r3, r2
 800524e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800525e:	4413      	add	r3, r2
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	01db      	lsls	r3, r3, #7
 800526e:	4413      	add	r3, r2
 8005270:	3384      	adds	r3, #132	; 0x84
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	4611      	mov	r1, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	01d2      	lsls	r2, r2, #7
 800527e:	440a      	add	r2, r1
 8005280:	3284      	adds	r2, #132	; 0x84
 8005282:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005286:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005296:	4413      	add	r3, r2
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4619      	mov	r1, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	01db      	lsls	r3, r3, #7
 80052a4:	440b      	add	r3, r1
 80052a6:	3384      	adds	r3, #132	; 0x84
 80052a8:	4619      	mov	r1, r3
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	01db      	lsls	r3, r3, #7
 80052ba:	4413      	add	r3, r2
 80052bc:	3384      	adds	r3, #132	; 0x84
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	6812      	ldr	r2, [r2, #0]
 80052c4:	4611      	mov	r1, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	01d2      	lsls	r2, r2, #7
 80052ca:	440a      	add	r2, r1
 80052cc:	3284      	adds	r2, #132	; 0x84
 80052ce:	f023 0307 	bic.w	r3, r3, #7
 80052d2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	01db      	lsls	r3, r3, #7
 80052de:	4413      	add	r3, r2
 80052e0:	3384      	adds	r3, #132	; 0x84
 80052e2:	461a      	mov	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80052fa:	041b      	lsls	r3, r3, #16
 80052fc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	061b      	lsls	r3, r3, #24
 8005304:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	01db      	lsls	r3, r3, #7
 8005310:	4413      	add	r3, r2
 8005312:	3384      	adds	r3, #132	; 0x84
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	01db      	lsls	r3, r3, #7
 8005320:	4413      	add	r3, r2
 8005322:	3384      	adds	r3, #132	; 0x84
 8005324:	461a      	mov	r2, r3
 8005326:	2300      	movs	r3, #0
 8005328:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005330:	461a      	mov	r2, r3
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	431a      	orrs	r2, r3
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	431a      	orrs	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4619      	mov	r1, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	01db      	lsls	r3, r3, #7
 8005344:	440b      	add	r3, r1
 8005346:	3384      	adds	r3, #132	; 0x84
 8005348:	4619      	mov	r1, r3
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	01db      	lsls	r3, r3, #7
 800535a:	4413      	add	r3, r2
 800535c:	3384      	adds	r3, #132	; 0x84
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	4611      	mov	r1, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	01d2      	lsls	r2, r2, #7
 800536a:	440a      	add	r2, r1
 800536c:	3284      	adds	r2, #132	; 0x84
 800536e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005372:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	01db      	lsls	r3, r3, #7
 800537e:	4413      	add	r3, r2
 8005380:	3384      	adds	r3, #132	; 0x84
 8005382:	461a      	mov	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	01db      	lsls	r3, r3, #7
 8005394:	4413      	add	r3, r2
 8005396:	3384      	adds	r3, #132	; 0x84
 8005398:	69da      	ldr	r2, [r3, #28]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4619      	mov	r1, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	01db      	lsls	r3, r3, #7
 80053a4:	440b      	add	r3, r1
 80053a6:	3384      	adds	r3, #132	; 0x84
 80053a8:	4619      	mov	r1, r3
 80053aa:	4b58      	ldr	r3, [pc, #352]	; (800550c <LTDC_SetConfig+0x32c>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	68f9      	ldr	r1, [r7, #12]
 80053ba:	6809      	ldr	r1, [r1, #0]
 80053bc:	4608      	mov	r0, r1
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	01c9      	lsls	r1, r1, #7
 80053c2:	4401      	add	r1, r0
 80053c4:	3184      	adds	r1, #132	; 0x84
 80053c6:	4313      	orrs	r3, r2
 80053c8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	01db      	lsls	r3, r3, #7
 80053d4:	4413      	add	r3, r2
 80053d6:	3384      	adds	r3, #132	; 0x84
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	01db      	lsls	r3, r3, #7
 80053e4:	4413      	add	r3, r2
 80053e6:	3384      	adds	r3, #132	; 0x84
 80053e8:	461a      	mov	r2, r3
 80053ea:	2300      	movs	r3, #0
 80053ec:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	01db      	lsls	r3, r3, #7
 80053f8:	4413      	add	r3, r2
 80053fa:	3384      	adds	r3, #132	; 0x84
 80053fc:	461a      	mov	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d102      	bne.n	8005412 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800540c:	2304      	movs	r3, #4
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e01b      	b.n	800544a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d102      	bne.n	8005420 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800541a:	2303      	movs	r3, #3
 800541c:	61fb      	str	r3, [r7, #28]
 800541e:	e014      	b.n	800544a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b04      	cmp	r3, #4
 8005426:	d00b      	beq.n	8005440 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800542c:	2b02      	cmp	r3, #2
 800542e:	d007      	beq.n	8005440 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005434:	2b03      	cmp	r3, #3
 8005436:	d003      	beq.n	8005440 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800543c:	2b07      	cmp	r3, #7
 800543e:	d102      	bne.n	8005446 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005440:	2302      	movs	r3, #2
 8005442:	61fb      	str	r3, [r7, #28]
 8005444:	e001      	b.n	800544a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005446:	2301      	movs	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	01db      	lsls	r3, r3, #7
 8005454:	4413      	add	r3, r2
 8005456:	3384      	adds	r3, #132	; 0x84
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	4611      	mov	r1, r2
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	01d2      	lsls	r2, r2, #7
 8005464:	440a      	add	r2, r1
 8005466:	3284      	adds	r2, #132	; 0x84
 8005468:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800546c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	fb02 f303 	mul.w	r3, r2, r3
 8005478:	041a      	lsls	r2, r3, #16
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	6859      	ldr	r1, [r3, #4]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	1acb      	subs	r3, r1, r3
 8005484:	69f9      	ldr	r1, [r7, #28]
 8005486:	fb01 f303 	mul.w	r3, r1, r3
 800548a:	3303      	adds	r3, #3
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	6809      	ldr	r1, [r1, #0]
 8005490:	4608      	mov	r0, r1
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	01c9      	lsls	r1, r1, #7
 8005496:	4401      	add	r1, r0
 8005498:	3184      	adds	r1, #132	; 0x84
 800549a:	4313      	orrs	r3, r2
 800549c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	01db      	lsls	r3, r3, #7
 80054a8:	4413      	add	r3, r2
 80054aa:	3384      	adds	r3, #132	; 0x84
 80054ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	01db      	lsls	r3, r3, #7
 80054b8:	440b      	add	r3, r1
 80054ba:	3384      	adds	r3, #132	; 0x84
 80054bc:	4619      	mov	r1, r3
 80054be:	4b14      	ldr	r3, [pc, #80]	; (8005510 <LTDC_SetConfig+0x330>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	01db      	lsls	r3, r3, #7
 80054ce:	4413      	add	r3, r2
 80054d0:	3384      	adds	r3, #132	; 0x84
 80054d2:	461a      	mov	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	01db      	lsls	r3, r3, #7
 80054e4:	4413      	add	r3, r2
 80054e6:	3384      	adds	r3, #132	; 0x84
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	6812      	ldr	r2, [r2, #0]
 80054ee:	4611      	mov	r1, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	01d2      	lsls	r2, r2, #7
 80054f4:	440a      	add	r2, r1
 80054f6:	3284      	adds	r2, #132	; 0x84
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	6013      	str	r3, [r2, #0]
}
 80054fe:	bf00      	nop
 8005500:	3724      	adds	r7, #36	; 0x24
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	fffff8f8 	.word	0xfffff8f8
 8005510:	fffff800 	.word	0xfffff800

08005514 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a04      	ldr	r2, [pc, #16]	; (8005530 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800551e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005522:	6013      	str	r3, [r2, #0]
}
 8005524:	bf00      	nop
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40007000 	.word	0x40007000

08005534 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800553e:	4b23      	ldr	r3, [pc, #140]	; (80055cc <HAL_PWREx_EnableOverDrive+0x98>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	4a22      	ldr	r2, [pc, #136]	; (80055cc <HAL_PWREx_EnableOverDrive+0x98>)
 8005544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005548:	6413      	str	r3, [r2, #64]	; 0x40
 800554a:	4b20      	ldr	r3, [pc, #128]	; (80055cc <HAL_PWREx_EnableOverDrive+0x98>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005556:	4b1e      	ldr	r3, [pc, #120]	; (80055d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800555c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005560:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005562:	f7fd fa7b 	bl	8002a5c <HAL_GetTick>
 8005566:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005568:	e009      	b.n	800557e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800556a:	f7fd fa77 	bl	8002a5c <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005578:	d901      	bls.n	800557e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e022      	b.n	80055c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800557e:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558a:	d1ee      	bne.n	800556a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800558c:	4b10      	ldr	r3, [pc, #64]	; (80055d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0f      	ldr	r2, [pc, #60]	; (80055d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005596:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005598:	f7fd fa60 	bl	8002a5c <HAL_GetTick>
 800559c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800559e:	e009      	b.n	80055b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055a0:	f7fd fa5c 	bl	8002a5c <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ae:	d901      	bls.n	80055b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e007      	b.n	80055c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055c0:	d1ee      	bne.n	80055a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40023800 	.word	0x40023800
 80055d0:	40007000 	.word	0x40007000

080055d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af02      	add	r7, sp, #8
 80055da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80055dc:	f7fd fa3e 	bl	8002a5c <HAL_GetTick>
 80055e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e067      	b.n	80056bc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10b      	bne.n	8005610 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7fc fe2f 	bl	8002264 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005606:	f241 3188 	movw	r1, #5000	; 0x1388
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f85e 	bl	80056cc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	3b01      	subs	r3, #1
 8005620:	021a      	lsls	r2, r3, #8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	2120      	movs	r1, #32
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f856 	bl	80056e8 <QSPI_WaitFlagStateUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005640:	7afb      	ldrb	r3, [r7, #11]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d135      	bne.n	80056b2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <HAL_QSPI_Init+0xf0>)
 800564e:	4013      	ands	r3, r2
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6852      	ldr	r2, [r2, #4]
 8005654:	0611      	lsls	r1, r2, #24
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	68d2      	ldr	r2, [r2, #12]
 800565a:	4311      	orrs	r1, r2
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	69d2      	ldr	r2, [r2, #28]
 8005660:	4311      	orrs	r1, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6a12      	ldr	r2, [r2, #32]
 8005666:	4311      	orrs	r1, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	430b      	orrs	r3, r1
 800566e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	4b14      	ldr	r3, [pc, #80]	; (80056c8 <HAL_QSPI_Init+0xf4>)
 8005678:	4013      	ands	r3, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6912      	ldr	r2, [r2, #16]
 800567e:	0411      	lsls	r1, r2, #16
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6952      	ldr	r2, [r2, #20]
 8005684:	4311      	orrs	r1, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6992      	ldr	r2, [r2, #24]
 800568a:	4311      	orrs	r1, r2
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	430b      	orrs	r3, r1
 8005692:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0201 	orr.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80056ba:	7afb      	ldrb	r3, [r7, #11]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	00ffff2f 	.word	0x00ffff2f
 80056c8:	ffe0f8fe 	.word	0xffe0f8fe

080056cc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	649a      	str	r2, [r3, #72]	; 0x48
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80056f8:	e01a      	b.n	8005730 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d016      	beq.n	8005730 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005702:	f7fd f9ab 	bl	8002a5c <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2204      	movs	r2, #4
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005724:	f043 0201 	orr.w	r2, r3, #1
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e00e      	b.n	800574e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	2b00      	cmp	r3, #0
 800573c:	bf14      	ite	ne
 800573e:	2301      	movne	r3, #1
 8005740:	2300      	moveq	r3, #0
 8005742:	b2db      	uxtb	r3, r3
 8005744:	461a      	mov	r2, r3
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	429a      	cmp	r2, r3
 800574a:	d1d6      	bne.n	80056fa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005760:	2300      	movs	r3, #0
 8005762:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e291      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 8087 	beq.w	800588a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800577c:	4b96      	ldr	r3, [pc, #600]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 030c 	and.w	r3, r3, #12
 8005784:	2b04      	cmp	r3, #4
 8005786:	d00c      	beq.n	80057a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005788:	4b93      	ldr	r3, [pc, #588]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 030c 	and.w	r3, r3, #12
 8005790:	2b08      	cmp	r3, #8
 8005792:	d112      	bne.n	80057ba <HAL_RCC_OscConfig+0x62>
 8005794:	4b90      	ldr	r3, [pc, #576]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a0:	d10b      	bne.n	80057ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a2:	4b8d      	ldr	r3, [pc, #564]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d06c      	beq.n	8005888 <HAL_RCC_OscConfig+0x130>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d168      	bne.n	8005888 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e26b      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c2:	d106      	bne.n	80057d2 <HAL_RCC_OscConfig+0x7a>
 80057c4:	4b84      	ldr	r3, [pc, #528]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a83      	ldr	r2, [pc, #524]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80057ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	e02e      	b.n	8005830 <HAL_RCC_OscConfig+0xd8>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCC_OscConfig+0x9c>
 80057da:	4b7f      	ldr	r3, [pc, #508]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a7e      	ldr	r2, [pc, #504]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80057e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	4b7c      	ldr	r3, [pc, #496]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a7b      	ldr	r2, [pc, #492]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80057ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e01d      	b.n	8005830 <HAL_RCC_OscConfig+0xd8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057fc:	d10c      	bne.n	8005818 <HAL_RCC_OscConfig+0xc0>
 80057fe:	4b76      	ldr	r3, [pc, #472]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a75      	ldr	r2, [pc, #468]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	4b73      	ldr	r3, [pc, #460]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a72      	ldr	r2, [pc, #456]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e00b      	b.n	8005830 <HAL_RCC_OscConfig+0xd8>
 8005818:	4b6f      	ldr	r3, [pc, #444]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a6e      	ldr	r2, [pc, #440]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 800581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b6c      	ldr	r3, [pc, #432]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a6b      	ldr	r2, [pc, #428]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 800582a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fd f910 	bl	8002a5c <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005840:	f7fd f90c 	bl	8002a5c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	; 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e21f      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005852:	4b61      	ldr	r3, [pc, #388]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0xe8>
 800585e:	e014      	b.n	800588a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7fd f8fc 	bl	8002a5c <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005868:	f7fd f8f8 	bl	8002a5c <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	; 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e20b      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587a:	4b57      	ldr	r3, [pc, #348]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x110>
 8005886:	e000      	b.n	800588a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d069      	beq.n	800596a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005896:	4b50      	ldr	r3, [pc, #320]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058a2:	4b4d      	ldr	r3, [pc, #308]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 030c 	and.w	r3, r3, #12
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d11c      	bne.n	80058e8 <HAL_RCC_OscConfig+0x190>
 80058ae:	4b4a      	ldr	r3, [pc, #296]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d116      	bne.n	80058e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ba:	4b47      	ldr	r3, [pc, #284]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_RCC_OscConfig+0x17a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d001      	beq.n	80058d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e1df      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d2:	4b41      	ldr	r3, [pc, #260]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	493d      	ldr	r1, [pc, #244]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058e6:	e040      	b.n	800596a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d023      	beq.n	8005938 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f0:	4b39      	ldr	r3, [pc, #228]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a38      	ldr	r2, [pc, #224]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fd f8ae 	bl	8002a5c <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005904:	f7fd f8aa 	bl	8002a5c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e1bd      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005916:	4b30      	ldr	r3, [pc, #192]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f0      	beq.n	8005904 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005922:	4b2d      	ldr	r3, [pc, #180]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	4929      	ldr	r1, [pc, #164]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005932:	4313      	orrs	r3, r2
 8005934:	600b      	str	r3, [r1, #0]
 8005936:	e018      	b.n	800596a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005938:	4b27      	ldr	r3, [pc, #156]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005944:	f7fd f88a 	bl	8002a5c <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800594c:	f7fd f886 	bl	8002a5c <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e199      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800595e:	4b1e      	ldr	r3, [pc, #120]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d038      	beq.n	80059e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d019      	beq.n	80059b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800597e:	4b16      	ldr	r3, [pc, #88]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005982:	4a15      	ldr	r2, [pc, #84]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598a:	f7fd f867 	bl	8002a5c <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005992:	f7fd f863 	bl	8002a5c <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e176      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80059a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0f0      	beq.n	8005992 <HAL_RCC_OscConfig+0x23a>
 80059b0:	e01a      	b.n	80059e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059b2:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80059b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b6:	4a08      	ldr	r2, [pc, #32]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80059b8:	f023 0301 	bic.w	r3, r3, #1
 80059bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059be:	f7fd f84d 	bl	8002a5c <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c4:	e00a      	b.n	80059dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059c6:	f7fd f849 	bl	8002a5c <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d903      	bls.n	80059dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e15c      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
 80059d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059dc:	4b91      	ldr	r3, [pc, #580]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 80059de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1ee      	bne.n	80059c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80a4 	beq.w	8005b3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059f6:	4b8b      	ldr	r3, [pc, #556]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10d      	bne.n	8005a1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a02:	4b88      	ldr	r3, [pc, #544]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	4a87      	ldr	r2, [pc, #540]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a0e:	4b85      	ldr	r3, [pc, #532]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a16:	60bb      	str	r3, [r7, #8]
 8005a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a1e:	4b82      	ldr	r3, [pc, #520]	; (8005c28 <HAL_RCC_OscConfig+0x4d0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d118      	bne.n	8005a5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a2a:	4b7f      	ldr	r3, [pc, #508]	; (8005c28 <HAL_RCC_OscConfig+0x4d0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a7e      	ldr	r2, [pc, #504]	; (8005c28 <HAL_RCC_OscConfig+0x4d0>)
 8005a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a36:	f7fd f811 	bl	8002a5c <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a3e:	f7fd f80d 	bl	8002a5c <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b64      	cmp	r3, #100	; 0x64
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e120      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a50:	4b75      	ldr	r3, [pc, #468]	; (8005c28 <HAL_RCC_OscConfig+0x4d0>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0f0      	beq.n	8005a3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d106      	bne.n	8005a72 <HAL_RCC_OscConfig+0x31a>
 8005a64:	4b6f      	ldr	r3, [pc, #444]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a68:	4a6e      	ldr	r2, [pc, #440]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a70:	e02d      	b.n	8005ace <HAL_RCC_OscConfig+0x376>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCC_OscConfig+0x33c>
 8005a7a:	4b6a      	ldr	r3, [pc, #424]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	4a69      	ldr	r2, [pc, #420]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	6713      	str	r3, [r2, #112]	; 0x70
 8005a86:	4b67      	ldr	r3, [pc, #412]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	4a66      	ldr	r2, [pc, #408]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005a8c:	f023 0304 	bic.w	r3, r3, #4
 8005a90:	6713      	str	r3, [r2, #112]	; 0x70
 8005a92:	e01c      	b.n	8005ace <HAL_RCC_OscConfig+0x376>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b05      	cmp	r3, #5
 8005a9a:	d10c      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x35e>
 8005a9c:	4b61      	ldr	r3, [pc, #388]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	4a60      	ldr	r2, [pc, #384]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005aa2:	f043 0304 	orr.w	r3, r3, #4
 8005aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa8:	4b5e      	ldr	r3, [pc, #376]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aac:	4a5d      	ldr	r2, [pc, #372]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab4:	e00b      	b.n	8005ace <HAL_RCC_OscConfig+0x376>
 8005ab6:	4b5b      	ldr	r3, [pc, #364]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aba:	4a5a      	ldr	r2, [pc, #360]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005abc:	f023 0301 	bic.w	r3, r3, #1
 8005ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac2:	4b58      	ldr	r3, [pc, #352]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	4a57      	ldr	r2, [pc, #348]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005ac8:	f023 0304 	bic.w	r3, r3, #4
 8005acc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d015      	beq.n	8005b02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad6:	f7fc ffc1 	bl	8002a5c <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005adc:	e00a      	b.n	8005af4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ade:	f7fc ffbd 	bl	8002a5c <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e0ce      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af4:	4b4b      	ldr	r3, [pc, #300]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0ee      	beq.n	8005ade <HAL_RCC_OscConfig+0x386>
 8005b00:	e014      	b.n	8005b2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b02:	f7fc ffab 	bl	8002a5c <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b08:	e00a      	b.n	8005b20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0a:	f7fc ffa7 	bl	8002a5c <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e0b8      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b20:	4b40      	ldr	r3, [pc, #256]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1ee      	bne.n	8005b0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b2c:	7dfb      	ldrb	r3, [r7, #23]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d105      	bne.n	8005b3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b32:	4b3c      	ldr	r3, [pc, #240]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	4a3b      	ldr	r2, [pc, #236]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80a4 	beq.w	8005c90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b48:	4b36      	ldr	r3, [pc, #216]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 030c 	and.w	r3, r3, #12
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d06b      	beq.n	8005c2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d149      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5c:	4b31      	ldr	r3, [pc, #196]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a30      	ldr	r2, [pc, #192]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b68:	f7fc ff78 	bl	8002a5c <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b70:	f7fc ff74 	bl	8002a5c <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e087      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b82:	4b28      	ldr	r3, [pc, #160]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f0      	bne.n	8005b70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69da      	ldr	r2, [r3, #28]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	019b      	lsls	r3, r3, #6
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	061b      	lsls	r3, r3, #24
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bbc:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a18      	ldr	r2, [pc, #96]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc8:	f7fc ff48 	bl	8002a5c <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd0:	f7fc ff44 	bl	8002a5c <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e057      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be2:	4b10      	ldr	r3, [pc, #64]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x478>
 8005bee:	e04f      	b.n	8005c90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf0:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a0b      	ldr	r2, [pc, #44]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfc:	f7fc ff2e 	bl	8002a5c <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c04:	f7fc ff2a 	bl	8002a5c <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e03d      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c16:	4b03      	ldr	r3, [pc, #12]	; (8005c24 <HAL_RCC_OscConfig+0x4cc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f0      	bne.n	8005c04 <HAL_RCC_OscConfig+0x4ac>
 8005c22:	e035      	b.n	8005c90 <HAL_RCC_OscConfig+0x538>
 8005c24:	40023800 	.word	0x40023800
 8005c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <HAL_RCC_OscConfig+0x544>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d028      	beq.n	8005c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d121      	bne.n	8005c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d11a      	bne.n	8005c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d111      	bne.n	8005c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	3b01      	subs	r3, #1
 8005c76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d107      	bne.n	8005c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40023800 	.word	0x40023800

08005ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e0d0      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cb8:	4b6a      	ldr	r3, [pc, #424]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d910      	bls.n	8005ce8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc6:	4b67      	ldr	r3, [pc, #412]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 020f 	bic.w	r2, r3, #15
 8005cce:	4965      	ldr	r1, [pc, #404]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd6:	4b63      	ldr	r3, [pc, #396]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d001      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0b8      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d020      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d00:	4b59      	ldr	r3, [pc, #356]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	4a58      	ldr	r2, [pc, #352]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d18:	4b53      	ldr	r3, [pc, #332]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4a52      	ldr	r2, [pc, #328]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d24:	4b50      	ldr	r3, [pc, #320]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	494d      	ldr	r1, [pc, #308]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d040      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d107      	bne.n	8005d5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4a:	4b47      	ldr	r3, [pc, #284]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d115      	bne.n	8005d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e07f      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d107      	bne.n	8005d72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d62:	4b41      	ldr	r3, [pc, #260]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d109      	bne.n	8005d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e073      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d72:	4b3d      	ldr	r3, [pc, #244]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e06b      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d82:	4b39      	ldr	r3, [pc, #228]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f023 0203 	bic.w	r2, r3, #3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	4936      	ldr	r1, [pc, #216]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d94:	f7fc fe62 	bl	8002a5c <HAL_GetTick>
 8005d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9a:	e00a      	b.n	8005db2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d9c:	f7fc fe5e 	bl	8002a5c <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e053      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db2:	4b2d      	ldr	r3, [pc, #180]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 020c 	and.w	r2, r3, #12
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d1eb      	bne.n	8005d9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc4:	4b27      	ldr	r3, [pc, #156]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d210      	bcs.n	8005df4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd2:	4b24      	ldr	r3, [pc, #144]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f023 020f 	bic.w	r2, r3, #15
 8005dda:	4922      	ldr	r1, [pc, #136]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de2:	4b20      	ldr	r3, [pc, #128]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d001      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e032      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e00:	4b19      	ldr	r3, [pc, #100]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	4916      	ldr	r1, [pc, #88]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e1e:	4b12      	ldr	r3, [pc, #72]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	490e      	ldr	r1, [pc, #56]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e32:	f000 f821 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 8005e36:	4601      	mov	r1, r0
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	4a0a      	ldr	r2, [pc, #40]	; (8005e6c <HAL_RCC_ClockConfig+0x1cc>)
 8005e44:	5cd3      	ldrb	r3, [r2, r3]
 8005e46:	fa21 f303 	lsr.w	r3, r1, r3
 8005e4a:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <HAL_RCC_ClockConfig+0x1d0>)
 8005e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e4e:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <HAL_RCC_ClockConfig+0x1d4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fc fc42 	bl	80026dc <HAL_InitTick>

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40023c00 	.word	0x40023c00
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	0802725c 	.word	0x0802725c
 8005e70:	2000002c 	.word	0x2000002c
 8005e74:	20000030 	.word	0x20000030

08005e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	2300      	movs	r3, #0
 8005e88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e8e:	4b50      	ldr	r3, [pc, #320]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d007      	beq.n	8005eaa <HAL_RCC_GetSysClockFreq+0x32>
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d008      	beq.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x38>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f040 808d 	bne.w	8005fbe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ea4:	4b4b      	ldr	r3, [pc, #300]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ea6:	60bb      	str	r3, [r7, #8]
      break;
 8005ea8:	e08c      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eaa:	4b4b      	ldr	r3, [pc, #300]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005eac:	60bb      	str	r3, [r7, #8]
      break;
 8005eae:	e089      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eb0:	4b47      	ldr	r3, [pc, #284]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eb8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005eba:	4b45      	ldr	r3, [pc, #276]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d023      	beq.n	8005f0e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ec6:	4b42      	ldr	r3, [pc, #264]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	099b      	lsrs	r3, r3, #6
 8005ecc:	f04f 0400 	mov.w	r4, #0
 8005ed0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	ea03 0501 	and.w	r5, r3, r1
 8005edc:	ea04 0602 	and.w	r6, r4, r2
 8005ee0:	4a3d      	ldr	r2, [pc, #244]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ee2:	fb02 f106 	mul.w	r1, r2, r6
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	fb02 f205 	mul.w	r2, r2, r5
 8005eec:	440a      	add	r2, r1
 8005eee:	493a      	ldr	r1, [pc, #232]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ef0:	fba5 0101 	umull	r0, r1, r5, r1
 8005ef4:	1853      	adds	r3, r2, r1
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f04f 0400 	mov.w	r4, #0
 8005efe:	461a      	mov	r2, r3
 8005f00:	4623      	mov	r3, r4
 8005f02:	f7fa f9d5 	bl	80002b0 <__aeabi_uldivmod>
 8005f06:	4603      	mov	r3, r0
 8005f08:	460c      	mov	r4, r1
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	e049      	b.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f0e:	4b30      	ldr	r3, [pc, #192]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	099b      	lsrs	r3, r3, #6
 8005f14:	f04f 0400 	mov.w	r4, #0
 8005f18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	ea03 0501 	and.w	r5, r3, r1
 8005f24:	ea04 0602 	and.w	r6, r4, r2
 8005f28:	4629      	mov	r1, r5
 8005f2a:	4632      	mov	r2, r6
 8005f2c:	f04f 0300 	mov.w	r3, #0
 8005f30:	f04f 0400 	mov.w	r4, #0
 8005f34:	0154      	lsls	r4, r2, #5
 8005f36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f3a:	014b      	lsls	r3, r1, #5
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4622      	mov	r2, r4
 8005f40:	1b49      	subs	r1, r1, r5
 8005f42:	eb62 0206 	sbc.w	r2, r2, r6
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	f04f 0400 	mov.w	r4, #0
 8005f4e:	0194      	lsls	r4, r2, #6
 8005f50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f54:	018b      	lsls	r3, r1, #6
 8005f56:	1a5b      	subs	r3, r3, r1
 8005f58:	eb64 0402 	sbc.w	r4, r4, r2
 8005f5c:	f04f 0100 	mov.w	r1, #0
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	00e2      	lsls	r2, r4, #3
 8005f66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f6a:	00d9      	lsls	r1, r3, #3
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4614      	mov	r4, r2
 8005f70:	195b      	adds	r3, r3, r5
 8005f72:	eb44 0406 	adc.w	r4, r4, r6
 8005f76:	f04f 0100 	mov.w	r1, #0
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	02a2      	lsls	r2, r4, #10
 8005f80:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005f84:	0299      	lsls	r1, r3, #10
 8005f86:	460b      	mov	r3, r1
 8005f88:	4614      	mov	r4, r2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f04f 0400 	mov.w	r4, #0
 8005f94:	461a      	mov	r2, r3
 8005f96:	4623      	mov	r3, r4
 8005f98:	f7fa f98a 	bl	80002b0 <__aeabi_uldivmod>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	0c1b      	lsrs	r3, r3, #16
 8005fa8:	f003 0303 	and.w	r3, r3, #3
 8005fac:	3301      	adds	r3, #1
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fba:	60bb      	str	r3, [r7, #8]
      break;
 8005fbc:	e002      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005fc0:	60bb      	str	r3, [r7, #8]
      break;
 8005fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	00f42400 	.word	0x00f42400
 8005fd8:	017d7840 	.word	0x017d7840

08005fdc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fe0:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	2000002c 	.word	0x2000002c

08005ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ff8:	f7ff fff0 	bl	8005fdc <HAL_RCC_GetHCLKFreq>
 8005ffc:	4601      	mov	r1, r0
 8005ffe:	4b05      	ldr	r3, [pc, #20]	; (8006014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	0a9b      	lsrs	r3, r3, #10
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	4a03      	ldr	r2, [pc, #12]	; (8006018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800600a:	5cd3      	ldrb	r3, [r2, r3]
 800600c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006010:	4618      	mov	r0, r3
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40023800 	.word	0x40023800
 8006018:	0802726c 	.word	0x0802726c

0800601c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006020:	f7ff ffdc 	bl	8005fdc <HAL_RCC_GetHCLKFreq>
 8006024:	4601      	mov	r1, r0
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	0b5b      	lsrs	r3, r3, #13
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4a03      	ldr	r2, [pc, #12]	; (8006040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006032:	5cd3      	ldrb	r3, [r2, r3]
 8006034:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40023800 	.word	0x40023800
 8006040:	0802726c 	.word	0x0802726c

08006044 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	220f      	movs	r2, #15
 8006052:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006054:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <HAL_RCC_GetClockConfig+0x5c>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 0203 	and.w	r2, r3, #3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006060:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <HAL_RCC_GetClockConfig+0x5c>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800606c:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <HAL_RCC_GetClockConfig+0x5c>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006078:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <HAL_RCC_GetClockConfig+0x5c>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	08db      	lsrs	r3, r3, #3
 800607e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006086:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <HAL_RCC_GetClockConfig+0x60>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 020f 	and.w	r2, r3, #15
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	601a      	str	r2, [r3, #0]
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40023c00 	.word	0x40023c00

080060a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d012      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060d0:	4b69      	ldr	r3, [pc, #420]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4a68      	ldr	r2, [pc, #416]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060da:	6093      	str	r3, [r2, #8]
 80060dc:	4b66      	ldr	r3, [pc, #408]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e4:	4964      	ldr	r1, [pc, #400]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80060f2:	2301      	movs	r3, #1
 80060f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d017      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006102:	4b5d      	ldr	r3, [pc, #372]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006108:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006110:	4959      	ldr	r1, [pc, #356]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006120:	d101      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006122:	2301      	movs	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800612e:	2301      	movs	r3, #1
 8006130:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d017      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800613e:	4b4e      	ldr	r3, [pc, #312]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006144:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	494a      	ldr	r1, [pc, #296]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800615c:	d101      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800615e:	2301      	movs	r3, #1
 8006160:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800616a:	2301      	movs	r3, #1
 800616c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800617a:	2301      	movs	r3, #1
 800617c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 808b 	beq.w	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800618c:	4b3a      	ldr	r3, [pc, #232]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	4a39      	ldr	r2, [pc, #228]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006196:	6413      	str	r3, [r2, #64]	; 0x40
 8006198:	4b37      	ldr	r3, [pc, #220]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061a4:	4b35      	ldr	r3, [pc, #212]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a34      	ldr	r2, [pc, #208]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b0:	f7fc fc54 	bl	8002a5c <HAL_GetTick>
 80061b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b8:	f7fc fc50 	bl	8002a5c <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b64      	cmp	r3, #100	; 0x64
 80061c4:	d901      	bls.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e355      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061ca:	4b2c      	ldr	r3, [pc, #176]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0f0      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061d6:	4b28      	ldr	r3, [pc, #160]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d035      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d02e      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061f4:	4b20      	ldr	r3, [pc, #128]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061fe:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006202:	4a1d      	ldr	r2, [pc, #116]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006208:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800620c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620e:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006214:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006216:	4a18      	ldr	r2, [pc, #96]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800621c:	4b16      	ldr	r3, [pc, #88]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b01      	cmp	r3, #1
 8006226:	d114      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006228:	f7fc fc18 	bl	8002a5c <HAL_GetTick>
 800622c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622e:	e00a      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006230:	f7fc fc14 	bl	8002a5c <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	f241 3288 	movw	r2, #5000	; 0x1388
 800623e:	4293      	cmp	r3, r2
 8006240:	d901      	bls.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e317      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006246:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0ee      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800625a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800625e:	d111      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006260:	4b05      	ldr	r3, [pc, #20]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800626e:	400b      	ands	r3, r1
 8006270:	4901      	ldr	r1, [pc, #4]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006272:	4313      	orrs	r3, r2
 8006274:	608b      	str	r3, [r1, #8]
 8006276:	e00b      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006278:	40023800 	.word	0x40023800
 800627c:	40007000 	.word	0x40007000
 8006280:	0ffffcff 	.word	0x0ffffcff
 8006284:	4bb0      	ldr	r3, [pc, #704]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4aaf      	ldr	r2, [pc, #700]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800628a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800628e:	6093      	str	r3, [r2, #8]
 8006290:	4bad      	ldr	r3, [pc, #692]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800629c:	49aa      	ldr	r1, [pc, #680]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d010      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062ae:	4ba6      	ldr	r3, [pc, #664]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b4:	4aa4      	ldr	r2, [pc, #656]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062be:	4ba2      	ldr	r3, [pc, #648]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	499f      	ldr	r1, [pc, #636]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062dc:	4b9a      	ldr	r3, [pc, #616]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ea:	4997      	ldr	r1, [pc, #604]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062fe:	4b92      	ldr	r3, [pc, #584]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800630c:	498e      	ldr	r1, [pc, #568]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006320:	4b89      	ldr	r3, [pc, #548]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632e:	4986      	ldr	r1, [pc, #536]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006342:	4b81      	ldr	r3, [pc, #516]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006348:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	497d      	ldr	r1, [pc, #500]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006364:	4b78      	ldr	r3, [pc, #480]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f023 0203 	bic.w	r2, r3, #3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	4975      	ldr	r1, [pc, #468]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006386:	4b70      	ldr	r3, [pc, #448]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638c:	f023 020c 	bic.w	r2, r3, #12
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006394:	496c      	ldr	r1, [pc, #432]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063a8:	4b67      	ldr	r3, [pc, #412]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b6:	4964      	ldr	r1, [pc, #400]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063ca:	4b5f      	ldr	r3, [pc, #380]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	495b      	ldr	r1, [pc, #364]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063ec:	4b56      	ldr	r3, [pc, #344]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fa:	4953      	ldr	r1, [pc, #332]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800640e:	4b4e      	ldr	r3, [pc, #312]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006414:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641c:	494a      	ldr	r1, [pc, #296]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006430:	4b45      	ldr	r3, [pc, #276]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006436:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643e:	4942      	ldr	r1, [pc, #264]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006452:	4b3d      	ldr	r3, [pc, #244]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006458:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006460:	4939      	ldr	r1, [pc, #228]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006474:	4b34      	ldr	r3, [pc, #208]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006482:	4931      	ldr	r1, [pc, #196]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d011      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006496:	4b2c      	ldr	r3, [pc, #176]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a4:	4928      	ldr	r1, [pc, #160]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064b4:	d101      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80064b6:	2301      	movs	r3, #1
 80064b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064c6:	2301      	movs	r3, #1
 80064c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064d6:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e4:	4918      	ldr	r1, [pc, #96]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064f8:	4b13      	ldr	r3, [pc, #76]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006508:	490f      	ldr	r1, [pc, #60]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d005      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800651e:	f040 80d8 	bne.w	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a08      	ldr	r2, [pc, #32]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006528:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800652c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800652e:	f7fc fa95 	bl	8002a5c <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006534:	e00a      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006536:	f7fc fa91 	bl	8002a5c <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b64      	cmp	r3, #100	; 0x64
 8006542:	d903      	bls.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e196      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006548:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800654c:	4b6c      	ldr	r3, [pc, #432]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1ee      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d021      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006568:	2b00      	cmp	r3, #0
 800656a:	d11d      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800656c:	4b64      	ldr	r3, [pc, #400]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800656e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006572:	0c1b      	lsrs	r3, r3, #16
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800657a:	4b61      	ldr	r3, [pc, #388]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800657c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006580:	0e1b      	lsrs	r3, r3, #24
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	019a      	lsls	r2, r3, #6
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	431a      	orrs	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	061b      	lsls	r3, r3, #24
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	071b      	lsls	r3, r3, #28
 80065a0:	4957      	ldr	r1, [pc, #348]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x516>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065bc:	d00a      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d02e      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065d2:	d129      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065d4:	4b4a      	ldr	r3, [pc, #296]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065da:	0c1b      	lsrs	r3, r3, #16
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065e2:	4b47      	ldr	r3, [pc, #284]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e8:	0f1b      	lsrs	r3, r3, #28
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	019a      	lsls	r2, r3, #6
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	061b      	lsls	r3, r3, #24
 8006602:	431a      	orrs	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	071b      	lsls	r3, r3, #28
 8006608:	493d      	ldr	r1, [pc, #244]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006610:	4b3b      	ldr	r3, [pc, #236]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006616:	f023 021f 	bic.w	r2, r3, #31
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	3b01      	subs	r3, #1
 8006620:	4937      	ldr	r1, [pc, #220]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01d      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006634:	4b32      	ldr	r3, [pc, #200]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663a:	0e1b      	lsrs	r3, r3, #24
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006642:	4b2f      	ldr	r3, [pc, #188]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006648:	0f1b      	lsrs	r3, r3, #28
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	019a      	lsls	r2, r3, #6
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	431a      	orrs	r2, r3
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	061b      	lsls	r3, r3, #24
 8006662:	431a      	orrs	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	071b      	lsls	r3, r3, #28
 8006668:	4925      	ldr	r1, [pc, #148]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d011      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	019a      	lsls	r2, r3, #6
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	041b      	lsls	r3, r3, #16
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	061b      	lsls	r3, r3, #24
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	071b      	lsls	r3, r3, #28
 8006698:	4919      	ldr	r1, [pc, #100]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066a0:	4b17      	ldr	r3, [pc, #92]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a16      	ldr	r2, [pc, #88]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ac:	f7fc f9d6 	bl	8002a5c <HAL_GetTick>
 80066b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066b4:	f7fc f9d2 	bl	8002a5c <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b64      	cmp	r3, #100	; 0x64
 80066c0:	d901      	bls.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e0d7      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066c6:	4b0e      	ldr	r3, [pc, #56]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0f0      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	f040 80cd 	bne.w	8006874 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066da:	4b09      	ldr	r3, [pc, #36]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a08      	ldr	r2, [pc, #32]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e6:	f7fc f9b9 	bl	8002a5c <HAL_GetTick>
 80066ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066ec:	e00a      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066ee:	f7fc f9b5 	bl	8002a5c <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b64      	cmp	r3, #100	; 0x64
 80066fa:	d903      	bls.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e0ba      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006700:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006704:	4b5e      	ldr	r3, [pc, #376]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800670c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006710:	d0ed      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800672e:	2b00      	cmp	r3, #0
 8006730:	d02e      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d12a      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800673a:	4b51      	ldr	r3, [pc, #324]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006748:	4b4d      	ldr	r3, [pc, #308]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800674a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674e:	0f1b      	lsrs	r3, r3, #28
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	019a      	lsls	r2, r3, #6
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	061b      	lsls	r3, r3, #24
 8006768:	431a      	orrs	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	071b      	lsls	r3, r3, #28
 800676e:	4944      	ldr	r1, [pc, #272]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006770:	4313      	orrs	r3, r2
 8006772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006776:	4b42      	ldr	r3, [pc, #264]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800677c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006784:	3b01      	subs	r3, #1
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	493d      	ldr	r1, [pc, #244]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800678a:	4313      	orrs	r3, r2
 800678c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d022      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067a4:	d11d      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067a6:	4b36      	ldr	r3, [pc, #216]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	0e1b      	lsrs	r3, r3, #24
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067b4:	4b32      	ldr	r3, [pc, #200]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ba:	0f1b      	lsrs	r3, r3, #28
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	019a      	lsls	r2, r3, #6
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	041b      	lsls	r3, r3, #16
 80067ce:	431a      	orrs	r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	061b      	lsls	r3, r3, #24
 80067d4:	431a      	orrs	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	071b      	lsls	r3, r3, #28
 80067da:	4929      	ldr	r1, [pc, #164]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d028      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f4:	0e1b      	lsrs	r3, r3, #24
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067fc:	4b20      	ldr	r3, [pc, #128]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006802:	0c1b      	lsrs	r3, r3, #16
 8006804:	f003 0303 	and.w	r3, r3, #3
 8006808:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	019a      	lsls	r2, r3, #6
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	041b      	lsls	r3, r3, #16
 8006814:	431a      	orrs	r2, r3
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	061b      	lsls	r3, r3, #24
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	071b      	lsls	r3, r3, #28
 8006822:	4917      	ldr	r1, [pc, #92]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800682a:	4b15      	ldr	r3, [pc, #84]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800682c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006830:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4911      	ldr	r1, [pc, #68]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800683a:	4313      	orrs	r3, r2
 800683c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006840:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a0e      	ldr	r2, [pc, #56]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800684a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800684c:	f7fc f906 	bl	8002a5c <HAL_GetTick>
 8006850:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006852:	e008      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006854:	f7fc f902 	bl	8002a5c <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b64      	cmp	r3, #100	; 0x64
 8006860:	d901      	bls.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e007      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800686e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006872:	d1ef      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40023800 	.word	0x40023800

08006884 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068a2:	f040 8086 	bne.w	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80068a6:	4b8d      	ldr	r3, [pc, #564]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80068a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80068b4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068bc:	d03e      	beq.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80068be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068c2:	d073      	beq.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d000      	beq.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80068c8:	e074      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80068ca:	4b84      	ldr	r3, [pc, #528]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d108      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068d6:	4b81      	ldr	r3, [pc, #516]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068de:	4a80      	ldr	r2, [pc, #512]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	613b      	str	r3, [r7, #16]
 80068e6:	e007      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80068e8:	4b7c      	ldr	r3, [pc, #496]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f0:	4a7c      	ldr	r2, [pc, #496]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80068f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80068f8:	4b78      	ldr	r3, [pc, #480]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fe:	0e1b      	lsrs	r3, r3, #24
 8006900:	f003 030f 	and.w	r3, r3, #15
 8006904:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006906:	4b75      	ldr	r3, [pc, #468]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690c:	099b      	lsrs	r3, r3, #6
 800690e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	fb02 f203 	mul.w	r2, r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	fbb2 f3f3 	udiv	r3, r2, r3
 800691e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006920:	4b6e      	ldr	r3, [pc, #440]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006926:	0a1b      	lsrs	r3, r3, #8
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	3301      	adds	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	fbb2 f3f3 	udiv	r3, r2, r3
 8006938:	617b      	str	r3, [r7, #20]
        break;
 800693a:	e03b      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800693c:	4b67      	ldr	r3, [pc, #412]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d108      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006948:	4b64      	ldr	r3, [pc, #400]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006950:	4a63      	ldr	r2, [pc, #396]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	e007      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800695a:	4b60      	ldr	r3, [pc, #384]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006962:	4a60      	ldr	r2, [pc, #384]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006964:	fbb2 f3f3 	udiv	r3, r2, r3
 8006968:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800696a:	4b5c      	ldr	r3, [pc, #368]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800696c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006970:	0e1b      	lsrs	r3, r3, #24
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006978:	4b58      	ldr	r3, [pc, #352]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800697a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800697e:	099b      	lsrs	r3, r3, #6
 8006980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	fb02 f203 	mul.w	r2, r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006990:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006992:	4b52      	ldr	r3, [pc, #328]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006998:	f003 031f 	and.w	r3, r3, #31
 800699c:	3301      	adds	r3, #1
 800699e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a8:	617b      	str	r3, [r7, #20]
        break;
 80069aa:	e003      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80069ac:	4b4e      	ldr	r3, [pc, #312]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80069ae:	617b      	str	r3, [r7, #20]
        break;
 80069b0:	e000      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80069b2:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ba:	f040 8086 	bne.w	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80069be:	4b47      	ldr	r3, [pc, #284]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069c4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80069cc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d4:	d03e      	beq.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80069d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069da:	d073      	beq.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d000      	beq.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80069e0:	e074      	b.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80069e2:	4b3e      	ldr	r3, [pc, #248]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d108      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80069ee:	4b3b      	ldr	r3, [pc, #236]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069f6:	4a3a      	ldr	r2, [pc, #232]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	613b      	str	r3, [r7, #16]
 80069fe:	e007      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006a00:	4b36      	ldr	r3, [pc, #216]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a08:	4a36      	ldr	r2, [pc, #216]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006a10:	4b32      	ldr	r3, [pc, #200]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a16:	0e1b      	lsrs	r3, r3, #24
 8006a18:	f003 030f 	and.w	r3, r3, #15
 8006a1c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006a1e:	4b2f      	ldr	r3, [pc, #188]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a24:	099b      	lsrs	r3, r3, #6
 8006a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	fb02 f203 	mul.w	r2, r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a36:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006a38:	4b28      	ldr	r3, [pc, #160]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a3e:	0a1b      	lsrs	r3, r3, #8
 8006a40:	f003 031f 	and.w	r3, r3, #31
 8006a44:	3301      	adds	r3, #1
 8006a46:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a50:	617b      	str	r3, [r7, #20]
        break;
 8006a52:	e03b      	b.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006a54:	4b21      	ldr	r3, [pc, #132]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d108      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a60:	4b1e      	ldr	r3, [pc, #120]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a68:	4a1d      	ldr	r2, [pc, #116]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6e:	613b      	str	r3, [r7, #16]
 8006a70:	e007      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006a72:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a80:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006a82:	4b16      	ldr	r3, [pc, #88]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a88:	0e1b      	lsrs	r3, r3, #24
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006a90:	4b12      	ldr	r3, [pc, #72]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a96:	099b      	lsrs	r3, r3, #6
 8006a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	fb02 f203 	mul.w	r2, r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006aaa:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ab0:	f003 031f 	and.w	r3, r3, #31
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac0:	617b      	str	r3, [r7, #20]
        break;
 8006ac2:	e003      	b.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ac4:	4b08      	ldr	r3, [pc, #32]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006ac6:	617b      	str	r3, [r7, #20]
        break;
 8006ac8:	e000      	b.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006aca:	bf00      	nop

  return frequency;
 8006acc:	697b      	ldr	r3, [r7, #20]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	00f42400 	.word	0x00f42400
 8006ae4:	017d7840 	.word	0x017d7840
 8006ae8:	00bb8000 	.word	0x00bb8000

08006aec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e06b      	b.n	8006bd6 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	7f5b      	ldrb	r3, [r3, #29]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d105      	bne.n	8006b14 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fb fc38 	bl	8002384 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	22ca      	movs	r2, #202	; 0xca
 8006b20:	625a      	str	r2, [r3, #36]	; 0x24
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2253      	movs	r2, #83	; 0x53
 8006b28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fb00 	bl	8007130 <RTC_EnterInitMode>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d008      	beq.n	8006b48 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	22ff      	movs	r2, #255	; 0xff
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2204      	movs	r2, #4
 8006b42:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e046      	b.n	8006bd6 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6899      	ldr	r1, [r3, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4b23      	ldr	r3, [pc, #140]	; (8006be0 <HAL_RTC_Init+0xf4>)
 8006b54:	400b      	ands	r3, r1
 8006b56:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6899      	ldr	r1, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	68d2      	ldr	r2, [r2, #12]
 8006b7e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6919      	ldr	r1, [r3, #16]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	041a      	lsls	r2, r3, #16
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ba2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0208 	bic.w	r2, r2, #8
 8006bb2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	22ff      	movs	r2, #255	; 0xff
 8006bcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
  }
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	ff8fffbf 	.word	0xff8fffbf

08006be4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006be4:	b590      	push	{r4, r7, lr}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	7f1b      	ldrb	r3, [r3, #28]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <HAL_RTC_SetTime+0x1c>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e0a8      	b.n	8006d52 <HAL_RTC_SetTime+0x16e>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d126      	bne.n	8006c60 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2200      	movs	r2, #0
 8006c24:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 faac 	bl	8007188 <RTC_ByteToBcd2>
 8006c30:	4603      	mov	r3, r0
 8006c32:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 faa5 	bl	8007188 <RTC_ByteToBcd2>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c42:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	789b      	ldrb	r3, [r3, #2]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fa9d 	bl	8007188 <RTC_ByteToBcd2>
 8006c4e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006c50:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	7b1b      	ldrb	r3, [r3, #12]
 8006c58:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	e018      	b.n	8006c92 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d102      	bne.n	8006c74 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2200      	movs	r2, #0
 8006c72:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	785b      	ldrb	r3, [r3, #1]
 8006c7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006c80:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006c86:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	7b1b      	ldrb	r3, [r3, #12]
 8006c8c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	22ca      	movs	r2, #202	; 0xca
 8006c98:	625a      	str	r2, [r3, #36]	; 0x24
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2253      	movs	r2, #83	; 0x53
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fa44 	bl	8007130 <RTC_EnterInitMode>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	22ff      	movs	r2, #255	; 0xff
 8006cb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2204      	movs	r2, #4
 8006cba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e045      	b.n	8006d52 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	6979      	ldr	r1, [r7, #20]
 8006ccc:	4b23      	ldr	r3, [pc, #140]	; (8006d5c <HAL_RTC_SetTime+0x178>)
 8006cce:	400b      	ands	r3, r1
 8006cd0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ce0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6899      	ldr	r1, [r3, #8]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d08:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 0320 	and.w	r3, r3, #32
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d111      	bne.n	8006d3c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f9e1 	bl	80070e0 <HAL_RTC_WaitForSynchro>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00b      	beq.n	8006d3c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	22ff      	movs	r2, #255	; 0xff
 8006d2a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2204      	movs	r2, #4
 8006d30:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e00a      	b.n	8006d52 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	22ff      	movs	r2, #255	; 0xff
 8006d42:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006d50:	2300      	movs	r3, #0
  }
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd90      	pop	{r4, r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	007f7f7f 	.word	0x007f7f7f

08006d60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d60:	b590      	push	{r4, r7, lr}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	7f1b      	ldrb	r3, [r3, #28]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_RTC_SetDate+0x1c>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e092      	b.n	8006ea2 <HAL_RTC_SetDate+0x142>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2202      	movs	r2, #2
 8006d86:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10e      	bne.n	8006dac <HAL_RTC_SetDate+0x4c>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	f003 0310 	and.w	r3, r3, #16
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d008      	beq.n	8006dac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	785b      	ldrb	r3, [r3, #1]
 8006d9e:	f023 0310 	bic.w	r3, r3, #16
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	330a      	adds	r3, #10
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d11c      	bne.n	8006dec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	78db      	ldrb	r3, [r3, #3]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 f9e6 	bl	8007188 <RTC_ByteToBcd2>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	785b      	ldrb	r3, [r3, #1]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f9df 	bl	8007188 <RTC_ByteToBcd2>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006dce:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	789b      	ldrb	r3, [r3, #2]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 f9d7 	bl	8007188 <RTC_ByteToBcd2>
 8006dda:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006ddc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	e00e      	b.n	8006e0a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	78db      	ldrb	r3, [r3, #3]
 8006df0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006df8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8006dfe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	22ca      	movs	r2, #202	; 0xca
 8006e10:	625a      	str	r2, [r3, #36]	; 0x24
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2253      	movs	r2, #83	; 0x53
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 f988 	bl	8007130 <RTC_EnterInitMode>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	22ff      	movs	r2, #255	; 0xff
 8006e2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2204      	movs	r2, #4
 8006e32:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e031      	b.n	8006ea2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	6979      	ldr	r1, [r7, #20]
 8006e44:	4b19      	ldr	r3, [pc, #100]	; (8006eac <HAL_RTC_SetDate+0x14c>)
 8006e46:	400b      	ands	r3, r1
 8006e48:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e58:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d111      	bne.n	8006e8c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f939 	bl	80070e0 <HAL_RTC_WaitForSynchro>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	22ff      	movs	r2, #255	; 0xff
 8006e7a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e00a      	b.n	8006ea2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	22ff      	movs	r2, #255	; 0xff
 8006e92:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
  }
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd90      	pop	{r4, r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	00ffff3f 	.word	0x00ffff3f

08006eb0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006eb0:	b590      	push	{r4, r7, lr}
 8006eb2:	b089      	sub	sp, #36	; 0x24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61fb      	str	r3, [r7, #28]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	7f1b      	ldrb	r3, [r3, #28]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_RTC_SetAlarm+0x24>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e101      	b.n	80070d8 <HAL_RTC_SetAlarm+0x228>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2202      	movs	r2, #2
 8006ede:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d137      	bne.n	8006f56 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 f942 	bl	8007188 <RTC_ByteToBcd2>
 8006f04:	4603      	mov	r3, r0
 8006f06:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	785b      	ldrb	r3, [r3, #1]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 f93b 	bl	8007188 <RTC_ByteToBcd2>
 8006f12:	4603      	mov	r3, r0
 8006f14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f16:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	789b      	ldrb	r3, [r3, #2]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 f933 	bl	8007188 <RTC_ByteToBcd2>
 8006f22:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f24:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	7b1b      	ldrb	r3, [r3, #12]
 8006f2c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006f2e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 f925 	bl	8007188 <RTC_ByteToBcd2>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f42:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006f4a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f50:	4313      	orrs	r3, r2
 8006f52:	61fb      	str	r3, [r7, #28]
 8006f54:	e023      	b.n	8006f9e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d102      	bne.n	8006f6a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	785b      	ldrb	r3, [r3, #1]
 8006f74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006f76:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f7c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	7b1b      	ldrb	r3, [r3, #12]
 8006f82:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006f84:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f8c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f8e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006f94:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	22ca      	movs	r2, #202	; 0xca
 8006fb0:	625a      	str	r2, [r3, #36]	; 0x24
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2253      	movs	r2, #83	; 0x53
 8006fb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc2:	d13f      	bne.n	8007044 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fd2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fe2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006fe4:	f7fb fd3a 	bl	8002a5c <HAL_GetTick>
 8006fe8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006fea:	e013      	b.n	8007014 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006fec:	f7fb fd36 	bl	8002a5c <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ffa:	d90b      	bls.n	8007014 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	22ff      	movs	r2, #255	; 0xff
 8007002:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2203      	movs	r2, #3
 8007008:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e061      	b.n	80070d8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0e4      	beq.n	8006fec <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007040:	609a      	str	r2, [r3, #8]
 8007042:	e03e      	b.n	80070c2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007052:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689a      	ldr	r2, [r3, #8]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007062:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007064:	f7fb fcfa 	bl	8002a5c <HAL_GetTick>
 8007068:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800706a:	e013      	b.n	8007094 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800706c:	f7fb fcf6 	bl	8002a5c <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800707a:	d90b      	bls.n	8007094 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	22ff      	movs	r2, #255	; 0xff
 8007082:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2203      	movs	r2, #3
 8007088:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e021      	b.n	80070d8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0e4      	beq.n	800706c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69fa      	ldr	r2, [r7, #28]
 80070a8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	22ff      	movs	r2, #255	; 0xff
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3724      	adds	r7, #36	; 0x24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd90      	pop	{r4, r7, pc}

080070e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070fc:	f7fb fcae 	bl	8002a5c <HAL_GetTick>
 8007100:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007102:	e009      	b.n	8007118 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007104:	f7fb fcaa 	bl	8002a5c <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007112:	d901      	bls.n	8007118 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e007      	b.n	8007128 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0ee      	beq.n	8007104 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d119      	bne.n	800717e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f04f 32ff 	mov.w	r2, #4294967295
 8007152:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007154:	f7fb fc82 	bl	8002a5c <HAL_GetTick>
 8007158:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800715a:	e009      	b.n	8007170 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800715c:	f7fb fc7e 	bl	8002a5c <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800716a:	d901      	bls.n	8007170 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e007      	b.n	8007180 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0ee      	beq.n	800715c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007196:	e005      	b.n	80071a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3301      	adds	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800719e:	79fb      	ldrb	r3, [r7, #7]
 80071a0:	3b0a      	subs	r3, #10
 80071a2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	2b09      	cmp	r3, #9
 80071a8:	d8f6      	bhi.n	8007198 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	b2db      	uxtb	r3, r3
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	7f1b      	ldrb	r3, [r3, #28]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80071dc:	2302      	movs	r3, #2
 80071de:	e03e      	b.n	800725e <HAL_RTCEx_SetTimeStamp+0x9a>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2201      	movs	r2, #1
 80071e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2202      	movs	r2, #2
 80071ea:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	4b1e      	ldr	r3, [pc, #120]	; (800726c <HAL_RTCEx_SetTimeStamp+0xa8>)
 80071f4:	4013      	ands	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	22ca      	movs	r2, #202	; 0xca
 8007206:	625a      	str	r2, [r3, #36]	; 0x24
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2253      	movs	r2, #83	; 0x53
 800720e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0206 	bic.w	r2, r2, #6
 800721e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	430a      	orrs	r2, r1
 800722e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007246:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	22ff      	movs	r2, #255	; 0xff
 800724e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	fffff7f7 	.word	0xfffff7f7

08007270 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e149      	b.n	8007522 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fb f9b0 	bl	8002608 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f94f 	bl	8007554 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d007      	beq.n	80072ce <HAL_SAI_Init+0x5e>
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d302      	bcc.n	80072c8 <HAL_SAI_Init+0x58>
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d006      	beq.n	80072d4 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80072c6:	e008      	b.n	80072da <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	61fb      	str	r3, [r7, #28]
      break;
 80072cc:	e005      	b.n	80072da <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80072ce:	2310      	movs	r3, #16
 80072d0:	61fb      	str	r3, [r7, #28]
      break;
 80072d2:	e002      	b.n	80072da <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80072d4:	2320      	movs	r3, #32
 80072d6:	61fb      	str	r3, [r7, #28]
      break;
 80072d8:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d81d      	bhi.n	800731e <HAL_SAI_Init+0xae>
 80072e2:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <HAL_SAI_Init+0x78>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	080072f9 	.word	0x080072f9
 80072ec:	080072ff 	.word	0x080072ff
 80072f0:	08007307 	.word	0x08007307
 80072f4:	0800730f 	.word	0x0800730f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
      }
      break;
 80072fc:	e010      	b.n	8007320 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80072fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007302:	617b      	str	r3, [r7, #20]
      }
      break;
 8007304:	e00c      	b.n	8007320 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007306:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800730a:	617b      	str	r3, [r7, #20]
      }
      break;
 800730c:	e008      	b.n	8007320 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800730e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007312:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	f043 0301 	orr.w	r3, r3, #1
 800731a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800731c:	e000      	b.n	8007320 <HAL_SAI_Init+0xb0>
  default:
    break;
 800731e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a81      	ldr	r2, [pc, #516]	; (800752c <HAL_SAI_Init+0x2bc>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d004      	beq.n	8007334 <HAL_SAI_Init+0xc4>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a80      	ldr	r2, [pc, #512]	; (8007530 <HAL_SAI_Init+0x2c0>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d103      	bne.n	800733c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007334:	4a7f      	ldr	r2, [pc, #508]	; (8007534 <HAL_SAI_Init+0x2c4>)
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	e002      	b.n	8007342 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800733c:	4a7e      	ldr	r2, [pc, #504]	; (8007538 <HAL_SAI_Init+0x2c8>)
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d043      	beq.n	80073d2 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a76      	ldr	r2, [pc, #472]	; (800752c <HAL_SAI_Init+0x2bc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d004      	beq.n	8007362 <HAL_SAI_Init+0xf2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a74      	ldr	r2, [pc, #464]	; (8007530 <HAL_SAI_Init+0x2c0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d104      	bne.n	800736c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007362:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007366:	f7ff fa8d 	bl	8006884 <HAL_RCCEx_GetPeriphCLKFreq>
 800736a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a72      	ldr	r2, [pc, #456]	; (800753c <HAL_SAI_Init+0x2cc>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d004      	beq.n	8007380 <HAL_SAI_Init+0x110>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a71      	ldr	r2, [pc, #452]	; (8007540 <HAL_SAI_Init+0x2d0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d104      	bne.n	800738a <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007380:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007384:	f7ff fa7e 	bl	8006884 <HAL_RCCEx_GetPeriphCLKFreq>
 8007388:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	461a      	mov	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	025b      	lsls	r3, r3, #9
 800739c:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4a67      	ldr	r2, [pc, #412]	; (8007544 <HAL_SAI_Init+0x2d4>)
 80073a6:	fba2 2303 	umull	r2, r3, r2, r3
 80073aa:	08da      	lsrs	r2, r3, #3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80073b0:	68f9      	ldr	r1, [r7, #12]
 80073b2:	4b64      	ldr	r3, [pc, #400]	; (8007544 <HAL_SAI_Init+0x2d4>)
 80073b4:	fba3 2301 	umull	r2, r3, r3, r1
 80073b8:	08da      	lsrs	r2, r3, #3
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	1aca      	subs	r2, r1, r3
 80073c4:	2a08      	cmp	r2, #8
 80073c6:	d904      	bls.n	80073d2 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_SAI_Init+0x172>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d109      	bne.n	80073f6 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d101      	bne.n	80073ee <HAL_SAI_Init+0x17e>
 80073ea:	2300      	movs	r3, #0
 80073ec:	e001      	b.n	80073f2 <HAL_SAI_Init+0x182>
 80073ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073f2:	61bb      	str	r3, [r7, #24]
 80073f4:	e008      	b.n	8007408 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d102      	bne.n	8007404 <HAL_SAI_Init+0x194>
 80073fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007402:	e000      	b.n	8007406 <HAL_SAI_Init+0x196>
 8007404:	2300      	movs	r3, #0
 8007406:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6819      	ldr	r1, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4b4d      	ldr	r3, [pc, #308]	; (8007548 <HAL_SAI_Init+0x2d8>)
 8007414:	400b      	ands	r3, r1
 8007416:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6819      	ldr	r1, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007426:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800742c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007432:	431a      	orrs	r2, r3
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007440:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800744c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	051b      	lsls	r3, r3, #20
 8007454:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6859      	ldr	r1, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	4b38      	ldr	r3, [pc, #224]	; (800754c <HAL_SAI_Init+0x2dc>)
 800746a:	400b      	ands	r3, r1
 800746c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6859      	ldr	r1, [r3, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699a      	ldr	r2, [r3, #24]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6899      	ldr	r1, [r3, #8]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	4b2e      	ldr	r3, [pc, #184]	; (8007550 <HAL_SAI_Init+0x2e0>)
 8007498:	400b      	ands	r3, r1
 800749a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6899      	ldr	r1, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074ac:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80074b2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80074b8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074be:	3b01      	subs	r3, #1
 80074c0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80074c2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68d9      	ldr	r1, [r3, #12]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	f24f 0320 	movw	r3, #61472	; 0xf020
 80074da:	400b      	ands	r3, r1
 80074dc:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68d9      	ldr	r1, [r3, #12]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ec:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f2:	041b      	lsls	r3, r3, #16
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fa:	3b01      	subs	r3, #1
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3720      	adds	r7, #32
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	40015804 	.word	0x40015804
 8007530:	40015824 	.word	0x40015824
 8007534:	40015800 	.word	0x40015800
 8007538:	40015c00 	.word	0x40015c00
 800753c:	40015c04 	.word	0x40015c04
 8007540:	40015c24 	.word	0x40015c24
 8007544:	cccccccd 	.word	0xcccccccd
 8007548:	ff05c010 	.word	0xff05c010
 800754c:	ffff1ff0 	.word	0xffff1ff0
 8007550:	fff88000 	.word	0xfff88000

08007554 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007554:	b490      	push	{r4, r7}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800755c:	4b16      	ldr	r3, [pc, #88]	; (80075b8 <SAI_Disable+0x64>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a16      	ldr	r2, [pc, #88]	; (80075bc <SAI_Disable+0x68>)
 8007562:	fba2 2303 	umull	r2, r3, r2, r3
 8007566:	0b1b      	lsrs	r3, r3, #12
 8007568:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800757c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800757e:	4623      	mov	r3, r4
 8007580:	1e5c      	subs	r4, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800758c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	73fb      	strb	r3, [r7, #15]
      break;
 800759a:	e006      	b.n	80075aa <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1e9      	bne.n	800757e <SAI_Disable+0x2a>

  return status;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc90      	pop	{r4, r7}
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	2000002c 	.word	0x2000002c
 80075bc:	95cbec1b 	.word	0x95cbec1b

080075c0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e025      	b.n	8007620 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d106      	bne.n	80075ee <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7fb f803 	bl	80025f4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2202      	movs	r2, #2
 80075f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	3304      	adds	r3, #4
 80075fe:	4619      	mov	r1, r3
 8007600:	4610      	mov	r0, r2
 8007602:	f001 fa41 	bl	8008a88 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	461a      	mov	r2, r3
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	f001 faab 	bl	8008b6c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b02      	cmp	r3, #2
 800763e:	d101      	bne.n	8007644 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007640:	2302      	movs	r3, #2
 8007642:	e018      	b.n	8007676 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	4618      	mov	r0, r3
 8007656:	f001 fb09 	bl	8008c6c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d104      	bne.n	800766c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2205      	movs	r2, #5
 8007666:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800766a:	e003      	b.n	8007674 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b02      	cmp	r3, #2
 8007692:	d101      	bne.n	8007698 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
 8007696:	e00e      	b.n	80076b6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f001 fb01 	bl	8008cae <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e04c      	b.n	800776c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d106      	bne.n	80076ec <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7fa fe66 	bl	80023b8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0203 	bic.w	r2, r2, #3
 8007702:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	4b19      	ldr	r3, [pc, #100]	; (8007774 <HAL_SPDIFRX_Init+0xb4>)
 8007710:	4013      	ands	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800771c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8007722:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007728:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800772e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8007734:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800773a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8007740:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8007746:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800774c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4313      	orrs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	fff88407 	.word	0xfff88407

08007778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e01d      	b.n	80077c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d106      	bne.n	80077a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f815 	bl	80077ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3304      	adds	r3, #4
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f000 f986 	bl	8007ac8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68da      	ldr	r2, [r3, #12]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0201 	orr.w	r2, r2, #1
 80077fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <HAL_TIM_Base_Start_IT+0x50>)
 8007804:	4013      	ands	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b06      	cmp	r3, #6
 800780c:	d00b      	beq.n	8007826 <HAL_TIM_Base_Start_IT+0x42>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007814:	d007      	beq.n	8007826 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f042 0201 	orr.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	00010007 	.word	0x00010007

08007838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b02      	cmp	r3, #2
 800784c:	d122      	bne.n	8007894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b02      	cmp	r3, #2
 800785a:	d11b      	bne.n	8007894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0202 	mvn.w	r2, #2
 8007864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f905 	bl	8007a8a <HAL_TIM_IC_CaptureCallback>
 8007880:	e005      	b.n	800788e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f8f7 	bl	8007a76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f908 	bl	8007a9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f003 0304 	and.w	r3, r3, #4
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d122      	bne.n	80078e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d11b      	bne.n	80078e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f06f 0204 	mvn.w	r2, #4
 80078b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2202      	movs	r2, #2
 80078be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f8db 	bl	8007a8a <HAL_TIM_IC_CaptureCallback>
 80078d4:	e005      	b.n	80078e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f8cd 	bl	8007a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f8de 	bl	8007a9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	f003 0308 	and.w	r3, r3, #8
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d122      	bne.n	800793c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b08      	cmp	r3, #8
 8007902:	d11b      	bne.n	800793c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f06f 0208 	mvn.w	r2, #8
 800790c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2204      	movs	r2, #4
 8007912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f8b1 	bl	8007a8a <HAL_TIM_IC_CaptureCallback>
 8007928:	e005      	b.n	8007936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f8a3 	bl	8007a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f8b4 	bl	8007a9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0310 	and.w	r3, r3, #16
 8007946:	2b10      	cmp	r3, #16
 8007948:	d122      	bne.n	8007990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f003 0310 	and.w	r3, r3, #16
 8007954:	2b10      	cmp	r3, #16
 8007956:	d11b      	bne.n	8007990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f06f 0210 	mvn.w	r2, #16
 8007960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2208      	movs	r2, #8
 8007966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f887 	bl	8007a8a <HAL_TIM_IC_CaptureCallback>
 800797c:	e005      	b.n	800798a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f879 	bl	8007a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f88a 	bl	8007a9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b01      	cmp	r3, #1
 800799c:	d10e      	bne.n	80079bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d107      	bne.n	80079bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f06f 0201 	mvn.w	r2, #1
 80079b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fa f91e 	bl	8001bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c6:	2b80      	cmp	r3, #128	; 0x80
 80079c8:	d10e      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d4:	2b80      	cmp	r3, #128	; 0x80
 80079d6:	d107      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f91a 	bl	8007c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f6:	d10e      	bne.n	8007a16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a02:	2b80      	cmp	r3, #128	; 0x80
 8007a04:	d107      	bne.n	8007a16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f90d 	bl	8007c30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	d10e      	bne.n	8007a42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2e:	2b40      	cmp	r3, #64	; 0x40
 8007a30:	d107      	bne.n	8007a42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f838 	bl	8007ab2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d10e      	bne.n	8007a6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	d107      	bne.n	8007a6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f06f 0220 	mvn.w	r2, #32
 8007a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f8cd 	bl	8007c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a6e:	bf00      	nop
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007aba:	bf00      	nop
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
	...

08007ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a40      	ldr	r2, [pc, #256]	; (8007bdc <TIM_Base_SetConfig+0x114>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d013      	beq.n	8007b08 <TIM_Base_SetConfig+0x40>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae6:	d00f      	beq.n	8007b08 <TIM_Base_SetConfig+0x40>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a3d      	ldr	r2, [pc, #244]	; (8007be0 <TIM_Base_SetConfig+0x118>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00b      	beq.n	8007b08 <TIM_Base_SetConfig+0x40>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a3c      	ldr	r2, [pc, #240]	; (8007be4 <TIM_Base_SetConfig+0x11c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d007      	beq.n	8007b08 <TIM_Base_SetConfig+0x40>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a3b      	ldr	r2, [pc, #236]	; (8007be8 <TIM_Base_SetConfig+0x120>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d003      	beq.n	8007b08 <TIM_Base_SetConfig+0x40>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a3a      	ldr	r2, [pc, #232]	; (8007bec <TIM_Base_SetConfig+0x124>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d108      	bne.n	8007b1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a2f      	ldr	r2, [pc, #188]	; (8007bdc <TIM_Base_SetConfig+0x114>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d02b      	beq.n	8007b7a <TIM_Base_SetConfig+0xb2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b28:	d027      	beq.n	8007b7a <TIM_Base_SetConfig+0xb2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a2c      	ldr	r2, [pc, #176]	; (8007be0 <TIM_Base_SetConfig+0x118>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d023      	beq.n	8007b7a <TIM_Base_SetConfig+0xb2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a2b      	ldr	r2, [pc, #172]	; (8007be4 <TIM_Base_SetConfig+0x11c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d01f      	beq.n	8007b7a <TIM_Base_SetConfig+0xb2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a2a      	ldr	r2, [pc, #168]	; (8007be8 <TIM_Base_SetConfig+0x120>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d01b      	beq.n	8007b7a <TIM_Base_SetConfig+0xb2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a29      	ldr	r2, [pc, #164]	; (8007bec <TIM_Base_SetConfig+0x124>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d017      	beq.n	8007b7a <TIM_Base_SetConfig+0xb2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a28      	ldr	r2, [pc, #160]	; (8007bf0 <TIM_Base_SetConfig+0x128>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d013      	beq.n	8007b7a <TIM_Base_SetConfig+0xb2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a27      	ldr	r2, [pc, #156]	; (8007bf4 <TIM_Base_SetConfig+0x12c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00f      	beq.n	8007b7a <TIM_Base_SetConfig+0xb2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a26      	ldr	r2, [pc, #152]	; (8007bf8 <TIM_Base_SetConfig+0x130>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00b      	beq.n	8007b7a <TIM_Base_SetConfig+0xb2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a25      	ldr	r2, [pc, #148]	; (8007bfc <TIM_Base_SetConfig+0x134>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d007      	beq.n	8007b7a <TIM_Base_SetConfig+0xb2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a24      	ldr	r2, [pc, #144]	; (8007c00 <TIM_Base_SetConfig+0x138>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d003      	beq.n	8007b7a <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a23      	ldr	r2, [pc, #140]	; (8007c04 <TIM_Base_SetConfig+0x13c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d108      	bne.n	8007b8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a0a      	ldr	r2, [pc, #40]	; (8007bdc <TIM_Base_SetConfig+0x114>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d003      	beq.n	8007bc0 <TIM_Base_SetConfig+0xf8>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a0c      	ldr	r2, [pc, #48]	; (8007bec <TIM_Base_SetConfig+0x124>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d103      	bne.n	8007bc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	691a      	ldr	r2, [r3, #16]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	615a      	str	r2, [r3, #20]
}
 8007bce:	bf00      	nop
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	40010000 	.word	0x40010000
 8007be0:	40000400 	.word	0x40000400
 8007be4:	40000800 	.word	0x40000800
 8007be8:	40000c00 	.word	0x40000c00
 8007bec:	40010400 	.word	0x40010400
 8007bf0:	40014000 	.word	0x40014000
 8007bf4:	40014400 	.word	0x40014400
 8007bf8:	40014800 	.word	0x40014800
 8007bfc:	40001800 	.word	0x40001800
 8007c00:	40001c00 	.word	0x40001c00
 8007c04:	40002000 	.word	0x40002000

08007c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e040      	b.n	8007cd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d106      	bne.n	8007c6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fa fbe8 	bl	800243c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2224      	movs	r2, #36	; 0x24
 8007c70:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0201 	bic.w	r2, r2, #1
 8007c80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa14 	bl	80080b0 <UART_SetConfig>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e022      	b.n	8007cd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fcb2 	bl	8008604 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689a      	ldr	r2, [r3, #8]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0201 	orr.w	r2, r2, #1
 8007cce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fd39 	bl	8008748 <UART_CheckIdleState>
 8007cd6:	4603      	mov	r3, r0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	4613      	mov	r3, r2
 8007cec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cf2:	2b20      	cmp	r3, #32
 8007cf4:	f040 808a 	bne.w	8007e0c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <HAL_UART_Receive_IT+0x24>
 8007cfe:	88fb      	ldrh	r3, [r7, #6]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e082      	b.n	8007e0e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d101      	bne.n	8007d16 <HAL_UART_Receive_IT+0x36>
 8007d12:	2302      	movs	r3, #2
 8007d14:	e07b      	b.n	8007e0e <HAL_UART_Receive_IT+0x12e>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	88fa      	ldrh	r2, [r7, #6]
 8007d28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	88fa      	ldrh	r2, [r7, #6]
 8007d30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d42:	d10e      	bne.n	8007d62 <HAL_UART_Receive_IT+0x82>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d105      	bne.n	8007d58 <HAL_UART_Receive_IT+0x78>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d56:	e02d      	b.n	8007db4 <HAL_UART_Receive_IT+0xd4>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	22ff      	movs	r2, #255	; 0xff
 8007d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d60:	e028      	b.n	8007db4 <HAL_UART_Receive_IT+0xd4>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10d      	bne.n	8007d86 <HAL_UART_Receive_IT+0xa6>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d104      	bne.n	8007d7c <HAL_UART_Receive_IT+0x9c>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	22ff      	movs	r2, #255	; 0xff
 8007d76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d7a:	e01b      	b.n	8007db4 <HAL_UART_Receive_IT+0xd4>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	227f      	movs	r2, #127	; 0x7f
 8007d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d84:	e016      	b.n	8007db4 <HAL_UART_Receive_IT+0xd4>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d8e:	d10d      	bne.n	8007dac <HAL_UART_Receive_IT+0xcc>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d104      	bne.n	8007da2 <HAL_UART_Receive_IT+0xc2>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	227f      	movs	r2, #127	; 0x7f
 8007d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007da0:	e008      	b.n	8007db4 <HAL_UART_Receive_IT+0xd4>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	223f      	movs	r2, #63	; 0x3f
 8007da6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007daa:	e003      	b.n	8007db4 <HAL_UART_Receive_IT+0xd4>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2222      	movs	r2, #34	; 0x22
 8007dbe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689a      	ldr	r2, [r3, #8]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f042 0201 	orr.w	r2, r2, #1
 8007dce:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd8:	d107      	bne.n	8007dea <HAL_UART_Receive_IT+0x10a>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d103      	bne.n	8007dea <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4a0d      	ldr	r2, [pc, #52]	; (8007e1c <HAL_UART_Receive_IT+0x13c>)
 8007de6:	661a      	str	r2, [r3, #96]	; 0x60
 8007de8:	e002      	b.n	8007df0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a0c      	ldr	r2, [pc, #48]	; (8007e20 <HAL_UART_Receive_IT+0x140>)
 8007dee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007e06:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e000      	b.n	8007e0e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007e0c:	2302      	movs	r3, #2
  }
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	080089e1 	.word	0x080089e1
 8007e20:	0800893b 	.word	0x0800893b

08007e24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e44:	69fa      	ldr	r2, [r7, #28]
 8007e46:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d113      	bne.n	8007e7c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	f003 0320 	and.w	r3, r3, #32
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00e      	beq.n	8007e7c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	f003 0320 	and.w	r3, r3, #32
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d009      	beq.n	8007e7c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 8100 	beq.w	8008072 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
      }
      return;
 8007e7a:	e0fa      	b.n	8008072 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 80d5 	beq.w	800802e <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 80ca 	beq.w	800802e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00e      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x9e>
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d009      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eba:	f043 0201 	orr.w	r2, r3, #1
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00e      	beq.n	8007eea <HAL_UART_IRQHandler+0xc6>
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d009      	beq.n	8007eea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2202      	movs	r2, #2
 8007edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ee2:	f043 0204 	orr.w	r2, r3, #4
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00e      	beq.n	8007f12 <HAL_UART_IRQHandler+0xee>
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d009      	beq.n	8007f12 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2204      	movs	r2, #4
 8007f04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f0a:	f043 0202 	orr.w	r2, r3, #2
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d013      	beq.n	8007f44 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	f003 0320 	and.w	r3, r3, #32
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d104      	bne.n	8007f30 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d009      	beq.n	8007f44 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2208      	movs	r2, #8
 8007f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f3c:	f043 0208 	orr.w	r2, r3, #8
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00f      	beq.n	8007f6e <HAL_UART_IRQHandler+0x14a>
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00a      	beq.n	8007f6e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f66:	f043 0220 	orr.w	r2, r3, #32
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d07f      	beq.n	8008076 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00c      	beq.n	8007f9a <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d007      	beq.n	8007f9a <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f9e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007faa:	2b40      	cmp	r3, #64	; 0x40
 8007fac:	d004      	beq.n	8007fb8 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d031      	beq.n	800801c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fc6f 	bl	800889c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc8:	2b40      	cmp	r3, #64	; 0x40
 8007fca:	d123      	bne.n	8008014 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689a      	ldr	r2, [r3, #8]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fda:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d013      	beq.n	800800c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fe8:	4a26      	ldr	r2, [pc, #152]	; (8008084 <HAL_UART_IRQHandler+0x260>)
 8007fea:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fb fa5f 	bl	80034b4 <HAL_DMA_Abort_IT>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d016      	beq.n	800802a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008006:	4610      	mov	r0, r2
 8008008:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800a:	e00e      	b.n	800802a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f845 	bl	800809c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008012:	e00a      	b.n	800802a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f841 	bl	800809c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800801a:	e006      	b.n	800802a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f83d 	bl	800809c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008028:	e025      	b.n	8008076 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800802a:	bf00      	nop
    return;
 800802c:	e023      	b.n	8008076 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00d      	beq.n	8008054 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803e:	2b00      	cmp	r3, #0
 8008040:	d008      	beq.n	8008054 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008046:	2b00      	cmp	r3, #0
 8008048:	d017      	beq.n	800807a <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
    }
    return;
 8008052:	e012      	b.n	800807a <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00e      	beq.n	800807c <HAL_UART_IRQHandler+0x258>
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008064:	2b00      	cmp	r3, #0
 8008066:	d009      	beq.n	800807c <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fc4d 	bl	8008908 <UART_EndTransmit_IT>
    return;
 800806e:	bf00      	nop
 8008070:	e004      	b.n	800807c <HAL_UART_IRQHandler+0x258>
      return;
 8008072:	bf00      	nop
 8008074:	e002      	b.n	800807c <HAL_UART_IRQHandler+0x258>
    return;
 8008076:	bf00      	nop
 8008078:	e000      	b.n	800807c <HAL_UART_IRQHandler+0x258>
    return;
 800807a:	bf00      	nop
  }

}
 800807c:	3720      	adds	r7, #32
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	080088dd 	.word	0x080088dd

08008088 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	431a      	orrs	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	4bb1      	ldr	r3, [pc, #708]	; (80083a4 <UART_SetConfig+0x2f4>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	6939      	ldr	r1, [r7, #16]
 80080e8:	430b      	orrs	r3, r1
 80080ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	4313      	orrs	r3, r2
 8008110:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	430a      	orrs	r2, r1
 8008124:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a9f      	ldr	r2, [pc, #636]	; (80083a8 <UART_SetConfig+0x2f8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d121      	bne.n	8008174 <UART_SetConfig+0xc4>
 8008130:	4b9e      	ldr	r3, [pc, #632]	; (80083ac <UART_SetConfig+0x2fc>)
 8008132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	2b03      	cmp	r3, #3
 800813c:	d816      	bhi.n	800816c <UART_SetConfig+0xbc>
 800813e:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <UART_SetConfig+0x94>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	08008155 	.word	0x08008155
 8008148:	08008161 	.word	0x08008161
 800814c:	0800815b 	.word	0x0800815b
 8008150:	08008167 	.word	0x08008167
 8008154:	2301      	movs	r3, #1
 8008156:	77fb      	strb	r3, [r7, #31]
 8008158:	e151      	b.n	80083fe <UART_SetConfig+0x34e>
 800815a:	2302      	movs	r3, #2
 800815c:	77fb      	strb	r3, [r7, #31]
 800815e:	e14e      	b.n	80083fe <UART_SetConfig+0x34e>
 8008160:	2304      	movs	r3, #4
 8008162:	77fb      	strb	r3, [r7, #31]
 8008164:	e14b      	b.n	80083fe <UART_SetConfig+0x34e>
 8008166:	2308      	movs	r3, #8
 8008168:	77fb      	strb	r3, [r7, #31]
 800816a:	e148      	b.n	80083fe <UART_SetConfig+0x34e>
 800816c:	2310      	movs	r3, #16
 800816e:	77fb      	strb	r3, [r7, #31]
 8008170:	bf00      	nop
 8008172:	e144      	b.n	80083fe <UART_SetConfig+0x34e>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a8d      	ldr	r2, [pc, #564]	; (80083b0 <UART_SetConfig+0x300>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d134      	bne.n	80081e8 <UART_SetConfig+0x138>
 800817e:	4b8b      	ldr	r3, [pc, #556]	; (80083ac <UART_SetConfig+0x2fc>)
 8008180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008184:	f003 030c 	and.w	r3, r3, #12
 8008188:	2b0c      	cmp	r3, #12
 800818a:	d829      	bhi.n	80081e0 <UART_SetConfig+0x130>
 800818c:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <UART_SetConfig+0xe4>)
 800818e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008192:	bf00      	nop
 8008194:	080081c9 	.word	0x080081c9
 8008198:	080081e1 	.word	0x080081e1
 800819c:	080081e1 	.word	0x080081e1
 80081a0:	080081e1 	.word	0x080081e1
 80081a4:	080081d5 	.word	0x080081d5
 80081a8:	080081e1 	.word	0x080081e1
 80081ac:	080081e1 	.word	0x080081e1
 80081b0:	080081e1 	.word	0x080081e1
 80081b4:	080081cf 	.word	0x080081cf
 80081b8:	080081e1 	.word	0x080081e1
 80081bc:	080081e1 	.word	0x080081e1
 80081c0:	080081e1 	.word	0x080081e1
 80081c4:	080081db 	.word	0x080081db
 80081c8:	2300      	movs	r3, #0
 80081ca:	77fb      	strb	r3, [r7, #31]
 80081cc:	e117      	b.n	80083fe <UART_SetConfig+0x34e>
 80081ce:	2302      	movs	r3, #2
 80081d0:	77fb      	strb	r3, [r7, #31]
 80081d2:	e114      	b.n	80083fe <UART_SetConfig+0x34e>
 80081d4:	2304      	movs	r3, #4
 80081d6:	77fb      	strb	r3, [r7, #31]
 80081d8:	e111      	b.n	80083fe <UART_SetConfig+0x34e>
 80081da:	2308      	movs	r3, #8
 80081dc:	77fb      	strb	r3, [r7, #31]
 80081de:	e10e      	b.n	80083fe <UART_SetConfig+0x34e>
 80081e0:	2310      	movs	r3, #16
 80081e2:	77fb      	strb	r3, [r7, #31]
 80081e4:	bf00      	nop
 80081e6:	e10a      	b.n	80083fe <UART_SetConfig+0x34e>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a71      	ldr	r2, [pc, #452]	; (80083b4 <UART_SetConfig+0x304>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d120      	bne.n	8008234 <UART_SetConfig+0x184>
 80081f2:	4b6e      	ldr	r3, [pc, #440]	; (80083ac <UART_SetConfig+0x2fc>)
 80081f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081fc:	2b10      	cmp	r3, #16
 80081fe:	d00f      	beq.n	8008220 <UART_SetConfig+0x170>
 8008200:	2b10      	cmp	r3, #16
 8008202:	d802      	bhi.n	800820a <UART_SetConfig+0x15a>
 8008204:	2b00      	cmp	r3, #0
 8008206:	d005      	beq.n	8008214 <UART_SetConfig+0x164>
 8008208:	e010      	b.n	800822c <UART_SetConfig+0x17c>
 800820a:	2b20      	cmp	r3, #32
 800820c:	d005      	beq.n	800821a <UART_SetConfig+0x16a>
 800820e:	2b30      	cmp	r3, #48	; 0x30
 8008210:	d009      	beq.n	8008226 <UART_SetConfig+0x176>
 8008212:	e00b      	b.n	800822c <UART_SetConfig+0x17c>
 8008214:	2300      	movs	r3, #0
 8008216:	77fb      	strb	r3, [r7, #31]
 8008218:	e0f1      	b.n	80083fe <UART_SetConfig+0x34e>
 800821a:	2302      	movs	r3, #2
 800821c:	77fb      	strb	r3, [r7, #31]
 800821e:	e0ee      	b.n	80083fe <UART_SetConfig+0x34e>
 8008220:	2304      	movs	r3, #4
 8008222:	77fb      	strb	r3, [r7, #31]
 8008224:	e0eb      	b.n	80083fe <UART_SetConfig+0x34e>
 8008226:	2308      	movs	r3, #8
 8008228:	77fb      	strb	r3, [r7, #31]
 800822a:	e0e8      	b.n	80083fe <UART_SetConfig+0x34e>
 800822c:	2310      	movs	r3, #16
 800822e:	77fb      	strb	r3, [r7, #31]
 8008230:	bf00      	nop
 8008232:	e0e4      	b.n	80083fe <UART_SetConfig+0x34e>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a5f      	ldr	r2, [pc, #380]	; (80083b8 <UART_SetConfig+0x308>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d120      	bne.n	8008280 <UART_SetConfig+0x1d0>
 800823e:	4b5b      	ldr	r3, [pc, #364]	; (80083ac <UART_SetConfig+0x2fc>)
 8008240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008244:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008248:	2b40      	cmp	r3, #64	; 0x40
 800824a:	d00f      	beq.n	800826c <UART_SetConfig+0x1bc>
 800824c:	2b40      	cmp	r3, #64	; 0x40
 800824e:	d802      	bhi.n	8008256 <UART_SetConfig+0x1a6>
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <UART_SetConfig+0x1b0>
 8008254:	e010      	b.n	8008278 <UART_SetConfig+0x1c8>
 8008256:	2b80      	cmp	r3, #128	; 0x80
 8008258:	d005      	beq.n	8008266 <UART_SetConfig+0x1b6>
 800825a:	2bc0      	cmp	r3, #192	; 0xc0
 800825c:	d009      	beq.n	8008272 <UART_SetConfig+0x1c2>
 800825e:	e00b      	b.n	8008278 <UART_SetConfig+0x1c8>
 8008260:	2300      	movs	r3, #0
 8008262:	77fb      	strb	r3, [r7, #31]
 8008264:	e0cb      	b.n	80083fe <UART_SetConfig+0x34e>
 8008266:	2302      	movs	r3, #2
 8008268:	77fb      	strb	r3, [r7, #31]
 800826a:	e0c8      	b.n	80083fe <UART_SetConfig+0x34e>
 800826c:	2304      	movs	r3, #4
 800826e:	77fb      	strb	r3, [r7, #31]
 8008270:	e0c5      	b.n	80083fe <UART_SetConfig+0x34e>
 8008272:	2308      	movs	r3, #8
 8008274:	77fb      	strb	r3, [r7, #31]
 8008276:	e0c2      	b.n	80083fe <UART_SetConfig+0x34e>
 8008278:	2310      	movs	r3, #16
 800827a:	77fb      	strb	r3, [r7, #31]
 800827c:	bf00      	nop
 800827e:	e0be      	b.n	80083fe <UART_SetConfig+0x34e>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a4d      	ldr	r2, [pc, #308]	; (80083bc <UART_SetConfig+0x30c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d124      	bne.n	80082d4 <UART_SetConfig+0x224>
 800828a:	4b48      	ldr	r3, [pc, #288]	; (80083ac <UART_SetConfig+0x2fc>)
 800828c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008298:	d012      	beq.n	80082c0 <UART_SetConfig+0x210>
 800829a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800829e:	d802      	bhi.n	80082a6 <UART_SetConfig+0x1f6>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <UART_SetConfig+0x204>
 80082a4:	e012      	b.n	80082cc <UART_SetConfig+0x21c>
 80082a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082aa:	d006      	beq.n	80082ba <UART_SetConfig+0x20a>
 80082ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082b0:	d009      	beq.n	80082c6 <UART_SetConfig+0x216>
 80082b2:	e00b      	b.n	80082cc <UART_SetConfig+0x21c>
 80082b4:	2300      	movs	r3, #0
 80082b6:	77fb      	strb	r3, [r7, #31]
 80082b8:	e0a1      	b.n	80083fe <UART_SetConfig+0x34e>
 80082ba:	2302      	movs	r3, #2
 80082bc:	77fb      	strb	r3, [r7, #31]
 80082be:	e09e      	b.n	80083fe <UART_SetConfig+0x34e>
 80082c0:	2304      	movs	r3, #4
 80082c2:	77fb      	strb	r3, [r7, #31]
 80082c4:	e09b      	b.n	80083fe <UART_SetConfig+0x34e>
 80082c6:	2308      	movs	r3, #8
 80082c8:	77fb      	strb	r3, [r7, #31]
 80082ca:	e098      	b.n	80083fe <UART_SetConfig+0x34e>
 80082cc:	2310      	movs	r3, #16
 80082ce:	77fb      	strb	r3, [r7, #31]
 80082d0:	bf00      	nop
 80082d2:	e094      	b.n	80083fe <UART_SetConfig+0x34e>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a39      	ldr	r2, [pc, #228]	; (80083c0 <UART_SetConfig+0x310>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d124      	bne.n	8008328 <UART_SetConfig+0x278>
 80082de:	4b33      	ldr	r3, [pc, #204]	; (80083ac <UART_SetConfig+0x2fc>)
 80082e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ec:	d012      	beq.n	8008314 <UART_SetConfig+0x264>
 80082ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f2:	d802      	bhi.n	80082fa <UART_SetConfig+0x24a>
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d007      	beq.n	8008308 <UART_SetConfig+0x258>
 80082f8:	e012      	b.n	8008320 <UART_SetConfig+0x270>
 80082fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082fe:	d006      	beq.n	800830e <UART_SetConfig+0x25e>
 8008300:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008304:	d009      	beq.n	800831a <UART_SetConfig+0x26a>
 8008306:	e00b      	b.n	8008320 <UART_SetConfig+0x270>
 8008308:	2301      	movs	r3, #1
 800830a:	77fb      	strb	r3, [r7, #31]
 800830c:	e077      	b.n	80083fe <UART_SetConfig+0x34e>
 800830e:	2302      	movs	r3, #2
 8008310:	77fb      	strb	r3, [r7, #31]
 8008312:	e074      	b.n	80083fe <UART_SetConfig+0x34e>
 8008314:	2304      	movs	r3, #4
 8008316:	77fb      	strb	r3, [r7, #31]
 8008318:	e071      	b.n	80083fe <UART_SetConfig+0x34e>
 800831a:	2308      	movs	r3, #8
 800831c:	77fb      	strb	r3, [r7, #31]
 800831e:	e06e      	b.n	80083fe <UART_SetConfig+0x34e>
 8008320:	2310      	movs	r3, #16
 8008322:	77fb      	strb	r3, [r7, #31]
 8008324:	bf00      	nop
 8008326:	e06a      	b.n	80083fe <UART_SetConfig+0x34e>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a25      	ldr	r2, [pc, #148]	; (80083c4 <UART_SetConfig+0x314>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d124      	bne.n	800837c <UART_SetConfig+0x2cc>
 8008332:	4b1e      	ldr	r3, [pc, #120]	; (80083ac <UART_SetConfig+0x2fc>)
 8008334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008338:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800833c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008340:	d012      	beq.n	8008368 <UART_SetConfig+0x2b8>
 8008342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008346:	d802      	bhi.n	800834e <UART_SetConfig+0x29e>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d007      	beq.n	800835c <UART_SetConfig+0x2ac>
 800834c:	e012      	b.n	8008374 <UART_SetConfig+0x2c4>
 800834e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008352:	d006      	beq.n	8008362 <UART_SetConfig+0x2b2>
 8008354:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008358:	d009      	beq.n	800836e <UART_SetConfig+0x2be>
 800835a:	e00b      	b.n	8008374 <UART_SetConfig+0x2c4>
 800835c:	2300      	movs	r3, #0
 800835e:	77fb      	strb	r3, [r7, #31]
 8008360:	e04d      	b.n	80083fe <UART_SetConfig+0x34e>
 8008362:	2302      	movs	r3, #2
 8008364:	77fb      	strb	r3, [r7, #31]
 8008366:	e04a      	b.n	80083fe <UART_SetConfig+0x34e>
 8008368:	2304      	movs	r3, #4
 800836a:	77fb      	strb	r3, [r7, #31]
 800836c:	e047      	b.n	80083fe <UART_SetConfig+0x34e>
 800836e:	2308      	movs	r3, #8
 8008370:	77fb      	strb	r3, [r7, #31]
 8008372:	e044      	b.n	80083fe <UART_SetConfig+0x34e>
 8008374:	2310      	movs	r3, #16
 8008376:	77fb      	strb	r3, [r7, #31]
 8008378:	bf00      	nop
 800837a:	e040      	b.n	80083fe <UART_SetConfig+0x34e>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a11      	ldr	r2, [pc, #68]	; (80083c8 <UART_SetConfig+0x318>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d139      	bne.n	80083fa <UART_SetConfig+0x34a>
 8008386:	4b09      	ldr	r3, [pc, #36]	; (80083ac <UART_SetConfig+0x2fc>)
 8008388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800838c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008394:	d027      	beq.n	80083e6 <UART_SetConfig+0x336>
 8008396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800839a:	d817      	bhi.n	80083cc <UART_SetConfig+0x31c>
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01c      	beq.n	80083da <UART_SetConfig+0x32a>
 80083a0:	e027      	b.n	80083f2 <UART_SetConfig+0x342>
 80083a2:	bf00      	nop
 80083a4:	efff69f3 	.word	0xefff69f3
 80083a8:	40011000 	.word	0x40011000
 80083ac:	40023800 	.word	0x40023800
 80083b0:	40004400 	.word	0x40004400
 80083b4:	40004800 	.word	0x40004800
 80083b8:	40004c00 	.word	0x40004c00
 80083bc:	40005000 	.word	0x40005000
 80083c0:	40011400 	.word	0x40011400
 80083c4:	40007800 	.word	0x40007800
 80083c8:	40007c00 	.word	0x40007c00
 80083cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d0:	d006      	beq.n	80083e0 <UART_SetConfig+0x330>
 80083d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80083d6:	d009      	beq.n	80083ec <UART_SetConfig+0x33c>
 80083d8:	e00b      	b.n	80083f2 <UART_SetConfig+0x342>
 80083da:	2300      	movs	r3, #0
 80083dc:	77fb      	strb	r3, [r7, #31]
 80083de:	e00e      	b.n	80083fe <UART_SetConfig+0x34e>
 80083e0:	2302      	movs	r3, #2
 80083e2:	77fb      	strb	r3, [r7, #31]
 80083e4:	e00b      	b.n	80083fe <UART_SetConfig+0x34e>
 80083e6:	2304      	movs	r3, #4
 80083e8:	77fb      	strb	r3, [r7, #31]
 80083ea:	e008      	b.n	80083fe <UART_SetConfig+0x34e>
 80083ec:	2308      	movs	r3, #8
 80083ee:	77fb      	strb	r3, [r7, #31]
 80083f0:	e005      	b.n	80083fe <UART_SetConfig+0x34e>
 80083f2:	2310      	movs	r3, #16
 80083f4:	77fb      	strb	r3, [r7, #31]
 80083f6:	bf00      	nop
 80083f8:	e001      	b.n	80083fe <UART_SetConfig+0x34e>
 80083fa:	2310      	movs	r3, #16
 80083fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008406:	d17f      	bne.n	8008508 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008408:	7ffb      	ldrb	r3, [r7, #31]
 800840a:	2b08      	cmp	r3, #8
 800840c:	d85c      	bhi.n	80084c8 <UART_SetConfig+0x418>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <UART_SetConfig+0x364>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	08008439 	.word	0x08008439
 8008418:	08008459 	.word	0x08008459
 800841c:	08008479 	.word	0x08008479
 8008420:	080084c9 	.word	0x080084c9
 8008424:	08008491 	.word	0x08008491
 8008428:	080084c9 	.word	0x080084c9
 800842c:	080084c9 	.word	0x080084c9
 8008430:	080084c9 	.word	0x080084c9
 8008434:	080084b1 	.word	0x080084b1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008438:	f7fd fddc 	bl	8005ff4 <HAL_RCC_GetPCLK1Freq>
 800843c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	005a      	lsls	r2, r3, #1
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	085b      	lsrs	r3, r3, #1
 8008448:	441a      	add	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008452:	b29b      	uxth	r3, r3
 8008454:	61bb      	str	r3, [r7, #24]
        break;
 8008456:	e03a      	b.n	80084ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008458:	f7fd fde0 	bl	800601c <HAL_RCC_GetPCLK2Freq>
 800845c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	005a      	lsls	r2, r3, #1
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	085b      	lsrs	r3, r3, #1
 8008468:	441a      	add	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008472:	b29b      	uxth	r3, r3
 8008474:	61bb      	str	r3, [r7, #24]
        break;
 8008476:	e02a      	b.n	80084ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	085a      	lsrs	r2, r3, #1
 800847e:	4b5f      	ldr	r3, [pc, #380]	; (80085fc <UART_SetConfig+0x54c>)
 8008480:	4413      	add	r3, r2
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	6852      	ldr	r2, [r2, #4]
 8008486:	fbb3 f3f2 	udiv	r3, r3, r2
 800848a:	b29b      	uxth	r3, r3
 800848c:	61bb      	str	r3, [r7, #24]
        break;
 800848e:	e01e      	b.n	80084ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008490:	f7fd fcf2 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 8008494:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	005a      	lsls	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	441a      	add	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	61bb      	str	r3, [r7, #24]
        break;
 80084ae:	e00e      	b.n	80084ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	085b      	lsrs	r3, r3, #1
 80084b6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	61bb      	str	r3, [r7, #24]
        break;
 80084c6:	e002      	b.n	80084ce <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	75fb      	strb	r3, [r7, #23]
        break;
 80084cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b0f      	cmp	r3, #15
 80084d2:	d916      	bls.n	8008502 <UART_SetConfig+0x452>
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084da:	d212      	bcs.n	8008502 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	f023 030f 	bic.w	r3, r3, #15
 80084e4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	085b      	lsrs	r3, r3, #1
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f003 0307 	and.w	r3, r3, #7
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	897b      	ldrh	r3, [r7, #10]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	897a      	ldrh	r2, [r7, #10]
 80084fe:	60da      	str	r2, [r3, #12]
 8008500:	e070      	b.n	80085e4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	75fb      	strb	r3, [r7, #23]
 8008506:	e06d      	b.n	80085e4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008508:	7ffb      	ldrb	r3, [r7, #31]
 800850a:	2b08      	cmp	r3, #8
 800850c:	d859      	bhi.n	80085c2 <UART_SetConfig+0x512>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <UART_SetConfig+0x464>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	08008539 	.word	0x08008539
 8008518:	08008557 	.word	0x08008557
 800851c:	08008575 	.word	0x08008575
 8008520:	080085c3 	.word	0x080085c3
 8008524:	0800858d 	.word	0x0800858d
 8008528:	080085c3 	.word	0x080085c3
 800852c:	080085c3 	.word	0x080085c3
 8008530:	080085c3 	.word	0x080085c3
 8008534:	080085ab 	.word	0x080085ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008538:	f7fd fd5c 	bl	8005ff4 <HAL_RCC_GetPCLK1Freq>
 800853c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	085a      	lsrs	r2, r3, #1
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	441a      	add	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008550:	b29b      	uxth	r3, r3
 8008552:	61bb      	str	r3, [r7, #24]
        break;
 8008554:	e038      	b.n	80085c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008556:	f7fd fd61 	bl	800601c <HAL_RCC_GetPCLK2Freq>
 800855a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	085a      	lsrs	r2, r3, #1
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	441a      	add	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	fbb2 f3f3 	udiv	r3, r2, r3
 800856e:	b29b      	uxth	r3, r3
 8008570:	61bb      	str	r3, [r7, #24]
        break;
 8008572:	e029      	b.n	80085c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	085a      	lsrs	r2, r3, #1
 800857a:	4b21      	ldr	r3, [pc, #132]	; (8008600 <UART_SetConfig+0x550>)
 800857c:	4413      	add	r3, r2
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	6852      	ldr	r2, [r2, #4]
 8008582:	fbb3 f3f2 	udiv	r3, r3, r2
 8008586:	b29b      	uxth	r3, r3
 8008588:	61bb      	str	r3, [r7, #24]
        break;
 800858a:	e01d      	b.n	80085c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800858c:	f7fd fc74 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 8008590:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	085a      	lsrs	r2, r3, #1
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	441a      	add	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	61bb      	str	r3, [r7, #24]
        break;
 80085a8:	e00e      	b.n	80085c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	085b      	lsrs	r3, r3, #1
 80085b0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085bc:	b29b      	uxth	r3, r3
 80085be:	61bb      	str	r3, [r7, #24]
        break;
 80085c0:	e002      	b.n	80085c8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	75fb      	strb	r3, [r7, #23]
        break;
 80085c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	2b0f      	cmp	r3, #15
 80085cc:	d908      	bls.n	80085e0 <UART_SetConfig+0x530>
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d4:	d204      	bcs.n	80085e0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	60da      	str	r2, [r3, #12]
 80085de:	e001      	b.n	80085e4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3720      	adds	r7, #32
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	01e84800 	.word	0x01e84800
 8008600:	00f42400 	.word	0x00f42400

08008604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00a      	beq.n	800862e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	430a      	orrs	r2, r1
 800864e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	f003 0310 	and.w	r3, r3, #16
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01a      	beq.n	800871a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008702:	d10a      	bne.n	800871a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	430a      	orrs	r2, r1
 800873a:	605a      	str	r2, [r3, #4]
  }
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af02      	add	r7, sp, #8
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008756:	f7fa f981 	bl	8002a5c <HAL_GetTick>
 800875a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0308 	and.w	r3, r3, #8
 8008766:	2b08      	cmp	r3, #8
 8008768:	d10e      	bne.n	8008788 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800876a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f814 	bl	80087a6 <UART_WaitOnFlagUntilTimeout>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e00a      	b.n	800879e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2220      	movs	r2, #32
 800878c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	603b      	str	r3, [r7, #0]
 80087b2:	4613      	mov	r3, r2
 80087b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087b6:	e05d      	b.n	8008874 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087be:	d059      	beq.n	8008874 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087c0:	f7fa f94c 	bl	8002a5c <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d302      	bcc.n	80087d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d11b      	bne.n	800880e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 0201 	bic.w	r2, r2, #1
 80087f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2220      	movs	r2, #32
 80087fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2220      	movs	r2, #32
 8008800:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e042      	b.n	8008894 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0304 	and.w	r3, r3, #4
 8008818:	2b00      	cmp	r3, #0
 800881a:	d02b      	beq.n	8008874 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800882a:	d123      	bne.n	8008874 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008834:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008844:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f022 0201 	bic.w	r2, r2, #1
 8008854:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2220      	movs	r2, #32
 800885a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2220      	movs	r2, #32
 8008860:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2220      	movs	r2, #32
 8008866:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e00f      	b.n	8008894 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	69da      	ldr	r2, [r3, #28]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	4013      	ands	r3, r2
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	429a      	cmp	r2, r3
 8008882:	bf0c      	ite	eq
 8008884:	2301      	moveq	r3, #1
 8008886:	2300      	movne	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	461a      	mov	r2, r3
 800888c:	79fb      	ldrb	r3, [r7, #7]
 800888e:	429a      	cmp	r2, r3
 8008890:	d092      	beq.n	80087b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0201 	bic.w	r2, r2, #1
 80088c2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2220      	movs	r2, #32
 80088c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	661a      	str	r2, [r3, #96]	; 0x60
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f7ff fbce 	bl	800809c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008900:	bf00      	nop
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800891e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2220      	movs	r2, #32
 8008924:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff fbab 	bl	8008088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008932:	bf00      	nop
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008948:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800894e:	2b22      	cmp	r3, #34	; 0x22
 8008950:	d13a      	bne.n	80089c8 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800895a:	89bb      	ldrh	r3, [r7, #12]
 800895c:	b2d9      	uxtb	r1, r3
 800895e:	89fb      	ldrh	r3, [r7, #14]
 8008960:	b2da      	uxtb	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008966:	400a      	ands	r2, r1
 8008968:	b2d2      	uxtb	r2, r2
 800896a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008970:	1c5a      	adds	r2, r3, #1
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800897c:	b29b      	uxth	r3, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800898e:	b29b      	uxth	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d121      	bne.n	80089d8 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089a2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689a      	ldr	r2, [r3, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0201 	bic.w	r2, r2, #1
 80089b2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7f8 f8a9 	bl	8000b18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089c6:	e007      	b.n	80089d8 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	699a      	ldr	r2, [r3, #24]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0208 	orr.w	r2, r2, #8
 80089d6:	619a      	str	r2, [r3, #24]
}
 80089d8:	bf00      	nop
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089ee:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089f4:	2b22      	cmp	r3, #34	; 0x22
 80089f6:	d13a      	bne.n	8008a6e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a04:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a06:	89ba      	ldrh	r2, [r7, #12]
 8008a08:	89fb      	ldrh	r3, [r7, #14]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a16:	1c9a      	adds	r2, r3, #2
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	3b01      	subs	r3, #1
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d121      	bne.n	8008a7e <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a48:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f022 0201 	bic.w	r2, r2, #1
 8008a58:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2220      	movs	r2, #32
 8008a5e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7f8 f856 	bl	8000b18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a6c:	e007      	b.n	8008a7e <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699a      	ldr	r2, [r3, #24]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f042 0208 	orr.w	r2, r2, #8
 8008a7c:	619a      	str	r2, [r3, #24]
}
 8008a7e:	bf00      	nop
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d027      	beq.n	8008af2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	4b2f      	ldr	r3, [pc, #188]	; (8008b68 <FMC_SDRAM_Init+0xe0>)
 8008aac:	4013      	ands	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ab8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008abe:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008ac4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008aca:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008ad0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008ad6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008adc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008ae2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	601a      	str	r2, [r3, #0]
 8008af0:	e032      	b.n	8008b58 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008afe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008b0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	4b12      	ldr	r3, [pc, #72]	; (8008b68 <FMC_SDRAM_Init+0xe0>)
 8008b20:	4013      	ands	r3, r2
 8008b22:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b2c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008b32:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008b38:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008b3e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008b44:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	ffff8000 	.word	0xffff8000

08008b6c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d02e      	beq.n	8008be4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b92:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008ba2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008bac:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008bb6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008bc0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008bca:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	609a      	str	r2, [r3, #8]
 8008be2:	e039      	b.n	8008c58 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	4b1e      	ldr	r3, [pc, #120]	; (8008c68 <FMC_SDRAM_Timing_Init+0xfc>)
 8008bee:	4013      	ands	r3, r2
 8008bf0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008c02:	4313      	orrs	r3, r2
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c16:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c26:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008c30:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008c3a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c44:	4313      	orrs	r3, r2
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	ff0f0fff 	.word	0xff0f0fff

08008c6c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008c84:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008c8e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	371c      	adds	r7, #28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b083      	sub	sp, #12
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695a      	ldr	r2, [r3, #20]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ce6:	2b84      	cmp	r3, #132	; 0x84
 8008ce8:	d005      	beq.n	8008cf6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008cea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	3303      	adds	r3, #3
 8008cf4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d0a:	f3ef 8305 	mrs	r3, IPSR
 8008d0e:	607b      	str	r3, [r7, #4]
  return(result);
 8008d10:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bf14      	ite	ne
 8008d16:	2301      	movne	r3, #1
 8008d18:	2300      	moveq	r3, #0
 8008d1a:	b2db      	uxtb	r3, r3
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d2c:	f001 fa9c 	bl	800a268 <vTaskStartScheduler>
  
  return osOK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d38:	b089      	sub	sp, #36	; 0x24
 8008d3a:	af04      	add	r7, sp, #16
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d020      	beq.n	8008d8a <osThreadCreate+0x54>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01c      	beq.n	8008d8a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685c      	ldr	r4, [r3, #4]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681d      	ldr	r5, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	691e      	ldr	r6, [r3, #16]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff ffb6 	bl	8008cd4 <makeFreeRtosPriority>
 8008d68:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d72:	9202      	str	r2, [sp, #8]
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	9100      	str	r1, [sp, #0]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	4632      	mov	r2, r6
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f001 f899 	bl	8009eb6 <xTaskCreateStatic>
 8008d84:	4603      	mov	r3, r0
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	e01c      	b.n	8008dc4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685c      	ldr	r4, [r3, #4]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d96:	b29e      	uxth	r6, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff ff98 	bl	8008cd4 <makeFreeRtosPriority>
 8008da4:	4602      	mov	r2, r0
 8008da6:	f107 030c 	add.w	r3, r7, #12
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	9200      	str	r2, [sp, #0]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	4632      	mov	r2, r6
 8008db2:	4629      	mov	r1, r5
 8008db4:	4620      	mov	r0, r4
 8008db6:	f001 f8de 	bl	8009f76 <xTaskCreate>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d001      	beq.n	8008dc4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	e000      	b.n	8008dc6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <osDelay+0x16>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	e000      	b.n	8008de6 <osDelay+0x18>
 8008de4:	2301      	movs	r3, #1
 8008de6:	4618      	mov	r0, r3
 8008de8:	f001 fa08 	bl	800a1fc <vTaskDelay>
  
  return osOK;
 8008dec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b086      	sub	sp, #24
 8008dfa:	af02      	add	r7, sp, #8
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d017      	beq.n	8008e38 <osSemaphoreCreate+0x42>
    if (count == 1) {
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d10b      	bne.n	8008e26 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	2303      	movs	r3, #3
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	4613      	mov	r3, r2
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	2001      	movs	r0, #1
 8008e1e:	f000 f9cd 	bl	80091bc <xQueueGenericCreateStatic>
 8008e22:	4603      	mov	r3, r0
 8008e24:	e023      	b.n	8008e6e <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8008e26:	6838      	ldr	r0, [r7, #0]
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f000 faa1 	bl	8009376 <xQueueCreateCountingSemaphoreStatic>
 8008e34:	4603      	mov	r3, r0
 8008e36:	e01a      	b.n	8008e6e <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d110      	bne.n	8008e60 <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 8008e3e:	2203      	movs	r2, #3
 8008e40:	2100      	movs	r1, #0
 8008e42:	2001      	movs	r0, #1
 8008e44:	f000 fa37 	bl	80092b6 <xQueueGenericCreate>
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <osSemaphoreCreate+0x66>
 8008e50:	2300      	movs	r3, #0
 8008e52:	2200      	movs	r2, #0
 8008e54:	2100      	movs	r1, #0
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 fafc 	bl	8009454 <xQueueGenericSend>
      return sema;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	e006      	b.n	8008e6e <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 fabe 	bl	80093e8 <xQueueCreateCountingSemaphore>
 8008e6c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008e82:	2300      	movs	r3, #0
 8008e84:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008e8c:	2380      	movs	r3, #128	; 0x80
 8008e8e:	e03a      	b.n	8008f06 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9a:	d103      	bne.n	8008ea4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	e009      	b.n	8008eb8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d006      	beq.n	8008eb8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <osSemaphoreWait+0x40>
      ticks = 1;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008eb8:	f7ff ff24 	bl	8008d04 <inHandlerMode>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d017      	beq.n	8008ef2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008ec2:	f107 0308 	add.w	r3, r7, #8
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	2100      	movs	r1, #0
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fe48 	bl	8009b60 <xQueueReceiveFromISR>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d001      	beq.n	8008eda <osSemaphoreWait+0x62>
      return osErrorOS;
 8008ed6:	23ff      	movs	r3, #255	; 0xff
 8008ed8:	e015      	b.n	8008f06 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d011      	beq.n	8008f04 <osSemaphoreWait+0x8c>
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <osSemaphoreWait+0x98>)
 8008ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	e008      	b.n	8008f04 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008ef2:	68f9      	ldr	r1, [r7, #12]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fd23 	bl	8009940 <xQueueSemaphoreTake>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d001      	beq.n	8008f04 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008f00:	23ff      	movs	r3, #255	; 0xff
 8008f02:	e000      	b.n	8008f06 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	e000ed04 	.word	0xe000ed04

08008f14 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008f24:	f7ff feee 	bl	8008d04 <inHandlerMode>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d016      	beq.n	8008f5c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008f2e:	f107 0308 	add.w	r3, r7, #8
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fb8f 	bl	8009658 <xQueueGiveFromISR>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d001      	beq.n	8008f44 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008f40:	23ff      	movs	r3, #255	; 0xff
 8008f42:	e017      	b.n	8008f74 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d013      	beq.n	8008f72 <osSemaphoreRelease+0x5e>
 8008f4a:	4b0c      	ldr	r3, [pc, #48]	; (8008f7c <osSemaphoreRelease+0x68>)
 8008f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	e00a      	b.n	8008f72 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2100      	movs	r1, #0
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fa76 	bl	8009454 <xQueueGenericSend>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d001      	beq.n	8008f72 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008f6e:	23ff      	movs	r3, #255	; 0xff
 8008f70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008f72:	68fb      	ldr	r3, [r7, #12]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	e000ed04 	.word	0xe000ed04

08008f80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f103 0208 	add.w	r2, r3, #8
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f04f 32ff 	mov.w	r2, #4294967295
 8008f98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f103 0208 	add.w	r2, r3, #8
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f103 0208 	add.w	r2, r3, #8
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b085      	sub	sp, #20
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	601a      	str	r2, [r3, #0]
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009022:	b480      	push	{r7}
 8009024:	b085      	sub	sp, #20
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009038:	d103      	bne.n	8009042 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	e00c      	b.n	800905c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3308      	adds	r3, #8
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	e002      	b.n	8009050 <vListInsert+0x2e>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	60fb      	str	r3, [r7, #12]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	429a      	cmp	r2, r3
 800905a:	d2f6      	bcs.n	800904a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	1c5a      	adds	r2, r3, #1
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	601a      	str	r2, [r3, #0]
}
 8009088:	bf00      	nop
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	6892      	ldr	r2, [r2, #8]
 80090aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	6852      	ldr	r2, [r2, #4]
 80090b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d103      	bne.n	80090c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689a      	ldr	r2, [r3, #8]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	1e5a      	subs	r2, r3, #1
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10b      	bne.n	8009114 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	b672      	cpsid	i
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	b662      	cpsie	i
 8009110:	60bb      	str	r3, [r7, #8]
 8009112:	e7fe      	b.n	8009112 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8009114:	f002 f820 	bl	800b158 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009120:	68f9      	ldr	r1, [r7, #12]
 8009122:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009124:	fb01 f303 	mul.w	r3, r1, r3
 8009128:	441a      	add	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009144:	3b01      	subs	r3, #1
 8009146:	68f9      	ldr	r1, [r7, #12]
 8009148:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800914a:	fb01 f303 	mul.w	r3, r1, r3
 800914e:	441a      	add	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	22ff      	movs	r2, #255	; 0xff
 8009158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	22ff      	movs	r2, #255	; 0xff
 8009160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d114      	bne.n	8009194 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d01a      	beq.n	80091a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3310      	adds	r3, #16
 8009176:	4618      	mov	r0, r3
 8009178:	f001 fae6 	bl	800a748 <xTaskRemoveFromEventList>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d012      	beq.n	80091a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009182:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <xQueueGenericReset+0xd0>)
 8009184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	e009      	b.n	80091a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3310      	adds	r3, #16
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff fef1 	bl	8008f80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3324      	adds	r3, #36	; 0x24
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff feec 	bl	8008f80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091a8:	f002 f808 	bl	800b1bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091ac:	2301      	movs	r3, #1
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	e000ed04 	.word	0xe000ed04

080091bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08e      	sub	sp, #56	; 0x38
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
 80091c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10b      	bne.n	80091e8 <xQueueGenericCreateStatic+0x2c>
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	b672      	cpsid	i
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	b662      	cpsie	i
 80091e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80091e6:	e7fe      	b.n	80091e6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10b      	bne.n	8009206 <xQueueGenericCreateStatic+0x4a>
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	b672      	cpsid	i
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	b662      	cpsie	i
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
 8009204:	e7fe      	b.n	8009204 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <xQueueGenericCreateStatic+0x56>
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <xQueueGenericCreateStatic+0x5a>
 8009212:	2301      	movs	r3, #1
 8009214:	e000      	b.n	8009218 <xQueueGenericCreateStatic+0x5c>
 8009216:	2300      	movs	r3, #0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10b      	bne.n	8009234 <xQueueGenericCreateStatic+0x78>
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	b672      	cpsid	i
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	b662      	cpsie	i
 8009230:	623b      	str	r3, [r7, #32]
 8009232:	e7fe      	b.n	8009232 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d102      	bne.n	8009240 <xQueueGenericCreateStatic+0x84>
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <xQueueGenericCreateStatic+0x88>
 8009240:	2301      	movs	r3, #1
 8009242:	e000      	b.n	8009246 <xQueueGenericCreateStatic+0x8a>
 8009244:	2300      	movs	r3, #0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10b      	bne.n	8009262 <xQueueGenericCreateStatic+0xa6>
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	b672      	cpsid	i
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	b662      	cpsie	i
 800925e:	61fb      	str	r3, [r7, #28]
 8009260:	e7fe      	b.n	8009260 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009262:	2348      	movs	r3, #72	; 0x48
 8009264:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b48      	cmp	r3, #72	; 0x48
 800926a:	d00b      	beq.n	8009284 <xQueueGenericCreateStatic+0xc8>
 800926c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009270:	b672      	cpsid	i
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	b662      	cpsie	i
 8009280:	61bb      	str	r3, [r7, #24]
 8009282:	e7fe      	b.n	8009282 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009284:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00d      	beq.n	80092ac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009298:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	4613      	mov	r3, r2
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	68b9      	ldr	r1, [r7, #8]
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 f846 	bl	8009338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3730      	adds	r7, #48	; 0x30
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b08a      	sub	sp, #40	; 0x28
 80092ba:	af02      	add	r7, sp, #8
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	4613      	mov	r3, r2
 80092c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10b      	bne.n	80092e2 <xQueueGenericCreate+0x2c>
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	b672      	cpsid	i
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	b662      	cpsie	i
 80092de:	613b      	str	r3, [r7, #16]
 80092e0:	e7fe      	b.n	80092e0 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d102      	bne.n	80092ee <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	61fb      	str	r3, [r7, #28]
 80092ec:	e004      	b.n	80092f8 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	fb02 f303 	mul.w	r3, r2, r3
 80092f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	3348      	adds	r3, #72	; 0x48
 80092fc:	4618      	mov	r0, r3
 80092fe:	f002 f84d 	bl	800b39c <pvPortMalloc>
 8009302:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d011      	beq.n	800932e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	3348      	adds	r3, #72	; 0x48
 8009312:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800931c:	79fa      	ldrb	r2, [r7, #7]
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	4613      	mov	r3, r2
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f805 	bl	8009338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800932e:	69bb      	ldr	r3, [r7, #24]
	}
 8009330:	4618      	mov	r0, r3
 8009332:	3720      	adds	r7, #32
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
 8009344:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d103      	bne.n	8009354 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	69ba      	ldr	r2, [r7, #24]
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e002      	b.n	800935a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009366:	2101      	movs	r1, #1
 8009368:	69b8      	ldr	r0, [r7, #24]
 800936a:	f7ff febd 	bl	80090e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800936e:	bf00      	nop
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009376:	b580      	push	{r7, lr}
 8009378:	b08a      	sub	sp, #40	; 0x28
 800937a:	af02      	add	r7, sp, #8
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10b      	bne.n	80093a0 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	b672      	cpsid	i
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	b662      	cpsie	i
 800939c:	61bb      	str	r3, [r7, #24]
 800939e:	e7fe      	b.n	800939e <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d90b      	bls.n	80093c0 <xQueueCreateCountingSemaphoreStatic+0x4a>
 80093a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ac:	b672      	cpsid	i
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	b662      	cpsie	i
 80093bc:	617b      	str	r3, [r7, #20]
 80093be:	e7fe      	b.n	80093be <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80093c0:	2302      	movs	r3, #2
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	2100      	movs	r1, #0
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7ff fef6 	bl	80091bc <xQueueGenericCreateStatic>
 80093d0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80093de:	69fb      	ldr	r3, [r7, #28]
	}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3720      	adds	r7, #32
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10b      	bne.n	8009410 <xQueueCreateCountingSemaphore+0x28>
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	b672      	cpsid	i
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	b662      	cpsie	i
 800940c:	613b      	str	r3, [r7, #16]
 800940e:	e7fe      	b.n	800940e <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	429a      	cmp	r2, r3
 8009416:	d90b      	bls.n	8009430 <xQueueCreateCountingSemaphore+0x48>
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	b672      	cpsid	i
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	b662      	cpsie	i
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	e7fe      	b.n	800942e <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009430:	2202      	movs	r2, #2
 8009432:	2100      	movs	r1, #0
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff ff3e 	bl	80092b6 <xQueueGenericCreate>
 800943a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d002      	beq.n	8009448 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009448:	697b      	ldr	r3, [r7, #20]
	}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
	...

08009454 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08e      	sub	sp, #56	; 0x38
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009462:	2300      	movs	r3, #0
 8009464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10b      	bne.n	8009488 <xQueueGenericSend+0x34>
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	b672      	cpsid	i
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	b662      	cpsie	i
 8009484:	62bb      	str	r3, [r7, #40]	; 0x28
 8009486:	e7fe      	b.n	8009486 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d103      	bne.n	8009496 <xQueueGenericSend+0x42>
 800948e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <xQueueGenericSend+0x46>
 8009496:	2301      	movs	r3, #1
 8009498:	e000      	b.n	800949c <xQueueGenericSend+0x48>
 800949a:	2300      	movs	r3, #0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10b      	bne.n	80094b8 <xQueueGenericSend+0x64>
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	b672      	cpsid	i
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	b662      	cpsie	i
 80094b4:	627b      	str	r3, [r7, #36]	; 0x24
 80094b6:	e7fe      	b.n	80094b6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d103      	bne.n	80094c6 <xQueueGenericSend+0x72>
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d101      	bne.n	80094ca <xQueueGenericSend+0x76>
 80094c6:	2301      	movs	r3, #1
 80094c8:	e000      	b.n	80094cc <xQueueGenericSend+0x78>
 80094ca:	2300      	movs	r3, #0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10b      	bne.n	80094e8 <xQueueGenericSend+0x94>
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	b672      	cpsid	i
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	b662      	cpsie	i
 80094e4:	623b      	str	r3, [r7, #32]
 80094e6:	e7fe      	b.n	80094e6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094e8:	f001 faee 	bl	800aac8 <xTaskGetSchedulerState>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d102      	bne.n	80094f8 <xQueueGenericSend+0xa4>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <xQueueGenericSend+0xa8>
 80094f8:	2301      	movs	r3, #1
 80094fa:	e000      	b.n	80094fe <xQueueGenericSend+0xaa>
 80094fc:	2300      	movs	r3, #0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10b      	bne.n	800951a <xQueueGenericSend+0xc6>
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	b672      	cpsid	i
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	b662      	cpsie	i
 8009516:	61fb      	str	r3, [r7, #28]
 8009518:	e7fe      	b.n	8009518 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800951a:	f001 fe1d 	bl	800b158 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009526:	429a      	cmp	r2, r3
 8009528:	d302      	bcc.n	8009530 <xQueueGenericSend+0xdc>
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	2b02      	cmp	r3, #2
 800952e:	d129      	bne.n	8009584 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	68b9      	ldr	r1, [r7, #8]
 8009534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009536:	f000 fbae 	bl	8009c96 <prvCopyDataToQueue>
 800953a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	2b00      	cmp	r3, #0
 8009542:	d010      	beq.n	8009566 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	3324      	adds	r3, #36	; 0x24
 8009548:	4618      	mov	r0, r3
 800954a:	f001 f8fd 	bl	800a748 <xTaskRemoveFromEventList>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d013      	beq.n	800957c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009554:	4b3f      	ldr	r3, [pc, #252]	; (8009654 <xQueueGenericSend+0x200>)
 8009556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	e00a      	b.n	800957c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009568:	2b00      	cmp	r3, #0
 800956a:	d007      	beq.n	800957c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800956c:	4b39      	ldr	r3, [pc, #228]	; (8009654 <xQueueGenericSend+0x200>)
 800956e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800957c:	f001 fe1e 	bl	800b1bc <vPortExitCritical>
				return pdPASS;
 8009580:	2301      	movs	r3, #1
 8009582:	e063      	b.n	800964c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d103      	bne.n	8009592 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800958a:	f001 fe17 	bl	800b1bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800958e:	2300      	movs	r3, #0
 8009590:	e05c      	b.n	800964c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009594:	2b00      	cmp	r3, #0
 8009596:	d106      	bne.n	80095a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009598:	f107 0314 	add.w	r3, r7, #20
 800959c:	4618      	mov	r0, r3
 800959e:	f001 f937 	bl	800a810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095a2:	2301      	movs	r3, #1
 80095a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095a6:	f001 fe09 	bl	800b1bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095aa:	f000 febf 	bl	800a32c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095ae:	f001 fdd3 	bl	800b158 <vPortEnterCritical>
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095b8:	b25b      	sxtb	r3, r3
 80095ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095be:	d103      	bne.n	80095c8 <xQueueGenericSend+0x174>
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095ce:	b25b      	sxtb	r3, r3
 80095d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d4:	d103      	bne.n	80095de <xQueueGenericSend+0x18a>
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095de:	f001 fded 	bl	800b1bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095e2:	1d3a      	adds	r2, r7, #4
 80095e4:	f107 0314 	add.w	r3, r7, #20
 80095e8:	4611      	mov	r1, r2
 80095ea:	4618      	mov	r0, r3
 80095ec:	f001 f926 	bl	800a83c <xTaskCheckForTimeOut>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d124      	bne.n	8009640 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095f8:	f000 fc45 	bl	8009e86 <prvIsQueueFull>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d018      	beq.n	8009634 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	3310      	adds	r3, #16
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	4611      	mov	r1, r2
 800960a:	4618      	mov	r0, r3
 800960c:	f001 f876 	bl	800a6fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009612:	f000 fbd0 	bl	8009db6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009616:	f000 fe97 	bl	800a348 <xTaskResumeAll>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	f47f af7c 	bne.w	800951a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009622:	4b0c      	ldr	r3, [pc, #48]	; (8009654 <xQueueGenericSend+0x200>)
 8009624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	e772      	b.n	800951a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009636:	f000 fbbe 	bl	8009db6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800963a:	f000 fe85 	bl	800a348 <xTaskResumeAll>
 800963e:	e76c      	b.n	800951a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009642:	f000 fbb8 	bl	8009db6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009646:	f000 fe7f 	bl	800a348 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800964a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800964c:	4618      	mov	r0, r3
 800964e:	3738      	adds	r7, #56	; 0x38
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	e000ed04 	.word	0xe000ed04

08009658 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b08e      	sub	sp, #56	; 0x38
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10b      	bne.n	8009684 <xQueueGiveFromISR+0x2c>
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	b672      	cpsid	i
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	b662      	cpsie	i
 8009680:	623b      	str	r3, [r7, #32]
 8009682:	e7fe      	b.n	8009682 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <xQueueGiveFromISR+0x4c>
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	b672      	cpsid	i
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	b662      	cpsie	i
 80096a0:	61fb      	str	r3, [r7, #28]
 80096a2:	e7fe      	b.n	80096a2 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d103      	bne.n	80096b4 <xQueueGiveFromISR+0x5c>
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <xQueueGiveFromISR+0x60>
 80096b4:	2301      	movs	r3, #1
 80096b6:	e000      	b.n	80096ba <xQueueGiveFromISR+0x62>
 80096b8:	2300      	movs	r3, #0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10b      	bne.n	80096d6 <xQueueGiveFromISR+0x7e>
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	b672      	cpsid	i
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	b662      	cpsie	i
 80096d2:	61bb      	str	r3, [r7, #24]
 80096d4:	e7fe      	b.n	80096d4 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096d6:	f001 fe1f 	bl	800b318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096da:	f3ef 8211 	mrs	r2, BASEPRI
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	b672      	cpsid	i
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	b662      	cpsie	i
 80096f2:	617a      	str	r2, [r7, #20]
 80096f4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009706:	429a      	cmp	r2, r3
 8009708:	d22b      	bcs.n	8009762 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800971c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009724:	d112      	bne.n	800974c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	2b00      	cmp	r3, #0
 800972c:	d016      	beq.n	800975c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	3324      	adds	r3, #36	; 0x24
 8009732:	4618      	mov	r0, r3
 8009734:	f001 f808 	bl	800a748 <xTaskRemoveFromEventList>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00e      	beq.n	800975c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00b      	beq.n	800975c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	2201      	movs	r2, #1
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	e007      	b.n	800975c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800974c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009750:	3301      	adds	r3, #1
 8009752:	b2db      	uxtb	r3, r3
 8009754:	b25a      	sxtb	r2, r3
 8009756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800975c:	2301      	movs	r3, #1
 800975e:	637b      	str	r3, [r7, #52]	; 0x34
 8009760:	e001      	b.n	8009766 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009762:	2300      	movs	r3, #0
 8009764:	637b      	str	r3, [r7, #52]	; 0x34
 8009766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009768:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009772:	4618      	mov	r0, r3
 8009774:	3738      	adds	r7, #56	; 0x38
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
	...

0800977c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08c      	sub	sp, #48	; 0x30
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009788:	2300      	movs	r3, #0
 800978a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10b      	bne.n	80097ae <xQueueReceive+0x32>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	b672      	cpsid	i
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	b662      	cpsie	i
 80097aa:	623b      	str	r3, [r7, #32]
 80097ac:	e7fe      	b.n	80097ac <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d103      	bne.n	80097bc <xQueueReceive+0x40>
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <xQueueReceive+0x44>
 80097bc:	2301      	movs	r3, #1
 80097be:	e000      	b.n	80097c2 <xQueueReceive+0x46>
 80097c0:	2300      	movs	r3, #0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10b      	bne.n	80097de <xQueueReceive+0x62>
 80097c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ca:	b672      	cpsid	i
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	b662      	cpsie	i
 80097da:	61fb      	str	r3, [r7, #28]
 80097dc:	e7fe      	b.n	80097dc <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097de:	f001 f973 	bl	800aac8 <xTaskGetSchedulerState>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d102      	bne.n	80097ee <xQueueReceive+0x72>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <xQueueReceive+0x76>
 80097ee:	2301      	movs	r3, #1
 80097f0:	e000      	b.n	80097f4 <xQueueReceive+0x78>
 80097f2:	2300      	movs	r3, #0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10b      	bne.n	8009810 <xQueueReceive+0x94>
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	b672      	cpsid	i
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	b662      	cpsie	i
 800980c:	61bb      	str	r3, [r7, #24]
 800980e:	e7fe      	b.n	800980e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009810:	f001 fca2 	bl	800b158 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	2b00      	cmp	r3, #0
 800981e:	d01f      	beq.n	8009860 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009820:	68b9      	ldr	r1, [r7, #8]
 8009822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009824:	f000 faa1 	bl	8009d6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	1e5a      	subs	r2, r3, #1
 800982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00f      	beq.n	8009858 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	3310      	adds	r3, #16
 800983c:	4618      	mov	r0, r3
 800983e:	f000 ff83 	bl	800a748 <xTaskRemoveFromEventList>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d007      	beq.n	8009858 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009848:	4b3c      	ldr	r3, [pc, #240]	; (800993c <xQueueReceive+0x1c0>)
 800984a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009858:	f001 fcb0 	bl	800b1bc <vPortExitCritical>
				return pdPASS;
 800985c:	2301      	movs	r3, #1
 800985e:	e069      	b.n	8009934 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d103      	bne.n	800986e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009866:	f001 fca9 	bl	800b1bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800986a:	2300      	movs	r3, #0
 800986c:	e062      	b.n	8009934 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009870:	2b00      	cmp	r3, #0
 8009872:	d106      	bne.n	8009882 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009874:	f107 0310 	add.w	r3, r7, #16
 8009878:	4618      	mov	r0, r3
 800987a:	f000 ffc9 	bl	800a810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800987e:	2301      	movs	r3, #1
 8009880:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009882:	f001 fc9b 	bl	800b1bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009886:	f000 fd51 	bl	800a32c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800988a:	f001 fc65 	bl	800b158 <vPortEnterCritical>
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009894:	b25b      	sxtb	r3, r3
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989a:	d103      	bne.n	80098a4 <xQueueReceive+0x128>
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098aa:	b25b      	sxtb	r3, r3
 80098ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b0:	d103      	bne.n	80098ba <xQueueReceive+0x13e>
 80098b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098ba:	f001 fc7f 	bl	800b1bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098be:	1d3a      	adds	r2, r7, #4
 80098c0:	f107 0310 	add.w	r3, r7, #16
 80098c4:	4611      	mov	r1, r2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 ffb8 	bl	800a83c <xTaskCheckForTimeOut>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d123      	bne.n	800991a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098d4:	f000 fac1 	bl	8009e5a <prvIsQueueEmpty>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d017      	beq.n	800990e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e0:	3324      	adds	r3, #36	; 0x24
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	4611      	mov	r1, r2
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 ff08 	bl	800a6fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ee:	f000 fa62 	bl	8009db6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098f2:	f000 fd29 	bl	800a348 <xTaskResumeAll>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d189      	bne.n	8009810 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80098fc:	4b0f      	ldr	r3, [pc, #60]	; (800993c <xQueueReceive+0x1c0>)
 80098fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	e780      	b.n	8009810 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800990e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009910:	f000 fa51 	bl	8009db6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009914:	f000 fd18 	bl	800a348 <xTaskResumeAll>
 8009918:	e77a      	b.n	8009810 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800991a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800991c:	f000 fa4b 	bl	8009db6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009920:	f000 fd12 	bl	800a348 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009926:	f000 fa98 	bl	8009e5a <prvIsQueueEmpty>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	f43f af6f 	beq.w	8009810 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009932:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009934:	4618      	mov	r0, r3
 8009936:	3730      	adds	r7, #48	; 0x30
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	e000ed04 	.word	0xe000ed04

08009940 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08e      	sub	sp, #56	; 0x38
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800994a:	2300      	movs	r3, #0
 800994c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009952:	2300      	movs	r3, #0
 8009954:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10b      	bne.n	8009974 <xQueueSemaphoreTake+0x34>
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	b672      	cpsid	i
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	b662      	cpsie	i
 8009970:	623b      	str	r3, [r7, #32]
 8009972:	e7fe      	b.n	8009972 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00b      	beq.n	8009994 <xQueueSemaphoreTake+0x54>
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	b672      	cpsid	i
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	b662      	cpsie	i
 8009990:	61fb      	str	r3, [r7, #28]
 8009992:	e7fe      	b.n	8009992 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009994:	f001 f898 	bl	800aac8 <xTaskGetSchedulerState>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <xQueueSemaphoreTake+0x64>
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <xQueueSemaphoreTake+0x68>
 80099a4:	2301      	movs	r3, #1
 80099a6:	e000      	b.n	80099aa <xQueueSemaphoreTake+0x6a>
 80099a8:	2300      	movs	r3, #0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10b      	bne.n	80099c6 <xQueueSemaphoreTake+0x86>
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	b672      	cpsid	i
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	b662      	cpsie	i
 80099c2:	61bb      	str	r3, [r7, #24]
 80099c4:	e7fe      	b.n	80099c4 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099c6:	f001 fbc7 	bl	800b158 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80099ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ce:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80099d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d024      	beq.n	8009a20 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80099d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d8:	1e5a      	subs	r2, r3, #1
 80099da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099dc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d104      	bne.n	80099f0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80099e6:	f001 fa31 	bl	800ae4c <pvTaskIncrementMutexHeldCount>
 80099ea:	4602      	mov	r2, r0
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00f      	beq.n	8009a18 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fa:	3310      	adds	r3, #16
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 fea3 	bl	800a748 <xTaskRemoveFromEventList>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d007      	beq.n	8009a18 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a08:	4b54      	ldr	r3, [pc, #336]	; (8009b5c <xQueueSemaphoreTake+0x21c>)
 8009a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a18:	f001 fbd0 	bl	800b1bc <vPortExitCritical>
				return pdPASS;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e098      	b.n	8009b52 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d112      	bne.n	8009a4c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00b      	beq.n	8009a44 <xQueueSemaphoreTake+0x104>
 8009a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a30:	b672      	cpsid	i
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	b662      	cpsie	i
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	e7fe      	b.n	8009a42 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a44:	f001 fbba 	bl	800b1bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	e082      	b.n	8009b52 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a52:	f107 030c 	add.w	r3, r7, #12
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 feda 	bl	800a810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a60:	f001 fbac 	bl	800b1bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a64:	f000 fc62 	bl	800a32c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a68:	f001 fb76 	bl	800b158 <vPortEnterCritical>
 8009a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a72:	b25b      	sxtb	r3, r3
 8009a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a78:	d103      	bne.n	8009a82 <xQueueSemaphoreTake+0x142>
 8009a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a88:	b25b      	sxtb	r3, r3
 8009a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8e:	d103      	bne.n	8009a98 <xQueueSemaphoreTake+0x158>
 8009a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a98:	f001 fb90 	bl	800b1bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a9c:	463a      	mov	r2, r7
 8009a9e:	f107 030c 	add.w	r3, r7, #12
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 fec9 	bl	800a83c <xTaskCheckForTimeOut>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d132      	bne.n	8009b16 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ab2:	f000 f9d2 	bl	8009e5a <prvIsQueueEmpty>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d026      	beq.n	8009b0a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d109      	bne.n	8009ad8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009ac4:	f001 fb48 	bl	800b158 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f001 f819 	bl	800ab04 <xTaskPriorityInherit>
 8009ad2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009ad4:	f001 fb72 	bl	800b1bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ada:	3324      	adds	r3, #36	; 0x24
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	4611      	mov	r1, r2
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f000 fe0b 	bl	800a6fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ae8:	f000 f965 	bl	8009db6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009aec:	f000 fc2c 	bl	800a348 <xTaskResumeAll>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f47f af67 	bne.w	80099c6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009af8:	4b18      	ldr	r3, [pc, #96]	; (8009b5c <xQueueSemaphoreTake+0x21c>)
 8009afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	e75d      	b.n	80099c6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009b0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b0c:	f000 f953 	bl	8009db6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b10:	f000 fc1a 	bl	800a348 <xTaskResumeAll>
 8009b14:	e757      	b.n	80099c6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b18:	f000 f94d 	bl	8009db6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b1c:	f000 fc14 	bl	800a348 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b22:	f000 f99a 	bl	8009e5a <prvIsQueueEmpty>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f43f af4c 	beq.w	80099c6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00d      	beq.n	8009b50 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009b34:	f001 fb10 	bl	800b158 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009b38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b3a:	f000 f894 	bl	8009c66 <prvGetDisinheritPriorityAfterTimeout>
 8009b3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b46:	4618      	mov	r0, r3
 8009b48:	f001 f8e4 	bl	800ad14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b4c:	f001 fb36 	bl	800b1bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3738      	adds	r7, #56	; 0x38
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	e000ed04 	.word	0xe000ed04

08009b60 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b08e      	sub	sp, #56	; 0x38
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10b      	bne.n	8009b8e <xQueueReceiveFromISR+0x2e>
 8009b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7a:	b672      	cpsid	i
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	b662      	cpsie	i
 8009b8a:	623b      	str	r3, [r7, #32]
 8009b8c:	e7fe      	b.n	8009b8c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d103      	bne.n	8009b9c <xQueueReceiveFromISR+0x3c>
 8009b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <xQueueReceiveFromISR+0x40>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e000      	b.n	8009ba2 <xQueueReceiveFromISR+0x42>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10b      	bne.n	8009bbe <xQueueReceiveFromISR+0x5e>
 8009ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009baa:	b672      	cpsid	i
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	b662      	cpsie	i
 8009bba:	61fb      	str	r3, [r7, #28]
 8009bbc:	e7fe      	b.n	8009bbc <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bbe:	f001 fbab 	bl	800b318 <vPortValidateInterruptPriority>
	__asm volatile
 8009bc2:	f3ef 8211 	mrs	r2, BASEPRI
 8009bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bca:	b672      	cpsid	i
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	b662      	cpsie	i
 8009bda:	61ba      	str	r2, [r7, #24]
 8009bdc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009bde:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009be0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d02f      	beq.n	8009c4e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bf8:	68b9      	ldr	r1, [r7, #8]
 8009bfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bfc:	f000 f8b5 	bl	8009d6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c02:	1e5a      	subs	r2, r3, #1
 8009c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c10:	d112      	bne.n	8009c38 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d016      	beq.n	8009c48 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1c:	3310      	adds	r3, #16
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 fd92 	bl	800a748 <xTaskRemoveFromEventList>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00e      	beq.n	8009c48 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00b      	beq.n	8009c48 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	e007      	b.n	8009c48 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	b25a      	sxtb	r2, r3
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c4c:	e001      	b.n	8009c52 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	637b      	str	r3, [r7, #52]	; 0x34
 8009c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c54:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3738      	adds	r7, #56	; 0x38
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009c66:	b480      	push	{r7}
 8009c68:	b085      	sub	sp, #20
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d006      	beq.n	8009c84 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f1c3 0307 	rsb	r3, r3, #7
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	e001      	b.n	8009c88 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009c88:	68fb      	ldr	r3, [r7, #12]
	}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b086      	sub	sp, #24
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	60b9      	str	r1, [r7, #8]
 8009ca0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009caa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10d      	bne.n	8009cd0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d14d      	bne.n	8009d58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 ff9f 	bl	800ac04 <xTaskPriorityDisinherit>
 8009cc6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	609a      	str	r2, [r3, #8]
 8009cce:	e043      	b.n	8009d58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d119      	bne.n	8009d0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6858      	ldr	r0, [r3, #4]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cde:	461a      	mov	r2, r3
 8009ce0:	68b9      	ldr	r1, [r7, #8]
 8009ce2:	f01b fd7b 	bl	80257dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	685a      	ldr	r2, [r3, #4]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	441a      	add	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d32b      	bcc.n	8009d58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	605a      	str	r2, [r3, #4]
 8009d08:	e026      	b.n	8009d58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	68d8      	ldr	r0, [r3, #12]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d12:	461a      	mov	r2, r3
 8009d14:	68b9      	ldr	r1, [r7, #8]
 8009d16:	f01b fd61 	bl	80257dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d22:	425b      	negs	r3, r3
 8009d24:	441a      	add	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	68da      	ldr	r2, [r3, #12]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d207      	bcs.n	8009d46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	689a      	ldr	r2, [r3, #8]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	425b      	negs	r3, r3
 8009d40:	441a      	add	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d105      	bne.n	8009d58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d002      	beq.n	8009d58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	1c5a      	adds	r2, r3, #1
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d60:	697b      	ldr	r3, [r7, #20]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b082      	sub	sp, #8
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d018      	beq.n	8009dae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68da      	ldr	r2, [r3, #12]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d84:	441a      	add	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68da      	ldr	r2, [r3, #12]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d303      	bcc.n	8009d9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68d9      	ldr	r1, [r3, #12]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da6:	461a      	mov	r2, r3
 8009da8:	6838      	ldr	r0, [r7, #0]
 8009daa:	f01b fd17 	bl	80257dc <memcpy>
	}
}
 8009dae:	bf00      	nop
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009dbe:	f001 f9cb 	bl	800b158 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dc8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009dca:	e011      	b.n	8009df0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d012      	beq.n	8009dfa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3324      	adds	r3, #36	; 0x24
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fcb5 	bl	800a748 <xTaskRemoveFromEventList>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009de4:	f000 fd8e 	bl	800a904 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	dce9      	bgt.n	8009dcc <prvUnlockQueue+0x16>
 8009df8:	e000      	b.n	8009dfc <prvUnlockQueue+0x46>
					break;
 8009dfa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	22ff      	movs	r2, #255	; 0xff
 8009e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e04:	f001 f9da 	bl	800b1bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e08:	f001 f9a6 	bl	800b158 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e14:	e011      	b.n	8009e3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d012      	beq.n	8009e44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3310      	adds	r3, #16
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fc90 	bl	800a748 <xTaskRemoveFromEventList>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e2e:	f000 fd69 	bl	800a904 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e32:	7bbb      	ldrb	r3, [r7, #14]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	dce9      	bgt.n	8009e16 <prvUnlockQueue+0x60>
 8009e42:	e000      	b.n	8009e46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	22ff      	movs	r2, #255	; 0xff
 8009e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e4e:	f001 f9b5 	bl	800b1bc <vPortExitCritical>
}
 8009e52:	bf00      	nop
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e62:	f001 f979 	bl	800b158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d102      	bne.n	8009e74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]
 8009e72:	e001      	b.n	8009e78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e74:	2300      	movs	r3, #0
 8009e76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e78:	f001 f9a0 	bl	800b1bc <vPortExitCritical>

	return xReturn;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e8e:	f001 f963 	bl	800b158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d102      	bne.n	8009ea4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	60fb      	str	r3, [r7, #12]
 8009ea2:	e001      	b.n	8009ea8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ea8:	f001 f988 	bl	800b1bc <vPortExitCritical>

	return xReturn;
 8009eac:	68fb      	ldr	r3, [r7, #12]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b08e      	sub	sp, #56	; 0x38
 8009eba:	af04      	add	r7, sp, #16
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	60b9      	str	r1, [r7, #8]
 8009ec0:	607a      	str	r2, [r7, #4]
 8009ec2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10b      	bne.n	8009ee2 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	b672      	cpsid	i
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	b662      	cpsie	i
 8009ede:	623b      	str	r3, [r7, #32]
 8009ee0:	e7fe      	b.n	8009ee0 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10b      	bne.n	8009f00 <xTaskCreateStatic+0x4a>
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	b672      	cpsid	i
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	b662      	cpsie	i
 8009efc:	61fb      	str	r3, [r7, #28]
 8009efe:	e7fe      	b.n	8009efe <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f00:	2358      	movs	r3, #88	; 0x58
 8009f02:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2b58      	cmp	r3, #88	; 0x58
 8009f08:	d00b      	beq.n	8009f22 <xTaskCreateStatic+0x6c>
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	b672      	cpsid	i
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	b662      	cpsie	i
 8009f1e:	61bb      	str	r3, [r7, #24]
 8009f20:	e7fe      	b.n	8009f20 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d01e      	beq.n	8009f68 <xTaskCreateStatic+0xb2>
 8009f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d01b      	beq.n	8009f68 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f42:	2300      	movs	r3, #0
 8009f44:	9303      	str	r3, [sp, #12]
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	9302      	str	r3, [sp, #8]
 8009f4a:	f107 0314 	add.w	r3, r7, #20
 8009f4e:	9301      	str	r3, [sp, #4]
 8009f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	68b9      	ldr	r1, [r7, #8]
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f000 f850 	bl	800a000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f62:	f000 f8e1 	bl	800a128 <prvAddNewTaskToReadyList>
 8009f66:	e001      	b.n	8009f6c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f6c:	697b      	ldr	r3, [r7, #20]
	}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3728      	adds	r7, #40	; 0x28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b08c      	sub	sp, #48	; 0x30
 8009f7a:	af04      	add	r7, sp, #16
 8009f7c:	60f8      	str	r0, [r7, #12]
 8009f7e:	60b9      	str	r1, [r7, #8]
 8009f80:	603b      	str	r3, [r7, #0]
 8009f82:	4613      	mov	r3, r2
 8009f84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f86:	88fb      	ldrh	r3, [r7, #6]
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f001 fa06 	bl	800b39c <pvPortMalloc>
 8009f90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00e      	beq.n	8009fb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f98:	2058      	movs	r0, #88	; 0x58
 8009f9a:	f001 f9ff 	bl	800b39c <pvPortMalloc>
 8009f9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d003      	beq.n	8009fae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	631a      	str	r2, [r3, #48]	; 0x30
 8009fac:	e005      	b.n	8009fba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fae:	6978      	ldr	r0, [r7, #20]
 8009fb0:	f001 fac0 	bl	800b534 <vPortFree>
 8009fb4:	e001      	b.n	8009fba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d017      	beq.n	8009ff0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fc8:	88fa      	ldrh	r2, [r7, #6]
 8009fca:	2300      	movs	r3, #0
 8009fcc:	9303      	str	r3, [sp, #12]
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	9302      	str	r3, [sp, #8]
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	68b9      	ldr	r1, [r7, #8]
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f000 f80e 	bl	800a000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fe4:	69f8      	ldr	r0, [r7, #28]
 8009fe6:	f000 f89f 	bl	800a128 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fea:	2301      	movs	r3, #1
 8009fec:	61bb      	str	r3, [r7, #24]
 8009fee:	e002      	b.n	8009ff6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3720      	adds	r7, #32
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	461a      	mov	r2, r3
 800a018:	21a5      	movs	r1, #165	; 0xa5
 800a01a:	f01b fbea 	bl	80257f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a022:	6879      	ldr	r1, [r7, #4]
 800a024:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a028:	440b      	add	r3, r1
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	f023 0307 	bic.w	r3, r3, #7
 800a036:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	f003 0307 	and.w	r3, r3, #7
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00b      	beq.n	800a05a <prvInitialiseNewTask+0x5a>
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	b672      	cpsid	i
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	b662      	cpsie	i
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	e7fe      	b.n	800a058 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d01f      	beq.n	800a0a0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a060:	2300      	movs	r3, #0
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	e012      	b.n	800a08c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	4413      	add	r3, r2
 800a06c:	7819      	ldrb	r1, [r3, #0]
 800a06e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	4413      	add	r3, r2
 800a074:	3334      	adds	r3, #52	; 0x34
 800a076:	460a      	mov	r2, r1
 800a078:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	4413      	add	r3, r2
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d006      	beq.n	800a094 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	3301      	adds	r3, #1
 800a08a:	61fb      	str	r3, [r7, #28]
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	2b0f      	cmp	r3, #15
 800a090:	d9e9      	bls.n	800a066 <prvInitialiseNewTask+0x66>
 800a092:	e000      	b.n	800a096 <prvInitialiseNewTask+0x96>
			{
				break;
 800a094:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a09e:	e003      	b.n	800a0a8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	2b06      	cmp	r3, #6
 800a0ac:	d901      	bls.n	800a0b2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0ae:	2306      	movs	r3, #6
 800a0b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0bc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fe ff79 	bl	8008fc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	3318      	adds	r3, #24
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fe ff74 	bl	8008fc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	f1c3 0207 	rsb	r2, r3, #7
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	68f9      	ldr	r1, [r7, #12]
 800a106:	69b8      	ldr	r0, [r7, #24]
 800a108:	f000 ff1a 	bl	800af40 <pxPortInitialiseStack>
 800a10c:	4602      	mov	r2, r0
 800a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a110:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a11c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a11e:	bf00      	nop
 800a120:	3720      	adds	r7, #32
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a130:	f001 f812 	bl	800b158 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a134:	4b2a      	ldr	r3, [pc, #168]	; (800a1e0 <prvAddNewTaskToReadyList+0xb8>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3301      	adds	r3, #1
 800a13a:	4a29      	ldr	r2, [pc, #164]	; (800a1e0 <prvAddNewTaskToReadyList+0xb8>)
 800a13c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a13e:	4b29      	ldr	r3, [pc, #164]	; (800a1e4 <prvAddNewTaskToReadyList+0xbc>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d109      	bne.n	800a15a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a146:	4a27      	ldr	r2, [pc, #156]	; (800a1e4 <prvAddNewTaskToReadyList+0xbc>)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a14c:	4b24      	ldr	r3, [pc, #144]	; (800a1e0 <prvAddNewTaskToReadyList+0xb8>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d110      	bne.n	800a176 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a154:	f000 fbfc 	bl	800a950 <prvInitialiseTaskLists>
 800a158:	e00d      	b.n	800a176 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a15a:	4b23      	ldr	r3, [pc, #140]	; (800a1e8 <prvAddNewTaskToReadyList+0xc0>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d109      	bne.n	800a176 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a162:	4b20      	ldr	r3, [pc, #128]	; (800a1e4 <prvAddNewTaskToReadyList+0xbc>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d802      	bhi.n	800a176 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a170:	4a1c      	ldr	r2, [pc, #112]	; (800a1e4 <prvAddNewTaskToReadyList+0xbc>)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a176:	4b1d      	ldr	r3, [pc, #116]	; (800a1ec <prvAddNewTaskToReadyList+0xc4>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3301      	adds	r3, #1
 800a17c:	4a1b      	ldr	r2, [pc, #108]	; (800a1ec <prvAddNewTaskToReadyList+0xc4>)
 800a17e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	2201      	movs	r2, #1
 800a186:	409a      	lsls	r2, r3
 800a188:	4b19      	ldr	r3, [pc, #100]	; (800a1f0 <prvAddNewTaskToReadyList+0xc8>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	4a18      	ldr	r2, [pc, #96]	; (800a1f0 <prvAddNewTaskToReadyList+0xc8>)
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a196:	4613      	mov	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4a15      	ldr	r2, [pc, #84]	; (800a1f4 <prvAddNewTaskToReadyList+0xcc>)
 800a1a0:	441a      	add	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	f7fe ff16 	bl	8008fda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1ae:	f001 f805 	bl	800b1bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1b2:	4b0d      	ldr	r3, [pc, #52]	; (800a1e8 <prvAddNewTaskToReadyList+0xc0>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00e      	beq.n	800a1d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1ba:	4b0a      	ldr	r3, [pc, #40]	; (800a1e4 <prvAddNewTaskToReadyList+0xbc>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d207      	bcs.n	800a1d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1c8:	4b0b      	ldr	r3, [pc, #44]	; (800a1f8 <prvAddNewTaskToReadyList+0xd0>)
 800a1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1d8:	bf00      	nop
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20000494 	.word	0x20000494
 800a1e4:	20000394 	.word	0x20000394
 800a1e8:	200004a0 	.word	0x200004a0
 800a1ec:	200004b0 	.word	0x200004b0
 800a1f0:	2000049c 	.word	0x2000049c
 800a1f4:	20000398 	.word	0x20000398
 800a1f8:	e000ed04 	.word	0xe000ed04

0800a1fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a204:	2300      	movs	r3, #0
 800a206:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d018      	beq.n	800a240 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a20e:	4b14      	ldr	r3, [pc, #80]	; (800a260 <vTaskDelay+0x64>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00b      	beq.n	800a22e <vTaskDelay+0x32>
 800a216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21a:	b672      	cpsid	i
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	b662      	cpsie	i
 800a22a:	60bb      	str	r3, [r7, #8]
 800a22c:	e7fe      	b.n	800a22c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800a22e:	f000 f87d 	bl	800a32c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a232:	2100      	movs	r1, #0
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fe1d 	bl	800ae74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a23a:	f000 f885 	bl	800a348 <xTaskResumeAll>
 800a23e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d107      	bne.n	800a256 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <vTaskDelay+0x68>)
 800a248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a256:	bf00      	nop
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	200004bc 	.word	0x200004bc
 800a264:	e000ed04 	.word	0xe000ed04

0800a268 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08a      	sub	sp, #40	; 0x28
 800a26c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a26e:	2300      	movs	r3, #0
 800a270:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a272:	2300      	movs	r3, #0
 800a274:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a276:	463a      	mov	r2, r7
 800a278:	1d39      	adds	r1, r7, #4
 800a27a:	f107 0308 	add.w	r3, r7, #8
 800a27e:	4618      	mov	r0, r3
 800a280:	f7f6 fca4 	bl	8000bcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	9202      	str	r2, [sp, #8]
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	2300      	movs	r3, #0
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	2300      	movs	r3, #0
 800a294:	460a      	mov	r2, r1
 800a296:	491f      	ldr	r1, [pc, #124]	; (800a314 <vTaskStartScheduler+0xac>)
 800a298:	481f      	ldr	r0, [pc, #124]	; (800a318 <vTaskStartScheduler+0xb0>)
 800a29a:	f7ff fe0c 	bl	8009eb6 <xTaskCreateStatic>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	4b1e      	ldr	r3, [pc, #120]	; (800a31c <vTaskStartScheduler+0xb4>)
 800a2a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2a4:	4b1d      	ldr	r3, [pc, #116]	; (800a31c <vTaskStartScheduler+0xb4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	617b      	str	r3, [r7, #20]
 800a2b0:	e001      	b.n	800a2b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d117      	bne.n	800a2ec <vTaskStartScheduler+0x84>
 800a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c0:	b672      	cpsid	i
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	b662      	cpsie	i
 800a2d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2d2:	4b13      	ldr	r3, [pc, #76]	; (800a320 <vTaskStartScheduler+0xb8>)
 800a2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2da:	4b12      	ldr	r3, [pc, #72]	; (800a324 <vTaskStartScheduler+0xbc>)
 800a2dc:	2201      	movs	r2, #1
 800a2de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2e0:	4b11      	ldr	r3, [pc, #68]	; (800a328 <vTaskStartScheduler+0xc0>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2e6:	f000 febb 	bl	800b060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2ea:	e00f      	b.n	800a30c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f2:	d10b      	bne.n	800a30c <vTaskStartScheduler+0xa4>
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	b672      	cpsid	i
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	b662      	cpsie	i
 800a308:	60fb      	str	r3, [r7, #12]
 800a30a:	e7fe      	b.n	800a30a <vTaskStartScheduler+0xa2>
}
 800a30c:	bf00      	nop
 800a30e:	3718      	adds	r7, #24
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	080267e4 	.word	0x080267e4
 800a318:	0800a91d 	.word	0x0800a91d
 800a31c:	200004b8 	.word	0x200004b8
 800a320:	200004b4 	.word	0x200004b4
 800a324:	200004a0 	.word	0x200004a0
 800a328:	20000498 	.word	0x20000498

0800a32c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a330:	4b04      	ldr	r3, [pc, #16]	; (800a344 <vTaskSuspendAll+0x18>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3301      	adds	r3, #1
 800a336:	4a03      	ldr	r2, [pc, #12]	; (800a344 <vTaskSuspendAll+0x18>)
 800a338:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a33a:	bf00      	nop
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	200004bc 	.word	0x200004bc

0800a348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a352:	2300      	movs	r3, #0
 800a354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a356:	4b42      	ldr	r3, [pc, #264]	; (800a460 <xTaskResumeAll+0x118>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10b      	bne.n	800a376 <xTaskResumeAll+0x2e>
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	b672      	cpsid	i
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	b662      	cpsie	i
 800a372:	603b      	str	r3, [r7, #0]
 800a374:	e7fe      	b.n	800a374 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a376:	f000 feef 	bl	800b158 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a37a:	4b39      	ldr	r3, [pc, #228]	; (800a460 <xTaskResumeAll+0x118>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3b01      	subs	r3, #1
 800a380:	4a37      	ldr	r2, [pc, #220]	; (800a460 <xTaskResumeAll+0x118>)
 800a382:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a384:	4b36      	ldr	r3, [pc, #216]	; (800a460 <xTaskResumeAll+0x118>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d161      	bne.n	800a450 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a38c:	4b35      	ldr	r3, [pc, #212]	; (800a464 <xTaskResumeAll+0x11c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d05d      	beq.n	800a450 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a394:	e02e      	b.n	800a3f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a396:	4b34      	ldr	r3, [pc, #208]	; (800a468 <xTaskResumeAll+0x120>)
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3318      	adds	r3, #24
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe fe76 	bl	8009094 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fe fe71 	bl	8009094 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	409a      	lsls	r2, r3
 800a3ba:	4b2c      	ldr	r3, [pc, #176]	; (800a46c <xTaskResumeAll+0x124>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	4a2a      	ldr	r2, [pc, #168]	; (800a46c <xTaskResumeAll+0x124>)
 800a3c2:	6013      	str	r3, [r2, #0]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4a27      	ldr	r2, [pc, #156]	; (800a470 <xTaskResumeAll+0x128>)
 800a3d2:	441a      	add	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f7fe fdfd 	bl	8008fda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e4:	4b23      	ldr	r3, [pc, #140]	; (800a474 <xTaskResumeAll+0x12c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d302      	bcc.n	800a3f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a3ee:	4b22      	ldr	r3, [pc, #136]	; (800a478 <xTaskResumeAll+0x130>)
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3f4:	4b1c      	ldr	r3, [pc, #112]	; (800a468 <xTaskResumeAll+0x120>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1cc      	bne.n	800a396 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a402:	f000 fb41 	bl	800aa88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a406:	4b1d      	ldr	r3, [pc, #116]	; (800a47c <xTaskResumeAll+0x134>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d010      	beq.n	800a434 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a412:	f000 f837 	bl	800a484 <xTaskIncrementTick>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a41c:	4b16      	ldr	r3, [pc, #88]	; (800a478 <xTaskResumeAll+0x130>)
 800a41e:	2201      	movs	r2, #1
 800a420:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3b01      	subs	r3, #1
 800a426:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1f1      	bne.n	800a412 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a42e:	4b13      	ldr	r3, [pc, #76]	; (800a47c <xTaskResumeAll+0x134>)
 800a430:	2200      	movs	r2, #0
 800a432:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a434:	4b10      	ldr	r3, [pc, #64]	; (800a478 <xTaskResumeAll+0x130>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d009      	beq.n	800a450 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a43c:	2301      	movs	r3, #1
 800a43e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a440:	4b0f      	ldr	r3, [pc, #60]	; (800a480 <xTaskResumeAll+0x138>)
 800a442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a450:	f000 feb4 	bl	800b1bc <vPortExitCritical>

	return xAlreadyYielded;
 800a454:	68bb      	ldr	r3, [r7, #8]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	200004bc 	.word	0x200004bc
 800a464:	20000494 	.word	0x20000494
 800a468:	20000454 	.word	0x20000454
 800a46c:	2000049c 	.word	0x2000049c
 800a470:	20000398 	.word	0x20000398
 800a474:	20000394 	.word	0x20000394
 800a478:	200004a8 	.word	0x200004a8
 800a47c:	200004a4 	.word	0x200004a4
 800a480:	e000ed04 	.word	0xe000ed04

0800a484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a48a:	2300      	movs	r3, #0
 800a48c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a48e:	4b4f      	ldr	r3, [pc, #316]	; (800a5cc <xTaskIncrementTick+0x148>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	f040 8089 	bne.w	800a5aa <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a498:	4b4d      	ldr	r3, [pc, #308]	; (800a5d0 <xTaskIncrementTick+0x14c>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3301      	adds	r3, #1
 800a49e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4a0:	4a4b      	ldr	r2, [pc, #300]	; (800a5d0 <xTaskIncrementTick+0x14c>)
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d121      	bne.n	800a4f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4ac:	4b49      	ldr	r3, [pc, #292]	; (800a5d4 <xTaskIncrementTick+0x150>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00b      	beq.n	800a4ce <xTaskIncrementTick+0x4a>
 800a4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ba:	b672      	cpsid	i
 800a4bc:	f383 8811 	msr	BASEPRI, r3
 800a4c0:	f3bf 8f6f 	isb	sy
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	b662      	cpsie	i
 800a4ca:	603b      	str	r3, [r7, #0]
 800a4cc:	e7fe      	b.n	800a4cc <xTaskIncrementTick+0x48>
 800a4ce:	4b41      	ldr	r3, [pc, #260]	; (800a5d4 <xTaskIncrementTick+0x150>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	4b40      	ldr	r3, [pc, #256]	; (800a5d8 <xTaskIncrementTick+0x154>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a3e      	ldr	r2, [pc, #248]	; (800a5d4 <xTaskIncrementTick+0x150>)
 800a4da:	6013      	str	r3, [r2, #0]
 800a4dc:	4a3e      	ldr	r2, [pc, #248]	; (800a5d8 <xTaskIncrementTick+0x154>)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	4b3e      	ldr	r3, [pc, #248]	; (800a5dc <xTaskIncrementTick+0x158>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	4a3c      	ldr	r2, [pc, #240]	; (800a5dc <xTaskIncrementTick+0x158>)
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	f000 facc 	bl	800aa88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4f0:	4b3b      	ldr	r3, [pc, #236]	; (800a5e0 <xTaskIncrementTick+0x15c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d348      	bcc.n	800a58c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4fa:	4b36      	ldr	r3, [pc, #216]	; (800a5d4 <xTaskIncrementTick+0x150>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d104      	bne.n	800a50e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a504:	4b36      	ldr	r3, [pc, #216]	; (800a5e0 <xTaskIncrementTick+0x15c>)
 800a506:	f04f 32ff 	mov.w	r2, #4294967295
 800a50a:	601a      	str	r2, [r3, #0]
					break;
 800a50c:	e03e      	b.n	800a58c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a50e:	4b31      	ldr	r3, [pc, #196]	; (800a5d4 <xTaskIncrementTick+0x150>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	429a      	cmp	r2, r3
 800a524:	d203      	bcs.n	800a52e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a526:	4a2e      	ldr	r2, [pc, #184]	; (800a5e0 <xTaskIncrementTick+0x15c>)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a52c:	e02e      	b.n	800a58c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	3304      	adds	r3, #4
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe fdae 	bl	8009094 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d004      	beq.n	800a54a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	3318      	adds	r3, #24
 800a544:	4618      	mov	r0, r3
 800a546:	f7fe fda5 	bl	8009094 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54e:	2201      	movs	r2, #1
 800a550:	409a      	lsls	r2, r3
 800a552:	4b24      	ldr	r3, [pc, #144]	; (800a5e4 <xTaskIncrementTick+0x160>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4313      	orrs	r3, r2
 800a558:	4a22      	ldr	r2, [pc, #136]	; (800a5e4 <xTaskIncrementTick+0x160>)
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a560:	4613      	mov	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4a1f      	ldr	r2, [pc, #124]	; (800a5e8 <xTaskIncrementTick+0x164>)
 800a56a:	441a      	add	r2, r3
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	3304      	adds	r3, #4
 800a570:	4619      	mov	r1, r3
 800a572:	4610      	mov	r0, r2
 800a574:	f7fe fd31 	bl	8008fda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57c:	4b1b      	ldr	r3, [pc, #108]	; (800a5ec <xTaskIncrementTick+0x168>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a582:	429a      	cmp	r2, r3
 800a584:	d3b9      	bcc.n	800a4fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a586:	2301      	movs	r3, #1
 800a588:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a58a:	e7b6      	b.n	800a4fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a58c:	4b17      	ldr	r3, [pc, #92]	; (800a5ec <xTaskIncrementTick+0x168>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a592:	4915      	ldr	r1, [pc, #84]	; (800a5e8 <xTaskIncrementTick+0x164>)
 800a594:	4613      	mov	r3, r2
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4413      	add	r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	440b      	add	r3, r1
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d907      	bls.n	800a5b4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]
 800a5a8:	e004      	b.n	800a5b4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a5aa:	4b11      	ldr	r3, [pc, #68]	; (800a5f0 <xTaskIncrementTick+0x16c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	4a0f      	ldr	r2, [pc, #60]	; (800a5f0 <xTaskIncrementTick+0x16c>)
 800a5b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a5b4:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <xTaskIncrementTick+0x170>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a5c0:	697b      	ldr	r3, [r7, #20]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	200004bc 	.word	0x200004bc
 800a5d0:	20000498 	.word	0x20000498
 800a5d4:	2000044c 	.word	0x2000044c
 800a5d8:	20000450 	.word	0x20000450
 800a5dc:	200004ac 	.word	0x200004ac
 800a5e0:	200004b4 	.word	0x200004b4
 800a5e4:	2000049c 	.word	0x2000049c
 800a5e8:	20000398 	.word	0x20000398
 800a5ec:	20000394 	.word	0x20000394
 800a5f0:	200004a4 	.word	0x200004a4
 800a5f4:	200004a8 	.word	0x200004a8

0800a5f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b088      	sub	sp, #32
 800a5fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5fe:	4b3a      	ldr	r3, [pc, #232]	; (800a6e8 <vTaskSwitchContext+0xf0>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a606:	4b39      	ldr	r3, [pc, #228]	; (800a6ec <vTaskSwitchContext+0xf4>)
 800a608:	2201      	movs	r2, #1
 800a60a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a60c:	e067      	b.n	800a6de <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800a60e:	4b37      	ldr	r3, [pc, #220]	; (800a6ec <vTaskSwitchContext+0xf4>)
 800a610:	2200      	movs	r2, #0
 800a612:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a614:	4b36      	ldr	r3, [pc, #216]	; (800a6f0 <vTaskSwitchContext+0xf8>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61a:	61fb      	str	r3, [r7, #28]
 800a61c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a620:	61bb      	str	r3, [r7, #24]
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	69ba      	ldr	r2, [r7, #24]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d111      	bne.n	800a650 <vTaskSwitchContext+0x58>
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	3304      	adds	r3, #4
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	429a      	cmp	r2, r3
 800a636:	d10b      	bne.n	800a650 <vTaskSwitchContext+0x58>
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	3308      	adds	r3, #8
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	429a      	cmp	r2, r3
 800a642:	d105      	bne.n	800a650 <vTaskSwitchContext+0x58>
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	330c      	adds	r3, #12
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	69ba      	ldr	r2, [r7, #24]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d008      	beq.n	800a662 <vTaskSwitchContext+0x6a>
 800a650:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <vTaskSwitchContext+0xf8>)
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	4b26      	ldr	r3, [pc, #152]	; (800a6f0 <vTaskSwitchContext+0xf8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	3334      	adds	r3, #52	; 0x34
 800a65a:	4619      	mov	r1, r3
 800a65c:	4610      	mov	r0, r2
 800a65e:	f7f6 faa2 	bl	8000ba6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a662:	4b24      	ldr	r3, [pc, #144]	; (800a6f4 <vTaskSwitchContext+0xfc>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	fab3 f383 	clz	r3, r3
 800a66e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a670:	7afb      	ldrb	r3, [r7, #11]
 800a672:	f1c3 031f 	rsb	r3, r3, #31
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	491f      	ldr	r1, [pc, #124]	; (800a6f8 <vTaskSwitchContext+0x100>)
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	4613      	mov	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	440b      	add	r3, r1
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10b      	bne.n	800a6a4 <vTaskSwitchContext+0xac>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	b672      	cpsid	i
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	b662      	cpsie	i
 800a6a0:	607b      	str	r3, [r7, #4]
 800a6a2:	e7fe      	b.n	800a6a2 <vTaskSwitchContext+0xaa>
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4a12      	ldr	r2, [pc, #72]	; (800a6f8 <vTaskSwitchContext+0x100>)
 800a6b0:	4413      	add	r3, r2
 800a6b2:	613b      	str	r3, [r7, #16]
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	605a      	str	r2, [r3, #4]
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	685a      	ldr	r2, [r3, #4]
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	3308      	adds	r3, #8
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d104      	bne.n	800a6d4 <vTaskSwitchContext+0xdc>
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	605a      	str	r2, [r3, #4]
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	4a05      	ldr	r2, [pc, #20]	; (800a6f0 <vTaskSwitchContext+0xf8>)
 800a6dc:	6013      	str	r3, [r2, #0]
}
 800a6de:	bf00      	nop
 800a6e0:	3720      	adds	r7, #32
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	200004bc 	.word	0x200004bc
 800a6ec:	200004a8 	.word	0x200004a8
 800a6f0:	20000394 	.word	0x20000394
 800a6f4:	2000049c 	.word	0x2000049c
 800a6f8:	20000398 	.word	0x20000398

0800a6fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10b      	bne.n	800a724 <vTaskPlaceOnEventList+0x28>
 800a70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a710:	b672      	cpsid	i
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	b662      	cpsie	i
 800a720:	60fb      	str	r3, [r7, #12]
 800a722:	e7fe      	b.n	800a722 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a724:	4b07      	ldr	r3, [pc, #28]	; (800a744 <vTaskPlaceOnEventList+0x48>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3318      	adds	r3, #24
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7fe fc78 	bl	8009022 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a732:	2101      	movs	r1, #1
 800a734:	6838      	ldr	r0, [r7, #0]
 800a736:	f000 fb9d 	bl	800ae74 <prvAddCurrentTaskToDelayedList>
}
 800a73a:	bf00      	nop
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20000394 	.word	0x20000394

0800a748 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10b      	bne.n	800a776 <xTaskRemoveFromEventList+0x2e>
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	b672      	cpsid	i
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	b662      	cpsie	i
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	e7fe      	b.n	800a774 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	3318      	adds	r3, #24
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fe fc8a 	bl	8009094 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a780:	4b1d      	ldr	r3, [pc, #116]	; (800a7f8 <xTaskRemoveFromEventList+0xb0>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d11c      	bne.n	800a7c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	3304      	adds	r3, #4
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7fe fc81 	bl	8009094 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a796:	2201      	movs	r2, #1
 800a798:	409a      	lsls	r2, r3
 800a79a:	4b18      	ldr	r3, [pc, #96]	; (800a7fc <xTaskRemoveFromEventList+0xb4>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	4a16      	ldr	r2, [pc, #88]	; (800a7fc <xTaskRemoveFromEventList+0xb4>)
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4a13      	ldr	r2, [pc, #76]	; (800a800 <xTaskRemoveFromEventList+0xb8>)
 800a7b2:	441a      	add	r2, r3
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	f7fe fc0d 	bl	8008fda <vListInsertEnd>
 800a7c0:	e005      	b.n	800a7ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	3318      	adds	r3, #24
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	480e      	ldr	r0, [pc, #56]	; (800a804 <xTaskRemoveFromEventList+0xbc>)
 800a7ca:	f7fe fc06 	bl	8008fda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d2:	4b0d      	ldr	r3, [pc, #52]	; (800a808 <xTaskRemoveFromEventList+0xc0>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d905      	bls.n	800a7e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7e0:	4b0a      	ldr	r3, [pc, #40]	; (800a80c <xTaskRemoveFromEventList+0xc4>)
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	e001      	b.n	800a7ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7ec:	697b      	ldr	r3, [r7, #20]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	200004bc 	.word	0x200004bc
 800a7fc:	2000049c 	.word	0x2000049c
 800a800:	20000398 	.word	0x20000398
 800a804:	20000454 	.word	0x20000454
 800a808:	20000394 	.word	0x20000394
 800a80c:	200004a8 	.word	0x200004a8

0800a810 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a818:	4b06      	ldr	r3, [pc, #24]	; (800a834 <vTaskInternalSetTimeOutState+0x24>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a820:	4b05      	ldr	r3, [pc, #20]	; (800a838 <vTaskInternalSetTimeOutState+0x28>)
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	605a      	str	r2, [r3, #4]
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	200004ac 	.word	0x200004ac
 800a838:	20000498 	.word	0x20000498

0800a83c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10b      	bne.n	800a864 <xTaskCheckForTimeOut+0x28>
 800a84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a850:	b672      	cpsid	i
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	b662      	cpsie	i
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	e7fe      	b.n	800a862 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10b      	bne.n	800a882 <xTaskCheckForTimeOut+0x46>
 800a86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86e:	b672      	cpsid	i
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	b662      	cpsie	i
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	e7fe      	b.n	800a880 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800a882:	f000 fc69 	bl	800b158 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a886:	4b1d      	ldr	r3, [pc, #116]	; (800a8fc <xTaskCheckForTimeOut+0xc0>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	69ba      	ldr	r2, [r7, #24]
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89e:	d102      	bne.n	800a8a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	61fb      	str	r3, [r7, #28]
 800a8a4:	e023      	b.n	800a8ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	4b15      	ldr	r3, [pc, #84]	; (800a900 <xTaskCheckForTimeOut+0xc4>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d007      	beq.n	800a8c2 <xTaskCheckForTimeOut+0x86>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	69ba      	ldr	r2, [r7, #24]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d302      	bcc.n	800a8c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	61fb      	str	r3, [r7, #28]
 800a8c0:	e015      	b.n	800a8ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d20b      	bcs.n	800a8e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	1ad2      	subs	r2, r2, r3
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7ff ff99 	bl	800a810 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	61fb      	str	r3, [r7, #28]
 800a8e2:	e004      	b.n	800a8ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8ee:	f000 fc65 	bl	800b1bc <vPortExitCritical>

	return xReturn;
 800a8f2:	69fb      	ldr	r3, [r7, #28]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3720      	adds	r7, #32
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20000498 	.word	0x20000498
 800a900:	200004ac 	.word	0x200004ac

0800a904 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a904:	b480      	push	{r7}
 800a906:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a908:	4b03      	ldr	r3, [pc, #12]	; (800a918 <vTaskMissedYield+0x14>)
 800a90a:	2201      	movs	r2, #1
 800a90c:	601a      	str	r2, [r3, #0]
}
 800a90e:	bf00      	nop
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	200004a8 	.word	0x200004a8

0800a91c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a924:	f000 f854 	bl	800a9d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a928:	4b07      	ldr	r3, [pc, #28]	; (800a948 <prvIdleTask+0x2c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d907      	bls.n	800a940 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a930:	4b06      	ldr	r3, [pc, #24]	; (800a94c <prvIdleTask+0x30>)
 800a932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a940:	f7f6 f92a 	bl	8000b98 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a944:	e7ee      	b.n	800a924 <prvIdleTask+0x8>
 800a946:	bf00      	nop
 800a948:	20000398 	.word	0x20000398
 800a94c:	e000ed04 	.word	0xe000ed04

0800a950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a956:	2300      	movs	r3, #0
 800a958:	607b      	str	r3, [r7, #4]
 800a95a:	e00c      	b.n	800a976 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	4613      	mov	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4a12      	ldr	r2, [pc, #72]	; (800a9b0 <prvInitialiseTaskLists+0x60>)
 800a968:	4413      	add	r3, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fe fb08 	bl	8008f80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3301      	adds	r3, #1
 800a974:	607b      	str	r3, [r7, #4]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b06      	cmp	r3, #6
 800a97a:	d9ef      	bls.n	800a95c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a97c:	480d      	ldr	r0, [pc, #52]	; (800a9b4 <prvInitialiseTaskLists+0x64>)
 800a97e:	f7fe faff 	bl	8008f80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a982:	480d      	ldr	r0, [pc, #52]	; (800a9b8 <prvInitialiseTaskLists+0x68>)
 800a984:	f7fe fafc 	bl	8008f80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a988:	480c      	ldr	r0, [pc, #48]	; (800a9bc <prvInitialiseTaskLists+0x6c>)
 800a98a:	f7fe faf9 	bl	8008f80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a98e:	480c      	ldr	r0, [pc, #48]	; (800a9c0 <prvInitialiseTaskLists+0x70>)
 800a990:	f7fe faf6 	bl	8008f80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a994:	480b      	ldr	r0, [pc, #44]	; (800a9c4 <prvInitialiseTaskLists+0x74>)
 800a996:	f7fe faf3 	bl	8008f80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a99a:	4b0b      	ldr	r3, [pc, #44]	; (800a9c8 <prvInitialiseTaskLists+0x78>)
 800a99c:	4a05      	ldr	r2, [pc, #20]	; (800a9b4 <prvInitialiseTaskLists+0x64>)
 800a99e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9a0:	4b0a      	ldr	r3, [pc, #40]	; (800a9cc <prvInitialiseTaskLists+0x7c>)
 800a9a2:	4a05      	ldr	r2, [pc, #20]	; (800a9b8 <prvInitialiseTaskLists+0x68>)
 800a9a4:	601a      	str	r2, [r3, #0]
}
 800a9a6:	bf00      	nop
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20000398 	.word	0x20000398
 800a9b4:	20000424 	.word	0x20000424
 800a9b8:	20000438 	.word	0x20000438
 800a9bc:	20000454 	.word	0x20000454
 800a9c0:	20000468 	.word	0x20000468
 800a9c4:	20000480 	.word	0x20000480
 800a9c8:	2000044c 	.word	0x2000044c
 800a9cc:	20000450 	.word	0x20000450

0800a9d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9d6:	e019      	b.n	800aa0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9d8:	f000 fbbe 	bl	800b158 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9dc:	4b0f      	ldr	r3, [pc, #60]	; (800aa1c <prvCheckTasksWaitingTermination+0x4c>)
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fe fb53 	bl	8009094 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9ee:	4b0c      	ldr	r3, [pc, #48]	; (800aa20 <prvCheckTasksWaitingTermination+0x50>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	4a0a      	ldr	r2, [pc, #40]	; (800aa20 <prvCheckTasksWaitingTermination+0x50>)
 800a9f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9f8:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <prvCheckTasksWaitingTermination+0x54>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	4a09      	ldr	r2, [pc, #36]	; (800aa24 <prvCheckTasksWaitingTermination+0x54>)
 800aa00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa02:	f000 fbdb 	bl	800b1bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f80e 	bl	800aa28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa0c:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <prvCheckTasksWaitingTermination+0x54>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1e1      	bne.n	800a9d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20000468 	.word	0x20000468
 800aa20:	20000494 	.word	0x20000494
 800aa24:	2000047c 	.word	0x2000047c

0800aa28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d108      	bne.n	800aa4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 fd78 	bl	800b534 <vPortFree>
				vPortFree( pxTCB );
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fd75 	bl	800b534 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa4a:	e019      	b.n	800aa80 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d103      	bne.n	800aa5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fd6c 	bl	800b534 <vPortFree>
	}
 800aa5c:	e010      	b.n	800aa80 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d00b      	beq.n	800aa80 <prvDeleteTCB+0x58>
 800aa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6c:	b672      	cpsid	i
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	b662      	cpsie	i
 800aa7c:	60fb      	str	r3, [r7, #12]
 800aa7e:	e7fe      	b.n	800aa7e <prvDeleteTCB+0x56>
	}
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa8e:	4b0c      	ldr	r3, [pc, #48]	; (800aac0 <prvResetNextTaskUnblockTime+0x38>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d104      	bne.n	800aaa2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa98:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <prvResetNextTaskUnblockTime+0x3c>)
 800aa9a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aaa0:	e008      	b.n	800aab4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaa2:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <prvResetNextTaskUnblockTime+0x38>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	4a04      	ldr	r2, [pc, #16]	; (800aac4 <prvResetNextTaskUnblockTime+0x3c>)
 800aab2:	6013      	str	r3, [r2, #0]
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	2000044c 	.word	0x2000044c
 800aac4:	200004b4 	.word	0x200004b4

0800aac8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aace:	4b0b      	ldr	r3, [pc, #44]	; (800aafc <xTaskGetSchedulerState+0x34>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d102      	bne.n	800aadc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aad6:	2301      	movs	r3, #1
 800aad8:	607b      	str	r3, [r7, #4]
 800aada:	e008      	b.n	800aaee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aadc:	4b08      	ldr	r3, [pc, #32]	; (800ab00 <xTaskGetSchedulerState+0x38>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aae4:	2302      	movs	r3, #2
 800aae6:	607b      	str	r3, [r7, #4]
 800aae8:	e001      	b.n	800aaee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aaea:	2300      	movs	r3, #0
 800aaec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aaee:	687b      	ldr	r3, [r7, #4]
	}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	200004a0 	.word	0x200004a0
 800ab00:	200004bc 	.word	0x200004bc

0800ab04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab10:	2300      	movs	r3, #0
 800ab12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d069      	beq.n	800abee <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1e:	4b36      	ldr	r3, [pc, #216]	; (800abf8 <xTaskPriorityInherit+0xf4>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d259      	bcs.n	800abdc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	db06      	blt.n	800ab3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab30:	4b31      	ldr	r3, [pc, #196]	; (800abf8 <xTaskPriorityInherit+0xf4>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab36:	f1c3 0207 	rsb	r2, r3, #7
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	6959      	ldr	r1, [r3, #20]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab46:	4613      	mov	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4a2b      	ldr	r2, [pc, #172]	; (800abfc <xTaskPriorityInherit+0xf8>)
 800ab50:	4413      	add	r3, r2
 800ab52:	4299      	cmp	r1, r3
 800ab54:	d13a      	bne.n	800abcc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	3304      	adds	r3, #4
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe fa9a 	bl	8009094 <uxListRemove>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d115      	bne.n	800ab92 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6a:	4924      	ldr	r1, [pc, #144]	; (800abfc <xTaskPriorityInherit+0xf8>)
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10a      	bne.n	800ab92 <xTaskPriorityInherit+0x8e>
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab80:	2201      	movs	r2, #1
 800ab82:	fa02 f303 	lsl.w	r3, r2, r3
 800ab86:	43da      	mvns	r2, r3
 800ab88:	4b1d      	ldr	r3, [pc, #116]	; (800ac00 <xTaskPriorityInherit+0xfc>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	4a1c      	ldr	r2, [pc, #112]	; (800ac00 <xTaskPriorityInherit+0xfc>)
 800ab90:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab92:	4b19      	ldr	r3, [pc, #100]	; (800abf8 <xTaskPriorityInherit+0xf4>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba0:	2201      	movs	r2, #1
 800aba2:	409a      	lsls	r2, r3
 800aba4:	4b16      	ldr	r3, [pc, #88]	; (800ac00 <xTaskPriorityInherit+0xfc>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	4a15      	ldr	r2, [pc, #84]	; (800ac00 <xTaskPriorityInherit+0xfc>)
 800abac:	6013      	str	r3, [r2, #0]
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4a10      	ldr	r2, [pc, #64]	; (800abfc <xTaskPriorityInherit+0xf8>)
 800abbc:	441a      	add	r2, r3
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	3304      	adds	r3, #4
 800abc2:	4619      	mov	r1, r3
 800abc4:	4610      	mov	r0, r2
 800abc6:	f7fe fa08 	bl	8008fda <vListInsertEnd>
 800abca:	e004      	b.n	800abd6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abcc:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <xTaskPriorityInherit+0xf4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800abd6:	2301      	movs	r3, #1
 800abd8:	60fb      	str	r3, [r7, #12]
 800abda:	e008      	b.n	800abee <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abe0:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <xTaskPriorityInherit+0xf4>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d201      	bcs.n	800abee <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800abea:	2301      	movs	r3, #1
 800abec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abee:	68fb      	ldr	r3, [r7, #12]
	}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	20000394 	.word	0x20000394
 800abfc:	20000398 	.word	0x20000398
 800ac00:	2000049c 	.word	0x2000049c

0800ac04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d070      	beq.n	800acfc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac1a:	4b3b      	ldr	r3, [pc, #236]	; (800ad08 <xTaskPriorityDisinherit+0x104>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d00b      	beq.n	800ac3c <xTaskPriorityDisinherit+0x38>
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	b672      	cpsid	i
 800ac2a:	f383 8811 	msr	BASEPRI, r3
 800ac2e:	f3bf 8f6f 	isb	sy
 800ac32:	f3bf 8f4f 	dsb	sy
 800ac36:	b662      	cpsie	i
 800ac38:	60fb      	str	r3, [r7, #12]
 800ac3a:	e7fe      	b.n	800ac3a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10b      	bne.n	800ac5c <xTaskPriorityDisinherit+0x58>
 800ac44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac48:	b672      	cpsid	i
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	b662      	cpsie	i
 800ac58:	60bb      	str	r3, [r7, #8]
 800ac5a:	e7fe      	b.n	800ac5a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac60:	1e5a      	subs	r2, r3, #1
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d044      	beq.n	800acfc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d140      	bne.n	800acfc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fe fa08 	bl	8009094 <uxListRemove>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d115      	bne.n	800acb6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac8e:	491f      	ldr	r1, [pc, #124]	; (800ad0c <xTaskPriorityDisinherit+0x108>)
 800ac90:	4613      	mov	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	440b      	add	r3, r1
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10a      	bne.n	800acb6 <xTaskPriorityDisinherit+0xb2>
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca4:	2201      	movs	r2, #1
 800aca6:	fa02 f303 	lsl.w	r3, r2, r3
 800acaa:	43da      	mvns	r2, r3
 800acac:	4b18      	ldr	r3, [pc, #96]	; (800ad10 <xTaskPriorityDisinherit+0x10c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4013      	ands	r3, r2
 800acb2:	4a17      	ldr	r2, [pc, #92]	; (800ad10 <xTaskPriorityDisinherit+0x10c>)
 800acb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc2:	f1c3 0207 	rsb	r2, r3, #7
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acce:	2201      	movs	r2, #1
 800acd0:	409a      	lsls	r2, r3
 800acd2:	4b0f      	ldr	r3, [pc, #60]	; (800ad10 <xTaskPriorityDisinherit+0x10c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	4a0d      	ldr	r2, [pc, #52]	; (800ad10 <xTaskPriorityDisinherit+0x10c>)
 800acda:	6013      	str	r3, [r2, #0]
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace0:	4613      	mov	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4a08      	ldr	r2, [pc, #32]	; (800ad0c <xTaskPriorityDisinherit+0x108>)
 800acea:	441a      	add	r2, r3
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	3304      	adds	r3, #4
 800acf0:	4619      	mov	r1, r3
 800acf2:	4610      	mov	r0, r2
 800acf4:	f7fe f971 	bl	8008fda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800acf8:	2301      	movs	r3, #1
 800acfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acfc:	697b      	ldr	r3, [r7, #20]
	}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20000394 	.word	0x20000394
 800ad0c:	20000398 	.word	0x20000398
 800ad10:	2000049c 	.word	0x2000049c

0800ad14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ad22:	2301      	movs	r3, #1
 800ad24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f000 8085 	beq.w	800ae38 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10b      	bne.n	800ad4e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	b672      	cpsid	i
 800ad3c:	f383 8811 	msr	BASEPRI, r3
 800ad40:	f3bf 8f6f 	isb	sy
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	b662      	cpsie	i
 800ad4a:	60fb      	str	r3, [r7, #12]
 800ad4c:	e7fe      	b.n	800ad4c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d902      	bls.n	800ad5e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	61fb      	str	r3, [r7, #28]
 800ad5c:	e002      	b.n	800ad64 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad68:	69fa      	ldr	r2, [r7, #28]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d064      	beq.n	800ae38 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d15f      	bne.n	800ae38 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad78:	4b31      	ldr	r3, [pc, #196]	; (800ae40 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	69ba      	ldr	r2, [r7, #24]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d10b      	bne.n	800ad9a <vTaskPriorityDisinheritAfterTimeout+0x86>
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	b672      	cpsid	i
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	b662      	cpsie	i
 800ad96:	60bb      	str	r3, [r7, #8]
 800ad98:	e7fe      	b.n	800ad98 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	69fa      	ldr	r2, [r7, #28]
 800ada4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	db04      	blt.n	800adb8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	f1c3 0207 	rsb	r2, r3, #7
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	6959      	ldr	r1, [r3, #20]
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	4613      	mov	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4a1f      	ldr	r2, [pc, #124]	; (800ae44 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800adc8:	4413      	add	r3, r2
 800adca:	4299      	cmp	r1, r3
 800adcc:	d134      	bne.n	800ae38 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	3304      	adds	r3, #4
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe f95e 	bl	8009094 <uxListRemove>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d115      	bne.n	800ae0a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade2:	4918      	ldr	r1, [pc, #96]	; (800ae44 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ade4:	4613      	mov	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	440b      	add	r3, r1
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10a      	bne.n	800ae0a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf8:	2201      	movs	r2, #1
 800adfa:	fa02 f303 	lsl.w	r3, r2, r3
 800adfe:	43da      	mvns	r2, r3
 800ae00:	4b11      	ldr	r3, [pc, #68]	; (800ae48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4013      	ands	r3, r2
 800ae06:	4a10      	ldr	r2, [pc, #64]	; (800ae48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae08:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0e:	2201      	movs	r2, #1
 800ae10:	409a      	lsls	r2, r3
 800ae12:	4b0d      	ldr	r3, [pc, #52]	; (800ae48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	4a0b      	ldr	r2, [pc, #44]	; (800ae48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae1a:	6013      	str	r3, [r2, #0]
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae20:	4613      	mov	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	4a06      	ldr	r2, [pc, #24]	; (800ae44 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ae2a:	441a      	add	r2, r3
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	4619      	mov	r1, r3
 800ae32:	4610      	mov	r0, r2
 800ae34:	f7fe f8d1 	bl	8008fda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae38:	bf00      	nop
 800ae3a:	3720      	adds	r7, #32
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	20000394 	.word	0x20000394
 800ae44:	20000398 	.word	0x20000398
 800ae48:	2000049c 	.word	0x2000049c

0800ae4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae50:	4b07      	ldr	r3, [pc, #28]	; (800ae70 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d004      	beq.n	800ae62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae58:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae5e:	3201      	adds	r2, #1
 800ae60:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ae62:	4b03      	ldr	r3, [pc, #12]	; (800ae70 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae64:	681b      	ldr	r3, [r3, #0]
	}
 800ae66:	4618      	mov	r0, r3
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	20000394 	.word	0x20000394

0800ae74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae7e:	4b29      	ldr	r3, [pc, #164]	; (800af24 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae84:	4b28      	ldr	r3, [pc, #160]	; (800af28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	3304      	adds	r3, #4
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fe f902 	bl	8009094 <uxListRemove>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d10b      	bne.n	800aeae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ae96:	4b24      	ldr	r3, [pc, #144]	; (800af28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aea2:	43da      	mvns	r2, r3
 800aea4:	4b21      	ldr	r3, [pc, #132]	; (800af2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4013      	ands	r3, r2
 800aeaa:	4a20      	ldr	r2, [pc, #128]	; (800af2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800aeac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb4:	d10a      	bne.n	800aecc <prvAddCurrentTaskToDelayedList+0x58>
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d007      	beq.n	800aecc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aebc:	4b1a      	ldr	r3, [pc, #104]	; (800af28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	3304      	adds	r3, #4
 800aec2:	4619      	mov	r1, r3
 800aec4:	481a      	ldr	r0, [pc, #104]	; (800af30 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aec6:	f7fe f888 	bl	8008fda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aeca:	e026      	b.n	800af1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4413      	add	r3, r2
 800aed2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aed4:	4b14      	ldr	r3, [pc, #80]	; (800af28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d209      	bcs.n	800aef8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aee4:	4b13      	ldr	r3, [pc, #76]	; (800af34 <prvAddCurrentTaskToDelayedList+0xc0>)
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	4b0f      	ldr	r3, [pc, #60]	; (800af28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3304      	adds	r3, #4
 800aeee:	4619      	mov	r1, r3
 800aef0:	4610      	mov	r0, r2
 800aef2:	f7fe f896 	bl	8009022 <vListInsert>
}
 800aef6:	e010      	b.n	800af1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aef8:	4b0f      	ldr	r3, [pc, #60]	; (800af38 <prvAddCurrentTaskToDelayedList+0xc4>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	4b0a      	ldr	r3, [pc, #40]	; (800af28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3304      	adds	r3, #4
 800af02:	4619      	mov	r1, r3
 800af04:	4610      	mov	r0, r2
 800af06:	f7fe f88c 	bl	8009022 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af0a:	4b0c      	ldr	r3, [pc, #48]	; (800af3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68ba      	ldr	r2, [r7, #8]
 800af10:	429a      	cmp	r2, r3
 800af12:	d202      	bcs.n	800af1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800af14:	4a09      	ldr	r2, [pc, #36]	; (800af3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	6013      	str	r3, [r2, #0]
}
 800af1a:	bf00      	nop
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20000498 	.word	0x20000498
 800af28:	20000394 	.word	0x20000394
 800af2c:	2000049c 	.word	0x2000049c
 800af30:	20000480 	.word	0x20000480
 800af34:	20000450 	.word	0x20000450
 800af38:	2000044c 	.word	0x2000044c
 800af3c:	200004b4 	.word	0x200004b4

0800af40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	3b04      	subs	r3, #4
 800af50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3b04      	subs	r3, #4
 800af5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	f023 0201 	bic.w	r2, r3, #1
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3b04      	subs	r3, #4
 800af6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af70:	4a0c      	ldr	r2, [pc, #48]	; (800afa4 <pxPortInitialiseStack+0x64>)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3b14      	subs	r3, #20
 800af7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	3b04      	subs	r3, #4
 800af86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f06f 0202 	mvn.w	r2, #2
 800af8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3b20      	subs	r3, #32
 800af94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af96:	68fb      	ldr	r3, [r7, #12]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	0800afa9 	.word	0x0800afa9

0800afa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800afae:	2300      	movs	r3, #0
 800afb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800afb2:	4b13      	ldr	r3, [pc, #76]	; (800b000 <prvTaskExitError+0x58>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afba:	d00b      	beq.n	800afd4 <prvTaskExitError+0x2c>
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	b672      	cpsid	i
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	b662      	cpsie	i
 800afd0:	60fb      	str	r3, [r7, #12]
 800afd2:	e7fe      	b.n	800afd2 <prvTaskExitError+0x2a>
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	b672      	cpsid	i
 800afda:	f383 8811 	msr	BASEPRI, r3
 800afde:	f3bf 8f6f 	isb	sy
 800afe2:	f3bf 8f4f 	dsb	sy
 800afe6:	b662      	cpsie	i
 800afe8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800afea:	bf00      	nop
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d0fc      	beq.n	800afec <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aff2:	bf00      	nop
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	20000038 	.word	0x20000038
	...

0800b010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b010:	4b07      	ldr	r3, [pc, #28]	; (800b030 <pxCurrentTCBConst2>)
 800b012:	6819      	ldr	r1, [r3, #0]
 800b014:	6808      	ldr	r0, [r1, #0]
 800b016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01a:	f380 8809 	msr	PSP, r0
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f04f 0000 	mov.w	r0, #0
 800b026:	f380 8811 	msr	BASEPRI, r0
 800b02a:	4770      	bx	lr
 800b02c:	f3af 8000 	nop.w

0800b030 <pxCurrentTCBConst2>:
 800b030:	20000394 	.word	0x20000394
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop

0800b038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b038:	4808      	ldr	r0, [pc, #32]	; (800b05c <prvPortStartFirstTask+0x24>)
 800b03a:	6800      	ldr	r0, [r0, #0]
 800b03c:	6800      	ldr	r0, [r0, #0]
 800b03e:	f380 8808 	msr	MSP, r0
 800b042:	f04f 0000 	mov.w	r0, #0
 800b046:	f380 8814 	msr	CONTROL, r0
 800b04a:	b662      	cpsie	i
 800b04c:	b661      	cpsie	f
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	df00      	svc	0
 800b058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b05a:	bf00      	nop
 800b05c:	e000ed08 	.word	0xe000ed08

0800b060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b066:	4b36      	ldr	r3, [pc, #216]	; (800b140 <xPortStartScheduler+0xe0>)
 800b068:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	22ff      	movs	r2, #255	; 0xff
 800b076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b080:	78fb      	ldrb	r3, [r7, #3]
 800b082:	b2db      	uxtb	r3, r3
 800b084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	4b2e      	ldr	r3, [pc, #184]	; (800b144 <xPortStartScheduler+0xe4>)
 800b08c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b08e:	4b2e      	ldr	r3, [pc, #184]	; (800b148 <xPortStartScheduler+0xe8>)
 800b090:	2207      	movs	r2, #7
 800b092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b094:	e009      	b.n	800b0aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b096:	4b2c      	ldr	r3, [pc, #176]	; (800b148 <xPortStartScheduler+0xe8>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3b01      	subs	r3, #1
 800b09c:	4a2a      	ldr	r2, [pc, #168]	; (800b148 <xPortStartScheduler+0xe8>)
 800b09e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	005b      	lsls	r3, r3, #1
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0aa:	78fb      	ldrb	r3, [r7, #3]
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0b2:	2b80      	cmp	r3, #128	; 0x80
 800b0b4:	d0ef      	beq.n	800b096 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0b6:	4b24      	ldr	r3, [pc, #144]	; (800b148 <xPortStartScheduler+0xe8>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f1c3 0307 	rsb	r3, r3, #7
 800b0be:	2b04      	cmp	r3, #4
 800b0c0:	d00b      	beq.n	800b0da <xPortStartScheduler+0x7a>
 800b0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c6:	b672      	cpsid	i
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	b662      	cpsie	i
 800b0d6:	60bb      	str	r3, [r7, #8]
 800b0d8:	e7fe      	b.n	800b0d8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b0da:	4b1b      	ldr	r3, [pc, #108]	; (800b148 <xPortStartScheduler+0xe8>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	021b      	lsls	r3, r3, #8
 800b0e0:	4a19      	ldr	r2, [pc, #100]	; (800b148 <xPortStartScheduler+0xe8>)
 800b0e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0e4:	4b18      	ldr	r3, [pc, #96]	; (800b148 <xPortStartScheduler+0xe8>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0ec:	4a16      	ldr	r2, [pc, #88]	; (800b148 <xPortStartScheduler+0xe8>)
 800b0ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b0f8:	4b14      	ldr	r3, [pc, #80]	; (800b14c <xPortStartScheduler+0xec>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a13      	ldr	r2, [pc, #76]	; (800b14c <xPortStartScheduler+0xec>)
 800b0fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b102:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b104:	4b11      	ldr	r3, [pc, #68]	; (800b14c <xPortStartScheduler+0xec>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a10      	ldr	r2, [pc, #64]	; (800b14c <xPortStartScheduler+0xec>)
 800b10a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b10e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b110:	f000 f8d4 	bl	800b2bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b114:	4b0e      	ldr	r3, [pc, #56]	; (800b150 <xPortStartScheduler+0xf0>)
 800b116:	2200      	movs	r2, #0
 800b118:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b11a:	f000 f8f3 	bl	800b304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b11e:	4b0d      	ldr	r3, [pc, #52]	; (800b154 <xPortStartScheduler+0xf4>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a0c      	ldr	r2, [pc, #48]	; (800b154 <xPortStartScheduler+0xf4>)
 800b124:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b128:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b12a:	f7ff ff85 	bl	800b038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b12e:	f7ff fa63 	bl	800a5f8 <vTaskSwitchContext>
	prvTaskExitError();
 800b132:	f7ff ff39 	bl	800afa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	e000e400 	.word	0xe000e400
 800b144:	200004c0 	.word	0x200004c0
 800b148:	200004c4 	.word	0x200004c4
 800b14c:	e000ed20 	.word	0xe000ed20
 800b150:	20000038 	.word	0x20000038
 800b154:	e000ef34 	.word	0xe000ef34

0800b158 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	b672      	cpsid	i
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	b662      	cpsie	i
 800b172:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b174:	4b0f      	ldr	r3, [pc, #60]	; (800b1b4 <vPortEnterCritical+0x5c>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	3301      	adds	r3, #1
 800b17a:	4a0e      	ldr	r2, [pc, #56]	; (800b1b4 <vPortEnterCritical+0x5c>)
 800b17c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b17e:	4b0d      	ldr	r3, [pc, #52]	; (800b1b4 <vPortEnterCritical+0x5c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d110      	bne.n	800b1a8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b186:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <vPortEnterCritical+0x60>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00b      	beq.n	800b1a8 <vPortEnterCritical+0x50>
 800b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b194:	b672      	cpsid	i
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	b662      	cpsie	i
 800b1a4:	603b      	str	r3, [r7, #0]
 800b1a6:	e7fe      	b.n	800b1a6 <vPortEnterCritical+0x4e>
	}
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	20000038 	.word	0x20000038
 800b1b8:	e000ed04 	.word	0xe000ed04

0800b1bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b1c2:	4b12      	ldr	r3, [pc, #72]	; (800b20c <vPortExitCritical+0x50>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10b      	bne.n	800b1e2 <vPortExitCritical+0x26>
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	b672      	cpsid	i
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	b662      	cpsie	i
 800b1de:	607b      	str	r3, [r7, #4]
 800b1e0:	e7fe      	b.n	800b1e0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800b1e2:	4b0a      	ldr	r3, [pc, #40]	; (800b20c <vPortExitCritical+0x50>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	4a08      	ldr	r2, [pc, #32]	; (800b20c <vPortExitCritical+0x50>)
 800b1ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1ec:	4b07      	ldr	r3, [pc, #28]	; (800b20c <vPortExitCritical+0x50>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d104      	bne.n	800b1fe <vPortExitCritical+0x42>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1fe:	bf00      	nop
 800b200:	370c      	adds	r7, #12
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	20000038 	.word	0x20000038

0800b210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b210:	f3ef 8009 	mrs	r0, PSP
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	4b15      	ldr	r3, [pc, #84]	; (800b270 <pxCurrentTCBConst>)
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	f01e 0f10 	tst.w	lr, #16
 800b220:	bf08      	it	eq
 800b222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22a:	6010      	str	r0, [r2, #0]
 800b22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b230:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b234:	b672      	cpsid	i
 800b236:	f380 8811 	msr	BASEPRI, r0
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	b662      	cpsie	i
 800b244:	f7ff f9d8 	bl	800a5f8 <vTaskSwitchContext>
 800b248:	f04f 0000 	mov.w	r0, #0
 800b24c:	f380 8811 	msr	BASEPRI, r0
 800b250:	bc09      	pop	{r0, r3}
 800b252:	6819      	ldr	r1, [r3, #0]
 800b254:	6808      	ldr	r0, [r1, #0]
 800b256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25a:	f01e 0f10 	tst.w	lr, #16
 800b25e:	bf08      	it	eq
 800b260:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b264:	f380 8809 	msr	PSP, r0
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop

0800b270 <pxCurrentTCBConst>:
 800b270:	20000394 	.word	0x20000394
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b274:	bf00      	nop
 800b276:	bf00      	nop

0800b278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	b672      	cpsid	i
 800b284:	f383 8811 	msr	BASEPRI, r3
 800b288:	f3bf 8f6f 	isb	sy
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	b662      	cpsie	i
 800b292:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b294:	f7ff f8f6 	bl	800a484 <xTaskIncrementTick>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b29e:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <SysTick_Handler+0x40>)
 800b2a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	e000ed04 	.word	0xe000ed04

0800b2bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	; (800b2f0 <vPortSetupTimerInterrupt+0x34>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2c6:	4b0b      	ldr	r3, [pc, #44]	; (800b2f4 <vPortSetupTimerInterrupt+0x38>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2cc:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <vPortSetupTimerInterrupt+0x3c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a0a      	ldr	r2, [pc, #40]	; (800b2fc <vPortSetupTimerInterrupt+0x40>)
 800b2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d6:	099b      	lsrs	r3, r3, #6
 800b2d8:	4a09      	ldr	r2, [pc, #36]	; (800b300 <vPortSetupTimerInterrupt+0x44>)
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2de:	4b04      	ldr	r3, [pc, #16]	; (800b2f0 <vPortSetupTimerInterrupt+0x34>)
 800b2e0:	2207      	movs	r2, #7
 800b2e2:	601a      	str	r2, [r3, #0]
}
 800b2e4:	bf00      	nop
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	e000e010 	.word	0xe000e010
 800b2f4:	e000e018 	.word	0xe000e018
 800b2f8:	2000002c 	.word	0x2000002c
 800b2fc:	10624dd3 	.word	0x10624dd3
 800b300:	e000e014 	.word	0xe000e014

0800b304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b314 <vPortEnableVFP+0x10>
 800b308:	6801      	ldr	r1, [r0, #0]
 800b30a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b30e:	6001      	str	r1, [r0, #0]
 800b310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b312:	bf00      	nop
 800b314:	e000ed88 	.word	0xe000ed88

0800b318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b31e:	f3ef 8305 	mrs	r3, IPSR
 800b322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b0f      	cmp	r3, #15
 800b328:	d915      	bls.n	800b356 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b32a:	4a18      	ldr	r2, [pc, #96]	; (800b38c <vPortValidateInterruptPriority+0x74>)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b334:	4b16      	ldr	r3, [pc, #88]	; (800b390 <vPortValidateInterruptPriority+0x78>)
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	7afa      	ldrb	r2, [r7, #11]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d20b      	bcs.n	800b356 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	b672      	cpsid	i
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	b662      	cpsie	i
 800b352:	607b      	str	r3, [r7, #4]
 800b354:	e7fe      	b.n	800b354 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b356:	4b0f      	ldr	r3, [pc, #60]	; (800b394 <vPortValidateInterruptPriority+0x7c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b35e:	4b0e      	ldr	r3, [pc, #56]	; (800b398 <vPortValidateInterruptPriority+0x80>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	429a      	cmp	r2, r3
 800b364:	d90b      	bls.n	800b37e <vPortValidateInterruptPriority+0x66>
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	b672      	cpsid	i
 800b36c:	f383 8811 	msr	BASEPRI, r3
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	f3bf 8f4f 	dsb	sy
 800b378:	b662      	cpsie	i
 800b37a:	603b      	str	r3, [r7, #0]
 800b37c:	e7fe      	b.n	800b37c <vPortValidateInterruptPriority+0x64>
	}
 800b37e:	bf00      	nop
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	e000e3f0 	.word	0xe000e3f0
 800b390:	200004c0 	.word	0x200004c0
 800b394:	e000ed0c 	.word	0xe000ed0c
 800b398:	200004c4 	.word	0x200004c4

0800b39c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b08a      	sub	sp, #40	; 0x28
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3a8:	f7fe ffc0 	bl	800a32c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3ac:	4b5c      	ldr	r3, [pc, #368]	; (800b520 <pvPortMalloc+0x184>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b3b4:	f000 f91a 	bl	800b5ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3b8:	4b5a      	ldr	r3, [pc, #360]	; (800b524 <pvPortMalloc+0x188>)
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4013      	ands	r3, r2
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f040 8090 	bne.w	800b4e6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d01e      	beq.n	800b40a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b3cc:	2208      	movs	r2, #8
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f003 0307 	and.w	r3, r3, #7
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d015      	beq.n	800b40a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f023 0307 	bic.w	r3, r3, #7
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f003 0307 	and.w	r3, r3, #7
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00b      	beq.n	800b40a <pvPortMalloc+0x6e>
 800b3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f6:	b672      	cpsid	i
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	b662      	cpsie	i
 800b406:	617b      	str	r3, [r7, #20]
 800b408:	e7fe      	b.n	800b408 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d06a      	beq.n	800b4e6 <pvPortMalloc+0x14a>
 800b410:	4b45      	ldr	r3, [pc, #276]	; (800b528 <pvPortMalloc+0x18c>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	429a      	cmp	r2, r3
 800b418:	d865      	bhi.n	800b4e6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b41a:	4b44      	ldr	r3, [pc, #272]	; (800b52c <pvPortMalloc+0x190>)
 800b41c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b41e:	4b43      	ldr	r3, [pc, #268]	; (800b52c <pvPortMalloc+0x190>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b424:	e004      	b.n	800b430 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	429a      	cmp	r2, r3
 800b438:	d903      	bls.n	800b442 <pvPortMalloc+0xa6>
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1f1      	bne.n	800b426 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b442:	4b37      	ldr	r3, [pc, #220]	; (800b520 <pvPortMalloc+0x184>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b448:	429a      	cmp	r2, r3
 800b44a:	d04c      	beq.n	800b4e6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2208      	movs	r2, #8
 800b452:	4413      	add	r3, r2
 800b454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b460:	685a      	ldr	r2, [r3, #4]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	1ad2      	subs	r2, r2, r3
 800b466:	2308      	movs	r3, #8
 800b468:	005b      	lsls	r3, r3, #1
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d920      	bls.n	800b4b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b46e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4413      	add	r3, r2
 800b474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	f003 0307 	and.w	r3, r3, #7
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00b      	beq.n	800b498 <pvPortMalloc+0xfc>
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	b672      	cpsid	i
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	b662      	cpsie	i
 800b494:	613b      	str	r3, [r7, #16]
 800b496:	e7fe      	b.n	800b496 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	1ad2      	subs	r2, r2, r3
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4aa:	69b8      	ldr	r0, [r7, #24]
 800b4ac:	f000 f900 	bl	800b6b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4b0:	4b1d      	ldr	r3, [pc, #116]	; (800b528 <pvPortMalloc+0x18c>)
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	4a1b      	ldr	r2, [pc, #108]	; (800b528 <pvPortMalloc+0x18c>)
 800b4bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4be:	4b1a      	ldr	r3, [pc, #104]	; (800b528 <pvPortMalloc+0x18c>)
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	4b1b      	ldr	r3, [pc, #108]	; (800b530 <pvPortMalloc+0x194>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d203      	bcs.n	800b4d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4ca:	4b17      	ldr	r3, [pc, #92]	; (800b528 <pvPortMalloc+0x18c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a18      	ldr	r2, [pc, #96]	; (800b530 <pvPortMalloc+0x194>)
 800b4d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d4:	685a      	ldr	r2, [r3, #4]
 800b4d6:	4b13      	ldr	r3, [pc, #76]	; (800b524 <pvPortMalloc+0x188>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	431a      	orrs	r2, r3
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b4e6:	f7fe ff2f 	bl	800a348 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d101      	bne.n	800b4f4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b4f0:	f7f5 fb64 	bl	8000bbc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	f003 0307 	and.w	r3, r3, #7
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00b      	beq.n	800b516 <pvPortMalloc+0x17a>
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	b672      	cpsid	i
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	b662      	cpsie	i
 800b512:	60fb      	str	r3, [r7, #12]
 800b514:	e7fe      	b.n	800b514 <pvPortMalloc+0x178>
	return pvReturn;
 800b516:	69fb      	ldr	r3, [r7, #28]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3728      	adds	r7, #40	; 0x28
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	200084d0 	.word	0x200084d0
 800b524:	200084dc 	.word	0x200084dc
 800b528:	200084d4 	.word	0x200084d4
 800b52c:	200084c8 	.word	0x200084c8
 800b530:	200084d8 	.word	0x200084d8

0800b534 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d04a      	beq.n	800b5dc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b546:	2308      	movs	r3, #8
 800b548:	425b      	negs	r3, r3
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	4413      	add	r3, r2
 800b54e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	685a      	ldr	r2, [r3, #4]
 800b558:	4b22      	ldr	r3, [pc, #136]	; (800b5e4 <vPortFree+0xb0>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4013      	ands	r3, r2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10b      	bne.n	800b57a <vPortFree+0x46>
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	b672      	cpsid	i
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	b662      	cpsie	i
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	e7fe      	b.n	800b578 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00b      	beq.n	800b59a <vPortFree+0x66>
 800b582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b586:	b672      	cpsid	i
 800b588:	f383 8811 	msr	BASEPRI, r3
 800b58c:	f3bf 8f6f 	isb	sy
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	b662      	cpsie	i
 800b596:	60bb      	str	r3, [r7, #8]
 800b598:	e7fe      	b.n	800b598 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	685a      	ldr	r2, [r3, #4]
 800b59e:	4b11      	ldr	r3, [pc, #68]	; (800b5e4 <vPortFree+0xb0>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d019      	beq.n	800b5dc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d115      	bne.n	800b5dc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	685a      	ldr	r2, [r3, #4]
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <vPortFree+0xb0>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	43db      	mvns	r3, r3
 800b5ba:	401a      	ands	r2, r3
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b5c0:	f7fe feb4 	bl	800a32c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	685a      	ldr	r2, [r3, #4]
 800b5c8:	4b07      	ldr	r3, [pc, #28]	; (800b5e8 <vPortFree+0xb4>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	4a06      	ldr	r2, [pc, #24]	; (800b5e8 <vPortFree+0xb4>)
 800b5d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5d2:	6938      	ldr	r0, [r7, #16]
 800b5d4:	f000 f86c 	bl	800b6b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b5d8:	f7fe feb6 	bl	800a348 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b5dc:	bf00      	nop
 800b5de:	3718      	adds	r7, #24
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	200084dc 	.word	0x200084dc
 800b5e8:	200084d4 	.word	0x200084d4

0800b5ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b5f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b5f8:	4b27      	ldr	r3, [pc, #156]	; (800b698 <prvHeapInit+0xac>)
 800b5fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f003 0307 	and.w	r3, r3, #7
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00c      	beq.n	800b620 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3307      	adds	r3, #7
 800b60a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f023 0307 	bic.w	r3, r3, #7
 800b612:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	4a1f      	ldr	r2, [pc, #124]	; (800b698 <prvHeapInit+0xac>)
 800b61c:	4413      	add	r3, r2
 800b61e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b624:	4a1d      	ldr	r2, [pc, #116]	; (800b69c <prvHeapInit+0xb0>)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b62a:	4b1c      	ldr	r3, [pc, #112]	; (800b69c <prvHeapInit+0xb0>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	4413      	add	r3, r2
 800b636:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b638:	2208      	movs	r2, #8
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	1a9b      	subs	r3, r3, r2
 800b63e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f023 0307 	bic.w	r3, r3, #7
 800b646:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	4a15      	ldr	r2, [pc, #84]	; (800b6a0 <prvHeapInit+0xb4>)
 800b64c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b64e:	4b14      	ldr	r3, [pc, #80]	; (800b6a0 <prvHeapInit+0xb4>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2200      	movs	r2, #0
 800b654:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b656:	4b12      	ldr	r3, [pc, #72]	; (800b6a0 <prvHeapInit+0xb4>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2200      	movs	r2, #0
 800b65c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	1ad2      	subs	r2, r2, r3
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b66c:	4b0c      	ldr	r3, [pc, #48]	; (800b6a0 <prvHeapInit+0xb4>)
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	4a0a      	ldr	r2, [pc, #40]	; (800b6a4 <prvHeapInit+0xb8>)
 800b67a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	4a09      	ldr	r2, [pc, #36]	; (800b6a8 <prvHeapInit+0xbc>)
 800b682:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b684:	4b09      	ldr	r3, [pc, #36]	; (800b6ac <prvHeapInit+0xc0>)
 800b686:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b68a:	601a      	str	r2, [r3, #0]
}
 800b68c:	bf00      	nop
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr
 800b698:	200004c8 	.word	0x200004c8
 800b69c:	200084c8 	.word	0x200084c8
 800b6a0:	200084d0 	.word	0x200084d0
 800b6a4:	200084d8 	.word	0x200084d8
 800b6a8:	200084d4 	.word	0x200084d4
 800b6ac:	200084dc 	.word	0x200084dc

0800b6b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b6b8:	4b28      	ldr	r3, [pc, #160]	; (800b75c <prvInsertBlockIntoFreeList+0xac>)
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	e002      	b.n	800b6c4 <prvInsertBlockIntoFreeList+0x14>
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d8f7      	bhi.n	800b6be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	4413      	add	r3, r2
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d108      	bne.n	800b6f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	685a      	ldr	r2, [r3, #4]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	441a      	add	r2, r3
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	68ba      	ldr	r2, [r7, #8]
 800b6fc:	441a      	add	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	429a      	cmp	r2, r3
 800b704:	d118      	bne.n	800b738 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	4b15      	ldr	r3, [pc, #84]	; (800b760 <prvInsertBlockIntoFreeList+0xb0>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d00d      	beq.n	800b72e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685a      	ldr	r2, [r3, #4]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	441a      	add	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	e008      	b.n	800b740 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b72e:	4b0c      	ldr	r3, [pc, #48]	; (800b760 <prvInsertBlockIntoFreeList+0xb0>)
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	e003      	b.n	800b740 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	429a      	cmp	r2, r3
 800b746:	d002      	beq.n	800b74e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b74e:	bf00      	nop
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	200084c8 	.word	0x200084c8
 800b760:	200084d0 	.word	0x200084d0

0800b764 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b08c      	sub	sp, #48	; 0x30
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a51      	ldr	r2, [pc, #324]	; (800b8b4 <I2Cx_MspInit+0x150>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d14d      	bne.n	800b810 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b774:	4b50      	ldr	r3, [pc, #320]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b778:	4a4f      	ldr	r2, [pc, #316]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b77a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b77e:	6313      	str	r3, [r2, #48]	; 0x30
 800b780:	4b4d      	ldr	r3, [pc, #308]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b788:	61bb      	str	r3, [r7, #24]
 800b78a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800b78c:	2380      	movs	r3, #128	; 0x80
 800b78e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b790:	2312      	movs	r3, #18
 800b792:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b794:	2300      	movs	r3, #0
 800b796:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b798:	2302      	movs	r3, #2
 800b79a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800b79c:	2304      	movs	r3, #4
 800b79e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b7a0:	f107 031c 	add.w	r3, r7, #28
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4845      	ldr	r0, [pc, #276]	; (800b8bc <I2Cx_MspInit+0x158>)
 800b7a8:	f7f8 fa9e 	bl	8003ce8 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800b7ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b7b2:	f107 031c 	add.w	r3, r7, #28
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	4840      	ldr	r0, [pc, #256]	; (800b8bc <I2Cx_MspInit+0x158>)
 800b7ba:	f7f8 fa95 	bl	8003ce8 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800b7be:	4b3e      	ldr	r3, [pc, #248]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c2:	4a3d      	ldr	r2, [pc, #244]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b7c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7c8:	6413      	str	r3, [r2, #64]	; 0x40
 800b7ca:	4b3b      	ldr	r3, [pc, #236]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7d2:	617b      	str	r3, [r7, #20]
 800b7d4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800b7d6:	4b38      	ldr	r3, [pc, #224]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	4a37      	ldr	r2, [pc, #220]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b7dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7e0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800b7e2:	4b35      	ldr	r3, [pc, #212]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	4a34      	ldr	r2, [pc, #208]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b7e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b7ec:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	210f      	movs	r1, #15
 800b7f2:	2048      	movs	r0, #72	; 0x48
 800b7f4:	f7f7 fcc2 	bl	800317c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800b7f8:	2048      	movs	r0, #72	; 0x48
 800b7fa:	f7f7 fcdb 	bl	80031b4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800b7fe:	2200      	movs	r2, #0
 800b800:	210f      	movs	r1, #15
 800b802:	2049      	movs	r0, #73	; 0x49
 800b804:	f7f7 fcba 	bl	800317c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800b808:	2049      	movs	r0, #73	; 0x49
 800b80a:	f7f7 fcd3 	bl	80031b4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800b80e:	e04d      	b.n	800b8ac <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b810:	4b29      	ldr	r3, [pc, #164]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b814:	4a28      	ldr	r2, [pc, #160]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b816:	f043 0302 	orr.w	r3, r3, #2
 800b81a:	6313      	str	r3, [r2, #48]	; 0x30
 800b81c:	4b26      	ldr	r3, [pc, #152]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b820:	f003 0302 	and.w	r3, r3, #2
 800b824:	613b      	str	r3, [r7, #16]
 800b826:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800b828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b82c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b82e:	2312      	movs	r3, #18
 800b830:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b832:	2300      	movs	r3, #0
 800b834:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b836:	2302      	movs	r3, #2
 800b838:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800b83a:	2304      	movs	r3, #4
 800b83c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b83e:	f107 031c 	add.w	r3, r7, #28
 800b842:	4619      	mov	r1, r3
 800b844:	481e      	ldr	r0, [pc, #120]	; (800b8c0 <I2Cx_MspInit+0x15c>)
 800b846:	f7f8 fa4f 	bl	8003ce8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800b84a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b84e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b850:	f107 031c 	add.w	r3, r7, #28
 800b854:	4619      	mov	r1, r3
 800b856:	481a      	ldr	r0, [pc, #104]	; (800b8c0 <I2Cx_MspInit+0x15c>)
 800b858:	f7f8 fa46 	bl	8003ce8 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800b85c:	4b16      	ldr	r3, [pc, #88]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b860:	4a15      	ldr	r2, [pc, #84]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b862:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b866:	6413      	str	r3, [r2, #64]	; 0x40
 800b868:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b870:	60fb      	str	r3, [r7, #12]
 800b872:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800b874:	4b10      	ldr	r3, [pc, #64]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	4a0f      	ldr	r2, [pc, #60]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b87a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b87e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800b880:	4b0d      	ldr	r3, [pc, #52]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b882:	6a1b      	ldr	r3, [r3, #32]
 800b884:	4a0c      	ldr	r2, [pc, #48]	; (800b8b8 <I2Cx_MspInit+0x154>)
 800b886:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b88a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800b88c:	2200      	movs	r2, #0
 800b88e:	210f      	movs	r1, #15
 800b890:	201f      	movs	r0, #31
 800b892:	f7f7 fc73 	bl	800317c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800b896:	201f      	movs	r0, #31
 800b898:	f7f7 fc8c 	bl	80031b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800b89c:	2200      	movs	r2, #0
 800b89e:	210f      	movs	r1, #15
 800b8a0:	2020      	movs	r0, #32
 800b8a2:	f7f7 fc6b 	bl	800317c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800b8a6:	2020      	movs	r0, #32
 800b8a8:	f7f7 fc84 	bl	80031b4 <HAL_NVIC_EnableIRQ>
}
 800b8ac:	bf00      	nop
 800b8ae:	3730      	adds	r7, #48	; 0x30
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	200084e0 	.word	0x200084e0
 800b8b8:	40023800 	.word	0x40023800
 800b8bc:	40021c00 	.word	0x40021c00
 800b8c0:	40020400 	.word	0x40020400

0800b8c4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7f8 ffc7 	bl	8004860 <HAL_I2C_GetState>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d125      	bne.n	800b924 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a14      	ldr	r2, [pc, #80]	; (800b92c <I2Cx_Init+0x68>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d103      	bne.n	800b8e8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a13      	ldr	r2, [pc, #76]	; (800b930 <I2Cx_Init+0x6c>)
 800b8e4:	601a      	str	r2, [r3, #0]
 800b8e6:	e002      	b.n	800b8ee <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a12      	ldr	r2, [pc, #72]	; (800b934 <I2Cx_Init+0x70>)
 800b8ec:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a11      	ldr	r2, [pc, #68]	; (800b938 <I2Cx_Init+0x74>)
 800b8f2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7ff ff23 	bl	800b764 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7f8 fcb0 	bl	8004284 <HAL_I2C_Init>
  }
}
 800b924:	bf00      	nop
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	200084e0 	.word	0x200084e0
 800b930:	40005c00 	.word	0x40005c00
 800b934:	40005400 	.word	0x40005400
 800b938:	40912732 	.word	0x40912732

0800b93c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b08a      	sub	sp, #40	; 0x28
 800b940:	af04      	add	r7, sp, #16
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	4608      	mov	r0, r1
 800b946:	4611      	mov	r1, r2
 800b948:	461a      	mov	r2, r3
 800b94a:	4603      	mov	r3, r0
 800b94c:	72fb      	strb	r3, [r7, #11]
 800b94e:	460b      	mov	r3, r1
 800b950:	813b      	strh	r3, [r7, #8]
 800b952:	4613      	mov	r3, r2
 800b954:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b956:	2300      	movs	r3, #0
 800b958:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b95a:	7afb      	ldrb	r3, [r7, #11]
 800b95c:	b299      	uxth	r1, r3
 800b95e:	88f8      	ldrh	r0, [r7, #6]
 800b960:	893a      	ldrh	r2, [r7, #8]
 800b962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b966:	9302      	str	r3, [sp, #8]
 800b968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b96a:	9301      	str	r3, [sp, #4]
 800b96c:	6a3b      	ldr	r3, [r7, #32]
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	4603      	mov	r3, r0
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f7f8 fe5a 	bl	800462c <HAL_I2C_Mem_Read>
 800b978:	4603      	mov	r3, r0
 800b97a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800b97c:	7dfb      	ldrb	r3, [r7, #23]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d004      	beq.n	800b98c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800b982:	7afb      	ldrb	r3, [r7, #11]
 800b984:	4619      	mov	r1, r3
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 f832 	bl	800b9f0 <I2Cx_Error>
  }
  return status;    
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3718      	adds	r7, #24
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b08a      	sub	sp, #40	; 0x28
 800b99a:	af04      	add	r7, sp, #16
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	4608      	mov	r0, r1
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	72fb      	strb	r3, [r7, #11]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	813b      	strh	r3, [r7, #8]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b9b4:	7afb      	ldrb	r3, [r7, #11]
 800b9b6:	b299      	uxth	r1, r3
 800b9b8:	88f8      	ldrh	r0, [r7, #6]
 800b9ba:	893a      	ldrh	r2, [r7, #8]
 800b9bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9c0:	9302      	str	r3, [sp, #8]
 800b9c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9c4:	9301      	str	r3, [sp, #4]
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f7f8 fd19 	bl	8004404 <HAL_I2C_Mem_Write>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800b9d6:	7dfb      	ldrb	r3, [r7, #23]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d004      	beq.n	800b9e6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800b9dc:	7afb      	ldrb	r3, [r7, #11]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f000 f805 	bl	800b9f0 <I2Cx_Error>
  }
  return status;
 800b9e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3718      	adds	r7, #24
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7f8 fcd1 	bl	80043a4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f7ff ff5e 	bl	800b8c4 <I2Cx_Init>
}
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800ba14:	4802      	ldr	r0, [pc, #8]	; (800ba20 <TS_IO_Init+0x10>)
 800ba16:	f7ff ff55 	bl	800b8c4 <I2Cx_Init>
}
 800ba1a:	bf00      	nop
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	200084e0 	.word	0x200084e0

0800ba24 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af02      	add	r7, sp, #8
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	71fb      	strb	r3, [r7, #7]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	71bb      	strb	r3, [r7, #6]
 800ba32:	4613      	mov	r3, r2
 800ba34:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800ba36:	79bb      	ldrb	r3, [r7, #6]
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	79f9      	ldrb	r1, [r7, #7]
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	9301      	str	r3, [sp, #4]
 800ba40:	1d7b      	adds	r3, r7, #5
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	2301      	movs	r3, #1
 800ba46:	4803      	ldr	r0, [pc, #12]	; (800ba54 <TS_IO_Write+0x30>)
 800ba48:	f7ff ffa5 	bl	800b996 <I2Cx_WriteMultiple>
}
 800ba4c:	bf00      	nop
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	200084e0 	.word	0x200084e0

0800ba58 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af02      	add	r7, sp, #8
 800ba5e:	4603      	mov	r3, r0
 800ba60:	460a      	mov	r2, r1
 800ba62:	71fb      	strb	r3, [r7, #7]
 800ba64:	4613      	mov	r3, r2
 800ba66:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800ba6c:	79bb      	ldrb	r3, [r7, #6]
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	79f9      	ldrb	r1, [r7, #7]
 800ba72:	2301      	movs	r3, #1
 800ba74:	9301      	str	r3, [sp, #4]
 800ba76:	f107 030f 	add.w	r3, r7, #15
 800ba7a:	9300      	str	r3, [sp, #0]
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	4804      	ldr	r0, [pc, #16]	; (800ba90 <TS_IO_Read+0x38>)
 800ba80:	f7ff ff5c 	bl	800b93c <I2Cx_ReadMultiple>

  return read_value;
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	200084e0 	.word	0x200084e0

0800ba94 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7f6 ffe9 	bl	8002a74 <HAL_Delay>
}
 800baa2:	bf00      	nop
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800baae:	f009 fa3d 	bl	8014f2c <touchgfx_init>
}
 800bab2:	bf00      	nop
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800baba:	f009 fa61 	bl	8014f80 <touchgfx_taskEntry>
}
 800babe:	bf00      	nop
 800bac0:	bd80      	pop	{r7, pc}
	...

0800bac4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
    {
 800bacc:	4a04      	ldr	r2, [pc, #16]	; (800bae0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	601a      	str	r2, [r3, #0]
    }
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4618      	mov	r0, r3
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	08027290 	.word	0x08027290

0800bae4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
    }
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7ff ffe9 	bl	800bac4 <_ZN8touchgfx12FontProviderD1Ev>
 800baf2:	2104      	movs	r1, #4
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f019 fdc7 	bl	8025688 <_ZdlPvj>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800bb10:	887b      	ldrh	r3, [r7, #2]
 800bb12:	2b04      	cmp	r3, #4
 800bb14:	d825      	bhi.n	800bb62 <_ZN23ApplicationFontProvider7getFontEt+0x5e>
 800bb16:	a201      	add	r2, pc, #4	; (adr r2, 800bb1c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800bb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1c:	0800bb31 	.word	0x0800bb31
 800bb20:	0800bb3b 	.word	0x0800bb3b
 800bb24:	0800bb45 	.word	0x0800bb45
 800bb28:	0800bb4f 	.word	0x0800bb4f
 800bb2c:	0800bb59 	.word	0x0800bb59
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800bb30:	f006 fed4 	bl	80128dc <_ZN17TypedTextDatabase8getFontsEv>
 800bb34:	4603      	mov	r3, r0
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	e014      	b.n	800bb64 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800bb3a:	f006 fecf 	bl	80128dc <_ZN17TypedTextDatabase8getFontsEv>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	e00f      	b.n	800bb64 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::SMALL:
        // verdana_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800bb44:	f006 feca 	bl	80128dc <_ZN17TypedTextDatabase8getFontsEv>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	e00a      	b.n	800bb64 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::TYPOGRAPHY_00:
        // verdana_27_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800bb4e:	f006 fec5 	bl	80128dc <_ZN17TypedTextDatabase8getFontsEv>
 800bb52:	4603      	mov	r3, r0
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	e005      	b.n	800bb64 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::TYPOGRAPHY_01:
        // verdana_24_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800bb58:	f006 fec0 	bl	80128dc <_ZN17TypedTextDatabase8getFontsEv>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	e000      	b.n	800bb64 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    default:
        return 0;
 800bb62:	2300      	movs	r3, #0
    }
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_27_4bpp
    static const touchgfx::FontId TYPOGRAPHY_01 = 4; // verdana_24_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	4a05      	ldr	r2, [pc, #20]	; (800bb8c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7ff ffa1 	bl	800bac4 <_ZN8touchgfx12FontProviderD1Ev>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4618      	mov	r0, r3
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	0802727c 	.word	0x0802727c

0800bb90 <_ZN23ApplicationFontProviderD0Ev>:
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f7ff ffe7 	bl	800bb6c <_ZN23ApplicationFontProviderD1Ev>
 800bb9e:	2104      	movs	r1, #4
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f019 fd71 	bl	8025688 <_ZdlPvj>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
    {
 800bbb8:	4a04      	ldr	r2, [pc, #16]	; (800bbcc <_ZN8touchgfx4FontD1Ev+0x1c>)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	601a      	str	r2, [r3, #0]
    }
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	08028428 	.word	0x08028428

0800bbd0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
    }
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7ff ffe9 	bl	800bbb0 <_ZN8touchgfx4FontD1Ev>
 800bbde:	2110      	movs	r1, #16
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f019 fd51 	bl	8025688 <_ZdlPvj>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800bbf0:	b590      	push	{r4, r7, lr}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800bbfc:	887b      	ldrh	r3, [r7, #2]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d101      	bne.n	800bc06 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800bc02:	2300      	movs	r3, #0
 800bc04:	e010      	b.n	800bc28 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3308      	adds	r3, #8
 800bc14:	681c      	ldr	r4, [r3, #0]
 800bc16:	f107 030f 	add.w	r3, r7, #15
 800bc1a:	f107 0210 	add.w	r2, r7, #16
 800bc1e:	8879      	ldrh	r1, [r7, #2]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	47a0      	blx	r4
 800bc24:	6178      	str	r0, [r7, #20]
        return glyph;
 800bc26:	697b      	ldr	r3, [r7, #20]
    }
 800bc28:	4618      	mov	r0, r3
 800bc2a:	371c      	adds	r7, #28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd90      	pop	{r4, r7, pc}

0800bc30 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	895b      	ldrh	r3, [r3, #10]
    }
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	899b      	ldrh	r3, [r3, #12]
    }
 800bc54:	4618      	mov	r0, r3
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	889b      	ldrh	r3, [r3, #4]
    }
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	889a      	ldrh	r2, [r3, #4]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	799b      	ldrb	r3, [r3, #6]
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	4413      	add	r3, r2
 800bc8c:	b29b      	uxth	r3, r3
    }
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr

0800bc9a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800bc9a:	b480      	push	{r7}
 800bc9c:	b083      	sub	sp, #12
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	79db      	ldrb	r3, [r3, #7]
 800bca6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800bcaa:	b2db      	uxtb	r3, r3
    }
 800bcac:	4618      	mov	r0, r3
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	79db      	ldrb	r3, [r3, #7]
 800bcc4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bcc8:	b2db      	uxtb	r3, r3
    }
 800bcca:	4618      	mov	r0, r3
 800bccc:	370c      	adds	r7, #12
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
	...

0800bcd8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	4a05      	ldr	r2, [pc, #20]	; (800bcf8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7ff ff61 	bl	800bbb0 <_ZN8touchgfx4FontD1Ev>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	0802a3e4 	.word	0x0802a3e4

0800bcfc <_ZN8touchgfx9ConstFontD0Ev>:
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7ff ffe7 	bl	800bcd8 <_ZN8touchgfx9ConstFontD1Ev>
 800bd0a:	2118      	movs	r1, #24
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f019 fcbb 	bl	8025688 <_ZdlPvj>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4618      	mov	r0, r3
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	4a05      	ldr	r2, [pc, #20]	; (800bd3c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	601a      	str	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff ffd3 	bl	800bcd8 <_ZN8touchgfx9ConstFontD1Ev>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	080272b4 	.word	0x080272b4

0800bd40 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f7ff ffe7 	bl	800bd1c <_ZN8touchgfx13GeneratedFontD1Ev>
 800bd4e:	2124      	movs	r1, #36	; 0x24
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f019 fc99 	bl	8025688 <_ZdlPvj>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
    {
 800bd68:	4a04      	ldr	r2, [pc, #16]	; (800bd7c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	601a      	str	r2, [r3, #0]
    }
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	080272a4 	.word	0x080272a4

0800bd80 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
    }
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f7ff ffe9 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>
 800bd8e:	2108      	movs	r1, #8
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f019 fc79 	bl	8025688 <_ZdlPvj>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a1b      	ldr	r3, [r3, #32]
    }
 800bdac:	4618      	mov	r0, r3
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b08c      	sub	sp, #48	; 0x30
 800bdbc:	af08      	add	r7, sp, #32
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	4611      	mov	r1, r2
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	80fb      	strh	r3, [r7, #6]
 800bdca:	4613      	mov	r3, r2
 800bdcc:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	88b9      	ldrh	r1, [r7, #4]
 800bdd2:	88fa      	ldrh	r2, [r7, #6]
 800bdd4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bdd6:	9306      	str	r3, [sp, #24]
 800bdd8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bdda:	9305      	str	r3, [sp, #20]
 800bddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bde0:	9304      	str	r3, [sp, #16]
 800bde2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bde6:	9303      	str	r3, [sp, #12]
 800bde8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdec:	9302      	str	r3, [sp, #8]
 800bdee:	7f3b      	ldrb	r3, [r7, #28]
 800bdf0:	9301      	str	r3, [sp, #4]
 800bdf2:	7e3b      	ldrb	r3, [r7, #24]
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	68b9      	ldr	r1, [r7, #8]
 800bdfa:	f00d ffcf 	bl	8019d9c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800bdfe:	4a08      	ldr	r2, [pc, #32]	; (800be20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be08:	619a      	str	r2, [r3, #24]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be0e:	61da      	str	r2, [r3, #28]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be14:	621a      	str	r2, [r3, #32]
{
}
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	080272b4 	.word	0x080272b4

0800be24 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	889b      	ldrh	r3, [r3, #4]
 800be38:	0adb      	lsrs	r3, r3, #11
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	4413      	add	r3, r2
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4413      	add	r3, r2
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800be56:	b480      	push	{r7}
 800be58:	b089      	sub	sp, #36	; 0x24
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	60f8      	str	r0, [r7, #12]
 800be5e:	460b      	mov	r3, r1
 800be60:	607a      	str	r2, [r7, #4]
 800be62:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d003      	beq.n	800be72 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	7b1b      	ldrb	r3, [r3, #12]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d101      	bne.n	800be76 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800be72:	2300      	movs	r3, #0
 800be74:	e030      	b.n	800bed8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	69da      	ldr	r2, [r3, #28]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	7b5b      	ldrb	r3, [r3, #13]
 800be82:	021b      	lsls	r3, r3, #8
 800be84:	b21b      	sxth	r3, r3
 800be86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be8a:	b219      	sxth	r1, r3
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	7adb      	ldrb	r3, [r3, #11]
 800be90:	b21b      	sxth	r3, r3
 800be92:	430b      	orrs	r3, r1
 800be94:	b21b      	sxth	r3, r3
 800be96:	b29b      	uxth	r3, r3
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4413      	add	r3, r2
 800be9c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	7b1b      	ldrb	r3, [r3, #12]
 800bea2:	837b      	strh	r3, [r7, #26]
 800bea4:	8b7b      	ldrh	r3, [r7, #26]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d015      	beq.n	800bed6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	881b      	ldrh	r3, [r3, #0]
 800beae:	897a      	ldrh	r2, [r7, #10]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d103      	bne.n	800bebc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800beba:	e00d      	b.n	800bed8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	881b      	ldrh	r3, [r3, #0]
 800bec0:	897a      	ldrh	r2, [r7, #10]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d306      	bcc.n	800bed4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800bec6:	8b7b      	ldrh	r3, [r7, #26]
 800bec8:	3b01      	subs	r3, #1
 800beca:	837b      	strh	r3, [r7, #26]
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	3304      	adds	r3, #4
 800bed0:	61fb      	str	r3, [r7, #28]
 800bed2:	e7e7      	b.n	800bea4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800bed4:	bf00      	nop
        }
    }
    return 0;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3724      	adds	r7, #36	; 0x24
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_18_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_18_4bpp();

touchgfx::GeneratedFont& getFont_verdana_18_4bpp()
{
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 6, 18, 0, 4, 1, 0, 0, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0);
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	4801      	ldr	r0, [pc, #4]	; (800bef0 <__tcf_0+0xc>)
 800beea:	f7ff ff17 	bl	800bd1c <_ZN8touchgfx13GeneratedFontD1Ev>
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	2000852c 	.word	0x2000852c

0800bef4 <_Z23getFont_verdana_18_4bppv>:
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b08a      	sub	sp, #40	; 0x28
 800bef8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 6, 18, 0, 4, 1, 0, 0, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0);
 800befa:	4b15      	ldr	r3, [pc, #84]	; (800bf50 <_Z23getFont_verdana_18_4bppv+0x5c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d11f      	bne.n	800bf46 <_Z23getFont_verdana_18_4bppv+0x52>
 800bf06:	2300      	movs	r3, #0
 800bf08:	9309      	str	r3, [sp, #36]	; 0x24
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	9308      	str	r3, [sp, #32]
 800bf0e:	233f      	movs	r3, #63	; 0x3f
 800bf10:	9307      	str	r3, [sp, #28]
 800bf12:	4b10      	ldr	r3, [pc, #64]	; (800bf54 <_Z23getFont_verdana_18_4bppv+0x60>)
 800bf14:	9306      	str	r3, [sp, #24]
 800bf16:	4b10      	ldr	r3, [pc, #64]	; (800bf58 <_Z23getFont_verdana_18_4bppv+0x64>)
 800bf18:	9305      	str	r3, [sp, #20]
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	9304      	str	r3, [sp, #16]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	9303      	str	r3, [sp, #12]
 800bf22:	2301      	movs	r3, #1
 800bf24:	9302      	str	r3, [sp, #8]
 800bf26:	2304      	movs	r3, #4
 800bf28:	9301      	str	r3, [sp, #4]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	2312      	movs	r3, #18
 800bf30:	2206      	movs	r2, #6
 800bf32:	490a      	ldr	r1, [pc, #40]	; (800bf5c <_Z23getFont_verdana_18_4bppv+0x68>)
 800bf34:	480a      	ldr	r0, [pc, #40]	; (800bf60 <_Z23getFont_verdana_18_4bppv+0x6c>)
 800bf36:	f7ff ff3f 	bl	800bdb8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800bf3a:	4b05      	ldr	r3, [pc, #20]	; (800bf50 <_Z23getFont_verdana_18_4bppv+0x5c>)
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	601a      	str	r2, [r3, #0]
 800bf40:	4808      	ldr	r0, [pc, #32]	; (800bf64 <_Z23getFont_verdana_18_4bppv+0x70>)
 800bf42:	f019 fbeb 	bl	802571c <atexit>
    return verdana_18_4bpp;
 800bf46:	4b06      	ldr	r3, [pc, #24]	; (800bf60 <_Z23getFont_verdana_18_4bppv+0x6c>)
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	20008550 	.word	0x20008550
 800bf54:	0802ffc4 	.word	0x0802ffc4
 800bf58:	08027300 	.word	0x08027300
 800bf5c:	080302ec 	.word	0x080302ec
 800bf60:	2000852c 	.word	0x2000852c
 800bf64:	0800bee5 	.word	0x0800bee5

0800bf68 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 42, 20, 4, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	4801      	ldr	r0, [pc, #4]	; (800bf74 <__tcf_0+0xc>)
 800bf6e:	f7ff fed5 	bl	800bd1c <_ZN8touchgfx13GeneratedFontD1Ev>
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	20008554 	.word	0x20008554

0800bf78 <_Z23getFont_verdana_20_4bppv>:
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08a      	sub	sp, #40	; 0x28
 800bf7c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 42, 20, 4, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800bf7e:	4b15      	ldr	r3, [pc, #84]	; (800bfd4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d11f      	bne.n	800bfca <_Z23getFont_verdana_20_4bppv+0x52>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf8e:	2300      	movs	r3, #0
 800bf90:	9308      	str	r3, [sp, #32]
 800bf92:	233f      	movs	r3, #63	; 0x3f
 800bf94:	9307      	str	r3, [sp, #28]
 800bf96:	4b10      	ldr	r3, [pc, #64]	; (800bfd8 <_Z23getFont_verdana_20_4bppv+0x60>)
 800bf98:	9306      	str	r3, [sp, #24]
 800bf9a:	4b10      	ldr	r3, [pc, #64]	; (800bfdc <_Z23getFont_verdana_20_4bppv+0x64>)
 800bf9c:	9305      	str	r3, [sp, #20]
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	9304      	str	r3, [sp, #16]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	9303      	str	r3, [sp, #12]
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	9302      	str	r3, [sp, #8]
 800bfaa:	2304      	movs	r3, #4
 800bfac:	9301      	str	r3, [sp, #4]
 800bfae:	2304      	movs	r3, #4
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	2314      	movs	r3, #20
 800bfb4:	222a      	movs	r2, #42	; 0x2a
 800bfb6:	490a      	ldr	r1, [pc, #40]	; (800bfe0 <_Z23getFont_verdana_20_4bppv+0x68>)
 800bfb8:	480a      	ldr	r0, [pc, #40]	; (800bfe4 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800bfba:	f7ff fefd 	bl	800bdb8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800bfbe:	4b05      	ldr	r3, [pc, #20]	; (800bfd4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	4808      	ldr	r0, [pc, #32]	; (800bfe8 <_Z23getFont_verdana_20_4bppv+0x70>)
 800bfc6:	f019 fba9 	bl	802571c <atexit>
    return verdana_20_4bpp;
 800bfca:	4b06      	ldr	r3, [pc, #24]	; (800bfe4 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20008578 	.word	0x20008578
 800bfd8:	0802ffc8 	.word	0x0802ffc8
 800bfdc:	08027304 	.word	0x08027304
 800bfe0:	08030340 	.word	0x08030340
 800bfe4:	20008554 	.word	0x20008554
 800bfe8:	0800bf69 	.word	0x0800bf69

0800bfec <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_24_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_24_4bpp();

touchgfx::GeneratedFont& getFont_verdana_24_4bpp()
{
    static touchgfx::GeneratedFont verdana_24_4bpp(glyphs_verdana_24_4bpp, 95, 24, 5, 4, 1, 1, 2, unicodes_verdana_24_4bpp, kerning_verdana_24_4bpp, 63, 0, 0);
 800bfec:	b580      	push	{r7, lr}
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	4801      	ldr	r0, [pc, #4]	; (800bff8 <__tcf_0+0xc>)
 800bff2:	f7ff fe93 	bl	800bd1c <_ZN8touchgfx13GeneratedFontD1Ev>
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	2000857c 	.word	0x2000857c

0800bffc <_Z23getFont_verdana_24_4bppv>:
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b08a      	sub	sp, #40	; 0x28
 800c000:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_24_4bpp(glyphs_verdana_24_4bpp, 95, 24, 5, 4, 1, 1, 2, unicodes_verdana_24_4bpp, kerning_verdana_24_4bpp, 63, 0, 0);
 800c002:	4b15      	ldr	r3, [pc, #84]	; (800c058 <_Z23getFont_verdana_24_4bppv+0x5c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d11f      	bne.n	800c04e <_Z23getFont_verdana_24_4bppv+0x52>
 800c00e:	2300      	movs	r3, #0
 800c010:	9309      	str	r3, [sp, #36]	; 0x24
 800c012:	2300      	movs	r3, #0
 800c014:	9308      	str	r3, [sp, #32]
 800c016:	233f      	movs	r3, #63	; 0x3f
 800c018:	9307      	str	r3, [sp, #28]
 800c01a:	4b10      	ldr	r3, [pc, #64]	; (800c05c <_Z23getFont_verdana_24_4bppv+0x60>)
 800c01c:	9306      	str	r3, [sp, #24]
 800c01e:	4b10      	ldr	r3, [pc, #64]	; (800c060 <_Z23getFont_verdana_24_4bppv+0x64>)
 800c020:	9305      	str	r3, [sp, #20]
 800c022:	2302      	movs	r3, #2
 800c024:	9304      	str	r3, [sp, #16]
 800c026:	2301      	movs	r3, #1
 800c028:	9303      	str	r3, [sp, #12]
 800c02a:	2301      	movs	r3, #1
 800c02c:	9302      	str	r3, [sp, #8]
 800c02e:	2304      	movs	r3, #4
 800c030:	9301      	str	r3, [sp, #4]
 800c032:	2305      	movs	r3, #5
 800c034:	9300      	str	r3, [sp, #0]
 800c036:	2318      	movs	r3, #24
 800c038:	225f      	movs	r2, #95	; 0x5f
 800c03a:	490a      	ldr	r1, [pc, #40]	; (800c064 <_Z23getFont_verdana_24_4bppv+0x68>)
 800c03c:	480a      	ldr	r0, [pc, #40]	; (800c068 <_Z23getFont_verdana_24_4bppv+0x6c>)
 800c03e:	f7ff febb 	bl	800bdb8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c042:	4b05      	ldr	r3, [pc, #20]	; (800c058 <_Z23getFont_verdana_24_4bppv+0x5c>)
 800c044:	2201      	movs	r2, #1
 800c046:	601a      	str	r2, [r3, #0]
 800c048:	4808      	ldr	r0, [pc, #32]	; (800c06c <_Z23getFont_verdana_24_4bppv+0x70>)
 800c04a:	f019 fb67 	bl	802571c <atexit>
    return verdana_24_4bpp;
 800c04e:	4b06      	ldr	r3, [pc, #24]	; (800c068 <_Z23getFont_verdana_24_4bppv+0x6c>)
}
 800c050:	4618      	mov	r0, r3
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	200085a0 	.word	0x200085a0
 800c05c:	08030034 	.word	0x08030034
 800c060:	08027308 	.word	0x08027308
 800c064:	0803058c 	.word	0x0803058c
 800c068:	2000857c 	.word	0x2000857c
 800c06c:	0800bfed 	.word	0x0800bfed

0800c070 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_27_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_27_4bpp();

touchgfx::GeneratedFont& getFont_verdana_27_4bpp()
{
    static touchgfx::GeneratedFont verdana_27_4bpp(glyphs_verdana_27_4bpp, 1, 27, 0, 4, 1, 0, 0, unicodes_verdana_27_4bpp, kerning_verdana_27_4bpp, 63, 0, 0);
 800c070:	b580      	push	{r7, lr}
 800c072:	af00      	add	r7, sp, #0
 800c074:	4801      	ldr	r0, [pc, #4]	; (800c07c <__tcf_0+0xc>)
 800c076:	f7ff fe51 	bl	800bd1c <_ZN8touchgfx13GeneratedFontD1Ev>
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	200085a4 	.word	0x200085a4

0800c080 <_Z23getFont_verdana_27_4bppv>:
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b08a      	sub	sp, #40	; 0x28
 800c084:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_27_4bpp(glyphs_verdana_27_4bpp, 1, 27, 0, 4, 1, 0, 0, unicodes_verdana_27_4bpp, kerning_verdana_27_4bpp, 63, 0, 0);
 800c086:	4b15      	ldr	r3, [pc, #84]	; (800c0dc <_Z23getFont_verdana_27_4bppv+0x5c>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f003 0301 	and.w	r3, r3, #1
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d11f      	bne.n	800c0d2 <_Z23getFont_verdana_27_4bppv+0x52>
 800c092:	2300      	movs	r3, #0
 800c094:	9309      	str	r3, [sp, #36]	; 0x24
 800c096:	2300      	movs	r3, #0
 800c098:	9308      	str	r3, [sp, #32]
 800c09a:	233f      	movs	r3, #63	; 0x3f
 800c09c:	9307      	str	r3, [sp, #28]
 800c09e:	4b10      	ldr	r3, [pc, #64]	; (800c0e0 <_Z23getFont_verdana_27_4bppv+0x60>)
 800c0a0:	9306      	str	r3, [sp, #24]
 800c0a2:	4b10      	ldr	r3, [pc, #64]	; (800c0e4 <_Z23getFont_verdana_27_4bppv+0x64>)
 800c0a4:	9305      	str	r3, [sp, #20]
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	9304      	str	r3, [sp, #16]
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	9303      	str	r3, [sp, #12]
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	9302      	str	r3, [sp, #8]
 800c0b2:	2304      	movs	r3, #4
 800c0b4:	9301      	str	r3, [sp, #4]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	231b      	movs	r3, #27
 800c0bc:	2201      	movs	r2, #1
 800c0be:	490a      	ldr	r1, [pc, #40]	; (800c0e8 <_Z23getFont_verdana_27_4bppv+0x68>)
 800c0c0:	480a      	ldr	r0, [pc, #40]	; (800c0ec <_Z23getFont_verdana_27_4bppv+0x6c>)
 800c0c2:	f7ff fe79 	bl	800bdb8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c0c6:	4b05      	ldr	r3, [pc, #20]	; (800c0dc <_Z23getFont_verdana_27_4bppv+0x5c>)
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	601a      	str	r2, [r3, #0]
 800c0cc:	4808      	ldr	r0, [pc, #32]	; (800c0f0 <_Z23getFont_verdana_27_4bppv+0x70>)
 800c0ce:	f019 fb25 	bl	802571c <atexit>
    return verdana_27_4bpp;
 800c0d2:	4b06      	ldr	r3, [pc, #24]	; (800c0ec <_Z23getFont_verdana_27_4bppv+0x6c>)
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	200085c8 	.word	0x200085c8
 800c0e0:	080302a8 	.word	0x080302a8
 800c0e4:	0802730c 	.word	0x0802730c
 800c0e8:	08030ac0 	.word	0x08030ac0
 800c0ec:	200085a4 	.word	0x200085a4
 800c0f0:	0800c071 	.word	0x0800c071

0800c0f4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	4801      	ldr	r0, [pc, #4]	; (800c100 <__tcf_0+0xc>)
 800c0fa:	f7ff fe0f 	bl	800bd1c <_ZN8touchgfx13GeneratedFontD1Ev>
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	200085cc 	.word	0x200085cc

0800c104 <_Z23getFont_verdana_40_4bppv>:
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b08a      	sub	sp, #40	; 0x28
 800c108:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800c10a:	4b15      	ldr	r3, [pc, #84]	; (800c160 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f003 0301 	and.w	r3, r3, #1
 800c112:	2b00      	cmp	r3, #0
 800c114:	d11f      	bne.n	800c156 <_Z23getFont_verdana_40_4bppv+0x52>
 800c116:	2300      	movs	r3, #0
 800c118:	9309      	str	r3, [sp, #36]	; 0x24
 800c11a:	2300      	movs	r3, #0
 800c11c:	9308      	str	r3, [sp, #32]
 800c11e:	233f      	movs	r3, #63	; 0x3f
 800c120:	9307      	str	r3, [sp, #28]
 800c122:	4b10      	ldr	r3, [pc, #64]	; (800c164 <_Z23getFont_verdana_40_4bppv+0x60>)
 800c124:	9306      	str	r3, [sp, #24]
 800c126:	4b10      	ldr	r3, [pc, #64]	; (800c168 <_Z23getFont_verdana_40_4bppv+0x64>)
 800c128:	9305      	str	r3, [sp, #20]
 800c12a:	2301      	movs	r3, #1
 800c12c:	9304      	str	r3, [sp, #16]
 800c12e:	2300      	movs	r3, #0
 800c130:	9303      	str	r3, [sp, #12]
 800c132:	2301      	movs	r3, #1
 800c134:	9302      	str	r3, [sp, #8]
 800c136:	2304      	movs	r3, #4
 800c138:	9301      	str	r3, [sp, #4]
 800c13a:	2308      	movs	r3, #8
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	2328      	movs	r3, #40	; 0x28
 800c140:	2212      	movs	r2, #18
 800c142:	490a      	ldr	r1, [pc, #40]	; (800c16c <_Z23getFont_verdana_40_4bppv+0x68>)
 800c144:	480a      	ldr	r0, [pc, #40]	; (800c170 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800c146:	f7ff fe37 	bl	800bdb8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c14a:	4b05      	ldr	r3, [pc, #20]	; (800c160 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800c14c:	2201      	movs	r2, #1
 800c14e:	601a      	str	r2, [r3, #0]
 800c150:	4808      	ldr	r0, [pc, #32]	; (800c174 <_Z23getFont_verdana_40_4bppv+0x70>)
 800c152:	f019 fae3 	bl	802571c <atexit>
    return verdana_40_4bpp;
 800c156:	4b06      	ldr	r3, [pc, #24]	; (800c170 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800c158:	4618      	mov	r0, r3
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	200085f0 	.word	0x200085f0
 800c164:	080302ac 	.word	0x080302ac
 800c168:	08027310 	.word	0x08027310
 800c16c:	08030ad0 	.word	0x08030ad0
 800c170:	200085cc 	.word	0x200085cc
 800c174:	0800c0f5 	.word	0x0800c0f5

0800c178 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	4618      	mov	r0, r3
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	80da      	strh	r2, [r3, #6]
    }
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	370c      	adds	r7, #12
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800c1be:	b480      	push	{r7}
 800c1c0:	b085      	sub	sp, #20
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	60f8      	str	r0, [r7, #12]
 800c1c6:	4608      	mov	r0, r1
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	817b      	strh	r3, [r7, #10]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	813b      	strh	r3, [r7, #8]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	897a      	ldrh	r2, [r7, #10]
 800c1dc:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	893a      	ldrh	r2, [r7, #8]
 800c1e2:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	88fa      	ldrh	r2, [r7, #6]
 800c1e8:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	8b3a      	ldrh	r2, [r7, #24]
 800c1ee:	80da      	strh	r2, [r3, #6]
    }
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3714      	adds	r7, #20
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr

0800c1fe <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c1fe:	b480      	push	{r7}
 800c200:	b083      	sub	sp, #12
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	6039      	str	r1, [r7, #0]
    {
    }
 800c208:	bf00      	nop
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
    {
    }
 800c21e:	bf00      	nop
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c22a:	b480      	push	{r7}
 800c22c:	b083      	sub	sp, #12
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	6039      	str	r1, [r7, #0]
    {
    }
 800c234:	bf00      	nop
 800c236:	370c      	adds	r7, #12
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr

0800c240 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c24c:	bf00      	nop
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
    {
    }
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
    {
    }
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
    {
 800c288:	4a04      	ldr	r2, [pc, #16]	; (800c29c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	601a      	str	r2, [r3, #0]
    }
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4618      	mov	r0, r3
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	0802757c 	.word	0x0802757c

0800c2a0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
    }
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f7ff ffe9 	bl	800c280 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c2ae:	2104      	movs	r1, #4
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f019 f9e9 	bl	8025688 <_ZdlPvj>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800c2c8:	4a07      	ldr	r2, [pc, #28]	; (800c2e8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	605a      	str	r2, [r3, #4]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	721a      	strb	r2, [r3, #8]
    {
    }
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	0802755c 	.word	0x0802755c

0800c2ec <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
    {
 800c2f4:	4a04      	ldr	r2, [pc, #16]	; (800c308 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	601a      	str	r2, [r3, #0]
    }
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	0802755c 	.word	0x0802755c

0800c30c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
    }
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f7ff ffe9 	bl	800c2ec <_ZN8touchgfx10TransitionD1Ev>
 800c31a:	210c      	movs	r1, #12
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f019 f9b3 	bl	8025688 <_ZdlPvj>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4618      	mov	r0, r3
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
    {
    }
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
    {
    }
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
    {
    }
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	683a      	ldr	r2, [r7, #0]
 800c376:	605a      	str	r2, [r3, #4]
    }
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c390:	bf00      	nop
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800c3ae:	6810      	ldr	r0, [r2, #0]
 800c3b0:	6851      	ldr	r1, [r2, #4]
 800c3b2:	c303      	stmia	r3!, {r0, r1}
    };
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
    {
 800c3c8:	4a04      	ldr	r2, [pc, #16]	; (800c3dc <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	601a      	str	r2, [r3, #0]
    }
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	08027544 	.word	0x08027544

0800c3e0 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
    }
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7ff ffe9 	bl	800c3c0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800c3ee:	2104      	movs	r1, #4
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f019 f949 	bl	8025688 <_ZdlPvj>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af02      	add	r7, sp, #8
 800c406:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800c408:	4a13      	ldr	r2, [pc, #76]	; (800c458 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	1d18      	adds	r0, r3, #4
 800c412:	2300      	movs	r3, #0
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	2300      	movs	r3, #0
 800c418:	2200      	movs	r2, #0
 800c41a:	2100      	movs	r1, #0
 800c41c:	f7ff fecf 	bl	800c1be <_ZN8touchgfx4RectC1Essss>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	330c      	adds	r3, #12
 800c424:	4618      	mov	r0, r3
 800c426:	f7ff feb3 	bl	800c190 <_ZN8touchgfx4RectC1Ev>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	615a      	str	r2, [r3, #20]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	619a      	str	r2, [r3, #24]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	61da      	str	r2, [r3, #28]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4618      	mov	r0, r3
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	0802a37c 	.word	0x0802a37c

0800c45c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
    {
 800c464:	4a04      	ldr	r2, [pc, #16]	; (800c478 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	601a      	str	r2, [r3, #0]
    }
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	0802a37c 	.word	0x0802a37c

0800c47c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
    }
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7ff ffe9 	bl	800c45c <_ZN8touchgfx8DrawableD1Ev>
 800c48a:	2128      	movs	r1, #40	; 0x28
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f019 f8fb 	bl	8025688 <_ZdlPvj>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4618      	mov	r0, r3
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	4608      	mov	r0, r1
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	817b      	strh	r3, [r7, #10]
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	813b      	strh	r3, [r7, #8]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	3334      	adds	r3, #52	; 0x34
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c4c2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	4798      	blx	r3
        setWidth(width);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	3338      	adds	r3, #56	; 0x38
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	4798      	blx	r3
        setHeight(height);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	333c      	adds	r3, #60	; 0x3c
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	68f8      	ldr	r0, [r7, #12]
 800c4ec:	4798      	blx	r3
    }
 800c4ee:	bf00      	nop
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800c4f6:	b480      	push	{r7}
 800c4f8:	b083      	sub	sp, #12
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800c504:	4618      	mov	r0, r3
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800c51e:	4618      	mov	r0, r3
 800c520:	370c      	adds	r7, #12
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr

0800c52a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800c52a:	b480      	push	{r7}
 800c52c:	b083      	sub	sp, #12
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	460b      	mov	r3, r1
 800c534:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	887a      	ldrh	r2, [r7, #2]
 800c53a:	809a      	strh	r2, [r3, #4]
    }
 800c53c:	bf00      	nop
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	887a      	ldrh	r2, [r7, #2]
 800c558:	80da      	strh	r2, [r3, #6]
    }
 800c55a:	bf00      	nop
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr

0800c566 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800c566:	b580      	push	{r7, lr}
 800c568:	b082      	sub	sp, #8
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
 800c56e:	460b      	mov	r3, r1
 800c570:	807b      	strh	r3, [r7, #2]
 800c572:	4613      	mov	r3, r2
 800c574:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	332c      	adds	r3, #44	; 0x2c
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c582:	4611      	mov	r1, r2
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	4798      	blx	r3
        setY(y);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	3330      	adds	r3, #48	; 0x30
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c594:	4611      	mov	r1, r2
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	4798      	blx	r3
    }
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800c5a2:	b480      	push	{r7}
 800c5a4:	b083      	sub	sp, #12
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	887a      	ldrh	r2, [r7, #2]
 800c5b2:	811a      	strh	r2, [r3, #8]
    }
 800c5b4:	bf00      	nop
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	887a      	ldrh	r2, [r7, #2]
 800c5d0:	815a      	strh	r2, [r3, #10]
    }
 800c5d2:	bf00      	nop
 800c5d4:	370c      	adds	r7, #12
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr

0800c5de <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800c5de:	b480      	push	{r7}
 800c5e0:	b083      	sub	sp, #12
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
    {
    }
 800c5e6:	bf00      	nop
 800c5e8:	370c      	adds	r7, #12
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800c5f2:	b480      	push	{r7}
 800c5f4:	b083      	sub	sp, #12
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	6039      	str	r1, [r7, #0]
    {
    }
 800c5fc:	bf00      	nop
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
    {
    }
 800c612:	bf00      	nop
 800c614:	370c      	adds	r7, #12
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr

0800c61e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800c61e:	b480      	push	{r7}
 800c620:	b083      	sub	sp, #12
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
 800c626:	6039      	str	r1, [r7, #0]
    {
    }
 800c628:	bf00      	nop
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
    {
    }
 800c63c:	bf00      	nop
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800c656:	4618      	mov	r0, r3
 800c658:	370c      	adds	r7, #12
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr

0800c662 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800c662:	b480      	push	{r7}
 800c664:	b083      	sub	sp, #12
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800c670:	4618      	mov	r0, r3
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	460b      	mov	r3, r1
 800c686:	807b      	strh	r3, [r7, #2]
 800c688:	4613      	mov	r3, r2
 800c68a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	3354      	adds	r3, #84	; 0x54
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	8879      	ldrh	r1, [r7, #2]
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800c69c:	b292      	uxth	r2, r2
 800c69e:	1a8a      	subs	r2, r1, r2
 800c6a0:	b292      	uxth	r2, r2
 800c6a2:	b210      	sxth	r0, r2
 800c6a4:	8839      	ldrh	r1, [r7, #0]
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c6ac:	b292      	uxth	r2, r2
 800c6ae:	1a8a      	subs	r2, r1, r2
 800c6b0:	b292      	uxth	r2, r2
 800c6b2:	b212      	sxth	r2, r2
 800c6b4:	4601      	mov	r1, r0
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	4798      	blx	r3
    }
 800c6ba:	bf00      	nop
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800c6c2:	b480      	push	{r7}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6d0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6d8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6e0:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800c6e2:	bf00      	nop
 800c6e4:	370c      	adds	r7, #12
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr

0800c6ee <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b084      	sub	sp, #16
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	60f8      	str	r0, [r7, #12]
 800c6f6:	60b9      	str	r1, [r7, #8]
 800c6f8:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f7ff ffe1 	bl	800c6c2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	601a      	str	r2, [r3, #0]
    }
 800c70e:	bf00      	nop
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
	...

0800c718 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800c718:	b480      	push	{r7}
 800c71a:	af00      	add	r7, sp, #0
    {
        return instance;
 800c71c:	4b03      	ldr	r3, [pc, #12]	; (800c72c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800c71e:	681b      	ldr	r3, [r3, #0]
    }
 800c720:	4618      	mov	r0, r3
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	2000b36c 	.word	0x2000b36c

0800c730 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800c730:	b480      	push	{r7}
 800c732:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800c734:	4b0b      	ldr	r3, [pc, #44]	; (800c764 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d008      	beq.n	800c752 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800c740:	4b08      	ldr	r3, [pc, #32]	; (800c764 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c746:	2b00      	cmp	r3, #0
 800c748:	d003      	beq.n	800c752 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800c74a:	4b06      	ldr	r3, [pc, #24]	; (800c764 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c750:	e002      	b.n	800c758 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800c752:	4b04      	ldr	r3, [pc, #16]	; (800c764 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	689b      	ldr	r3, [r3, #8]
        }
    }
 800c758:	4618      	mov	r0, r3
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	2000b36c 	.word	0x2000b36c

0800c768 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	4a05      	ldr	r2, [pc, #20]	; (800c788 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	601a      	str	r2, [r3, #0]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4618      	mov	r0, r3
 800c77a:	f7ff fd81 	bl	800c280 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4618      	mov	r0, r3
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	0802a28c 	.word	0x0802a28c

0800c78c <_ZN8touchgfx11ApplicationD0Ev>:
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f7ff ffe7 	bl	800c768 <_ZN8touchgfx11ApplicationD1Ev>
 800c79a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f018 ff72 	bl	8025688 <_ZdlPvj>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3708      	adds	r7, #8
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f00c fe48 	bl	8019450 <_ZN8touchgfx11ApplicationC1Ev>
 800c7c0:	4a09      	ldr	r2, [pc, #36]	; (800c7e8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	601a      	str	r2, [r3, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a04      	ldr	r2, [pc, #16]	; (800c7ec <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800c7da:	6013      	str	r3, [r2, #0]
    }
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	08027500 	.word	0x08027500
 800c7ec:	2000b3f8 	.word	0x2000b3f8

0800c7f0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f804 	bl	800c806 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800c7fe:	bf00      	nop
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800c806:	b580      	push	{r7, lr}
 800c808:	b082      	sub	sp, #8
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00f      	beq.n	800c838 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	330c      	adds	r3, #12
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4610      	mov	r0, r2
 800c82c:	4798      	blx	r3
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c834:	2301      	movs	r3, #1
 800c836:	e000      	b.n	800c83a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800c838:	2300      	movs	r3, #0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00e      	beq.n	800c85c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3308      	adds	r3, #8
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4610      	mov	r0, r2
 800c852:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800c85c:	bf00      	nop
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	683a      	ldr	r2, [r7, #0]
 800c872:	601a      	str	r2, [r3, #0]
    }
 800c874:	bf00      	nop
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	4a05      	ldr	r2, [pc, #20]	; (800c8a0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4618      	mov	r0, r3
 800c892:	f7ff ff69 	bl	800c768 <_ZN8touchgfx11ApplicationD1Ev>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4618      	mov	r0, r3
 800c89a:	3708      	adds	r7, #8
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	08027500 	.word	0x08027500

0800c8a4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f7ff ffe7 	bl	800c880 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c8b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f018 fee6 	bl	8025688 <_ZdlPvj>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
	...

0800c8c8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	4a08      	ldr	r2, [pc, #32]	; (800c8f4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	601a      	str	r2, [r3, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f002 f921 	bl	800eb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7ff ffcb 	bl	800c880 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	080274a4 	.word	0x080274a4

0800c8f8 <_ZN23FrontendApplicationBaseD0Ev>:
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7ff ffe1 	bl	800c8c8 <_ZN23FrontendApplicationBaseD1Ev>
 800c906:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f018 febc 	bl	8025688 <_ZdlPvj>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4618      	mov	r0, r3
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800c91a:	b480      	push	{r7}
 800c91c:	b083      	sub	sp, #12
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2201      	movs	r2, #1
 800c926:	721a      	strb	r2, [r3, #8]
    }
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	607b      	str	r3, [r7, #4]
 800c93e:	460b      	mov	r3, r1
 800c940:	817b      	strh	r3, [r7, #10]
 800c942:	4613      	mov	r3, r2
 800c944:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	4618      	mov	r0, r3
 800c94a:	f7ff fe7d 	bl	800c648 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d008      	beq.n	800c966 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	4618      	mov	r0, r3
 800c958:	f7ff fe83 	bl	800c662 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c962:	2301      	movs	r3, #1
 800c964:	e000      	b.n	800c968 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800c966:	2300      	movs	r3, #0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	601a      	str	r2, [r3, #0]
        }
    }
 800c972:	bf00      	nop
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800c97a:	b480      	push	{r7}
 800c97c:	b083      	sub	sp, #12
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
 800c982:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	683a      	ldr	r2, [r7, #0]
 800c988:	605a      	str	r2, [r3, #4]
    }
 800c98a:	bf00      	nop
 800c98c:	370c      	adds	r7, #12
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr
	...

0800c998 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7ff fd2c 	bl	800c400 <_ZN8touchgfx8DrawableC1Ev>
 800c9a8:	4a03      	ldr	r2, [pc, #12]	; (800c9b8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	601a      	str	r2, [r3, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	0802741c 	.word	0x0802741c

0800c9bc <_ZN8touchgfx6WidgetD1Ev>:
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	4a05      	ldr	r2, [pc, #20]	; (800c9dc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	601a      	str	r2, [r3, #0]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7ff fd45 	bl	800c45c <_ZN8touchgfx8DrawableD1Ev>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	0802741c 	.word	0x0802741c

0800c9e0 <_ZN8touchgfx6WidgetD0Ev>:
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f7ff ffe7 	bl	800c9bc <_ZN8touchgfx6WidgetD1Ev>
 800c9ee:	2128      	movs	r1, #40	; 0x28
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f018 fe49 	bl	8025688 <_ZdlPvj>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/gallery_screen/galleryView.hpp>
#include <gui/gallery_screen/galleryPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7ff fece 	bl	800c7b0 <_ZN8touchgfx14MVPApplicationC1Ev>
 800ca14:	4a13      	ldr	r2, [pc, #76]	; (800ca64 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	601a      	str	r2, [r3, #0]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ca20:	4618      	mov	r0, r3
 800ca22:	f000 fa89 	bl	800cf38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800ca36:	f7ff fe6f 	bl	800c718 <_ZN8touchgfx3HAL11getInstanceEv>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	6813      	ldr	r3, [r2, #0]
 800ca3e:	3308      	adds	r3, #8
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2100      	movs	r1, #0
 800ca44:	4610      	mov	r0, r2
 800ca46:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800ca48:	2000      	movs	r0, #0
 800ca4a:	f005 fecf 	bl	80127ec <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800ca4e:	f7ff fe6f 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 800ca52:	4603      	mov	r3, r0
 800ca54:	4618      	mov	r0, r3
 800ca56:	f012 fb1c 	bl	801f092 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	080274a4 	.word	0x080274a4

0800ca68 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4618      	mov	r0, r3
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	683a      	ldr	r2, [r7, #0]
 800ca8e:	4611      	mov	r1, r2
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7ff ffe9 	bl	800ca68 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	685a      	ldr	r2, [r3, #4]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	605a      	str	r2, [r3, #4]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	683a      	ldr	r2, [r7, #0]
 800caa2:	3308      	adds	r3, #8
 800caa4:	3208      	adds	r2, #8
 800caa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800caaa:	e883 0003 	stmia.w	r3, {r0, r1}
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4618      	mov	r0, r3
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800cab8:	b590      	push	{r4, r7, lr}
 800caba:	b089      	sub	sp, #36	; 0x24
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cac6:	4b10      	ldr	r3, [pc, #64]	; (800cb08 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800cac8:	61bb      	str	r3, [r7, #24]
 800caca:	2300      	movs	r3, #0
 800cacc:	61fb      	str	r3, [r7, #28]
 800cace:	f107 0008 	add.w	r0, r7, #8
 800cad2:	f107 0318 	add.w	r3, r7, #24
 800cad6:	cb0c      	ldmia	r3, {r2, r3}
 800cad8:	6879      	ldr	r1, [r7, #4]
 800cada:	f000 fa49 	bl	800cf70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cade:	f107 0308 	add.w	r3, r7, #8
 800cae2:	4619      	mov	r1, r3
 800cae4:	4620      	mov	r0, r4
 800cae6:	f7ff ffcb 	bl	800ca80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800caea:	f107 0308 	add.w	r3, r7, #8
 800caee:	4618      	mov	r0, r3
 800caf0:	f002 f818 	bl	800eb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cb00:	bf00      	nop
 800cb02:	3724      	adds	r7, #36	; 0x24
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd90      	pop	{r4, r7, pc}
 800cb08:	0800cb0d 	.word	0x0800cb0d

0800cb0c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af02      	add	r7, sp, #8
 800cb12:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cb20:	461a      	mov	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	4b04      	ldr	r3, [pc, #16]	; (800cb3c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800cb2c:	4804      	ldr	r0, [pc, #16]	; (800cb40 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800cb2e:	f000 fa51 	bl	800cfd4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cb32:	bf00      	nop
 800cb34:	3708      	adds	r7, #8
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	2000b3ec 	.word	0x2000b3ec
 800cb40:	2000b3e8 	.word	0x2000b3e8

0800cb44 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEast()
{
 800cb44:	b590      	push	{r4, r7, lr}
 800cb46:	b089      	sub	sp, #36	; 0x24
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenSlideTransitionEastImpl);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cb52:	4b10      	ldr	r3, [pc, #64]	; (800cb94 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv+0x50>)
 800cb54:	61bb      	str	r3, [r7, #24]
 800cb56:	2300      	movs	r3, #0
 800cb58:	61fb      	str	r3, [r7, #28]
 800cb5a:	f107 0008 	add.w	r0, r7, #8
 800cb5e:	f107 0318 	add.w	r3, r7, #24
 800cb62:	cb0c      	ldmia	r3, {r2, r3}
 800cb64:	6879      	ldr	r1, [r7, #4]
 800cb66:	f000 fa03 	bl	800cf70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cb6a:	f107 0308 	add.w	r3, r7, #8
 800cb6e:	4619      	mov	r1, r3
 800cb70:	4620      	mov	r0, r4
 800cb72:	f7ff ff85 	bl	800ca80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cb76:	f107 0308 	add.w	r3, r7, #8
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f001 ffd2 	bl	800eb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cb8c:	bf00      	nop
 800cb8e:	3724      	adds	r7, #36	; 0x24
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd90      	pop	{r4, r7, pc}
 800cb94:	0800cb99 	.word	0x0800cb99

0800cb98 <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEastImpl()
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af02      	add	r7, sp, #8
 800cb9e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cbac:	461a      	mov	r2, r3
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	4b04      	ldr	r3, [pc, #16]	; (800cbc8 <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x30>)
 800cbb8:	4804      	ldr	r0, [pc, #16]	; (800cbcc <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x34>)
 800cbba:	f000 fb37 	bl	800d22c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cbbe:	bf00      	nop
 800cbc0:	3708      	adds	r7, #8
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	2000b3ec 	.word	0x2000b3ec
 800cbcc:	2000b3e8 	.word	0x2000b3e8

0800cbd0 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenCoverTransitionEast()
{
 800cbd0:	b590      	push	{r4, r7, lr}
 800cbd2:	b089      	sub	sp, #36	; 0x24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenCoverTransitionEastImpl);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cbde:	4b10      	ldr	r3, [pc, #64]	; (800cc20 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv+0x50>)
 800cbe0:	61bb      	str	r3, [r7, #24]
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	61fb      	str	r3, [r7, #28]
 800cbe6:	f107 0008 	add.w	r0, r7, #8
 800cbea:	f107 0318 	add.w	r3, r7, #24
 800cbee:	cb0c      	ldmia	r3, {r2, r3}
 800cbf0:	6879      	ldr	r1, [r7, #4]
 800cbf2:	f000 f9bd 	bl	800cf70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cbf6:	f107 0308 	add.w	r3, r7, #8
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	f7ff ff3f 	bl	800ca80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cc02:	f107 0308 	add.w	r3, r7, #8
 800cc06:	4618      	mov	r0, r3
 800cc08:	f001 ff8c 	bl	800eb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cc18:	bf00      	nop
 800cc1a:	3724      	adds	r7, #36	; 0x24
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd90      	pop	{r4, r7, pc}
 800cc20:	0800cc25 	.word	0x0800cc25

0800cc24 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenCoverTransitionEastImpl()
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cc38:	461a      	mov	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cc40:	9300      	str	r3, [sp, #0]
 800cc42:	4b04      	ldr	r3, [pc, #16]	; (800cc54 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv+0x30>)
 800cc44:	4804      	ldr	r0, [pc, #16]	; (800cc58 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv+0x34>)
 800cc46:	f000 fc1d 	bl	800d484 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cc4a:	bf00      	nop
 800cc4c:	3708      	adds	r7, #8
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	2000b3ec 	.word	0x2000b3ec
 800cc58:	2000b3e8 	.word	0x2000b3e8

0800cc5c <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv>:

// Music

void FrontendApplicationBase::gotoMusicScreenNoTransition()
{
 800cc5c:	b590      	push	{r4, r7, lr}
 800cc5e:	b089      	sub	sp, #36	; 0x24
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMusicScreenNoTransitionImpl);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cc6a:	4b10      	ldr	r3, [pc, #64]	; (800ccac <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv+0x50>)
 800cc6c:	61bb      	str	r3, [r7, #24]
 800cc6e:	2300      	movs	r3, #0
 800cc70:	61fb      	str	r3, [r7, #28]
 800cc72:	f107 0008 	add.w	r0, r7, #8
 800cc76:	f107 0318 	add.w	r3, r7, #24
 800cc7a:	cb0c      	ldmia	r3, {r2, r3}
 800cc7c:	6879      	ldr	r1, [r7, #4]
 800cc7e:	f000 f977 	bl	800cf70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cc82:	f107 0308 	add.w	r3, r7, #8
 800cc86:	4619      	mov	r1, r3
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f7ff fef9 	bl	800ca80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cc8e:	f107 0308 	add.w	r3, r7, #8
 800cc92:	4618      	mov	r0, r3
 800cc94:	f001 ff46 	bl	800eb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cca4:	bf00      	nop
 800cca6:	3724      	adds	r7, #36	; 0x24
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd90      	pop	{r4, r7, pc}
 800ccac:	0800ccb1 	.word	0x0800ccb1

0800ccb0 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMusicScreenNoTransitionImpl()
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af02      	add	r7, sp, #8
 800ccb6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MusicView, MusicPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	4b04      	ldr	r3, [pc, #16]	; (800cce0 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv+0x30>)
 800ccd0:	4804      	ldr	r0, [pc, #16]	; (800cce4 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv+0x34>)
 800ccd2:	f000 fd03 	bl	800d6dc <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ccd6:	bf00      	nop
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	2000b3ec 	.word	0x2000b3ec
 800cce4:	2000b3e8 	.word	0x2000b3e8

0800cce8 <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv>:

// gameover

void FrontendApplicationBase::gotogameoverScreenNoTransition()
{
 800cce8:	b590      	push	{r4, r7, lr}
 800ccea:	b089      	sub	sp, #36	; 0x24
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotogameoverScreenNoTransitionImpl);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ccf6:	4b10      	ldr	r3, [pc, #64]	; (800cd38 <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv+0x50>)
 800ccf8:	61bb      	str	r3, [r7, #24]
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	61fb      	str	r3, [r7, #28]
 800ccfe:	f107 0008 	add.w	r0, r7, #8
 800cd02:	f107 0318 	add.w	r3, r7, #24
 800cd06:	cb0c      	ldmia	r3, {r2, r3}
 800cd08:	6879      	ldr	r1, [r7, #4]
 800cd0a:	f000 f931 	bl	800cf70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cd0e:	f107 0308 	add.w	r3, r7, #8
 800cd12:	4619      	mov	r1, r3
 800cd14:	4620      	mov	r0, r4
 800cd16:	f7ff feb3 	bl	800ca80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cd1a:	f107 0308 	add.w	r3, r7, #8
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f001 ff00 	bl	800eb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cd30:	bf00      	nop
 800cd32:	3724      	adds	r7, #36	; 0x24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd90      	pop	{r4, r7, pc}
 800cd38:	0800cd3d 	.word	0x0800cd3d

0800cd3c <_ZN23FrontendApplicationBase34gotogameoverScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotogameoverScreenNoTransitionImpl()
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af02      	add	r7, sp, #8
 800cd42:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<gameoverView, gameoverPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cd50:	461a      	mov	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	4b04      	ldr	r3, [pc, #16]	; (800cd6c <_ZN23FrontendApplicationBase34gotogameoverScreenNoTransitionImplEv+0x30>)
 800cd5c:	4804      	ldr	r0, [pc, #16]	; (800cd70 <_ZN23FrontendApplicationBase34gotogameoverScreenNoTransitionImplEv+0x34>)
 800cd5e:	f000 fde9 	bl	800d934 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cd62:	bf00      	nop
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	2000b3ec 	.word	0x2000b3ec
 800cd70:	2000b3e8 	.word	0x2000b3e8

0800cd74 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>:

// Pong

void FrontendApplicationBase::gotoPongScreenCoverTransitionEast()
{
 800cd74:	b590      	push	{r4, r7, lr}
 800cd76:	b089      	sub	sp, #36	; 0x24
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoPongScreenCoverTransitionEastImpl);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cd82:	4b10      	ldr	r3, [pc, #64]	; (800cdc4 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv+0x50>)
 800cd84:	61bb      	str	r3, [r7, #24]
 800cd86:	2300      	movs	r3, #0
 800cd88:	61fb      	str	r3, [r7, #28]
 800cd8a:	f107 0008 	add.w	r0, r7, #8
 800cd8e:	f107 0318 	add.w	r3, r7, #24
 800cd92:	cb0c      	ldmia	r3, {r2, r3}
 800cd94:	6879      	ldr	r1, [r7, #4]
 800cd96:	f000 f8eb 	bl	800cf70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cd9a:	f107 0308 	add.w	r3, r7, #8
 800cd9e:	4619      	mov	r1, r3
 800cda0:	4620      	mov	r0, r4
 800cda2:	f7ff fe6d 	bl	800ca80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cda6:	f107 0308 	add.w	r3, r7, #8
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f001 feba 	bl	800eb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cdbc:	bf00      	nop
 800cdbe:	3724      	adds	r7, #36	; 0x24
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd90      	pop	{r4, r7, pc}
 800cdc4:	0800cdc9 	.word	0x0800cdc9

0800cdc8 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoPongScreenCoverTransitionEastImpl()
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af02      	add	r7, sp, #8
 800cdce:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<PongView, PongPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cddc:	461a      	mov	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cde4:	9300      	str	r3, [sp, #0]
 800cde6:	4b04      	ldr	r3, [pc, #16]	; (800cdf8 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x30>)
 800cde8:	4804      	ldr	r0, [pc, #16]	; (800cdfc <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x34>)
 800cdea:	f000 fecf 	bl	800db8c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cdee:	bf00      	nop
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	2000b3ec 	.word	0x2000b3ec
 800cdfc:	2000b3e8 	.word	0x2000b3e8

0800ce00 <_ZN23FrontendApplicationBase26gotoPongScreenNoTransitionEv>:

void FrontendApplicationBase::gotoPongScreenNoTransition()
{
 800ce00:	b590      	push	{r4, r7, lr}
 800ce02:	b089      	sub	sp, #36	; 0x24
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoPongScreenNoTransitionImpl);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ce0e:	4b10      	ldr	r3, [pc, #64]	; (800ce50 <_ZN23FrontendApplicationBase26gotoPongScreenNoTransitionEv+0x50>)
 800ce10:	61bb      	str	r3, [r7, #24]
 800ce12:	2300      	movs	r3, #0
 800ce14:	61fb      	str	r3, [r7, #28]
 800ce16:	f107 0008 	add.w	r0, r7, #8
 800ce1a:	f107 0318 	add.w	r3, r7, #24
 800ce1e:	cb0c      	ldmia	r3, {r2, r3}
 800ce20:	6879      	ldr	r1, [r7, #4]
 800ce22:	f000 f8a5 	bl	800cf70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ce26:	f107 0308 	add.w	r3, r7, #8
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f7ff fe27 	bl	800ca80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ce32:	f107 0308 	add.w	r3, r7, #8
 800ce36:	4618      	mov	r0, r3
 800ce38:	f001 fe74 	bl	800eb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ce48:	bf00      	nop
 800ce4a:	3724      	adds	r7, #36	; 0x24
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd90      	pop	{r4, r7, pc}
 800ce50:	0800ce55 	.word	0x0800ce55

0800ce54 <_ZN23FrontendApplicationBase30gotoPongScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoPongScreenNoTransitionImpl()
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af02      	add	r7, sp, #8
 800ce5a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<PongView, PongPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ce68:	461a      	mov	r2, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	4b04      	ldr	r3, [pc, #16]	; (800ce84 <_ZN23FrontendApplicationBase30gotoPongScreenNoTransitionImplEv+0x30>)
 800ce74:	4804      	ldr	r0, [pc, #16]	; (800ce88 <_ZN23FrontendApplicationBase30gotoPongScreenNoTransitionImplEv+0x34>)
 800ce76:	f000 ffb7 	bl	800dde8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ce7a:	bf00      	nop
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	2000b3ec 	.word	0x2000b3ec
 800ce88:	2000b3e8 	.word	0x2000b3e8

0800ce8c <_ZN23FrontendApplicationBase36gotogalleryScreenCoverTransitionEastEv>:

// gallery

void FrontendApplicationBase::gotogalleryScreenCoverTransitionEast()
{
 800ce8c:	b590      	push	{r4, r7, lr}
 800ce8e:	b089      	sub	sp, #36	; 0x24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotogalleryScreenCoverTransitionEastImpl);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ce9a:	4b10      	ldr	r3, [pc, #64]	; (800cedc <_ZN23FrontendApplicationBase36gotogalleryScreenCoverTransitionEastEv+0x50>)
 800ce9c:	61bb      	str	r3, [r7, #24]
 800ce9e:	2300      	movs	r3, #0
 800cea0:	61fb      	str	r3, [r7, #28]
 800cea2:	f107 0008 	add.w	r0, r7, #8
 800cea6:	f107 0318 	add.w	r3, r7, #24
 800ceaa:	cb0c      	ldmia	r3, {r2, r3}
 800ceac:	6879      	ldr	r1, [r7, #4]
 800ceae:	f000 f85f 	bl	800cf70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ceb2:	f107 0308 	add.w	r3, r7, #8
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f7ff fde1 	bl	800ca80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cebe:	f107 0308 	add.w	r3, r7, #8
 800cec2:	4618      	mov	r0, r3
 800cec4:	f001 fe2e 	bl	800eb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ced4:	bf00      	nop
 800ced6:	3724      	adds	r7, #36	; 0x24
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd90      	pop	{r4, r7, pc}
 800cedc:	0800cee1 	.word	0x0800cee1

0800cee0 <_ZN23FrontendApplicationBase40gotogalleryScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotogalleryScreenCoverTransitionEastImpl()
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af02      	add	r7, sp, #8
 800cee6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<galleryView, galleryPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cef4:	461a      	mov	r2, r3
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cefc:	9300      	str	r3, [sp, #0]
 800cefe:	4b04      	ldr	r3, [pc, #16]	; (800cf10 <_ZN23FrontendApplicationBase40gotogalleryScreenCoverTransitionEastImplEv+0x30>)
 800cf00:	4804      	ldr	r0, [pc, #16]	; (800cf14 <_ZN23FrontendApplicationBase40gotogalleryScreenCoverTransitionEastImplEv+0x34>)
 800cf02:	f001 f89d 	bl	800e040 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cf06:	bf00      	nop
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	2000b3ec 	.word	0x2000b3ec
 800cf14:	2000b3e8 	.word	0x2000b3e8

0800cf18 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	4a04      	ldr	r2, [pc, #16]	; (800cf34 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	601a      	str	r2, [r3, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr
 800cf34:	08027544 	.word	0x08027544

0800cf38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7ff ffe8 	bl	800cf18 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cf48:	4a08      	ldr	r2, [pc, #32]	; (800cf6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	601a      	str	r2, [r3, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	605a      	str	r2, [r3, #4]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	609a      	str	r2, [r3, #8]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	60da      	str	r2, [r3, #12]
    {
    }
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4618      	mov	r0, r3
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	080274e8 	.word	0x080274e8

0800cf70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	4639      	mov	r1, r7
 800cf7c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7ff ffc8 	bl	800cf18 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cf88:	4a08      	ldr	r2, [pc, #32]	; (800cfac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	3308      	adds	r3, #8
 800cf98:	463a      	mov	r2, r7
 800cf9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf9e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	080274e8 	.word	0x080274e8

0800cfb0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7ff f980 	bl	800c2c0 <_ZN8touchgfx10TransitionC1Ev>
 800cfc0:	4a03      	ldr	r2, [pc, #12]	; (800cfd0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	601a      	str	r2, [r3, #0]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	08027484 	.word	0x08027484

0800cfd4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800cfd4:	b590      	push	{r4, r7, lr}
 800cfd6:	b08f      	sub	sp, #60	; 0x3c
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
 800cfe0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	689a      	ldr	r2, [r3, #8]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	3320      	adds	r3, #32
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4610      	mov	r0, r2
 800cff2:	4798      	blx	r3
 800cff4:	4603      	mov	r3, r0
 800cff6:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800cffa:	d205      	bcs.n	800d008 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800cffc:	4b86      	ldr	r3, [pc, #536]	; (800d218 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800cffe:	4a87      	ldr	r2, [pc, #540]	; (800d21c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d000:	21a7      	movs	r1, #167	; 0xa7
 800d002:	4887      	ldr	r0, [pc, #540]	; (800d220 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d004:	f018 fb6c 	bl	80256e0 <__assert_func>
 800d008:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685a      	ldr	r2, [r3, #4]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	3320      	adds	r3, #32
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4610      	mov	r0, r2
 800d01a:	4798      	blx	r3
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b0f      	cmp	r3, #15
 800d020:	d805      	bhi.n	800d02e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d022:	4b80      	ldr	r3, [pc, #512]	; (800d224 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d024:	4a7d      	ldr	r2, [pc, #500]	; (800d21c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d026:	21a8      	movs	r1, #168	; 0xa8
 800d028:	487d      	ldr	r0, [pc, #500]	; (800d220 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d02a:	f018 fb59 	bl	80256e0 <__assert_func>
 800d02e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	68da      	ldr	r2, [r3, #12]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	3320      	adds	r3, #32
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4610      	mov	r0, r2
 800d040:	4798      	blx	r3
 800d042:	4603      	mov	r3, r0
 800d044:	2b0b      	cmp	r3, #11
 800d046:	d805      	bhi.n	800d054 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d048:	4b77      	ldr	r3, [pc, #476]	; (800d228 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d04a:	4a74      	ldr	r2, [pc, #464]	; (800d21c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d04c:	21a9      	movs	r1, #169	; 0xa9
 800d04e:	4874      	ldr	r0, [pc, #464]	; (800d220 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d050:	f018 fb46 	bl	80256e0 <__assert_func>
 800d054:	bf00      	nop
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	62bb      	str	r3, [r7, #40]	; 0x28
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	627b      	str	r3, [r7, #36]	; 0x24
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d062:	f00c f9bd 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800d066:	4603      	mov	r3, r0
 800d068:	4618      	mov	r0, r3
 800d06a:	f00c f9d5 	bl	8019418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d06e:	6a3b      	ldr	r3, [r7, #32]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d008      	beq.n	800d088 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d076:	6a3b      	ldr	r3, [r7, #32]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	330c      	adds	r3, #12
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4610      	mov	r0, r2
 800d086:	4798      	blx	r3
    if (*currentTrans)
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d007      	beq.n	800d0a0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	6a3b      	ldr	r3, [r7, #32]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4610      	mov	r0, r2
 800d09e:	4798      	blx	r3
    if (*currentScreen)
 800d0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d008      	beq.n	800d0ba <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	3314      	adds	r3, #20
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4610      	mov	r0, r2
 800d0b8:	4798      	blx	r3
    if (*currentPresenter)
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d008      	beq.n	800d0d4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	4798      	blx	r3
    if (*currentScreen)
 800d0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d007      	beq.n	800d0ec <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	4798      	blx	r3
    if (*currentPresenter)
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d008      	beq.n	800d106 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3308      	adds	r3, #8
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4610      	mov	r0, r2
 800d104:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	2100      	movs	r1, #0
 800d10c:	4618      	mov	r0, r3
 800d10e:	f001 f8c3 	bl	800e298 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d112:	4603      	mov	r3, r0
 800d114:	4619      	mov	r1, r3
 800d116:	200c      	movs	r0, #12
 800d118:	f7ff f82e 	bl	800c178 <_ZnwjPv>
 800d11c:	4604      	mov	r4, r0
 800d11e:	2c00      	cmp	r4, #0
 800d120:	d004      	beq.n	800d12c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800d122:	4620      	mov	r0, r4
 800d124:	f7ff ff44 	bl	800cfb0 <_ZN8touchgfx12NoTransitionC1Ev>
 800d128:	4623      	mov	r3, r4
 800d12a:	e000      	b.n	800d12e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d12c:	4623      	mov	r3, r4
 800d12e:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	2100      	movs	r1, #0
 800d136:	4618      	mov	r0, r3
 800d138:	f001 f8c1 	bl	800e2be <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d13c:	4603      	mov	r3, r0
 800d13e:	4619      	mov	r1, r3
 800d140:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800d144:	f7ff f818 	bl	800c178 <_ZnwjPv>
 800d148:	4604      	mov	r4, r0
 800d14a:	2c00      	cmp	r4, #0
 800d14c:	d004      	beq.n	800d158 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800d14e:	4620      	mov	r0, r4
 800d150:	f006 fc36 	bl	80139c0 <_ZN10screenViewC1Ev>
 800d154:	4623      	mov	r3, r4
 800d156:	e000      	b.n	800d15a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d158:	4623      	mov	r3, r4
 800d15a:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	2100      	movs	r1, #0
 800d162:	4618      	mov	r0, r3
 800d164:	f001 f8be 	bl	800e2e4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d168:	4603      	mov	r3, r0
 800d16a:	4619      	mov	r1, r3
 800d16c:	2010      	movs	r0, #16
 800d16e:	f7ff f803 	bl	800c178 <_ZnwjPv>
 800d172:	4604      	mov	r4, r0
 800d174:	2c00      	cmp	r4, #0
 800d176:	d005      	beq.n	800d184 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d178:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d17a:	4620      	mov	r0, r4
 800d17c:	f006 fbc8 	bl	8013910 <_ZN15screenPresenterC1ER10screenView>
 800d180:	4623      	mov	r3, r4
 800d182:	e000      	b.n	800d186 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d184:	4623      	mov	r3, r4
 800d186:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d18c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d192:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d198:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d002      	beq.n	800d1a6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800d1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	e000      	b.n	800d1a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d1ac:	f7ff fb5a 	bl	800c864 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b2:	3304      	adds	r3, #4
 800d1b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7ff fbdf 	bl	800c97a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f001 f8a2 	bl	800e30a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c8:	61fb      	str	r3, [r7, #28]
 800d1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1cc:	61bb      	str	r3, [r7, #24]
 800d1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d0:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	330c      	adds	r3, #12
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	69f8      	ldr	r0, [r7, #28]
 800d1dc:	4798      	blx	r3
    newPresenter->activate();
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	69b8      	ldr	r0, [r7, #24]
 800d1e6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d1e8:	6979      	ldr	r1, [r7, #20]
 800d1ea:	69f8      	ldr	r0, [r7, #28]
 800d1ec:	f00d fa2a 	bl	801a644 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	3310      	adds	r3, #16
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	6978      	ldr	r0, [r7, #20]
 800d1fa:	4798      	blx	r3
    Application::getInstance()->draw();
 800d1fc:	f00c f8f0 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800d200:	4602      	mov	r2, r0
 800d202:	6813      	ldr	r3, [r2, #0]
 800d204:	3330      	adds	r3, #48	; 0x30
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4610      	mov	r0, r2
 800d20a:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d20e:	4618      	mov	r0, r3
 800d210:	373c      	adds	r7, #60	; 0x3c
 800d212:	46bd      	mov	sp, r7
 800d214:	bd90      	pop	{r4, r7, pc}
 800d216:	bf00      	nop
 800d218:	080267ec 	.word	0x080267ec
 800d21c:	0802759c 	.word	0x0802759c
 800d220:	0802687c 	.word	0x0802687c
 800d224:	080268c0 	.word	0x080268c0
 800d228:	08026964 	.word	0x08026964

0800d22c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d22c:	b590      	push	{r4, r7, lr}
 800d22e:	b08f      	sub	sp, #60	; 0x3c
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
 800d238:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	689a      	ldr	r2, [r3, #8]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	3320      	adds	r3, #32
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4610      	mov	r0, r2
 800d24a:	4798      	blx	r3
 800d24c:	4603      	mov	r3, r0
 800d24e:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800d252:	d205      	bcs.n	800d260 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d254:	4b86      	ldr	r3, [pc, #536]	; (800d470 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d256:	4a87      	ldr	r2, [pc, #540]	; (800d474 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d258:	21a7      	movs	r1, #167	; 0xa7
 800d25a:	4887      	ldr	r0, [pc, #540]	; (800d478 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d25c:	f018 fa40 	bl	80256e0 <__assert_func>
 800d260:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	685a      	ldr	r2, [r3, #4]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	3320      	adds	r3, #32
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4610      	mov	r0, r2
 800d272:	4798      	blx	r3
 800d274:	4603      	mov	r3, r0
 800d276:	2b0f      	cmp	r3, #15
 800d278:	d805      	bhi.n	800d286 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d27a:	4b80      	ldr	r3, [pc, #512]	; (800d47c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d27c:	4a7d      	ldr	r2, [pc, #500]	; (800d474 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d27e:	21a8      	movs	r1, #168	; 0xa8
 800d280:	487d      	ldr	r0, [pc, #500]	; (800d478 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d282:	f018 fa2d 	bl	80256e0 <__assert_func>
 800d286:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	68da      	ldr	r2, [r3, #12]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	68db      	ldr	r3, [r3, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3320      	adds	r3, #32
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4610      	mov	r0, r2
 800d298:	4798      	blx	r3
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b53      	cmp	r3, #83	; 0x53
 800d29e:	d805      	bhi.n	800d2ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d2a0:	4b77      	ldr	r3, [pc, #476]	; (800d480 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d2a2:	4a74      	ldr	r2, [pc, #464]	; (800d474 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d2a4:	21a9      	movs	r1, #169	; 0xa9
 800d2a6:	4874      	ldr	r0, [pc, #464]	; (800d478 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d2a8:	f018 fa1a 	bl	80256e0 <__assert_func>
 800d2ac:	bf00      	nop
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	627b      	str	r3, [r7, #36]	; 0x24
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d2ba:	f00c f891 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f00c f8a9 	bl	8019418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d2c6:	6a3b      	ldr	r3, [r7, #32]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d008      	beq.n	800d2e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d2ce:	6a3b      	ldr	r3, [r7, #32]
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	330c      	adds	r3, #12
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4610      	mov	r0, r2
 800d2de:	4798      	blx	r3
    if (*currentTrans)
 800d2e0:	6a3b      	ldr	r3, [r7, #32]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d007      	beq.n	800d2f8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d2e8:	6a3b      	ldr	r3, [r7, #32]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	6a3b      	ldr	r3, [r7, #32]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4610      	mov	r0, r2
 800d2f6:	4798      	blx	r3
    if (*currentScreen)
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d008      	beq.n	800d312 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	3314      	adds	r3, #20
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4610      	mov	r0, r2
 800d310:	4798      	blx	r3
    if (*currentPresenter)
 800d312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d008      	beq.n	800d32c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	3304      	adds	r3, #4
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4610      	mov	r0, r2
 800d32a:	4798      	blx	r3
    if (*currentScreen)
 800d32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d007      	beq.n	800d344 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4610      	mov	r0, r2
 800d342:	4798      	blx	r3
    if (*currentPresenter)
 800d344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d008      	beq.n	800d35e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	3308      	adds	r3, #8
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4610      	mov	r0, r2
 800d35c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	2100      	movs	r1, #0
 800d364:	4618      	mov	r0, r3
 800d366:	f000 ffde 	bl	800e326 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800d36a:	4603      	mov	r3, r0
 800d36c:	4619      	mov	r1, r3
 800d36e:	2054      	movs	r0, #84	; 0x54
 800d370:	f7fe ff02 	bl	800c178 <_ZnwjPv>
 800d374:	4604      	mov	r4, r0
 800d376:	2c00      	cmp	r4, #0
 800d378:	d005      	beq.n	800d386 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d37a:	2114      	movs	r1, #20
 800d37c:	4620      	mov	r0, r4
 800d37e:	f001 f829 	bl	800e3d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800d382:	4623      	mov	r3, r4
 800d384:	e000      	b.n	800d388 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800d386:	4623      	mov	r3, r4
 800d388:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	2100      	movs	r1, #0
 800d390:	4618      	mov	r0, r3
 800d392:	f000 ff94 	bl	800e2be <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d396:	4603      	mov	r3, r0
 800d398:	4619      	mov	r1, r3
 800d39a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800d39e:	f7fe feeb 	bl	800c178 <_ZnwjPv>
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	2c00      	cmp	r4, #0
 800d3a6:	d004      	beq.n	800d3b2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f006 fb09 	bl	80139c0 <_ZN10screenViewC1Ev>
 800d3ae:	4623      	mov	r3, r4
 800d3b0:	e000      	b.n	800d3b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800d3b2:	4623      	mov	r3, r4
 800d3b4:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f000 ff91 	bl	800e2e4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	2010      	movs	r0, #16
 800d3c8:	f7fe fed6 	bl	800c178 <_ZnwjPv>
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	2c00      	cmp	r4, #0
 800d3d0:	d005      	beq.n	800d3de <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d3d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f006 fa9b 	bl	8013910 <_ZN15screenPresenterC1ER10screenView>
 800d3da:	4623      	mov	r3, r4
 800d3dc:	e000      	b.n	800d3e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d3de:	4623      	mov	r3, r4
 800d3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3e6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3ec:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3f2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d002      	beq.n	800d400 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	e000      	b.n	800d402 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800d400:	2300      	movs	r3, #0
 800d402:	4619      	mov	r1, r3
 800d404:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d406:	f7ff fa2d 	bl	800c864 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40c:	3304      	adds	r3, #4
 800d40e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d410:	4618      	mov	r0, r3
 800d412:	f7ff fab2 	bl	800c97a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d41a:	4618      	mov	r0, r3
 800d41c:	f000 ff75 	bl	800e30a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d422:	61fb      	str	r3, [r7, #28]
 800d424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d426:	61bb      	str	r3, [r7, #24]
 800d428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d42a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	330c      	adds	r3, #12
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	69f8      	ldr	r0, [r7, #28]
 800d436:	4798      	blx	r3
    newPresenter->activate();
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	69b8      	ldr	r0, [r7, #24]
 800d440:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d442:	6979      	ldr	r1, [r7, #20]
 800d444:	69f8      	ldr	r0, [r7, #28]
 800d446:	f00d f8fd 	bl	801a644 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	3310      	adds	r3, #16
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	6978      	ldr	r0, [r7, #20]
 800d454:	4798      	blx	r3
    Application::getInstance()->draw();
 800d456:	f00b ffc3 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800d45a:	4602      	mov	r2, r0
 800d45c:	6813      	ldr	r3, [r2, #0]
 800d45e:	3330      	adds	r3, #48	; 0x30
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4610      	mov	r0, r2
 800d464:	4798      	blx	r3
    return newPresenter;
 800d466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d468:	4618      	mov	r0, r3
 800d46a:	373c      	adds	r7, #60	; 0x3c
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd90      	pop	{r4, r7, pc}
 800d470:	080267ec 	.word	0x080267ec
 800d474:	080276a0 	.word	0x080276a0
 800d478:	0802687c 	.word	0x0802687c
 800d47c:	080268c0 	.word	0x080268c0
 800d480:	08026964 	.word	0x08026964

0800d484 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d484:	b590      	push	{r4, r7, lr}
 800d486:	b08f      	sub	sp, #60	; 0x3c
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
 800d490:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	689a      	ldr	r2, [r3, #8]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3320      	adds	r3, #32
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	4798      	blx	r3
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800d4aa:	d205      	bcs.n	800d4b8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d4ac:	4b86      	ldr	r3, [pc, #536]	; (800d6c8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d4ae:	4a87      	ldr	r2, [pc, #540]	; (800d6cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d4b0:	21a7      	movs	r1, #167	; 0xa7
 800d4b2:	4887      	ldr	r0, [pc, #540]	; (800d6d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d4b4:	f018 f914 	bl	80256e0 <__assert_func>
 800d4b8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	685a      	ldr	r2, [r3, #4]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	3320      	adds	r3, #32
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4610      	mov	r0, r2
 800d4ca:	4798      	blx	r3
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b0f      	cmp	r3, #15
 800d4d0:	d805      	bhi.n	800d4de <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d4d2:	4b80      	ldr	r3, [pc, #512]	; (800d6d4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d4d4:	4a7d      	ldr	r2, [pc, #500]	; (800d6cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d4d6:	21a8      	movs	r1, #168	; 0xa8
 800d4d8:	487d      	ldr	r0, [pc, #500]	; (800d6d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d4da:	f018 f901 	bl	80256e0 <__assert_func>
 800d4de:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	68da      	ldr	r2, [r3, #12]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	3320      	adds	r3, #32
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4610      	mov	r0, r2
 800d4f0:	4798      	blx	r3
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b4f      	cmp	r3, #79	; 0x4f
 800d4f6:	d805      	bhi.n	800d504 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d4f8:	4b77      	ldr	r3, [pc, #476]	; (800d6d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d4fa:	4a74      	ldr	r2, [pc, #464]	; (800d6cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d4fc:	21a9      	movs	r1, #169	; 0xa9
 800d4fe:	4874      	ldr	r0, [pc, #464]	; (800d6d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d500:	f018 f8ee 	bl	80256e0 <__assert_func>
 800d504:	bf00      	nop
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	62bb      	str	r3, [r7, #40]	; 0x28
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	627b      	str	r3, [r7, #36]	; 0x24
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d512:	f00b ff65 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800d516:	4603      	mov	r3, r0
 800d518:	4618      	mov	r0, r3
 800d51a:	f00b ff7d 	bl	8019418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d51e:	6a3b      	ldr	r3, [r7, #32]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d008      	beq.n	800d538 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d526:	6a3b      	ldr	r3, [r7, #32]
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	6a3b      	ldr	r3, [r7, #32]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	330c      	adds	r3, #12
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4610      	mov	r0, r2
 800d536:	4798      	blx	r3
    if (*currentTrans)
 800d538:	6a3b      	ldr	r3, [r7, #32]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d007      	beq.n	800d550 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	6a3b      	ldr	r3, [r7, #32]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4610      	mov	r0, r2
 800d54e:	4798      	blx	r3
    if (*currentScreen)
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d008      	beq.n	800d56a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3314      	adds	r3, #20
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4610      	mov	r0, r2
 800d568:	4798      	blx	r3
    if (*currentPresenter)
 800d56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d008      	beq.n	800d584 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3304      	adds	r3, #4
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4610      	mov	r0, r2
 800d582:	4798      	blx	r3
    if (*currentScreen)
 800d584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d007      	beq.n	800d59c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4610      	mov	r0, r2
 800d59a:	4798      	blx	r3
    if (*currentPresenter)
 800d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d008      	beq.n	800d5b6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	3308      	adds	r3, #8
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f000 ff9d 	bl	800e4fc <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	2050      	movs	r0, #80	; 0x50
 800d5c8:	f7fe fdd6 	bl	800c178 <_ZnwjPv>
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	2c00      	cmp	r4, #0
 800d5d0:	d005      	beq.n	800d5de <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d5d2:	2114      	movs	r1, #20
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f000 fffb 	bl	800e5d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800d5da:	4623      	mov	r3, r4
 800d5dc:	e000      	b.n	800d5e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800d5de:	4623      	mov	r3, r4
 800d5e0:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f000 fe68 	bl	800e2be <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800d5f6:	f7fe fdbf 	bl	800c178 <_ZnwjPv>
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	2c00      	cmp	r4, #0
 800d5fe:	d004      	beq.n	800d60a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d600:	4620      	mov	r0, r4
 800d602:	f006 f9dd 	bl	80139c0 <_ZN10screenViewC1Ev>
 800d606:	4623      	mov	r3, r4
 800d608:	e000      	b.n	800d60c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800d60a:	4623      	mov	r3, r4
 800d60c:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	2100      	movs	r1, #0
 800d614:	4618      	mov	r0, r3
 800d616:	f000 fe65 	bl	800e2e4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d61a:	4603      	mov	r3, r0
 800d61c:	4619      	mov	r1, r3
 800d61e:	2010      	movs	r0, #16
 800d620:	f7fe fdaa 	bl	800c178 <_ZnwjPv>
 800d624:	4604      	mov	r4, r0
 800d626:	2c00      	cmp	r4, #0
 800d628:	d005      	beq.n	800d636 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d62a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d62c:	4620      	mov	r0, r4
 800d62e:	f006 f96f 	bl	8013910 <_ZN15screenPresenterC1ER10screenView>
 800d632:	4623      	mov	r3, r4
 800d634:	e000      	b.n	800d638 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d636:	4623      	mov	r3, r4
 800d638:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d63e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d644:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d64a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d002      	beq.n	800d658 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d654:	3304      	adds	r3, #4
 800d656:	e000      	b.n	800d65a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800d658:	2300      	movs	r3, #0
 800d65a:	4619      	mov	r1, r3
 800d65c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d65e:	f7ff f901 	bl	800c864 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d664:	3304      	adds	r3, #4
 800d666:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff f986 	bl	800c97a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d672:	4618      	mov	r0, r3
 800d674:	f000 fe49 	bl	800e30a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67a:	61fb      	str	r3, [r7, #28]
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	61bb      	str	r3, [r7, #24]
 800d680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d682:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	330c      	adds	r3, #12
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	69f8      	ldr	r0, [r7, #28]
 800d68e:	4798      	blx	r3
    newPresenter->activate();
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	69b8      	ldr	r0, [r7, #24]
 800d698:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d69a:	6979      	ldr	r1, [r7, #20]
 800d69c:	69f8      	ldr	r0, [r7, #28]
 800d69e:	f00c ffd1 	bl	801a644 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	3310      	adds	r3, #16
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	6978      	ldr	r0, [r7, #20]
 800d6ac:	4798      	blx	r3
    Application::getInstance()->draw();
 800d6ae:	f00b fe97 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	6813      	ldr	r3, [r2, #0]
 800d6b6:	3330      	adds	r3, #48	; 0x30
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4610      	mov	r0, r2
 800d6bc:	4798      	blx	r3
    return newPresenter;
 800d6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	373c      	adds	r7, #60	; 0x3c
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd90      	pop	{r4, r7, pc}
 800d6c8:	080267ec 	.word	0x080267ec
 800d6cc:	080277c0 	.word	0x080277c0
 800d6d0:	0802687c 	.word	0x0802687c
 800d6d4:	080268c0 	.word	0x080268c0
 800d6d8:	08026964 	.word	0x08026964

0800d6dc <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d6dc:	b590      	push	{r4, r7, lr}
 800d6de:	b08f      	sub	sp, #60	; 0x3c
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
 800d6e8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	689a      	ldr	r2, [r3, #8]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	3320      	adds	r3, #32
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4610      	mov	r0, r2
 800d6fa:	4798      	blx	r3
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	f5b3 7f46 	cmp.w	r3, #792	; 0x318
 800d702:	d205      	bcs.n	800d710 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d704:	4b86      	ldr	r3, [pc, #536]	; (800d920 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d706:	4a87      	ldr	r2, [pc, #540]	; (800d924 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d708:	21a7      	movs	r1, #167	; 0xa7
 800d70a:	4887      	ldr	r0, [pc, #540]	; (800d928 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d70c:	f017 ffe8 	bl	80256e0 <__assert_func>
 800d710:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	685a      	ldr	r2, [r3, #4]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	3320      	adds	r3, #32
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4610      	mov	r0, r2
 800d722:	4798      	blx	r3
 800d724:	4603      	mov	r3, r0
 800d726:	2b0f      	cmp	r3, #15
 800d728:	d805      	bhi.n	800d736 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d72a:	4b80      	ldr	r3, [pc, #512]	; (800d92c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d72c:	4a7d      	ldr	r2, [pc, #500]	; (800d924 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d72e:	21a8      	movs	r1, #168	; 0xa8
 800d730:	487d      	ldr	r0, [pc, #500]	; (800d928 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d732:	f017 ffd5 	bl	80256e0 <__assert_func>
 800d736:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	68da      	ldr	r2, [r3, #12]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	3320      	adds	r3, #32
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4610      	mov	r0, r2
 800d748:	4798      	blx	r3
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b0b      	cmp	r3, #11
 800d74e:	d805      	bhi.n	800d75c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d750:	4b77      	ldr	r3, [pc, #476]	; (800d930 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d752:	4a74      	ldr	r2, [pc, #464]	; (800d924 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d754:	21a9      	movs	r1, #169	; 0xa9
 800d756:	4874      	ldr	r0, [pc, #464]	; (800d928 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d758:	f017 ffc2 	bl	80256e0 <__assert_func>
 800d75c:	bf00      	nop
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	62bb      	str	r3, [r7, #40]	; 0x28
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	627b      	str	r3, [r7, #36]	; 0x24
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d76a:	f00b fe39 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800d76e:	4603      	mov	r3, r0
 800d770:	4618      	mov	r0, r3
 800d772:	f00b fe51 	bl	8019418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d008      	beq.n	800d790 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d77e:	6a3b      	ldr	r3, [r7, #32]
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	330c      	adds	r3, #12
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4610      	mov	r0, r2
 800d78e:	4798      	blx	r3
    if (*currentTrans)
 800d790:	6a3b      	ldr	r3, [r7, #32]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d007      	beq.n	800d7a8 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d798:	6a3b      	ldr	r3, [r7, #32]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	6a3b      	ldr	r3, [r7, #32]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4610      	mov	r0, r2
 800d7a6:	4798      	blx	r3
    if (*currentScreen)
 800d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d008      	beq.n	800d7c2 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	3314      	adds	r3, #20
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4610      	mov	r0, r2
 800d7c0:	4798      	blx	r3
    if (*currentPresenter)
 800d7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d008      	beq.n	800d7dc <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	3304      	adds	r3, #4
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4610      	mov	r0, r2
 800d7da:	4798      	blx	r3
    if (*currentScreen)
 800d7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d007      	beq.n	800d7f4 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4610      	mov	r0, r2
 800d7f2:	4798      	blx	r3
    if (*currentPresenter)
 800d7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d008      	beq.n	800d80e <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	3308      	adds	r3, #8
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4610      	mov	r0, r2
 800d80c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	2100      	movs	r1, #0
 800d814:	4618      	mov	r0, r3
 800d816:	f000 fd3f 	bl	800e298 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d81a:	4603      	mov	r3, r0
 800d81c:	4619      	mov	r1, r3
 800d81e:	200c      	movs	r0, #12
 800d820:	f7fe fcaa 	bl	800c178 <_ZnwjPv>
 800d824:	4604      	mov	r4, r0
 800d826:	2c00      	cmp	r4, #0
 800d828:	d004      	beq.n	800d834 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800d82a:	4620      	mov	r0, r4
 800d82c:	f7ff fbc0 	bl	800cfb0 <_ZN8touchgfx12NoTransitionC1Ev>
 800d830:	4623      	mov	r3, r4
 800d832:	e000      	b.n	800d836 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d834:	4623      	mov	r3, r4
 800d836:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	2100      	movs	r1, #0
 800d83e:	4618      	mov	r0, r3
 800d840:	f000 ff4a 	bl	800e6d8 <_ZN8touchgfx17AbstractPartition2atI9MusicViewEERT_t>
 800d844:	4603      	mov	r3, r0
 800d846:	4619      	mov	r1, r3
 800d848:	f44f 7046 	mov.w	r0, #792	; 0x318
 800d84c:	f7fe fc94 	bl	800c178 <_ZnwjPv>
 800d850:	4604      	mov	r4, r0
 800d852:	2c00      	cmp	r4, #0
 800d854:	d004      	beq.n	800d860 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800d856:	4620      	mov	r0, r4
 800d858:	f005 fb64 	bl	8012f24 <_ZN9MusicViewC1Ev>
 800d85c:	4623      	mov	r3, r4
 800d85e:	e000      	b.n	800d862 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d860:	4623      	mov	r3, r4
 800d862:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	2100      	movs	r1, #0
 800d86a:	4618      	mov	r0, r3
 800d86c:	f000 ff47 	bl	800e6fe <_ZN8touchgfx17AbstractPartition2atI14MusicPresenterEERT_t>
 800d870:	4603      	mov	r3, r0
 800d872:	4619      	mov	r1, r3
 800d874:	2010      	movs	r0, #16
 800d876:	f7fe fc7f 	bl	800c178 <_ZnwjPv>
 800d87a:	4604      	mov	r4, r0
 800d87c:	2c00      	cmp	r4, #0
 800d87e:	d005      	beq.n	800d88c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d880:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d882:	4620      	mov	r0, r4
 800d884:	f005 faf6 	bl	8012e74 <_ZN14MusicPresenterC1ER9MusicView>
 800d888:	4623      	mov	r3, r4
 800d88a:	e000      	b.n	800d88e <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d88c:	4623      	mov	r3, r4
 800d88e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d894:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d89a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8a0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	e000      	b.n	800d8b0 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d8b4:	f7fe ffd6 	bl	800c864 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7ff f85b 	bl	800c97a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f000 ff2b 	bl	800e724 <_ZN8touchgfx4ViewI14MusicPresenterE4bindERS1_>
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d0:	61fb      	str	r3, [r7, #28]
 800d8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d4:	61bb      	str	r3, [r7, #24]
 800d8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8d8:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	330c      	adds	r3, #12
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	69f8      	ldr	r0, [r7, #28]
 800d8e4:	4798      	blx	r3
    newPresenter->activate();
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	69b8      	ldr	r0, [r7, #24]
 800d8ee:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d8f0:	6979      	ldr	r1, [r7, #20]
 800d8f2:	69f8      	ldr	r0, [r7, #28]
 800d8f4:	f00c fea6 	bl	801a644 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	3310      	adds	r3, #16
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	6978      	ldr	r0, [r7, #20]
 800d902:	4798      	blx	r3
    Application::getInstance()->draw();
 800d904:	f00b fd6c 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800d908:	4602      	mov	r2, r0
 800d90a:	6813      	ldr	r3, [r2, #0]
 800d90c:	3330      	adds	r3, #48	; 0x30
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4610      	mov	r0, r2
 800d912:	4798      	blx	r3
    return newPresenter;
 800d914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d916:	4618      	mov	r0, r3
 800d918:	373c      	adds	r7, #60	; 0x3c
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd90      	pop	{r4, r7, pc}
 800d91e:	bf00      	nop
 800d920:	080267ec 	.word	0x080267ec
 800d924:	080278e0 	.word	0x080278e0
 800d928:	0802687c 	.word	0x0802687c
 800d92c:	080268c0 	.word	0x080268c0
 800d930:	08026964 	.word	0x08026964

0800d934 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d934:	b590      	push	{r4, r7, lr}
 800d936:	b08f      	sub	sp, #60	; 0x3c
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	689a      	ldr	r2, [r3, #8]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	3320      	adds	r3, #32
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4610      	mov	r0, r2
 800d952:	4798      	blx	r3
 800d954:	4603      	mov	r3, r0
 800d956:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800d95a:	d205      	bcs.n	800d968 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d95c:	4b86      	ldr	r3, [pc, #536]	; (800db78 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d95e:	4a87      	ldr	r2, [pc, #540]	; (800db7c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d960:	21a7      	movs	r1, #167	; 0xa7
 800d962:	4887      	ldr	r0, [pc, #540]	; (800db80 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d964:	f017 febc 	bl	80256e0 <__assert_func>
 800d968:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	685a      	ldr	r2, [r3, #4]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3320      	adds	r3, #32
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4610      	mov	r0, r2
 800d97a:	4798      	blx	r3
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b0f      	cmp	r3, #15
 800d980:	d805      	bhi.n	800d98e <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d982:	4b80      	ldr	r3, [pc, #512]	; (800db84 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d984:	4a7d      	ldr	r2, [pc, #500]	; (800db7c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d986:	21a8      	movs	r1, #168	; 0xa8
 800d988:	487d      	ldr	r0, [pc, #500]	; (800db80 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d98a:	f017 fea9 	bl	80256e0 <__assert_func>
 800d98e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	68da      	ldr	r2, [r3, #12]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	3320      	adds	r3, #32
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4610      	mov	r0, r2
 800d9a0:	4798      	blx	r3
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b0b      	cmp	r3, #11
 800d9a6:	d805      	bhi.n	800d9b4 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d9a8:	4b77      	ldr	r3, [pc, #476]	; (800db88 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d9aa:	4a74      	ldr	r2, [pc, #464]	; (800db7c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d9ac:	21a9      	movs	r1, #169	; 0xa9
 800d9ae:	4874      	ldr	r0, [pc, #464]	; (800db80 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d9b0:	f017 fe96 	bl	80256e0 <__assert_func>
 800d9b4:	bf00      	nop
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	627b      	str	r3, [r7, #36]	; 0x24
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d9c2:	f00b fd0d 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f00b fd25 	bl	8019418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d9ce:	6a3b      	ldr	r3, [r7, #32]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d008      	beq.n	800d9e8 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d9d6:	6a3b      	ldr	r3, [r7, #32]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	6a3b      	ldr	r3, [r7, #32]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	330c      	adds	r3, #12
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4610      	mov	r0, r2
 800d9e6:	4798      	blx	r3
    if (*currentTrans)
 800d9e8:	6a3b      	ldr	r3, [r7, #32]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d007      	beq.n	800da00 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4610      	mov	r0, r2
 800d9fe:	4798      	blx	r3
    if (*currentScreen)
 800da00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d008      	beq.n	800da1a <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800da08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	3314      	adds	r3, #20
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4610      	mov	r0, r2
 800da18:	4798      	blx	r3
    if (*currentPresenter)
 800da1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d008      	beq.n	800da34 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800da22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	3304      	adds	r3, #4
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4610      	mov	r0, r2
 800da32:	4798      	blx	r3
    if (*currentScreen)
 800da34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d007      	beq.n	800da4c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800da3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4610      	mov	r0, r2
 800da4a:	4798      	blx	r3
    if (*currentPresenter)
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d008      	beq.n	800da66 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800da54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	3308      	adds	r3, #8
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4610      	mov	r0, r2
 800da64:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	2100      	movs	r1, #0
 800da6c:	4618      	mov	r0, r3
 800da6e:	f000 fc13 	bl	800e298 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800da72:	4603      	mov	r3, r0
 800da74:	4619      	mov	r1, r3
 800da76:	200c      	movs	r0, #12
 800da78:	f7fe fb7e 	bl	800c178 <_ZnwjPv>
 800da7c:	4604      	mov	r4, r0
 800da7e:	2c00      	cmp	r4, #0
 800da80:	d004      	beq.n	800da8c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800da82:	4620      	mov	r0, r4
 800da84:	f7ff fa94 	bl	800cfb0 <_ZN8touchgfx12NoTransitionC1Ev>
 800da88:	4623      	mov	r3, r4
 800da8a:	e000      	b.n	800da8e <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800da8c:	4623      	mov	r3, r4
 800da8e:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	2100      	movs	r1, #0
 800da96:	4618      	mov	r0, r3
 800da98:	f000 fe52 	bl	800e740 <_ZN8touchgfx17AbstractPartition2atI12gameoverViewEERT_t>
 800da9c:	4603      	mov	r3, r0
 800da9e:	4619      	mov	r1, r3
 800daa0:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 800daa4:	f7fe fb68 	bl	800c178 <_ZnwjPv>
 800daa8:	4604      	mov	r4, r0
 800daaa:	2c00      	cmp	r4, #0
 800daac:	d004      	beq.n	800dab8 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800daae:	4620      	mov	r0, r4
 800dab0:	f005 f958 	bl	8012d64 <_ZN12gameoverViewC1Ev>
 800dab4:	4623      	mov	r3, r4
 800dab6:	e000      	b.n	800daba <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800dab8:	4623      	mov	r3, r4
 800daba:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	2100      	movs	r1, #0
 800dac2:	4618      	mov	r0, r3
 800dac4:	f000 fe4f 	bl	800e766 <_ZN8touchgfx17AbstractPartition2atI17gameoverPresenterEERT_t>
 800dac8:	4603      	mov	r3, r0
 800daca:	4619      	mov	r1, r3
 800dacc:	2010      	movs	r0, #16
 800dace:	f7fe fb53 	bl	800c178 <_ZnwjPv>
 800dad2:	4604      	mov	r4, r0
 800dad4:	2c00      	cmp	r4, #0
 800dad6:	d005      	beq.n	800dae4 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800dad8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dada:	4620      	mov	r0, r4
 800dadc:	f005 f8ea 	bl	8012cb4 <_ZN17gameoverPresenterC1ER12gameoverView>
 800dae0:	4623      	mov	r3, r4
 800dae2:	e000      	b.n	800dae6 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800dae4:	4623      	mov	r3, r4
 800dae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800daec:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daf2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daf8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800dafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800db00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db02:	3304      	adds	r3, #4
 800db04:	e000      	b.n	800db08 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800db06:	2300      	movs	r3, #0
 800db08:	4619      	mov	r1, r3
 800db0a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800db0c:	f7fe feaa 	bl	800c864 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800db10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db12:	3304      	adds	r3, #4
 800db14:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800db16:	4618      	mov	r0, r3
 800db18:	f7fe ff2f 	bl	800c97a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800db1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db20:	4618      	mov	r0, r3
 800db22:	f000 fe33 	bl	800e78c <_ZN8touchgfx4ViewI17gameoverPresenterE4bindERS1_>
 800db26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db28:	61fb      	str	r3, [r7, #28]
 800db2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2c:	61bb      	str	r3, [r7, #24]
 800db2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db30:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	330c      	adds	r3, #12
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	69f8      	ldr	r0, [r7, #28]
 800db3c:	4798      	blx	r3
    newPresenter->activate();
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	69b8      	ldr	r0, [r7, #24]
 800db46:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800db48:	6979      	ldr	r1, [r7, #20]
 800db4a:	69f8      	ldr	r0, [r7, #28]
 800db4c:	f00c fd7a 	bl	801a644 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	3310      	adds	r3, #16
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	6978      	ldr	r0, [r7, #20]
 800db5a:	4798      	blx	r3
    Application::getInstance()->draw();
 800db5c:	f00b fc40 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800db60:	4602      	mov	r2, r0
 800db62:	6813      	ldr	r3, [r2, #0]
 800db64:	3330      	adds	r3, #48	; 0x30
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4610      	mov	r0, r2
 800db6a:	4798      	blx	r3
    return newPresenter;
 800db6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800db6e:	4618      	mov	r0, r3
 800db70:	373c      	adds	r7, #60	; 0x3c
 800db72:	46bd      	mov	sp, r7
 800db74:	bd90      	pop	{r4, r7, pc}
 800db76:	bf00      	nop
 800db78:	080267ec 	.word	0x080267ec
 800db7c:	080279e0 	.word	0x080279e0
 800db80:	0802687c 	.word	0x0802687c
 800db84:	080268c0 	.word	0x080268c0
 800db88:	08026964 	.word	0x08026964

0800db8c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800db8c:	b590      	push	{r4, r7, lr}
 800db8e:	b08f      	sub	sp, #60	; 0x3c
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	607a      	str	r2, [r7, #4]
 800db98:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	689a      	ldr	r2, [r3, #8]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	3320      	adds	r3, #32
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4610      	mov	r0, r2
 800dbaa:	4798      	blx	r3
 800dbac:	4602      	mov	r2, r0
 800dbae:	f641 634f 	movw	r3, #7759	; 0x1e4f
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d805      	bhi.n	800dbc2 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800dbb6:	4b87      	ldr	r3, [pc, #540]	; (800ddd4 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800dbb8:	4a87      	ldr	r2, [pc, #540]	; (800ddd8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dbba:	21a7      	movs	r1, #167	; 0xa7
 800dbbc:	4887      	ldr	r0, [pc, #540]	; (800dddc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dbbe:	f017 fd8f 	bl	80256e0 <__assert_func>
 800dbc2:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	685a      	ldr	r2, [r3, #4]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3320      	adds	r3, #32
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	4798      	blx	r3
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b0f      	cmp	r3, #15
 800dbda:	d805      	bhi.n	800dbe8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800dbdc:	4b80      	ldr	r3, [pc, #512]	; (800dde0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800dbde:	4a7e      	ldr	r2, [pc, #504]	; (800ddd8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dbe0:	21a8      	movs	r1, #168	; 0xa8
 800dbe2:	487e      	ldr	r0, [pc, #504]	; (800dddc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dbe4:	f017 fd7c 	bl	80256e0 <__assert_func>
 800dbe8:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	68da      	ldr	r2, [r3, #12]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	68db      	ldr	r3, [r3, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	3320      	adds	r3, #32
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	4798      	blx	r3
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b4f      	cmp	r3, #79	; 0x4f
 800dc00:	d805      	bhi.n	800dc0e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800dc02:	4b78      	ldr	r3, [pc, #480]	; (800dde4 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x258>)
 800dc04:	4a74      	ldr	r2, [pc, #464]	; (800ddd8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dc06:	21a9      	movs	r1, #169	; 0xa9
 800dc08:	4874      	ldr	r0, [pc, #464]	; (800dddc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dc0a:	f017 fd69 	bl	80256e0 <__assert_func>
 800dc0e:	bf00      	nop
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	627b      	str	r3, [r7, #36]	; 0x24
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800dc1c:	f00b fbe0 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800dc20:	4603      	mov	r3, r0
 800dc22:	4618      	mov	r0, r3
 800dc24:	f00b fbf8 	bl	8019418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800dc28:	6a3b      	ldr	r3, [r7, #32]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d008      	beq.n	800dc42 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800dc30:	6a3b      	ldr	r3, [r7, #32]
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	6a3b      	ldr	r3, [r7, #32]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	330c      	adds	r3, #12
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4610      	mov	r0, r2
 800dc40:	4798      	blx	r3
    if (*currentTrans)
 800dc42:	6a3b      	ldr	r3, [r7, #32]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d007      	beq.n	800dc5a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800dc4a:	6a3b      	ldr	r3, [r7, #32]
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	6a3b      	ldr	r3, [r7, #32]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4610      	mov	r0, r2
 800dc58:	4798      	blx	r3
    if (*currentScreen)
 800dc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d008      	beq.n	800dc74 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800dc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc64:	681a      	ldr	r2, [r3, #0]
 800dc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	3314      	adds	r3, #20
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4610      	mov	r0, r2
 800dc72:	4798      	blx	r3
    if (*currentPresenter)
 800dc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d008      	beq.n	800dc8e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	3304      	adds	r3, #4
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4610      	mov	r0, r2
 800dc8c:	4798      	blx	r3
    if (*currentScreen)
 800dc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d007      	beq.n	800dca6 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800dc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4610      	mov	r0, r2
 800dca4:	4798      	blx	r3
    if (*currentPresenter)
 800dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d008      	beq.n	800dcc0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	3308      	adds	r3, #8
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f000 fc18 	bl	800e4fc <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800dccc:	4603      	mov	r3, r0
 800dcce:	4619      	mov	r1, r3
 800dcd0:	2050      	movs	r0, #80	; 0x50
 800dcd2:	f7fe fa51 	bl	800c178 <_ZnwjPv>
 800dcd6:	4604      	mov	r4, r0
 800dcd8:	2c00      	cmp	r4, #0
 800dcda:	d005      	beq.n	800dce8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800dcdc:	2114      	movs	r1, #20
 800dcde:	4620      	mov	r0, r4
 800dce0:	f000 fc76 	bl	800e5d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800dce4:	4623      	mov	r3, r4
 800dce6:	e000      	b.n	800dcea <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15e>
 800dce8:	4623      	mov	r3, r4
 800dcea:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	2100      	movs	r1, #0
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f000 fd58 	bl	800e7a8 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	f641 6050 	movw	r0, #7760	; 0x1e50
 800dd00:	f7fe fa3a 	bl	800c178 <_ZnwjPv>
 800dd04:	4604      	mov	r4, r0
 800dd06:	2c00      	cmp	r4, #0
 800dd08:	d004      	beq.n	800dd14 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f005 fa92 	bl	8013234 <_ZN8PongViewC1Ev>
 800dd10:	4623      	mov	r3, r4
 800dd12:	e000      	b.n	800dd16 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x18a>
 800dd14:	4623      	mov	r3, r4
 800dd16:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f000 fd55 	bl	800e7ce <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>
 800dd24:	4603      	mov	r3, r0
 800dd26:	4619      	mov	r1, r3
 800dd28:	2010      	movs	r0, #16
 800dd2a:	f7fe fa25 	bl	800c178 <_ZnwjPv>
 800dd2e:	4604      	mov	r4, r0
 800dd30:	2c00      	cmp	r4, #0
 800dd32:	d005      	beq.n	800dd40 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800dd34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd36:	4620      	mov	r0, r4
 800dd38:	f005 fa0a 	bl	8013150 <_ZN13PongPresenterC1ER8PongView>
 800dd3c:	4623      	mov	r3, r4
 800dd3e:	e000      	b.n	800dd42 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800dd40:	4623      	mov	r3, r4
 800dd42:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd48:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd4e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd54:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800dd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d002      	beq.n	800dd62 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800dd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5e:	3304      	adds	r3, #4
 800dd60:	e000      	b.n	800dd64 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d8>
 800dd62:	2300      	movs	r3, #0
 800dd64:	4619      	mov	r1, r3
 800dd66:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dd68:	f7fe fd7c 	bl	800c864 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800dd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6e:	3304      	adds	r3, #4
 800dd70:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fe fe01 	bl	800c97a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800dd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 fd39 	bl	800e7f4 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>
 800dd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd84:	61fb      	str	r3, [r7, #28]
 800dd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd88:	61bb      	str	r3, [r7, #24]
 800dd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd8c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	330c      	adds	r3, #12
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	69f8      	ldr	r0, [r7, #28]
 800dd98:	4798      	blx	r3
    newPresenter->activate();
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	69b8      	ldr	r0, [r7, #24]
 800dda2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800dda4:	6979      	ldr	r1, [r7, #20]
 800dda6:	69f8      	ldr	r0, [r7, #28]
 800dda8:	f00c fc4c 	bl	801a644 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	3310      	adds	r3, #16
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	6978      	ldr	r0, [r7, #20]
 800ddb6:	4798      	blx	r3
    Application::getInstance()->draw();
 800ddb8:	f00b fb12 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	6813      	ldr	r3, [r2, #0]
 800ddc0:	3330      	adds	r3, #48	; 0x30
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4610      	mov	r0, r2
 800ddc6:	4798      	blx	r3
    return newPresenter;
 800ddc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	373c      	adds	r7, #60	; 0x3c
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd90      	pop	{r4, r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	080267ec 	.word	0x080267ec
 800ddd8:	08027ae8 	.word	0x08027ae8
 800dddc:	0802687c 	.word	0x0802687c
 800dde0:	080268c0 	.word	0x080268c0
 800dde4:	08026964 	.word	0x08026964

0800dde8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800dde8:	b590      	push	{r4, r7, lr}
 800ddea:	b08f      	sub	sp, #60	; 0x3c
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
 800ddf4:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	689a      	ldr	r2, [r3, #8]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	3320      	adds	r3, #32
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4610      	mov	r0, r2
 800de06:	4798      	blx	r3
 800de08:	4602      	mov	r2, r0
 800de0a:	f641 634f 	movw	r3, #7759	; 0x1e4f
 800de0e:	429a      	cmp	r2, r3
 800de10:	d805      	bhi.n	800de1e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800de12:	4b86      	ldr	r3, [pc, #536]	; (800e02c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800de14:	4a86      	ldr	r2, [pc, #536]	; (800e030 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800de16:	21a7      	movs	r1, #167	; 0xa7
 800de18:	4886      	ldr	r0, [pc, #536]	; (800e034 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800de1a:	f017 fc61 	bl	80256e0 <__assert_func>
 800de1e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	685a      	ldr	r2, [r3, #4]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	3320      	adds	r3, #32
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4610      	mov	r0, r2
 800de30:	4798      	blx	r3
 800de32:	4603      	mov	r3, r0
 800de34:	2b0f      	cmp	r3, #15
 800de36:	d805      	bhi.n	800de44 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800de38:	4b7f      	ldr	r3, [pc, #508]	; (800e038 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800de3a:	4a7d      	ldr	r2, [pc, #500]	; (800e030 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800de3c:	21a8      	movs	r1, #168	; 0xa8
 800de3e:	487d      	ldr	r0, [pc, #500]	; (800e034 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800de40:	f017 fc4e 	bl	80256e0 <__assert_func>
 800de44:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68da      	ldr	r2, [r3, #12]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	68db      	ldr	r3, [r3, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	3320      	adds	r3, #32
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4610      	mov	r0, r2
 800de56:	4798      	blx	r3
 800de58:	4603      	mov	r3, r0
 800de5a:	2b0b      	cmp	r3, #11
 800de5c:	d805      	bhi.n	800de6a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800de5e:	4b77      	ldr	r3, [pc, #476]	; (800e03c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800de60:	4a73      	ldr	r2, [pc, #460]	; (800e030 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800de62:	21a9      	movs	r1, #169	; 0xa9
 800de64:	4873      	ldr	r0, [pc, #460]	; (800e034 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800de66:	f017 fc3b 	bl	80256e0 <__assert_func>
 800de6a:	bf00      	nop
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	627b      	str	r3, [r7, #36]	; 0x24
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800de78:	f00b fab2 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800de7c:	4603      	mov	r3, r0
 800de7e:	4618      	mov	r0, r3
 800de80:	f00b faca 	bl	8019418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800de84:	6a3b      	ldr	r3, [r7, #32]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d008      	beq.n	800de9e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800de8c:	6a3b      	ldr	r3, [r7, #32]
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	6a3b      	ldr	r3, [r7, #32]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	330c      	adds	r3, #12
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4610      	mov	r0, r2
 800de9c:	4798      	blx	r3
    if (*currentTrans)
 800de9e:	6a3b      	ldr	r3, [r7, #32]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d007      	beq.n	800deb6 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	6a3b      	ldr	r3, [r7, #32]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4610      	mov	r0, r2
 800deb4:	4798      	blx	r3
    if (*currentScreen)
 800deb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d008      	beq.n	800ded0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800debe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	3314      	adds	r3, #20
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4610      	mov	r0, r2
 800dece:	4798      	blx	r3
    if (*currentPresenter)
 800ded0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d008      	beq.n	800deea <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800ded8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	3304      	adds	r3, #4
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4610      	mov	r0, r2
 800dee8:	4798      	blx	r3
    if (*currentScreen)
 800deea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d007      	beq.n	800df02 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4610      	mov	r0, r2
 800df00:	4798      	blx	r3
    if (*currentPresenter)
 800df02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d008      	beq.n	800df1c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800df0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	3308      	adds	r3, #8
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4610      	mov	r0, r2
 800df1a:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	2100      	movs	r1, #0
 800df22:	4618      	mov	r0, r3
 800df24:	f000 f9b8 	bl	800e298 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800df28:	4603      	mov	r3, r0
 800df2a:	4619      	mov	r1, r3
 800df2c:	200c      	movs	r0, #12
 800df2e:	f7fe f923 	bl	800c178 <_ZnwjPv>
 800df32:	4604      	mov	r4, r0
 800df34:	2c00      	cmp	r4, #0
 800df36:	d004      	beq.n	800df42 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800df38:	4620      	mov	r0, r4
 800df3a:	f7ff f839 	bl	800cfb0 <_ZN8touchgfx12NoTransitionC1Ev>
 800df3e:	4623      	mov	r3, r4
 800df40:	e000      	b.n	800df44 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800df42:	4623      	mov	r3, r4
 800df44:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	2100      	movs	r1, #0
 800df4c:	4618      	mov	r0, r3
 800df4e:	f000 fc2b 	bl	800e7a8 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>
 800df52:	4603      	mov	r3, r0
 800df54:	4619      	mov	r1, r3
 800df56:	f641 6050 	movw	r0, #7760	; 0x1e50
 800df5a:	f7fe f90d 	bl	800c178 <_ZnwjPv>
 800df5e:	4604      	mov	r4, r0
 800df60:	2c00      	cmp	r4, #0
 800df62:	d004      	beq.n	800df6e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800df64:	4620      	mov	r0, r4
 800df66:	f005 f965 	bl	8013234 <_ZN8PongViewC1Ev>
 800df6a:	4623      	mov	r3, r4
 800df6c:	e000      	b.n	800df70 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800df6e:	4623      	mov	r3, r4
 800df70:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	2100      	movs	r1, #0
 800df78:	4618      	mov	r0, r3
 800df7a:	f000 fc28 	bl	800e7ce <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>
 800df7e:	4603      	mov	r3, r0
 800df80:	4619      	mov	r1, r3
 800df82:	2010      	movs	r0, #16
 800df84:	f7fe f8f8 	bl	800c178 <_ZnwjPv>
 800df88:	4604      	mov	r4, r0
 800df8a:	2c00      	cmp	r4, #0
 800df8c:	d005      	beq.n	800df9a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800df8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df90:	4620      	mov	r0, r4
 800df92:	f005 f8dd 	bl	8013150 <_ZN13PongPresenterC1ER8PongView>
 800df96:	4623      	mov	r3, r4
 800df98:	e000      	b.n	800df9c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800df9a:	4623      	mov	r3, r4
 800df9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfa2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfa8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfae:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800dfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d002      	beq.n	800dfbc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800dfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb8:	3304      	adds	r3, #4
 800dfba:	e000      	b.n	800dfbe <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dfc2:	f7fe fc4f 	bl	800c864 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800dfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc8:	3304      	adds	r3, #4
 800dfca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7fe fcd4 	bl	800c97a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800dfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f000 fc0c 	bl	800e7f4 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>
 800dfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfde:	61fb      	str	r3, [r7, #28]
 800dfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe2:	61bb      	str	r3, [r7, #24]
 800dfe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfe6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	330c      	adds	r3, #12
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	69f8      	ldr	r0, [r7, #28]
 800dff2:	4798      	blx	r3
    newPresenter->activate();
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	69b8      	ldr	r0, [r7, #24]
 800dffc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800dffe:	6979      	ldr	r1, [r7, #20]
 800e000:	69f8      	ldr	r0, [r7, #28]
 800e002:	f00c fb1f 	bl	801a644 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	3310      	adds	r3, #16
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	6978      	ldr	r0, [r7, #20]
 800e010:	4798      	blx	r3
    Application::getInstance()->draw();
 800e012:	f00b f9e5 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800e016:	4602      	mov	r2, r0
 800e018:	6813      	ldr	r3, [r2, #0]
 800e01a:	3330      	adds	r3, #48	; 0x30
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4610      	mov	r0, r2
 800e020:	4798      	blx	r3
    return newPresenter;
 800e022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e024:	4618      	mov	r0, r3
 800e026:	373c      	adds	r7, #60	; 0x3c
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd90      	pop	{r4, r7, pc}
 800e02c:	080267ec 	.word	0x080267ec
 800e030:	08027c04 	.word	0x08027c04
 800e034:	0802687c 	.word	0x0802687c
 800e038:	080268c0 	.word	0x080268c0
 800e03c:	08026964 	.word	0x08026964

0800e040 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e040:	b590      	push	{r4, r7, lr}
 800e042:	b08f      	sub	sp, #60	; 0x3c
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
 800e04c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	689a      	ldr	r2, [r3, #8]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	3320      	adds	r3, #32
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4610      	mov	r0, r2
 800e05e:	4798      	blx	r3
 800e060:	4603      	mov	r3, r0
 800e062:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
 800e066:	d205      	bcs.n	800e074 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800e068:	4b86      	ldr	r3, [pc, #536]	; (800e284 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800e06a:	4a87      	ldr	r2, [pc, #540]	; (800e288 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800e06c:	21a7      	movs	r1, #167	; 0xa7
 800e06e:	4887      	ldr	r0, [pc, #540]	; (800e28c <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800e070:	f017 fb36 	bl	80256e0 <__assert_func>
 800e074:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	685a      	ldr	r2, [r3, #4]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	3320      	adds	r3, #32
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4610      	mov	r0, r2
 800e086:	4798      	blx	r3
 800e088:	4603      	mov	r3, r0
 800e08a:	2b0f      	cmp	r3, #15
 800e08c:	d805      	bhi.n	800e09a <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800e08e:	4b80      	ldr	r3, [pc, #512]	; (800e290 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800e090:	4a7d      	ldr	r2, [pc, #500]	; (800e288 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800e092:	21a8      	movs	r1, #168	; 0xa8
 800e094:	487d      	ldr	r0, [pc, #500]	; (800e28c <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800e096:	f017 fb23 	bl	80256e0 <__assert_func>
 800e09a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	68da      	ldr	r2, [r3, #12]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	3320      	adds	r3, #32
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	4798      	blx	r3
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b4f      	cmp	r3, #79	; 0x4f
 800e0b2:	d805      	bhi.n	800e0c0 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800e0b4:	4b77      	ldr	r3, [pc, #476]	; (800e294 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800e0b6:	4a74      	ldr	r2, [pc, #464]	; (800e288 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800e0b8:	21a9      	movs	r1, #169	; 0xa9
 800e0ba:	4874      	ldr	r0, [pc, #464]	; (800e28c <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800e0bc:	f017 fb10 	bl	80256e0 <__assert_func>
 800e0c0:	bf00      	nop
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e0ce:	f00b f987 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f00b f99f 	bl	8019418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e0da:	6a3b      	ldr	r3, [r7, #32]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d008      	beq.n	800e0f4 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	6a3b      	ldr	r3, [r7, #32]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	330c      	adds	r3, #12
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	4798      	blx	r3
    if (*currentTrans)
 800e0f4:	6a3b      	ldr	r3, [r7, #32]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d007      	beq.n	800e10c <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800e0fc:	6a3b      	ldr	r3, [r7, #32]
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	6a3b      	ldr	r3, [r7, #32]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4610      	mov	r0, r2
 800e10a:	4798      	blx	r3
    if (*currentScreen)
 800e10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d008      	beq.n	800e126 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	3314      	adds	r3, #20
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	4610      	mov	r0, r2
 800e124:	4798      	blx	r3
    if (*currentPresenter)
 800e126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d008      	beq.n	800e140 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800e12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	3304      	adds	r3, #4
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4610      	mov	r0, r2
 800e13e:	4798      	blx	r3
    if (*currentScreen)
 800e140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d007      	beq.n	800e158 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800e148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4610      	mov	r0, r2
 800e156:	4798      	blx	r3
    if (*currentPresenter)
 800e158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d008      	beq.n	800e172 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	3308      	adds	r3, #8
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4610      	mov	r0, r2
 800e170:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	2100      	movs	r1, #0
 800e178:	4618      	mov	r0, r3
 800e17a:	f000 f9bf 	bl	800e4fc <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800e17e:	4603      	mov	r3, r0
 800e180:	4619      	mov	r1, r3
 800e182:	2050      	movs	r0, #80	; 0x50
 800e184:	f7fd fff8 	bl	800c178 <_ZnwjPv>
 800e188:	4604      	mov	r4, r0
 800e18a:	2c00      	cmp	r4, #0
 800e18c:	d005      	beq.n	800e19a <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800e18e:	2114      	movs	r1, #20
 800e190:	4620      	mov	r0, r4
 800e192:	f000 fa1d 	bl	800e5d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800e196:	4623      	mov	r3, r4
 800e198:	e000      	b.n	800e19c <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800e19a:	4623      	mov	r3, r4
 800e19c:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f000 fb33 	bl	800e810 <_ZN8touchgfx17AbstractPartition2atI11galleryViewEERT_t>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	f44f 7092 	mov.w	r0, #292	; 0x124
 800e1b2:	f7fd ffe1 	bl	800c178 <_ZnwjPv>
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	2c00      	cmp	r4, #0
 800e1ba:	d004      	beq.n	800e1c6 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800e1bc:	4620      	mov	r0, r4
 800e1be:	f004 fd1b 	bl	8012bf8 <_ZN11galleryViewC1Ev>
 800e1c2:	4623      	mov	r3, r4
 800e1c4:	e000      	b.n	800e1c8 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800e1c6:	4623      	mov	r3, r4
 800e1c8:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	2100      	movs	r1, #0
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f000 fb30 	bl	800e836 <_ZN8touchgfx17AbstractPartition2atI16galleryPresenterEERT_t>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	4619      	mov	r1, r3
 800e1da:	2010      	movs	r0, #16
 800e1dc:	f7fd ffcc 	bl	800c178 <_ZnwjPv>
 800e1e0:	4604      	mov	r4, r0
 800e1e2:	2c00      	cmp	r4, #0
 800e1e4:	d005      	beq.n	800e1f2 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e1e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f004 fcad 	bl	8012b48 <_ZN16galleryPresenterC1ER11galleryView>
 800e1ee:	4623      	mov	r3, r4
 800e1f0:	e000      	b.n	800e1f4 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800e1f2:	4623      	mov	r3, r4
 800e1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1fa:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e200:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e206:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d002      	beq.n	800e214 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800e20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e210:	3304      	adds	r3, #4
 800e212:	e000      	b.n	800e216 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800e214:	2300      	movs	r3, #0
 800e216:	4619      	mov	r1, r3
 800e218:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e21a:	f7fe fb23 	bl	800c864 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e220:	3304      	adds	r3, #4
 800e222:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e224:	4618      	mov	r0, r3
 800e226:	f7fe fba8 	bl	800c97a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e22e:	4618      	mov	r0, r3
 800e230:	f000 fb14 	bl	800e85c <_ZN8touchgfx4ViewI16galleryPresenterE4bindERS1_>
 800e234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e236:	61fb      	str	r3, [r7, #28]
 800e238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23a:	61bb      	str	r3, [r7, #24]
 800e23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e23e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	330c      	adds	r3, #12
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	69f8      	ldr	r0, [r7, #28]
 800e24a:	4798      	blx	r3
    newPresenter->activate();
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	69b8      	ldr	r0, [r7, #24]
 800e254:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e256:	6979      	ldr	r1, [r7, #20]
 800e258:	69f8      	ldr	r0, [r7, #28]
 800e25a:	f00c f9f3 	bl	801a644 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	3310      	adds	r3, #16
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	6978      	ldr	r0, [r7, #20]
 800e268:	4798      	blx	r3
    Application::getInstance()->draw();
 800e26a:	f00b f8b9 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800e26e:	4602      	mov	r2, r0
 800e270:	6813      	ldr	r3, [r2, #0]
 800e272:	3330      	adds	r3, #48	; 0x30
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4610      	mov	r0, r2
 800e278:	4798      	blx	r3
    return newPresenter;
 800e27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	373c      	adds	r7, #60	; 0x3c
 800e280:	46bd      	mov	sp, r7
 800e282:	bd90      	pop	{r4, r7, pc}
 800e284:	080267ec 	.word	0x080267ec
 800e288:	08027d04 	.word	0x08027d04
 800e28c:	0802687c 	.word	0x0802687c
 800e290:	080268c0 	.word	0x080268c0
 800e294:	08026964 	.word	0x08026964

0800e298 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	3324      	adds	r3, #36	; 0x24
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	887a      	ldrh	r2, [r7, #2]
 800e2ae:	4611      	mov	r1, r2
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	4798      	blx	r3
 800e2b4:	4603      	mov	r3, r0
    }
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3708      	adds	r7, #8
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b082      	sub	sp, #8
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	3324      	adds	r3, #36	; 0x24
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	887a      	ldrh	r2, [r7, #2]
 800e2d4:	4611      	mov	r1, r2
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	4798      	blx	r3
 800e2da:	4603      	mov	r3, r0
    }
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3708      	adds	r7, #8
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	3324      	adds	r3, #36	; 0x24
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	887a      	ldrh	r2, [r7, #2]
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	4798      	blx	r3
 800e300:	4603      	mov	r3, r0
    }
 800e302:	4618      	mov	r0, r3
 800e304:	3708      	adds	r7, #8
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800e30a:	b480      	push	{r7}
 800e30c:	b083      	sub	sp, #12
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	683a      	ldr	r2, [r7, #0]
 800e318:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e31a:	bf00      	nop
 800e31c:	370c      	adds	r7, #12
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr

0800e326 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800e326:	b580      	push	{r7, lr}
 800e328:	b082      	sub	sp, #8
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6078      	str	r0, [r7, #4]
 800e32e:	460b      	mov	r3, r1
 800e330:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	3324      	adds	r3, #36	; 0x24
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	887a      	ldrh	r2, [r7, #2]
 800e33c:	4611      	mov	r1, r2
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	4798      	blx	r3
 800e342:	4603      	mov	r3, r0
    }
 800e344:	4618      	mov	r0, r3
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	4a05      	ldr	r2, [pc, #20]	; (800e36c <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	601a      	str	r2, [r3, #0]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7fe fb2d 	bl	800c9bc <_ZN8touchgfx6WidgetD1Ev>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	4618      	mov	r0, r3
 800e366:	3708      	adds	r7, #8
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	08029af4 	.word	0x08029af4

0800e370 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7ff ffe7 	bl	800e34c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800e37e:	212c      	movs	r1, #44	; 0x2c
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f017 f981 	bl	8025688 <_ZdlPvj>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4618      	mov	r0, r3
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	4a05      	ldr	r2, [pc, #20]	; (800e3b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	601a      	str	r2, [r3, #0]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f000 fad3 	bl	800e94c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3708      	adds	r7, #8
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	08027344 	.word	0x08027344

0800e3b4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f7ff ffe7 	bl	800e390 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800e3c2:	2110      	movs	r1, #16
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f017 f95f 	bl	8025688 <_ZdlPvj>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800e3d4:	b590      	push	{r4, r7, lr}
 800e3d6:	b087      	sub	sp, #28
 800e3d8:	af02      	add	r7, sp, #8
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7fd ff6c 	bl	800c2c0 <_ZN8touchgfx10TransitionC1Ev>
 800e3e8:	4a3f      	ldr	r2, [pc, #252]	; (800e4e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	601a      	str	r2, [r3, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	330c      	adds	r3, #12
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f009 f952 	bl	801769c <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f103 020c 	add.w	r2, r3, #12
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	639a      	str	r2, [r3, #56]	; 0x38
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800e408:	4a38      	ldr	r2, [pc, #224]	; (800e4ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 800e40a:	f107 0308 	add.w	r3, r7, #8
 800e40e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e412:	e883 0003 	stmia.w	r3, {r0, r1}
 800e416:	f107 0308 	add.w	r3, r7, #8
 800e41a:	cb0c      	ldmia	r3, {r2, r3}
 800e41c:	6879      	ldr	r1, [r7, #4]
 800e41e:	4620      	mov	r0, r4
 800e420:	f000 fa74 	bl	800e90c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2202      	movs	r2, #2
 800e428:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	78fa      	ldrb	r2, [r7, #3]
 800e430:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800e444:	4b2a      	ldr	r3, [pc, #168]	; (800e4f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d047      	beq.n	800e4dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f103 000c 	add.w	r0, r3, #12
 800e452:	4b28      	ldr	r3, [pc, #160]	; (800e4f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800e454:	881b      	ldrh	r3, [r3, #0]
 800e456:	b21a      	sxth	r2, r3
 800e458:	4b27      	ldr	r3, [pc, #156]	; (800e4f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800e45a:	881b      	ldrh	r3, [r3, #0]
 800e45c:	b21b      	sxth	r3, r3
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	4613      	mov	r3, r2
 800e462:	2200      	movs	r2, #0
 800e464:	2100      	movs	r1, #0
 800e466:	f7fe f819 	bl	800c49c <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	330c      	adds	r3, #12
 800e46e:	4618      	mov	r0, r3
 800e470:	f009 f897 	bl	80175a2 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e47a:	2b03      	cmp	r3, #3
 800e47c:	d82a      	bhi.n	800e4d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 800e47e:	a201      	add	r2, pc, #4	; (adr r2, 800e484 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 800e480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e484:	0800e4b5 	.word	0x0800e4b5
 800e488:	0800e4c3 	.word	0x0800e4c3
 800e48c:	0800e495 	.word	0x0800e495
 800e490:	0800e4a7 	.word	0x0800e4a7
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 800e494:	4b17      	ldr	r3, [pc, #92]	; (800e4f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800e496:	881b      	ldrh	r3, [r3, #0]
 800e498:	425b      	negs	r3, r3
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	b21a      	sxth	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e4a4:	e01a      	b.n	800e4dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 800e4a6:	4b13      	ldr	r3, [pc, #76]	; (800e4f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	b21a      	sxth	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e4b2:	e013      	b.n	800e4dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 800e4b4:	4b10      	ldr	r3, [pc, #64]	; (800e4f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800e4b6:	881b      	ldrh	r3, [r3, #0]
 800e4b8:	b21a      	sxth	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e4c0:	e00c      	b.n	800e4dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800e4c2:	4b0d      	ldr	r3, [pc, #52]	; (800e4f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800e4c4:	881b      	ldrh	r3, [r3, #0]
 800e4c6:	425b      	negs	r3, r3
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	b21a      	sxth	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e4d2:	e003      	b.n	800e4dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 800e4da:	bf00      	nop
            }
        }
    }
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3714      	adds	r7, #20
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd90      	pop	{r4, r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	0802731c 	.word	0x0802731c
 800e4ec:	08026a08 	.word	0x08026a08
 800e4f0:	2000b36b 	.word	0x2000b36b
 800e4f4:	2000b360 	.word	0x2000b360
 800e4f8:	2000b362 	.word	0x2000b362

0800e4fc <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	460b      	mov	r3, r1
 800e506:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	3324      	adds	r3, #36	; 0x24
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	887a      	ldrh	r2, [r7, #2]
 800e512:	4611      	mov	r1, r2
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	4798      	blx	r3
 800e518:	4603      	mov	r3, r0
    }
 800e51a:	4618      	mov	r0, r3
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
	...

0800e524 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	4a05      	ldr	r2, [pc, #20]	; (800e544 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	601a      	str	r2, [r3, #0]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	4618      	mov	r0, r3
 800e536:	f000 fa09 	bl	800e94c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4618      	mov	r0, r3
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	080273ec 	.word	0x080273ec

0800e548 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f7ff ffe7 	bl	800e524 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800e556:	2110      	movs	r1, #16
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f017 f895 	bl	8025688 <_ZdlPvj>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4618      	mov	r0, r3
 800e562:	3708      	adds	r7, #8
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
public:
    /**
     * A Widget that returns a solid rect of the same size as the application (i.e. the size
     * of the display).
     */
    class FullSolidRect : public Widget
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4618      	mov	r0, r3
 800e574:	f7fe fa10 	bl	800c998 <_ZN8touchgfx6WidgetC1Ev>
 800e578:	4a03      	ldr	r2, [pc, #12]	; (800e588 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	601a      	str	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4618      	mov	r0, r3
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	08027384 	.word	0x08027384

0800e58c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	4a05      	ldr	r2, [pc, #20]	; (800e5ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	601a      	str	r2, [r3, #0]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fe fa0d 	bl	800c9bc <_ZN8touchgfx6WidgetD1Ev>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3708      	adds	r7, #8
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	08027384 	.word	0x08027384

0800e5b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f7ff ffe7 	bl	800e58c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800e5be:	2128      	movs	r1, #40	; 0x28
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f017 f861 	bl	8025688 <_ZdlPvj>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3708      	adds	r7, #8
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 800e5d0:	b590      	push	{r4, r7, lr}
 800e5d2:	b087      	sub	sp, #28
 800e5d4:	af02      	add	r7, sp, #8
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	460b      	mov	r3, r1
 800e5da:	70fb      	strb	r3, [r7, #3]
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          movedToPos(0),
          solid()
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7fd fe6e 	bl	800c2c0 <_ZN8touchgfx10TransitionC1Ev>
 800e5e4:	4a38      	ldr	r2, [pc, #224]	; (800e6c8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf8>)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	601a      	str	r2, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f103 040c 	add.w	r4, r3, #12
 800e5f0:	4a36      	ldr	r2, [pc, #216]	; (800e6cc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xfc>)
 800e5f2:	f107 0308 	add.w	r3, r7, #8
 800e5f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5fa:	e883 0003 	stmia.w	r3, {r0, r1}
 800e5fe:	f107 0308 	add.w	r3, r7, #8
 800e602:	cb0c      	ldmia	r3, {r2, r3}
 800e604:	6879      	ldr	r1, [r7, #4]
 800e606:	4620      	mov	r0, r4
 800e608:	f000 f9f2 	bl	800e9f0 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2202      	movs	r2, #2
 800e610:	771a      	strb	r2, [r3, #28]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	78fa      	ldrb	r2, [r7, #3]
 800e616:	775a      	strb	r2, [r3, #29]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	779a      	strb	r2, [r3, #30]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2200      	movs	r2, #0
 800e622:	845a      	strh	r2, [r3, #34]	; 0x22
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	849a      	strh	r2, [r3, #36]	; 0x24
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	3328      	adds	r3, #40	; 0x28
 800e62e:	2228      	movs	r2, #40	; 0x28
 800e630:	2100      	movs	r1, #0
 800e632:	4618      	mov	r0, r3
 800e634:	f017 f8dd 	bl	80257f2 <memset>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	3328      	adds	r3, #40	; 0x28
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7ff ff93 	bl	800e568 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (direction)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	7f1b      	ldrb	r3, [r3, #28]
 800e646:	2b03      	cmp	r3, #3
 800e648:	d826      	bhi.n	800e698 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc8>
 800e64a:	a201      	add	r2, pc, #4	; (adr r2, 800e650 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800e64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e650:	0800e67d 	.word	0x0800e67d
 800e654:	0800e689 	.word	0x0800e689
 800e658:	0800e661 	.word	0x0800e661
 800e65c:	0800e671 	.word	0x0800e671
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 800e660:	4b1b      	ldr	r3, [pc, #108]	; (800e6d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800e662:	881b      	ldrh	r3, [r3, #0]
 800e664:	425b      	negs	r3, r3
 800e666:	b29b      	uxth	r3, r3
 800e668:	b21a      	sxth	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	841a      	strh	r2, [r3, #32]
            break;
 800e66e:	e017      	b.n	800e6a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800e670:	4b17      	ldr	r3, [pc, #92]	; (800e6d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800e672:	881b      	ldrh	r3, [r3, #0]
 800e674:	b21a      	sxth	r2, r3
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	841a      	strh	r2, [r3, #32]
            break;
 800e67a:	e011      	b.n	800e6a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case NORTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 800e67c:	4b15      	ldr	r3, [pc, #84]	; (800e6d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800e67e:	881b      	ldrh	r3, [r3, #0]
 800e680:	b21a      	sxth	r2, r3
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	841a      	strh	r2, [r3, #32]
            break;
 800e686:	e00b      	b.n	800e6a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
 800e688:	4b12      	ldr	r3, [pc, #72]	; (800e6d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800e68a:	881b      	ldrh	r3, [r3, #0]
 800e68c:	425b      	negs	r3, r3
 800e68e:	b29b      	uxth	r3, r3
 800e690:	b21a      	sxth	r2, r3
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	841a      	strh	r2, [r3, #32]
            break;
 800e696:	e003      	b.n	800e6a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        default:
            done = true;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2201      	movs	r2, #1
 800e69c:	721a      	strb	r2, [r3, #8]
            // Nothing to do here
            break;
 800e69e:	bf00      	nop
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800e6a6:	4b0a      	ldr	r3, [pc, #40]	; (800e6d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800e6a8:	881b      	ldrh	r3, [r3, #0]
 800e6aa:	b21a      	sxth	r2, r3
 800e6ac:	4b09      	ldr	r3, [pc, #36]	; (800e6d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800e6ae:	881b      	ldrh	r3, [r3, #0]
 800e6b0:	b21b      	sxth	r3, r3
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	f7fd feef 	bl	800c49c <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3714      	adds	r7, #20
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd90      	pop	{r4, r7, pc}
 800e6c8:	0802735c 	.word	0x0802735c
 800e6cc:	08026a10 	.word	0x08026a10
 800e6d0:	2000b360 	.word	0x2000b360
 800e6d4:	2000b362 	.word	0x2000b362

0800e6d8 <_ZN8touchgfx17AbstractPartition2atI9MusicViewEERT_t>:
    T& at(const uint16_t index)
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	3324      	adds	r3, #36	; 0x24
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	887a      	ldrh	r2, [r7, #2]
 800e6ee:	4611      	mov	r1, r2
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	4798      	blx	r3
 800e6f4:	4603      	mov	r3, r0
    }
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <_ZN8touchgfx17AbstractPartition2atI14MusicPresenterEERT_t>:
    T& at(const uint16_t index)
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b082      	sub	sp, #8
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
 800e706:	460b      	mov	r3, r1
 800e708:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	3324      	adds	r3, #36	; 0x24
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	887a      	ldrh	r2, [r7, #2]
 800e714:	4611      	mov	r1, r2
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	4798      	blx	r3
 800e71a:	4603      	mov	r3, r0
    }
 800e71c:	4618      	mov	r0, r3
 800e71e:	3708      	adds	r7, #8
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <_ZN8touchgfx4ViewI14MusicPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	683a      	ldr	r2, [r7, #0]
 800e732:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e734:	bf00      	nop
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <_ZN8touchgfx17AbstractPartition2atI12gameoverViewEERT_t>:
    T& at(const uint16_t index)
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	460b      	mov	r3, r1
 800e74a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	3324      	adds	r3, #36	; 0x24
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	887a      	ldrh	r2, [r7, #2]
 800e756:	4611      	mov	r1, r2
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	4798      	blx	r3
 800e75c:	4603      	mov	r3, r0
    }
 800e75e:	4618      	mov	r0, r3
 800e760:	3708      	adds	r7, #8
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <_ZN8touchgfx17AbstractPartition2atI17gameoverPresenterEERT_t>:
    T& at(const uint16_t index)
 800e766:	b580      	push	{r7, lr}
 800e768:	b082      	sub	sp, #8
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
 800e76e:	460b      	mov	r3, r1
 800e770:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3324      	adds	r3, #36	; 0x24
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	887a      	ldrh	r2, [r7, #2]
 800e77c:	4611      	mov	r1, r2
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	4798      	blx	r3
 800e782:	4603      	mov	r3, r0
    }
 800e784:	4618      	mov	r0, r3
 800e786:	3708      	adds	r7, #8
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <_ZN8touchgfx4ViewI17gameoverPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	683a      	ldr	r2, [r7, #0]
 800e79a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e79c:	bf00      	nop
 800e79e:	370c      	adds	r7, #12
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr

0800e7a8 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>:
    T& at(const uint16_t index)
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	3324      	adds	r3, #36	; 0x24
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	887a      	ldrh	r2, [r7, #2]
 800e7be:	4611      	mov	r1, r2
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	4798      	blx	r3
 800e7c4:	4603      	mov	r3, r0
    }
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3708      	adds	r7, #8
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}

0800e7ce <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>:
    T& at(const uint16_t index)
 800e7ce:	b580      	push	{r7, lr}
 800e7d0:	b082      	sub	sp, #8
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	3324      	adds	r3, #36	; 0x24
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	887a      	ldrh	r2, [r7, #2]
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	4798      	blx	r3
 800e7ea:	4603      	mov	r3, r0
    }
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	683a      	ldr	r2, [r7, #0]
 800e802:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e804:	bf00      	nop
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <_ZN8touchgfx17AbstractPartition2atI11galleryViewEERT_t>:
    T& at(const uint16_t index)
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	460b      	mov	r3, r1
 800e81a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	3324      	adds	r3, #36	; 0x24
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	887a      	ldrh	r2, [r7, #2]
 800e826:	4611      	mov	r1, r2
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	4798      	blx	r3
 800e82c:	4603      	mov	r3, r0
    }
 800e82e:	4618      	mov	r0, r3
 800e830:	3708      	adds	r7, #8
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <_ZN8touchgfx17AbstractPartition2atI16galleryPresenterEERT_t>:
    T& at(const uint16_t index)
 800e836:	b580      	push	{r7, lr}
 800e838:	b082      	sub	sp, #8
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
 800e83e:	460b      	mov	r3, r1
 800e840:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	3324      	adds	r3, #36	; 0x24
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	887a      	ldrh	r2, [r7, #2]
 800e84c:	4611      	mov	r1, r2
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	4798      	blx	r3
 800e852:	4603      	mov	r3, r0
    }
 800e854:	4618      	mov	r0, r3
 800e856:	3708      	adds	r7, #8
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <_ZN8touchgfx4ViewI16galleryPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	683a      	ldr	r2, [r7, #0]
 800e86a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e86c:	bf00      	nop
 800e86e:	370c      	adds	r7, #12
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e886:	683a      	ldr	r2, [r7, #0]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d02a      	beq.n	800e8e2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e892:	2b03      	cmp	r3, #3
 800e894:	d820      	bhi.n	800e8d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 800e896:	a201      	add	r2, pc, #4	; (adr r2, 800e89c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 800e898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89c:	0800e8c3 	.word	0x0800e8c3
 800e8a0:	0800e8c3 	.word	0x0800e8c3
 800e8a4:	0800e8ad 	.word	0x0800e8ad
 800e8a8:	0800e8ad 	.word	0x0800e8ad
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	3354      	adds	r3, #84	; 0x54
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	6838      	ldr	r0, [r7, #0]
 800e8be:	4798      	blx	r3
            break;
 800e8c0:	e010      	b.n	800e8e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3354      	adds	r3, #84	; 0x54
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800e8d0:	2100      	movs	r1, #0
 800e8d2:	6838      	ldr	r0, [r7, #0]
 800e8d4:	4798      	blx	r3
            break;
 800e8d6:	e005      	b.n	800e8e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2201      	movs	r2, #1
 800e8dc:	721a      	strb	r2, [r3, #8]
            break;
 800e8de:	bf00      	nop
 800e8e0:	e000      	b.n	800e8e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 800e8e2:	bf00      	nop
        }
    }
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop

0800e8ec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	4a04      	ldr	r2, [pc, #16]	; (800e908 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	601a      	str	r2, [r3, #0]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	370c      	adds	r7, #12
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr
 800e908:	08027404 	.word	0x08027404

0800e90c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	4639      	mov	r1, r7
 800e918:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	4618      	mov	r0, r3
 800e920:	f7ff ffe4 	bl	800e8ec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800e924:	4a08      	ldr	r2, [pc, #32]	; (800e948 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	3308      	adds	r3, #8
 800e934:	463a      	mov	r2, r7
 800e936:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e93a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	4618      	mov	r0, r3
 800e942:	3710      	adds	r7, #16
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	08027344 	.word	0x08027344

0800e94c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
    }
 800e954:	4a04      	ldr	r2, [pc, #16]	; (800e968 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	601a      	str	r2, [r3, #0]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4618      	mov	r0, r3
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr
 800e968:	08027404 	.word	0x08027404

0800e96c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
    }
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f7ff ffe9 	bl	800e94c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e97a:	2104      	movs	r1, #4
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f016 fe83 	bl	8025688 <_ZdlPvj>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4618      	mov	r0, r3
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable to the new position as calculated in handleTickEvent().
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
    {
        switch (direction)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	7f1b      	ldrb	r3, [r3, #28]
 800e99a:	2b03      	cmp	r3, #3
 800e99c:	d820      	bhi.n	800e9e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x54>
 800e99e:	a201      	add	r2, pc, #4	; (adr r2, 800e9a4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x18>)
 800e9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a4:	0800e9cb 	.word	0x0800e9cb
 800e9a8:	0800e9cb 	.word	0x0800e9cb
 800e9ac:	0800e9b5 	.word	0x0800e9b5
 800e9b0:	0800e9b5 	.word	0x0800e9b5
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	3354      	adds	r3, #84	; 0x54
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	6838      	ldr	r0, [r7, #0]
 800e9c6:	4798      	blx	r3
            break;
 800e9c8:	e00e      	b.n	800e9e8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	3354      	adds	r3, #84	; 0x54
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800e9d8:	2100      	movs	r1, #0
 800e9da:	6838      	ldr	r0, [r7, #0]
 800e9dc:	4798      	blx	r3
            break;
 800e9de:	e003      	b.n	800e9e8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	721a      	strb	r2, [r3, #8]
            break;
 800e9e6:	bf00      	nop
        }
    }
 800e9e8:	bf00      	nop
 800e9ea:	3708      	adds	r7, #8
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}

0800e9f0 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b084      	sub	sp, #16
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	4639      	mov	r1, r7
 800e9fc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7ff ff72 	bl	800e8ec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800ea08:	4a08      	ldr	r2, [pc, #32]	; (800ea2c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	68ba      	ldr	r2, [r7, #8]
 800ea12:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	3308      	adds	r3, #8
 800ea18:	463a      	mov	r2, r7
 800ea1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea1e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	4618      	mov	r0, r3
 800ea26:	3710      	adds	r7, #16
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	080273ec 	.word	0x080273ec

0800ea30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	4a0a      	ldr	r2, [pc, #40]	; (800ea64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	601a      	str	r2, [r3, #0]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	333c      	adds	r3, #60	; 0x3c
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7ff fca4 	bl	800e390 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	330c      	adds	r3, #12
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7ff fc7d 	bl	800e34c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fd fc49 	bl	800c2ec <_ZN8touchgfx10TransitionD1Ev>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3708      	adds	r7, #8
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	0802731c 	.word	0x0802731c

0800ea68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f7ff ffdd 	bl	800ea30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 800ea76:	2154      	movs	r1, #84	; 0x54
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f016 fe05 	bl	8025688 <_ZdlPvj>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	4618      	mov	r0, r3
 800ea82:	3708      	adds	r7, #8
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	4a0a      	ldr	r2, [pc, #40]	; (800eabc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	601a      	str	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	3328      	adds	r3, #40	; 0x28
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7ff fd76 	bl	800e58c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	330c      	adds	r3, #12
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7ff fd3d 	bl	800e524 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7fd fc1d 	bl	800c2ec <_ZN8touchgfx10TransitionD1Ev>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	4618      	mov	r0, r3
 800eab6:	3708      	adds	r7, #8
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	0802735c 	.word	0x0802735c

0800eac0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f7ff ffdd 	bl	800ea88 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 800eace:	2150      	movs	r1, #80	; 0x50
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f016 fdd9 	bl	8025688 <_ZdlPvj>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4618      	mov	r0, r3
 800eada:	3708      	adds	r7, #8
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <_ZN8touchgfx12NoTransitionD1Ev>:
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	4a05      	ldr	r2, [pc, #20]	; (800eb00 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	601a      	str	r2, [r3, #0]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fd fbfb 	bl	800c2ec <_ZN8touchgfx10TransitionD1Ev>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	08027484 	.word	0x08027484

0800eb04 <_ZN8touchgfx12NoTransitionD0Ev>:
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f7ff ffe7 	bl	800eae0 <_ZN8touchgfx12NoTransitionD1Ev>
 800eb12:	210c      	movs	r1, #12
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f016 fdb7 	bl	8025688 <_ZdlPvj>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3708      	adds	r7, #8
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	4a05      	ldr	r2, [pc, #20]	; (800eb44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	601a      	str	r2, [r3, #0]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fd fc43 	bl	800c3c0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3708      	adds	r7, #8
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}
 800eb44:	080274e8 	.word	0x080274e8

0800eb48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f7ff ffe7 	bl	800eb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800eb56:	2110      	movs	r1, #16
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f016 fd95 	bl	8025688 <_ZdlPvj>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	4618      	mov	r0, r3
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800eb70:	4b59      	ldr	r3, [pc, #356]	; (800ecd8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	f083 0301 	eor.w	r3, r3, #1
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d003      	beq.n	800eb86 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2201      	movs	r2, #1
 800eb82:	721a      	strb	r2, [r3, #8]
            return;
 800eb84:	e0a5      	b.n	800ecd2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fd fbcf 	bl	800c32c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800eb94:	3301      	adds	r3, #1
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d82f      	bhi.n	800ec0e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ebb4:	b298      	uxth	r0, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ebc2:	b29b      	uxth	r3, r3
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	f00b fd43 	bl	801a650 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	461a      	mov	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	f003 0301 	and.w	r3, r3, #1
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d01b      	beq.n	800ec1e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800ebf4:	2a00      	cmp	r2, #0
 800ebf6:	dd01      	ble.n	800ebfc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	e001      	b.n	800ec00 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 800ebfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec00:	4413      	add	r3, r2
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	b21a      	sxth	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800ec0c:	e007      	b.n	800ec1e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2201      	movs	r2, #1
 800ec12:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2200      	movs	r2, #0
 800ec18:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 800ec1c:	e059      	b.n	800ecd2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ec24:	2b03      	cmp	r3, #3
 800ec26:	d845      	bhi.n	800ecb4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 800ec28:	a201      	add	r2, pc, #4	; (adr r2, 800ec30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 800ec2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec2e:	bf00      	nop
 800ec30:	0800ec7b 	.word	0x0800ec7b
 800ec34:	0800ec7b 	.word	0x0800ec7b
 800ec38:	0800ec41 	.word	0x0800ec41
 800ec3c:	0800ec41 	.word	0x0800ec41
            calculatedValue -= snapshot.getX();
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	330c      	adds	r3, #12
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fd fc56 	bl	800c4f6 <_ZNK8touchgfx8Drawable4getXEv>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	b28b      	uxth	r3, r1
 800ec58:	1ad3      	subs	r3, r2, r3
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	b21a      	sxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f103 000c 	add.w	r0, r3, #12
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ec70:	2200      	movs	r2, #0
 800ec72:	4619      	mov	r1, r3
 800ec74:	f00b f806 	bl	8019c84 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800ec78:	e020      	b.n	800ecbc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	330c      	adds	r3, #12
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fd fc46 	bl	800c510 <_ZNK8touchgfx8Drawable4getYEv>
 800ec84:	4603      	mov	r3, r0
 800ec86:	4619      	mov	r1, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ec8e:	b29a      	uxth	r2, r3
 800ec90:	b28b      	uxth	r3, r1
 800ec92:	1ad3      	subs	r3, r2, r3
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	b21a      	sxth	r2, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f103 000c 	add.w	r0, r3, #12
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ecaa:	461a      	mov	r2, r3
 800ecac:	2100      	movs	r1, #0
 800ecae:	f00a ffe9 	bl	8019c84 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800ecb2:	e003      	b.n	800ecbc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	721a      	strb	r2, [r3, #8]
            break;
 800ecba:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6858      	ldr	r0, [r3, #4]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	3378      	adds	r3, #120	; 0x78
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	323c      	adds	r2, #60	; 0x3c
 800ecce:	4611      	mov	r1, r2
 800ecd0:	4798      	blx	r3
    }
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	2000b36b 	.word	0x2000b36b

0800ecdc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800ece4:	4b0b      	ldr	r3, [pc, #44]	; (800ed14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00e      	beq.n	800ed0a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d00a      	beq.n	800ed0a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6858      	ldr	r0, [r3, #4]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	3364      	adds	r3, #100	; 0x64
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	320c      	adds	r2, #12
 800ed06:	4611      	mov	r1, r2
 800ed08:	4798      	blx	r3
    }
 800ed0a:	bf00      	nop
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	2000b36b 	.word	0x2000b36b

0800ed18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b088      	sub	sp, #32
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800ed20:	4b1a      	ldr	r3, [pc, #104]	; (800ed8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d02d      	beq.n	800ed84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fd fb12 	bl	800c354 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800ed30:	4a17      	ldr	r2, [pc, #92]	; (800ed90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 800ed32:	f107 0318 	add.w	r3, r7, #24
 800ed36:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed3a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed3e:	f107 0008 	add.w	r0, r7, #8
 800ed42:	f107 0318 	add.w	r3, r7, #24
 800ed46:	cb0c      	ldmia	r3, {r2, r3}
 800ed48:	6879      	ldr	r1, [r7, #4]
 800ed4a:	f7ff fddf 	bl	800e90c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	685a      	ldr	r2, [r3, #4]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	3378      	adds	r3, #120	; 0x78
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f107 0108 	add.w	r1, r7, #8
 800ed60:	4610      	mov	r0, r2
 800ed62:	4798      	blx	r3
            screenContainer->add(snapshot);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6858      	ldr	r0, [r3, #4]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	3360      	adds	r3, #96	; 0x60
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	320c      	adds	r2, #12
 800ed76:	4611      	mov	r1, r2
 800ed78:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800ed7a:	f107 0308 	add.w	r3, r7, #8
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7ff fb06 	bl	800e390 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800ed84:	bf00      	nop
 800ed86:	3720      	adds	r7, #32
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	2000b36b 	.word	0x2000b36b
 800ed90:	08026a18 	.word	0x08026a18

0800ed94 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
        switch (direction)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800eda4:	2b03      	cmp	r3, #3
 800eda6:	d83b      	bhi.n	800ee20 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 800eda8:	a201      	add	r2, pc, #4	; (adr r2, 800edb0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 800edaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edae:	bf00      	nop
 800edb0:	0800edf1 	.word	0x0800edf1
 800edb4:	0800ee0b 	.word	0x0800ee0b
 800edb8:	0800edc1 	.word	0x0800edc1
 800edbc:	0800edd7 	.word	0x0800edd7
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	3354      	adds	r3, #84	; 0x54
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4a18      	ldr	r2, [pc, #96]	; (800ee2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800edca:	8812      	ldrh	r2, [r2, #0]
 800edcc:	b211      	sxth	r1, r2
 800edce:	2200      	movs	r2, #0
 800edd0:	6838      	ldr	r0, [r7, #0]
 800edd2:	4798      	blx	r3
            break;
 800edd4:	e025      	b.n	800ee22 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	3354      	adds	r3, #84	; 0x54
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	4a13      	ldr	r2, [pc, #76]	; (800ee2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800ede0:	8812      	ldrh	r2, [r2, #0]
 800ede2:	4252      	negs	r2, r2
 800ede4:	b292      	uxth	r2, r2
 800ede6:	b211      	sxth	r1, r2
 800ede8:	2200      	movs	r2, #0
 800edea:	6838      	ldr	r0, [r7, #0]
 800edec:	4798      	blx	r3
            break;
 800edee:	e018      	b.n	800ee22 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	3354      	adds	r3, #84	; 0x54
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a0d      	ldr	r2, [pc, #52]	; (800ee30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800edfa:	8812      	ldrh	r2, [r2, #0]
 800edfc:	4252      	negs	r2, r2
 800edfe:	b292      	uxth	r2, r2
 800ee00:	b212      	sxth	r2, r2
 800ee02:	2100      	movs	r1, #0
 800ee04:	6838      	ldr	r0, [r7, #0]
 800ee06:	4798      	blx	r3
            break;
 800ee08:	e00b      	b.n	800ee22 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	3354      	adds	r3, #84	; 0x54
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4a07      	ldr	r2, [pc, #28]	; (800ee30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800ee14:	8812      	ldrh	r2, [r2, #0]
 800ee16:	b212      	sxth	r2, r2
 800ee18:	2100      	movs	r1, #0
 800ee1a:	6838      	ldr	r0, [r7, #0]
 800ee1c:	4798      	blx	r3
            break;
 800ee1e:	e000      	b.n	800ee22 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 800ee20:	bf00      	nop
    }
 800ee22:	bf00      	nop
 800ee24:	3708      	adds	r7, #8
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	2000b360 	.word	0x2000b360
 800ee30:	2000b362 	.word	0x2000b362

0800ee34 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	68d2      	ldr	r2, [r2, #12]
 800ee46:	1052      	asrs	r2, r2, #1
 800ee48:	1898      	adds	r0, r3, r2
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	f003 0301 	and.w	r3, r3, #1
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d102      	bne.n	800ee5c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	e00a      	b.n	800ee72 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	68d2      	ldr	r2, [r2, #12]
 800ee64:	1052      	asrs	r2, r2, #1
 800ee66:	4413      	add	r3, r2
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	6892      	ldr	r2, [r2, #8]
 800ee6e:	4413      	add	r3, r2
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	4798      	blx	r3
    }
 800ee76:	bf00      	nop
 800ee78:	3708      	adds	r7, #8
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800ee7e:	b480      	push	{r7}
 800ee80:	b083      	sub	sp, #12
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d010      	beq.n	800eeb0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d107      	bne.n	800eea6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	68db      	ldr	r3, [r3, #12]
 800ee9a:	f003 0301 	and.w	r3, r3, #1
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d101      	bne.n	800eea6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800eea2:	2301      	movs	r3, #1
 800eea4:	e000      	b.n	800eea8 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800eea6:	2300      	movs	r3, #0
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d001      	beq.n	800eeb0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800eeac:	2301      	movs	r3, #1
 800eeae:	e000      	b.n	800eeb2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800eeb0:	2300      	movs	r3, #0
    }
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	370c      	adds	r7, #12
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
	...

0800eec0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800eec0:	b590      	push	{r4, r7, lr}
 800eec2:	b08b      	sub	sp, #44	; 0x2c
 800eec4:	af02      	add	r7, sp, #8
 800eec6:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fd fa2e 	bl	800c32c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	7f9b      	ldrb	r3, [r3, #30]
 800eed4:	3301      	adds	r3, #1
 800eed6:	b2da      	uxtb	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	779a      	strb	r2, [r3, #30]
        if (animationCounter <= animationSteps)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	7f9a      	ldrb	r2, [r3, #30]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	7f5b      	ldrb	r3, [r3, #29]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d82b      	bhi.n	800ef40 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	7f9b      	ldrb	r3, [r3, #30]
 800eeec:	b298      	uxth	r0, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	7f5b      	ldrb	r3, [r3, #29]
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	2100      	movs	r1, #0
 800eefc:	f00b fba8 	bl	801a650 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800ef00:	4603      	mov	r3, r0
 800ef02:	461a      	mov	r2, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	845a      	strh	r2, [r3, #34]	; 0x22
            if (calculatedValue % 2)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	f003 0301 	and.w	r3, r3, #1
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d019      	beq.n	800ef4e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800ef28:	2a00      	cmp	r2, #0
 800ef2a:	dd01      	ble.n	800ef30 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 800ef2c:	2201      	movs	r2, #1
 800ef2e:	e001      	b.n	800ef34 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 800ef30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef34:	4413      	add	r3, r2
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	b21a      	sxth	r2, r3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	845a      	strh	r2, [r3, #34]	; 0x22
 800ef3e:	e006      	b.n	800ef4e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            done = true;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2201      	movs	r2, #1
 800ef44:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	779a      	strb	r2, [r3, #30]
            return;
 800ef4c:	e0c0      	b.n	800f0d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x210>
        calculatedValue -= movedToPos;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ef54:	b29a      	uxth	r2, r3
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800ef5c:	b29b      	uxth	r3, r3
 800ef5e:	1ad3      	subs	r3, r2, r3
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	b21a      	sxth	r2, r3
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	845a      	strh	r2, [r3, #34]	; 0x22
        movedToPos += calculatedValue;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	4413      	add	r3, r2
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	b21a      	sxth	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	849a      	strh	r2, [r3, #36]	; 0x24
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	7f9b      	ldrb	r3, [r3, #30]
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	f040 8097 	bne.w	800f0ba <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
 800ef8c:	4b52      	ldr	r3, [pc, #328]	; (800f0d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x218>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	f000 8092 	beq.w	800f0ba <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
            Rect rect;
 800ef96:	f107 0314 	add.w	r3, r7, #20
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fd f8f8 	bl	800c190 <_ZN8touchgfx4RectC1Ev>
            switch (direction)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	7f1b      	ldrb	r3, [r3, #28]
 800efa4:	2b03      	cmp	r3, #3
 800efa6:	d85b      	bhi.n	800f060 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a0>
 800efa8:	a201      	add	r2, pc, #4	; (adr r2, 800efb0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xf0>)
 800efaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efae:	bf00      	nop
 800efb0:	0800f011 	.word	0x0800f011
 800efb4:	0800f03b 	.word	0x0800f03b
 800efb8:	0800efc1 	.word	0x0800efc1
 800efbc:	0800efe7 	.word	0x0800efe7
                rect.x = 0;
 800efc0:	2300      	movs	r3, #0
 800efc2:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800efc4:	2300      	movs	r3, #0
 800efc6:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800efce:	b29a      	uxth	r2, r3
 800efd0:	4b42      	ldr	r3, [pc, #264]	; (800f0dc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800efd2:	881b      	ldrh	r3, [r3, #0]
 800efd4:	4413      	add	r3, r2
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	b21b      	sxth	r3, r3
 800efda:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 800efdc:	4b40      	ldr	r3, [pc, #256]	; (800f0e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	b21b      	sxth	r3, r3
 800efe2:	837b      	strh	r3, [r7, #26]
                break;
 800efe4:	e03d      	b.n	800f062 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = calculatedValue;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800efec:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800efee:	2300      	movs	r3, #0
 800eff0:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH - calculatedValue;
 800eff2:	4b3a      	ldr	r3, [pc, #232]	; (800f0dc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800eff4:	881a      	ldrh	r2, [r3, #0]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800effc:	b29b      	uxth	r3, r3
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	b29b      	uxth	r3, r3
 800f002:	b21b      	sxth	r3, r3
 800f004:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 800f006:	4b36      	ldr	r3, [pc, #216]	; (800f0e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f008:	881b      	ldrh	r3, [r3, #0]
 800f00a:	b21b      	sxth	r3, r3
 800f00c:	837b      	strh	r3, [r7, #26]
                break;
 800f00e:	e028      	b.n	800f062 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 800f010:	2300      	movs	r3, #0
 800f012:	82bb      	strh	r3, [r7, #20]
                rect.y = calculatedValue;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f01a:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 800f01c:	4b2f      	ldr	r3, [pc, #188]	; (800f0dc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f01e:	881b      	ldrh	r3, [r3, #0]
 800f020:	b21b      	sxth	r3, r3
 800f022:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT - calculatedValue;
 800f024:	4b2e      	ldr	r3, [pc, #184]	; (800f0e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f026:	881a      	ldrh	r2, [r3, #0]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f02e:	b29b      	uxth	r3, r3
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	b29b      	uxth	r3, r3
 800f034:	b21b      	sxth	r3, r3
 800f036:	837b      	strh	r3, [r7, #26]
                break;
 800f038:	e013      	b.n	800f062 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 800f03a:	2300      	movs	r3, #0
 800f03c:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800f03e:	2300      	movs	r3, #0
 800f040:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 800f042:	4b26      	ldr	r3, [pc, #152]	; (800f0dc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f044:	881b      	ldrh	r3, [r3, #0]
 800f046:	b21b      	sxth	r3, r3
 800f048:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT + calculatedValue;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f050:	b29a      	uxth	r2, r3
 800f052:	4b23      	ldr	r3, [pc, #140]	; (800f0e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f054:	881b      	ldrh	r3, [r3, #0]
 800f056:	4413      	add	r3, r2
 800f058:	b29b      	uxth	r3, r3
 800f05a:	b21b      	sxth	r3, r3
 800f05c:	837b      	strh	r3, [r7, #26]
                break;
 800f05e:	e000      	b.n	800f062 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                break;
 800f060:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 800f062:	f7fd fb59 	bl	800c718 <_ZN8touchgfx3HAL11getInstanceEv>
 800f066:	4602      	mov	r2, r0
 800f068:	6813      	ldr	r3, [r2, #0]
 800f06a:	3328      	adds	r3, #40	; 0x28
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4610      	mov	r0, r2
 800f070:	4798      	blx	r3
 800f072:	61f8      	str	r0, [r7, #28]
            Rect source;
 800f074:	f107 030c 	add.w	r3, r7, #12
 800f078:	4618      	mov	r0, r3
 800f07a:	f7fd f889 	bl	800c190 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 800f07e:	2300      	movs	r3, #0
 800f080:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 800f082:	2300      	movs	r3, #0
 800f084:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 800f086:	4b15      	ldr	r3, [pc, #84]	; (800f0dc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f088:	881b      	ldrh	r3, [r3, #0]
 800f08a:	b21b      	sxth	r3, r3
 800f08c:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 800f08e:	4b14      	ldr	r3, [pc, #80]	; (800f0e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f090:	881b      	ldrh	r3, [r3, #0]
 800f092:	b21b      	sxth	r3, r3
 800f094:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 800f096:	f7fd fb3f 	bl	800c718 <_ZN8touchgfx3HAL11getInstanceEv>
 800f09a:	f7fd fb49 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 800f09e:	6803      	ldr	r3, [r0, #0]
 800f0a0:	330c      	adds	r3, #12
 800f0a2:	681c      	ldr	r4, [r3, #0]
 800f0a4:	f107 0114 	add.w	r1, r7, #20
 800f0a8:	f107 020c 	add.w	r2, r7, #12
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	9301      	str	r3, [sp, #4]
 800f0b0:	23ff      	movs	r3, #255	; 0xff
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	69f9      	ldr	r1, [r7, #28]
 800f0b8:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6858      	ldr	r0, [r3, #4]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	3378      	adds	r3, #120	; 0x78
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	320c      	adds	r2, #12
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	4798      	blx	r3
    }
 800f0d0:	3724      	adds	r7, #36	; 0x24
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd90      	pop	{r4, r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	2000b36a 	.word	0x2000b36a
 800f0dc:	2000b360 	.word	0x2000b360
 800f0e0:	2000b362 	.word	0x2000b362

0800f0e4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6858      	ldr	r0, [r3, #4]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	3364      	adds	r3, #100	; 0x64
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	687a      	ldr	r2, [r7, #4]
 800f0fc:	3228      	adds	r2, #40	; 0x28
 800f0fe:	4611      	mov	r1, r2
 800f100:	4798      	blx	r3
    }
 800f102:	bf00      	nop
 800f104:	3708      	adds	r7, #8
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
	...

0800f10c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b088      	sub	sp, #32
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
        Transition::init();
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	4618      	mov	r0, r3
 800f118:	f7fd f91c 	bl	800c354 <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 800f11c:	4a16      	ldr	r2, [pc, #88]	; (800f178 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x6c>)
 800f11e:	f107 0318 	add.w	r3, r7, #24
 800f122:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f126:	e883 0003 	stmia.w	r3, {r0, r1}
 800f12a:	f107 0008 	add.w	r0, r7, #8
 800f12e:	f107 0318 	add.w	r3, r7, #24
 800f132:	cb0c      	ldmia	r3, {r2, r3}
 800f134:	6879      	ldr	r1, [r7, #4]
 800f136:	f7ff fc5b 	bl	800e9f0 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	685a      	ldr	r2, [r3, #4]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	3378      	adds	r3, #120	; 0x78
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f107 0108 	add.w	r1, r7, #8
 800f14c:	4610      	mov	r0, r2
 800f14e:	4798      	blx	r3
        screenContainer->add(solid);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6858      	ldr	r0, [r3, #4]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	3360      	adds	r3, #96	; 0x60
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	3228      	adds	r2, #40	; 0x28
 800f162:	4611      	mov	r1, r2
 800f164:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 800f166:	f107 0308 	add.w	r3, r7, #8
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7ff f9da 	bl	800e524 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800f170:	bf00      	nop
 800f172:	3720      	adds	r7, #32
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	08026a20 	.word	0x08026a20

0800f17c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
        switch (direction)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	7f1b      	ldrb	r3, [r3, #28]
 800f18a:	2b03      	cmp	r3, #3
 800f18c:	d83a      	bhi.n	800f204 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x88>
 800f18e:	a201      	add	r2, pc, #4	; (adr r2, 800f194 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x18>)
 800f190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f194:	0800f1d5 	.word	0x0800f1d5
 800f198:	0800f1ef 	.word	0x0800f1ef
 800f19c:	0800f1a5 	.word	0x0800f1a5
 800f1a0:	0800f1bb 	.word	0x0800f1bb
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	3354      	adds	r3, #84	; 0x54
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4a18      	ldr	r2, [pc, #96]	; (800f210 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 800f1ae:	8812      	ldrh	r2, [r2, #0]
 800f1b0:	b211      	sxth	r1, r2
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	6838      	ldr	r0, [r7, #0]
 800f1b6:	4798      	blx	r3
            break;
 800f1b8:	e025      	b.n	800f206 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	3354      	adds	r3, #84	; 0x54
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4a13      	ldr	r2, [pc, #76]	; (800f210 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 800f1c4:	8812      	ldrh	r2, [r2, #0]
 800f1c6:	4252      	negs	r2, r2
 800f1c8:	b292      	uxth	r2, r2
 800f1ca:	b211      	sxth	r1, r2
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	6838      	ldr	r0, [r7, #0]
 800f1d0:	4798      	blx	r3
            break;
 800f1d2:	e018      	b.n	800f206 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	3354      	adds	r3, #84	; 0x54
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4a0d      	ldr	r2, [pc, #52]	; (800f214 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800f1de:	8812      	ldrh	r2, [r2, #0]
 800f1e0:	4252      	negs	r2, r2
 800f1e2:	b292      	uxth	r2, r2
 800f1e4:	b212      	sxth	r2, r2
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	6838      	ldr	r0, [r7, #0]
 800f1ea:	4798      	blx	r3
            break;
 800f1ec:	e00b      	b.n	800f206 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	3354      	adds	r3, #84	; 0x54
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4a07      	ldr	r2, [pc, #28]	; (800f214 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800f1f8:	8812      	ldrh	r2, [r2, #0]
 800f1fa:	b212      	sxth	r2, r2
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	6838      	ldr	r0, [r7, #0]
 800f200:	4798      	blx	r3
            break;
 800f202:	e000      	b.n	800f206 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            break;
 800f204:	bf00      	nop
    }
 800f206:	bf00      	nop
 800f208:	3708      	adds	r7, #8
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
 800f20e:	bf00      	nop
 800f210:	2000b360 	.word	0x2000b360
 800f214:	2000b362 	.word	0x2000b362

0800f218 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 800f218:	b480      	push	{r7}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
        }
 800f222:	bf00      	nop
 800f224:	370c      	adds	r7, #12
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr
	...

0800f230 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af02      	add	r7, sp, #8
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800f23a:	4b08      	ldr	r3, [pc, #32]	; (800f25c <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x2c>)
 800f23c:	881b      	ldrh	r3, [r3, #0]
 800f23e:	b21a      	sxth	r2, r3
 800f240:	4b07      	ldr	r3, [pc, #28]	; (800f260 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x30>)
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	b21b      	sxth	r3, r3
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	4613      	mov	r3, r2
 800f24a:	2200      	movs	r2, #0
 800f24c:	2100      	movs	r1, #0
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7fc ffb5 	bl	800c1be <_ZN8touchgfx4RectC1Essss>
        }
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	3708      	adds	r7, #8
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	2000b360 	.word	0x2000b360
 800f260:	2000b362 	.word	0x2000b362

0800f264 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	68d2      	ldr	r2, [r2, #12]
 800f276:	1052      	asrs	r2, r2, #1
 800f278:	1898      	adds	r0, r3, r2
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	f003 0301 	and.w	r3, r3, #1
 800f282:	2b00      	cmp	r3, #0
 800f284:	d102      	bne.n	800f28c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	e00a      	b.n	800f2a2 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	687a      	ldr	r2, [r7, #4]
 800f292:	68d2      	ldr	r2, [r2, #12]
 800f294:	1052      	asrs	r2, r2, #1
 800f296:	4413      	add	r3, r2
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	6892      	ldr	r2, [r2, #8]
 800f29e:	4413      	add	r3, r2
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	6839      	ldr	r1, [r7, #0]
 800f2a4:	4798      	blx	r3
    }
 800f2a6:	bf00      	nop
 800f2a8:	3708      	adds	r7, #8
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800f2ae:	b480      	push	{r7}
 800f2b0:	b083      	sub	sp, #12
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d010      	beq.n	800f2e0 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	689b      	ldr	r3, [r3, #8]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d107      	bne.n	800f2d6 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	68db      	ldr	r3, [r3, #12]
 800f2ca:	f003 0301 	and.w	r3, r3, #1
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d101      	bne.n	800f2d6 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	e000      	b.n	800f2d8 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d001      	beq.n	800f2e0 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f2dc:	2301      	movs	r3, #1
 800f2de:	e000      	b.n	800f2e2 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800f2e0:	2300      	movs	r3, #0
    }
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	370c      	adds	r7, #12
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800f2ee:	b580      	push	{r7, lr}
 800f2f0:	b082      	sub	sp, #8
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	68d2      	ldr	r2, [r2, #12]
 800f2fe:	1052      	asrs	r2, r2, #1
 800f300:	1899      	adds	r1, r3, r2
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	f003 0301 	and.w	r3, r3, #1
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d102      	bne.n	800f314 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	e00a      	b.n	800f32a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	68d2      	ldr	r2, [r2, #12]
 800f31c:	1052      	asrs	r2, r2, #1
 800f31e:	4413      	add	r3, r2
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	6892      	ldr	r2, [r2, #8]
 800f326:	4413      	add	r3, r2
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	4608      	mov	r0, r1
 800f32c:	4798      	blx	r3
    }
 800f32e:	bf00      	nop
 800f330:	3708      	adds	r7, #8
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}

0800f336 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f336:	b480      	push	{r7}
 800f338:	b083      	sub	sp, #12
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d010      	beq.n	800f368 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d107      	bne.n	800f35e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	f003 0301 	and.w	r3, r3, #1
 800f356:	2b00      	cmp	r3, #0
 800f358:	d101      	bne.n	800f35e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f35a:	2301      	movs	r3, #1
 800f35c:	e000      	b.n	800f360 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f35e:	2300      	movs	r3, #0
 800f360:	2b01      	cmp	r3, #1
 800f362:	d001      	beq.n	800f368 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f364:	2301      	movs	r3, #1
 800f366:	e000      	b.n	800f36a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f368:	2300      	movs	r3, #0
    }
 800f36a:	4618      	mov	r0, r3
 800f36c:	370c      	adds	r7, #12
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr

0800f376 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800f376:	b480      	push	{r7}
 800f378:	b083      	sub	sp, #12
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
 800f37e:	6039      	str	r1, [r7, #0]
        color = col;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	683a      	ldr	r2, [r7, #0]
 800f384:	601a      	str	r2, [r3, #0]
    }
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4618      	mov	r0, r3
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800f394:	b480      	push	{r7}
 800f396:	b083      	sub	sp, #12
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	460b      	mov	r3, r1
 800f39e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	887a      	ldrh	r2, [r7, #2]
 800f3a4:	801a      	strh	r2, [r3, #0]
    {
    }
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	370c      	adds	r7, #12
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr

0800f3b4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
    {
 800f3bc:	4a06      	ldr	r2, [pc, #24]	; (800f3d8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	601a      	str	r2, [r3, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	3304      	adds	r3, #4
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f000 fbaa 	bl	800fb20 <_ZN8touchgfx9ContainerD1Ev>
    }
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3708      	adds	r7, #8
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	0802a474 	.word	0x0802a474

0800f3dc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
    }
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7ff ffe5 	bl	800f3b4 <_ZN8touchgfx6ScreenD1Ev>
 800f3ea:	213c      	movs	r1, #60	; 0x3c
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f016 f94b 	bl	8025688 <_ZdlPvj>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3708      	adds	r7, #8
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
    {
    }
 800f404:	bf00      	nop
 800f406:	370c      	adds	r7, #12
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
    {
    }
 800f418:	bf00      	nop
 800f41a:	370c      	adds	r7, #12
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
    {
    }
 800f42c:	bf00      	nop
 800f42e:	370c      	adds	r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
    {
    }
 800f440:	bf00      	nop
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f44c:	b480      	push	{r7}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	460b      	mov	r3, r1
 800f456:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f458:	bf00      	nop
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	3304      	adds	r3, #4
 800f472:	6839      	ldr	r1, [r7, #0]
 800f474:	4618      	mov	r0, r3
 800f476:	f006 fa95 	bl	80159a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f47a:	bf00      	nop
 800f47c:	3708      	adds	r7, #8
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800f482:	b480      	push	{r7}
 800f484:	b083      	sub	sp, #12
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
 800f48a:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	683a      	ldr	r2, [r7, #0]
 800f490:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f492:	bf00      	nop
 800f494:	370c      	adds	r7, #12
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
	...

0800f4a0 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	4a05      	ldr	r2, [pc, #20]	; (800f4c0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	601a      	str	r2, [r3, #0]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f7fd fa83 	bl	800c9bc <_ZN8touchgfx6WidgetD1Ev>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3708      	adds	r7, #8
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	08029a88 	.word	0x08029a88

0800f4c4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f7ff ffe7 	bl	800f4a0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f4d2:	2130      	movs	r1, #48	; 0x30
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f016 f8d7 	bl	8025688 <_ZdlPvj>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3708      	adds	r7, #8
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	2326      	movs	r3, #38	; 0x26
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	2100      	movs	r1, #0
 800f4f6:	f016 f97c 	bl	80257f2 <memset>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fd fa4b 	bl	800c998 <_ZN8touchgfx6WidgetC1Ev>
 800f502:	4a0b      	ldr	r2, [pc, #44]	; (800f530 <_ZN8touchgfx3BoxC1Ev+0x4c>)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	601a      	str	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	22ff      	movs	r2, #255	; 0xff
 800f50c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	3328      	adds	r3, #40	; 0x28
 800f514:	2100      	movs	r1, #0
 800f516:	4618      	mov	r0, r3
 800f518:	f7ff ff2d 	bl	800f376 <_ZN8touchgfx9colortypeC1Em>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	4618      	mov	r0, r3
 800f528:	3708      	adds	r7, #8
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	bf00      	nop
 800f530:	08029cd0 	.word	0x08029cd0

0800f534 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	683a      	ldr	r2, [r7, #0]
 800f542:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f544:	bf00      	nop
 800f546:	370c      	adds	r7, #12
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
 800f550:	b480      	push	{r7}
 800f552:	b083      	sub	sp, #12
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	460b      	mov	r3, r1
 800f55a:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	887a      	ldrh	r2, [r7, #2]
 800f560:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 800f562:	bf00      	nop
 800f564:	370c      	adds	r7, #12
 800f566:	46bd      	mov	sp, r7
 800f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56c:	4770      	bx	lr

0800f56e <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
 800f56e:	b480      	push	{r7}
 800f570:	b083      	sub	sp, #12
 800f572:	af00      	add	r7, sp, #0
 800f574:	6078      	str	r0, [r7, #4]
 800f576:	460b      	mov	r3, r1
 800f578:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	887a      	ldrh	r2, [r7, #2]
 800f57e:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 800f580:	bf00      	nop
 800f582:	370c      	adds	r7, #12
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The values set are overwritten on a subsequent call to setBitmaps.
     */
    void setIconXY(int16_t x, int16_t y)
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	460b      	mov	r3, r1
 800f596:	807b      	strh	r3, [r7, #2]
 800f598:	4613      	mov	r3, r2
 800f59a:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800f59c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f7ff ffd4 	bl	800f550 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 800f5a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f7ff ffdd 	bl	800f56e <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 800f5b4:	bf00      	nop
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
        : Widget(), alpha(255)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	2326      	movs	r3, #38	; 0x26
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	f016 f90f 	bl	80257f2 <memset>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7fd f9de 	bl	800c998 <_ZN8touchgfx6WidgetC1Ev>
 800f5dc:	4a0b      	ldr	r2, [pc, #44]	; (800f60c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x50>)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	601a      	str	r2, [r3, #0]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	3326      	adds	r3, #38	; 0x26
 800f5e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7ff fed2 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	22ff      	movs	r2, #255	; 0xff
 800f5f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800f5f8:	6839      	ldr	r1, [r7, #0]
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f008 fd00 	bl	8018000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	4618      	mov	r0, r3
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	08029f94 	.word	0x08029f94

0800f610 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800f610:	b480      	push	{r7}
 800f612:	b083      	sub	sp, #12
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	460b      	mov	r3, r1
 800f61a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800f61c:	4a06      	ldr	r2, [pc, #24]	; (800f638 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	601a      	str	r2, [r3, #0]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	887a      	ldrh	r2, [r7, #2]
 800f626:	809a      	strh	r2, [r3, #4]
    }
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4618      	mov	r0, r3
 800f62c:	370c      	adds	r7, #12
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr
 800f636:	bf00      	nop
 800f638:	080272a4 	.word	0x080272a4

0800f63c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	4618      	mov	r0, r3
 800f648:	2326      	movs	r3, #38	; 0x26
 800f64a:	461a      	mov	r2, r3
 800f64c:	2100      	movs	r1, #0
 800f64e:	f016 f8d0 	bl	80257f2 <memset>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4618      	mov	r0, r3
 800f656:	f7fd f99f 	bl	800c998 <_ZN8touchgfx6WidgetC1Ev>
 800f65a:	4a14      	ldr	r2, [pc, #80]	; (800f6ac <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	601a      	str	r2, [r3, #0]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	3328      	adds	r3, #40	; 0x28
 800f664:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f668:	4618      	mov	r0, r3
 800f66a:	f7ff ffd1 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	3330      	adds	r3, #48	; 0x30
 800f672:	2100      	movs	r1, #0
 800f674:	4618      	mov	r0, r3
 800f676:	f7ff fe7e 	bl	800f376 <_ZN8touchgfx9colortypeC1Em>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2200      	movs	r2, #0
 800f67e:	869a      	strh	r2, [r3, #52]	; 0x34
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	22ff      	movs	r2, #255	; 0xff
 800f684:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2200      	movs	r2, #0
 800f68c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2200      	movs	r2, #0
 800f694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2200      	movs	r2, #0
 800f69c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	08029c24 	.word	0x08029c24

0800f6b0 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev>:
class View : public Screen
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	4a05      	ldr	r2, [pc, #20]	; (800f6d0 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev+0x20>)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	601a      	str	r2, [r3, #0]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7ff fe77 	bl	800f3b4 <_ZN8touchgfx6ScreenD1Ev>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	08027e78 	.word	0x08027e78

0800f6d4 <_ZN8touchgfx4ViewI16galleryPresenterED0Ev>:
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f7ff ffe7 	bl	800f6b0 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev>
 800f6e2:	2140      	movs	r1, #64	; 0x40
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f015 ffcf 	bl	8025688 <_ZdlPvj>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3708      	adds	r7, #8
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <_ZN15galleryViewBaseD1Ev>:

class galleryViewBase : public touchgfx::View<galleryPresenter>
{
public:
    galleryViewBase();
    virtual ~galleryViewBase() {}
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	4a12      	ldr	r2, [pc, #72]	; (800f748 <_ZN15galleryViewBaseD1Ev+0x54>)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	601a      	str	r2, [r3, #0]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f708:	4618      	mov	r0, r3
 800f70a:	f000 f9e7 	bl	800fadc <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	33d8      	adds	r3, #216	; 0xd8
 800f712:	4618      	mov	r0, r3
 800f714:	f000 faae 	bl	800fc74 <_ZN8touchgfx8TextAreaD1Ev>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	33ac      	adds	r3, #172	; 0xac
 800f71c:	4618      	mov	r0, r3
 800f71e:	f000 fa87 	bl	800fc30 <_ZN8touchgfx5ImageD1Ev>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	3370      	adds	r3, #112	; 0x70
 800f726:	4618      	mov	r0, r3
 800f728:	f000 fa60 	bl	800fbec <_ZN8touchgfx14ButtonWithIconD1Ev>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	3340      	adds	r3, #64	; 0x40
 800f730:	4618      	mov	r0, r3
 800f732:	f000 fa17 	bl	800fb64 <_ZN8touchgfx3BoxD1Ev>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4618      	mov	r0, r3
 800f73a:	f7ff ffb9 	bl	800f6b0 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4618      	mov	r0, r3
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	08027e2c 	.word	0x08027e2c

0800f74c <_ZN15galleryViewBaseD0Ev>:
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7ff ffcd 	bl	800f6f4 <_ZN15galleryViewBaseD1Ev>
 800f75a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f015 ff92 	bl	8025688 <_ZdlPvj>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	4618      	mov	r0, r3
 800f768:	3708      	adds	r7, #8
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}

0800f76e <_ZN15galleryViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800f76e:	b580      	push	{r7, lr}
 800f770:	b082      	sub	sp, #8
 800f772:	af00      	add	r7, sp, #0
 800f774:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800f776:	f009 fe33 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 800f77a:	4603      	mov	r3, r0
    }
 800f77c:	4618      	mov	r0, r3
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800f784:	b590      	push	{r4, r7, lr}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	4603      	mov	r3, r0
 800f78c:	71fb      	strb	r3, [r7, #7]
 800f78e:	460b      	mov	r3, r1
 800f790:	71bb      	strb	r3, [r7, #6]
 800f792:	4613      	mov	r3, r2
 800f794:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800f796:	f7fc ffbf 	bl	800c718 <_ZN8touchgfx3HAL11getInstanceEv>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d105      	bne.n	800f7ac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800f7a0:	4b0a      	ldr	r3, [pc, #40]	; (800f7cc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800f7a2:	4a0b      	ldr	r2, [pc, #44]	; (800f7d0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800f7a4:	2135      	movs	r1, #53	; 0x35
 800f7a6:	480b      	ldr	r0, [pc, #44]	; (800f7d4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800f7a8:	f015 ff9a 	bl	80256e0 <__assert_func>
 800f7ac:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800f7ae:	f7fc ffbf 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 800f7b2:	6803      	ldr	r3, [r0, #0]
 800f7b4:	3328      	adds	r3, #40	; 0x28
 800f7b6:	681c      	ldr	r4, [r3, #0]
 800f7b8:	797b      	ldrb	r3, [r7, #5]
 800f7ba:	79ba      	ldrb	r2, [r7, #6]
 800f7bc:	79f9      	ldrb	r1, [r7, #7]
 800f7be:	47a0      	blx	r4
 800f7c0:	4603      	mov	r3, r0
    }
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	370c      	adds	r7, #12
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd90      	pop	{r4, r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	08026a28 	.word	0x08026a28
 800f7d0:	08027ebc 	.word	0x08027ebc
 800f7d4:	08026a6c 	.word	0x08026a6c

0800f7d8 <_ZN15galleryViewBaseC1Ev>:
#include <gui_generated/gallery_screen/galleryViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

galleryViewBase::galleryViewBase() :
 800f7d8:	b590      	push	{r4, r7, lr}
 800f7da:	b093      	sub	sp, #76	; 0x4c
 800f7dc:	af02      	add	r7, sp, #8
 800f7de:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &galleryViewBase::buttonCallbackHandler)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f000 f914 	bl	800fa10 <_ZN8touchgfx4ViewI16galleryPresenterEC1Ev>
 800f7e8:	4a77      	ldr	r2, [pc, #476]	; (800f9c8 <_ZN15galleryViewBaseC1Ev+0x1f0>)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	601a      	str	r2, [r3, #0]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	3340      	adds	r3, #64	; 0x40
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7ff fe76 	bl	800f4e4 <_ZN8touchgfx3BoxC1Ev>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	3370      	adds	r3, #112	; 0x70
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f008 fbdb 	bl	8017fb8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 800f808:	f107 030c 	add.w	r3, r7, #12
 800f80c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f810:	4618      	mov	r0, r3
 800f812:	f7ff fdbf 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 800f816:	f107 030c 	add.w	r3, r7, #12
 800f81a:	4619      	mov	r1, r3
 800f81c:	4620      	mov	r0, r4
 800f81e:	f7ff fecd 	bl	800f5bc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	33d8      	adds	r3, #216	; 0xd8
 800f826:	4618      	mov	r0, r3
 800f828:	f7ff ff08 	bl	800f63c <_ZN8touchgfx8TextAreaC1Ev>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f503 708a 	add.w	r0, r3, #276	; 0x114
 800f832:	4b66      	ldr	r3, [pc, #408]	; (800f9cc <_ZN15galleryViewBaseC1Ev+0x1f4>)
 800f834:	613b      	str	r3, [r7, #16]
 800f836:	2300      	movs	r3, #0
 800f838:	617b      	str	r3, [r7, #20]
 800f83a:	f107 0310 	add.w	r3, r7, #16
 800f83e:	cb0c      	ldmia	r3, {r2, r3}
 800f840:	6879      	ldr	r1, [r7, #4]
 800f842:	f000 f90b 	bl	800fa5c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    bg.setPosition(0, 0, 480, 272);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f84c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f850:	9300      	str	r3, [sp, #0]
 800f852:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800f856:	2200      	movs	r2, #0
 800f858:	2100      	movs	r1, #0
 800f85a:	f7fc fe1f 	bl	800c49c <_ZN8touchgfx8Drawable11setPositionEssss>
    bg.setColor(touchgfx::Color::getColorFrom24BitRGB(74, 94, 92));
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f864:	225c      	movs	r2, #92	; 0x5c
 800f866:	215e      	movs	r1, #94	; 0x5e
 800f868:	204a      	movs	r0, #74	; 0x4a
 800f86a:	f7ff ff8b 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f86e:	4603      	mov	r3, r0
 800f870:	4619      	mov	r1, r3
 800f872:	4620      	mov	r0, r4
 800f874:	f7ff fe5e 	bl	800f534 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Back_Button.setXY(0, 0);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	3370      	adds	r3, #112	; 0x70
 800f87c:	2200      	movs	r2, #0
 800f87e:	2100      	movs	r1, #0
 800f880:	4618      	mov	r0, r3
 800f882:	f7fc fe70 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800f88c:	f107 0318 	add.w	r3, r7, #24
 800f890:	2102      	movs	r1, #2
 800f892:	4618      	mov	r0, r3
 800f894:	f7ff fd7e 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 800f898:	f107 031c 	add.w	r3, r7, #28
 800f89c:	2103      	movs	r1, #3
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7ff fd78 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 800f8a4:	f107 0320 	add.w	r3, r7, #32
 800f8a8:	2108      	movs	r1, #8
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7ff fd72 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 800f8b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8b4:	2108      	movs	r1, #8
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7ff fd6c 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 800f8bc:	f107 0020 	add.w	r0, r7, #32
 800f8c0:	f107 021c 	add.w	r2, r7, #28
 800f8c4:	f107 0118 	add.w	r1, r7, #24
 800f8c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8cc:	9300      	str	r3, [sp, #0]
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f008 facd 	bl	8017e70 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	3370      	adds	r3, #112	; 0x70
 800f8da:	220f      	movs	r2, #15
 800f8dc:	2113      	movs	r1, #19
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7ff fe54 	bl	800f58c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	4610      	mov	r0, r2
 800f8f4:	f7ff fdc5 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image1.setXY(90, 52);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	33ac      	adds	r3, #172	; 0xac
 800f8fc:	2234      	movs	r2, #52	; 0x34
 800f8fe:	215a      	movs	r1, #90	; 0x5a
 800f900:	4618      	mov	r0, r3
 800f902:	f7fc fe30 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_COOLTEAM_ID));
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 800f90c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f910:	2107      	movs	r1, #7
 800f912:	4618      	mov	r0, r3
 800f914:	f7ff fd3e 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 800f918:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f91c:	4619      	mov	r1, r3
 800f91e:	4620      	mov	r0, r4
 800f920:	f008 fb6e 	bl	8018000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(188, 18);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	33d8      	adds	r3, #216	; 0xd8
 800f928:	2212      	movs	r2, #18
 800f92a:	21bc      	movs	r1, #188	; 0xbc
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7fc fe1a 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(14, 255, 120));
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800f938:	2278      	movs	r2, #120	; 0x78
 800f93a:	21ff      	movs	r1, #255	; 0xff
 800f93c:	200e      	movs	r0, #14
 800f93e:	f7ff ff21 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f942:	4603      	mov	r3, r0
 800f944:	637c      	str	r4, [r7, #52]	; 0x34
 800f946:	60bb      	str	r3, [r7, #8]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800f948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f94a:	68ba      	ldr	r2, [r7, #8]
 800f94c:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	33d8      	adds	r3, #216	; 0xd8
 800f952:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f954:	2300      	movs	r3, #0
 800f956:	877b      	strh	r3, [r7, #58]	; 0x3a
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800f958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f95a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f95c:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800f964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f968:	2115      	movs	r1, #21
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7ff fe50 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 800f970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f974:	4619      	mov	r1, r3
 800f976:	4620      	mov	r0, r4
 800f978:	f008 f894 	bl	8017aa4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f97c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f980:	4618      	mov	r0, r3
 800f982:	f7fc f9ed 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>

    add(bg);
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	3340      	adds	r3, #64	; 0x40
 800f98c:	4619      	mov	r1, r3
 800f98e:	4610      	mov	r0, r2
 800f990:	f7ff fd68 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	3370      	adds	r3, #112	; 0x70
 800f99a:	4619      	mov	r1, r3
 800f99c:	4610      	mov	r0, r2
 800f99e:	f7ff fd61 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	33ac      	adds	r3, #172	; 0xac
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	4610      	mov	r0, r2
 800f9ac:	f7ff fd5a 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	33d8      	adds	r3, #216	; 0xd8
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	4610      	mov	r0, r2
 800f9ba:	f7ff fd53 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3744      	adds	r7, #68	; 0x44
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd90      	pop	{r4, r7, pc}
 800f9c8:	08027e2c 	.word	0x08027e2c
 800f9cc:	0800f9e5 	.word	0x0800f9e5

0800f9d0 <_ZN15galleryViewBase11setupScreenEv>:

void galleryViewBase::setupScreen()
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]

}
 800f9d8:	bf00      	nop
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <_ZN15galleryViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void galleryViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
    if (&src == &Back_Button)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	3370      	adds	r3, #112	; 0x70
 800f9f2:	683a      	ldr	r2, [r7, #0]
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d106      	bne.n	800fa06 <_ZN15galleryViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //back
        //When Back_Button clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenCoverTransitionEast();
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7ff feb8 	bl	800f76e <_ZN15galleryViewBase11applicationEv>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	4618      	mov	r0, r3
 800fa02:	f7fd f8e5 	bl	800cbd0 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv>
    }
}
 800fa06:	bf00      	nop
 800fa08:	3708      	adds	r7, #8
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
	...

0800fa10 <_ZN8touchgfx4ViewI16galleryPresenterEC1Ev>:
    View()
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f00a fc96 	bl	801a34c <_ZN8touchgfx6ScreenC1Ev>
 800fa20:	4a05      	ldr	r2, [pc, #20]	; (800fa38 <_ZN8touchgfx4ViewI16galleryPresenterEC1Ev+0x28>)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	601a      	str	r2, [r3, #0]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	08027e78 	.word	0x08027e78

0800fa3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	4a04      	ldr	r2, [pc, #16]	; (800fa58 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	601a      	str	r2, [r3, #0]
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr
 800fa58:	08027eac 	.word	0x08027eac

0800fa5c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60f8      	str	r0, [r7, #12]
 800fa64:	60b9      	str	r1, [r7, #8]
 800fa66:	4639      	mov	r1, r7
 800fa68:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7ff ffe4 	bl	800fa3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800fa74:	4a08      	ldr	r2, [pc, #32]	; (800fa98 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	3308      	adds	r3, #8
 800fa84:	463a      	mov	r2, r7
 800fa86:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa8a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	4618      	mov	r0, r3
 800fa92:	3710      	adds	r7, #16
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	08027e60 	.word	0x08027e60

0800fa9c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
    }
 800faa4:	4a04      	ldr	r2, [pc, #16]	; (800fab8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	601a      	str	r2, [r3, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4618      	mov	r0, r3
 800faae:	370c      	adds	r7, #12
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr
 800fab8:	08027eac 	.word	0x08027eac

0800fabc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
    }
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f7ff ffe9 	bl	800fa9c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800faca:	2104      	movs	r1, #4
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f015 fddb 	bl	8025688 <_ZdlPvj>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4618      	mov	r0, r3
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}

0800fadc <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	4a05      	ldr	r2, [pc, #20]	; (800fafc <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	601a      	str	r2, [r3, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4618      	mov	r0, r3
 800faee:	f7ff ffd5 	bl	800fa9c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4618      	mov	r0, r3
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	08027e60 	.word	0x08027e60

0800fb00 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7ff ffe7 	bl	800fadc <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800fb0e:	2110      	movs	r1, #16
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f015 fdb9 	bl	8025688 <_ZdlPvj>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	4a05      	ldr	r2, [pc, #20]	; (800fb40 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	601a      	str	r2, [r3, #0]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7fc fc93 	bl	800c45c <_ZN8touchgfx8DrawableD1Ev>
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	08028fbc 	.word	0x08028fbc

0800fb44 <_ZN8touchgfx9ContainerD0Ev>:
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f7ff ffe7 	bl	800fb20 <_ZN8touchgfx9ContainerD1Ev>
 800fb52:	212c      	movs	r1, #44	; 0x2c
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f015 fd97 	bl	8025688 <_ZdlPvj>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3708      	adds	r7, #8
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	4a05      	ldr	r2, [pc, #20]	; (800fb84 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	601a      	str	r2, [r3, #0]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fc ff21 	bl	800c9bc <_ZN8touchgfx6WidgetD1Ev>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	08029cd0 	.word	0x08029cd0

0800fb88 <_ZN8touchgfx3BoxD0Ev>:
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f7ff ffe7 	bl	800fb64 <_ZN8touchgfx3BoxD1Ev>
 800fb96:	2130      	movs	r1, #48	; 0x30
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f015 fd75 	bl	8025688 <_ZdlPvj>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	4618      	mov	r0, r3
 800fba2:	3708      	adds	r7, #8
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}

0800fba8 <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	4a05      	ldr	r2, [pc, #20]	; (800fbc8 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	601a      	str	r2, [r3, #0]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7ff fc71 	bl	800f4a0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3708      	adds	r7, #8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	08029d9c 	.word	0x08029d9c

0800fbcc <_ZN8touchgfx6ButtonD0Ev>:
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f7ff ffe7 	bl	800fba8 <_ZN8touchgfx6ButtonD1Ev>
 800fbda:	2134      	movs	r1, #52	; 0x34
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f015 fd53 	bl	8025688 <_ZdlPvj>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3708      	adds	r7, #8
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	4a05      	ldr	r2, [pc, #20]	; (800fc0c <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	601a      	str	r2, [r3, #0]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7ff ffd3 	bl	800fba8 <_ZN8touchgfx6ButtonD1Ev>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	4618      	mov	r0, r3
 800fc06:	3708      	adds	r7, #8
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}
 800fc0c:	08029eec 	.word	0x08029eec

0800fc10 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f7ff ffe7 	bl	800fbec <_ZN8touchgfx14ButtonWithIconD1Ev>
 800fc1e:	213c      	movs	r1, #60	; 0x3c
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f015 fd31 	bl	8025688 <_ZdlPvj>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	4a05      	ldr	r2, [pc, #20]	; (800fc50 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	601a      	str	r2, [r3, #0]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7fc febb 	bl	800c9bc <_ZN8touchgfx6WidgetD1Ev>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	08029f94 	.word	0x08029f94

0800fc54 <_ZN8touchgfx5ImageD0Ev>:
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f7ff ffe7 	bl	800fc30 <_ZN8touchgfx5ImageD1Ev>
 800fc62:	212c      	movs	r1, #44	; 0x2c
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f015 fd0f 	bl	8025688 <_ZdlPvj>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	4a08      	ldr	r2, [pc, #32]	; (800fca0 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	601a      	str	r2, [r3, #0]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	3328      	adds	r3, #40	; 0x28
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fc f86a 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fc fe94 	bl	800c9bc <_ZN8touchgfx6WidgetD1Ev>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4618      	mov	r0, r3
 800fc98:	3708      	adds	r7, #8
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	08029c24 	.word	0x08029c24

0800fca4 <_ZN8touchgfx8TextAreaD0Ev>:
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f7ff ffe1 	bl	800fc74 <_ZN8touchgfx8TextAreaD1Ev>
 800fcb2:	213c      	movs	r1, #60	; 0x3c
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f015 fce7 	bl	8025688 <_ZdlPvj>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3708      	adds	r7, #8
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	68d2      	ldr	r2, [r2, #12]
 800fcd6:	1052      	asrs	r2, r2, #1
 800fcd8:	1898      	adds	r0, r3, r2
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	f003 0301 	and.w	r3, r3, #1
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d102      	bne.n	800fcec <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	e00a      	b.n	800fd02 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	68d2      	ldr	r2, [r2, #12]
 800fcf4:	1052      	asrs	r2, r2, #1
 800fcf6:	4413      	add	r3, r2
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	6892      	ldr	r2, [r2, #8]
 800fcfe:	4413      	add	r3, r2
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	6839      	ldr	r1, [r7, #0]
 800fd04:	4798      	blx	r3
    }
 800fd06:	bf00      	nop
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800fd0e:	b480      	push	{r7}
 800fd10:	b083      	sub	sp, #12
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d010      	beq.n	800fd40 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	689b      	ldr	r3, [r3, #8]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d107      	bne.n	800fd36 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	f003 0301 	and.w	r3, r3, #1
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d101      	bne.n	800fd36 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800fd32:	2301      	movs	r3, #1
 800fd34:	e000      	b.n	800fd38 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800fd36:	2300      	movs	r3, #0
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d001      	beq.n	800fd40 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	e000      	b.n	800fd42 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800fd40:	2300      	movs	r3, #0
    }
 800fd42:	4618      	mov	r0, r3
 800fd44:	370c      	adds	r7, #12
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr

0800fd4e <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800fd4e:	b480      	push	{r7}
 800fd50:	b083      	sub	sp, #12
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	6078      	str	r0, [r7, #4]
 800fd56:	460b      	mov	r3, r1
 800fd58:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	78fa      	ldrb	r2, [r7, #3]
 800fd5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800fd62:	bf00      	nop
 800fd64:	370c      	adds	r7, #12
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr
	...

0800fd70 <_ZN8touchgfx14AbstractButtonC1Ev>:
    AbstractButton()
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	2326      	movs	r3, #38	; 0x26
 800fd7e:	461a      	mov	r2, r3
 800fd80:	2100      	movs	r1, #0
 800fd82:	f015 fd36 	bl	80257f2 <memset>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7fc fe05 	bl	800c998 <_ZN8touchgfx6WidgetC1Ev>
 800fd8e:	4a0a      	ldr	r2, [pc, #40]	; (800fdb8 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	601a      	str	r2, [r3, #0]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2200      	movs	r2, #0
 800fd98:	629a      	str	r2, [r3, #40]	; 0x28
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        setTouchable(true);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2101      	movs	r1, #1
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7ff ffd1 	bl	800fd4e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3708      	adds	r7, #8
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	08029a88 	.word	0x08029a88

0800fdbc <_ZN8touchgfx6ButtonC1Ev>:
{
public:
    Button()
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b082      	sub	sp, #8
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7ff ffd2 	bl	800fd70 <_ZN8touchgfx14AbstractButtonC1Ev>
 800fdcc:	4a0c      	ldr	r2, [pc, #48]	; (800fe00 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	601a      	str	r2, [r3, #0]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	332e      	adds	r3, #46	; 0x2e
 800fdd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7ff fada 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	3330      	adds	r3, #48	; 0x30
 800fde4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7ff fad3 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	22ff      	movs	r2, #255	; 0xff
 800fdf2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	08029d9c 	.word	0x08029d9c

0800fe04 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800fe04:	b480      	push	{r7}
 800fe06:	b083      	sub	sp, #12
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	889a      	ldrh	r2, [r3, #4]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	809a      	strh	r2, [r3, #4]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	3334      	adds	r3, #52	; 0x34
 800fe32:	6839      	ldr	r1, [r7, #0]
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7ff ffe5 	bl	800fe04 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f000 f820 	bl	800fe80 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 800fe40:	bf00      	nop
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 800fe48:	b480      	push	{r7}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	683a      	ldr	r2, [r7, #0]
 800fe56:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fe58:	bf00      	nop
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 800fe64:	b480      	push	{r7}
 800fe66:	b083      	sub	sp, #12
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	683a      	ldr	r2, [r7, #0]
 800fe72:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800fe74:	bf00      	nop
 800fe76:	370c      	adds	r7, #12
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr

0800fe80 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800fe80:	b590      	push	{r4, r7, lr}
 800fe82:	b08b      	sub	sp, #44	; 0x2c
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	3334      	adds	r3, #52	; 0x34
 800fe8c:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId != TYPED_TEXT_INVALID;
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	889b      	ldrh	r3, [r3, #4]
 800fe92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe96:	4293      	cmp	r3, r2
 800fe98:	bf14      	ite	ne
 800fe9a:	2301      	movne	r3, #1
 800fe9c:	2300      	moveq	r3, #0
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d06f      	beq.n	800ff84 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x104>
        {
            const Font* f = typedText.getFont();
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	3334      	adds	r3, #52	; 0x34
 800fea8:	613b      	str	r3, [r7, #16]
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	60fb      	str	r3, [r7, #12]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800feae:	4b39      	ldr	r3, [pc, #228]	; (800ff94 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d105      	bne.n	800fec2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 800feb6:	4b38      	ldr	r3, [pc, #224]	; (800ff98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 800feb8:	4a38      	ldr	r2, [pc, #224]	; (800ff9c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800feba:	21b1      	movs	r1, #177	; 0xb1
 800febc:	4838      	ldr	r0, [pc, #224]	; (800ffa0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800febe:	f015 fc0f 	bl	80256e0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	889a      	ldrh	r2, [r3, #4]
 800fec6:	4b37      	ldr	r3, [pc, #220]	; (800ffa4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 800fec8:	881b      	ldrh	r3, [r3, #0]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d305      	bcc.n	800feda <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 800fece:	4b36      	ldr	r3, [pc, #216]	; (800ffa8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 800fed0:	4a32      	ldr	r2, [pc, #200]	; (800ff9c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800fed2:	21b2      	movs	r1, #178	; 0xb2
 800fed4:	4832      	ldr	r0, [pc, #200]	; (800ffa0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800fed6:	f015 fc03 	bl	80256e0 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800feda:	4b34      	ldr	r3, [pc, #208]	; (800ffac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 800fedc:	681a      	ldr	r2, [r3, #0]
 800fede:	4b2d      	ldr	r3, [pc, #180]	; (800ff94 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800fee0:	6819      	ldr	r1, [r3, #0]
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	889b      	ldrh	r3, [r3, #4]
 800fee6:	005b      	lsls	r3, r3, #1
 800fee8:	440b      	add	r3, r1
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	4413      	add	r3, r2
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	3334      	adds	r3, #52	; 0x34
 800fef8:	61bb      	str	r3, [r7, #24]
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fefe:	4b25      	ldr	r3, [pc, #148]	; (800ff94 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d105      	bne.n	800ff12 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x92>
 800ff06:	4b24      	ldr	r3, [pc, #144]	; (800ff98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 800ff08:	4a24      	ldr	r2, [pc, #144]	; (800ff9c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800ff0a:	21b1      	movs	r1, #177	; 0xb1
 800ff0c:	4824      	ldr	r0, [pc, #144]	; (800ffa0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800ff0e:	f015 fbe7 	bl	80256e0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	889a      	ldrh	r2, [r3, #4]
 800ff16:	4b23      	ldr	r3, [pc, #140]	; (800ffa4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 800ff18:	881b      	ldrh	r3, [r3, #0]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d305      	bcc.n	800ff2a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xaa>
 800ff1e:	4b22      	ldr	r3, [pc, #136]	; (800ffa8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 800ff20:	4a1e      	ldr	r2, [pc, #120]	; (800ff9c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800ff22:	21b2      	movs	r1, #178	; 0xb2
 800ff24:	481e      	ldr	r0, [pc, #120]	; (800ffa0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800ff26:	f015 fbdb 	bl	80256e0 <__assert_func>
        return texts->getText(typedTextId);
 800ff2a:	4b21      	ldr	r3, [pc, #132]	; (800ffb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800ff2c:	681a      	ldr	r2, [r3, #0]
 800ff2e:	69bb      	ldr	r3, [r7, #24]
 800ff30:	889b      	ldrh	r3, [r3, #4]
 800ff32:	4619      	mov	r1, r3
 800ff34:	4610      	mov	r0, r2
 800ff36:	f002 fcaf 	bl	8012898 <_ZNK8touchgfx5Texts7getTextEt>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800ff3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	3328      	adds	r3, #40	; 0x28
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	6a39      	ldr	r1, [r7, #32]
 800ff48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff4a:	4798      	blx	r3
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	b2dc      	uxtb	r4, r3
 800ff50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	3340      	adds	r3, #64	; 0x40
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	6a39      	ldr	r1, [r7, #32]
 800ff5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff5c:	4798      	blx	r3
 800ff5e:	4603      	mov	r3, r0
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	fb14 f303 	smulbb	r3, r4, r3
 800ff66:	b2dc      	uxtb	r4, r3
 800ff68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	3324      	adds	r3, #36	; 0x24
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	6a39      	ldr	r1, [r7, #32]
 800ff72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff74:	4798      	blx	r3
 800ff76:	4603      	mov	r3, r0
 800ff78:	4423      	add	r3, r4
 800ff7a:	b2da      	uxtb	r2, r3
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800ff82:	e003      	b.n	800ff8c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10c>
            textHeightIncludingSpacing = 0;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 800ff8c:	bf00      	nop
 800ff8e:	372c      	adds	r7, #44	; 0x2c
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd90      	pop	{r4, r7, pc}
 800ff94:	2000b3fc 	.word	0x2000b3fc
 800ff98:	08026aac 	.word	0x08026aac
 800ff9c:	08027f98 	.word	0x08027f98
 800ffa0:	08026af0 	.word	0x08026af0
 800ffa4:	2000b400 	.word	0x2000b400
 800ffa8:	08026b34 	.word	0x08026b34
 800ffac:	2000b404 	.word	0x2000b404
 800ffb0:	2000b408 	.word	0x2000b408

0800ffb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7ff fb3c 	bl	800f63c <_ZN8touchgfx8TextAreaC1Ev>
 800ffc4:	4a05      	ldr	r2, [pc, #20]	; (800ffdc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	601a      	str	r2, [r3, #0]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3708      	adds	r7, #8
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	08029e40 	.word	0x08029e40

0800ffe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800ffe0:	b480      	push	{r7}
 800ffe2:	b083      	sub	sp, #12
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	683a      	ldr	r2, [r7, #0]
 800ffee:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fff0:	bf00      	nop
 800fff2:	370c      	adds	r7, #12
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev>:
class View : public Screen
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b082      	sub	sp, #8
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	4a05      	ldr	r2, [pc, #20]	; (801001c <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev+0x20>)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	601a      	str	r2, [r3, #0]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	4618      	mov	r0, r3
 801000e:	f7ff f9d1 	bl	800f3b4 <_ZN8touchgfx6ScreenD1Ev>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	4618      	mov	r0, r3
 8010016:	3708      	adds	r7, #8
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	08027f6c 	.word	0x08027f6c

08010020 <_ZN8touchgfx4ViewI17gameoverPresenterED0Ev>:
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f7ff ffe7 	bl	800fffc <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev>
 801002e:	2140      	movs	r1, #64	; 0x40
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f015 fb29 	bl	8025688 <_ZdlPvj>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	4618      	mov	r0, r3
 801003a:	3708      	adds	r7, #8
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <_ZN16gameoverViewBaseD1Ev>:

class gameoverViewBase : public touchgfx::View<gameoverPresenter>
{
public:
    gameoverViewBase();
    virtual ~gameoverViewBase() {}
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	4a15      	ldr	r2, [pc, #84]	; (80100a0 <_ZN16gameoverViewBaseD1Ev+0x60>)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	601a      	str	r2, [r3, #0]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010054:	4618      	mov	r0, r3
 8010056:	f000 fa3f 	bl	80104d8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff fda1 	bl	800fba8 <_ZN8touchgfx6ButtonD1Ev>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	33f4      	adds	r3, #244	; 0xf4
 801006a:	4618      	mov	r0, r3
 801006c:	f000 fa7e 	bl	801056c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	33b8      	adds	r3, #184	; 0xb8
 8010074:	4618      	mov	r0, r3
 8010076:	f7ff fdfd 	bl	800fc74 <_ZN8touchgfx8TextAreaD1Ev>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	3370      	adds	r3, #112	; 0x70
 801007e:	4618      	mov	r0, r3
 8010080:	f000 fa4c 	bl	801051c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	3340      	adds	r3, #64	; 0x40
 8010088:	4618      	mov	r0, r3
 801008a:	f7ff fd6b 	bl	800fb64 <_ZN8touchgfx3BoxD1Ev>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	4618      	mov	r0, r3
 8010092:	f7ff ffb3 	bl	800fffc <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4618      	mov	r0, r3
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	08027f20 	.word	0x08027f20

080100a4 <_ZN16gameoverViewBaseD0Ev>:
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f7ff ffc7 	bl	8010040 <_ZN16gameoverViewBaseD1Ev>
 80100b2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f015 fae6 	bl	8025688 <_ZdlPvj>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	4618      	mov	r0, r3
 80100c0:	3708      	adds	r7, #8
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}

080100c6 <_ZN16gameoverViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80100c6:	b580      	push	{r7, lr}
 80100c8:	b082      	sub	sp, #8
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80100ce:	f009 f987 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 80100d2:	4603      	mov	r3, r0
    }
 80100d4:	4618      	mov	r0, r3
 80100d6:	3708      	adds	r7, #8
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <_ZN16gameoverViewBaseC1Ev>:
#include <gui_generated/gameover_screen/gameoverViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

gameoverViewBase::gameoverViewBase() :
 80100dc:	b590      	push	{r4, r7, lr}
 80100de:	b09d      	sub	sp, #116	; 0x74
 80100e0:	af02      	add	r7, sp, #8
 80100e2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &gameoverViewBase::buttonCallbackHandler)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	4618      	mov	r0, r3
 80100e8:	f000 f9c0 	bl	801046c <_ZN8touchgfx4ViewI17gameoverPresenterEC1Ev>
 80100ec:	4ac5      	ldr	r2, [pc, #788]	; (8010404 <_ZN16gameoverViewBaseC1Ev+0x328>)
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	601a      	str	r2, [r3, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	3340      	adds	r3, #64	; 0x40
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7ff f9f4 	bl	800f4e4 <_ZN8touchgfx3BoxC1Ev>
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	3370      	adds	r3, #112	; 0x70
 8010100:	4618      	mov	r0, r3
 8010102:	f008 f8b9 	bl	8018278 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	33b8      	adds	r3, #184	; 0xb8
 801010a:	4618      	mov	r0, r3
 801010c:	f7ff fa96 	bl	800f63c <_ZN8touchgfx8TextAreaC1Ev>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	33f4      	adds	r3, #244	; 0xf4
 8010114:	4618      	mov	r0, r3
 8010116:	f7ff ff4d 	bl	800ffb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010120:	4618      	mov	r0, r3
 8010122:	f7ff fe4b 	bl	800fdbc <_ZN8touchgfx6ButtonC1Ev>
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f503 70c8 	add.w	r0, r3, #400	; 0x190
 801012c:	4bb6      	ldr	r3, [pc, #728]	; (8010408 <_ZN16gameoverViewBaseC1Ev+0x32c>)
 801012e:	617b      	str	r3, [r7, #20]
 8010130:	2300      	movs	r3, #0
 8010132:	61bb      	str	r3, [r7, #24]
 8010134:	f107 0314 	add.w	r3, r7, #20
 8010138:	cb0c      	ldmia	r3, {r2, r3}
 801013a:	6879      	ldr	r1, [r7, #4]
 801013c:	f000 f9ac 	bl	8010498 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    bg.setPosition(0, 0, 480, 272);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010146:	f44f 7388 	mov.w	r3, #272	; 0x110
 801014a:	9300      	str	r3, [sp, #0]
 801014c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010150:	2200      	movs	r2, #0
 8010152:	2100      	movs	r1, #0
 8010154:	f7fc f9a2 	bl	800c49c <_ZN8touchgfx8Drawable11setPositionEssss>
    bg.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801015e:	22ff      	movs	r2, #255	; 0xff
 8010160:	21ff      	movs	r1, #255	; 0xff
 8010162:	20ff      	movs	r0, #255	; 0xff
 8010164:	f7ff fb0e 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010168:	4603      	mov	r3, r0
 801016a:	4619      	mov	r1, r3
 801016c:	4620      	mov	r0, r4
 801016e:	f7ff f9e1 	bl	800f534 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(0, 0);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	3370      	adds	r3, #112	; 0x70
 8010176:	2200      	movs	r2, #0
 8010178:	2100      	movs	r1, #0
 801017a:	4618      	mov	r0, r3
 801017c:	f7fc f9f3 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010186:	f107 031c 	add.w	r3, r7, #28
 801018a:	2102      	movs	r1, #2
 801018c:	4618      	mov	r0, r3
 801018e:	f7ff f901 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010192:	f107 0320 	add.w	r3, r7, #32
 8010196:	2103      	movs	r1, #3
 8010198:	4618      	mov	r0, r3
 801019a:	f7ff f8fb 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 801019e:	f107 0220 	add.w	r2, r7, #32
 80101a2:	f107 031c 	add.w	r3, r7, #28
 80101a6:	4619      	mov	r1, r3
 80101a8:	4620      	mov	r0, r4
 80101aa:	f007 fcb5 	bl	8017b18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID21));
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80101b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101b8:	210b      	movs	r1, #11
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7ff fa28 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 80101c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101c4:	4619      	mov	r1, r3
 80101c6:	4620      	mov	r0, r4
 80101c8:	f7ff fe2c 	bl	800fe24 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80101cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fb fdc5 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80101dc:	22ff      	movs	r2, #255	; 0xff
 80101de:	21ff      	movs	r1, #255	; 0xff
 80101e0:	20ff      	movs	r0, #255	; 0xff
 80101e2:	f7ff facf 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80101e6:	4603      	mov	r3, r0
 80101e8:	4619      	mov	r1, r3
 80101ea:	4620      	mov	r0, r4
 80101ec:	f7ff fe2c 	bl	800fe48 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80101f6:	22ff      	movs	r2, #255	; 0xff
 80101f8:	21ff      	movs	r1, #255	; 0xff
 80101fa:	20ff      	movs	r0, #255	; 0xff
 80101fc:	f7ff fac2 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010200:	4603      	mov	r3, r0
 8010202:	4619      	mov	r1, r3
 8010204:	4620      	mov	r0, r4
 8010206:	f7ff fe2d 	bl	800fe64 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010216:	4619      	mov	r1, r3
 8010218:	4610      	mov	r0, r2
 801021a:	f7ff f932 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    gameover_text.setXY(179, 124);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	33b8      	adds	r3, #184	; 0xb8
 8010222:	227c      	movs	r2, #124	; 0x7c
 8010224:	21b3      	movs	r1, #179	; 0xb3
 8010226:	4618      	mov	r0, r3
 8010228:	f7fc f99d 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    gameover_text.setColor(touchgfx::Color::getColorFrom24BitRGB(235, 0, 0));
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8010232:	2200      	movs	r2, #0
 8010234:	2100      	movs	r1, #0
 8010236:	20eb      	movs	r0, #235	; 0xeb
 8010238:	f7ff faa4 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801023c:	4603      	mov	r3, r0
 801023e:	64fc      	str	r4, [r7, #76]	; 0x4c
 8010240:	613b      	str	r3, [r7, #16]
        this->color = color;
 8010242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010244:	693a      	ldr	r2, [r7, #16]
 8010246:	631a      	str	r2, [r3, #48]	; 0x30
    gameover_text.setLinespacing(0);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	33b8      	adds	r3, #184	; 0xb8
 801024c:	657b      	str	r3, [r7, #84]	; 0x54
 801024e:	2300      	movs	r3, #0
 8010250:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        linespace = space;
 8010254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010256:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 801025a:	869a      	strh	r2, [r3, #52]	; 0x34
    gameover_text.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8010262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010266:	2112      	movs	r1, #18
 8010268:	4618      	mov	r0, r3
 801026a:	f7ff f9d1 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 801026e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010272:	4619      	mov	r1, r3
 8010274:	4620      	mov	r0, r4
 8010276:	f007 fc15 	bl	8017aa4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 801027a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801027e:	4618      	mov	r0, r3
 8010280:	f7fb fd6e 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>

    score.setXY(166, 149);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	33f4      	adds	r3, #244	; 0xf4
 8010288:	2295      	movs	r2, #149	; 0x95
 801028a:	21a6      	movs	r1, #166	; 0xa6
 801028c:	4618      	mov	r0, r3
 801028e:	f7fc f96a 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    score.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 173, 173));
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 8010298:	22ad      	movs	r2, #173	; 0xad
 801029a:	21ad      	movs	r1, #173	; 0xad
 801029c:	2000      	movs	r0, #0
 801029e:	f7ff fa71 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80102a2:	4603      	mov	r3, r0
 80102a4:	65bc      	str	r4, [r7, #88]	; 0x58
 80102a6:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80102a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	631a      	str	r2, [r3, #48]	; 0x30
    score.setLinespacing(0);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	33f4      	adds	r3, #244	; 0xf4
 80102b2:	663b      	str	r3, [r7, #96]	; 0x60
 80102b4:	2300      	movs	r3, #0
 80102b6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        linespace = space;
 80102ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102bc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80102c0:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID35).getText());
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 80102c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80102cc:	2114      	movs	r1, #20
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7ff f99e 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 80102d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80102d8:	667b      	str	r3, [r7, #100]	; 0x64
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80102da:	4b4c      	ldr	r3, [pc, #304]	; (801040c <_ZN16gameoverViewBaseC1Ev+0x330>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d105      	bne.n	80102ee <_ZN16gameoverViewBaseC1Ev+0x212>
 80102e2:	4b4b      	ldr	r3, [pc, #300]	; (8010410 <_ZN16gameoverViewBaseC1Ev+0x334>)
 80102e4:	4a4b      	ldr	r2, [pc, #300]	; (8010414 <_ZN16gameoverViewBaseC1Ev+0x338>)
 80102e6:	21b1      	movs	r1, #177	; 0xb1
 80102e8:	484b      	ldr	r0, [pc, #300]	; (8010418 <_ZN16gameoverViewBaseC1Ev+0x33c>)
 80102ea:	f015 f9f9 	bl	80256e0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80102ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102f0:	889a      	ldrh	r2, [r3, #4]
 80102f2:	4b4a      	ldr	r3, [pc, #296]	; (801041c <_ZN16gameoverViewBaseC1Ev+0x340>)
 80102f4:	881b      	ldrh	r3, [r3, #0]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d305      	bcc.n	8010306 <_ZN16gameoverViewBaseC1Ev+0x22a>
 80102fa:	4b49      	ldr	r3, [pc, #292]	; (8010420 <_ZN16gameoverViewBaseC1Ev+0x344>)
 80102fc:	4a45      	ldr	r2, [pc, #276]	; (8010414 <_ZN16gameoverViewBaseC1Ev+0x338>)
 80102fe:	21b2      	movs	r1, #178	; 0xb2
 8010300:	4845      	ldr	r0, [pc, #276]	; (8010418 <_ZN16gameoverViewBaseC1Ev+0x33c>)
 8010302:	f015 f9ed 	bl	80256e0 <__assert_func>
        return texts->getText(typedTextId);
 8010306:	4b47      	ldr	r3, [pc, #284]	; (8010424 <_ZN16gameoverViewBaseC1Ev+0x348>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801030c:	4611      	mov	r1, r2
 801030e:	4618      	mov	r0, r3
 8010310:	f002 fac2 	bl	8012898 <_ZNK8touchgfx5Texts7getTextEt>
 8010314:	4603      	mov	r3, r0
 8010316:	4a44      	ldr	r2, [pc, #272]	; (8010428 <_ZN16gameoverViewBaseC1Ev+0x34c>)
 8010318:	2114      	movs	r1, #20
 801031a:	4620      	mov	r0, r4
 801031c:	f00b faba 	bl	801b894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010320:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010324:	4618      	mov	r0, r3
 8010326:	f7fb fd1b 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>
    score.setWildcard(scoreBuffer);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010336:	4619      	mov	r1, r3
 8010338:	4610      	mov	r0, r2
 801033a:	f7ff fe51 	bl	800ffe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    score.resizeToCurrentText();
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	33f4      	adds	r3, #244	; 0xf4
 8010342:	4618      	mov	r0, r3
 8010344:	f007 fb84 	bl	8017a50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    score.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 801034e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010352:	2113      	movs	r1, #19
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff f95b 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 801035a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801035e:	4619      	mov	r1, r3
 8010360:	4620      	mov	r0, r4
 8010362:	f007 fb9f 	bl	8017aa4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010366:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801036a:	4618      	mov	r0, r3
 801036c:	f7fb fcf8 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>

    button1.setXY(569, -60);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010376:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 801037a:	f240 2139 	movw	r1, #569	; 0x239
 801037e:	4618      	mov	r0, r3
 8010380:	f7fc f8f1 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f503 749a 	add.w	r4, r3, #308	; 0x134
 801038a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801038e:	2100      	movs	r1, #0
 8010390:	4618      	mov	r0, r3
 8010392:	f7fe ffff 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801039a:	2101      	movs	r1, #1
 801039c:	4618      	mov	r0, r3
 801039e:	f7fe fff9 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 80103a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80103a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80103aa:	4619      	mov	r1, r3
 80103ac:	4620      	mov	r0, r4
 80103ae:	f007 fbb3 	bl	8017b18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    add(bg);
 80103b2:	687a      	ldr	r2, [r7, #4]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	3340      	adds	r3, #64	; 0x40
 80103b8:	4619      	mov	r1, r3
 80103ba:	4610      	mov	r0, r2
 80103bc:	f7ff f852 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	3370      	adds	r3, #112	; 0x70
 80103c6:	4619      	mov	r1, r3
 80103c8:	4610      	mov	r0, r2
 80103ca:	f7ff f84b 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gameover_text);
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	33b8      	adds	r3, #184	; 0xb8
 80103d4:	4619      	mov	r1, r3
 80103d6:	4610      	mov	r0, r2
 80103d8:	f7ff f844 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(score);
 80103dc:	687a      	ldr	r2, [r7, #4]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	33f4      	adds	r3, #244	; 0xf4
 80103e2:	4619      	mov	r1, r3
 80103e4:	4610      	mov	r0, r2
 80103e6:	f7ff f83d 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 80103ea:	687a      	ldr	r2, [r7, #4]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80103f2:	4619      	mov	r1, r3
 80103f4:	4610      	mov	r0, r2
 80103f6:	f7ff f835 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	4618      	mov	r0, r3
 80103fe:	376c      	adds	r7, #108	; 0x6c
 8010400:	46bd      	mov	sp, r7
 8010402:	bd90      	pop	{r4, r7, pc}
 8010404:	08027f20 	.word	0x08027f20
 8010408:	08010441 	.word	0x08010441
 801040c:	2000b3fc 	.word	0x2000b3fc
 8010410:	08026aac 	.word	0x08026aac
 8010414:	08027f98 	.word	0x08027f98
 8010418:	08026af0 	.word	0x08026af0
 801041c:	2000b400 	.word	0x2000b400
 8010420:	08026b34 	.word	0x08026b34
 8010424:	2000b408 	.word	0x2000b408
 8010428:	08026c0c 	.word	0x08026c0c

0801042c <_ZN16gameoverViewBase11setupScreenEv>:

void gameoverViewBase::setupScreen()
{
 801042c:	b480      	push	{r7}
 801042e:	b083      	sub	sp, #12
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]

}
 8010434:	bf00      	nop
 8010436:	370c      	adds	r7, #12
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr

08010440 <_ZN16gameoverViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void gameoverViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	3370      	adds	r3, #112	; 0x70
 801044e:	683a      	ldr	r2, [r7, #0]
 8010450:	429a      	cmp	r2, r3
 8010452:	d106      	bne.n	8010462 <_ZN16gameoverViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Pong
        //Go to Pong with no screen transition
        application().gotoPongScreenNoTransition();
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f7ff fe36 	bl	80100c6 <_ZN16gameoverViewBase11applicationEv>
 801045a:	4603      	mov	r3, r0
 801045c:	4618      	mov	r0, r3
 801045e:	f7fc fccf 	bl	800ce00 <_ZN23FrontendApplicationBase26gotoPongScreenNoTransitionEv>
    }
}
 8010462:	bf00      	nop
 8010464:	3708      	adds	r7, #8
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
	...

0801046c <_ZN8touchgfx4ViewI17gameoverPresenterEC1Ev>:
    View()
 801046c:	b580      	push	{r7, lr}
 801046e:	b082      	sub	sp, #8
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	4618      	mov	r0, r3
 8010478:	f009 ff68 	bl	801a34c <_ZN8touchgfx6ScreenC1Ev>
 801047c:	4a05      	ldr	r2, [pc, #20]	; (8010494 <_ZN8touchgfx4ViewI17gameoverPresenterEC1Ev+0x28>)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	601a      	str	r2, [r3, #0]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2200      	movs	r2, #0
 8010486:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	4618      	mov	r0, r3
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	08027f6c 	.word	0x08027f6c

08010498 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8010498:	b580      	push	{r7, lr}
 801049a:	b084      	sub	sp, #16
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	4639      	mov	r1, r7
 80104a4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff fac6 	bl	800fa3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80104b0:	4a08      	ldr	r2, [pc, #32]	; (80104d4 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	68ba      	ldr	r2, [r7, #8]
 80104ba:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	3308      	adds	r3, #8
 80104c0:	463a      	mov	r2, r7
 80104c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104c6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	4618      	mov	r0, r3
 80104ce:	3710      	adds	r7, #16
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	08027f54 	.word	0x08027f54

080104d8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	4a05      	ldr	r2, [pc, #20]	; (80104f8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	601a      	str	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7ff fad7 	bl	800fa9c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4618      	mov	r0, r3
 80104f2:	3708      	adds	r7, #8
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	08027f54 	.word	0x08027f54

080104fc <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f7ff ffe7 	bl	80104d8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801050a:	2110      	movs	r1, #16
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f015 f8bb 	bl	8025688 <_ZdlPvj>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4618      	mov	r0, r3
 8010516:	3708      	adds	r7, #8
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	4a08      	ldr	r2, [pc, #32]	; (8010548 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	601a      	str	r2, [r3, #0]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	3334      	adds	r3, #52	; 0x34
 801052e:	4618      	mov	r0, r3
 8010530:	f7fb fc16 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	4618      	mov	r0, r3
 8010538:	f7ff fb36 	bl	800fba8 <_ZN8touchgfx6ButtonD1Ev>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	4618      	mov	r0, r3
 8010540:	3708      	adds	r7, #8
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
 8010546:	bf00      	nop
 8010548:	0802a000 	.word	0x0802a000

0801054c <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f7ff ffe1 	bl	801051c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801055a:	2148      	movs	r1, #72	; 0x48
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f015 f893 	bl	8025688 <_ZdlPvj>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	4618      	mov	r0, r3
 8010566:	3708      	adds	r7, #8
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	4a05      	ldr	r2, [pc, #20]	; (801058c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	601a      	str	r2, [r3, #0]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4618      	mov	r0, r3
 801057e:	f7ff fb79 	bl	800fc74 <_ZN8touchgfx8TextAreaD1Ev>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	4618      	mov	r0, r3
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	08029e40 	.word	0x08029e40

08010590 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f7ff ffe7 	bl	801056c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801059e:	2140      	movs	r1, #64	; 0x40
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f015 f871 	bl	8025688 <_ZdlPvj>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	4618      	mov	r0, r3
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	68d2      	ldr	r2, [r2, #12]
 80105c2:	1052      	asrs	r2, r2, #1
 80105c4:	1898      	adds	r0, r3, r2
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	f003 0301 	and.w	r3, r3, #1
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d102      	bne.n	80105d8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	e00a      	b.n	80105ee <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	68d2      	ldr	r2, [r2, #12]
 80105e0:	1052      	asrs	r2, r2, #1
 80105e2:	4413      	add	r3, r2
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	6892      	ldr	r2, [r2, #8]
 80105ea:	4413      	add	r3, r2
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	6839      	ldr	r1, [r7, #0]
 80105f0:	4798      	blx	r3
    }
 80105f2:	bf00      	nop
 80105f4:	3708      	adds	r7, #8
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}

080105fa <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80105fa:	b480      	push	{r7}
 80105fc:	b083      	sub	sp, #12
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d010      	beq.n	801062c <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	689b      	ldr	r3, [r3, #8]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d107      	bne.n	8010622 <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	f003 0301 	and.w	r3, r3, #1
 801061a:	2b00      	cmp	r3, #0
 801061c:	d101      	bne.n	8010622 <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801061e:	2301      	movs	r3, #1
 8010620:	e000      	b.n	8010624 <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010622:	2300      	movs	r3, #0
 8010624:	2b01      	cmp	r3, #1
 8010626:	d001      	beq.n	801062c <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010628:	2301      	movs	r3, #1
 801062a:	e000      	b.n	801062e <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801062c:	2300      	movs	r3, #0
    }
 801062e:	4618      	mov	r0, r3
 8010630:	370c      	adds	r7, #12
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr

0801063a <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 801063a:	b480      	push	{r7}
 801063c:	b083      	sub	sp, #12
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
 8010642:	460b      	mov	r3, r1
 8010644:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	78fa      	ldrb	r2, [r7, #3]
 801064a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 801064e:	bf00      	nop
 8010650:	370c      	adds	r7, #12
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr
	...

0801065c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>:
class View : public Screen
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	4a05      	ldr	r2, [pc, #20]	; (801067c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev+0x20>)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	4618      	mov	r0, r3
 801066e:	f7fe fea1 	bl	800f3b4 <_ZN8touchgfx6ScreenD1Ev>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4618      	mov	r0, r3
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	08028034 	.word	0x08028034

08010680 <_ZN8touchgfx4ViewI14MusicPresenterED0Ev>:
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f7ff ffe7 	bl	801065c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>
 801068e:	2140      	movs	r1, #64	; 0x40
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f014 fff9 	bl	8025688 <_ZdlPvj>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4618      	mov	r0, r3
 801069a:	3708      	adds	r7, #8
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <_ZN13MusicViewBaseD1Ev>:

class MusicViewBase : public touchgfx::View<MusicPresenter>
{
public:
    MusicViewBase();
    virtual ~MusicViewBase() {}
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	4a27      	ldr	r2, [pc, #156]	; (8010748 <_ZN13MusicViewBaseD1Ev+0xa8>)
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	601a      	str	r2, [r3, #0]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80106b4:	4618      	mov	r0, r3
 80106b6:	f000 fd0f 	bl	80110d8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7ff fa93 	bl	800fbec <_ZN8touchgfx14ButtonWithIconD1Ev>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7ff ff25 	bl	801051c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80106d8:	4618      	mov	r0, r3
 80106da:	f7ff ff1f 	bl	801051c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7ff fa81 	bl	800fbec <_ZN8touchgfx14ButtonWithIconD1Ev>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7ff fa7b 	bl	800fbec <_ZN8touchgfx14ButtonWithIconD1Ev>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7ff fa75 	bl	800fbec <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010708:	4618      	mov	r0, r3
 801070a:	f7ff fa6f 	bl	800fbec <_ZN8touchgfx14ButtonWithIconD1Ev>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	33e8      	adds	r3, #232	; 0xe8
 8010712:	4618      	mov	r0, r3
 8010714:	f7ff ff2a 	bl	801056c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	33ac      	adds	r3, #172	; 0xac
 801071c:	4618      	mov	r0, r3
 801071e:	f7ff fa65 	bl	800fbec <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	3370      	adds	r3, #112	; 0x70
 8010726:	4618      	mov	r0, r3
 8010728:	f7ff faa4 	bl	800fc74 <_ZN8touchgfx8TextAreaD1Ev>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	3340      	adds	r3, #64	; 0x40
 8010730:	4618      	mov	r0, r3
 8010732:	f7ff fa17 	bl	800fb64 <_ZN8touchgfx3BoxD1Ev>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	4618      	mov	r0, r3
 801073a:	f7ff ff8f 	bl	801065c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4618      	mov	r0, r3
 8010742:	3708      	adds	r7, #8
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}
 8010748:	08027fd0 	.word	0x08027fd0

0801074c <_ZN13MusicViewBaseD0Ev>:
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f7ff ffa3 	bl	80106a0 <_ZN13MusicViewBaseD1Ev>
 801075a:	f44f 7146 	mov.w	r1, #792	; 0x318
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f014 ff92 	bl	8025688 <_ZdlPvj>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	4618      	mov	r0, r3
 8010768:	3708      	adds	r7, #8
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <_ZN13MusicViewBase11controlPlayEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void controlPlay()
 801076e:	b480      	push	{r7}
 8010770:	b083      	sub	sp, #12
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 8010776:	bf00      	nop
 8010778:	370c      	adds	r7, #12
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr

08010782 <_ZN13MusicViewBase11controlStopEv>:

    virtual void controlStop()
 8010782:	b480      	push	{r7}
 8010784:	b083      	sub	sp, #12
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 801078a:	bf00      	nop
 801078c:	370c      	adds	r7, #12
 801078e:	46bd      	mov	sp, r7
 8010790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010794:	4770      	bx	lr

08010796 <_ZN13MusicViewBase11controlPrevEv>:

    virtual void controlPrev()
 8010796:	b480      	push	{r7}
 8010798:	b083      	sub	sp, #12
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 801079e:	bf00      	nop
 80107a0:	370c      	adds	r7, #12
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr

080107aa <_ZN13MusicViewBase11controlNextEv>:

    virtual void controlNext()
 80107aa:	b480      	push	{r7}
 80107ac:	b083      	sub	sp, #12
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80107b2:	bf00      	nop
 80107b4:	370c      	adds	r7, #12
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr

080107be <_ZN13MusicViewBase17controlVolumeDownEv>:

    virtual void controlVolumeDown()
 80107be:	b480      	push	{r7}
 80107c0:	b083      	sub	sp, #12
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80107c6:	bf00      	nop
 80107c8:	370c      	adds	r7, #12
 80107ca:	46bd      	mov	sp, r7
 80107cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d0:	4770      	bx	lr

080107d2 <_ZN13MusicViewBase15controlVolumeUpEv>:

    virtual void controlVolumeUp()
 80107d2:	b480      	push	{r7}
 80107d4:	b083      	sub	sp, #12
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80107da:	bf00      	nop
 80107dc:	370c      	adds	r7, #12
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr

080107e6 <_ZN13MusicViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80107e6:	b580      	push	{r7, lr}
 80107e8:	b082      	sub	sp, #8
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80107ee:	f008 fdf7 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 80107f2:	4603      	mov	r3, r0
    }
 80107f4:	4618      	mov	r0, r3
 80107f6:	3708      	adds	r7, #8
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <_ZN13MusicViewBaseC1Ev>:
#include <gui_generated/music_screen/MusicViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MusicViewBase::MusicViewBase() :
 80107fc:	b590      	push	{r4, r7, lr}
 80107fe:	b0b7      	sub	sp, #220	; 0xdc
 8010800:	af02      	add	r7, sp, #8
 8010802:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MusicViewBase::buttonCallbackHandler)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	4618      	mov	r0, r3
 8010808:	f000 fc30 	bl	801106c <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev>
 801080c:	4a94      	ldr	r2, [pc, #592]	; (8010a60 <_ZN13MusicViewBaseC1Ev+0x264>)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	601a      	str	r2, [r3, #0]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	3340      	adds	r3, #64	; 0x40
 8010816:	4618      	mov	r0, r3
 8010818:	f7fe fe64 	bl	800f4e4 <_ZN8touchgfx3BoxC1Ev>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	3370      	adds	r3, #112	; 0x70
 8010820:	4618      	mov	r0, r3
 8010822:	f7fe ff0b 	bl	800f63c <_ZN8touchgfx8TextAreaC1Ev>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	33ac      	adds	r3, #172	; 0xac
 801082a:	4618      	mov	r0, r3
 801082c:	f007 fbc4 	bl	8017fb8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	33e8      	adds	r3, #232	; 0xe8
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff fbbd 	bl	800ffb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010840:	4618      	mov	r0, r3
 8010842:	f007 fbb9 	bl	8017fb8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801084c:	4618      	mov	r0, r3
 801084e:	f007 fbb3 	bl	8017fb8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010858:	4618      	mov	r0, r3
 801085a:	f007 fbad 	bl	8017fb8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010864:	4618      	mov	r0, r3
 8010866:	f007 fba7 	bl	8017fb8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010870:	4618      	mov	r0, r3
 8010872:	f007 fd01 	bl	8018278 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801087c:	4618      	mov	r0, r3
 801087e:	f007 fcfb 	bl	8018278 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010888:	4618      	mov	r0, r3
 801088a:	f007 fb95 	bl	8017fb8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f503 7042 	add.w	r0, r3, #776	; 0x308
 8010894:	4b73      	ldr	r3, [pc, #460]	; (8010a64 <_ZN13MusicViewBaseC1Ev+0x268>)
 8010896:	617b      	str	r3, [r7, #20]
 8010898:	2300      	movs	r3, #0
 801089a:	61bb      	str	r3, [r7, #24]
 801089c:	f107 0314 	add.w	r3, r7, #20
 80108a0:	cb0c      	ldmia	r3, {r2, r3}
 80108a2:	6879      	ldr	r1, [r7, #4]
 80108a4:	f000 fbf8 	bl	8011098 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80108ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80108b2:	9300      	str	r3, [sp, #0]
 80108b4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80108b8:	2200      	movs	r2, #0
 80108ba:	2100      	movs	r1, #0
 80108bc:	f7fb fdee 	bl	800c49c <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80108c6:	22ff      	movs	r2, #255	; 0xff
 80108c8:	21ff      	movs	r1, #255	; 0xff
 80108ca:	20ff      	movs	r0, #255	; 0xff
 80108cc:	f7fe ff5a 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80108d0:	4603      	mov	r3, r0
 80108d2:	4619      	mov	r1, r3
 80108d4:	4620      	mov	r0, r4
 80108d6:	f7fe fe2d 	bl	800f534 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea1.setXY(116, 0);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	3370      	adds	r3, #112	; 0x70
 80108de:	2200      	movs	r2, #0
 80108e0:	2174      	movs	r1, #116	; 0x74
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fb fe3f 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80108ee:	2200      	movs	r2, #0
 80108f0:	2100      	movs	r1, #0
 80108f2:	2000      	movs	r0, #0
 80108f4:	f7fe ff46 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80108f8:	4603      	mov	r3, r0
 80108fa:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 80108fe:	613b      	str	r3, [r7, #16]
        this->color = color;
 8010900:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010904:	693a      	ldr	r2, [r7, #16]
 8010906:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	3370      	adds	r3, #112	; 0x70
 801090c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010910:	2300      	movs	r3, #0
 8010912:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 8010916:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801091a:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 801091e:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010926:	f107 031c 	add.w	r3, r7, #28
 801092a:	2108      	movs	r1, #8
 801092c:	4618      	mov	r0, r3
 801092e:	f7fe fe6f 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 8010932:	f107 031c 	add.w	r3, r7, #28
 8010936:	4619      	mov	r1, r3
 8010938:	4620      	mov	r0, r4
 801093a:	f007 f8b3 	bl	8017aa4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 801093e:	f107 031c 	add.w	r3, r7, #28
 8010942:	4618      	mov	r0, r3
 8010944:	f7fb fa0c 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>

    Play_Button.setXY(48, 212);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	33ac      	adds	r3, #172	; 0xac
 801094c:	22d4      	movs	r2, #212	; 0xd4
 801094e:	2130      	movs	r1, #48	; 0x30
 8010950:	4618      	mov	r0, r3
 8010952:	f7fb fe08 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    Play_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID));
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 801095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010960:	2104      	movs	r1, #4
 8010962:	4618      	mov	r0, r3
 8010964:	f7fe fd16 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801096c:	2105      	movs	r1, #5
 801096e:	4618      	mov	r0, r3
 8010970:	f7fe fd10 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010978:	210c      	movs	r1, #12
 801097a:	4618      	mov	r0, r3
 801097c:	f7fe fd0a 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010980:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010984:	210c      	movs	r1, #12
 8010986:	4618      	mov	r0, r3
 8010988:	f7fe fd04 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 801098c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8010990:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010994:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8010998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801099c:	9300      	str	r3, [sp, #0]
 801099e:	4603      	mov	r3, r0
 80109a0:	4620      	mov	r0, r4
 80109a2:	f007 fa65 	bl	8017e70 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Play_Button.setIconXY(19, 14);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	33ac      	adds	r3, #172	; 0xac
 80109aa:	220e      	movs	r2, #14
 80109ac:	2113      	movs	r1, #19
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7fe fdec 	bl	800f58c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Play_Button.setAction(buttonCallback);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80109c0:	4619      	mov	r1, r3
 80109c2:	4610      	mov	r0, r2
 80109c4:	f7fe fd5d 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    MusicTextArea.setPosition(60, 109, 379, 54);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 80109ce:	2336      	movs	r3, #54	; 0x36
 80109d0:	9300      	str	r3, [sp, #0]
 80109d2:	f240 137b 	movw	r3, #379	; 0x17b
 80109d6:	226d      	movs	r2, #109	; 0x6d
 80109d8:	213c      	movs	r1, #60	; 0x3c
 80109da:	f7fb fd5f 	bl	800c49c <_ZN8touchgfx8Drawable11setPositionEssss>
    MusicTextArea.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 80109e4:	2200      	movs	r2, #0
 80109e6:	2100      	movs	r1, #0
 80109e8:	2000      	movs	r0, #0
 80109ea:	f7fe fecb 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80109ee:	4603      	mov	r3, r0
 80109f0:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80109f4:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80109f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80109fa:	68fa      	ldr	r2, [r7, #12]
 80109fc:	631a      	str	r2, [r3, #48]	; 0x30
    MusicTextArea.setLinespacing(0);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	33e8      	adds	r3, #232	; 0xe8
 8010a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010a06:	2300      	movs	r3, #0
 8010a08:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        linespace = space;
 8010a0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a10:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8010a14:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(MusicTextAreaBuffer, MUSICTEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f503 7439 	add.w	r4, r3, #740	; 0x2e4
 8010a1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a20:	2116      	movs	r1, #22
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fe fdf4 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 8010a28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010a30:	4b0d      	ldr	r3, [pc, #52]	; (8010a68 <_ZN13MusicViewBaseC1Ev+0x26c>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d105      	bne.n	8010a44 <_ZN13MusicViewBaseC1Ev+0x248>
 8010a38:	4b0c      	ldr	r3, [pc, #48]	; (8010a6c <_ZN13MusicViewBaseC1Ev+0x270>)
 8010a3a:	4a0d      	ldr	r2, [pc, #52]	; (8010a70 <_ZN13MusicViewBaseC1Ev+0x274>)
 8010a3c:	21b1      	movs	r1, #177	; 0xb1
 8010a3e:	480d      	ldr	r0, [pc, #52]	; (8010a74 <_ZN13MusicViewBaseC1Ev+0x278>)
 8010a40:	f014 fe4e 	bl	80256e0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010a44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010a48:	889a      	ldrh	r2, [r3, #4]
 8010a4a:	4b0b      	ldr	r3, [pc, #44]	; (8010a78 <_ZN13MusicViewBaseC1Ev+0x27c>)
 8010a4c:	881b      	ldrh	r3, [r3, #0]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d316      	bcc.n	8010a80 <_ZN13MusicViewBaseC1Ev+0x284>
 8010a52:	4b0a      	ldr	r3, [pc, #40]	; (8010a7c <_ZN13MusicViewBaseC1Ev+0x280>)
 8010a54:	4a06      	ldr	r2, [pc, #24]	; (8010a70 <_ZN13MusicViewBaseC1Ev+0x274>)
 8010a56:	21b2      	movs	r1, #178	; 0xb2
 8010a58:	4806      	ldr	r0, [pc, #24]	; (8010a74 <_ZN13MusicViewBaseC1Ev+0x278>)
 8010a5a:	f014 fe41 	bl	80256e0 <__assert_func>
 8010a5e:	bf00      	nop
 8010a60:	08027fd0 	.word	0x08027fd0
 8010a64:	08010fa5 	.word	0x08010fa5
 8010a68:	2000b3fc 	.word	0x2000b3fc
 8010a6c:	08026c10 	.word	0x08026c10
 8010a70:	08028060 	.word	0x08028060
 8010a74:	08026c54 	.word	0x08026c54
 8010a78:	2000b400 	.word	0x2000b400
 8010a7c:	08026c98 	.word	0x08026c98
        return texts->getText(typedTextId);
 8010a80:	4be9      	ldr	r3, [pc, #932]	; (8010e28 <_ZN13MusicViewBaseC1Ev+0x62c>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8010a86:	4611      	mov	r1, r2
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f001 ff05 	bl	8012898 <_ZNK8touchgfx5Texts7getTextEt>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	4ae6      	ldr	r2, [pc, #920]	; (8010e2c <_ZN13MusicViewBaseC1Ev+0x630>)
 8010a92:	2111      	movs	r1, #17
 8010a94:	4620      	mov	r0, r4
 8010a96:	f00a fefd 	bl	801b894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010a9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fb f95e 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>
    MusicTextArea.setWildcard(MusicTextAreaBuffer);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	4610      	mov	r0, r2
 8010ab4:	f7ff fa94 	bl	800ffe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MusicTextArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8010abe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010ac2:	210f      	movs	r1, #15
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7fe fda3 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 8010aca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010ace:	4619      	mov	r1, r3
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f006 ffe7 	bl	8017aa4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010ad6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7fb f940 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>

    Pause_Button.setXY(116, 212);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010ae6:	22d4      	movs	r2, #212	; 0xd4
 8010ae8:	2174      	movs	r1, #116	; 0x74
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fb fd3b 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    Pause_Button.setVisible(false);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010af6:	2100      	movs	r1, #0
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7ff fd9e 	bl	801063a <_ZN8touchgfx8Drawable10setVisibleEb>
    Pause_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID));
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f503 7494 	add.w	r4, r3, #296	; 0x128
 8010b04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010b08:	2104      	movs	r1, #4
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7fe fc42 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010b10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b14:	2105      	movs	r1, #5
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fe fc3c 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010b1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010b20:	210b      	movs	r1, #11
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7fe fc36 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010b28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b2c:	210b      	movs	r1, #11
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fe fc30 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010b34:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010b38:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010b3c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8010b40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b44:	9300      	str	r3, [sp, #0]
 8010b46:	4603      	mov	r3, r0
 8010b48:	4620      	mov	r0, r4
 8010b4a:	f007 f991 	bl	8017e70 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Pause_Button.setIconXY(17, 14);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010b54:	220e      	movs	r2, #14
 8010b56:	2111      	movs	r1, #17
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7fe fd17 	bl	800f58c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>

    Stop_Button.setXY(116, 212);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010b64:	22d4      	movs	r2, #212	; 0xd4
 8010b66:	2174      	movs	r1, #116	; 0x74
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fb fcfc 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    Stop_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID));
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8010b74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010b78:	2104      	movs	r1, #4
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fe fc0a 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010b80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010b84:	2105      	movs	r1, #5
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7fe fc04 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010b8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010b90:	2106      	movs	r1, #6
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7fe fbfe 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010b98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010b9c:	2106      	movs	r1, #6
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7fe fbf8 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010ba4:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8010ba8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010bac:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8010bb0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010bb4:	9300      	str	r3, [sp, #0]
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	4620      	mov	r0, r4
 8010bba:	f007 f959 	bl	8017e70 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Stop_Button.setIconXY(15, 15);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010bc4:	220f      	movs	r2, #15
 8010bc6:	210f      	movs	r1, #15
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7fe fcdf 	bl	800f58c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Stop_Button.setAction(buttonCallback);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010bda:	4619      	mov	r1, r3
 8010bdc:	4610      	mov	r0, r2
 8010bde:	f7fe fc50 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Prev_Button.setXY(188, 212);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010be8:	22d4      	movs	r2, #212	; 0xd4
 8010bea:	21bc      	movs	r1, #188	; 0xbc
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7fb fcba 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    Prev_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_BACK_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_BACK_32_ID));
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8010bf8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010bfc:	2104      	movs	r1, #4
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fe fbc8 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010c04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010c08:	2105      	movs	r1, #5
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fe fbc2 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010c10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010c14:	2109      	movs	r1, #9
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7fe fbbc 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010c1c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010c20:	2109      	movs	r1, #9
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7fe fbb6 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010c28:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010c2c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8010c30:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8010c34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010c38:	9300      	str	r3, [sp, #0]
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	4620      	mov	r0, r4
 8010c3e:	f007 f917 	bl	8017e70 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Prev_Button.setIconXY(14, 15);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010c48:	220f      	movs	r2, #15
 8010c4a:	210e      	movs	r1, #14
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7fe fc9d 	bl	800f58c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Prev_Button.setAction(buttonCallback);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010c5e:	4619      	mov	r1, r3
 8010c60:	4610      	mov	r0, r2
 8010c62:	f7fe fc0e 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Next_Button.setXY(256, 212);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010c6c:	22d4      	movs	r2, #212	; 0xd4
 8010c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7fb fc77 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    Next_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_NEXT_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_NEXT_32_ID));
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8010c7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010c82:	2104      	movs	r1, #4
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7fe fb85 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010c8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010c8e:	2105      	movs	r1, #5
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7fe fb7f 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010c96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010c9a:	210a      	movs	r1, #10
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7fe fb79 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010ca2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010ca6:	210a      	movs	r1, #10
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7fe fb73 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010cae:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8010cb2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010cb6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8010cba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010cbe:	9300      	str	r3, [sp, #0]
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f007 f8d4 	bl	8017e70 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Next_Button.setIconXY(14, 15);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010cce:	220f      	movs	r2, #15
 8010cd0:	210e      	movs	r1, #14
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fe fc5a 	bl	800f58c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Next_Button.setAction(buttonCallback);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	f7fe fbcb 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    VolUp_Button.setXY(390, 212);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010cf2:	22d4      	movs	r2, #212	; 0xd4
 8010cf4:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7fb fc34 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    VolUp_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010d04:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010d08:	2104      	movs	r1, #4
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7fe fb42 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010d10:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010d14:	2105      	movs	r1, #5
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fe fb3c 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010d1c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8010d20:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010d24:	4619      	mov	r1, r3
 8010d26:	4620      	mov	r0, r4
 8010d28:	f006 fef6 	bl	8017b18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    VolUp_Button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID31));
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010d32:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010d36:	2110      	movs	r1, #16
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7fe fc69 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 8010d3e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010d42:	4619      	mov	r1, r3
 8010d44:	4620      	mov	r0, r4
 8010d46:	f7ff f86d 	bl	800fe24 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8010d4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7fb f806 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>
    VolUp_Button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010d5a:	22ff      	movs	r2, #255	; 0xff
 8010d5c:	21ff      	movs	r1, #255	; 0xff
 8010d5e:	20ff      	movs	r0, #255	; 0xff
 8010d60:	f7fe fd10 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010d64:	4603      	mov	r3, r0
 8010d66:	4619      	mov	r1, r3
 8010d68:	4620      	mov	r0, r4
 8010d6a:	f7ff f86d 	bl	800fe48 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    VolUp_Button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010d74:	22ff      	movs	r2, #255	; 0xff
 8010d76:	21ff      	movs	r1, #255	; 0xff
 8010d78:	20ff      	movs	r0, #255	; 0xff
 8010d7a:	f7fe fd03 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	4619      	mov	r1, r3
 8010d82:	4620      	mov	r0, r4
 8010d84:	f7ff f86e 	bl	800fe64 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    VolUp_Button.setAction(buttonCallback);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f503 7206 	add.w	r2, r3, #536	; 0x218
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010d94:	4619      	mov	r1, r3
 8010d96:	4610      	mov	r0, r2
 8010d98:	f7fe fb73 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    VolDown_Button.setXY(323, 212);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010da2:	22d4      	movs	r2, #212	; 0xd4
 8010da4:	f240 1143 	movw	r1, #323	; 0x143
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7fb fbdc 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    VolDown_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010db4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010db8:	2104      	movs	r1, #4
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fe faea 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010dc0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010dc4:	2105      	movs	r1, #5
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fe fae4 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010dcc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8010dd0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	f006 fe9e 	bl	8017b18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    VolDown_Button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID32));
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010de2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010de6:	2111      	movs	r1, #17
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7fe fc11 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 8010dee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010df2:	4619      	mov	r1, r3
 8010df4:	4620      	mov	r0, r4
 8010df6:	f7ff f815 	bl	800fe24 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8010dfa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fa ffae 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>
    VolDown_Button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010e0a:	22ff      	movs	r2, #255	; 0xff
 8010e0c:	21ff      	movs	r1, #255	; 0xff
 8010e0e:	20ff      	movs	r0, #255	; 0xff
 8010e10:	f7fe fcb8 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e14:	4603      	mov	r3, r0
 8010e16:	4619      	mov	r1, r3
 8010e18:	4620      	mov	r0, r4
 8010e1a:	f7ff f815 	bl	800fe48 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    VolDown_Button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010e24:	e004      	b.n	8010e30 <_ZN13MusicViewBaseC1Ev+0x634>
 8010e26:	bf00      	nop
 8010e28:	2000b408 	.word	0x2000b408
 8010e2c:	08026d70 	.word	0x08026d70
 8010e30:	22ff      	movs	r2, #255	; 0xff
 8010e32:	21ff      	movs	r1, #255	; 0xff
 8010e34:	20ff      	movs	r0, #255	; 0xff
 8010e36:	f7fe fca5 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	4619      	mov	r1, r3
 8010e3e:	4620      	mov	r0, r4
 8010e40:	f7ff f810 	bl	800fe64 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    VolDown_Button.setAction(buttonCallback);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010e50:	4619      	mov	r1, r3
 8010e52:	4610      	mov	r0, r2
 8010e54:	f7fe fb15 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Back_Button.setXY(0, 0);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010e5e:	2200      	movs	r2, #0
 8010e60:	2100      	movs	r1, #0
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7fb fb7f 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f503 742a 	add.w	r4, r3, #680	; 0x2a8
 8010e6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010e72:	2102      	movs	r1, #2
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7fe fa8d 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010e7a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010e7e:	2103      	movs	r1, #3
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7fe fa87 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010e86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010e8a:	2108      	movs	r1, #8
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7fe fa81 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010e92:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010e96:	2108      	movs	r1, #8
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7fe fa7b 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8010e9e:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8010ea2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8010ea6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8010eaa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010eae:	9300      	str	r3, [sp, #0]
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	f006 ffdc 	bl	8017e70 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010ebe:	220f      	movs	r2, #15
 8010ec0:	2113      	movs	r1, #19
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fe fb62 	bl	800f58c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f503 722a 	add.w	r2, r3, #680	; 0x2a8
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	4610      	mov	r0, r2
 8010ed8:	f7fe fad3 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	3340      	adds	r3, #64	; 0x40
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	4610      	mov	r0, r2
 8010ee6:	f7fe fabd 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	3370      	adds	r3, #112	; 0x70
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	4610      	mov	r0, r2
 8010ef4:	f7fe fab6 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Play_Button);
 8010ef8:	687a      	ldr	r2, [r7, #4]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	33ac      	adds	r3, #172	; 0xac
 8010efe:	4619      	mov	r1, r3
 8010f00:	4610      	mov	r0, r2
 8010f02:	f7fe faaf 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MusicTextArea);
 8010f06:	687a      	ldr	r2, [r7, #4]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	33e8      	adds	r3, #232	; 0xe8
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	4610      	mov	r0, r2
 8010f10:	f7fe faa8 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pause_Button);
 8010f14:	687a      	ldr	r2, [r7, #4]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	4610      	mov	r0, r2
 8010f20:	f7fe faa0 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Stop_Button);
 8010f24:	687a      	ldr	r2, [r7, #4]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	4610      	mov	r0, r2
 8010f30:	f7fe fa98 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Prev_Button);
 8010f34:	687a      	ldr	r2, [r7, #4]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	4610      	mov	r0, r2
 8010f40:	f7fe fa90 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Next_Button);
 8010f44:	687a      	ldr	r2, [r7, #4]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	4610      	mov	r0, r2
 8010f50:	f7fe fa88 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VolUp_Button);
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	4610      	mov	r0, r2
 8010f60:	f7fe fa80 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VolDown_Button);
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	4610      	mov	r0, r2
 8010f70:	f7fe fa78 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	4610      	mov	r0, r2
 8010f80:	f7fe fa70 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	4618      	mov	r0, r3
 8010f88:	37d4      	adds	r7, #212	; 0xd4
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd90      	pop	{r4, r7, pc}
 8010f8e:	bf00      	nop

08010f90 <_ZN13MusicViewBase11setupScreenEv>:

void MusicViewBase::setupScreen()
{
 8010f90:	b480      	push	{r7}
 8010f92:	b083      	sub	sp, #12
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]

}
 8010f98:	bf00      	nop
 8010f9a:	370c      	adds	r7, #12
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa2:	4770      	bx	lr

08010fa4 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MusicViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6039      	str	r1, [r7, #0]
    if (&src == &Play_Button)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	33ac      	adds	r3, #172	; 0xac
 8010fb2:	683a      	ldr	r2, [r7, #0]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d106      	bne.n	8010fc6 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //control_play
        //When Play_Button clicked call virtual function
        //Call controlPlay
        controlPlay();
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	332c      	adds	r3, #44	; 0x2c
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	4798      	blx	r3
        //back_to_menu
        //When Back_Button clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
    }
}
 8010fc4:	e04d      	b.n	8011062 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
    else if (&src == &Stop_Button)
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010fcc:	683a      	ldr	r2, [r7, #0]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d106      	bne.n	8010fe0 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        controlStop();
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	3330      	adds	r3, #48	; 0x30
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	4798      	blx	r3
}
 8010fde:	e040      	b.n	8011062 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
    else if (&src == &Prev_Button)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010fe6:	683a      	ldr	r2, [r7, #0]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d106      	bne.n	8010ffa <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
        controlPrev();
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	3334      	adds	r3, #52	; 0x34
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	4798      	blx	r3
}
 8010ff8:	e033      	b.n	8011062 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
    else if (&src == &Next_Button)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8011000:	683a      	ldr	r2, [r7, #0]
 8011002:	429a      	cmp	r2, r3
 8011004:	d106      	bne.n	8011014 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x70>
        controlNext();
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	3338      	adds	r3, #56	; 0x38
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	4798      	blx	r3
}
 8011012:	e026      	b.n	8011062 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
    else if (&src == &VolUp_Button)
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f503 7306 	add.w	r3, r3, #536	; 0x218
 801101a:	683a      	ldr	r2, [r7, #0]
 801101c:	429a      	cmp	r2, r3
 801101e:	d106      	bne.n	801102e <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8a>
        controlVolumeUp();
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	3340      	adds	r3, #64	; 0x40
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	4798      	blx	r3
}
 801102c:	e019      	b.n	8011062 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
    else if (&src == &VolDown_Button)
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011034:	683a      	ldr	r2, [r7, #0]
 8011036:	429a      	cmp	r2, r3
 8011038:	d106      	bne.n	8011048 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa4>
        controlVolumeDown();
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	333c      	adds	r3, #60	; 0x3c
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	4798      	blx	r3
}
 8011046:	e00c      	b.n	8011062 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
    else if (&src == &Back_Button)
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801104e:	683a      	ldr	r2, [r7, #0]
 8011050:	429a      	cmp	r2, r3
 8011052:	d106      	bne.n	8011062 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
        application().gotoscreenScreenNoTransition();
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f7ff fbc6 	bl	80107e6 <_ZN13MusicViewBase11applicationEv>
 801105a:	4603      	mov	r3, r0
 801105c:	4618      	mov	r0, r3
 801105e:	f7fb fd2b 	bl	800cab8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
}
 8011062:	bf00      	nop
 8011064:	3708      	adds	r7, #8
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
	...

0801106c <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev>:
    View()
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	4618      	mov	r0, r3
 8011078:	f009 f968 	bl	801a34c <_ZN8touchgfx6ScreenC1Ev>
 801107c:	4a05      	ldr	r2, [pc, #20]	; (8011094 <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev+0x28>)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	601a      	str	r2, [r3, #0]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2200      	movs	r2, #0
 8011086:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	4618      	mov	r0, r3
 801108c:	3708      	adds	r7, #8
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
 8011092:	bf00      	nop
 8011094:	08028034 	.word	0x08028034

08011098 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011098:	b580      	push	{r7, lr}
 801109a:	b084      	sub	sp, #16
 801109c:	af00      	add	r7, sp, #0
 801109e:	60f8      	str	r0, [r7, #12]
 80110a0:	60b9      	str	r1, [r7, #8]
 80110a2:	4639      	mov	r1, r7
 80110a4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7fe fcc6 	bl	800fa3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80110b0:	4a08      	ldr	r2, [pc, #32]	; (80110d4 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	68ba      	ldr	r2, [r7, #8]
 80110ba:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	3308      	adds	r3, #8
 80110c0:	463a      	mov	r2, r7
 80110c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110c6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	4618      	mov	r0, r3
 80110ce:	3710      	adds	r7, #16
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	0802801c 	.word	0x0802801c

080110d8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	4a05      	ldr	r2, [pc, #20]	; (80110f8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	601a      	str	r2, [r3, #0]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7fe fcd7 	bl	800fa9c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	4618      	mov	r0, r3
 80110f2:	3708      	adds	r7, #8
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	0802801c 	.word	0x0802801c

080110fc <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7ff ffe7 	bl	80110d8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801110a:	2110      	movs	r1, #16
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f014 fabb 	bl	8025688 <_ZdlPvj>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	4618      	mov	r0, r3
 8011116:	3708      	adds	r7, #8
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	687a      	ldr	r2, [r7, #4]
 801112c:	68d2      	ldr	r2, [r2, #12]
 801112e:	1052      	asrs	r2, r2, #1
 8011130:	1898      	adds	r0, r3, r2
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	f003 0301 	and.w	r3, r3, #1
 801113a:	2b00      	cmp	r3, #0
 801113c:	d102      	bne.n	8011144 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	689b      	ldr	r3, [r3, #8]
 8011142:	e00a      	b.n	801115a <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	687a      	ldr	r2, [r7, #4]
 801114a:	68d2      	ldr	r2, [r2, #12]
 801114c:	1052      	asrs	r2, r2, #1
 801114e:	4413      	add	r3, r2
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	6892      	ldr	r2, [r2, #8]
 8011156:	4413      	add	r3, r2
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	6839      	ldr	r1, [r7, #0]
 801115c:	4798      	blx	r3
    }
 801115e:	bf00      	nop
 8011160:	3708      	adds	r7, #8
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}

08011166 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8011166:	b480      	push	{r7}
 8011168:	b083      	sub	sp, #12
 801116a:	af00      	add	r7, sp, #0
 801116c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d010      	beq.n	8011198 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	689b      	ldr	r3, [r3, #8]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d107      	bne.n	801118e <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	68db      	ldr	r3, [r3, #12]
 8011182:	f003 0301 	and.w	r3, r3, #1
 8011186:	2b00      	cmp	r3, #0
 8011188:	d101      	bne.n	801118e <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801118a:	2301      	movs	r3, #1
 801118c:	e000      	b.n	8011190 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801118e:	2300      	movs	r3, #0
 8011190:	2b01      	cmp	r3, #1
 8011192:	d001      	beq.n	8011198 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011194:	2301      	movs	r3, #1
 8011196:	e000      	b.n	801119a <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8011198:	2300      	movs	r3, #0
    }
 801119a:	4618      	mov	r0, r3
 801119c:	370c      	adds	r7, #12
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr

080111a6 <_ZNK8touchgfx9DragEvent9getDeltaXEv>:
    /**
     * Gets the distance in x coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaX() const
 80111a6:	b480      	push	{r7}
 80111a8:	b083      	sub	sp, #12
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	6078      	str	r0, [r7, #4]
    {
        return _newX - _oldX;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80111b4:	b29a      	uxth	r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80111bc:	b29b      	uxth	r3, r3
 80111be:	1ad3      	subs	r3, r2, r3
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	b21b      	sxth	r3, r3
    }
 80111c4:	4618      	mov	r0, r3
 80111c6:	370c      	adds	r7, #12
 80111c8:	46bd      	mov	sp, r7
 80111ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ce:	4770      	bx	lr

080111d0 <_ZNK8touchgfx9DragEvent9getDeltaYEv>:
    /**
     * Gets the distance in y coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaY() const
 80111d0:	b480      	push	{r7}
 80111d2:	b083      	sub	sp, #12
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
    {
        return _newY - _oldY;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80111de:	b29a      	uxth	r2, r3
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	b21b      	sxth	r3, r3
    }
 80111ee:	4618      	mov	r0, r3
 80111f0:	370c      	adds	r7, #12
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr

080111fa <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 80111fa:	b480      	push	{r7}
 80111fc:	b083      	sub	sp, #12
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8011206:	4618      	mov	r0, r3
 8011208:	370c      	adds	r7, #12
 801120a:	46bd      	mov	sp, r7
 801120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011210:	4770      	bx	lr
	...

08011214 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8011214:	b480      	push	{r7}
 8011216:	b083      	sub	sp, #12
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255),
          painterAlpha(255)
 801121c:	4a0a      	ldr	r2, [pc, #40]	; (8011248 <_ZN8touchgfx15AbstractPainterC1Ev+0x34>)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	601a      	str	r2, [r3, #0]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2200      	movs	r2, #0
 8011226:	809a      	strh	r2, [r3, #4]
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2200      	movs	r2, #0
 801122c:	80da      	strh	r2, [r3, #6]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	22ff      	movs	r2, #255	; 0xff
 8011232:	721a      	strb	r2, [r3, #8]
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	22ff      	movs	r2, #255	; 0xff
 8011238:	725a      	strb	r2, [r3, #9]
    {
    }
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	4618      	mov	r0, r3
 801123e:	370c      	adds	r7, #12
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr
 8011248:	08028208 	.word	0x08028208

0801124c <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 801124c:	b480      	push	{r7}
 801124e:	b083      	sub	sp, #12
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
    {
 8011254:	4a04      	ldr	r2, [pc, #16]	; (8011268 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	601a      	str	r2, [r3, #0]
    }
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	4618      	mov	r0, r3
 801125e:	370c      	adds	r7, #12
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr
 8011268:	08028208 	.word	0x08028208

0801126c <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
    }
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7ff ffe9 	bl	801124c <_ZN8touchgfx15AbstractPainterD1Ev>
 801127a:	210c      	movs	r1, #12
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f014 fa03 	bl	8025688 <_ZdlPvj>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	4618      	mov	r0, r3
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <_ZN8touchgfx15AbstractPainter8setAlphaEh>:
     *       AbstractPainter for better performance.
     */
    virtual void render(uint8_t* ptr, int x, int xAdjust, int y, unsigned count, const uint8_t* covers) = 0;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 801128c:	b480      	push	{r7}
 801128e:	b083      	sub	sp, #12
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	460b      	mov	r3, r1
 8011296:	70fb      	strb	r3, [r7, #3]
    {
        painterAlpha = newAlpha;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	78fa      	ldrb	r2, [r7, #3]
 801129c:	725a      	strb	r2, [r3, #9]
    }
 801129e:	bf00      	nop
 80112a0:	370c      	adds	r7, #12
 80112a2:	46bd      	mov	sp, r7
 80112a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a8:	4770      	bx	lr

080112aa <_ZNK8touchgfx15AbstractPainter8getAlphaEv>:

    /** @copydoc Image::getAlpha */
    virtual uint8_t getAlpha() const
 80112aa:	b480      	push	{r7}
 80112ac:	b083      	sub	sp, #12
 80112ae:	af00      	add	r7, sp, #0
 80112b0:	6078      	str	r0, [r7, #4]
    {
        return painterAlpha;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	7a5b      	ldrb	r3, [r3, #9]
    }
 80112b6:	4618      	mov	r0, r3
 80112b8:	370c      	adds	r7, #12
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr

080112c2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 80112c2:	b480      	push	{r7}
 80112c4:	b083      	sub	sp, #12
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	6078      	str	r0, [r7, #4]
 80112ca:	6039      	str	r1, [r7, #0]
            : v(i)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	683a      	ldr	r2, [r7, #0]
 80112d0:	601a      	str	r2, [r3, #0]
        {
        }
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	4618      	mov	r0, r3
 80112d6:	370c      	adds	r7, #12
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr

080112e0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     *
     * @note The painter set with setPainter() can also have an alpha value. The alpha value of
     *       the painter and the alpha value of the CanvasWidget are combine to a single
     *       alpha value.
     */
    virtual void setAlpha(uint8_t alpha)
 80112e0:	b480      	push	{r7}
 80112e2:	b083      	sub	sp, #12
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	460b      	mov	r3, r1
 80112ea:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	78fa      	ldrb	r2, [r7, #3]
 80112f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 80112f4:	bf00      	nop
 80112f6:	370c      	adds	r7, #12
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr

08011300 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     *
     * @return Gets the current alpha value of the Box.
     *
     * @see setAlpha
     */
    virtual uint8_t getAlpha() const
 8011300:	b480      	push	{r7}
 8011302:	b083      	sub	sp, #12
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 801130e:	4618      	mov	r0, r3
 8011310:	370c      	adds	r7, #12
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr
	...

0801131c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 801131c:	b580      	push	{r7, lr}
 801131e:	b084      	sub	sp, #16
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	4618      	mov	r0, r3
 8011328:	f7ff ff74 	bl	8011214 <_ZN8touchgfx15AbstractPainterC1Ev>
 801132c:	4a27      	ldr	r2, [pc, #156]	; (80113cc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb0>)
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	601a      	str	r2, [r3, #0]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2200      	movs	r2, #0
 8011336:	60da      	str	r2, [r3, #12]
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2200      	movs	r2, #0
 801133c:	611a      	str	r2, [r3, #16]
 801133e:	2301      	movs	r3, #1
 8011340:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8011342:	f7fb f9f5 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 8011346:	4602      	mov	r2, r0
 8011348:	6813      	ldr	r3, [r2, #0]
 801134a:	3320      	adds	r3, #32
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	4610      	mov	r0, r2
 8011350:	4798      	blx	r3
 8011352:	4603      	mov	r3, r0
 8011354:	461a      	mov	r2, r3
 8011356:	7bfb      	ldrb	r3, [r7, #15]
 8011358:	4293      	cmp	r3, r2
 801135a:	bf0c      	ite	eq
 801135c:	2301      	moveq	r3, #1
 801135e:	2300      	movne	r3, #0
 8011360:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 8011362:	f7fb f9d9 	bl	800c718 <_ZN8touchgfx3HAL11getInstanceEv>
 8011366:	4603      	mov	r3, r0
 8011368:	4618      	mov	r0, r3
 801136a:	f7ff ff46 	bl	80111fa <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 801136e:	4603      	mov	r3, r0
 8011370:	2b00      	cmp	r3, #0
 8011372:	bf14      	ite	ne
 8011374:	2301      	movne	r3, #1
 8011376:	2300      	moveq	r3, #0
 8011378:	b2db      	uxtb	r3, r3
 801137a:	2b00      	cmp	r3, #0
 801137c:	d016      	beq.n	80113ac <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x90>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 801137e:	f7fb f9cb 	bl	800c718 <_ZN8touchgfx3HAL11getInstanceEv>
 8011382:	4603      	mov	r3, r0
 8011384:	4618      	mov	r0, r3
 8011386:	f7ff ff38 	bl	80111fa <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 801138a:	4602      	mov	r2, r0
 801138c:	6813      	ldr	r3, [r2, #0]
 801138e:	3320      	adds	r3, #32
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	4610      	mov	r0, r2
 8011394:	4798      	blx	r3
 8011396:	4603      	mov	r3, r0
 8011398:	461a      	mov	r2, r3
 801139a:	7bfb      	ldrb	r3, [r7, #15]
 801139c:	4293      	cmp	r3, r2
 801139e:	bf0c      	ite	eq
 80113a0:	2301      	moveq	r3, #1
 80113a2:	2300      	movne	r3, #0
 80113a4:	b2da      	uxtb	r2, r3
 80113a6:	7bbb      	ldrb	r3, [r7, #14]
 80113a8:	4313      	orrs	r3, r2
 80113aa:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 80113ac:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d105      	bne.n	80113be <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xa2>
 80113b2:	4b07      	ldr	r3, [pc, #28]	; (80113d0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb4>)
 80113b4:	4a07      	ldr	r2, [pc, #28]	; (80113d4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 80113b6:	212b      	movs	r1, #43	; 0x2b
 80113b8:	4807      	ldr	r0, [pc, #28]	; (80113d8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 80113ba:	f014 f991 	bl	80256e0 <__assert_func>
 80113be:	bf00      	nop
    }
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	4618      	mov	r0, r3
 80113c4:	3710      	adds	r7, #16
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	080297cc 	.word	0x080297cc
 80113d0:	08026df8 	.word	0x08026df8
 80113d4:	0802821c 	.word	0x0802821c
 80113d8:	08026e58 	.word	0x08026e58

080113dc <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	4a05      	ldr	r2, [pc, #20]	; (80113fc <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	601a      	str	r2, [r3, #0]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7ff ff2d 	bl	801124c <_ZN8touchgfx15AbstractPainterD1Ev>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	4618      	mov	r0, r3
 80113f6:	3708      	adds	r7, #8
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}
 80113fc:	080297cc 	.word	0x080297cc

08011400 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f7ff ffe7 	bl	80113dc <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801140e:	2114      	movs	r1, #20
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f014 f939 	bl	8025688 <_ZdlPvj>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	4618      	mov	r0, r3
 801141a:	3708      	adds	r7, #8
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     * @param  alpha (Optional) the alpha, default is 255 i.e. solid.
     */
    PainterRGB888(colortype color = 0, uint8_t alpha = 255)
 8011420:	b580      	push	{r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	4613      	mov	r3, r2
 801142c:	71fb      	strb	r3, [r7, #7]
        : AbstractPainterRGB888()
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	4618      	mov	r0, r3
 8011432:	f7ff ff73 	bl	801131c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8011436:	4a09      	ldr	r2, [pc, #36]	; (801145c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x3c>)
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	601a      	str	r2, [r3, #0]
    {
        setColor(color);
 801143c:	68b9      	ldr	r1, [r7, #8]
 801143e:	68f8      	ldr	r0, [r7, #12]
 8011440:	f000 f80e 	bl	8011460 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        setAlpha(alpha);
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	79fa      	ldrb	r2, [r7, #7]
 8011448:	4611      	mov	r1, r2
 801144a:	4618      	mov	r0, r3
 801144c:	f7ff ff1e 	bl	801128c <_ZN8touchgfx15AbstractPainter8setAlphaEh>
    }
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	4618      	mov	r0, r3
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	0802992c 	.word	0x0802992c

08011460 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color and alpha to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 8011460:	b580      	push	{r7, lr}
 8011462:	b086      	sub	sp, #24
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	617b      	str	r3, [r7, #20]
     *
     * @see LCD16bpp::getRedFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getRedColor(colortype color)
    {
        return HAL::lcd().getRedColor(color);
 801146e:	f7fb f95f 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 8011472:	4602      	mov	r2, r0
 8011474:	6813      	ldr	r3, [r2, #0]
 8011476:	332c      	adds	r3, #44	; 0x2c
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	6979      	ldr	r1, [r7, #20]
 801147c:	4610      	mov	r0, r2
 801147e:	4798      	blx	r3
 8011480:	4603      	mov	r3, r0
 8011482:	461a      	mov	r2, r3
    {
        painterRed = Color::getRedColor(color);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	751a      	strb	r2, [r3, #20]
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	613b      	str	r3, [r7, #16]
     *
     * @see LCD16bpp::getGreenFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreenColor(colortype color)
    {
        return HAL::lcd().getGreenColor(color);
 801148c:	f7fb f950 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 8011490:	4602      	mov	r2, r0
 8011492:	6813      	ldr	r3, [r2, #0]
 8011494:	3330      	adds	r3, #48	; 0x30
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	6939      	ldr	r1, [r7, #16]
 801149a:	4610      	mov	r0, r2
 801149c:	4798      	blx	r3
 801149e:	4603      	mov	r3, r0
 80114a0:	461a      	mov	r2, r3
        painterGreen = Color::getGreenColor(color);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	755a      	strb	r2, [r3, #21]
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	60fb      	str	r3, [r7, #12]
     *
     * @see LCD16bpp::getBlueFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlueColor(colortype color)
    {
        return HAL::lcd().getBlueColor(color);
 80114aa:	f7fb f941 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 80114ae:	4602      	mov	r2, r0
 80114b0:	6813      	ldr	r3, [r2, #0]
 80114b2:	3334      	adds	r3, #52	; 0x34
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	68f9      	ldr	r1, [r7, #12]
 80114b8:	4610      	mov	r0, r2
 80114ba:	4798      	blx	r3
 80114bc:	4603      	mov	r3, r0
 80114be:	461a      	mov	r2, r3
        painterBlue = Color::getBlueColor(color);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	759a      	strb	r2, [r3, #22]
    }
 80114c4:	bf00      	nop
 80114c6:	3718      	adds	r7, #24
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}

080114cc <_ZN8touchgfx4ViewI13PongPresenterED1Ev>:
class View : public Screen
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b082      	sub	sp, #8
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
 80114d4:	4a05      	ldr	r2, [pc, #20]	; (80114ec <_ZN8touchgfx4ViewI13PongPresenterED1Ev+0x20>)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	601a      	str	r2, [r3, #0]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fd ff69 	bl	800f3b4 <_ZN8touchgfx6ScreenD1Ev>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	4618      	mov	r0, r3
 80114e6:	3708      	adds	r7, #8
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	080281d4 	.word	0x080281d4

080114f0 <_ZN8touchgfx4ViewI13PongPresenterED0Ev>:
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b082      	sub	sp, #8
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f7ff ffe7 	bl	80114cc <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 80114fe:	2140      	movs	r1, #64	; 0x40
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f014 f8c1 	bl	8025688 <_ZdlPvj>
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	4618      	mov	r0, r3
 801150a:	3708      	adds	r7, #8
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <_ZN12PongViewBaseD1Ev>:

class PongViewBase : public touchgfx::View<PongPresenter>
{
public:
    PongViewBase();
    virtual ~PongViewBase() {}
 8011510:	b580      	push	{r7, lr}
 8011512:	b082      	sub	sp, #8
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	4a1b      	ldr	r2, [pc, #108]	; (8011588 <_ZN12PongViewBaseD1Ev+0x78>)
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	601a      	str	r2, [r3, #0]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011524:	4618      	mov	r0, r3
 8011526:	f000 fb99 	bl	8011c5c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011530:	4618      	mov	r0, r3
 8011532:	f7fe fb39 	bl	800fba8 <_ZN8touchgfx6ButtonD1Ev>
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 801153c:	4618      	mov	r0, r3
 801153e:	f7fe fb55 	bl	800fbec <_ZN8touchgfx14ButtonWithIconD1Ev>
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011548:	4618      	mov	r0, r3
 801154a:	f7ff f80f 	bl	801056c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	33ec      	adds	r3, #236	; 0xec
 8011552:	4618      	mov	r0, r3
 8011554:	f000 fba4 	bl	8011ca0 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	33d4      	adds	r3, #212	; 0xd4
 801155c:	4618      	mov	r0, r3
 801155e:	f000 fbe3 	bl	8011d28 <_ZN8touchgfx13PainterRGB888D1Ev>
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	336c      	adds	r3, #108	; 0x6c
 8011566:	4618      	mov	r0, r3
 8011568:	f000 fbbc 	bl	8011ce4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	3340      	adds	r3, #64	; 0x40
 8011570:	4618      	mov	r0, r3
 8011572:	f7fe fb5d 	bl	800fc30 <_ZN8touchgfx5ImageD1Ev>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4618      	mov	r0, r3
 801157a:	f7ff ffa7 	bl	80114cc <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4618      	mov	r0, r3
 8011582:	3708      	adds	r7, #8
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	08028098 	.word	0x08028098

0801158c <_ZN12PongViewBaseD0Ev>:
 801158c:	b580      	push	{r7, lr}
 801158e:	b082      	sub	sp, #8
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f7ff ffbb 	bl	8011510 <_ZN12PongViewBaseD1Ev>
 801159a:	f641 6124 	movw	r1, #7716	; 0x1e24
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f014 f872 	bl	8025688 <_ZdlPvj>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4618      	mov	r0, r3
 80115a8:	3708      	adds	r7, #8
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}

080115ae <_ZN12PongViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80115ae:	b580      	push	{r7, lr}
 80115b0:	b082      	sub	sp, #8
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80115b6:	f007 ff13 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 80115ba:	4603      	mov	r3, r0
    }
 80115bc:	4618      	mov	r0, r3
 80115be:	3708      	adds	r7, #8
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <_ZN12PongViewBaseC1Ev>:
#include <gui_generated/pong_screen/PongViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

PongViewBase::PongViewBase() :
 80115c4:	b590      	push	{r4, r7, lr}
 80115c6:	b099      	sub	sp, #100	; 0x64
 80115c8:	af02      	add	r7, sp, #8
 80115ca:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &PongViewBase::buttonCallbackHandler)
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4618      	mov	r0, r3
 80115d0:	f000 fa62 	bl	8011a98 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>
 80115d4:	4a7e      	ldr	r2, [pc, #504]	; (80117d0 <_ZN12PongViewBaseC1Ev+0x20c>)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	601a      	str	r2, [r3, #0]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80115e0:	f107 030c 	add.w	r3, r7, #12
 80115e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fd fed3 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 80115ee:	f107 030c 	add.w	r3, r7, #12
 80115f2:	4619      	mov	r1, r3
 80115f4:	4620      	mov	r0, r4
 80115f6:	f7fd ffe1 	bl	800f5bc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	336c      	adds	r3, #108	; 0x6c
 80115fe:	4618      	mov	r0, r3
 8011600:	f000 faa4 	bl	8011b4c <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 801160a:	f107 0310 	add.w	r3, r7, #16
 801160e:	2100      	movs	r1, #0
 8011610:	4618      	mov	r0, r3
 8011612:	f7fd feb0 	bl	800f376 <_ZN8touchgfx9colortypeC1Em>
 8011616:	22ff      	movs	r2, #255	; 0xff
 8011618:	6939      	ldr	r1, [r7, #16]
 801161a:	4620      	mov	r0, r4
 801161c:	f7ff ff00 	bl	8011420 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	33ec      	adds	r3, #236	; 0xec
 8011624:	4618      	mov	r0, r3
 8011626:	f000 fab3 	bl	8011b90 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011630:	4618      	mov	r0, r3
 8011632:	f7fe fcbf 	bl	800ffb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 801163c:	4618      	mov	r0, r3
 801163e:	f006 fcbb 	bl	8017fb8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011648:	4618      	mov	r0, r3
 801164a:	f7fe fbb7 	bl	800fdbc <_ZN8touchgfx6ButtonC1Ev>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
 8011654:	4b5f      	ldr	r3, [pc, #380]	; (80117d4 <_ZN12PongViewBaseC1Ev+0x210>)
 8011656:	617b      	str	r3, [r7, #20]
 8011658:	2300      	movs	r3, #0
 801165a:	61bb      	str	r3, [r7, #24]
 801165c:	f107 0314 	add.w	r3, r7, #20
 8011660:	cb0c      	ldmia	r3, {r2, r3}
 8011662:	6879      	ldr	r1, [r7, #4]
 8011664:	f000 faac 	bl	8011bc0 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801166e:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8011672:	4618      	mov	r0, r3
 8011674:	f006 fe2c 	bl	80182d0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    image1.setXY(0, 0);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	3340      	adds	r3, #64	; 0x40
 801167c:	2200      	movs	r2, #0
 801167e:	2100      	movs	r1, #0
 8011680:	4618      	mov	r0, r3
 8011682:	f7fa ff70 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_S_ID));
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801168c:	f107 031c 	add.w	r3, r7, #28
 8011690:	210d      	movs	r1, #13
 8011692:	4618      	mov	r0, r3
 8011694:	f7fd fe7e 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8011698:	f107 031c 	add.w	r3, r7, #28
 801169c:	4619      	mov	r1, r3
 801169e:	4620      	mov	r0, r4
 80116a0:	f006 fcae 	bl	8018000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    ball.setPosition(200, 85, 80, 80);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80116aa:	2350      	movs	r3, #80	; 0x50
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	2350      	movs	r3, #80	; 0x50
 80116b0:	2255      	movs	r2, #85	; 0x55
 80116b2:	21c8      	movs	r1, #200	; 0xc8
 80116b4:	f7fa fef2 	bl	800c49c <_ZN8touchgfx8Drawable11setPositionEssss>
    ball.setCenter(40, 40);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	336c      	adds	r3, #108	; 0x6c
 80116bc:	2228      	movs	r2, #40	; 0x28
 80116be:	2128      	movs	r1, #40	; 0x28
 80116c0:	4618      	mov	r0, r3
 80116c2:	f000 f99d 	bl	8011a00 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    ball.setRadius(20);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	336c      	adds	r3, #108	; 0x6c
 80116ca:	2114      	movs	r1, #20
 80116cc:	4618      	mov	r0, r3
 80116ce:	f000 fa97 	bl	8011c00 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    ball.setLineWidth(0);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	336c      	adds	r3, #108	; 0x6c
 80116d6:	2100      	movs	r1, #0
 80116d8:	4618      	mov	r0, r3
 80116da:	f000 faa8 	bl	8011c2e <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    ball.setArc(0, 360);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	336c      	adds	r3, #108	; 0x6c
 80116e2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80116e6:	2100      	movs	r1, #0
 80116e8:	4618      	mov	r0, r3
 80116ea:	f000 f9af 	bl	8011a4c <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    ballPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(6, 255, 141));
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 80116f4:	228d      	movs	r2, #141	; 0x8d
 80116f6:	21ff      	movs	r1, #255	; 0xff
 80116f8:	2006      	movs	r0, #6
 80116fa:	f7fe f843 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80116fe:	4603      	mov	r3, r0
 8011700:	4619      	mov	r1, r3
 8011702:	4620      	mov	r0, r4
 8011704:	f7ff feac 	bl	8011460 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    ball.setPainter(ballPainter);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	33d4      	adds	r3, #212	; 0xd4
 8011712:	4619      	mov	r1, r3
 8011714:	4610      	mov	r0, r2
 8011716:	f005 fe3d 	bl	8017394 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    paddle1.setPosition(66, 212, 134, 29);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8011720:	231d      	movs	r3, #29
 8011722:	9300      	str	r3, [sp, #0]
 8011724:	2386      	movs	r3, #134	; 0x86
 8011726:	22d4      	movs	r2, #212	; 0xd4
 8011728:	2142      	movs	r1, #66	; 0x42
 801172a:	f7fa feb7 	bl	800c49c <_ZN8touchgfx8Drawable11setPositionEssss>
    paddle1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 171, 6));
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 8011734:	2206      	movs	r2, #6
 8011736:	21ab      	movs	r1, #171	; 0xab
 8011738:	20ff      	movs	r0, #255	; 0xff
 801173a:	f7fe f823 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801173e:	4603      	mov	r3, r0
 8011740:	4619      	mov	r1, r3
 8011742:	4620      	mov	r0, r4
 8011744:	f7fd fef6 	bl	800f534 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    score.setXY(363, 0);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801174e:	2200      	movs	r2, #0
 8011750:	f240 116b 	movw	r1, #363	; 0x16b
 8011754:	4618      	mov	r0, r3
 8011756:	f7fa ff06 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    score.setColor(touchgfx::Color::getColorFrom24BitRGB(18, 252, 62));
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 8011760:	223e      	movs	r2, #62	; 0x3e
 8011762:	21fc      	movs	r1, #252	; 0xfc
 8011764:	2012      	movs	r0, #18
 8011766:	f7fe f80d 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801176a:	4603      	mov	r3, r0
 801176c:	64bc      	str	r4, [r7, #72]	; 0x48
 801176e:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8011770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011772:	68ba      	ldr	r2, [r7, #8]
 8011774:	631a      	str	r2, [r3, #48]	; 0x30
    score.setLinespacing(0);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801177c:	653b      	str	r3, [r7, #80]	; 0x50
 801177e:	2300      	movs	r3, #0
 8011780:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        linespace = space;
 8011784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011786:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801178a:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID29).getText());
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 8011792:	f107 0320 	add.w	r3, r7, #32
 8011796:	210e      	movs	r1, #14
 8011798:	4618      	mov	r0, r3
 801179a:	f7fd ff39 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 801179e:	f107 0320 	add.w	r3, r7, #32
 80117a2:	657b      	str	r3, [r7, #84]	; 0x54
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80117a4:	4b0c      	ldr	r3, [pc, #48]	; (80117d8 <_ZN12PongViewBaseC1Ev+0x214>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d105      	bne.n	80117b8 <_ZN12PongViewBaseC1Ev+0x1f4>
 80117ac:	4b0b      	ldr	r3, [pc, #44]	; (80117dc <_ZN12PongViewBaseC1Ev+0x218>)
 80117ae:	4a0c      	ldr	r2, [pc, #48]	; (80117e0 <_ZN12PongViewBaseC1Ev+0x21c>)
 80117b0:	21b1      	movs	r1, #177	; 0xb1
 80117b2:	480c      	ldr	r0, [pc, #48]	; (80117e4 <_ZN12PongViewBaseC1Ev+0x220>)
 80117b4:	f013 ff94 	bl	80256e0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80117b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117ba:	889a      	ldrh	r2, [r3, #4]
 80117bc:	4b0a      	ldr	r3, [pc, #40]	; (80117e8 <_ZN12PongViewBaseC1Ev+0x224>)
 80117be:	881b      	ldrh	r3, [r3, #0]
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d315      	bcc.n	80117f0 <_ZN12PongViewBaseC1Ev+0x22c>
 80117c4:	4b09      	ldr	r3, [pc, #36]	; (80117ec <_ZN12PongViewBaseC1Ev+0x228>)
 80117c6:	4a06      	ldr	r2, [pc, #24]	; (80117e0 <_ZN12PongViewBaseC1Ev+0x21c>)
 80117c8:	21b2      	movs	r1, #178	; 0xb2
 80117ca:	4806      	ldr	r0, [pc, #24]	; (80117e4 <_ZN12PongViewBaseC1Ev+0x220>)
 80117cc:	f013 ff88 	bl	80256e0 <__assert_func>
 80117d0:	08028098 	.word	0x08028098
 80117d4:	080119b9 	.word	0x080119b9
 80117d8:	2000b3fc 	.word	0x2000b3fc
 80117dc:	08026eb8 	.word	0x08026eb8
 80117e0:	08028258 	.word	0x08028258
 80117e4:	08026efc 	.word	0x08026efc
 80117e8:	2000b400 	.word	0x2000b400
 80117ec:	08026f40 	.word	0x08026f40
        return texts->getText(typedTextId);
 80117f0:	4b6a      	ldr	r3, [pc, #424]	; (801199c <_ZN12PongViewBaseC1Ev+0x3d8>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80117f6:	4611      	mov	r1, r2
 80117f8:	4618      	mov	r0, r3
 80117fa:	f001 f84d 	bl	8012898 <_ZNK8touchgfx5Texts7getTextEt>
 80117fe:	4603      	mov	r3, r0
 8011800:	4a67      	ldr	r2, [pc, #412]	; (80119a0 <_ZN12PongViewBaseC1Ev+0x3dc>)
 8011802:	2114      	movs	r1, #20
 8011804:	4620      	mov	r0, r4
 8011806:	f00a f845 	bl	801b894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801180a:	f107 0320 	add.w	r3, r7, #32
 801180e:	4618      	mov	r0, r3
 8011810:	f7fa faa6 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>
    score.setWildcard(scoreBuffer);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8011820:	4619      	mov	r1, r3
 8011822:	4610      	mov	r0, r2
 8011824:	f7fe fbdc 	bl	800ffe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    score.resizeToCurrentText();
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801182e:	4618      	mov	r0, r3
 8011830:	f006 f90e 	bl	8017a50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    score.setTypedText(touchgfx::TypedText(T_SINGLEUSEID28));
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 801183a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801183e:	210d      	movs	r1, #13
 8011840:	4618      	mov	r0, r3
 8011842:	f7fd fee5 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 8011846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801184a:	4619      	mov	r1, r3
 801184c:	4620      	mov	r0, r4
 801184e:	f006 f929 	bl	8017aa4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8011852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011856:	4618      	mov	r0, r3
 8011858:	f7fa fa82 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>

    Back_Button.setXY(0, 0);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011862:	2200      	movs	r2, #0
 8011864:	2100      	movs	r1, #0
 8011866:	4618      	mov	r0, r3
 8011868:	f7fa fe7d 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f503 74ae 	add.w	r4, r3, #348	; 0x15c
 8011872:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011876:	2102      	movs	r1, #2
 8011878:	4618      	mov	r0, r3
 801187a:	f7fd fd8b 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 801187e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011882:	2103      	movs	r1, #3
 8011884:	4618      	mov	r0, r3
 8011886:	f7fd fd85 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 801188a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801188e:	2108      	movs	r1, #8
 8011890:	4618      	mov	r0, r3
 8011892:	f7fd fd7f 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8011896:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801189a:	2108      	movs	r1, #8
 801189c:	4618      	mov	r0, r3
 801189e:	f7fd fd79 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 80118a2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80118a6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80118aa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80118ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80118b2:	9300      	str	r3, [sp, #0]
 80118b4:	4603      	mov	r3, r0
 80118b6:	4620      	mov	r0, r4
 80118b8:	f006 fada 	bl	8017e70 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80118c2:	220f      	movs	r2, #15
 80118c4:	2113      	movs	r1, #19
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7fd fe60 	bl	800f58c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80118d8:	4619      	mov	r1, r3
 80118da:	4610      	mov	r0, r2
 80118dc:	f7fd fdd1 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    button1.setXY(636, -35);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80118e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80118ea:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7fa fe39 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 80118fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80118fe:	2100      	movs	r1, #0
 8011900:	4618      	mov	r0, r3
 8011902:	f7fd fd47 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8011906:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801190a:	2101      	movs	r1, #1
 801190c:	4618      	mov	r0, r3
 801190e:	f7fd fd41 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8011912:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011916:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801191a:	4619      	mov	r1, r3
 801191c:	4620      	mov	r0, r4
 801191e:	f006 f8fb 	bl	8017b18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801192e:	4619      	mov	r1, r3
 8011930:	4610      	mov	r0, r2
 8011932:	f7fd fda6 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(image1);
 8011936:	687a      	ldr	r2, [r7, #4]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	3340      	adds	r3, #64	; 0x40
 801193c:	4619      	mov	r1, r3
 801193e:	4610      	mov	r0, r2
 8011940:	f7fd fd90 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ball);
 8011944:	687a      	ldr	r2, [r7, #4]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	336c      	adds	r3, #108	; 0x6c
 801194a:	4619      	mov	r1, r3
 801194c:	4610      	mov	r0, r2
 801194e:	f7fd fd89 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(paddle1);
 8011952:	687a      	ldr	r2, [r7, #4]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	33ec      	adds	r3, #236	; 0xec
 8011958:	4619      	mov	r1, r3
 801195a:	4610      	mov	r0, r2
 801195c:	f7fd fd82 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(score);
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011968:	4619      	mov	r1, r3
 801196a:	4610      	mov	r0, r2
 801196c:	f7fd fd7a 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 8011970:	687a      	ldr	r2, [r7, #4]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011978:	4619      	mov	r1, r3
 801197a:	4610      	mov	r0, r2
 801197c:	f7fd fd72 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011988:	4619      	mov	r1, r3
 801198a:	4610      	mov	r0, r2
 801198c:	f7fd fd6a 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	4618      	mov	r0, r3
 8011994:	375c      	adds	r7, #92	; 0x5c
 8011996:	46bd      	mov	sp, r7
 8011998:	bd90      	pop	{r4, r7, pc}
 801199a:	bf00      	nop
 801199c:	2000b408 	.word	0x2000b408
 80119a0:	08026f94 	.word	0x08026f94

080119a4 <_ZN12PongViewBase11setupScreenEv>:

void PongViewBase::setupScreen()
{
 80119a4:	b480      	push	{r7}
 80119a6:	b083      	sub	sp, #12
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]

}
 80119ac:	bf00      	nop
 80119ae:	370c      	adds	r7, #12
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr

080119b8 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void PongViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	6039      	str	r1, [r7, #0]
    if (&src == &Back_Button)
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80119c8:	683a      	ldr	r2, [r7, #0]
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d107      	bne.n	80119de <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>
    {
        //back_to_main_screen
        //When Back_Button clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenSlideTransitionEast();
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f7ff fded 	bl	80115ae <_ZN12PongViewBase11applicationEv>
 80119d4:	4603      	mov	r3, r0
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fb f8b4 	bl	800cb44 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>
        //over
        //When button1 clicked change screen to gameover
        //Go to gameover with no screen transition
        application().gotogameoverScreenNoTransition();
    }
}
 80119dc:	e00c      	b.n	80119f8 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x40>
    else if (&src == &button1)
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80119e4:	683a      	ldr	r2, [r7, #0]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d106      	bne.n	80119f8 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x40>
        application().gotogameoverScreenNoTransition();
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f7ff fddf 	bl	80115ae <_ZN12PongViewBase11applicationEv>
 80119f0:	4603      	mov	r3, r0
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7fb f978 	bl	800cce8 <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv>
}
 80119f8:	bf00      	nop
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b088      	sub	sp, #32
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	60f8      	str	r0, [r7, #12]
 8011a08:	60b9      	str	r1, [r7, #8]
 8011a0a:	607a      	str	r2, [r7, #4]
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	015a      	lsls	r2, r3, #5
 8011a14:	f107 0314 	add.w	r3, r7, #20
 8011a18:	4611      	mov	r1, r2
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7ff fc51 	bl	80112c2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	631a      	str	r2, [r3, #48]	; 0x30
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	61fb      	str	r3, [r7, #28]
 8011a2c:	69fb      	ldr	r3, [r7, #28]
 8011a2e:	015a      	lsls	r2, r3, #5
 8011a30:	f107 0310 	add.w	r3, r7, #16
 8011a34:	4611      	mov	r1, r2
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7ff fc43 	bl	80112c2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8011a44:	bf00      	nop
 8011a46:	3720      	adds	r7, #32
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     * @see getArc, updateArcStart, updateArcEnd, updateArc
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b088      	sub	sp, #32
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	60f8      	str	r0, [r7, #12]
 8011a54:	60b9      	str	r1, [r7, #8]
 8011a56:	607a      	str	r2, [r7, #4]
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	61bb      	str	r3, [r7, #24]
 8011a5c:	69bb      	ldr	r3, [r7, #24]
 8011a5e:	015a      	lsls	r2, r3, #5
 8011a60:	f107 0314 	add.w	r3, r7, #20
 8011a64:	4611      	mov	r1, r2
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7ff fc2b 	bl	80112c2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	63da      	str	r2, [r3, #60]	; 0x3c
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	61fb      	str	r3, [r7, #28]
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	015a      	lsls	r2, r3, #5
 8011a7c:	f107 0310 	add.w	r3, r7, #16
 8011a80:	4611      	mov	r1, r2
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7ff fc1d 	bl	80112c2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8011a90:	bf00      	nop
 8011a92:	3720      	adds	r7, #32
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}

08011a98 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>:
    View()
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f008 fc52 	bl	801a34c <_ZN8touchgfx6ScreenC1Ev>
 8011aa8:	4a05      	ldr	r2, [pc, #20]	; (8011ac0 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev+0x28>)
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	601a      	str	r2, [r3, #0]
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3708      	adds	r7, #8
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	080281d4 	.word	0x080281d4

08011ac4 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	4a05      	ldr	r2, [pc, #20]	; (8011ae4 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	601a      	str	r2, [r3, #0]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7fa ff71 	bl	800c9bc <_ZN8touchgfx6WidgetD1Ev>
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	4618      	mov	r0, r3
 8011ade:	3708      	adds	r7, #8
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	080299b8 	.word	0x080299b8

08011ae8 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b082      	sub	sp, #8
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f7ff ffe7 	bl	8011ac4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011af6:	2130      	movs	r1, #48	; 0x30
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f013 fdc5 	bl	8025688 <_ZdlPvj>
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	4618      	mov	r0, r3
 8011b02:	3708      	adds	r7, #8
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}

08011b08 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	4a05      	ldr	r2, [pc, #20]	; (8011b28 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	601a      	str	r2, [r3, #0]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7ff ffd3 	bl	8011ac4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	4618      	mov	r0, r3
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	080298ac 	.word	0x080298ac

08011b2c <_ZN8touchgfx6CircleD0Ev>:
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b082      	sub	sp, #8
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f7ff ffe7 	bl	8011b08 <_ZN8touchgfx6CircleD1Ev>
 8011b3a:	214c      	movs	r1, #76	; 0x4c
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f013 fda3 	bl	8025688 <_ZdlPvj>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4618      	mov	r0, r3
 8011b46:	3708      	adds	r7, #8
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>:
 */
template <class T>
class MoveAnimator : public T
{
public:
    MoveAnimator()
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
        : T(),
          moveAnimationRunning(false),
          moveAnimationCounter(0),
          moveAnimationDelay(0),
          moveAnimationEndedCallback(0)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	4618      	mov	r0, r3
 8011b58:	f004 fff6 	bl	8016b48 <_ZN8touchgfx6CircleC1Ev>
 8011b5c:	4a0b      	ldr	r2, [pc, #44]	; (8011b8c <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev+0x40>)
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	601a      	str	r2, [r3, #0]
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2200      	movs	r2, #0
 8011b66:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2200      	movs	r2, #0
 8011b76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	665a      	str	r2, [r3, #100]	; 0x64
    {
    }
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	4618      	mov	r0, r3
 8011b84:	3708      	adds	r7, #8
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}
 8011b8a:	bf00      	nop
 8011b8c:	0802814c 	.word	0x0802814c

08011b90 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>:
template <class T>
class Draggable : public T
{
public:
    /** Initializes a new instance of the Draggable class. Make the object touchable. */
    Draggable()
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
        : T()
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7fd fca2 	bl	800f4e4 <_ZN8touchgfx3BoxC1Ev>
 8011ba0:	4a06      	ldr	r2, [pc, #24]	; (8011bbc <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev+0x2c>)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	601a      	str	r2, [r3, #0]
    {
        T::setTouchable(true);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2101      	movs	r1, #1
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7fe f8cf 	bl	800fd4e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3708      	adds	r7, #8
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}
 8011bba:	bf00      	nop
 8011bbc:	080280e4 	.word	0x080280e4

08011bc0 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	60f8      	str	r0, [r7, #12]
 8011bc8:	60b9      	str	r1, [r7, #8]
 8011bca:	4639      	mov	r1, r7
 8011bcc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7fd ff32 	bl	800fa3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8011bd8:	4a08      	ldr	r2, [pc, #32]	; (8011bfc <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	68ba      	ldr	r2, [r7, #8]
 8011be2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	3308      	adds	r3, #8
 8011be8:	463a      	mov	r2, r7
 8011bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011bee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	3710      	adds	r7, #16
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}
 8011bfc:	080280cc 	.word	0x080280cc

08011c00 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b084      	sub	sp, #16
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	6039      	str	r1, [r7, #0]
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	60fb      	str	r3, [r7, #12]
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	015a      	lsls	r2, r3, #5
 8011c12:	f107 0308 	add.w	r3, r7, #8
 8011c16:	4611      	mov	r1, r2
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7ff fb52 	bl	80112c2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5<T>(r);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8011c26:	bf00      	nop
 8011c28:	3710      	adds	r7, #16
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}

08011c2e <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 8011c2e:	b580      	push	{r7, lr}
 8011c30:	b084      	sub	sp, #16
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	6078      	str	r0, [r7, #4]
 8011c36:	6039      	str	r1, [r7, #0]
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	60fb      	str	r3, [r7, #12]
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	015a      	lsls	r2, r3, #5
 8011c40:	f107 0308 	add.w	r3, r7, #8
 8011c44:	4611      	mov	r1, r2
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7ff fb3b 	bl	80112c2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8011c54:	bf00      	nop
 8011c56:	3710      	adds	r7, #16
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}

08011c5c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	4a05      	ldr	r2, [pc, #20]	; (8011c7c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	601a      	str	r2, [r3, #0]
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7fd ff15 	bl	800fa9c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	4618      	mov	r0, r3
 8011c76:	3708      	adds	r7, #8
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}
 8011c7c:	080280cc 	.word	0x080280cc

08011c80 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b082      	sub	sp, #8
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f7ff ffe7 	bl	8011c5c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011c8e:	2110      	movs	r1, #16
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f013 fcf9 	bl	8025688 <_ZdlPvj>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3708      	adds	r7, #8
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>:
class Draggable : public T
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	4a05      	ldr	r2, [pc, #20]	; (8011cc0 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev+0x20>)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	601a      	str	r2, [r3, #0]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f7fd ff57 	bl	800fb64 <_ZN8touchgfx3BoxD1Ev>
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3708      	adds	r7, #8
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	080280e4 	.word	0x080280e4

08011cc4 <_ZN8touchgfx9DraggableINS_3BoxEED0Ev>:
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f7ff ffe7 	bl	8011ca0 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 8011cd2:	2130      	movs	r1, #48	; 0x30
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f013 fcd7 	bl	8025688 <_ZdlPvj>
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3708      	adds	r7, #8
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}

08011ce4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>:
class MoveAnimator : public T
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	4a05      	ldr	r2, [pc, #20]	; (8011d04 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev+0x20>)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	601a      	str	r2, [r3, #0]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7ff ff07 	bl	8011b08 <_ZN8touchgfx6CircleD1Ev>
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3708      	adds	r7, #8
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}
 8011d04:	0802814c 	.word	0x0802814c

08011d08 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED0Ev>:
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff ffe7 	bl	8011ce4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 8011d16:	2168      	movs	r1, #104	; 0x68
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f013 fcb5 	bl	8025688 <_ZdlPvj>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	4618      	mov	r0, r3
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	4a05      	ldr	r2, [pc, #20]	; (8011d48 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	601a      	str	r2, [r3, #0]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7ff fb4f 	bl	80113dc <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	4618      	mov	r0, r3
 8011d42:	3708      	adds	r7, #8
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	0802992c 	.word	0x0802992c

08011d4c <_ZN8touchgfx13PainterRGB888D0Ev>:
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b082      	sub	sp, #8
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f7ff ffe7 	bl	8011d28 <_ZN8touchgfx13PainterRGB888D1Ev>
 8011d5a:	2118      	movs	r1, #24
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f013 fc93 	bl	8025688 <_ZdlPvj>
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	4618      	mov	r0, r3
 8011d66:	3708      	adds	r7, #8
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}

08011d6c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	687a      	ldr	r2, [r7, #4]
 8011d7c:	68d2      	ldr	r2, [r2, #12]
 8011d7e:	1052      	asrs	r2, r2, #1
 8011d80:	1898      	adds	r0, r3, r2
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	f003 0301 	and.w	r3, r3, #1
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d102      	bne.n	8011d94 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	689b      	ldr	r3, [r3, #8]
 8011d92:	e00a      	b.n	8011daa <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	68d2      	ldr	r2, [r2, #12]
 8011d9c:	1052      	asrs	r2, r2, #1
 8011d9e:	4413      	add	r3, r2
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	687a      	ldr	r2, [r7, #4]
 8011da4:	6892      	ldr	r2, [r2, #8]
 8011da6:	4413      	add	r3, r2
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	6839      	ldr	r1, [r7, #0]
 8011dac:	4798      	blx	r3
    }
 8011dae:	bf00      	nop
 8011db0:	3708      	adds	r7, #8
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}

08011db6 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8011db6:	b480      	push	{r7}
 8011db8:	b083      	sub	sp, #12
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d010      	beq.n	8011de8 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	689b      	ldr	r3, [r3, #8]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d107      	bne.n	8011dde <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	68db      	ldr	r3, [r3, #12]
 8011dd2:	f003 0301 	and.w	r3, r3, #1
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d101      	bne.n	8011dde <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011dda:	2301      	movs	r3, #1
 8011ddc:	e000      	b.n	8011de0 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8011dde:	2300      	movs	r3, #0
 8011de0:	2b01      	cmp	r3, #1
 8011de2:	d001      	beq.n	8011de8 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011de4:	2301      	movs	r3, #1
 8011de6:	e000      	b.n	8011dea <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8011de8:	2300      	movs	r3, #0
    }
 8011dea:	4618      	mov	r0, r3
 8011dec:	370c      	adds	r7, #12
 8011dee:	46bd      	mov	sp, r7
 8011df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df4:	4770      	bx	lr

08011df6 <_ZN8touchgfx9DraggableINS_3BoxEE15handleDragEventERKNS_9DragEventE>:
     * Called when dragging the Draggable object. The object is moved according to the drag
     * event.
     *
     * @param  evt The drag event.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 8011df6:	b5b0      	push	{r4, r5, r7, lr}
 8011df8:	b082      	sub	sp, #8
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
 8011dfe:	6039      	str	r1, [r7, #0]
    {
        T::handleDragEvent(evt);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6839      	ldr	r1, [r7, #0]
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7fa fc0a 	bl	800c61e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>
        T::moveRelative(evt.getDeltaX(), evt.getDeltaY());
 8011e0a:	687c      	ldr	r4, [r7, #4]
 8011e0c:	6838      	ldr	r0, [r7, #0]
 8011e0e:	f7ff f9ca 	bl	80111a6 <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 8011e12:	4603      	mov	r3, r0
 8011e14:	461d      	mov	r5, r3
 8011e16:	6838      	ldr	r0, [r7, #0]
 8011e18:	f7ff f9da 	bl	80111d0 <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	461a      	mov	r2, r3
 8011e20:	4629      	mov	r1, r5
 8011e22:	4620      	mov	r0, r4
 8011e24:	f007 ff2e 	bl	8019c84 <_ZN8touchgfx8Drawable12moveRelativeEss>
    }
 8011e28:	bf00      	nop
 8011e2a:	3708      	adds	r7, #8
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bdb0      	pop	{r4, r5, r7, pc}

08011e30 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv>:
        }
    }

protected:
    /** The tick handler that handles the actual animation steps. */
    virtual void handleTickEvent()
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
    {
        T::handleTickEvent();
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7fa fbfa 	bl	800c634 <_ZN8touchgfx8Drawable15handleTickEventEv>

        nextMoveAnimationStep();
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f000 f821 	bl	8011e88 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>
    }
 8011e46:	bf00      	nop
 8011e48:	3708      	adds	r7, #8
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}

08011e4e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 8011e4e:	b480      	push	{r7}
 8011e50:	b083      	sub	sp, #12
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
 8011e56:	460b      	mov	r3, r1
 8011e58:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	887a      	ldrh	r2, [r7, #2]
 8011e5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
 8011e62:	bf00      	nop
 8011e64:	370c      	adds	r7, #12
 8011e66:	46bd      	mov	sp, r7
 8011e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6c:	4770      	bx	lr

08011e6e <_ZNK8touchgfx12MoveAnimatorINS_6CircleEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 8011e6e:	b480      	push	{r7}
 8011e70:	b083      	sub	sp, #12
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    }
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	370c      	adds	r7, #12
 8011e80:	46bd      	mov	sp, r7
 8011e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e86:	4770      	bx	lr

08011e88 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>:

    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 8011e88:	b590      	push	{r4, r7, lr}
 8011e8a:	b085      	sub	sp, #20
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	f000 80ad 	beq.w	8011ff6 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
        {
            if (moveAnimationCounter < moveAnimationDelay)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	d208      	bcs.n	8011ebe <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x36>
            {
                // Just wait for the delay time to pass
                moveAnimationCounter++;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011eb2:	3301      	adds	r3, #1
 8011eb4:	b29a      	uxth	r2, r3
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                        moveAnimationEndedCallback->execute(*this);
                    }
                }
            }
        }
    }
 8011ebc:	e09b      	b.n	8011ff6 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011ecc:	4619      	mov	r1, r3
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ed4:	440b      	add	r3, r1
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d850      	bhi.n	8011f7c <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0xf4>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011ee8:	1ad3      	subs	r3, r2, r3
 8011eea:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	b298      	uxth	r0, r3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8011efa:	b29a      	uxth	r2, r3
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	1ad3      	subs	r3, r2, r3
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	b21a      	sxth	r2, r3
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f10:	2100      	movs	r1, #0
 8011f12:	47a0      	blx	r4
 8011f14:	4603      	mov	r3, r0
 8011f16:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	b298      	uxth	r0, r3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8011f26:	b29a      	uxth	r2, r3
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	1ad3      	subs	r3, r2, r3
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	b21a      	sxth	r2, r3
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f3c:	2100      	movs	r1, #0
 8011f3e:	47a0      	blx	r4
 8011f40:	4603      	mov	r3, r0
 8011f42:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011f4c:	b29a      	uxth	r2, r3
 8011f4e:	897b      	ldrh	r3, [r7, #10]
 8011f50:	4413      	add	r3, r2
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	b219      	sxth	r1, r3
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	893b      	ldrh	r3, [r7, #8]
 8011f60:	4413      	add	r3, r2
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	b21b      	sxth	r3, r3
 8011f66:	461a      	mov	r2, r3
 8011f68:	f7fa fb88 	bl	800c67c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011f72:	3301      	adds	r3, #1
 8011f74:	b29a      	uxth	r2, r3
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011f82:	461a      	mov	r2, r3
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f92:	440b      	add	r3, r1
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d92e      	bls.n	8011ff6 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                    moveAnimationRunning = false;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                    moveAnimationCounter = 0;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                    Application::getInstance()->unregisterTimerWidget(this);
 8011fa8:	f007 fa1a 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 8011fac:	4602      	mov	r2, r0
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	4610      	mov	r0, r2
 8011fb4:	f007 fa1a 	bl	80193ec <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d00d      	beq.n	8011fdc <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	330c      	adds	r3, #12
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	4610      	mov	r0, r2
 8011fd0:	4798      	blx	r3
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d001      	beq.n	8011fdc <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 8011fd8:	2301      	movs	r3, #1
 8011fda:	e000      	b.n	8011fde <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x156>
 8011fdc:	2300      	movs	r3, #0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d009      	beq.n	8011ff6 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                        moveAnimationEndedCallback->execute(*this);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	3308      	adds	r3, #8
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	6879      	ldr	r1, [r7, #4]
 8011ff2:	4610      	mov	r0, r2
 8011ff4:	4798      	blx	r3
    }
 8011ff6:	bf00      	nop
 8011ff8:	3714      	adds	r7, #20
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd90      	pop	{r4, r7, pc}
	...

08012000 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	4a05      	ldr	r2, [pc, #20]	; (8012020 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	601a      	str	r2, [r3, #0]
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	4618      	mov	r0, r3
 8012012:	f7fd f9cf 	bl	800f3b4 <_ZN8touchgfx6ScreenD1Ev>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	4618      	mov	r0, r3
 801201a:	3708      	adds	r7, #8
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}
 8012020:	080282dc 	.word	0x080282dc

08012024 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f7ff ffe7 	bl	8012000 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8012032:	2140      	movs	r1, #64	; 0x40
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f013 fb27 	bl	8025688 <_ZdlPvj>
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	4618      	mov	r0, r3
 801203e:	3708      	adds	r7, #8
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}

08012044 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 8012044:	b580      	push	{r7, lr}
 8012046:	b082      	sub	sp, #8
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	4a13      	ldr	r2, [pc, #76]	; (801209c <_ZN14screenViewBaseD1Ev+0x58>)
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	601a      	str	r2, [r3, #0]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012058:	4618      	mov	r0, r3
 801205a:	f000 fa1d 	bl	8012498 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012064:	4618      	mov	r0, r3
 8012066:	f7fe fa59 	bl	801051c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	33b8      	adds	r3, #184	; 0xb8
 801206e:	4618      	mov	r0, r3
 8012070:	f7fe fa54 	bl	801051c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	3370      	adds	r3, #112	; 0x70
 8012078:	4618      	mov	r0, r3
 801207a:	f7fe fa4f 	bl	801051c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	3340      	adds	r3, #64	; 0x40
 8012082:	4618      	mov	r0, r3
 8012084:	f7fd fd6e 	bl	800fb64 <_ZN8touchgfx3BoxD1Ev>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	4618      	mov	r0, r3
 801208c:	f7ff ffb8 	bl	8012000 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	4618      	mov	r0, r3
 8012094:	3708      	adds	r7, #8
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}
 801209a:	bf00      	nop
 801209c:	08028290 	.word	0x08028290

080120a0 <_ZN14screenViewBaseD0Ev>:
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f7ff ffcb 	bl	8012044 <_ZN14screenViewBaseD1Ev>
 80120ae:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f013 fae8 	bl	8025688 <_ZdlPvj>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	4618      	mov	r0, r3
 80120bc:	3708      	adds	r7, #8
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <_ZN14screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b082      	sub	sp, #8
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80120ca:	f007 f989 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 80120ce:	4603      	mov	r3, r0
    }
 80120d0:	4618      	mov	r0, r3
 80120d2:	3708      	adds	r7, #8
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase() :
 80120d8:	b590      	push	{r4, r7, lr}
 80120da:	b093      	sub	sp, #76	; 0x4c
 80120dc:	af02      	add	r7, sp, #8
 80120de:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	4618      	mov	r0, r3
 80120e4:	f000 f9a2 	bl	801242c <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 80120e8:	4ab1      	ldr	r2, [pc, #708]	; (80123b0 <_ZN14screenViewBaseC1Ev+0x2d8>)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	601a      	str	r2, [r3, #0]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	3340      	adds	r3, #64	; 0x40
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fd f9f6 	bl	800f4e4 <_ZN8touchgfx3BoxC1Ev>
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	3370      	adds	r3, #112	; 0x70
 80120fc:	4618      	mov	r0, r3
 80120fe:	f006 f8bb 	bl	8018278 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	33b8      	adds	r3, #184	; 0xb8
 8012106:	4618      	mov	r0, r3
 8012108:	f006 f8b6 	bl	8018278 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012112:	4618      	mov	r0, r3
 8012114:	f006 f8b0 	bl	8018278 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 801211e:	4ba5      	ldr	r3, [pc, #660]	; (80123b4 <_ZN14screenViewBaseC1Ev+0x2dc>)
 8012120:	60bb      	str	r3, [r7, #8]
 8012122:	2300      	movs	r3, #0
 8012124:	60fb      	str	r3, [r7, #12]
 8012126:	f107 0308 	add.w	r3, r7, #8
 801212a:	cb0c      	ldmia	r3, {r2, r3}
 801212c:	6879      	ldr	r1, [r7, #4]
 801212e:	f000 f993 	bl	8012458 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012138:	f44f 7388 	mov.w	r3, #272	; 0x110
 801213c:	9300      	str	r3, [sp, #0]
 801213e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012142:	2200      	movs	r2, #0
 8012144:	2100      	movs	r1, #0
 8012146:	f7fa f9a9 	bl	800c49c <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012150:	22ff      	movs	r2, #255	; 0xff
 8012152:	21ff      	movs	r1, #255	; 0xff
 8012154:	20ff      	movs	r0, #255	; 0xff
 8012156:	f7fd fb15 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801215a:	4603      	mov	r3, r0
 801215c:	4619      	mov	r1, r3
 801215e:	4620      	mov	r0, r4
 8012160:	f7fd f9e8 	bl	800f534 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(155, 18);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	3370      	adds	r3, #112	; 0x70
 8012168:	2212      	movs	r2, #18
 801216a:	219b      	movs	r1, #155	; 0x9b
 801216c:	4618      	mov	r0, r3
 801216e:	f7fa f9fa 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012178:	f107 0310 	add.w	r3, r7, #16
 801217c:	2100      	movs	r1, #0
 801217e:	4618      	mov	r0, r3
 8012180:	f7fd f908 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8012184:	f107 0314 	add.w	r3, r7, #20
 8012188:	2101      	movs	r1, #1
 801218a:	4618      	mov	r0, r3
 801218c:	f7fd f902 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8012190:	f107 0214 	add.w	r2, r7, #20
 8012194:	f107 0310 	add.w	r3, r7, #16
 8012198:	4619      	mov	r1, r3
 801219a:	4620      	mov	r0, r4
 801219c:	f005 fcbc 	bl	8017b18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID1));
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80121a6:	f107 0318 	add.w	r3, r7, #24
 80121aa:	2100      	movs	r1, #0
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7fd fa2f 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 80121b2:	f107 0318 	add.w	r3, r7, #24
 80121b6:	4619      	mov	r1, r3
 80121b8:	4620      	mov	r0, r4
 80121ba:	f7fd fe33 	bl	800fe24 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80121be:	f107 0318 	add.w	r3, r7, #24
 80121c2:	4618      	mov	r0, r3
 80121c4:	f7f9 fdcc 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80121ce:	22ff      	movs	r2, #255	; 0xff
 80121d0:	21ff      	movs	r1, #255	; 0xff
 80121d2:	20ff      	movs	r0, #255	; 0xff
 80121d4:	f7fd fad6 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80121d8:	4603      	mov	r3, r0
 80121da:	4619      	mov	r1, r3
 80121dc:	4620      	mov	r0, r4
 80121de:	f7fd fe33 	bl	800fe48 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80121e8:	22ff      	movs	r2, #255	; 0xff
 80121ea:	21ff      	movs	r1, #255	; 0xff
 80121ec:	20ff      	movs	r0, #255	; 0xff
 80121ee:	f7fd fac9 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80121f2:	4603      	mov	r3, r0
 80121f4:	4619      	mov	r1, r3
 80121f6:	4620      	mov	r0, r4
 80121f8:	f7fd fe34 	bl	800fe64 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012208:	4619      	mov	r1, r3
 801220a:	4610      	mov	r0, r2
 801220c:	f7fd f939 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel2.setXY(155, 106);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	33b8      	adds	r3, #184	; 0xb8
 8012214:	226a      	movs	r2, #106	; 0x6a
 8012216:	219b      	movs	r1, #155	; 0x9b
 8012218:	4618      	mov	r0, r3
 801221a:	f7fa f9a4 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8012224:	f107 0320 	add.w	r3, r7, #32
 8012228:	2100      	movs	r1, #0
 801222a:	4618      	mov	r0, r3
 801222c:	f7fd f8b2 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 8012230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012234:	2101      	movs	r1, #1
 8012236:	4618      	mov	r0, r3
 8012238:	f7fd f8ac 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 801223c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012240:	f107 0320 	add.w	r3, r7, #32
 8012244:	4619      	mov	r1, r3
 8012246:	4620      	mov	r0, r4
 8012248:	f005 fc66 	bl	8017b18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8012252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012256:	2101      	movs	r1, #1
 8012258:	4618      	mov	r0, r3
 801225a:	f7fd f9d9 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 801225e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012262:	4619      	mov	r1, r3
 8012264:	4620      	mov	r0, r4
 8012266:	f7fd fddd 	bl	800fe24 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 801226a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801226e:	4618      	mov	r0, r3
 8012270:	f7f9 fd76 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 801227a:	22ff      	movs	r2, #255	; 0xff
 801227c:	21ff      	movs	r1, #255	; 0xff
 801227e:	20ff      	movs	r0, #255	; 0xff
 8012280:	f7fd fa80 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012284:	4603      	mov	r3, r0
 8012286:	4619      	mov	r1, r3
 8012288:	4620      	mov	r0, r4
 801228a:	f7fd fddd 	bl	800fe48 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8012294:	22ff      	movs	r2, #255	; 0xff
 8012296:	21ff      	movs	r1, #255	; 0xff
 8012298:	20ff      	movs	r0, #255	; 0xff
 801229a:	f7fd fa73 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801229e:	4603      	mov	r3, r0
 80122a0:	4619      	mov	r1, r3
 80122a2:	4620      	mov	r0, r4
 80122a4:	f7fd fdde 	bl	800fe64 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel2.setAction(buttonCallback);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80122b4:	4619      	mov	r1, r3
 80122b6:	4610      	mov	r0, r2
 80122b8:	f7fd f8e3 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel3.setXY(155, 197);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80122c2:	22c5      	movs	r2, #197	; 0xc5
 80122c4:	219b      	movs	r1, #155	; 0x9b
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7fa f94d 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80122d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80122d6:	2100      	movs	r1, #0
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fd f85b 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 80122de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80122e2:	2101      	movs	r1, #1
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7fd f855 	bl	800f394 <_ZN8touchgfx6BitmapC1Et>
 80122ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80122ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80122f2:	4619      	mov	r1, r3
 80122f4:	4620      	mov	r0, r4
 80122f6:	f005 fc0f 	bl	8017b18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel3.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8012300:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012304:	2102      	movs	r1, #2
 8012306:	4618      	mov	r0, r3
 8012308:	f7fd f982 	bl	800f610 <_ZN8touchgfx9TypedTextC1Et>
 801230c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012310:	4619      	mov	r1, r3
 8012312:	4620      	mov	r0, r4
 8012314:	f7fd fd86 	bl	800fe24 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8012318:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801231c:	4618      	mov	r0, r3
 801231e:	f7f9 fd1f 	bl	800bd60 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel3.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8012328:	22ff      	movs	r2, #255	; 0xff
 801232a:	21ff      	movs	r1, #255	; 0xff
 801232c:	20ff      	movs	r0, #255	; 0xff
 801232e:	f7fd fa29 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012332:	4603      	mov	r3, r0
 8012334:	4619      	mov	r1, r3
 8012336:	4620      	mov	r0, r4
 8012338:	f7fd fd86 	bl	800fe48 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel3.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8012342:	22ff      	movs	r2, #255	; 0xff
 8012344:	21ff      	movs	r1, #255	; 0xff
 8012346:	20ff      	movs	r0, #255	; 0xff
 8012348:	f7fd fa1c 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801234c:	4603      	mov	r3, r0
 801234e:	4619      	mov	r1, r3
 8012350:	4620      	mov	r0, r4
 8012352:	f7fd fd87 	bl	800fe64 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel3.setAction(buttonCallback);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012362:	4619      	mov	r1, r3
 8012364:	4610      	mov	r0, r2
 8012366:	f7fd f88c 	bl	800f482 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 801236a:	687a      	ldr	r2, [r7, #4]
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	3340      	adds	r3, #64	; 0x40
 8012370:	4619      	mov	r1, r3
 8012372:	4610      	mov	r0, r2
 8012374:	f7fd f876 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8012378:	687a      	ldr	r2, [r7, #4]
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	3370      	adds	r3, #112	; 0x70
 801237e:	4619      	mov	r1, r3
 8012380:	4610      	mov	r0, r2
 8012382:	f7fd f86f 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel2);
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	33b8      	adds	r3, #184	; 0xb8
 801238c:	4619      	mov	r1, r3
 801238e:	4610      	mov	r0, r2
 8012390:	f7fd f868 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel3);
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801239c:	4619      	mov	r1, r3
 801239e:	4610      	mov	r0, r2
 80123a0:	f7fd f860 	bl	800f464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	4618      	mov	r0, r3
 80123a8:	3744      	adds	r7, #68	; 0x44
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd90      	pop	{r4, r7, pc}
 80123ae:	bf00      	nop
 80123b0:	08028290 	.word	0x08028290
 80123b4:	080123cd 	.word	0x080123cd

080123b8 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 80123b8:	b480      	push	{r7}
 80123ba:	b083      	sub	sp, #12
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]

}
 80123c0:	bf00      	nop
 80123c2:	370c      	adds	r7, #12
 80123c4:	46bd      	mov	sp, r7
 80123c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ca:	4770      	bx	lr

080123cc <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	3370      	adds	r3, #112	; 0x70
 80123da:	683a      	ldr	r2, [r7, #0]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d107      	bne.n	80123f0 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Pong
        //Go to Pong with screen transition towards East
        application().gotoPongScreenCoverTransitionEast();
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f7ff fe6e 	bl	80120c2 <_ZN14screenViewBase11applicationEv>
 80123e6:	4603      	mov	r3, r0
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7fa fcc3 	bl	800cd74 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>
        //Interaction3
        //When buttonWithLabel3 clicked change screen to gallery
        //Go to gallery with screen transition towards East
        application().gotogalleryScreenCoverTransitionEast();
    }
}
 80123ee:	e019      	b.n	8012424 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel2)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	33b8      	adds	r3, #184	; 0xb8
 80123f4:	683a      	ldr	r2, [r7, #0]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d107      	bne.n	801240a <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        application().gotoMusicScreenNoTransition();
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7ff fe61 	bl	80120c2 <_ZN14screenViewBase11applicationEv>
 8012400:	4603      	mov	r3, r0
 8012402:	4618      	mov	r0, r3
 8012404:	f7fa fc2a 	bl	800cc5c <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv>
}
 8012408:	e00c      	b.n	8012424 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel3)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012410:	683a      	ldr	r2, [r7, #0]
 8012412:	429a      	cmp	r2, r3
 8012414:	d106      	bne.n	8012424 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotogalleryScreenCoverTransitionEast();
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f7ff fe53 	bl	80120c2 <_ZN14screenViewBase11applicationEv>
 801241c:	4603      	mov	r3, r0
 801241e:	4618      	mov	r0, r3
 8012420:	f7fa fd34 	bl	800ce8c <_ZN23FrontendApplicationBase36gotogalleryScreenCoverTransitionEastEv>
}
 8012424:	bf00      	nop
 8012426:	3708      	adds	r7, #8
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}

0801242c <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	4618      	mov	r0, r3
 8012438:	f007 ff88 	bl	801a34c <_ZN8touchgfx6ScreenC1Ev>
 801243c:	4a05      	ldr	r2, [pc, #20]	; (8012454 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	601a      	str	r2, [r3, #0]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2200      	movs	r2, #0
 8012446:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	4618      	mov	r0, r3
 801244c:	3708      	adds	r7, #8
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	080282dc 	.word	0x080282dc

08012458 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8012458:	b580      	push	{r7, lr}
 801245a:	b084      	sub	sp, #16
 801245c:	af00      	add	r7, sp, #0
 801245e:	60f8      	str	r0, [r7, #12]
 8012460:	60b9      	str	r1, [r7, #8]
 8012462:	4639      	mov	r1, r7
 8012464:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	4618      	mov	r0, r3
 801246c:	f7fd fae6 	bl	800fa3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8012470:	4a08      	ldr	r2, [pc, #32]	; (8012494 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	68ba      	ldr	r2, [r7, #8]
 801247a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	3308      	adds	r3, #8
 8012480:	463a      	mov	r2, r7
 8012482:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012486:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	4618      	mov	r0, r3
 801248e:	3710      	adds	r7, #16
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}
 8012494:	080282c4 	.word	0x080282c4

08012498 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
 80124a0:	4a05      	ldr	r2, [pc, #20]	; (80124b8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	601a      	str	r2, [r3, #0]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7fd faf7 	bl	800fa9c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	4618      	mov	r0, r3
 80124b2:	3708      	adds	r7, #8
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}
 80124b8:	080282c4 	.word	0x080282c4

080124bc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80124bc:	b580      	push	{r7, lr}
 80124be:	b082      	sub	sp, #8
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f7ff ffe7 	bl	8012498 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80124ca:	2110      	movs	r1, #16
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f013 f8db 	bl	8025688 <_ZdlPvj>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	4618      	mov	r0, r3
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	685b      	ldr	r3, [r3, #4]
 80124ea:	687a      	ldr	r2, [r7, #4]
 80124ec:	68d2      	ldr	r2, [r2, #12]
 80124ee:	1052      	asrs	r2, r2, #1
 80124f0:	1898      	adds	r0, r3, r2
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	68db      	ldr	r3, [r3, #12]
 80124f6:	f003 0301 	and.w	r3, r3, #1
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d102      	bne.n	8012504 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	689b      	ldr	r3, [r3, #8]
 8012502:	e00a      	b.n	801251a <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	687a      	ldr	r2, [r7, #4]
 801250a:	68d2      	ldr	r2, [r2, #12]
 801250c:	1052      	asrs	r2, r2, #1
 801250e:	4413      	add	r3, r2
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	687a      	ldr	r2, [r7, #4]
 8012514:	6892      	ldr	r2, [r2, #8]
 8012516:	4413      	add	r3, r2
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	6839      	ldr	r1, [r7, #0]
 801251c:	4798      	blx	r3
    }
 801251e:	bf00      	nop
 8012520:	3708      	adds	r7, #8
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}

08012526 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8012526:	b480      	push	{r7}
 8012528:	b083      	sub	sp, #12
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d010      	beq.n	8012558 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	689b      	ldr	r3, [r3, #8]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d107      	bne.n	801254e <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	68db      	ldr	r3, [r3, #12]
 8012542:	f003 0301 	and.w	r3, r3, #1
 8012546:	2b00      	cmp	r3, #0
 8012548:	d101      	bne.n	801254e <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801254a:	2301      	movs	r3, #1
 801254c:	e000      	b.n	8012550 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801254e:	2300      	movs	r3, #0
 8012550:	2b01      	cmp	r3, #1
 8012552:	d001      	beq.n	8012558 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012554:	2301      	movs	r3, #1
 8012556:	e000      	b.n	801255a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8012558:	2300      	movs	r3, #0
    }
 801255a:	4618      	mov	r0, r3
 801255c:	370c      	adds	r7, #12
 801255e:	46bd      	mov	sp, r7
 8012560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012564:	4770      	bx	lr
	...

08012568 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012568:	b480      	push	{r7}
 801256a:	af00      	add	r7, sp, #0
    return bitmap_database;
 801256c:	4b02      	ldr	r3, [pc, #8]	; (8012578 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801256e:	4618      	mov	r0, r3
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr
 8012578:	08028308 	.word	0x08028308

0801257c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801257c:	b480      	push	{r7}
 801257e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012580:	230e      	movs	r3, #14
}
 8012582:	4618      	mov	r0, r3
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr

0801258c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 801258c:	b480      	push	{r7}
 801258e:	b085      	sub	sp, #20
 8012590:	af00      	add	r7, sp, #0
 8012592:	60f8      	str	r0, [r7, #12]
 8012594:	460b      	mov	r3, r1
 8012596:	607a      	str	r2, [r7, #4]
 8012598:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 801259a:	2300      	movs	r3, #0
    }
 801259c:	4618      	mov	r0, r3
 801259e:	3714      	adds	r7, #20
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr

080125a8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80125b0:	2300      	movs	r3, #0
    }
 80125b2:	4618      	mov	r0, r3
 80125b4:	370c      	adds	r7, #12
 80125b6:	46bd      	mov	sp, r7
 80125b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125bc:	4770      	bx	lr
	...

080125c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80125c0:	b480      	push	{r7}
 80125c2:	b085      	sub	sp, #20
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	60b9      	str	r1, [r7, #8]
 80125ca:	4613      	mov	r3, r2
 80125cc:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80125ce:	4a07      	ldr	r2, [pc, #28]	; (80125ec <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	6013      	str	r3, [r2, #0]
        fonts = f;
 80125d4:	4a06      	ldr	r2, [pc, #24]	; (80125f0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80125da:	4a06      	ldr	r2, [pc, #24]	; (80125f4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80125dc:	88fb      	ldrh	r3, [r7, #6]
 80125de:	8013      	strh	r3, [r2, #0]
    }
 80125e0:	bf00      	nop
 80125e2:	3714      	adds	r7, #20
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr
 80125ec:	2000b3fc 	.word	0x2000b3fc
 80125f0:	2000b404 	.word	0x2000b404
 80125f4:	2000b400 	.word	0x2000b400

080125f8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80125f8:	b40e      	push	{r1, r2, r3}
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b085      	sub	sp, #20
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8012602:	f107 0320 	add.w	r3, r7, #32
 8012606:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	69fa      	ldr	r2, [r7, #28]
 801260c:	2100      	movs	r1, #0
 801260e:	6878      	ldr	r0, [r7, #4]
 8012610:	f007 f9fe 	bl	8019a10 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012614:	4603      	mov	r3, r0
 8012616:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012618:	89fb      	ldrh	r3, [r7, #14]
}
 801261a:	4618      	mov	r0, r3
 801261c:	3714      	adds	r7, #20
 801261e:	46bd      	mov	sp, r7
 8012620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012624:	b003      	add	sp, #12
 8012626:	4770      	bx	lr

08012628 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012628:	b40c      	push	{r2, r3}
 801262a:	b580      	push	{r7, lr}
 801262c:	b084      	sub	sp, #16
 801262e:	af00      	add	r7, sp, #0
 8012630:	6078      	str	r0, [r7, #4]
 8012632:	460b      	mov	r3, r1
 8012634:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8012636:	f107 031c 	add.w	r3, r7, #28
 801263a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 801263c:	78f9      	ldrb	r1, [r7, #3]
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	69ba      	ldr	r2, [r7, #24]
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f007 f9e4 	bl	8019a10 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012648:	4603      	mov	r3, r0
 801264a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 801264c:	89fb      	ldrh	r3, [r7, #14]
}
 801264e:	4618      	mov	r0, r3
 8012650:	3710      	adds	r7, #16
 8012652:	46bd      	mov	sp, r7
 8012654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012658:	b002      	add	sp, #8
 801265a:	4770      	bx	lr

0801265c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b08a      	sub	sp, #40	; 0x28
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	460b      	mov	r3, r1
 8012666:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801266c:	2b00      	cmp	r3, #0
 801266e:	d016      	beq.n	801269e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	331a      	adds	r3, #26
 8012674:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8012676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012678:	8adb      	ldrh	r3, [r3, #22]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d105      	bne.n	801268a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 801267e:	4b42      	ldr	r3, [pc, #264]	; (8012788 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 8012680:	4a42      	ldr	r2, [pc, #264]	; (801278c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012682:	21c0      	movs	r1, #192	; 0xc0
 8012684:	4842      	ldr	r0, [pc, #264]	; (8012790 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012686:	f013 f82b 	bl	80256e0 <__assert_func>
            return buffer[pos];
 801268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268c:	8a9b      	ldrh	r3, [r3, #20]
 801268e:	461a      	mov	r2, r3
 8012690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012692:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d001      	beq.n	801269e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801269a:	2301      	movs	r3, #1
 801269c:	e000      	b.n	80126a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 801269e:	2300      	movs	r3, #0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d068      	beq.n	8012776 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	f008 fd55 	bl	801b154 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	331a      	adds	r3, #26
 80126ae:	623b      	str	r3, [r7, #32]
 80126b0:	2301      	movs	r3, #1
 80126b2:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80126b4:	6a3b      	ldr	r3, [r7, #32]
 80126b6:	8adb      	ldrh	r3, [r3, #22]
 80126b8:	8bfa      	ldrh	r2, [r7, #30]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d305      	bcc.n	80126ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80126be:	4b35      	ldr	r3, [pc, #212]	; (8012794 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80126c0:	4a35      	ldr	r2, [pc, #212]	; (8012798 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80126c2:	21c5      	movs	r1, #197	; 0xc5
 80126c4:	4832      	ldr	r0, [pc, #200]	; (8012790 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80126c6:	f013 f80b 	bl	80256e0 <__assert_func>
            const uint16_t index = pos + offset;
 80126ca:	6a3b      	ldr	r3, [r7, #32]
 80126cc:	8a9a      	ldrh	r2, [r3, #20]
 80126ce:	8bfb      	ldrh	r3, [r7, #30]
 80126d0:	4413      	add	r3, r2
 80126d2:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80126d4:	8bbb      	ldrh	r3, [r7, #28]
 80126d6:	2b09      	cmp	r3, #9
 80126d8:	d801      	bhi.n	80126de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80126da:	8bbb      	ldrh	r3, [r7, #28]
 80126dc:	e001      	b.n	80126e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80126de:	8bbb      	ldrh	r3, [r7, #28]
 80126e0:	3b0a      	subs	r3, #10
 80126e2:	6a3a      	ldr	r2, [r7, #32]
 80126e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80126e8:	f640 123f 	movw	r2, #2367	; 0x93f
 80126ec:	4293      	cmp	r3, r2
 80126ee:	bf0c      	ite	eq
 80126f0:	2301      	moveq	r3, #1
 80126f2:	2300      	movne	r3, #0
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d03d      	beq.n	8012776 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	331a      	adds	r3, #26
 80126fe:	687a      	ldr	r2, [r7, #4]
 8012700:	321a      	adds	r2, #26
 8012702:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8012704:	68ba      	ldr	r2, [r7, #8]
 8012706:	8ad2      	ldrh	r2, [r2, #22]
 8012708:	2a00      	cmp	r2, #0
 801270a:	d105      	bne.n	8012718 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 801270c:	4b1e      	ldr	r3, [pc, #120]	; (8012788 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 801270e:	4a1f      	ldr	r2, [pc, #124]	; (801278c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012710:	21c0      	movs	r1, #192	; 0xc0
 8012712:	481f      	ldr	r0, [pc, #124]	; (8012790 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012714:	f012 ffe4 	bl	80256e0 <__assert_func>
            return buffer[pos];
 8012718:	68ba      	ldr	r2, [r7, #8]
 801271a:	8a92      	ldrh	r2, [r2, #20]
 801271c:	4611      	mov	r1, r2
 801271e:	68ba      	ldr	r2, [r7, #8]
 8012720:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8012724:	613b      	str	r3, [r7, #16]
 8012726:	4613      	mov	r3, r2
 8012728:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	8adb      	ldrh	r3, [r3, #22]
 801272e:	2b01      	cmp	r3, #1
 8012730:	d806      	bhi.n	8012740 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8012732:	4b1a      	ldr	r3, [pc, #104]	; (801279c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8012734:	4a1a      	ldr	r2, [pc, #104]	; (80127a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8012736:	f240 110d 	movw	r1, #269	; 0x10d
 801273a:	4815      	ldr	r0, [pc, #84]	; (8012790 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801273c:	f012 ffd0 	bl	80256e0 <__assert_func>
            const uint16_t index = pos + 1;
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	8a9b      	ldrh	r3, [r3, #20]
 8012744:	3301      	adds	r3, #1
 8012746:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8012748:	89bb      	ldrh	r3, [r7, #12]
 801274a:	2b09      	cmp	r3, #9
 801274c:	d801      	bhi.n	8012752 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 801274e:	89bb      	ldrh	r3, [r7, #12]
 8012750:	e000      	b.n	8012754 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8012752:	2300      	movs	r3, #0
 8012754:	693a      	ldr	r2, [r7, #16]
 8012756:	89f9      	ldrh	r1, [r7, #14]
 8012758:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	331a      	adds	r3, #26
 8012760:	61bb      	str	r3, [r7, #24]
 8012762:	f640 133f 	movw	r3, #2367	; 0x93f
 8012766:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8012768:	69bb      	ldr	r3, [r7, #24]
 801276a:	8a9b      	ldrh	r3, [r3, #20]
 801276c:	4619      	mov	r1, r3
 801276e:	69bb      	ldr	r3, [r7, #24]
 8012770:	8afa      	ldrh	r2, [r7, #22]
 8012772:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f008 fbd0 	bl	801af1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801277c:	4603      	mov	r3, r0
}
 801277e:	4618      	mov	r0, r3
 8012780:	3728      	adds	r7, #40	; 0x28
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	08026f98 	.word	0x08026f98
 801278c:	08028544 	.word	0x08028544
 8012790:	08026fa4 	.word	0x08026fa4
 8012794:	08026fec 	.word	0x08026fec
 8012798:	08028470 	.word	0x08028470
 801279c:	08026ffc 	.word	0x08026ffc
 80127a0:	080285f0 	.word	0x080285f0

080127a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f008 fb6f 	bl	801ae90 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80127b2:	bf00      	nop
 80127b4:	3708      	adds	r7, #8
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}

080127ba <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80127ba:	b580      	push	{r7, lr}
 80127bc:	b088      	sub	sp, #32
 80127be:	af02      	add	r7, sp, #8
 80127c0:	60f8      	str	r0, [r7, #12]
 80127c2:	1d38      	adds	r0, r7, #4
 80127c4:	e880 0006 	stmia.w	r0, {r1, r2}
 80127c8:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80127ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80127ce:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80127d0:	1d39      	adds	r1, r7, #4
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	9301      	str	r3, [sp, #4]
 80127d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d8:	9300      	str	r3, [sp, #0]
 80127da:	6a3b      	ldr	r3, [r7, #32]
 80127dc:	683a      	ldr	r2, [r7, #0]
 80127de:	68f8      	ldr	r0, [r7, #12]
 80127e0:	f006 fa19 	bl	8018c16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80127e4:	bf00      	nop
 80127e6:	3718      	adds	r7, #24
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80127ec:	b590      	push	{r4, r7, lr}
 80127ee:	b085      	sub	sp, #20
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	4603      	mov	r3, r0
 80127f4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80127f6:	2300      	movs	r3, #0
 80127f8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80127fa:	88fb      	ldrh	r3, [r7, #6]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d127      	bne.n	8012850 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8012800:	88fb      	ldrh	r3, [r7, #6]
 8012802:	4a1e      	ldr	r2, [pc, #120]	; (801287c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d016      	beq.n	801283a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 801280c:	88fb      	ldrh	r3, [r7, #6]
 801280e:	4a1b      	ldr	r2, [pc, #108]	; (801287c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012814:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	68ba      	ldr	r2, [r7, #8]
 801281c:	4413      	add	r3, r2
 801281e:	4a18      	ldr	r2, [pc, #96]	; (8012880 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012820:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	685b      	ldr	r3, [r3, #4]
 8012826:	68ba      	ldr	r2, [r7, #8]
 8012828:	4413      	add	r3, r2
 801282a:	4a16      	ldr	r2, [pc, #88]	; (8012884 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801282c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	689b      	ldr	r3, [r3, #8]
 8012832:	68ba      	ldr	r2, [r7, #8]
 8012834:	4413      	add	r3, r2
 8012836:	60fb      	str	r3, [r7, #12]
 8012838:	e00a      	b.n	8012850 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801283a:	4b11      	ldr	r3, [pc, #68]	; (8012880 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801283c:	4a12      	ldr	r2, [pc, #72]	; (8012888 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801283e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8012840:	4a12      	ldr	r2, [pc, #72]	; (801288c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8012842:	4b10      	ldr	r3, [pc, #64]	; (8012884 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012844:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8012846:	88fb      	ldrh	r3, [r7, #6]
 8012848:	4a11      	ldr	r2, [pc, #68]	; (8012890 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801284a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801284e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d00d      	beq.n	8012872 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8012856:	4a0f      	ldr	r2, [pc, #60]	; (8012894 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012858:	88fb      	ldrh	r3, [r7, #6]
 801285a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 801285c:	f000 f83e 	bl	80128dc <_ZN17TypedTextDatabase8getFontsEv>
 8012860:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8012862:	f000 f833 	bl	80128cc <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8012866:	4603      	mov	r3, r0
 8012868:	461a      	mov	r2, r3
 801286a:	4621      	mov	r1, r4
 801286c:	68f8      	ldr	r0, [r7, #12]
 801286e:	f7ff fea7 	bl	80125c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8012872:	bf00      	nop
 8012874:	3714      	adds	r7, #20
 8012876:	46bd      	mov	sp, r7
 8012878:	bd90      	pop	{r4, r7, pc}
 801287a:	bf00      	nop
 801287c:	200085f4 	.word	0x200085f4
 8012880:	200085fc 	.word	0x200085fc
 8012884:	20008600 	.word	0x20008600
 8012888:	080e0258 	.word	0x080e0258
 801288c:	080e01fc 	.word	0x080e01fc
 8012890:	080e0380 	.word	0x080e0380
 8012894:	200085f8 	.word	0x200085f8

08012898 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8012898:	b480      	push	{r7}
 801289a:	b083      	sub	sp, #12
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	460b      	mov	r3, r1
 80128a2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80128a4:	4b07      	ldr	r3, [pc, #28]	; (80128c4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80128a6:	681a      	ldr	r2, [r3, #0]
 80128a8:	4b07      	ldr	r3, [pc, #28]	; (80128c8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80128aa:	6819      	ldr	r1, [r3, #0]
 80128ac:	887b      	ldrh	r3, [r7, #2]
 80128ae:	009b      	lsls	r3, r3, #2
 80128b0:	440b      	add	r3, r1
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	005b      	lsls	r3, r3, #1
 80128b6:	4413      	add	r3, r2
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	370c      	adds	r7, #12
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr
 80128c4:	200085fc 	.word	0x200085fc
 80128c8:	20008600 	.word	0x20008600

080128cc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80128cc:	b480      	push	{r7}
 80128ce:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80128d0:	2317      	movs	r3, #23
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr

080128dc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80128dc:	b480      	push	{r7}
 80128de:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80128e0:	4b02      	ldr	r3, [pc, #8]	; (80128ec <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	46bd      	mov	sp, r7
 80128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ea:	4770      	bx	lr
 80128ec:	20008604 	.word	0x20008604

080128f0 <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdana_24_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	6039      	str	r1, [r7, #0]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2b01      	cmp	r3, #1
 80128fe:	d11d      	bne.n	801293c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012906:	4293      	cmp	r3, r2
 8012908:	d118      	bne.n	801293c <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdana_20_4bpp()),
 801290a:	f7f9 fb35 	bl	800bf78 <_Z23getFont_verdana_20_4bppv>
 801290e:	4602      	mov	r2, r0
};
 8012910:	4b0c      	ldr	r3, [pc, #48]	; (8012944 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8012912:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8012914:	f7f9 fbf6 	bl	800c104 <_Z23getFont_verdana_40_4bppv>
 8012918:	4602      	mov	r2, r0
};
 801291a:	4b0a      	ldr	r3, [pc, #40]	; (8012944 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801291c:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_18_4bpp()),
 801291e:	f7f9 fae9 	bl	800bef4 <_Z23getFont_verdana_18_4bppv>
 8012922:	4602      	mov	r2, r0
};
 8012924:	4b07      	ldr	r3, [pc, #28]	; (8012944 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8012926:	609a      	str	r2, [r3, #8]
    &(getFont_verdana_27_4bpp()),
 8012928:	f7f9 fbaa 	bl	800c080 <_Z23getFont_verdana_27_4bppv>
 801292c:	4602      	mov	r2, r0
};
 801292e:	4b05      	ldr	r3, [pc, #20]	; (8012944 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8012930:	60da      	str	r2, [r3, #12]
    &(getFont_verdana_24_4bpp())
 8012932:	f7f9 fb63 	bl	800bffc <_Z23getFont_verdana_24_4bppv>
 8012936:	4602      	mov	r2, r0
};
 8012938:	4b02      	ldr	r3, [pc, #8]	; (8012944 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801293a:	611a      	str	r2, [r3, #16]
}  // namespace TypedTextDatabase
 801293c:	bf00      	nop
 801293e:	3708      	adds	r7, #8
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}
 8012944:	20008604 	.word	0x20008604

08012948 <_GLOBAL__sub_I_touchgfx_fonts>:
 8012948:	b580      	push	{r7, lr}
 801294a:	af00      	add	r7, sp, #0
 801294c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012950:	2001      	movs	r0, #1
 8012952:	f7ff ffcd 	bl	80128f0 <_Z41__static_initialization_and_destruction_0ii>
 8012956:	bd80      	pop	{r7, pc}

08012958 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	4a05      	ldr	r2, [pc, #20]	; (8012978 <_ZN19FrontendApplicationD1Ev+0x20>)
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	601a      	str	r2, [r3, #0]
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	4618      	mov	r0, r3
 801296a:	f7f9 ffad 	bl	800c8c8 <_ZN23FrontendApplicationBaseD1Ev>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	4618      	mov	r0, r3
 8012972:	3708      	adds	r7, #8
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}
 8012978:	080286ac 	.word	0x080286ac

0801297c <_ZN19FrontendApplicationD0Ev>:
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f7ff ffe7 	bl	8012958 <_ZN19FrontendApplicationD1Ev>
 801298a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f012 fe7a 	bl	8025688 <_ZdlPvj>
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	4618      	mov	r0, r3
 8012998:	3708      	adds	r7, #8
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}

0801299e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801299e:	b580      	push	{r7, lr}
 80129a0:	b082      	sub	sp, #8
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80129ac:	4618      	mov	r0, r3
 80129ae:	f000 fa23 	bl	8012df8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	4618      	mov	r0, r3
 80129b6:	f006 fbf5 	bl	80191a4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80129ba:	bf00      	nop
 80129bc:	3708      	adds	r7, #8
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
	...

080129c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b084      	sub	sp, #16
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	60f8      	str	r0, [r7, #12]
 80129cc:	60b9      	str	r1, [r7, #8]
 80129ce:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	687a      	ldr	r2, [r7, #4]
 80129d4:	68b9      	ldr	r1, [r7, #8]
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7fa f812 	bl	800ca00 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80129dc:	4a03      	ldr	r2, [pc, #12]	; (80129ec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	601a      	str	r2, [r3, #0]
{

}
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	4618      	mov	r0, r3
 80129e6:	3710      	adds	r7, #16
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd80      	pop	{r7, pc}
 80129ec:	080286ac 	.word	0x080286ac

080129f0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80129f0:	b480      	push	{r7}
 80129f2:	b083      	sub	sp, #12
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
    {
    }
 80129f8:	bf00      	nop
 80129fa:	370c      	adds	r7, #12
 80129fc:	46bd      	mov	sp, r7
 80129fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a02:	4770      	bx	lr

08012a04 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012a04:	b480      	push	{r7}
 8012a06:	b083      	sub	sp, #12
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
    {
    }
 8012a0c:	bf00      	nop
 8012a0e:	370c      	adds	r7, #12
 8012a10:	46bd      	mov	sp, r7
 8012a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a16:	4770      	bx	lr

08012a18 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8012a18:	b480      	push	{r7}
 8012a1a:	b083      	sub	sp, #12
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
    {
 8012a20:	4a04      	ldr	r2, [pc, #16]	; (8012a34 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	601a      	str	r2, [r3, #0]
    }
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	370c      	adds	r7, #12
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a32:	4770      	bx	lr
 8012a34:	08028728 	.word	0x08028728

08012a38 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
    }
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7ff ffe9 	bl	8012a18 <_ZN8touchgfx9PresenterD1Ev>
 8012a46:	2104      	movs	r1, #4
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f012 fe1d 	bl	8025688 <_ZdlPvj>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	4618      	mov	r0, r3
 8012a52:	3708      	adds	r7, #8
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8012a58:	b480      	push	{r7}
 8012a5a:	b083      	sub	sp, #12
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
    {
 8012a60:	4a04      	ldr	r2, [pc, #16]	; (8012a74 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	601a      	str	r2, [r3, #0]
    }
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	4618      	mov	r0, r3
 8012a6a:	370c      	adds	r7, #12
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a72:	4770      	bx	lr
 8012a74:	08028728 	.word	0x08028728

08012a78 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012a78:	b480      	push	{r7}
 8012a7a:	b083      	sub	sp, #12
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	4a06      	ldr	r2, [pc, #24]	; (8012a9c <_ZN13ModelListenerC1Ev+0x24>)
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	601a      	str	r2, [r3, #0]
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	605a      	str	r2, [r3, #4]
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	4618      	mov	r0, r3
 8012a90:	370c      	adds	r7, #12
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr
 8012a9a:	bf00      	nop
 8012a9c:	08028718 	.word	0x08028718

08012aa0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012aa0:	b480      	push	{r7}
 8012aa2:	b083      	sub	sp, #12
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	4a04      	ldr	r2, [pc, #16]	; (8012abc <_ZN13ModelListenerD1Ev+0x1c>)
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	601a      	str	r2, [r3, #0]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	370c      	adds	r7, #12
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr
 8012abc:	08028718 	.word	0x08028718

08012ac0 <_ZN13ModelListenerD0Ev>:
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b082      	sub	sp, #8
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7ff ffe9 	bl	8012aa0 <_ZN13ModelListenerD1Ev>
 8012ace:	2108      	movs	r1, #8
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f012 fdd9 	bl	8025688 <_ZdlPvj>
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	4618      	mov	r0, r3
 8012ada:	3708      	adds	r7, #8
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}

08012ae0 <_ZN16galleryPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~galleryPresenter() {};
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	4a09      	ldr	r2, [pc, #36]	; (8012b10 <_ZN16galleryPresenterD1Ev+0x30>)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	601a      	str	r2, [r3, #0]
 8012aee:	4a09      	ldr	r2, [pc, #36]	; (8012b14 <_ZN16galleryPresenterD1Ev+0x34>)
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	605a      	str	r2, [r3, #4]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	3304      	adds	r3, #4
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7ff ffd1 	bl	8012aa0 <_ZN13ModelListenerD1Ev>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	4618      	mov	r0, r3
 8012b02:	f7ff ff89 	bl	8012a18 <_ZN8touchgfx9PresenterD1Ev>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3708      	adds	r7, #8
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}
 8012b10:	080286f0 	.word	0x080286f0
 8012b14:	08028708 	.word	0x08028708

08012b18 <_ZThn4_N16galleryPresenterD1Ev>:
 8012b18:	f1a0 0004 	sub.w	r0, r0, #4
 8012b1c:	e7e0      	b.n	8012ae0 <_ZN16galleryPresenterD1Ev>
 8012b1e:	bf00      	nop

08012b20 <_ZN16galleryPresenterD0Ev>:
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f7ff ffd9 	bl	8012ae0 <_ZN16galleryPresenterD1Ev>
 8012b2e:	2110      	movs	r1, #16
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f012 fda9 	bl	8025688 <_ZdlPvj>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3708      	adds	r7, #8
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <_ZThn4_N16galleryPresenterD0Ev>:
 8012b40:	f1a0 0004 	sub.w	r0, r0, #4
 8012b44:	e7ec      	b.n	8012b20 <_ZN16galleryPresenterD0Ev>
	...

08012b48 <_ZN16galleryPresenterC1ER11galleryView>:
#include <gui/gallery_screen/galleryView.hpp>
#include <gui/gallery_screen/galleryPresenter.hpp>

galleryPresenter::galleryPresenter(galleryView& v)
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b082      	sub	sp, #8
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	6039      	str	r1, [r7, #0]
    : view(v)
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	4618      	mov	r0, r3
 8012b56:	f7ff ff7f 	bl	8012a58 <_ZN8touchgfx9PresenterC1Ev>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	3304      	adds	r3, #4
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7ff ff8a 	bl	8012a78 <_ZN13ModelListenerC1Ev>
 8012b64:	4a06      	ldr	r2, [pc, #24]	; (8012b80 <_ZN16galleryPresenterC1ER11galleryView+0x38>)
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	601a      	str	r2, [r3, #0]
 8012b6a:	4a06      	ldr	r2, [pc, #24]	; (8012b84 <_ZN16galleryPresenterC1ER11galleryView+0x3c>)
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	605a      	str	r2, [r3, #4]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	683a      	ldr	r2, [r7, #0]
 8012b74:	60da      	str	r2, [r3, #12]
{

}
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3708      	adds	r7, #8
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}
 8012b80:	080286f0 	.word	0x080286f0
 8012b84:	08028708 	.word	0x08028708

08012b88 <_ZN16galleryPresenter8activateEv>:

void galleryPresenter::activate()
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b083      	sub	sp, #12
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]

}
 8012b90:	bf00      	nop
 8012b92:	370c      	adds	r7, #12
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr

08012b9c <_ZN16galleryPresenter10deactivateEv>:

void galleryPresenter::deactivate()
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b083      	sub	sp, #12
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]

}
 8012ba4:	bf00      	nop
 8012ba6:	370c      	adds	r7, #12
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bae:	4770      	bx	lr

08012bb0 <_ZN11galleryViewD1Ev>:

class galleryView : public galleryViewBase
{
public:
    galleryView();
    virtual ~galleryView() {}
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	4a05      	ldr	r2, [pc, #20]	; (8012bd0 <_ZN11galleryViewD1Ev+0x20>)
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	601a      	str	r2, [r3, #0]
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7fc fd97 	bl	800f6f4 <_ZN15galleryViewBaseD1Ev>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3708      	adds	r7, #8
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}
 8012bd0:	08028740 	.word	0x08028740

08012bd4 <_ZN11galleryViewD0Ev>:
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b082      	sub	sp, #8
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f7ff ffe7 	bl	8012bb0 <_ZN11galleryViewD1Ev>
 8012be2:	f44f 7192 	mov.w	r1, #292	; 0x124
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f012 fd4e 	bl	8025688 <_ZdlPvj>
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3708      	adds	r7, #8
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
	...

08012bf8 <_ZN11galleryViewC1Ev>:
#include <gui/gallery_screen/galleryView.hpp>

galleryView::galleryView()
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b082      	sub	sp, #8
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7fc fde8 	bl	800f7d8 <_ZN15galleryViewBaseC1Ev>
 8012c08:	4a03      	ldr	r2, [pc, #12]	; (8012c18 <_ZN11galleryViewC1Ev+0x20>)
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	601a      	str	r2, [r3, #0]
{

}
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	4618      	mov	r0, r3
 8012c12:	3708      	adds	r7, #8
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}
 8012c18:	08028740 	.word	0x08028740

08012c1c <_ZN11galleryView11setupScreenEv>:

void galleryView::setupScreen()
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b082      	sub	sp, #8
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
    galleryViewBase::setupScreen();
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7fc fed2 	bl	800f9d0 <_ZN15galleryViewBase11setupScreenEv>
}
 8012c2c:	bf00      	nop
 8012c2e:	3708      	adds	r7, #8
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <_ZN11galleryView14tearDownScreenEv>:

void galleryView::tearDownScreen()
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b082      	sub	sp, #8
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
    galleryViewBase::tearDownScreen();
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7fc fbf0 	bl	800f424 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012c44:	bf00      	nop
 8012c46:	3708      	adds	r7, #8
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}

08012c4c <_ZN17gameoverPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~gameoverPresenter() {};
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b082      	sub	sp, #8
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	4a09      	ldr	r2, [pc, #36]	; (8012c7c <_ZN17gameoverPresenterD1Ev+0x30>)
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	601a      	str	r2, [r3, #0]
 8012c5a:	4a09      	ldr	r2, [pc, #36]	; (8012c80 <_ZN17gameoverPresenterD1Ev+0x34>)
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	605a      	str	r2, [r3, #4]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	3304      	adds	r3, #4
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7ff ff1b 	bl	8012aa0 <_ZN13ModelListenerD1Ev>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7ff fed3 	bl	8012a18 <_ZN8touchgfx9PresenterD1Ev>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	4618      	mov	r0, r3
 8012c76:	3708      	adds	r7, #8
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	08028774 	.word	0x08028774
 8012c80:	0802878c 	.word	0x0802878c

08012c84 <_ZThn4_N17gameoverPresenterD1Ev>:
 8012c84:	f1a0 0004 	sub.w	r0, r0, #4
 8012c88:	e7e0      	b.n	8012c4c <_ZN17gameoverPresenterD1Ev>
 8012c8a:	bf00      	nop

08012c8c <_ZN17gameoverPresenterD0Ev>:
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f7ff ffd9 	bl	8012c4c <_ZN17gameoverPresenterD1Ev>
 8012c9a:	2110      	movs	r1, #16
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f012 fcf3 	bl	8025688 <_ZdlPvj>
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3708      	adds	r7, #8
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}

08012cac <_ZThn4_N17gameoverPresenterD0Ev>:
 8012cac:	f1a0 0004 	sub.w	r0, r0, #4
 8012cb0:	e7ec      	b.n	8012c8c <_ZN17gameoverPresenterD0Ev>
	...

08012cb4 <_ZN17gameoverPresenterC1ER12gameoverView>:
#include <gui/gameover_screen/gameoverView.hpp>
#include <gui/gameover_screen/gameoverPresenter.hpp>

gameoverPresenter::gameoverPresenter(gameoverView& v)
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	6039      	str	r1, [r7, #0]
    : view(v)
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7ff fec9 	bl	8012a58 <_ZN8touchgfx9PresenterC1Ev>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	3304      	adds	r3, #4
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f7ff fed4 	bl	8012a78 <_ZN13ModelListenerC1Ev>
 8012cd0:	4a06      	ldr	r2, [pc, #24]	; (8012cec <_ZN17gameoverPresenterC1ER12gameoverView+0x38>)
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	601a      	str	r2, [r3, #0]
 8012cd6:	4a06      	ldr	r2, [pc, #24]	; (8012cf0 <_ZN17gameoverPresenterC1ER12gameoverView+0x3c>)
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	605a      	str	r2, [r3, #4]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	683a      	ldr	r2, [r7, #0]
 8012ce0:	60da      	str	r2, [r3, #12]
{

}
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3708      	adds	r7, #8
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	08028774 	.word	0x08028774
 8012cf0:	0802878c 	.word	0x0802878c

08012cf4 <_ZN17gameoverPresenter8activateEv>:

void gameoverPresenter::activate()
{
 8012cf4:	b480      	push	{r7}
 8012cf6:	b083      	sub	sp, #12
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]

}
 8012cfc:	bf00      	nop
 8012cfe:	370c      	adds	r7, #12
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr

08012d08 <_ZN17gameoverPresenter10deactivateEv>:

void gameoverPresenter::deactivate()
{
 8012d08:	b480      	push	{r7}
 8012d0a:	b083      	sub	sp, #12
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]

}
 8012d10:	bf00      	nop
 8012d12:	370c      	adds	r7, #12
 8012d14:	46bd      	mov	sp, r7
 8012d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1a:	4770      	bx	lr

08012d1c <_ZN12gameoverViewD1Ev>:

class gameoverView : public gameoverViewBase
{
public:
    gameoverView();
    virtual ~gameoverView() {}
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	4a05      	ldr	r2, [pc, #20]	; (8012d3c <_ZN12gameoverViewD1Ev+0x20>)
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	601a      	str	r2, [r3, #0]
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7fd f987 	bl	8010040 <_ZN16gameoverViewBaseD1Ev>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	4618      	mov	r0, r3
 8012d36:	3708      	adds	r7, #8
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}
 8012d3c:	0802879c 	.word	0x0802879c

08012d40 <_ZN12gameoverViewD0Ev>:
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f7ff ffe7 	bl	8012d1c <_ZN12gameoverViewD1Ev>
 8012d4e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f012 fc98 	bl	8025688 <_ZdlPvj>
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3708      	adds	r7, #8
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
	...

08012d64 <_ZN12gameoverViewC1Ev>:
#include <gui/gameover_screen/gameoverView.hpp>

gameoverView::gameoverView()
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7fd f9b4 	bl	80100dc <_ZN16gameoverViewBaseC1Ev>
 8012d74:	4a03      	ldr	r2, [pc, #12]	; (8012d84 <_ZN12gameoverViewC1Ev+0x20>)
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	601a      	str	r2, [r3, #0]
{

}
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3708      	adds	r7, #8
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}
 8012d84:	0802879c 	.word	0x0802879c

08012d88 <_ZN12gameoverView11setupScreenEv>:

void gameoverView::setupScreen()
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
    gameoverViewBase::setupScreen();
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7fd fb4a 	bl	801042c <_ZN16gameoverViewBase11setupScreenEv>
	Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", pong_score);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 8012d9e:	4b07      	ldr	r3, [pc, #28]	; (8012dbc <_ZN12gameoverView11setupScreenEv+0x34>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	4a07      	ldr	r2, [pc, #28]	; (8012dc0 <_ZN12gameoverView11setupScreenEv+0x38>)
 8012da4:	2114      	movs	r1, #20
 8012da6:	f008 fd75 	bl	801b894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	score.invalidate();
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	33f4      	adds	r3, #244	; 0xf4
 8012dae:	4618      	mov	r0, r3
 8012db0:	f006 ff38 	bl	8019c24 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8012db4:	bf00      	nop
 8012db6:	3708      	adds	r7, #8
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	2000b9c0 	.word	0x2000b9c0
 8012dc0:	08027008 	.word	0x08027008

08012dc4 <_ZN12gameoverView14tearDownScreenEv>:

void gameoverView::tearDownScreen()
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
    gameoverViewBase::tearDownScreen();
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7fc fb28 	bl	800f424 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012dd4:	bf00      	nop
 8012dd6:	3708      	adds	r7, #8
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}

08012ddc <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8012ddc:	b480      	push	{r7}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2200      	movs	r2, #0
 8012de8:	601a      	str	r2, [r3, #0]
{

}
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	4618      	mov	r0, r3
 8012dee:	370c      	adds	r7, #12
 8012df0:	46bd      	mov	sp, r7
 8012df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df6:	4770      	bx	lr

08012df8 <_ZN5Model4tickEv>:

void Model::tick()
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b083      	sub	sp, #12
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]

}
 8012e00:	bf00      	nop
 8012e02:	370c      	adds	r7, #12
 8012e04:	46bd      	mov	sp, r7
 8012e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0a:	4770      	bx	lr

08012e0c <_ZN14MusicPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MusicPresenter() {};
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b082      	sub	sp, #8
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	4a09      	ldr	r2, [pc, #36]	; (8012e3c <_ZN14MusicPresenterD1Ev+0x30>)
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	601a      	str	r2, [r3, #0]
 8012e1a:	4a09      	ldr	r2, [pc, #36]	; (8012e40 <_ZN14MusicPresenterD1Ev+0x34>)
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	605a      	str	r2, [r3, #4]
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	3304      	adds	r3, #4
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7ff fe3b 	bl	8012aa0 <_ZN13ModelListenerD1Ev>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7ff fdf3 	bl	8012a18 <_ZN8touchgfx9PresenterD1Ev>
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	4618      	mov	r0, r3
 8012e36:	3708      	adds	r7, #8
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	080287d0 	.word	0x080287d0
 8012e40:	080287e8 	.word	0x080287e8

08012e44 <_ZThn4_N14MusicPresenterD1Ev>:
 8012e44:	f1a0 0004 	sub.w	r0, r0, #4
 8012e48:	e7e0      	b.n	8012e0c <_ZN14MusicPresenterD1Ev>
 8012e4a:	bf00      	nop

08012e4c <_ZN14MusicPresenterD0Ev>:
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f7ff ffd9 	bl	8012e0c <_ZN14MusicPresenterD1Ev>
 8012e5a:	2110      	movs	r1, #16
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f012 fc13 	bl	8025688 <_ZdlPvj>
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	4618      	mov	r0, r3
 8012e66:	3708      	adds	r7, #8
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}

08012e6c <_ZThn4_N14MusicPresenterD0Ev>:
 8012e6c:	f1a0 0004 	sub.w	r0, r0, #4
 8012e70:	e7ec      	b.n	8012e4c <_ZN14MusicPresenterD0Ev>
	...

08012e74 <_ZN14MusicPresenterC1ER9MusicView>:
#include <gui/music_screen/MusicView.hpp>
#include <gui/music_screen/MusicPresenter.hpp>

MusicPresenter::MusicPresenter(MusicView& v)
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b082      	sub	sp, #8
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	6039      	str	r1, [r7, #0]
    : view(v)
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7ff fde9 	bl	8012a58 <_ZN8touchgfx9PresenterC1Ev>
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	3304      	adds	r3, #4
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7ff fdf4 	bl	8012a78 <_ZN13ModelListenerC1Ev>
 8012e90:	4a06      	ldr	r2, [pc, #24]	; (8012eac <_ZN14MusicPresenterC1ER9MusicView+0x38>)
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	601a      	str	r2, [r3, #0]
 8012e96:	4a06      	ldr	r2, [pc, #24]	; (8012eb0 <_ZN14MusicPresenterC1ER9MusicView+0x3c>)
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	605a      	str	r2, [r3, #4]
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	683a      	ldr	r2, [r7, #0]
 8012ea0:	60da      	str	r2, [r3, #12]
{

}
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3708      	adds	r7, #8
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	080287d0 	.word	0x080287d0
 8012eb0:	080287e8 	.word	0x080287e8

08012eb4 <_ZN14MusicPresenter8activateEv>:

void MusicPresenter::activate()
{
 8012eb4:	b480      	push	{r7}
 8012eb6:	b083      	sub	sp, #12
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]

}
 8012ebc:	bf00      	nop
 8012ebe:	370c      	adds	r7, #12
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec6:	4770      	bx	lr

08012ec8 <_ZN14MusicPresenter10deactivateEv>:

void MusicPresenter::deactivate()
{
 8012ec8:	b480      	push	{r7}
 8012eca:	b083      	sub	sp, #12
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]

}
 8012ed0:	bf00      	nop
 8012ed2:	370c      	adds	r7, #12
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr

08012edc <_ZN9MusicViewD1Ev>:

class MusicView : public MusicViewBase
{
public:
    MusicView();
    virtual ~MusicView() {}
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	4a05      	ldr	r2, [pc, #20]	; (8012efc <_ZN9MusicViewD1Ev+0x20>)
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	601a      	str	r2, [r3, #0]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7fd fbd7 	bl	80106a0 <_ZN13MusicViewBaseD1Ev>
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3708      	adds	r7, #8
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}
 8012efc:	080287f8 	.word	0x080287f8

08012f00 <_ZN9MusicViewD0Ev>:
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b082      	sub	sp, #8
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f7ff ffe7 	bl	8012edc <_ZN9MusicViewD1Ev>
 8012f0e:	f44f 7146 	mov.w	r1, #792	; 0x318
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f012 fbb8 	bl	8025688 <_ZdlPvj>
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3708      	adds	r7, #8
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
	...

08012f24 <_ZN9MusicViewC1Ev>:
extern xQueueHandle music_msg_q;

//----------------------------------------------


MusicView::MusicView()
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fd fc64 	bl	80107fc <_ZN13MusicViewBaseC1Ev>
 8012f34:	4a03      	ldr	r2, [pc, #12]	; (8012f44 <_ZN9MusicViewC1Ev+0x20>)
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	601a      	str	r2, [r3, #0]
{

}
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	3708      	adds	r7, #8
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}
 8012f44:	080287f8 	.word	0x080287f8

08012f48 <_ZN9MusicView11setupScreenEv>:

void MusicView::setupScreen()
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
    MusicViewBase::setupScreen();
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fe f81c 	bl	8010f90 <_ZN13MusicViewBase11setupScreenEv>
}
 8012f58:	bf00      	nop
 8012f5a:	3708      	adds	r7, #8
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <_ZN9MusicView14tearDownScreenEv>:

void MusicView::tearDownScreen()
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b082      	sub	sp, #8
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
    MusicViewBase::tearDownScreen();
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7fc fa5a 	bl	800f424 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012f70:	bf00      	nop
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <_ZN9MusicView11controlPlayEv>:


//------------- Custom function ------------
void MusicView::controlPlay()
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
	sendControlQ(2);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	3348      	adds	r3, #72	; 0x48
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	2102      	movs	r1, #2
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	4798      	blx	r3
}
 8012f8e:	bf00      	nop
 8012f90:	3708      	adds	r7, #8
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <_ZN9MusicView11controlStopEv>:

void MusicView::controlStop()
{
 8012f96:	b580      	push	{r7, lr}
 8012f98:	b082      	sub	sp, #8
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	6078      	str	r0, [r7, #4]
	sendControlQ(3);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	3348      	adds	r3, #72	; 0x48
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	2103      	movs	r1, #3
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	4798      	blx	r3
}
 8012fac:	bf00      	nop
 8012fae:	3708      	adds	r7, #8
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <_ZN9MusicView11controlPrevEv>:
void MusicView::controlPrev()
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
	sendControlQ(4);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	3348      	adds	r3, #72	; 0x48
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	2104      	movs	r1, #4
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	4798      	blx	r3
}
 8012fca:	bf00      	nop
 8012fcc:	3708      	adds	r7, #8
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}

08012fd2 <_ZN9MusicView11controlNextEv>:
void MusicView::controlNext()
{
 8012fd2:	b580      	push	{r7, lr}
 8012fd4:	b082      	sub	sp, #8
 8012fd6:	af00      	add	r7, sp, #0
 8012fd8:	6078      	str	r0, [r7, #4]
	sendControlQ(5);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	3348      	adds	r3, #72	; 0x48
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	2105      	movs	r1, #5
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	4798      	blx	r3
}
 8012fe8:	bf00      	nop
 8012fea:	3708      	adds	r7, #8
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <_ZN9MusicView17controlVolumeDownEv>:
void MusicView::controlVolumeDown()
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b082      	sub	sp, #8
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
	sendControlQ(6);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	3348      	adds	r3, #72	; 0x48
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	2106      	movs	r1, #6
 8013002:	6878      	ldr	r0, [r7, #4]
 8013004:	4798      	blx	r3
}
 8013006:	bf00      	nop
 8013008:	3708      	adds	r7, #8
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}

0801300e <_ZN9MusicView15controlVolumeUpEv>:
void MusicView::controlVolumeUp()
{
 801300e:	b580      	push	{r7, lr}
 8013010:	b082      	sub	sp, #8
 8013012:	af00      	add	r7, sp, #0
 8013014:	6078      	str	r0, [r7, #4]
	sendControlQ(7);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	3348      	adds	r3, #72	; 0x48
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	2107      	movs	r1, #7
 8013020:	6878      	ldr	r0, [r7, #4]
 8013022:	4798      	blx	r3
}
 8013024:	bf00      	nop
 8013026:	3708      	adds	r7, #8
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}

0801302c <_ZN9MusicView12sendControlQEh>:

void MusicView::sendControlQ(uint8_t signal){
 801302c:	b580      	push	{r7, lr}
 801302e:	b082      	sub	sp, #8
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
 8013034:	460b      	mov	r3, r1
 8013036:	70fb      	strb	r3, [r7, #3]
	xQueueSend(music_msg_q, &signal, 0);
 8013038:	4b05      	ldr	r3, [pc, #20]	; (8013050 <_ZN9MusicView12sendControlQEh+0x24>)
 801303a:	6818      	ldr	r0, [r3, #0]
 801303c:	1cf9      	adds	r1, r7, #3
 801303e:	2300      	movs	r3, #0
 8013040:	2200      	movs	r2, #0
 8013042:	f7f6 fa07 	bl	8009454 <xQueueGenericSend>
}
 8013046:	bf00      	nop
 8013048:	3708      	adds	r7, #8
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}
 801304e:	bf00      	nop
 8013050:	2000b62c 	.word	0x2000b62c

08013054 <_ZN9MusicView14updateFileNameEv>:

void MusicView::updateFileName(){
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
	if (uartMsgBuffer[0] == 0)
 801305c:	4b10      	ldr	r3, [pc, #64]	; (80130a0 <_ZN9MusicView14updateFileNameEv+0x4c>)
 801305e:	781b      	ldrb	r3, [r3, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d019      	beq.n	8013098 <_ZN9MusicView14updateFileNameEv+0x44>
		return; // array empty so return

	memset(&MusicTextAreaBuffer, 0, MUSICTEXTAREA_SIZE);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 801306a:	2211      	movs	r2, #17
 801306c:	2100      	movs	r1, #0
 801306e:	4618      	mov	r0, r3
 8013070:	f012 fbbf 	bl	80257f2 <memset>

	Unicode::strncpy(MusicTextAreaBuffer, (char *)uartMsgBuffer, MUSICTEXTAREA_SIZE - 1);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 801307a:	2210      	movs	r2, #16
 801307c:	4908      	ldr	r1, [pc, #32]	; (80130a0 <_ZN9MusicView14updateFileNameEv+0x4c>)
 801307e:	4618      	mov	r0, r3
 8013080:	f008 f8a3 	bl	801b1ca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	MusicTextAreaBuffer[16] = '\0'; // last index must be NULL
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2200      	movs	r2, #0
 8013088:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	MusicTextArea.invalidate();
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	33e8      	adds	r3, #232	; 0xe8
 8013090:	4618      	mov	r0, r3
 8013092:	f006 fdc7 	bl	8019c24 <_ZNK8touchgfx8Drawable10invalidateEv>
 8013096:	e000      	b.n	801309a <_ZN9MusicView14updateFileNameEv+0x46>
		return; // array empty so return
 8013098:	bf00      	nop
}
 801309a:	3708      	adds	r7, #8
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}
 80130a0:	2000b634 	.word	0x2000b634

080130a4 <_ZN9MusicView15handleTickEventEv>:

// ------------ Tick ---------------
void MusicView::handleTickEvent(){
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b082      	sub	sp, #8
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
	if (binarySemMsgUartHandle != NULL)
 80130ac:	4b0d      	ldr	r3, [pc, #52]	; (80130e4 <_ZN9MusicView15handleTickEventEv+0x40>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d013      	beq.n	80130dc <_ZN9MusicView15handleTickEventEv+0x38>
		{
			if (xSemaphoreTake(binarySemMsgUartHandle, (TickType_t)10) == pdTRUE)
 80130b4:	4b0b      	ldr	r3, [pc, #44]	; (80130e4 <_ZN9MusicView15handleTickEventEv+0x40>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	210a      	movs	r1, #10
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7f6 fc40 	bl	8009940 <xQueueSemaphoreTake>
 80130c0:	4603      	mov	r3, r0
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	bf0c      	ite	eq
 80130c6:	2301      	moveq	r3, #1
 80130c8:	2300      	movne	r3, #0
 80130ca:	b2db      	uxtb	r3, r3
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d005      	beq.n	80130dc <_ZN9MusicView15handleTickEventEv+0x38>
			{
				updateFileName();
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	3344      	adds	r3, #68	; 0x44
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	4798      	blx	r3
			}
		}
}
 80130dc:	bf00      	nop
 80130de:	3708      	adds	r7, #8
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	2000b99c 	.word	0x2000b99c

080130e8 <_ZN13PongPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~PongPresenter() {};
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b082      	sub	sp, #8
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	4a09      	ldr	r2, [pc, #36]	; (8013118 <_ZN13PongPresenterD1Ev+0x30>)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	601a      	str	r2, [r3, #0]
 80130f6:	4a09      	ldr	r2, [pc, #36]	; (801311c <_ZN13PongPresenterD1Ev+0x34>)
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	605a      	str	r2, [r3, #4]
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	3304      	adds	r3, #4
 8013100:	4618      	mov	r0, r3
 8013102:	f7ff fccd 	bl	8012aa0 <_ZN13ModelListenerD1Ev>
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	4618      	mov	r0, r3
 801310a:	f7ff fc85 	bl	8012a18 <_ZN8touchgfx9PresenterD1Ev>
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	4618      	mov	r0, r3
 8013112:	3708      	adds	r7, #8
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	0802884c 	.word	0x0802884c
 801311c:	08028864 	.word	0x08028864

08013120 <_ZThn4_N13PongPresenterD1Ev>:
 8013120:	f1a0 0004 	sub.w	r0, r0, #4
 8013124:	e7e0      	b.n	80130e8 <_ZN13PongPresenterD1Ev>
 8013126:	bf00      	nop

08013128 <_ZN13PongPresenterD0Ev>:
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f7ff ffd9 	bl	80130e8 <_ZN13PongPresenterD1Ev>
 8013136:	2110      	movs	r1, #16
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f012 faa5 	bl	8025688 <_ZdlPvj>
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	4618      	mov	r0, r3
 8013142:	3708      	adds	r7, #8
 8013144:	46bd      	mov	sp, r7
 8013146:	bd80      	pop	{r7, pc}

08013148 <_ZThn4_N13PongPresenterD0Ev>:
 8013148:	f1a0 0004 	sub.w	r0, r0, #4
 801314c:	e7ec      	b.n	8013128 <_ZN13PongPresenterD0Ev>
	...

08013150 <_ZN13PongPresenterC1ER8PongView>:
#include <gui/pong_screen/PongView.hpp>
#include <gui/pong_screen/PongPresenter.hpp>

PongPresenter::PongPresenter(PongView& v)
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
    : view(v)
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	4618      	mov	r0, r3
 801315e:	f7ff fc7b 	bl	8012a58 <_ZN8touchgfx9PresenterC1Ev>
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	3304      	adds	r3, #4
 8013166:	4618      	mov	r0, r3
 8013168:	f7ff fc86 	bl	8012a78 <_ZN13ModelListenerC1Ev>
 801316c:	4a06      	ldr	r2, [pc, #24]	; (8013188 <_ZN13PongPresenterC1ER8PongView+0x38>)
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	601a      	str	r2, [r3, #0]
 8013172:	4a06      	ldr	r2, [pc, #24]	; (801318c <_ZN13PongPresenterC1ER8PongView+0x3c>)
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	605a      	str	r2, [r3, #4]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	683a      	ldr	r2, [r7, #0]
 801317c:	60da      	str	r2, [r3, #12]
{

}
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	4618      	mov	r0, r3
 8013182:	3708      	adds	r7, #8
 8013184:	46bd      	mov	sp, r7
 8013186:	bd80      	pop	{r7, pc}
 8013188:	0802884c 	.word	0x0802884c
 801318c:	08028864 	.word	0x08028864

08013190 <_ZN13PongPresenter8activateEv>:

void PongPresenter::activate()
{
 8013190:	b480      	push	{r7}
 8013192:	b083      	sub	sp, #12
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]

}
 8013198:	bf00      	nop
 801319a:	370c      	adds	r7, #12
 801319c:	46bd      	mov	sp, r7
 801319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a2:	4770      	bx	lr

080131a4 <_ZN13PongPresenter10deactivateEv>:

void PongPresenter::deactivate()
{
 80131a4:	b480      	push	{r7}
 80131a6:	b083      	sub	sp, #12
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]

}
 80131ac:	bf00      	nop
 80131ae:	370c      	adds	r7, #12
 80131b0:	46bd      	mov	sp, r7
 80131b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b6:	4770      	bx	lr

080131b8 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 80131b8:	b480      	push	{r7}
 80131ba:	b083      	sub	sp, #12
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
        return rect.width;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 80131c6:	4618      	mov	r0, r3
 80131c8:	370c      	adds	r7, #12
 80131ca:	46bd      	mov	sp, r7
 80131cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d0:	4770      	bx	lr

080131d2 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 80131d2:	b480      	push	{r7}
 80131d4:	b083      	sub	sp, #12
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
        return rect.height;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80131e0:	4618      	mov	r0, r3
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ea:	4770      	bx	lr

080131ec <_ZN8PongViewD1Ev>:

class PongView : public PongViewBase
{
public:
    PongView();
    virtual ~PongView() {}
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b082      	sub	sp, #8
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	4a05      	ldr	r2, [pc, #20]	; (801320c <_ZN8PongViewD1Ev+0x20>)
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	601a      	str	r2, [r3, #0]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7fe f987 	bl	8011510 <_ZN12PongViewBaseD1Ev>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	4618      	mov	r0, r3
 8013206:	3708      	adds	r7, #8
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}
 801320c:	08028874 	.word	0x08028874

08013210 <_ZN8PongViewD0Ev>:
 8013210:	b580      	push	{r7, lr}
 8013212:	b082      	sub	sp, #8
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f7ff ffe7 	bl	80131ec <_ZN8PongViewD1Ev>
 801321e:	f641 6150 	movw	r1, #7760	; 0x1e50
 8013222:	6878      	ldr	r0, [r7, #4]
 8013224:	f012 fa30 	bl	8025688 <_ZdlPvj>
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	4618      	mov	r0, r3
 801322c:	3708      	adds	r7, #8
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
	...

08013234 <_ZN8PongViewC1Ev>:
#include <gui/pong_screen/PongView.hpp>

#include <touchgfx/lcd/LCD.hpp>

PongView::PongView()
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	4618      	mov	r0, r3
 8013240:	f7fe f9c0 	bl	80115c4 <_ZN12PongViewBaseC1Ev>
 8013244:	4a18      	ldr	r2, [pc, #96]	; (80132a8 <_ZN8PongViewC1Ev+0x74>)
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	601a      	str	r2, [r3, #0]
 801324a:	687a      	ldr	r2, [r7, #4]
 801324c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013250:	4413      	add	r3, r2
 8013252:	2201      	movs	r2, #1
 8013254:	601a      	str	r2, [r3, #0]
 8013256:	687a      	ldr	r2, [r7, #4]
 8013258:	f641 6328 	movw	r3, #7720	; 0x1e28
 801325c:	4413      	add	r3, r2
 801325e:	2201      	movs	r2, #1
 8013260:	601a      	str	r2, [r3, #0]
 8013262:	687a      	ldr	r2, [r7, #4]
 8013264:	f641 632c 	movw	r3, #7724	; 0x1e2c
 8013268:	4413      	add	r3, r2
 801326a:	2204      	movs	r2, #4
 801326c:	601a      	str	r2, [r3, #0]
 801326e:	687a      	ldr	r2, [r7, #4]
 8013270:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013274:	4413      	add	r3, r2
 8013276:	2228      	movs	r2, #40	; 0x28
 8013278:	601a      	str	r2, [r3, #0]
 801327a:	687a      	ldr	r2, [r7, #4]
 801327c:	f641 6334 	movw	r3, #7732	; 0x1e34
 8013280:	4413      	add	r3, r2
 8013282:	2200      	movs	r2, #0
 8013284:	601a      	str	r2, [r3, #0]
 8013286:	687a      	ldr	r2, [r7, #4]
 8013288:	f641 633c 	movw	r3, #7740	; 0x1e3c
 801328c:	4413      	add	r3, r2
 801328e:	2200      	movs	r2, #0
 8013290:	601a      	str	r2, [r3, #0]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 8013298:	2200      	movs	r2, #0
 801329a:	601a      	str	r2, [r3, #0]
{

}
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	4618      	mov	r0, r3
 80132a0:	3708      	adds	r7, #8
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	08028874 	.word	0x08028874

080132ac <_ZN8PongView11setupScreenEv>:

void PongView::setupScreen()
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
    PongViewBase::setupScreen();
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7fe fb74 	bl	80119a4 <_ZN12PongViewBase11setupScreenEv>
    color[0] = 6;
 80132bc:	687a      	ldr	r2, [r7, #4]
 80132be:	f641 6344 	movw	r3, #7748	; 0x1e44
 80132c2:	4413      	add	r3, r2
 80132c4:	2206      	movs	r2, #6
 80132c6:	601a      	str	r2, [r3, #0]
    color[1] = 255;
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	f641 6348 	movw	r3, #7752	; 0x1e48
 80132ce:	4413      	add	r3, r2
 80132d0:	22ff      	movs	r2, #255	; 0xff
 80132d2:	601a      	str	r2, [r3, #0]
    color[2] = 141;
 80132d4:	687a      	ldr	r2, [r7, #4]
 80132d6:	f641 634c 	movw	r3, #7756	; 0x1e4c
 80132da:	4413      	add	r3, r2
 80132dc:	228d      	movs	r2, #141	; 0x8d
 80132de:	601a      	str	r2, [r3, #0]
}
 80132e0:	bf00      	nop
 80132e2:	3708      	adds	r7, #8
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <_ZN8PongView14tearDownScreenEv>:

void PongView::tearDownScreen()
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b082      	sub	sp, #8
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
    PongViewBase::tearDownScreen();
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7fc f896 	bl	800f424 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80132f8:	bf00      	nop
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <_ZN8PongView9move_leftEv>:

void PongView::move_left(){
 8013300:	b590      	push	{r4, r7, lr}
 8013302:	b083      	sub	sp, #12
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 801330e:	22ff      	movs	r2, #255	; 0xff
 8013310:	21ff      	movs	r1, #255	; 0xff
 8013312:	20ff      	movs	r0, #255	; 0xff
 8013314:	f7fc fa36 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013318:	4603      	mov	r3, r0
 801331a:	4619      	mov	r1, r3
 801331c:	4620      	mov	r0, r4
 801331e:	f7fc f909 	bl	800f534 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	33ec      	adds	r3, #236	; 0xec
 8013326:	4618      	mov	r0, r3
 8013328:	f006 fc7c 	bl	8019c24 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()-20);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	33ec      	adds	r3, #236	; 0xec
 8013336:	4618      	mov	r0, r3
 8013338:	f7f9 f8dd 	bl	800c4f6 <_ZNK8touchgfx8Drawable4getXEv>
 801333c:	4603      	mov	r3, r0
 801333e:	b29b      	uxth	r3, r3
 8013340:	3b14      	subs	r3, #20
 8013342:	b29b      	uxth	r3, r3
 8013344:	b21b      	sxth	r3, r3
 8013346:	4619      	mov	r1, r3
 8013348:	4620      	mov	r0, r4
 801334a:	f7f9 f8ee 	bl	800c52a <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 8013354:	22ff      	movs	r2, #255	; 0xff
 8013356:	2180      	movs	r1, #128	; 0x80
 8013358:	2006      	movs	r0, #6
 801335a:	f7fc fa13 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801335e:	4603      	mov	r3, r0
 8013360:	4619      	mov	r1, r3
 8013362:	4620      	mov	r0, r4
 8013364:	f7fc f8e6 	bl	800f534 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	33ec      	adds	r3, #236	; 0xec
 801336c:	4618      	mov	r0, r3
 801336e:	f006 fc59 	bl	8019c24 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8013372:	bf00      	nop
 8013374:	370c      	adds	r7, #12
 8013376:	46bd      	mov	sp, r7
 8013378:	bd90      	pop	{r4, r7, pc}

0801337a <_ZN8PongView10move_rightEv>:

void PongView::move_right(){
 801337a:	b590      	push	{r4, r7, lr}
 801337c:	b083      	sub	sp, #12
 801337e:	af00      	add	r7, sp, #0
 8013380:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 8013388:	22ff      	movs	r2, #255	; 0xff
 801338a:	21ff      	movs	r1, #255	; 0xff
 801338c:	20ff      	movs	r0, #255	; 0xff
 801338e:	f7fc f9f9 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013392:	4603      	mov	r3, r0
 8013394:	4619      	mov	r1, r3
 8013396:	4620      	mov	r0, r4
 8013398:	f7fc f8cc 	bl	800f534 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	33ec      	adds	r3, #236	; 0xec
 80133a0:	4618      	mov	r0, r3
 80133a2:	f006 fc3f 	bl	8019c24 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()+20);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	33ec      	adds	r3, #236	; 0xec
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7f9 f8a0 	bl	800c4f6 <_ZNK8touchgfx8Drawable4getXEv>
 80133b6:	4603      	mov	r3, r0
 80133b8:	b29b      	uxth	r3, r3
 80133ba:	3314      	adds	r3, #20
 80133bc:	b29b      	uxth	r3, r3
 80133be:	b21b      	sxth	r3, r3
 80133c0:	4619      	mov	r1, r3
 80133c2:	4620      	mov	r0, r4
 80133c4:	f7f9 f8b1 	bl	800c52a <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 80133ce:	22ff      	movs	r2, #255	; 0xff
 80133d0:	2180      	movs	r1, #128	; 0x80
 80133d2:	2006      	movs	r0, #6
 80133d4:	f7fc f9d6 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80133d8:	4603      	mov	r3, r0
 80133da:	4619      	mov	r1, r3
 80133dc:	4620      	mov	r0, r4
 80133de:	f7fc f8a9 	bl	800f534 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	33ec      	adds	r3, #236	; 0xec
 80133e6:	4618      	mov	r0, r3
 80133e8:	f006 fc1c 	bl	8019c24 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 80133ec:	bf00      	nop
 80133ee:	370c      	adds	r7, #12
 80133f0:	46bd      	mov	sp, r7
 80133f2:	bd90      	pop	{r4, r7, pc}

080133f4 <_ZN8PongView15handleTickEventEv>:

void PongView::handleTickEvent(){
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
	tick ++;
 80133fc:	687a      	ldr	r2, [r7, #4]
 80133fe:	f641 6334 	movw	r3, #7732	; 0x1e34
 8013402:	4413      	add	r3, r2
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	1c5a      	adds	r2, r3, #1
 8013408:	6879      	ldr	r1, [r7, #4]
 801340a:	f641 6334 	movw	r3, #7732	; 0x1e34
 801340e:	440b      	add	r3, r1
 8013410:	601a      	str	r2, [r3, #0]
	move_ball();
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f000 f804 	bl	8013420 <_ZN8PongView9move_ballEv>

}
 8013418:	bf00      	nop
 801341a:	3708      	adds	r7, #8
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}

08013420 <_ZN8PongView9move_ballEv>:

void PongView::move_ball(){\
 8013420:	b590      	push	{r4, r7, lr}
 8013422:	b083      	sub	sp, #12
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]

	// move ball
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 801342e:	22ff      	movs	r2, #255	; 0xff
 8013430:	21ff      	movs	r1, #255	; 0xff
 8013432:	20ff      	movs	r0, #255	; 0xff
 8013434:	f7fc f9a6 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013438:	4603      	mov	r3, r0
 801343a:	4619      	mov	r1, r3
 801343c:	4620      	mov	r0, r4
 801343e:	f7fe f80f 	bl	8011460 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	336c      	adds	r3, #108	; 0x6c
 8013446:	4618      	mov	r0, r3
 8013448:	f003 ffa6 	bl	8017398 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	ball.setY(ball.getY() +  ball_vertical_direction*ball_speed);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	336c      	adds	r3, #108	; 0x6c
 8013456:	4618      	mov	r0, r3
 8013458:	f7f9 f85a 	bl	800c510 <_ZNK8touchgfx8Drawable4getYEv>
 801345c:	4603      	mov	r3, r0
 801345e:	b29a      	uxth	r2, r3
 8013460:	6879      	ldr	r1, [r7, #4]
 8013462:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013466:	440b      	add	r3, r1
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	b299      	uxth	r1, r3
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f641 632c 	movw	r3, #7724	; 0x1e2c
 8013472:	4403      	add	r3, r0
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	b29b      	uxth	r3, r3
 8013478:	fb11 f303 	smulbb	r3, r1, r3
 801347c:	b29b      	uxth	r3, r3
 801347e:	4413      	add	r3, r2
 8013480:	b29b      	uxth	r3, r3
 8013482:	b21b      	sxth	r3, r3
 8013484:	4619      	mov	r1, r3
 8013486:	4620      	mov	r0, r4
 8013488:	f7f9 f85e 	bl	800c548 <_ZN8touchgfx8Drawable4setYEs>
	ball.setX(ball.getX() +  ball_horizontal_direction*ball_speed);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	336c      	adds	r3, #108	; 0x6c
 8013496:	4618      	mov	r0, r3
 8013498:	f7f9 f82d 	bl	800c4f6 <_ZNK8touchgfx8Drawable4getXEv>
 801349c:	4603      	mov	r3, r0
 801349e:	b29a      	uxth	r2, r3
 80134a0:	6879      	ldr	r1, [r7, #4]
 80134a2:	f641 6328 	movw	r3, #7720	; 0x1e28
 80134a6:	440b      	add	r3, r1
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	b299      	uxth	r1, r3
 80134ac:	6878      	ldr	r0, [r7, #4]
 80134ae:	f641 632c 	movw	r3, #7724	; 0x1e2c
 80134b2:	4403      	add	r3, r0
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	b29b      	uxth	r3, r3
 80134b8:	fb11 f303 	smulbb	r3, r1, r3
 80134bc:	b29b      	uxth	r3, r3
 80134be:	4413      	add	r3, r2
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	b21b      	sxth	r3, r3
 80134c4:	4619      	mov	r1, r3
 80134c6:	4620      	mov	r0, r4
 80134c8:	f7f9 f82f 	bl	800c52a <_ZN8touchgfx8Drawable4setXEs>
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(color[0], color[1], color[2]));
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 80134d2:	687a      	ldr	r2, [r7, #4]
 80134d4:	f641 6344 	movw	r3, #7748	; 0x1e44
 80134d8:	4413      	add	r3, r2
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	b2d8      	uxtb	r0, r3
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	f641 6348 	movw	r3, #7752	; 0x1e48
 80134e4:	4413      	add	r3, r2
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	b2d9      	uxtb	r1, r3
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	f641 634c 	movw	r3, #7756	; 0x1e4c
 80134f0:	4413      	add	r3, r2
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	b2db      	uxtb	r3, r3
 80134f6:	461a      	mov	r2, r3
 80134f8:	f7fc f944 	bl	800f784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80134fc:	4603      	mov	r3, r0
 80134fe:	4619      	mov	r1, r3
 8013500:	4620      	mov	r0, r4
 8013502:	f7fd ffad 	bl	8011460 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	336c      	adds	r3, #108	; 0x6c
 801350a:	4618      	mov	r0, r3
 801350c:	f003 ff44 	bl	8017398 <_ZNK8touchgfx12CanvasWidget10invalidateEv>


	if(check_collision()==1){
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f000 f8f1 	bl	80136f8 <_ZN8PongView15check_collisionEv>
 8013516:	4603      	mov	r3, r0
 8013518:	2b01      	cmp	r3, #1
 801351a:	bf0c      	ite	eq
 801351c:	2301      	moveq	r3, #1
 801351e:	2300      	movne	r3, #0
 8013520:	b2db      	uxtb	r3, r3
 8013522:	2b00      	cmp	r3, #0
 8013524:	f000 808c 	beq.w	8013640 <_ZN8PongView9move_ballEv+0x220>
		ball_vertical_direction = -1;
 8013528:	687a      	ldr	r2, [r7, #4]
 801352a:	f641 6324 	movw	r3, #7716	; 0x1e24
 801352e:	4413      	add	r3, r2
 8013530:	f04f 32ff 	mov.w	r2, #4294967295
 8013534:	601a      	str	r2, [r3, #0]

		if(collide_count % 20 == 0){
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 801353c:	6819      	ldr	r1, [r3, #0]
 801353e:	4b6b      	ldr	r3, [pc, #428]	; (80136ec <_ZN8PongView9move_ballEv+0x2cc>)
 8013540:	fb83 2301 	smull	r2, r3, r3, r1
 8013544:	10da      	asrs	r2, r3, #3
 8013546:	17cb      	asrs	r3, r1, #31
 8013548:	1ad2      	subs	r2, r2, r3
 801354a:	4613      	mov	r3, r2
 801354c:	009b      	lsls	r3, r3, #2
 801354e:	4413      	add	r3, r2
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	1aca      	subs	r2, r1, r3
 8013554:	2a00      	cmp	r2, #0
 8013556:	d14e      	bne.n	80135f6 <_ZN8PongView9move_ballEv+0x1d6>
			ball_speed = ball_speed  + 1;
 8013558:	687a      	ldr	r2, [r7, #4]
 801355a:	f641 632c 	movw	r3, #7724	; 0x1e2c
 801355e:	4413      	add	r3, r2
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	1c5a      	adds	r2, r3, #1
 8013564:	6879      	ldr	r1, [r7, #4]
 8013566:	f641 632c 	movw	r3, #7724	; 0x1e2c
 801356a:	440b      	add	r3, r1
 801356c:	601a      	str	r2, [r3, #0]
			sc = sc+1;
 801356e:	687a      	ldr	r2, [r7, #4]
 8013570:	f641 633c 	movw	r3, #7740	; 0x1e3c
 8013574:	4413      	add	r3, r2
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	1c5a      	adds	r2, r3, #1
 801357a:	6879      	ldr	r1, [r7, #4]
 801357c:	f641 633c 	movw	r3, #7740	; 0x1e3c
 8013580:	440b      	add	r3, r1
 8013582:	601a      	str	r2, [r3, #0]
			Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", sc);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f503 70e6 	add.w	r0, r3, #460	; 0x1cc
 801358a:	687a      	ldr	r2, [r7, #4]
 801358c:	f641 633c 	movw	r3, #7740	; 0x1e3c
 8013590:	4413      	add	r3, r2
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	4a56      	ldr	r2, [pc, #344]	; (80136f0 <_ZN8PongView9move_ballEv+0x2d0>)
 8013596:	2114      	movs	r1, #20
 8013598:	f008 f97c 	bl	801b894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			score.invalidate();
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80135a2:	4618      	mov	r0, r3
 80135a4:	f006 fb3e 	bl	8019c24 <_ZNK8touchgfx8Drawable10invalidateEv>

		    color[0] =  ( std::rand() % ( 255 + 1 ) );
 80135a8:	f012 fc9c 	bl	8025ee4 <rand>
 80135ac:	4603      	mov	r3, r0
 80135ae:	425a      	negs	r2, r3
 80135b0:	b2db      	uxtb	r3, r3
 80135b2:	b2d2      	uxtb	r2, r2
 80135b4:	bf58      	it	pl
 80135b6:	4253      	negpl	r3, r2
 80135b8:	6879      	ldr	r1, [r7, #4]
 80135ba:	f641 6244 	movw	r2, #7748	; 0x1e44
 80135be:	440a      	add	r2, r1
 80135c0:	6013      	str	r3, [r2, #0]
		    color[1] =  ( std::rand() % ( 255 + 1 ) );
 80135c2:	f012 fc8f 	bl	8025ee4 <rand>
 80135c6:	4603      	mov	r3, r0
 80135c8:	425a      	negs	r2, r3
 80135ca:	b2db      	uxtb	r3, r3
 80135cc:	b2d2      	uxtb	r2, r2
 80135ce:	bf58      	it	pl
 80135d0:	4253      	negpl	r3, r2
 80135d2:	6879      	ldr	r1, [r7, #4]
 80135d4:	f641 6248 	movw	r2, #7752	; 0x1e48
 80135d8:	440a      	add	r2, r1
 80135da:	6013      	str	r3, [r2, #0]
		    color[2] =  ( std::rand() % ( 255 + 1 ) );
 80135dc:	f012 fc82 	bl	8025ee4 <rand>
 80135e0:	4603      	mov	r3, r0
 80135e2:	425a      	negs	r2, r3
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	b2d2      	uxtb	r2, r2
 80135e8:	bf58      	it	pl
 80135ea:	4253      	negpl	r3, r2
 80135ec:	6879      	ldr	r1, [r7, #4]
 80135ee:	f641 624c 	movw	r2, #7756	; 0x1e4c
 80135f2:	440a      	add	r2, r1
 80135f4:	6013      	str	r3, [r2, #0]
		}
		collide_count ++;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	1c5a      	adds	r2, r3, #1
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 8013606:	601a      	str	r2, [r3, #0]

		if(ball_horizontal_direction==1){
 8013608:	687a      	ldr	r2, [r7, #4]
 801360a:	f641 6328 	movw	r3, #7720	; 0x1e28
 801360e:	4413      	add	r3, r2
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	2b01      	cmp	r3, #1
 8013614:	d106      	bne.n	8013624 <_ZN8PongView9move_ballEv+0x204>
			ball_horizontal_direction = 2;
 8013616:	687a      	ldr	r2, [r7, #4]
 8013618:	f641 6328 	movw	r3, #7720	; 0x1e28
 801361c:	4413      	add	r3, r2
 801361e:	2202      	movs	r2, #2
 8013620:	601a      	str	r2, [r3, #0]
	else if(check_collision()==5){
		pong_score = sc;
		application().gotogameoverScreenNoTransition();
	}

}
 8013622:	e05e      	b.n	80136e2 <_ZN8PongView9move_ballEv+0x2c2>
		else if (ball_horizontal_direction==2){
 8013624:	687a      	ldr	r2, [r7, #4]
 8013626:	f641 6328 	movw	r3, #7720	; 0x1e28
 801362a:	4413      	add	r3, r2
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	2b02      	cmp	r3, #2
 8013630:	d157      	bne.n	80136e2 <_ZN8PongView9move_ballEv+0x2c2>
			ball_horizontal_direction = 1;
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	f641 6328 	movw	r3, #7720	; 0x1e28
 8013638:	4413      	add	r3, r2
 801363a:	2201      	movs	r2, #1
 801363c:	601a      	str	r2, [r3, #0]
}
 801363e:	e050      	b.n	80136e2 <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==2){
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f000 f859 	bl	80136f8 <_ZN8PongView15check_collisionEv>
 8013646:	4603      	mov	r3, r0
 8013648:	2b02      	cmp	r3, #2
 801364a:	bf0c      	ite	eq
 801364c:	2301      	moveq	r3, #1
 801364e:	2300      	movne	r3, #0
 8013650:	b2db      	uxtb	r3, r3
 8013652:	2b00      	cmp	r3, #0
 8013654:	d006      	beq.n	8013664 <_ZN8PongView9move_ballEv+0x244>
		ball_vertical_direction = 1;
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	f641 6324 	movw	r3, #7716	; 0x1e24
 801365c:	4413      	add	r3, r2
 801365e:	2201      	movs	r2, #1
 8013660:	601a      	str	r2, [r3, #0]
}
 8013662:	e03e      	b.n	80136e2 <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==3){
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f000 f847 	bl	80136f8 <_ZN8PongView15check_collisionEv>
 801366a:	4603      	mov	r3, r0
 801366c:	2b03      	cmp	r3, #3
 801366e:	bf0c      	ite	eq
 8013670:	2301      	moveq	r3, #1
 8013672:	2300      	movne	r3, #0
 8013674:	b2db      	uxtb	r3, r3
 8013676:	2b00      	cmp	r3, #0
 8013678:	d006      	beq.n	8013688 <_ZN8PongView9move_ballEv+0x268>
		ball_horizontal_direction = 1;
 801367a:	687a      	ldr	r2, [r7, #4]
 801367c:	f641 6328 	movw	r3, #7720	; 0x1e28
 8013680:	4413      	add	r3, r2
 8013682:	2201      	movs	r2, #1
 8013684:	601a      	str	r2, [r3, #0]
}
 8013686:	e02c      	b.n	80136e2 <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==4){
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f000 f835 	bl	80136f8 <_ZN8PongView15check_collisionEv>
 801368e:	4603      	mov	r3, r0
 8013690:	2b04      	cmp	r3, #4
 8013692:	bf0c      	ite	eq
 8013694:	2301      	moveq	r3, #1
 8013696:	2300      	movne	r3, #0
 8013698:	b2db      	uxtb	r3, r3
 801369a:	2b00      	cmp	r3, #0
 801369c:	d007      	beq.n	80136ae <_ZN8PongView9move_ballEv+0x28e>
		ball_horizontal_direction = -1;
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	f641 6328 	movw	r3, #7720	; 0x1e28
 80136a4:	4413      	add	r3, r2
 80136a6:	f04f 32ff 	mov.w	r2, #4294967295
 80136aa:	601a      	str	r2, [r3, #0]
}
 80136ac:	e019      	b.n	80136e2 <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==5){
 80136ae:	6878      	ldr	r0, [r7, #4]
 80136b0:	f000 f822 	bl	80136f8 <_ZN8PongView15check_collisionEv>
 80136b4:	4603      	mov	r3, r0
 80136b6:	2b05      	cmp	r3, #5
 80136b8:	bf0c      	ite	eq
 80136ba:	2301      	moveq	r3, #1
 80136bc:	2300      	movne	r3, #0
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d00e      	beq.n	80136e2 <_ZN8PongView9move_ballEv+0x2c2>
		pong_score = sc;
 80136c4:	687a      	ldr	r2, [r7, #4]
 80136c6:	f641 633c 	movw	r3, #7740	; 0x1e3c
 80136ca:	4413      	add	r3, r2
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	4a09      	ldr	r2, [pc, #36]	; (80136f4 <_ZN8PongView9move_ballEv+0x2d4>)
 80136d0:	6013      	str	r3, [r2, #0]
		application().gotogameoverScreenNoTransition();
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7fd ff6a 	bl	80115ae <_ZN12PongViewBase11applicationEv>
 80136da:	4603      	mov	r3, r0
 80136dc:	4618      	mov	r0, r3
 80136de:	f7f9 fb03 	bl	800cce8 <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv>
}
 80136e2:	bf00      	nop
 80136e4:	370c      	adds	r7, #12
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd90      	pop	{r4, r7, pc}
 80136ea:	bf00      	nop
 80136ec:	66666667 	.word	0x66666667
 80136f0:	08027090 	.word	0x08027090
 80136f4:	2000b9c0 	.word	0x2000b9c0

080136f8 <_ZN8PongView15check_collisionEv>:

int PongView::check_collision(){
 80136f8:	b5b0      	push	{r4, r5, r7, lr}
 80136fa:	b082      	sub	sp, #8
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
	// collide with paddle
	if(ball.getY()+ball.getHeight()-margin>=paddle1.getY()-paddle1.getHeight() && ball.getX() + margin - 110 >= paddle1.getX() - paddle1.getWidth() && ball.getX() + margin <= paddle1.getX() + paddle1.getWidth()){
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	336c      	adds	r3, #108	; 0x6c
 8013704:	4618      	mov	r0, r3
 8013706:	f7f8 ff03 	bl	800c510 <_ZNK8touchgfx8Drawable4getYEv>
 801370a:	4603      	mov	r3, r0
 801370c:	461c      	mov	r4, r3
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	336c      	adds	r3, #108	; 0x6c
 8013712:	4618      	mov	r0, r3
 8013714:	f7ff fd5d 	bl	80131d2 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013718:	4603      	mov	r3, r0
 801371a:	18e2      	adds	r2, r4, r3
 801371c:	6879      	ldr	r1, [r7, #4]
 801371e:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013722:	440b      	add	r3, r1
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	1ad4      	subs	r4, r2, r3
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	33ec      	adds	r3, #236	; 0xec
 801372c:	4618      	mov	r0, r3
 801372e:	f7f8 feef 	bl	800c510 <_ZNK8touchgfx8Drawable4getYEv>
 8013732:	4603      	mov	r3, r0
 8013734:	461d      	mov	r5, r3
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	33ec      	adds	r3, #236	; 0xec
 801373a:	4618      	mov	r0, r3
 801373c:	f7ff fd49 	bl	80131d2 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013740:	4603      	mov	r3, r0
 8013742:	1aeb      	subs	r3, r5, r3
 8013744:	429c      	cmp	r4, r3
 8013746:	db3d      	blt.n	80137c4 <_ZN8PongView15check_collisionEv+0xcc>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	336c      	adds	r3, #108	; 0x6c
 801374c:	4618      	mov	r0, r3
 801374e:	f7f8 fed2 	bl	800c4f6 <_ZNK8touchgfx8Drawable4getXEv>
 8013752:	4603      	mov	r3, r0
 8013754:	4619      	mov	r1, r3
 8013756:	687a      	ldr	r2, [r7, #4]
 8013758:	f641 6330 	movw	r3, #7728	; 0x1e30
 801375c:	4413      	add	r3, r2
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	440b      	add	r3, r1
 8013762:	f1a3 046e 	sub.w	r4, r3, #110	; 0x6e
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	33ec      	adds	r3, #236	; 0xec
 801376a:	4618      	mov	r0, r3
 801376c:	f7f8 fec3 	bl	800c4f6 <_ZNK8touchgfx8Drawable4getXEv>
 8013770:	4603      	mov	r3, r0
 8013772:	461d      	mov	r5, r3
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	33ec      	adds	r3, #236	; 0xec
 8013778:	4618      	mov	r0, r3
 801377a:	f7ff fd1d 	bl	80131b8 <_ZNK8touchgfx8Drawable8getWidthEv>
 801377e:	4603      	mov	r3, r0
 8013780:	1aeb      	subs	r3, r5, r3
 8013782:	429c      	cmp	r4, r3
 8013784:	db1e      	blt.n	80137c4 <_ZN8PongView15check_collisionEv+0xcc>
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	336c      	adds	r3, #108	; 0x6c
 801378a:	4618      	mov	r0, r3
 801378c:	f7f8 feb3 	bl	800c4f6 <_ZNK8touchgfx8Drawable4getXEv>
 8013790:	4603      	mov	r3, r0
 8013792:	4619      	mov	r1, r3
 8013794:	687a      	ldr	r2, [r7, #4]
 8013796:	f641 6330 	movw	r3, #7728	; 0x1e30
 801379a:	4413      	add	r3, r2
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	18cc      	adds	r4, r1, r3
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	33ec      	adds	r3, #236	; 0xec
 80137a4:	4618      	mov	r0, r3
 80137a6:	f7f8 fea6 	bl	800c4f6 <_ZNK8touchgfx8Drawable4getXEv>
 80137aa:	4603      	mov	r3, r0
 80137ac:	461d      	mov	r5, r3
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	33ec      	adds	r3, #236	; 0xec
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7ff fd00 	bl	80131b8 <_ZNK8touchgfx8Drawable8getWidthEv>
 80137b8:	4603      	mov	r3, r0
 80137ba:	442b      	add	r3, r5
 80137bc:	429c      	cmp	r4, r3
 80137be:	dc01      	bgt.n	80137c4 <_ZN8PongView15check_collisionEv+0xcc>
 80137c0:	2301      	movs	r3, #1
 80137c2:	e000      	b.n	80137c6 <_ZN8PongView15check_collisionEv+0xce>
 80137c4:	2300      	movs	r3, #0
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d001      	beq.n	80137ce <_ZN8PongView15check_collisionEv+0xd6>
		return 1;
 80137ca:	2301      	movs	r3, #1
 80137cc:	e067      	b.n	801389e <_ZN8PongView15check_collisionEv+0x1a6>
	}

	// collide with wall
	if(ball.getY()+ball.getHeight()-margin-20<=0){
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	336c      	adds	r3, #108	; 0x6c
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7f8 fe9c 	bl	800c510 <_ZNK8touchgfx8Drawable4getYEv>
 80137d8:	4603      	mov	r3, r0
 80137da:	461c      	mov	r4, r3
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	336c      	adds	r3, #108	; 0x6c
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7ff fcf6 	bl	80131d2 <_ZNK8touchgfx8Drawable9getHeightEv>
 80137e6:	4603      	mov	r3, r0
 80137e8:	18e2      	adds	r2, r4, r3
 80137ea:	6879      	ldr	r1, [r7, #4]
 80137ec:	f641 6330 	movw	r3, #7728	; 0x1e30
 80137f0:	440b      	add	r3, r1
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	1ad3      	subs	r3, r2, r3
 80137f6:	3b14      	subs	r3, #20
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	bfd4      	ite	le
 80137fc:	2301      	movle	r3, #1
 80137fe:	2300      	movgt	r3, #0
 8013800:	b2db      	uxtb	r3, r3
 8013802:	2b00      	cmp	r3, #0
 8013804:	d001      	beq.n	801380a <_ZN8PongView15check_collisionEv+0x112>
		return 2;
 8013806:	2302      	movs	r3, #2
 8013808:	e049      	b.n	801389e <_ZN8PongView15check_collisionEv+0x1a6>
	}

	// collide with left wall
	if(ball.getX()+ball.getWidth()-margin-20<=0){
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	336c      	adds	r3, #108	; 0x6c
 801380e:	4618      	mov	r0, r3
 8013810:	f7f8 fe71 	bl	800c4f6 <_ZNK8touchgfx8Drawable4getXEv>
 8013814:	4603      	mov	r3, r0
 8013816:	461c      	mov	r4, r3
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	336c      	adds	r3, #108	; 0x6c
 801381c:	4618      	mov	r0, r3
 801381e:	f7ff fccb 	bl	80131b8 <_ZNK8touchgfx8Drawable8getWidthEv>
 8013822:	4603      	mov	r3, r0
 8013824:	18e2      	adds	r2, r4, r3
 8013826:	6879      	ldr	r1, [r7, #4]
 8013828:	f641 6330 	movw	r3, #7728	; 0x1e30
 801382c:	440b      	add	r3, r1
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	1ad3      	subs	r3, r2, r3
 8013832:	3b14      	subs	r3, #20
 8013834:	2b00      	cmp	r3, #0
 8013836:	bfd4      	ite	le
 8013838:	2301      	movle	r3, #1
 801383a:	2300      	movgt	r3, #0
 801383c:	b2db      	uxtb	r3, r3
 801383e:	2b00      	cmp	r3, #0
 8013840:	d001      	beq.n	8013846 <_ZN8PongView15check_collisionEv+0x14e>
		return 3;
 8013842:	2303      	movs	r3, #3
 8013844:	e02b      	b.n	801389e <_ZN8PongView15check_collisionEv+0x1a6>
	}

	// collide with right wall
	if(ball.getX()+ball.getWidth() >= 480){
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	336c      	adds	r3, #108	; 0x6c
 801384a:	4618      	mov	r0, r3
 801384c:	f7f8 fe53 	bl	800c4f6 <_ZNK8touchgfx8Drawable4getXEv>
 8013850:	4603      	mov	r3, r0
 8013852:	461c      	mov	r4, r3
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	336c      	adds	r3, #108	; 0x6c
 8013858:	4618      	mov	r0, r3
 801385a:	f7ff fcad 	bl	80131b8 <_ZNK8touchgfx8Drawable8getWidthEv>
 801385e:	4603      	mov	r3, r0
 8013860:	4423      	add	r3, r4
 8013862:	f240 12df 	movw	r2, #479	; 0x1df
 8013866:	4293      	cmp	r3, r2
 8013868:	bfcc      	ite	gt
 801386a:	2301      	movgt	r3, #1
 801386c:	2300      	movle	r3, #0
 801386e:	b2db      	uxtb	r3, r3
 8013870:	2b00      	cmp	r3, #0
 8013872:	d001      	beq.n	8013878 <_ZN8PongView15check_collisionEv+0x180>
		return 4;
 8013874:	2304      	movs	r3, #4
 8013876:	e012      	b.n	801389e <_ZN8PongView15check_collisionEv+0x1a6>
	}

	// collide with bottom
	if(ball.getY() >= 270){
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	336c      	adds	r3, #108	; 0x6c
 801387c:	4618      	mov	r0, r3
 801387e:	f7f8 fe47 	bl	800c510 <_ZNK8touchgfx8Drawable4getYEv>
 8013882:	4603      	mov	r3, r0
 8013884:	461a      	mov	r2, r3
 8013886:	f240 130d 	movw	r3, #269	; 0x10d
 801388a:	429a      	cmp	r2, r3
 801388c:	bfcc      	ite	gt
 801388e:	2301      	movgt	r3, #1
 8013890:	2300      	movle	r3, #0
 8013892:	b2db      	uxtb	r3, r3
 8013894:	2b00      	cmp	r3, #0
 8013896:	d001      	beq.n	801389c <_ZN8PongView15check_collisionEv+0x1a4>
		return 5;
 8013898:	2305      	movs	r3, #5
 801389a:	e000      	b.n	801389e <_ZN8PongView15check_collisionEv+0x1a6>
	}

	return 0;
 801389c:	2300      	movs	r3, #0
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3708      	adds	r7, #8
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080138a8 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b082      	sub	sp, #8
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	4a09      	ldr	r2, [pc, #36]	; (80138d8 <_ZN15screenPresenterD1Ev+0x30>)
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	601a      	str	r2, [r3, #0]
 80138b6:	4a09      	ldr	r2, [pc, #36]	; (80138dc <_ZN15screenPresenterD1Ev+0x34>)
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	605a      	str	r2, [r3, #4]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	3304      	adds	r3, #4
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7ff f8ed 	bl	8012aa0 <_ZN13ModelListenerD1Ev>
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7ff f8a5 	bl	8012a18 <_ZN8touchgfx9PresenterD1Ev>
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	4618      	mov	r0, r3
 80138d2:	3708      	adds	r7, #8
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}
 80138d8:	080288b0 	.word	0x080288b0
 80138dc:	080288c8 	.word	0x080288c8

080138e0 <_ZThn4_N15screenPresenterD1Ev>:
 80138e0:	f1a0 0004 	sub.w	r0, r0, #4
 80138e4:	e7e0      	b.n	80138a8 <_ZN15screenPresenterD1Ev>
 80138e6:	bf00      	nop

080138e8 <_ZN15screenPresenterD0Ev>:
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b082      	sub	sp, #8
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f7ff ffd9 	bl	80138a8 <_ZN15screenPresenterD1Ev>
 80138f6:	2110      	movs	r1, #16
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f011 fec5 	bl	8025688 <_ZdlPvj>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	4618      	mov	r0, r3
 8013902:	3708      	adds	r7, #8
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}

08013908 <_ZThn4_N15screenPresenterD0Ev>:
 8013908:	f1a0 0004 	sub.w	r0, r0, #4
 801390c:	e7ec      	b.n	80138e8 <_ZN15screenPresenterD0Ev>
	...

08013910 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]
    : view(v)
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	4618      	mov	r0, r3
 801391e:	f7ff f89b 	bl	8012a58 <_ZN8touchgfx9PresenterC1Ev>
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	3304      	adds	r3, #4
 8013926:	4618      	mov	r0, r3
 8013928:	f7ff f8a6 	bl	8012a78 <_ZN13ModelListenerC1Ev>
 801392c:	4a06      	ldr	r2, [pc, #24]	; (8013948 <_ZN15screenPresenterC1ER10screenView+0x38>)
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	601a      	str	r2, [r3, #0]
 8013932:	4a06      	ldr	r2, [pc, #24]	; (801394c <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	605a      	str	r2, [r3, #4]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	683a      	ldr	r2, [r7, #0]
 801393c:	60da      	str	r2, [r3, #12]
{

}
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	4618      	mov	r0, r3
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	080288b0 	.word	0x080288b0
 801394c:	080288c8 	.word	0x080288c8

08013950 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8013950:	b480      	push	{r7}
 8013952:	b083      	sub	sp, #12
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]

}
 8013958:	bf00      	nop
 801395a:	370c      	adds	r7, #12
 801395c:	46bd      	mov	sp, r7
 801395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013962:	4770      	bx	lr

08013964 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8013964:	b480      	push	{r7}
 8013966:	b083      	sub	sp, #12
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]

}
 801396c:	bf00      	nop
 801396e:	370c      	adds	r7, #12
 8013970:	46bd      	mov	sp, r7
 8013972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013976:	4770      	bx	lr

08013978 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8013978:	b580      	push	{r7, lr}
 801397a:	b082      	sub	sp, #8
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	4a05      	ldr	r2, [pc, #20]	; (8013998 <_ZN10screenViewD1Ev+0x20>)
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	601a      	str	r2, [r3, #0]
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	4618      	mov	r0, r3
 801398a:	f7fe fb5b 	bl	8012044 <_ZN14screenViewBaseD1Ev>
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	4618      	mov	r0, r3
 8013992:	3708      	adds	r7, #8
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}
 8013998:	080288d8 	.word	0x080288d8

0801399c <_ZN10screenViewD0Ev>:
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f7ff ffe7 	bl	8013978 <_ZN10screenViewD1Ev>
 80139aa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f011 fe6a 	bl	8025688 <_ZdlPvj>
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	4618      	mov	r0, r3
 80139b8:	3708      	adds	r7, #8
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}
	...

080139c0 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b082      	sub	sp, #8
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7fe fb84 	bl	80120d8 <_ZN14screenViewBaseC1Ev>
 80139d0:	4a03      	ldr	r2, [pc, #12]	; (80139e0 <_ZN10screenViewC1Ev+0x20>)
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	601a      	str	r2, [r3, #0]
{

}
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	4618      	mov	r0, r3
 80139da:	3708      	adds	r7, #8
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}
 80139e0:	080288d8 	.word	0x080288d8

080139e4 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7fe fce2 	bl	80123b8 <_ZN14screenViewBase11setupScreenEv>

}
 80139f4:	bf00      	nop
 80139f6:	3708      	adds	r7, #8
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}

080139fc <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b082      	sub	sp, #8
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fb fd0c 	bl	800f424 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013a0c:	bf00      	nop
 8013a0e:	3708      	adds	r7, #8
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}

08013a14 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8013a14:	b480      	push	{r7}
 8013a16:	b083      	sub	sp, #12
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
    {
 8013a1c:	4a04      	ldr	r2, [pc, #16]	; (8013a30 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	601a      	str	r2, [r3, #0]
    }
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	4618      	mov	r0, r3
 8013a26:	370c      	adds	r7, #12
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2e:	4770      	bx	lr
 8013a30:	08028924 	.word	0x08028924

08013a34 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
    }
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	f7ff ffe9 	bl	8013a14 <_ZN8touchgfx15TouchControllerD1Ev>
 8013a42:	2104      	movs	r1, #4
 8013a44:	6878      	ldr	r0, [r7, #4]
 8013a46:	f011 fe1f 	bl	8025688 <_ZdlPvj>
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3708      	adds	r7, #8
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}

08013a54 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b082      	sub	sp, #8
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	tsDriver = &ft5336_ts_drv;
 8013a5c:	4b05      	ldr	r3, [pc, #20]	; (8013a74 <_ZN20STM32TouchController4initEv+0x20>)
 8013a5e:	4a06      	ldr	r2, [pc, #24]	; (8013a78 <_ZN20STM32TouchController4initEv+0x24>)
 8013a60:	601a      	str	r2, [r3, #0]
	tsDriver->Start(TS_I2C_ADDRESS);
 8013a62:	4b04      	ldr	r3, [pc, #16]	; (8013a74 <_ZN20STM32TouchController4initEv+0x20>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	68db      	ldr	r3, [r3, #12]
 8013a68:	2070      	movs	r0, #112	; 0x70
 8013a6a:	4798      	blx	r3

}
 8013a6c:	bf00      	nop
 8013a6e:	3708      	adds	r7, #8
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}
 8013a74:	20008618 	.word	0x20008618
 8013a78:	20000004 	.word	0x20000004

08013a7c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b084      	sub	sp, #16
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	60f8      	str	r0, [r7, #12]
 8013a84:	60b9      	str	r1, [r7, #8]
 8013a86:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	if (tsDriver)
 8013a88:	4b0f      	ldr	r3, [pc, #60]	; (8013ac8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d015      	beq.n	8013abc <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    {
	        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8013a90:	4b0d      	ldr	r3, [pc, #52]	; (8013ac8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	691b      	ldr	r3, [r3, #16]
 8013a96:	2070      	movs	r0, #112	; 0x70
 8013a98:	4798      	blx	r3
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	bf14      	ite	ne
 8013aa0:	2301      	movne	r3, #1
 8013aa2:	2300      	moveq	r3, #0
 8013aa4:	b2db      	uxtb	r3, r3
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d008      	beq.n	8013abc <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	        {
	            /* Get each touch coordinates */
	            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8013aaa:	4b07      	ldr	r3, [pc, #28]	; (8013ac8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	695b      	ldr	r3, [r3, #20]
 8013ab0:	68ba      	ldr	r2, [r7, #8]
 8013ab2:	6879      	ldr	r1, [r7, #4]
 8013ab4:	2070      	movs	r0, #112	; 0x70
 8013ab6:	4798      	blx	r3
	            return true;
 8013ab8:	2301      	movs	r3, #1
 8013aba:	e000      	b.n	8013abe <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
	        }
	    }


    return false;
 8013abc:	2300      	movs	r3, #0
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3710      	adds	r7, #16
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
 8013ac6:	bf00      	nop
 8013ac8:	20008618 	.word	0x20008618

08013acc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	4a05      	ldr	r2, [pc, #20]	; (8013aec <_ZN20STM32TouchControllerD1Ev+0x20>)
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	601a      	str	r2, [r3, #0]
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7ff ff99 	bl	8013a14 <_ZN8touchgfx15TouchControllerD1Ev>
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3708      	adds	r7, #8
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	0802890c 	.word	0x0802890c

08013af0 <_ZN20STM32TouchControllerD0Ev>:
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b082      	sub	sp, #8
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f7ff ffe7 	bl	8013acc <_ZN20STM32TouchControllerD1Ev>
 8013afe:	2104      	movs	r1, #4
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f011 fdc1 	bl	8025688 <_ZdlPvj>
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3708      	adds	r7, #8
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013b10:	b480      	push	{r7}
 8013b12:	b083      	sub	sp, #12
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	4603      	mov	r3, r0
 8013b18:	71fb      	strb	r3, [r7, #7]

}
 8013b1a:	bf00      	nop
 8013b1c:	370c      	adds	r7, #12
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b24:	4770      	bx	lr

08013b26 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8013b26:	b480      	push	{r7}
 8013b28:	b083      	sub	sp, #12
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	71fb      	strb	r3, [r7, #7]

}
 8013b30:	bf00      	nop
 8013b32:	370c      	adds	r7, #12
 8013b34:	46bd      	mov	sp, r7
 8013b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3a:	4770      	bx	lr

08013b3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013b3c:	b480      	push	{r7}
 8013b3e:	b083      	sub	sp, #12
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	4603      	mov	r3, r0
 8013b44:	71fb      	strb	r3, [r7, #7]

}
 8013b46:	bf00      	nop
 8013b48:	370c      	adds	r7, #12
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b50:	4770      	bx	lr
	...

08013b54 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8013b54:	b480      	push	{r7}
 8013b56:	b083      	sub	sp, #12
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
    {
 8013b5c:	4a04      	ldr	r2, [pc, #16]	; (8013b70 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	601a      	str	r2, [r3, #0]
    }
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	4618      	mov	r0, r3
 8013b66:	370c      	adds	r7, #12
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6e:	4770      	bx	lr
 8013b70:	08029264 	.word	0x08029264

08013b74 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b082      	sub	sp, #8
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
    }
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	f7ff ffe9 	bl	8013b54 <_ZN8touchgfx3HALD1Ev>
 8013b82:	2178      	movs	r1, #120	; 0x78
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f011 fd7f 	bl	8025688 <_ZdlPvj>
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	3708      	adds	r7, #8
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}

08013b94 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8013b94:	b480      	push	{r7}
 8013b96:	b083      	sub	sp, #12
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	460b      	mov	r3, r1
 8013b9e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	78fa      	ldrb	r2, [r7, #3]
 8013ba4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2201      	movs	r2, #1
 8013bac:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8013bb0:	bf00      	nop
 8013bb2:	370c      	adds	r7, #12
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr

08013bbc <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	685a      	ldr	r2, [r3, #4]
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	4610      	mov	r0, r2
 8013bd2:	4798      	blx	r3
 8013bd4:	4603      	mov	r3, r0
    }
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3708      	adds	r7, #8
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}

08013bde <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8013bde:	b580      	push	{r7, lr}
 8013be0:	b082      	sub	sp, #8
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f002 fd9c 	bl	8016724 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	3390      	adds	r3, #144	; 0x90
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	4798      	blx	r3
    }
 8013bf8:	bf00      	nop
 8013bfa:	3708      	adds	r7, #8
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}

08013c00 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8013c00:	b480      	push	{r7}
 8013c02:	b083      	sub	sp, #12
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
 8013c08:	6039      	str	r1, [r7, #0]
        return false;
 8013c0a:	2300      	movs	r3, #0
    }
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	370c      	adds	r7, #12
 8013c10:	46bd      	mov	sp, r7
 8013c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c16:	4770      	bx	lr

08013c18 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    TOUCHGFX_DEPRECATED(
 8013c18:	b590      	push	{r4, r7, lr}
 8013c1a:	b08b      	sub	sp, #44	; 0x2c
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	60f8      	str	r0, [r7, #12]
 8013c20:	60b9      	str	r1, [r7, #8]
 8013c22:	4611      	mov	r1, r2
 8013c24:	461a      	mov	r2, r3
 8013c26:	460b      	mov	r3, r1
 8013c28:	80fb      	strh	r3, [r7, #6]
 8013c2a:	4613      	mov	r3, r2
 8013c2c:	717b      	strb	r3, [r7, #5]
        uint16_t stride = lcd().framebufferStride();
 8013c2e:	f7f8 fd7f 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 8013c32:	4602      	mov	r2, r0
 8013c34:	6813      	ldr	r3, [r2, #0]
 8013c36:	3324      	adds	r3, #36	; 0x24
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	4610      	mov	r0, r2
 8013c3c:	4798      	blx	r3
 8013c3e:	4603      	mov	r3, r0
 8013c40:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8013c42:	8b7b      	ldrh	r3, [r7, #26]
 8013c44:	4a3d      	ldr	r2, [pc, #244]	; (8013d3c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8013c46:	8812      	ldrh	r2, [r2, #0]
 8013c48:	fb02 f303 	mul.w	r3, r2, r3
 8013c4c:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8013c52:	2300      	movs	r3, #0
 8013c54:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8013c56:	2300      	movs	r3, #0
 8013c58:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8013c5a:	797b      	ldrb	r3, [r7, #5]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d005      	beq.n	8013c6c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8013c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	4413      	add	r3, r2
 8013c66:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8013c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6a:	623b      	str	r3, [r7, #32]
        if (useAnimationStorage)
 8013c6c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d005      	beq.n	8013c80 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8013c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	4413      	add	r3, r2
 8013c7a:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8013c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c7e:	61fb      	str	r3, [r7, #28]
        switch (depth)
 8013c80:	88fb      	ldrh	r3, [r7, #6]
 8013c82:	3b01      	subs	r3, #1
 8013c84:	2b1f      	cmp	r3, #31
 8013c86:	d84d      	bhi.n	8013d24 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8013c88:	a201      	add	r2, pc, #4	; (adr r2, 8013c90 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8013c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c8e:	bf00      	nop
 8013c90:	08013d11 	.word	0x08013d11
 8013c94:	08013d11 	.word	0x08013d11
 8013c98:	08013d25 	.word	0x08013d25
 8013c9c:	08013d11 	.word	0x08013d11
 8013ca0:	08013d25 	.word	0x08013d25
 8013ca4:	08013d25 	.word	0x08013d25
 8013ca8:	08013d25 	.word	0x08013d25
 8013cac:	08013d11 	.word	0x08013d11
 8013cb0:	08013d25 	.word	0x08013d25
 8013cb4:	08013d25 	.word	0x08013d25
 8013cb8:	08013d25 	.word	0x08013d25
 8013cbc:	08013d25 	.word	0x08013d25
 8013cc0:	08013d25 	.word	0x08013d25
 8013cc4:	08013d25 	.word	0x08013d25
 8013cc8:	08013d25 	.word	0x08013d25
 8013ccc:	08013d11 	.word	0x08013d11
 8013cd0:	08013d25 	.word	0x08013d25
 8013cd4:	08013d25 	.word	0x08013d25
 8013cd8:	08013d25 	.word	0x08013d25
 8013cdc:	08013d25 	.word	0x08013d25
 8013ce0:	08013d25 	.word	0x08013d25
 8013ce4:	08013d25 	.word	0x08013d25
 8013ce8:	08013d25 	.word	0x08013d25
 8013cec:	08013d11 	.word	0x08013d11
 8013cf0:	08013d25 	.word	0x08013d25
 8013cf4:	08013d25 	.word	0x08013d25
 8013cf8:	08013d25 	.word	0x08013d25
 8013cfc:	08013d25 	.word	0x08013d25
 8013d00:	08013d25 	.word	0x08013d25
 8013d04:	08013d25 	.word	0x08013d25
 8013d08:	08013d25 	.word	0x08013d25
 8013d0c:	08013d11 	.word	0x08013d11
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	3374      	adds	r3, #116	; 0x74
 8013d16:	681c      	ldr	r4, [r3, #0]
 8013d18:	69fb      	ldr	r3, [r7, #28]
 8013d1a:	6a3a      	ldr	r2, [r7, #32]
 8013d1c:	68b9      	ldr	r1, [r7, #8]
 8013d1e:	68f8      	ldr	r0, [r7, #12]
 8013d20:	47a0      	blx	r4
            break;
 8013d22:	e006      	b.n	8013d32 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
            assert(0 && "Unsupported bit depth");
 8013d24:	4b06      	ldr	r3, [pc, #24]	; (8013d40 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8013d26:	4a07      	ldr	r2, [pc, #28]	; (8013d44 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8013d28:	f240 216f 	movw	r1, #623	; 0x26f
 8013d2c:	4806      	ldr	r0, [pc, #24]	; (8013d48 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8013d2e:	f011 fcd7 	bl	80256e0 <__assert_func>
    }
 8013d32:	bf00      	nop
 8013d34:	372c      	adds	r7, #44	; 0x2c
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd90      	pop	{r4, r7, pc}
 8013d3a:	bf00      	nop
 8013d3c:	2000b368 	.word	0x2000b368
 8013d40:	08027094 	.word	0x08027094
 8013d44:	08028a38 	.word	0x08028a38
 8013d48:	080270b4 	.word	0x080270b4

08013d4c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b084      	sub	sp, #16
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	60f8      	str	r0, [r7, #12]
 8013d54:	60b9      	str	r1, [r7, #8]
 8013d56:	607a      	str	r2, [r7, #4]
 8013d58:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d106      	bne.n	8013d6e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8013d60:	4b11      	ldr	r3, [pc, #68]	; (8013da8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8013d62:	4a12      	ldr	r2, [pc, #72]	; (8013dac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8013d64:	f240 2182 	movw	r1, #642	; 0x282
 8013d68:	4811      	ldr	r0, [pc, #68]	; (8013db0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8013d6a:	f011 fcb9 	bl	80256e0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	68ba      	ldr	r2, [r7, #8]
 8013d72:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	687a      	ldr	r2, [r7, #4]
 8013d78:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	683a      	ldr	r2, [r7, #0]
 8013d7e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	bf14      	ite	ne
 8013d86:	2301      	movne	r3, #1
 8013d88:	2300      	moveq	r3, #0
 8013d8a:	b2da      	uxtb	r2, r3
 8013d8c:	4b09      	ldr	r3, [pc, #36]	; (8013db4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8013d8e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	bf14      	ite	ne
 8013d96:	2301      	movne	r3, #1
 8013d98:	2300      	moveq	r3, #0
 8013d9a:	b2da      	uxtb	r2, r3
 8013d9c:	4b06      	ldr	r3, [pc, #24]	; (8013db8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8013d9e:	701a      	strb	r2, [r3, #0]
    }
 8013da0:	bf00      	nop
 8013da2:	3710      	adds	r7, #16
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	080270f8 	.word	0x080270f8
 8013dac:	080289e8 	.word	0x080289e8
 8013db0:	080270b4 	.word	0x080270b4
 8013db4:	2000b36a 	.word	0x2000b36a
 8013db8:	2000b36b 	.word	0x2000b36b

08013dbc <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	460b      	mov	r3, r1
 8013dc6:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d004      	beq.n	8013dda <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dd4:	887a      	ldrh	r2, [r7, #2]
 8013dd6:	4610      	mov	r0, r2
 8013dd8:	4798      	blx	r3
    }
 8013dda:	bf00      	nop
 8013ddc:	3708      	adds	r7, #8
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}

08013de2 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8013de2:	b580      	push	{r7, lr}
 8013de4:	b082      	sub	sp, #8
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	685a      	ldr	r2, [r3, #4]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	685b      	ldr	r3, [r3, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	3318      	adds	r3, #24
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	4610      	mov	r0, r2
 8013dfa:	4798      	blx	r3
 8013dfc:	4603      	mov	r3, r0
    }
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3708      	adds	r7, #8
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
	...

08013e08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8013e08:	b480      	push	{r7}
 8013e0a:	b083      	sub	sp, #12
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d017      	beq.n	8013e50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013e20:	4b1a      	ldr	r3, [pc, #104]	; (8013e8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013e22:	781b      	ldrb	r3, [r3, #0]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d12a      	bne.n	8013e7e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013e28:	4b19      	ldr	r3, [pc, #100]	; (8013e90 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013e2a:	881a      	ldrh	r2, [r3, #0]
 8013e2c:	4b19      	ldr	r3, [pc, #100]	; (8013e94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013e2e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013e30:	4b19      	ldr	r3, [pc, #100]	; (8013e98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013e32:	881a      	ldrh	r2, [r3, #0]
 8013e34:	4b19      	ldr	r3, [pc, #100]	; (8013e9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013e36:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8013e38:	4b16      	ldr	r3, [pc, #88]	; (8013e94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013e3a:	881a      	ldrh	r2, [r3, #0]
 8013e3c:	4b16      	ldr	r3, [pc, #88]	; (8013e98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013e3e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8013e40:	4b16      	ldr	r3, [pc, #88]	; (8013e9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013e42:	881a      	ldrh	r2, [r3, #0]
 8013e44:	4b12      	ldr	r3, [pc, #72]	; (8013e90 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013e46:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013e48:	4b10      	ldr	r3, [pc, #64]	; (8013e8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013e4a:	2201      	movs	r2, #1
 8013e4c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8013e4e:	e016      	b.n	8013e7e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8013e50:	4b0e      	ldr	r3, [pc, #56]	; (8013e8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013e52:	781b      	ldrb	r3, [r3, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d012      	beq.n	8013e7e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8013e58:	4b0f      	ldr	r3, [pc, #60]	; (8013e98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013e5a:	881a      	ldrh	r2, [r3, #0]
 8013e5c:	4b0d      	ldr	r3, [pc, #52]	; (8013e94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013e5e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8013e60:	4b0b      	ldr	r3, [pc, #44]	; (8013e90 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013e62:	881a      	ldrh	r2, [r3, #0]
 8013e64:	4b0d      	ldr	r3, [pc, #52]	; (8013e9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013e66:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8013e68:	4b0c      	ldr	r3, [pc, #48]	; (8013e9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013e6a:	881a      	ldrh	r2, [r3, #0]
 8013e6c:	4b0a      	ldr	r3, [pc, #40]	; (8013e98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013e6e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8013e70:	4b08      	ldr	r3, [pc, #32]	; (8013e94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013e72:	881a      	ldrh	r2, [r3, #0]
 8013e74:	4b06      	ldr	r3, [pc, #24]	; (8013e90 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013e76:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8013e78:	4b04      	ldr	r3, [pc, #16]	; (8013e8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	701a      	strb	r2, [r3, #0]
    }
 8013e7e:	bf00      	nop
 8013e80:	370c      	adds	r7, #12
 8013e82:	46bd      	mov	sp, r7
 8013e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e88:	4770      	bx	lr
 8013e8a:	bf00      	nop
 8013e8c:	2000b364 	.word	0x2000b364
 8013e90:	2000b360 	.word	0x2000b360
 8013e94:	2000b366 	.word	0x2000b366
 8013e98:	2000b362 	.word	0x2000b362
 8013e9c:	2000b368 	.word	0x2000b368

08013ea0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b082      	sub	sp, #8
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f001 febd 	bl	8015c2a <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8013eb0:	bf00      	nop
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	4a05      	ldr	r2, [pc, #20]	; (8013ed8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	601a      	str	r2, [r3, #0]
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7ff fe43 	bl	8013b54 <_ZN8touchgfx3HALD1Ev>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3708      	adds	r7, #8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}
 8013ed8:	08028c50 	.word	0x08028c50

08013edc <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f7ff ffe7 	bl	8013eb8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013eea:	2178      	movs	r1, #120	; 0x78
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f011 fbcb 	bl	8025688 <_ZdlPvj>
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3708      	adds	r7, #8
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}

08013efc <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b082      	sub	sp, #8
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7ff ffca 	bl	8013ea0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013f0c:	bf00      	nop
 8013f0e:	3708      	adds	r7, #8
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f001 fafa 	bl	8015518 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8013f24:	bf00      	nop
 8013f26:	3708      	adds	r7, #8
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}

08013f2c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	4618      	mov	r0, r3
 8013f38:	f001 fb7a 	bl	8015630 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8013f3c:	4603      	mov	r3, r0
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3708      	adds	r7, #8
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}

08013f46 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8013f46:	b580      	push	{r7, lr}
 8013f48:	b082      	sub	sp, #8
 8013f4a:	af00      	add	r7, sp, #0
 8013f4c:	6078      	str	r0, [r7, #4]
 8013f4e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	6839      	ldr	r1, [r7, #0]
 8013f54:	4618      	mov	r0, r3
 8013f56:	f001 fb79 	bl	801564c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8013f5a:	bf00      	nop
 8013f5c:	3708      	adds	r7, #8
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}

08013f62 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013f62:	b580      	push	{r7, lr}
 8013f64:	b082      	sub	sp, #8
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	6078      	str	r0, [r7, #4]
 8013f6a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	6839      	ldr	r1, [r7, #0]
 8013f70:	4618      	mov	r0, r3
 8013f72:	f001 fb81 	bl	8015678 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8013f76:	bf00      	nop
 8013f78:	3708      	adds	r7, #8
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}

08013f7e <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013f7e:	b580      	push	{r7, lr}
 8013f80:	b084      	sub	sp, #16
 8013f82:	af00      	add	r7, sp, #0
 8013f84:	60f8      	str	r0, [r7, #12]
 8013f86:	60b9      	str	r1, [r7, #8]
 8013f88:	607a      	str	r2, [r7, #4]
 8013f8a:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8013f8c:	68f8      	ldr	r0, [r7, #12]
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	687a      	ldr	r2, [r7, #4]
 8013f92:	68b9      	ldr	r1, [r7, #8]
 8013f94:	f001 ff83 	bl	8015e9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013f98:	4603      	mov	r3, r0
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3710      	adds	r7, #16
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}

08013fa2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8013fa2:	b580      	push	{r7, lr}
 8013fa4:	b082      	sub	sp, #8
 8013fa6:	af00      	add	r7, sp, #0
 8013fa8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	4618      	mov	r0, r3
 8013fae:	f001 fae5 	bl	801557c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8013fb2:	bf00      	nop
 8013fb4:	3708      	adds	r7, #8
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}

08013fba <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8013fba:	b580      	push	{r7, lr}
 8013fbc:	b082      	sub	sp, #8
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f001 fae9 	bl	801559c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8013fca:	bf00      	nop
 8013fcc:	3708      	adds	r7, #8
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}

08013fd2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8013fd2:	b580      	push	{r7, lr}
 8013fd4:	b082      	sub	sp, #8
 8013fd6:	af00      	add	r7, sp, #0
 8013fd8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f001 faeb 	bl	80155b8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8013fe2:	bf00      	nop
 8013fe4:	3708      	adds	r7, #8
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}

08013fea <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8013fea:	b580      	push	{r7, lr}
 8013fec:	b082      	sub	sp, #8
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f001 faed 	bl	80155d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8013ffa:	bf00      	nop
 8013ffc:	3708      	adds	r7, #8
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}
	...

08014004 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8014004:	b580      	push	{r7, lr}
 8014006:	b082      	sub	sp, #8
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	4a05      	ldr	r2, [pc, #20]	; (8014024 <_ZN11TouchGFXHALD1Ev+0x20>)
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	601a      	str	r2, [r3, #0]
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	4618      	mov	r0, r3
 8014016:	f7ff ff4f 	bl	8013eb8 <_ZN20TouchGFXGeneratedHALD1Ev>
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	4618      	mov	r0, r3
 801401e:	3708      	adds	r7, #8
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}
 8014024:	0802893c 	.word	0x0802893c

08014028 <_ZN11TouchGFXHALD0Ev>:
 8014028:	b580      	push	{r7, lr}
 801402a:	b082      	sub	sp, #8
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f7ff ffe7 	bl	8014004 <_ZN11TouchGFXHALD1Ev>
 8014036:	2178      	movs	r1, #120	; 0x78
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f011 fb25 	bl	8025688 <_ZdlPvj>
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	4618      	mov	r0, r3
 8014042:	3708      	adds	r7, #8
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}

08014048 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8014048:	b580      	push	{r7, lr}
 801404a:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 801404c:	2101      	movs	r1, #1
 801404e:	4811      	ldr	r0, [pc, #68]	; (8014094 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8014050:	f7f4 fed1 	bl	8008df6 <osSemaphoreCreate>
 8014054:	4602      	mov	r2, r0
 8014056:	4b10      	ldr	r3, [pc, #64]	; (8014098 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8014058:	601a      	str	r2, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 801405a:	4b0f      	ldr	r3, [pc, #60]	; (8014098 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d105      	bne.n	801406e <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 8014062:	4b0e      	ldr	r3, [pc, #56]	; (801409c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8014064:	4a0e      	ldr	r2, [pc, #56]	; (80140a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014066:	2125      	movs	r1, #37	; 0x25
 8014068:	480e      	ldr	r0, [pc, #56]	; (80140a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801406a:	f011 fb39 	bl	80256e0 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 801406e:	2101      	movs	r1, #1
 8014070:	480d      	ldr	r0, [pc, #52]	; (80140a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8014072:	f7f4 fec0 	bl	8008df6 <osSemaphoreCreate>
 8014076:	4602      	mov	r2, r0
 8014078:	4b0c      	ldr	r3, [pc, #48]	; (80140ac <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801407a:	601a      	str	r2, [r3, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 801407c:	4b0b      	ldr	r3, [pc, #44]	; (80140ac <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d105      	bne.n	8014090 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 8014084:	4b0a      	ldr	r3, [pc, #40]	; (80140b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 8014086:	4a06      	ldr	r2, [pc, #24]	; (80140a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014088:	2128      	movs	r1, #40	; 0x28
 801408a:	4806      	ldr	r0, [pc, #24]	; (80140a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801408c:	f011 fb28 	bl	80256e0 <__assert_func>
}
 8014090:	bf00      	nop
 8014092:	bd80      	pop	{r7, pc}
 8014094:	08028a8c 	.word	0x08028a8c
 8014098:	2000861c 	.word	0x2000861c
 801409c:	08027130 	.word	0x08027130
 80140a0:	08028a9c 	.word	0x08028a9c
 80140a4:	0802717c 	.word	0x0802717c
 80140a8:	08028a94 	.word	0x08028a94
 80140ac:	20008620 	.word	0x20008620
 80140b0:	080271a8 	.word	0x080271a8

080140b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 80140b8:	4b04      	ldr	r3, [pc, #16]	; (80140cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	f04f 31ff 	mov.w	r1, #4294967295
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7f4 fed9 	bl	8008e78 <osSemaphoreWait>
}
 80140c6:	bf00      	nop
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	2000861c 	.word	0x2000861c

080140d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80140d4:	4b03      	ldr	r3, [pc, #12]	; (80140e4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	4618      	mov	r0, r3
 80140da:	f7f4 ff1b 	bl	8008f14 <osSemaphoreRelease>
}
 80140de:	bf00      	nop
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	2000861c 	.word	0x2000861c

080140e8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 80140ec:	4b03      	ldr	r3, [pc, #12]	; (80140fc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	2100      	movs	r1, #0
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7f4 fec0 	bl	8008e78 <osSemaphoreWait>
}
 80140f8:	bf00      	nop
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	2000861c 	.word	0x2000861c

08014100 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8014100:	b580      	push	{r7, lr}
 8014102:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 8014104:	4b03      	ldr	r3, [pc, #12]	; (8014114 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	4618      	mov	r0, r3
 801410a:	f7f4 ff03 	bl	8008f14 <osSemaphoreRelease>
}
 801410e:	bf00      	nop
 8014110:	bd80      	pop	{r7, pc}
 8014112:	bf00      	nop
 8014114:	2000861c 	.word	0x2000861c

08014118 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8014118:	b580      	push	{r7, lr}
 801411a:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 801411c:	4b03      	ldr	r3, [pc, #12]	; (801412c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	4618      	mov	r0, r3
 8014122:	f7f4 fef7 	bl	8008f14 <osSemaphoreRelease>
}
 8014126:	bf00      	nop
 8014128:	bd80      	pop	{r7, pc}
 801412a:	bf00      	nop
 801412c:	20008620 	.word	0x20008620

08014130 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8014130:	b580      	push	{r7, lr}
 8014132:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 8014134:	4b07      	ldr	r3, [pc, #28]	; (8014154 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	2100      	movs	r1, #0
 801413a:	4618      	mov	r0, r3
 801413c:	f7f4 fe9c 	bl	8008e78 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 8014140:	4b04      	ldr	r3, [pc, #16]	; (8014154 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	f04f 31ff 	mov.w	r1, #4294967295
 8014148:	4618      	mov	r0, r3
 801414a:	f7f4 fe95 	bl	8008e78 <osSemaphoreWait>
}
 801414e:	bf00      	nop
 8014150:	bd80      	pop	{r7, pc}
 8014152:	bf00      	nop
 8014154:	20008620 	.word	0x20008620

08014158 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b082      	sub	sp, #8
 801415c:	af00      	add	r7, sp, #0
 801415e:	4603      	mov	r3, r0
 8014160:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8014162:	88fb      	ldrh	r3, [r7, #6]
 8014164:	4618      	mov	r0, r3
 8014166:	f7f4 fe32 	bl	8008dce <osDelay>
}
 801416a:	bf00      	nop
 801416c:	3708      	adds	r7, #8
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}
	...

08014174 <__NVIC_EnableIRQ>:
{
 8014174:	b480      	push	{r7}
 8014176:	b083      	sub	sp, #12
 8014178:	af00      	add	r7, sp, #0
 801417a:	4603      	mov	r3, r0
 801417c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014182:	2b00      	cmp	r3, #0
 8014184:	db0d      	blt.n	80141a2 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801418a:	b2db      	uxtb	r3, r3
 801418c:	f003 021f 	and.w	r2, r3, #31
 8014190:	4907      	ldr	r1, [pc, #28]	; (80141b0 <__NVIC_EnableIRQ+0x3c>)
 8014192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014196:	095b      	lsrs	r3, r3, #5
 8014198:	2001      	movs	r0, #1
 801419a:	fa00 f202 	lsl.w	r2, r0, r2
 801419e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80141a2:	bf00      	nop
 80141a4:	370c      	adds	r7, #12
 80141a6:	46bd      	mov	sp, r7
 80141a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ac:	4770      	bx	lr
 80141ae:	bf00      	nop
 80141b0:	e000e100 	.word	0xe000e100

080141b4 <__NVIC_DisableIRQ>:
{
 80141b4:	b480      	push	{r7}
 80141b6:	b083      	sub	sp, #12
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	4603      	mov	r3, r0
 80141bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80141be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	db12      	blt.n	80141ec <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80141c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141ca:	b2db      	uxtb	r3, r3
 80141cc:	f003 021f 	and.w	r2, r3, #31
 80141d0:	4909      	ldr	r1, [pc, #36]	; (80141f8 <__NVIC_DisableIRQ+0x44>)
 80141d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141d6:	095b      	lsrs	r3, r3, #5
 80141d8:	2001      	movs	r0, #1
 80141da:	fa00 f202 	lsl.w	r2, r0, r2
 80141de:	3320      	adds	r3, #32
 80141e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80141e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80141e8:	f3bf 8f6f 	isb	sy
}
 80141ec:	bf00      	nop
 80141ee:	370c      	adds	r7, #12
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr
 80141f8:	e000e100 	.word	0xe000e100

080141fc <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 80141fc:	b480      	push	{r7}
 80141fe:	b083      	sub	sp, #12
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
        : color(0)
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2200      	movs	r2, #0
 8014208:	601a      	str	r2, [r3, #0]
    }
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	4618      	mov	r0, r3
 801420e:	370c      	adds	r7, #12
 8014210:	46bd      	mov	sp, r7
 8014212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014216:	4770      	bx	lr

08014218 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8014218:	b480      	push	{r7}
 801421a:	b083      	sub	sp, #12
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
        return color;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681b      	ldr	r3, [r3, #0]
    }
 8014224:	4618      	mov	r0, r3
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr

08014230 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8014230:	b480      	push	{r7}
 8014232:	b083      	sub	sp, #12
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
    {
 8014238:	4a04      	ldr	r2, [pc, #16]	; (801424c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	601a      	str	r2, [r3, #0]
    }
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	4618      	mov	r0, r3
 8014242:	370c      	adds	r7, #12
 8014244:	46bd      	mov	sp, r7
 8014246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424a:	4770      	bx	lr
 801424c:	08028b24 	.word	0x08028b24

08014250 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
    }
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f7ff ffe9 	bl	8014230 <_ZN8touchgfx9DMA_QueueD1Ev>
 801425e:	2104      	movs	r1, #4
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	f011 fa11 	bl	8025688 <_ZdlPvj>
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	4618      	mov	r0, r3
 801426a:	3708      	adds	r7, #8
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}

08014270 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8014270:	b580      	push	{r7, lr}
 8014272:	b082      	sub	sp, #8
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	3344      	adds	r3, #68	; 0x44
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	4798      	blx	r3
    }
 8014284:	bf00      	nop
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 801428c:	b480      	push	{r7}
 801428e:	b083      	sub	sp, #12
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8014294:	2300      	movs	r3, #0
    }
 8014296:	4618      	mov	r0, r3
 8014298:	370c      	adds	r7, #12
 801429a:	46bd      	mov	sp, r7
 801429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a0:	4770      	bx	lr
	...

080142a4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80142a4:	b480      	push	{r7}
 80142a6:	b083      	sub	sp, #12
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
    {
 80142ac:	4a04      	ldr	r2, [pc, #16]	; (80142c0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	601a      	str	r2, [r3, #0]
    }
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	4618      	mov	r0, r3
 80142b6:	370c      	adds	r7, #12
 80142b8:	46bd      	mov	sp, r7
 80142ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142be:	4770      	bx	lr
 80142c0:	080296a8 	.word	0x080296a8

080142c4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b082      	sub	sp, #8
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
    }
 80142cc:	6878      	ldr	r0, [r7, #4]
 80142ce:	f7ff ffe9 	bl	80142a4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80142d2:	210c      	movs	r1, #12
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f011 f9d7 	bl	8025688 <_ZdlPvj>
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	4618      	mov	r0, r3
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}

080142e4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80142e4:	b480      	push	{r7}
 80142e6:	b083      	sub	sp, #12
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80142ee:	4a09      	ldr	r2, [pc, #36]	; (8014314 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	601a      	str	r2, [r3, #0]
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	683a      	ldr	r2, [r7, #0]
 80142f8:	605a      	str	r2, [r3, #4]
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2200      	movs	r2, #0
 80142fe:	721a      	strb	r2, [r3, #8]
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2200      	movs	r2, #0
 8014304:	725a      	strb	r2, [r3, #9]
    {
    }
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	4618      	mov	r0, r3
 801430a:	370c      	adds	r7, #12
 801430c:	46bd      	mov	sp, r7
 801430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014312:	4770      	bx	lr
 8014314:	080296a8 	.word	0x080296a8

08014318 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8014318:	b580      	push	{r7, lr}
 801431a:	b082      	sub	sp, #8
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	685a      	ldr	r2, [r3, #4]
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	685b      	ldr	r3, [r3, #4]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	3314      	adds	r3, #20
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	4610      	mov	r0, r2
 8014330:	4798      	blx	r3
    }
 8014332:	bf00      	nop
 8014334:	3708      	adds	r7, #8
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}

0801433a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801433a:	b580      	push	{r7, lr}
 801433c:	b082      	sub	sp, #8
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8014342:	687a      	ldr	r2, [r7, #4]
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	3328      	adds	r3, #40	; 0x28
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	4610      	mov	r0, r2
 801434e:	4798      	blx	r3
    }
 8014350:	bf00      	nop
 8014352:	3708      	adds	r7, #8
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}

08014358 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8014358:	b480      	push	{r7}
 801435a:	b085      	sub	sp, #20
 801435c:	af00      	add	r7, sp, #0
 801435e:	60f8      	str	r0, [r7, #12]
 8014360:	60b9      	str	r1, [r7, #8]
 8014362:	607a      	str	r2, [r7, #4]
 8014364:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8014370:	68ba      	ldr	r2, [r7, #8]
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	430a      	orrs	r2, r1
 8014378:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014380:	f023 0107 	bic.w	r1, r3, #7
 8014384:	687a      	ldr	r2, [r7, #4]
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	430a      	orrs	r2, r1
 801438c:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014394:	4b06      	ldr	r3, [pc, #24]	; (80143b0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8014396:	4013      	ands	r3, r2
 8014398:	6839      	ldr	r1, [r7, #0]
 801439a:	68fa      	ldr	r2, [r7, #12]
 801439c:	6812      	ldr	r2, [r2, #0]
 801439e:	430b      	orrs	r3, r1
 80143a0:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80143a2:	2300      	movs	r3, #0
}
 80143a4:	4618      	mov	r0, r3
 80143a6:	3714      	adds	r7, #20
 80143a8:	46bd      	mov	sp, r7
 80143aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ae:	4770      	bx	lr
 80143b0:	ffffc000 	.word	0xffffc000

080143b4 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b082      	sub	sp, #8
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80143bc:	f7f8 f9ac 	bl	800c718 <_ZN8touchgfx3HAL11getInstanceEv>
 80143c0:	4603      	mov	r3, r0
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7ff ffa8 	bl	8014318 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80143c8:	bf00      	nop
 80143ca:	3708      	adds	r7, #8
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bd80      	pop	{r7, pc}

080143d0 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
    assert(0);
 80143d8:	4b02      	ldr	r3, [pc, #8]	; (80143e4 <DMA2D_XferErrorCallback+0x14>)
 80143da:	4a03      	ldr	r2, [pc, #12]	; (80143e8 <DMA2D_XferErrorCallback+0x18>)
 80143dc:	213e      	movs	r1, #62	; 0x3e
 80143de:	4803      	ldr	r0, [pc, #12]	; (80143ec <DMA2D_XferErrorCallback+0x1c>)
 80143e0:	f011 f97e 	bl	80256e0 <__assert_func>
 80143e4:	080271e4 	.word	0x080271e4
 80143e8:	08028b40 	.word	0x08028b40
 80143ec:	080271e8 	.word	0x080271e8

080143f0 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	3318      	adds	r3, #24
 80143fc:	4618      	mov	r0, r3
 80143fe:	f7ff fefd 	bl	80141fc <_ZN8touchgfx9colortypeC1Ev>
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	4618      	mov	r0, r3
 8014406:	3708      	adds	r7, #8
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}

0801440c <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 801440c:	b5b0      	push	{r4, r5, r7, lr}
 801440e:	b082      	sub	sp, #8
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8014414:	687a      	ldr	r2, [r7, #4]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	330c      	adds	r3, #12
 801441a:	4619      	mov	r1, r3
 801441c:	4610      	mov	r0, r2
 801441e:	f7ff ff61 	bl	80142e4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8014422:	4a0e      	ldr	r2, [pc, #56]	; (801445c <_ZN10STM32F7DMAC1Ev+0x50>)
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	601a      	str	r2, [r3, #0]
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f103 000c 	add.w	r0, r3, #12
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	3320      	adds	r3, #32
 8014432:	2260      	movs	r2, #96	; 0x60
 8014434:	4619      	mov	r1, r3
 8014436:	f002 fa9b 	bl	8016970 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	3320      	adds	r3, #32
 801443e:	245f      	movs	r4, #95	; 0x5f
 8014440:	461d      	mov	r5, r3
 8014442:	2c00      	cmp	r4, #0
 8014444:	db05      	blt.n	8014452 <_ZN10STM32F7DMAC1Ev+0x46>
 8014446:	4628      	mov	r0, r5
 8014448:	f7ff ffd2 	bl	80143f0 <_ZN8touchgfx6BlitOpC1Ev>
 801444c:	3520      	adds	r5, #32
 801444e:	3c01      	subs	r4, #1
 8014450:	e7f7      	b.n	8014442 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	4618      	mov	r0, r3
 8014456:	3708      	adds	r7, #8
 8014458:	46bd      	mov	sp, r7
 801445a:	bdb0      	pop	{r4, r5, r7, pc}
 801445c:	08028ad4 	.word	0x08028ad4

08014460 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8014460:	b580      	push	{r7, lr}
 8014462:	b082      	sub	sp, #8
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
 8014468:	4a0b      	ldr	r2, [pc, #44]	; (8014498 <_ZN10STM32F7DMAD1Ev+0x38>)
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 801446e:	480b      	ldr	r0, [pc, #44]	; (801449c <_ZN10STM32F7DMAD1Ev+0x3c>)
 8014470:	f7ef f88c 	bl	800358c <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014474:	205a      	movs	r0, #90	; 0x5a
 8014476:	f7ff fe9d 	bl	80141b4 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	330c      	adds	r3, #12
 801447e:	4618      	mov	r0, r3
 8014480:	f000 faa4 	bl	80149cc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	4618      	mov	r0, r3
 8014488:	f7ff ff0c 	bl	80142a4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	4618      	mov	r0, r3
 8014490:	3708      	adds	r7, #8
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}
 8014496:	bf00      	nop
 8014498:	08028ad4 	.word	0x08028ad4
 801449c:	2000ba44 	.word	0x2000ba44

080144a0 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
}
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f7ff ffd9 	bl	8014460 <_ZN10STM32F7DMAD1Ev>
 80144ae:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f011 f8e8 	bl	8025688 <_ZdlPvj>
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	4618      	mov	r0, r3
 80144bc:	3708      	adds	r7, #8
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
	...

080144c4 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b082      	sub	sp, #8
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 80144cc:	4b09      	ldr	r3, [pc, #36]	; (80144f4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80144ce:	4a0a      	ldr	r2, [pc, #40]	; (80144f8 <_ZN10STM32F7DMA10initializeEv+0x34>)
 80144d0:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 80144d2:	4808      	ldr	r0, [pc, #32]	; (80144f4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80144d4:	f7ef f810 	bl	80034f8 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80144d8:	4b06      	ldr	r3, [pc, #24]	; (80144f4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80144da:	4a08      	ldr	r2, [pc, #32]	; (80144fc <_ZN10STM32F7DMA10initializeEv+0x38>)
 80144dc:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 80144de:	4b05      	ldr	r3, [pc, #20]	; (80144f4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80144e0:	4a07      	ldr	r2, [pc, #28]	; (8014500 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 80144e2:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 80144e4:	205a      	movs	r0, #90	; 0x5a
 80144e6:	f7ff fe45 	bl	8014174 <__NVIC_EnableIRQ>
}
 80144ea:	bf00      	nop
 80144ec:	3708      	adds	r7, #8
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	2000ba44 	.word	0x2000ba44
 80144f8:	4002b000 	.word	0x4002b000
 80144fc:	080143b5 	.word	0x080143b5
 8014500:	080143d1 	.word	0x080143d1

08014504 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8014504:	b480      	push	{r7}
 8014506:	b083      	sub	sp, #12
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 801450c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8014510:	4618      	mov	r0, r3
 8014512:	370c      	adds	r7, #12
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr

0801451c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 801451c:	b590      	push	{r4, r7, lr}
 801451e:	b08d      	sub	sp, #52	; 0x34
 8014520:	af02      	add	r7, sp, #8
 8014522:	6078      	str	r0, [r7, #4]
 8014524:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8014526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801452a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 801452c:	2300      	movs	r3, #0
 801452e:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8014534:	2b20      	cmp	r3, #32
 8014536:	d007      	beq.n	8014548 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	2b40      	cmp	r3, #64	; 0x40
 801453e:	d003      	beq.n	8014548 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	2b04      	cmp	r3, #4
 8014546:	d101      	bne.n	801454c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8014548:	2301      	movs	r3, #1
 801454a:	e000      	b.n	801454e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 801454c:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801454e:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8014554:	2b80      	cmp	r3, #128	; 0x80
 8014556:	d004      	beq.n	8014562 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014560:	d101      	bne.n	8014566 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8014562:	2301      	movs	r3, #1
 8014564:	e000      	b.n	8014568 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8014566:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014568:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801456a:	f7f8 f8e1 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 801456e:	4602      	mov	r2, r0
 8014570:	6813      	ldr	r3, [r2, #0]
 8014572:	331c      	adds	r3, #28
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	4610      	mov	r0, r2
 8014578:	4798      	blx	r3
 801457a:	4603      	mov	r3, r0
 801457c:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 801457e:	683b      	ldr	r3, [r7, #0]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	2b40      	cmp	r3, #64	; 0x40
 8014584:	d01d      	beq.n	80145c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8014586:	2b40      	cmp	r3, #64	; 0x40
 8014588:	d804      	bhi.n	8014594 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801458a:	2b04      	cmp	r3, #4
 801458c:	d00e      	beq.n	80145ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 801458e:	2b20      	cmp	r3, #32
 8014590:	d017      	beq.n	80145c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8014592:	e019      	b.n	80145c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8014594:	2b80      	cmp	r3, #128	; 0x80
 8014596:	d003      	beq.n	80145a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8014598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801459c:	d003      	beq.n	80145a6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 801459e:	e013      	b.n	80145c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80145a0:	230a      	movs	r3, #10
 80145a2:	623b      	str	r3, [r7, #32]
        break;
 80145a4:	e01a      	b.n	80145dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80145a6:	2309      	movs	r3, #9
 80145a8:	623b      	str	r3, [r7, #32]
        break;
 80145aa:	e017      	b.n	80145dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80145ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80145b0:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80145b2:	7f7b      	ldrb	r3, [r7, #29]
 80145b4:	2b10      	cmp	r3, #16
 80145b6:	d101      	bne.n	80145bc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 80145b8:	2302      	movs	r3, #2
 80145ba:	e000      	b.n	80145be <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 80145bc:	2301      	movs	r3, #1
 80145be:	623b      	str	r3, [r7, #32]
        break;
 80145c0:	e00c      	b.n	80145dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 80145c2:	2300      	movs	r3, #0
 80145c4:	623b      	str	r3, [r7, #32]
        break;
 80145c6:	e009      	b.n	80145dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 80145c8:	2300      	movs	r3, #0
 80145ca:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80145cc:	7f7b      	ldrb	r3, [r7, #29]
 80145ce:	2b10      	cmp	r3, #16
 80145d0:	d101      	bne.n	80145d6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 80145d2:	2302      	movs	r3, #2
 80145d4:	e000      	b.n	80145d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 80145d6:	2301      	movs	r3, #1
 80145d8:	623b      	str	r3, [r7, #32]
        break;
 80145da:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80145dc:	4a75      	ldr	r2, [pc, #468]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80145de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145e0:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80145e2:	7f7b      	ldrb	r3, [r7, #29]
 80145e4:	2b10      	cmp	r3, #16
 80145e6:	d101      	bne.n	80145ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80145e8:	2302      	movs	r3, #2
 80145ea:	e000      	b.n	80145ee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 80145ec:	2301      	movs	r3, #1
 80145ee:	4a71      	ldr	r2, [pc, #452]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80145f0:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	8adb      	ldrh	r3, [r3, #22]
 80145f6:	461a      	mov	r2, r3
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	8a1b      	ldrh	r3, [r3, #16]
 80145fc:	1ad3      	subs	r3, r2, r3
 80145fe:	461a      	mov	r2, r3
 8014600:	4b6c      	ldr	r3, [pc, #432]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014602:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014604:	7f7b      	ldrb	r3, [r7, #29]
 8014606:	2b10      	cmp	r3, #16
 8014608:	d101      	bne.n	801460e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 801460a:	2202      	movs	r2, #2
 801460c:	e000      	b.n	8014610 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 801460e:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	8adb      	ldrh	r3, [r3, #22]
 8014614:	4619      	mov	r1, r3
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	8a1b      	ldrh	r3, [r3, #16]
 801461a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801461c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801461e:	4865      	ldr	r0, [pc, #404]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014620:	f7ff fe9a 	bl	8014358 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014624:	4a63      	ldr	r2, [pc, #396]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014626:	6a3b      	ldr	r3, [r7, #32]
 8014628:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	8a9b      	ldrh	r3, [r3, #20]
 801462e:	461a      	mov	r2, r3
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	8a1b      	ldrh	r3, [r3, #16]
 8014634:	1ad3      	subs	r3, r2, r3
 8014636:	461a      	mov	r2, r3
 8014638:	4b5e      	ldr	r3, [pc, #376]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801463a:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 801463c:	7ffb      	ldrb	r3, [r7, #31]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d103      	bne.n	801464a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8014642:	7fbb      	ldrb	r3, [r7, #30]
 8014644:	2b00      	cmp	r3, #0
 8014646:	f000 8081 	beq.w	801474c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	7f1b      	ldrb	r3, [r3, #28]
 801464e:	2bff      	cmp	r3, #255	; 0xff
 8014650:	d008      	beq.n	8014664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8014652:	4b58      	ldr	r3, [pc, #352]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014654:	2202      	movs	r2, #2
 8014656:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	7f1b      	ldrb	r3, [r3, #28]
 801465c:	461a      	mov	r2, r3
 801465e:	4b55      	ldr	r3, [pc, #340]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014660:	635a      	str	r2, [r3, #52]	; 0x34
 8014662:	e002      	b.n	801466a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8014664:	4b53      	ldr	r3, [pc, #332]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014666:	2200      	movs	r2, #0
 8014668:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801466a:	7fbb      	ldrb	r3, [r7, #30]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d058      	beq.n	8014722 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 8014670:	7f7b      	ldrb	r3, [r7, #29]
 8014672:	2b10      	cmp	r3, #16
 8014674:	d14a      	bne.n	801470c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	3318      	adds	r3, #24
 801467a:	4618      	mov	r0, r3
 801467c:	f7ff fdcc 	bl	8014218 <_ZNK8touchgfx9colortypecvmEv>
 8014680:	4603      	mov	r3, r0
 8014682:	0adb      	lsrs	r3, r3, #11
 8014684:	f003 021f 	and.w	r2, r3, #31
 8014688:	4613      	mov	r3, r2
 801468a:	021b      	lsls	r3, r3, #8
 801468c:	1a9a      	subs	r2, r3, r2
 801468e:	4b4a      	ldr	r3, [pc, #296]	; (80147b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014690:	fba3 1302 	umull	r1, r3, r3, r2
 8014694:	1ad2      	subs	r2, r2, r3
 8014696:	0852      	lsrs	r2, r2, #1
 8014698:	4413      	add	r3, r2
 801469a:	091b      	lsrs	r3, r3, #4
 801469c:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	3318      	adds	r3, #24
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7ff fdb8 	bl	8014218 <_ZNK8touchgfx9colortypecvmEv>
 80146a8:	4603      	mov	r3, r0
 80146aa:	095b      	lsrs	r3, r3, #5
 80146ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80146b0:	4613      	mov	r3, r2
 80146b2:	021b      	lsls	r3, r3, #8
 80146b4:	1a9a      	subs	r2, r3, r2
 80146b6:	4b41      	ldr	r3, [pc, #260]	; (80147bc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80146b8:	fba3 1302 	umull	r1, r3, r3, r2
 80146bc:	1ad2      	subs	r2, r2, r3
 80146be:	0852      	lsrs	r2, r2, #1
 80146c0:	4413      	add	r3, r2
 80146c2:	095b      	lsrs	r3, r3, #5
 80146c4:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	3318      	adds	r3, #24
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7ff fda4 	bl	8014218 <_ZNK8touchgfx9colortypecvmEv>
 80146d0:	4603      	mov	r3, r0
 80146d2:	f003 021f 	and.w	r2, r3, #31
 80146d6:	4613      	mov	r3, r2
 80146d8:	021b      	lsls	r3, r3, #8
 80146da:	1a9a      	subs	r2, r3, r2
 80146dc:	4b36      	ldr	r3, [pc, #216]	; (80147b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80146de:	fba3 1302 	umull	r1, r3, r3, r2
 80146e2:	1ad2      	subs	r2, r2, r3
 80146e4:	0852      	lsrs	r2, r2, #1
 80146e6:	4413      	add	r3, r2
 80146e8:	091b      	lsrs	r3, r3, #4
 80146ea:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	7f1b      	ldrb	r3, [r3, #28]
 80146f0:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	061a      	lsls	r2, r3, #24
 80146f6:	69bb      	ldr	r3, [r7, #24]
 80146f8:	041b      	lsls	r3, r3, #16
 80146fa:	431a      	orrs	r2, r3
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	021b      	lsls	r3, r3, #8
 8014700:	431a      	orrs	r2, r3
 8014702:	693b      	ldr	r3, [r7, #16]
 8014704:	4313      	orrs	r3, r2
 8014706:	4a2b      	ldr	r2, [pc, #172]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014708:	6353      	str	r3, [r2, #52]	; 0x34
 801470a:	e00a      	b.n	8014722 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	3318      	adds	r3, #24
 8014710:	60bb      	str	r3, [r7, #8]
        return color;
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	683a      	ldr	r2, [r7, #0]
 8014718:	7f12      	ldrb	r2, [r2, #28]
 801471a:	0612      	lsls	r2, r2, #24
 801471c:	4313      	orrs	r3, r2
 801471e:	4a25      	ldr	r2, [pc, #148]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014720:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	8adb      	ldrh	r3, [r3, #22]
 8014726:	461a      	mov	r2, r3
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	8a1b      	ldrh	r3, [r3, #16]
 801472c:	1ad3      	subs	r3, r2, r3
 801472e:	461a      	mov	r2, r3
 8014730:	4b20      	ldr	r3, [pc, #128]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014732:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014734:	7f7b      	ldrb	r3, [r7, #29]
 8014736:	2b10      	cmp	r3, #16
 8014738:	d101      	bne.n	801473e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 801473a:	2302      	movs	r3, #2
 801473c:	e000      	b.n	8014740 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 801473e:	2301      	movs	r3, #1
 8014740:	4a1c      	ldr	r2, [pc, #112]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014742:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014744:	2100      	movs	r1, #0
 8014746:	481b      	ldr	r0, [pc, #108]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014748:	f7ef f9a0 	bl	8003a8c <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801474c:	2101      	movs	r1, #1
 801474e:	4819      	ldr	r0, [pc, #100]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014750:	f7ef f99c 	bl	8003a8c <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8014754:	7ffb      	ldrb	r3, [r7, #31]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d102      	bne.n	8014760 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 801475a:	7fbb      	ldrb	r3, [r7, #30]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d015      	beq.n	801478c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014764:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801476a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014770:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014776:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801477c:	9301      	str	r3, [sp, #4]
 801477e:	9200      	str	r2, [sp, #0]
 8014780:	4623      	mov	r3, r4
 8014782:	4602      	mov	r2, r0
 8014784:	480b      	ldr	r0, [pc, #44]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014786:	f7ee ffa4 	bl	80036d2 <HAL_DMA2D_BlendingStart_IT>
 801478a:	e00f      	b.n	80147ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 801478c:	683b      	ldr	r3, [r7, #0]
 801478e:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014790:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014796:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 801479c:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80147a2:	9300      	str	r3, [sp, #0]
 80147a4:	4603      	mov	r3, r0
 80147a6:	4803      	ldr	r0, [pc, #12]	; (80147b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80147a8:	f7ee ff60 	bl	800366c <HAL_DMA2D_Start_IT>
    }
}
 80147ac:	bf00      	nop
 80147ae:	372c      	adds	r7, #44	; 0x2c
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bd90      	pop	{r4, r7, pc}
 80147b4:	2000ba44 	.word	0x2000ba44
 80147b8:	08421085 	.word	0x08421085
 80147bc:	04104105 	.word	0x04104105

080147c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80147c0:	b590      	push	{r4, r7, lr}
 80147c2:	b08f      	sub	sp, #60	; 0x3c
 80147c4:	af02      	add	r7, sp, #8
 80147c6:	6078      	str	r0, [r7, #4]
 80147c8:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 80147ca:	f7f7 ffb1 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 80147ce:	4602      	mov	r2, r0
 80147d0:	6813      	ldr	r3, [r2, #0]
 80147d2:	331c      	adds	r3, #28
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	4610      	mov	r0, r2
 80147d8:	4798      	blx	r3
 80147da:	4603      	mov	r3, r0
 80147dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80147e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147e4:	2b10      	cmp	r3, #16
 80147e6:	d101      	bne.n	80147ec <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 80147e8:	2302      	movs	r3, #2
 80147ea:	e000      	b.n	80147ee <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 80147ec:	2301      	movs	r3, #1
 80147ee:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 80147f0:	2300      	movs	r3, #0
 80147f2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 80147f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147f8:	2b10      	cmp	r3, #16
 80147fa:	d149      	bne.n	8014890 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80147fc:	683b      	ldr	r3, [r7, #0]
 80147fe:	3318      	adds	r3, #24
 8014800:	4618      	mov	r0, r3
 8014802:	f7ff fd09 	bl	8014218 <_ZNK8touchgfx9colortypecvmEv>
 8014806:	4603      	mov	r3, r0
 8014808:	0adb      	lsrs	r3, r3, #11
 801480a:	f003 021f 	and.w	r2, r3, #31
 801480e:	4613      	mov	r3, r2
 8014810:	021b      	lsls	r3, r3, #8
 8014812:	1a9a      	subs	r2, r3, r2
 8014814:	4b6a      	ldr	r3, [pc, #424]	; (80149c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014816:	fba3 1302 	umull	r1, r3, r3, r2
 801481a:	1ad2      	subs	r2, r2, r3
 801481c:	0852      	lsrs	r2, r2, #1
 801481e:	4413      	add	r3, r2
 8014820:	091b      	lsrs	r3, r3, #4
 8014822:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	3318      	adds	r3, #24
 8014828:	4618      	mov	r0, r3
 801482a:	f7ff fcf5 	bl	8014218 <_ZNK8touchgfx9colortypecvmEv>
 801482e:	4603      	mov	r3, r0
 8014830:	095b      	lsrs	r3, r3, #5
 8014832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014836:	4613      	mov	r3, r2
 8014838:	021b      	lsls	r3, r3, #8
 801483a:	1a9a      	subs	r2, r3, r2
 801483c:	4b61      	ldr	r3, [pc, #388]	; (80149c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 801483e:	fba3 1302 	umull	r1, r3, r3, r2
 8014842:	1ad2      	subs	r2, r2, r3
 8014844:	0852      	lsrs	r2, r2, #1
 8014846:	4413      	add	r3, r2
 8014848:	095b      	lsrs	r3, r3, #5
 801484a:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	3318      	adds	r3, #24
 8014850:	4618      	mov	r0, r3
 8014852:	f7ff fce1 	bl	8014218 <_ZNK8touchgfx9colortypecvmEv>
 8014856:	4603      	mov	r3, r0
 8014858:	f003 021f 	and.w	r2, r3, #31
 801485c:	4613      	mov	r3, r2
 801485e:	021b      	lsls	r3, r3, #8
 8014860:	1a9a      	subs	r2, r3, r2
 8014862:	4b57      	ldr	r3, [pc, #348]	; (80149c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014864:	fba3 1302 	umull	r1, r3, r3, r2
 8014868:	1ad2      	subs	r2, r2, r3
 801486a:	0852      	lsrs	r2, r2, #1
 801486c:	4413      	add	r3, r2
 801486e:	091b      	lsrs	r3, r3, #4
 8014870:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	7f1b      	ldrb	r3, [r3, #28]
 8014876:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	061a      	lsls	r2, r3, #24
 801487c:	69fb      	ldr	r3, [r7, #28]
 801487e:	041b      	lsls	r3, r3, #16
 8014880:	431a      	orrs	r2, r3
 8014882:	69bb      	ldr	r3, [r7, #24]
 8014884:	021b      	lsls	r3, r3, #8
 8014886:	4313      	orrs	r3, r2
 8014888:	697a      	ldr	r2, [r7, #20]
 801488a:	4313      	orrs	r3, r2
 801488c:	62bb      	str	r3, [r7, #40]	; 0x28
 801488e:	e00a      	b.n	80148a6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	7f1b      	ldrb	r3, [r3, #28]
 8014894:	061b      	lsls	r3, r3, #24
 8014896:	461a      	mov	r2, r3
 8014898:	683b      	ldr	r3, [r7, #0]
 801489a:	3318      	adds	r3, #24
 801489c:	60fb      	str	r3, [r7, #12]
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	4313      	orrs	r3, r2
 80148a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	2b08      	cmp	r3, #8
 80148ac:	d103      	bne.n	80148b6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80148ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80148b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80148b4:	e003      	b.n	80148be <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80148b6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80148ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80148bc:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80148be:	4a42      	ldr	r2, [pc, #264]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80148c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148c2:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80148c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148c8:	2b10      	cmp	r3, #16
 80148ca:	d101      	bne.n	80148d0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 80148cc:	2302      	movs	r3, #2
 80148ce:	e000      	b.n	80148d2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 80148d0:	2301      	movs	r3, #1
 80148d2:	4a3d      	ldr	r2, [pc, #244]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80148d4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	8adb      	ldrh	r3, [r3, #22]
 80148da:	461a      	mov	r2, r3
 80148dc:	683b      	ldr	r3, [r7, #0]
 80148de:	8a1b      	ldrh	r3, [r3, #16]
 80148e0:	1ad3      	subs	r3, r2, r3
 80148e2:	461a      	mov	r2, r3
 80148e4:	4b38      	ldr	r3, [pc, #224]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80148e6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80148e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148ec:	2b10      	cmp	r3, #16
 80148ee:	d101      	bne.n	80148f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 80148f0:	2202      	movs	r2, #2
 80148f2:	e000      	b.n	80148f6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 80148f4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	8adb      	ldrh	r3, [r3, #22]
 80148fa:	4619      	mov	r1, r3
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	8a1b      	ldrh	r3, [r3, #16]
 8014900:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014904:	4830      	ldr	r0, [pc, #192]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014906:	f7ff fd27 	bl	8014358 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801490c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014910:	d11f      	bne.n	8014952 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8014912:	4b2d      	ldr	r3, [pc, #180]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014914:	2201      	movs	r2, #1
 8014916:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8014918:	4a2b      	ldr	r2, [pc, #172]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 801491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801491c:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801491e:	4b2a      	ldr	r3, [pc, #168]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014920:	2209      	movs	r2, #9
 8014922:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	8adb      	ldrh	r3, [r3, #22]
 8014928:	461a      	mov	r2, r3
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	8a1b      	ldrh	r3, [r3, #16]
 801492e:	1ad3      	subs	r3, r2, r3
 8014930:	461a      	mov	r2, r3
 8014932:	4b25      	ldr	r3, [pc, #148]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014934:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801493a:	2b10      	cmp	r3, #16
 801493c:	d101      	bne.n	8014942 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 801493e:	2302      	movs	r3, #2
 8014940:	e000      	b.n	8014944 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 8014942:	2301      	movs	r3, #1
 8014944:	4a20      	ldr	r2, [pc, #128]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014946:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014948:	2100      	movs	r1, #0
 801494a:	481f      	ldr	r0, [pc, #124]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 801494c:	f7ef f89e 	bl	8003a8c <HAL_DMA2D_ConfigLayer>
 8014950:	e005      	b.n	801495e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014952:	4a1d      	ldr	r2, [pc, #116]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014954:	6a3b      	ldr	r3, [r7, #32]
 8014956:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8014958:	4b1b      	ldr	r3, [pc, #108]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 801495a:	2200      	movs	r2, #0
 801495c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801495e:	2101      	movs	r1, #1
 8014960:	4819      	ldr	r0, [pc, #100]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014962:	f7ef f893 	bl	8003a8c <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8014966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801496c:	d115      	bne.n	801499a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014972:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014978:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801497e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014984:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801498a:	9301      	str	r3, [sp, #4]
 801498c:	9200      	str	r2, [sp, #0]
 801498e:	4623      	mov	r3, r4
 8014990:	4602      	mov	r2, r0
 8014992:	480d      	ldr	r0, [pc, #52]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014994:	f7ee fe9d 	bl	80036d2 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8014998:	e00d      	b.n	80149b6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	68db      	ldr	r3, [r3, #12]
 801499e:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80149a4:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80149aa:	9300      	str	r3, [sp, #0]
 80149ac:	460b      	mov	r3, r1
 80149ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80149b0:	4805      	ldr	r0, [pc, #20]	; (80149c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80149b2:	f7ee fe5b 	bl	800366c <HAL_DMA2D_Start_IT>
}
 80149b6:	bf00      	nop
 80149b8:	3734      	adds	r7, #52	; 0x34
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd90      	pop	{r4, r7, pc}
 80149be:	bf00      	nop
 80149c0:	08421085 	.word	0x08421085
 80149c4:	04104105 	.word	0x04104105
 80149c8:	2000ba44 	.word	0x2000ba44

080149cc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b082      	sub	sp, #8
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	4a05      	ldr	r2, [pc, #20]	; (80149ec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	601a      	str	r2, [r3, #0]
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	4618      	mov	r0, r3
 80149de:	f7ff fc27 	bl	8014230 <_ZN8touchgfx9DMA_QueueD1Ev>
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	4618      	mov	r0, r3
 80149e6:	3708      	adds	r7, #8
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	080296f8 	.word	0x080296f8

080149f0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b082      	sub	sp, #8
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	6878      	ldr	r0, [r7, #4]
 80149fa:	f7ff ffe7 	bl	80149cc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80149fe:	2114      	movs	r1, #20
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f010 fe41 	bl	8025688 <_ZdlPvj>
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3708      	adds	r7, #8
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}

08014a10 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8014a10:	b480      	push	{r7}
 8014a12:	b083      	sub	sp, #12
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
        texts = t;
 8014a18:	4a04      	ldr	r2, [pc, #16]	; (8014a2c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	6013      	str	r3, [r2, #0]
    }
 8014a1e:	bf00      	nop
 8014a20:	370c      	adds	r7, #12
 8014a22:	46bd      	mov	sp, r7
 8014a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a28:	4770      	bx	lr
 8014a2a:	bf00      	nop
 8014a2c:	2000b408 	.word	0x2000b408

08014a30 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014a30:	b480      	push	{r7}
 8014a32:	b085      	sub	sp, #20
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	60f8      	str	r0, [r7, #12]
 8014a38:	60b9      	str	r1, [r7, #8]
 8014a3a:	607a      	str	r2, [r7, #4]
 8014a3c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8014a3e:	4a0b      	ldr	r2, [pc, #44]	; (8014a6c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	601a      	str	r2, [r3, #0]
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	68ba      	ldr	r2, [r7, #8]
 8014a48:	605a      	str	r2, [r3, #4]
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	687a      	ldr	r2, [r7, #4]
 8014a4e:	609a      	str	r2, [r3, #8]
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	683a      	ldr	r2, [r7, #0]
 8014a54:	60da      	str	r2, [r3, #12]
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	69ba      	ldr	r2, [r7, #24]
 8014a5a:	611a      	str	r2, [r3, #16]
    {
    }
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3714      	adds	r7, #20
 8014a62:	46bd      	mov	sp, r7
 8014a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a68:	4770      	bx	lr
 8014a6a:	bf00      	nop
 8014a6c:	08028c40 	.word	0x08028c40

08014a70 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8014a70:	b480      	push	{r7}
 8014a72:	b083      	sub	sp, #12
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
    {
 8014a78:	4a04      	ldr	r2, [pc, #16]	; (8014a8c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	601a      	str	r2, [r3, #0]
    }
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	4618      	mov	r0, r3
 8014a82:	370c      	adds	r7, #12
 8014a84:	46bd      	mov	sp, r7
 8014a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8a:	4770      	bx	lr
 8014a8c:	08028c40 	.word	0x08028c40

08014a90 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b082      	sub	sp, #8
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
    }
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f7ff ffe9 	bl	8014a70 <_ZN8touchgfx7MVPHeapD1Ev>
 8014a9e:	2114      	movs	r1, #20
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f010 fdf1 	bl	8025688 <_ZdlPvj>
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3708      	adds	r7, #8
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014ab0:	b480      	push	{r7}
 8014ab2:	b083      	sub	sp, #12
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
    {
 8014ab8:	4a04      	ldr	r2, [pc, #16]	; (8014acc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	601a      	str	r2, [r3, #0]
    }
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	370c      	adds	r7, #12
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aca:	4770      	bx	lr
 8014acc:	0802a1b4 	.word	0x0802a1b4

08014ad0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b082      	sub	sp, #8
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
    }
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f7ff ffe9 	bl	8014ab0 <_ZN8touchgfx3LCDD1Ev>
 8014ade:	2108      	movs	r1, #8
 8014ae0:	6878      	ldr	r0, [r7, #4]
 8014ae2:	f010 fdd1 	bl	8025688 <_ZdlPvj>
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	4618      	mov	r0, r3
 8014aea:	3708      	adds	r7, #8
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}

08014af0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8014af0:	b480      	push	{r7}
 8014af2:	b083      	sub	sp, #12
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2200      	movs	r2, #0
 8014afc:	801a      	strh	r2, [r3, #0]
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	2200      	movs	r2, #0
 8014b02:	805a      	strh	r2, [r3, #2]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2200      	movs	r2, #0
 8014b08:	809a      	strh	r2, [r3, #4]
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	80da      	strh	r2, [r3, #6]
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2200      	movs	r2, #0
 8014b14:	811a      	strh	r2, [r3, #8]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	815a      	strh	r2, [r3, #10]
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	819a      	strh	r2, [r3, #12]
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2200      	movs	r2, #0
 8014b26:	739a      	strb	r2, [r3, #14]
        {
        }
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	370c      	adds	r7, #12
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b34:	4770      	bx	lr

08014b36 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8014b36:	b580      	push	{r7, lr}
 8014b38:	b082      	sub	sp, #8
 8014b3a:	af00      	add	r7, sp, #0
 8014b3c:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	4618      	mov	r0, r3
 8014b42:	f7ff ffd5 	bl	8014af0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	2200      	movs	r2, #0
 8014b4a:	611a      	str	r2, [r3, #16]
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	829a      	strh	r2, [r3, #20]
    {
    }
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	4618      	mov	r0, r3
 8014b56:	3708      	adds	r7, #8
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}

08014b5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b084      	sub	sp, #16
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	60f8      	str	r0, [r7, #12]
 8014b64:	60b9      	str	r1, [r7, #8]
 8014b66:	607a      	str	r2, [r7, #4]
 8014b68:	603b      	str	r3, [r7, #0]
          displayOrientationChangeRequested(false)
 8014b6a:	4a44      	ldr	r2, [pc, #272]	; (8014c7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	601a      	str	r2, [r3, #0]
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	68ba      	ldr	r2, [r7, #8]
 8014b74:	605a      	str	r2, [r3, #4]
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	609a      	str	r2, [r3, #8]
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	683a      	ldr	r2, [r7, #0]
 8014b80:	60da      	str	r2, [r3, #12]
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	2200      	movs	r2, #0
 8014b86:	611a      	str	r2, [r3, #16]
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	615a      	str	r2, [r3, #20]
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2200      	movs	r2, #0
 8014b92:	619a      	str	r2, [r3, #24]
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	331c      	adds	r3, #28
 8014b98:	4618      	mov	r0, r3
 8014b9a:	f7ff ffcc 	bl	8014b36 <_ZN8touchgfx8GesturesC1Ev>
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	639a      	str	r2, [r3, #56]	; 0x38
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	63da      	str	r2, [r3, #60]	; 0x3c
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	2200      	movs	r2, #0
 8014bae:	641a      	str	r2, [r3, #64]	; 0x40
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	645a      	str	r2, [r3, #68]	; 0x44
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	2201      	movs	r2, #1
 8014bc2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	64da      	str	r2, [r3, #76]	; 0x4c
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	3350      	adds	r3, #80	; 0x50
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7f7 fad9 	bl	800c190 <_ZN8touchgfx4RectC1Ev>
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2201      	movs	r2, #1
 8014be2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	2200      	movs	r2, #0
 8014bea:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2201      	movs	r2, #1
 8014bfa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2200      	movs	r2, #0
 8014c02:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	2200      	movs	r2, #0
 8014c12:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	2200      	movs	r2, #0
 8014c1a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	2200      	movs	r2, #0
 8014c22:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	2200      	movs	r2, #0
 8014c2a:	671a      	str	r2, [r3, #112]	; 0x70
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8014c34:	4a12      	ldr	r2, [pc, #72]	; (8014c80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8014c3a:	4a12      	ldr	r2, [pc, #72]	; (8014c84 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014c3c:	8b3b      	ldrh	r3, [r7, #24]
 8014c3e:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014c40:	4a11      	ldr	r2, [pc, #68]	; (8014c88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014c42:	8bbb      	ldrh	r3, [r7, #28]
 8014c44:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8014c46:	4b11      	ldr	r3, [pc, #68]	; (8014c8c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8014c48:	2200      	movs	r2, #0
 8014c4a:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014c4c:	4b0d      	ldr	r3, [pc, #52]	; (8014c84 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014c4e:	881a      	ldrh	r2, [r3, #0]
 8014c50:	4b0f      	ldr	r3, [pc, #60]	; (8014c90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8014c52:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014c54:	4b0c      	ldr	r3, [pc, #48]	; (8014c88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014c56:	881a      	ldrh	r2, [r3, #0]
 8014c58:	4b0e      	ldr	r3, [pc, #56]	; (8014c94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8014c5a:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014c5c:	8b3a      	ldrh	r2, [r7, #24]
 8014c5e:	8bbb      	ldrh	r3, [r7, #28]
 8014c60:	429a      	cmp	r2, r3
 8014c62:	d301      	bcc.n	8014c68 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8014c64:	2200      	movs	r2, #0
 8014c66:	e000      	b.n	8014c6a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8014c68:	2201      	movs	r2, #1
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	4618      	mov	r0, r3
 8014c74:	3710      	adds	r7, #16
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	08029264 	.word	0x08029264
 8014c80:	2000b36c 	.word	0x2000b36c
 8014c84:	2000b360 	.word	0x2000b360
 8014c88:	2000b362 	.word	0x2000b362
 8014c8c:	2000b364 	.word	0x2000b364
 8014c90:	2000b366 	.word	0x2000b366
 8014c94:	2000b368 	.word	0x2000b368

08014c98 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b082      	sub	sp, #8
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7f7 ff07 	bl	800cab8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8014caa:	bf00      	nop
 8014cac:	3708      	adds	r7, #8
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}
	...

08014cb4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b086      	sub	sp, #24
 8014cb8:	af02      	add	r7, sp, #8
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	60b9      	str	r1, [r7, #8]
 8014cbe:	607a      	str	r2, [r7, #4]
 8014cc0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8014cc2:	68f8      	ldr	r0, [r7, #12]
 8014cc4:	69bb      	ldr	r3, [r7, #24]
 8014cc6:	9300      	str	r3, [sp, #0]
 8014cc8:	683b      	ldr	r3, [r7, #0]
 8014cca:	687a      	ldr	r2, [r7, #4]
 8014ccc:	68b9      	ldr	r1, [r7, #8]
 8014cce:	f7ff feaf 	bl	8014a30 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8014cd2:	4a04      	ldr	r2, [pc, #16]	; (8014ce4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	601a      	str	r2, [r3, #0]
    {

    }
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3710      	adds	r7, #16
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}
 8014ce2:	bf00      	nop
 8014ce4:	08028c2c 	.word	0x08028c2c

08014ce8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	af00      	add	r7, sp, #0
 8014cec:	4801      	ldr	r0, [pc, #4]	; (8014cf4 <__tcf_0+0xc>)
 8014cee:	f000 f951 	bl	8014f94 <_ZN12FrontendHeapD1Ev>
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	20008624 	.word	0x20008624

08014cf8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8014cfc:	4b08      	ldr	r3, [pc, #32]	; (8014d20 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	f003 0301 	and.w	r3, r3, #1
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d108      	bne.n	8014d1a <_ZN12FrontendHeap11getInstanceEv+0x22>
 8014d08:	4806      	ldr	r0, [pc, #24]	; (8014d24 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8014d0a:	f000 f867 	bl	8014ddc <_ZN12FrontendHeapC1Ev>
 8014d0e:	4b04      	ldr	r3, [pc, #16]	; (8014d20 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014d10:	2201      	movs	r2, #1
 8014d12:	601a      	str	r2, [r3, #0]
 8014d14:	4804      	ldr	r0, [pc, #16]	; (8014d28 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8014d16:	f010 fd01 	bl	802571c <atexit>
        return instance;
 8014d1a:	4b02      	ldr	r3, [pc, #8]	; (8014d24 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	bd80      	pop	{r7, pc}
 8014d20:	2000a660 	.word	0x2000a660
 8014d24:	20008624 	.word	0x20008624
 8014d28:	08014ce9 	.word	0x08014ce9

08014d2c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b082      	sub	sp, #8
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	4a05      	ldr	r2, [pc, #20]	; (8014d4c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	601a      	str	r2, [r3, #0]
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7ff fe97 	bl	8014a70 <_ZN8touchgfx7MVPHeapD1Ev>
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	4618      	mov	r0, r3
 8014d46:	3708      	adds	r7, #8
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}
 8014d4c:	08028c2c 	.word	0x08028c2c

08014d50 <_ZN16FrontendHeapBaseD0Ev>:
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	f7ff ffe7 	bl	8014d2c <_ZN16FrontendHeapBaseD1Ev>
 8014d5e:	2114      	movs	r1, #20
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f010 fc91 	bl	8025688 <_ZdlPvj>
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3708      	adds	r7, #8
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f000 fd72 	bl	8015864 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014d80:	4a03      	ldr	r2, [pc, #12]	; (8014d90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	601a      	str	r2, [r3, #0]
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3708      	adds	r7, #8
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}
 8014d90:	08028bf8 	.word	0x08028bf8

08014d94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b082      	sub	sp, #8
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	4618      	mov	r0, r3
 8014da0:	f000 fd60 	bl	8015864 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014da4:	4a03      	ldr	r2, [pc, #12]	; (8014db4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	601a      	str	r2, [r3, #0]
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	4618      	mov	r0, r3
 8014dae:	3708      	adds	r7, #8
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}
 8014db4:	08028bc4 	.word	0x08028bc4

08014db8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f000 fd4e 	bl	8015864 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014dc8:	4a03      	ldr	r2, [pc, #12]	; (8014dd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	601a      	str	r2, [r3, #0]
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	3708      	adds	r7, #8
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd80      	pop	{r7, pc}
 8014dd8:	08028b90 	.word	0x08028b90

08014ddc <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014ddc:	b5b0      	push	{r4, r5, r7, lr}
 8014dde:	b084      	sub	sp, #16
 8014de0:	af02      	add	r7, sp, #8
 8014de2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	f103 0414 	add.w	r4, r3, #20
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f641 6284 	movw	r2, #7812	; 0x1e84
 8014df8:	441a      	add	r2, r3
 8014dfa:	6879      	ldr	r1, [r7, #4]
 8014dfc:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8014e00:	440b      	add	r3, r1
 8014e02:	9300      	str	r3, [sp, #0]
 8014e04:	4613      	mov	r3, r2
 8014e06:	462a      	mov	r2, r5
 8014e08:	4621      	mov	r1, r4
 8014e0a:	f7ff ff53 	bl	8014cb4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8014e0e:	4a19      	ldr	r2, [pc, #100]	; (8014e74 <_ZN12FrontendHeapC1Ev+0x98>)
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	601a      	str	r2, [r3, #0]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	3314      	adds	r3, #20
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f7ff ffa9 	bl	8014d70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	332c      	adds	r3, #44	; 0x2c
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7ff ffb6 	bl	8014d94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014e28:	687a      	ldr	r2, [r7, #4]
 8014e2a:	f641 6384 	movw	r3, #7812	; 0x1e84
 8014e2e:	4413      	add	r3, r2
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7ff ffc1 	bl	8014db8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	f503 53f7 	add.w	r3, r3, #7904	; 0x1ee0
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7fd ffcd 	bl	8012ddc <_ZN5ModelC1Ev>
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8014e48:	4413      	add	r3, r2
 8014e4a:	687a      	ldr	r2, [r7, #4]
 8014e4c:	f502 51f7 	add.w	r1, r2, #7904	; 0x1ee0
 8014e50:	687a      	ldr	r2, [r7, #4]
 8014e52:	4618      	mov	r0, r3
 8014e54:	f7fd fdb6 	bl	80129c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	687a      	ldr	r2, [r7, #4]
 8014e5c:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8014e60:	4413      	add	r3, r2
 8014e62:	4619      	mov	r1, r3
 8014e64:	f7ff ff18 	bl	8014c98 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	3708      	adds	r7, #8
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bdb0      	pop	{r4, r5, r7, pc}
 8014e72:	bf00      	nop
 8014e74:	08028b7c 	.word	0x08028b7c

08014e78 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b086      	sub	sp, #24
 8014e7c:	af02      	add	r7, sp, #8
 8014e7e:	60f8      	str	r0, [r7, #12]
 8014e80:	60b9      	str	r1, [r7, #8]
 8014e82:	607a      	str	r2, [r7, #4]
 8014e84:	603b      	str	r3, [r7, #0]
 8014e86:	68f8      	ldr	r0, [r7, #12]
 8014e88:	8bbb      	ldrh	r3, [r7, #28]
 8014e8a:	9301      	str	r3, [sp, #4]
 8014e8c:	8b3b      	ldrh	r3, [r7, #24]
 8014e8e:	9300      	str	r3, [sp, #0]
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	687a      	ldr	r2, [r7, #4]
 8014e94:	68b9      	ldr	r1, [r7, #8]
 8014e96:	f7ff fe61 	bl	8014b5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8014e9a:	4a04      	ldr	r2, [pc, #16]	; (8014eac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	601a      	str	r2, [r3, #0]
    }
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3710      	adds	r7, #16
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}
 8014eaa:	bf00      	nop
 8014eac:	08028c50 	.word	0x08028c50

08014eb0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b086      	sub	sp, #24
 8014eb4:	af02      	add	r7, sp, #8
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	607a      	str	r2, [r7, #4]
 8014ebc:	603b      	str	r3, [r7, #0]
 8014ebe:	68f8      	ldr	r0, [r7, #12]
 8014ec0:	8bbb      	ldrh	r3, [r7, #28]
 8014ec2:	9301      	str	r3, [sp, #4]
 8014ec4:	8b3b      	ldrh	r3, [r7, #24]
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	683b      	ldr	r3, [r7, #0]
 8014eca:	687a      	ldr	r2, [r7, #4]
 8014ecc:	68b9      	ldr	r1, [r7, #8]
 8014ece:	f7ff ffd3 	bl	8014e78 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014ed2:	4a04      	ldr	r2, [pc, #16]	; (8014ee4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	601a      	str	r2, [r3, #0]
    }
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	4618      	mov	r0, r3
 8014edc:	3710      	adds	r7, #16
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	0802893c 	.word	0x0802893c

08014ee8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014ee8:	b480      	push	{r7}
 8014eea:	b083      	sub	sp, #12
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
 8014ef0:	4a04      	ldr	r2, [pc, #16]	; (8014f04 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	601a      	str	r2, [r3, #0]
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	4618      	mov	r0, r3
 8014efa:	370c      	adds	r7, #12
 8014efc:	46bd      	mov	sp, r7
 8014efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f02:	4770      	bx	lr
 8014f04:	08028924 	.word	0x08028924

08014f08 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7ff ffe8 	bl	8014ee8 <_ZN8touchgfx15TouchControllerC1Ev>
 8014f18:	4a03      	ldr	r2, [pc, #12]	; (8014f28 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	601a      	str	r2, [r3, #0]
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	4618      	mov	r0, r3
 8014f22:	3708      	adds	r7, #8
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}
 8014f28:	0802890c 	.word	0x0802890c

08014f2c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8014f2c:	b590      	push	{r4, r7, lr}
 8014f2e:	b085      	sub	sp, #20
 8014f30:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8014f32:	f7fd fb19 	bl	8012568 <_ZN14BitmapDatabase11getInstanceEv>
 8014f36:	4604      	mov	r4, r0
 8014f38:	f7fd fb20 	bl	801257c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	4619      	mov	r1, r3
 8014f40:	2300      	movs	r3, #0
 8014f42:	9300      	str	r3, [sp, #0]
 8014f44:	2300      	movs	r3, #0
 8014f46:	2200      	movs	r2, #0
 8014f48:	4620      	mov	r0, r4
 8014f4a:	f006 fd67 	bl	801ba1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8014f4e:	4809      	ldr	r0, [pc, #36]	; (8014f74 <touchgfx_init+0x48>)
 8014f50:	f7ff fd5e 	bl	8014a10 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8014f54:	2000      	movs	r0, #0
 8014f56:	f7fd fc49 	bl	80127ec <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8014f5a:	4807      	ldr	r0, [pc, #28]	; (8014f78 <touchgfx_init+0x4c>)
 8014f5c:	f006 fca8 	bl	801b8b0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8014f60:	f7ff feca 	bl	8014cf8 <_ZN12FrontendHeap11getInstanceEv>
 8014f64:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8014f66:	4805      	ldr	r0, [pc, #20]	; (8014f7c <touchgfx_init+0x50>)
 8014f68:	f7fe ffd4 	bl	8013f14 <_ZN11TouchGFXHAL10initializeEv>
}
 8014f6c:	bf00      	nop
 8014f6e:	370c      	adds	r7, #12
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd90      	pop	{r4, r7, pc}
 8014f74:	2000b2e0 	.word	0x2000b2e0
 8014f78:	2000003c 	.word	0x2000003c
 8014f7c:	2000b2e4 	.word	0x2000b2e4

08014f80 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8014f84:	4802      	ldr	r0, [pc, #8]	; (8014f90 <touchgfx_taskEntry+0x10>)
 8014f86:	f000 fe80 	bl	8015c8a <_ZN8touchgfx3HAL9taskEntryEv>
}
 8014f8a:	bf00      	nop
 8014f8c:	bd80      	pop	{r7, pc}
 8014f8e:	bf00      	nop
 8014f90:	2000b2e4 	.word	0x2000b2e4

08014f94 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b082      	sub	sp, #8
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
 8014f9c:	4a11      	ldr	r2, [pc, #68]	; (8014fe4 <_ZN12FrontendHeapD1Ev+0x50>)
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	601a      	str	r2, [r3, #0]
 8014fa2:	687a      	ldr	r2, [r7, #4]
 8014fa4:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8014fa8:	4413      	add	r3, r2
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7fd fcd4 	bl	8012958 <_ZN19FrontendApplicationD1Ev>
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	f641 6384 	movw	r3, #7812	; 0x1e84
 8014fb6:	4413      	add	r3, r2
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f000 f827 	bl	801500c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	332c      	adds	r3, #44	; 0x2c
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f000 f844 	bl	8015050 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	3314      	adds	r3, #20
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f000 f863 	bl	8015098 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f7ff fea9 	bl	8014d2c <_ZN16FrontendHeapBaseD1Ev>
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	4618      	mov	r0, r3
 8014fde:	3708      	adds	r7, #8
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}
 8014fe4:	08028b7c 	.word	0x08028b7c

08014fe8 <_ZN12FrontendHeapD0Ev>:
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b082      	sub	sp, #8
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
 8014ff0:	6878      	ldr	r0, [r7, #4]
 8014ff2:	f7ff ffcf 	bl	8014f94 <_ZN12FrontendHeapD1Ev>
 8014ff6:	f242 013c 	movw	r1, #8252	; 0x203c
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f010 fb44 	bl	8025688 <_ZdlPvj>
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	4618      	mov	r0, r3
 8015004:	3708      	adds	r7, #8
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}
	...

0801500c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 801500c:	b580      	push	{r7, lr}
 801500e:	b082      	sub	sp, #8
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
 8015014:	4a05      	ldr	r2, [pc, #20]	; (801502c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	601a      	str	r2, [r3, #0]
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	4618      	mov	r0, r3
 801501e:	f000 fc1f 	bl	8015860 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	4618      	mov	r0, r3
 8015026:	3708      	adds	r7, #8
 8015028:	46bd      	mov	sp, r7
 801502a:	bd80      	pop	{r7, pc}
 801502c:	08028b90 	.word	0x08028b90

08015030 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8015030:	b580      	push	{r7, lr}
 8015032:	b082      	sub	sp, #8
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
 8015038:	6878      	ldr	r0, [r7, #4]
 801503a:	f7ff ffe7 	bl	801500c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801503e:	215c      	movs	r1, #92	; 0x5c
 8015040:	6878      	ldr	r0, [r7, #4]
 8015042:	f010 fb21 	bl	8025688 <_ZdlPvj>
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	4618      	mov	r0, r3
 801504a:	3708      	adds	r7, #8
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	4a05      	ldr	r2, [pc, #20]	; (8015070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	601a      	str	r2, [r3, #0]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	4618      	mov	r0, r3
 8015062:	f000 fbfd 	bl	8015860 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	4618      	mov	r0, r3
 801506a:	3708      	adds	r7, #8
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}
 8015070:	08028bc4 	.word	0x08028bc4

08015074 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	6878      	ldr	r0, [r7, #4]
 801507e:	f7ff ffe7 	bl	8015050 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015082:	f641 6158 	movw	r1, #7768	; 0x1e58
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f010 fafe 	bl	8025688 <_ZdlPvj>
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	4618      	mov	r0, r3
 8015090:	3708      	adds	r7, #8
 8015092:	46bd      	mov	sp, r7
 8015094:	bd80      	pop	{r7, pc}
	...

08015098 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015098:	b580      	push	{r7, lr}
 801509a:	b082      	sub	sp, #8
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
 80150a0:	4a05      	ldr	r2, [pc, #20]	; (80150b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	601a      	str	r2, [r3, #0]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	4618      	mov	r0, r3
 80150aa:	f000 fbd9 	bl	8015860 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	4618      	mov	r0, r3
 80150b2:	3708      	adds	r7, #8
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	08028bf8 	.word	0x08028bf8

080150bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80150bc:	b580      	push	{r7, lr}
 80150be:	b082      	sub	sp, #8
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f7ff ffe7 	bl	8015098 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80150ca:	2118      	movs	r1, #24
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f010 fadb 	bl	8025688 <_ZdlPvj>
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	4618      	mov	r0, r3
 80150d6:	3708      	adds	r7, #8
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}

080150dc <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	4a05      	ldr	r2, [pc, #20]	; (80150fc <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	601a      	str	r2, [r3, #0]
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7ff fcdf 	bl	8014ab0 <_ZN8touchgfx3LCDD1Ev>
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	4618      	mov	r0, r3
 80150f6:	3708      	adds	r7, #8
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}
 80150fc:	0802b288 	.word	0x0802b288

08015100 <_ZN8touchgfx8LCD24bppD0Ev>:
 8015100:	b580      	push	{r7, lr}
 8015102:	b082      	sub	sp, #8
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f7ff ffe7 	bl	80150dc <_ZN8touchgfx8LCD24bppD1Ev>
 801510e:	2158      	movs	r1, #88	; 0x58
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f010 fab9 	bl	8025688 <_ZdlPvj>
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	4618      	mov	r0, r3
 801511a:	3708      	adds	r7, #8
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}

08015120 <_Z41__static_initialization_and_destruction_0ii>:
 8015120:	b580      	push	{r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af02      	add	r7, sp, #8
 8015126:	6078      	str	r0, [r7, #4]
 8015128:	6039      	str	r1, [r7, #0]
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2b01      	cmp	r3, #1
 801512e:	d119      	bne.n	8015164 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015136:	4293      	cmp	r3, r2
 8015138:	d114      	bne.n	8015164 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801513a:	4818      	ldr	r0, [pc, #96]	; (801519c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801513c:	f7ff fee4 	bl	8014f08 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8015140:	4817      	ldr	r0, [pc, #92]	; (80151a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015142:	f7ff f963 	bl	801440c <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8015146:	4817      	ldr	r0, [pc, #92]	; (80151a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015148:	f008 fe56 	bl	801ddf8 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 801514c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015150:	9301      	str	r3, [sp, #4]
 8015152:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015156:	9300      	str	r3, [sp, #0]
 8015158:	4b10      	ldr	r3, [pc, #64]	; (801519c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801515a:	4a12      	ldr	r2, [pc, #72]	; (80151a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801515c:	4910      	ldr	r1, [pc, #64]	; (80151a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801515e:	4812      	ldr	r0, [pc, #72]	; (80151a8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015160:	f7ff fea6 	bl	8014eb0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d113      	bne.n	8015192 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015170:	4293      	cmp	r3, r2
 8015172:	d10e      	bne.n	8015192 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8015174:	480c      	ldr	r0, [pc, #48]	; (80151a8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015176:	f7fe ff45 	bl	8014004 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801517a:	480c      	ldr	r0, [pc, #48]	; (80151ac <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801517c:	f7f6 fcf6 	bl	800bb6c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8015180:	4808      	ldr	r0, [pc, #32]	; (80151a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015182:	f7ff ffab 	bl	80150dc <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8015186:	4806      	ldr	r0, [pc, #24]	; (80151a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015188:	f7ff f96a 	bl	8014460 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 801518c:	4803      	ldr	r0, [pc, #12]	; (801519c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801518e:	f7fe fc9d 	bl	8013acc <_ZN20STM32TouchControllerD1Ev>
}
 8015192:	bf00      	nop
 8015194:	3708      	adds	r7, #8
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
 801519a:	bf00      	nop
 801519c:	2000a664 	.word	0x2000a664
 80151a0:	2000a668 	.word	0x2000a668
 80151a4:	2000b288 	.word	0x2000b288
 80151a8:	2000b2e4 	.word	0x2000b2e4
 80151ac:	2000003c 	.word	0x2000003c

080151b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 80151b0:	b480      	push	{r7}
 80151b2:	b083      	sub	sp, #12
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80151b8:	2301      	movs	r3, #1
    }
 80151ba:	4618      	mov	r0, r3
 80151bc:	370c      	adds	r7, #12
 80151be:	46bd      	mov	sp, r7
 80151c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c4:	4770      	bx	lr

080151c6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 80151c6:	b480      	push	{r7}
 80151c8:	b083      	sub	sp, #12
 80151ca:	af00      	add	r7, sp, #0
 80151cc:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80151ce:	2354      	movs	r3, #84	; 0x54
    }
 80151d0:	4618      	mov	r0, r3
 80151d2:	370c      	adds	r7, #12
 80151d4:	46bd      	mov	sp, r7
 80151d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151da:	4770      	bx	lr

080151dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 80151dc:	b480      	push	{r7}
 80151de:	b083      	sub	sp, #12
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
 80151e4:	460b      	mov	r3, r1
 80151e6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80151e8:	887b      	ldrh	r3, [r7, #2]
 80151ea:	2254      	movs	r2, #84	; 0x54
 80151ec:	fb02 f303 	mul.w	r3, r2, r3
 80151f0:	3308      	adds	r3, #8
 80151f2:	687a      	ldr	r2, [r7, #4]
 80151f4:	4413      	add	r3, r2
    }
 80151f6:	4618      	mov	r0, r3
 80151f8:	370c      	adds	r7, #12
 80151fa:	46bd      	mov	sp, r7
 80151fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015200:	4770      	bx	lr

08015202 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 8015202:	b480      	push	{r7}
 8015204:	b083      	sub	sp, #12
 8015206:	af00      	add	r7, sp, #0
 8015208:	6078      	str	r0, [r7, #4]
 801520a:	460b      	mov	r3, r1
 801520c:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801520e:	887b      	ldrh	r3, [r7, #2]
 8015210:	2254      	movs	r2, #84	; 0x54
 8015212:	fb02 f303 	mul.w	r3, r2, r3
 8015216:	3308      	adds	r3, #8
 8015218:	687a      	ldr	r2, [r7, #4]
 801521a:	4413      	add	r3, r2
    }
 801521c:	4618      	mov	r0, r3
 801521e:	370c      	adds	r7, #12
 8015220:	46bd      	mov	sp, r7
 8015222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015226:	4770      	bx	lr

08015228 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015228:	b480      	push	{r7}
 801522a:	b083      	sub	sp, #12
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015230:	2301      	movs	r3, #1
    }
 8015232:	4618      	mov	r0, r3
 8015234:	370c      	adds	r7, #12
 8015236:	46bd      	mov	sp, r7
 8015238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523c:	4770      	bx	lr

0801523e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801523e:	b480      	push	{r7}
 8015240:	b083      	sub	sp, #12
 8015242:	af00      	add	r7, sp, #0
 8015244:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015246:	f641 6350 	movw	r3, #7760	; 0x1e50
    }
 801524a:	4618      	mov	r0, r3
 801524c:	370c      	adds	r7, #12
 801524e:	46bd      	mov	sp, r7
 8015250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015254:	4770      	bx	lr

08015256 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015256:	b480      	push	{r7}
 8015258:	b083      	sub	sp, #12
 801525a:	af00      	add	r7, sp, #0
 801525c:	6078      	str	r0, [r7, #4]
 801525e:	460b      	mov	r3, r1
 8015260:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015262:	887b      	ldrh	r3, [r7, #2]
 8015264:	f641 6250 	movw	r2, #7760	; 0x1e50
 8015268:	fb02 f303 	mul.w	r3, r2, r3
 801526c:	3308      	adds	r3, #8
 801526e:	687a      	ldr	r2, [r7, #4]
 8015270:	4413      	add	r3, r2
    }
 8015272:	4618      	mov	r0, r3
 8015274:	370c      	adds	r7, #12
 8015276:	46bd      	mov	sp, r7
 8015278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527c:	4770      	bx	lr

0801527e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801527e:	b480      	push	{r7}
 8015280:	b083      	sub	sp, #12
 8015282:	af00      	add	r7, sp, #0
 8015284:	6078      	str	r0, [r7, #4]
 8015286:	460b      	mov	r3, r1
 8015288:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801528a:	887b      	ldrh	r3, [r7, #2]
 801528c:	f641 6250 	movw	r2, #7760	; 0x1e50
 8015290:	fb02 f303 	mul.w	r3, r2, r3
 8015294:	3308      	adds	r3, #8
 8015296:	687a      	ldr	r2, [r7, #4]
 8015298:	4413      	add	r3, r2
    }
 801529a:	4618      	mov	r0, r3
 801529c:	370c      	adds	r7, #12
 801529e:	46bd      	mov	sp, r7
 80152a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a4:	4770      	bx	lr

080152a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80152a6:	b480      	push	{r7}
 80152a8:	b083      	sub	sp, #12
 80152aa:	af00      	add	r7, sp, #0
 80152ac:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80152ae:	2301      	movs	r3, #1
    }
 80152b0:	4618      	mov	r0, r3
 80152b2:	370c      	adds	r7, #12
 80152b4:	46bd      	mov	sp, r7
 80152b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ba:	4770      	bx	lr

080152bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80152bc:	b480      	push	{r7}
 80152be:	b083      	sub	sp, #12
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80152c4:	2310      	movs	r3, #16
    }
 80152c6:	4618      	mov	r0, r3
 80152c8:	370c      	adds	r7, #12
 80152ca:	46bd      	mov	sp, r7
 80152cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d0:	4770      	bx	lr

080152d2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80152d2:	b480      	push	{r7}
 80152d4:	b083      	sub	sp, #12
 80152d6:	af00      	add	r7, sp, #0
 80152d8:	6078      	str	r0, [r7, #4]
 80152da:	460b      	mov	r3, r1
 80152dc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80152de:	887b      	ldrh	r3, [r7, #2]
 80152e0:	011b      	lsls	r3, r3, #4
 80152e2:	3308      	adds	r3, #8
 80152e4:	687a      	ldr	r2, [r7, #4]
 80152e6:	4413      	add	r3, r2
    }
 80152e8:	4618      	mov	r0, r3
 80152ea:	370c      	adds	r7, #12
 80152ec:	46bd      	mov	sp, r7
 80152ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f2:	4770      	bx	lr

080152f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80152f4:	b480      	push	{r7}
 80152f6:	b083      	sub	sp, #12
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	460b      	mov	r3, r1
 80152fe:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015300:	887b      	ldrh	r3, [r7, #2]
 8015302:	011b      	lsls	r3, r3, #4
 8015304:	3308      	adds	r3, #8
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	4413      	add	r3, r2
    }
 801530a:	4618      	mov	r0, r3
 801530c:	370c      	adds	r7, #12
 801530e:	46bd      	mov	sp, r7
 8015310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015314:	4770      	bx	lr

08015316 <_GLOBAL__sub_I_touchgfx_init>:
 8015316:	b580      	push	{r7, lr}
 8015318:	af00      	add	r7, sp, #0
 801531a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801531e:	2001      	movs	r0, #1
 8015320:	f7ff fefe 	bl	8015120 <_Z41__static_initialization_and_destruction_0ii>
 8015324:	bd80      	pop	{r7, pc}

08015326 <_GLOBAL__sub_D_touchgfx_init>:
 8015326:	b580      	push	{r7, lr}
 8015328:	af00      	add	r7, sp, #0
 801532a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801532e:	2000      	movs	r0, #0
 8015330:	f7ff fef6 	bl	8015120 <_Z41__static_initialization_and_destruction_0ii>
 8015334:	bd80      	pop	{r7, pc}

08015336 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8015336:	b580      	push	{r7, lr}
 8015338:	b082      	sub	sp, #8
 801533a:	af00      	add	r7, sp, #0
 801533c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	3318      	adds	r3, #24
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	4798      	blx	r3
    }
 801534a:	bf00      	nop
 801534c:	3708      	adds	r7, #8
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}

08015352 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8015352:	b480      	push	{r7}
 8015354:	b083      	sub	sp, #12
 8015356:	af00      	add	r7, sp, #0
 8015358:	6078      	str	r0, [r7, #4]
 801535a:	460b      	mov	r3, r1
 801535c:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	78fa      	ldrb	r2, [r7, #3]
 8015362:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8015366:	bf00      	nop
 8015368:	370c      	adds	r7, #12
 801536a:	46bd      	mov	sp, r7
 801536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015370:	4770      	bx	lr

08015372 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8015372:	b480      	push	{r7}
 8015374:	b083      	sub	sp, #12
 8015376:	af00      	add	r7, sp, #0
 8015378:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8015380:	3301      	adds	r3, #1
 8015382:	b2da      	uxtb	r2, r3
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801538a:	bf00      	nop
 801538c:	370c      	adds	r7, #12
 801538e:	46bd      	mov	sp, r7
 8015390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015394:	4770      	bx	lr
	...

08015398 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
 80153a0:	460b      	mov	r3, r1
 80153a2:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80153a4:	78fb      	ldrb	r3, [r7, #3]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d002      	beq.n	80153b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80153aa:	78fb      	ldrb	r3, [r7, #3]
 80153ac:	2b02      	cmp	r3, #2
 80153ae:	d105      	bne.n	80153bc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	78fa      	ldrb	r2, [r7, #3]
 80153b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80153b8:	2301      	movs	r3, #1
 80153ba:	e027      	b.n	801540c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80153bc:	78fb      	ldrb	r3, [r7, #3]
 80153be:	2b01      	cmp	r3, #1
 80153c0:	d123      	bne.n	801540a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d014      	beq.n	80153f4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	3380      	adds	r3, #128	; 0x80
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	6878      	ldr	r0, [r7, #4]
 80153d4:	4798      	blx	r3
 80153d6:	4603      	mov	r3, r0
 80153d8:	461a      	mov	r2, r3
 80153da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153de:	429a      	cmp	r2, r3
 80153e0:	d008      	beq.n	80153f4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80153e2:	4b0c      	ldr	r3, [pc, #48]	; (8015414 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80153e4:	781b      	ldrb	r3, [r3, #0]
 80153e6:	f083 0301 	eor.w	r3, r3, #1
 80153ea:	b2db      	uxtb	r3, r3
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d001      	beq.n	80153f4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80153f0:	2301      	movs	r3, #1
 80153f2:	e000      	b.n	80153f6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80153f4:	2300      	movs	r3, #0
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d005      	beq.n	8015406 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	78fa      	ldrb	r2, [r7, #3]
 80153fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8015402:	2301      	movs	r3, #1
 8015404:	e002      	b.n	801540c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8015406:	2300      	movs	r3, #0
 8015408:	e000      	b.n	801540c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801540a:	2300      	movs	r3, #0
    }
 801540c:	4618      	mov	r0, r3
 801540e:	3708      	adds	r7, #8
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	2000b36a 	.word	0x2000b36a

08015418 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8015418:	b480      	push	{r7}
 801541a:	b083      	sub	sp, #12
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	683a      	ldr	r2, [r7, #0]
 8015426:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8015428:	bf00      	nop
 801542a:	370c      	adds	r7, #12
 801542c:	46bd      	mov	sp, r7
 801542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015432:	4770      	bx	lr

08015434 <__NVIC_EnableIRQ>:
{
 8015434:	b480      	push	{r7}
 8015436:	b083      	sub	sp, #12
 8015438:	af00      	add	r7, sp, #0
 801543a:	4603      	mov	r3, r0
 801543c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801543e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015442:	2b00      	cmp	r3, #0
 8015444:	db0d      	blt.n	8015462 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801544a:	b2db      	uxtb	r3, r3
 801544c:	f003 021f 	and.w	r2, r3, #31
 8015450:	4907      	ldr	r1, [pc, #28]	; (8015470 <__NVIC_EnableIRQ+0x3c>)
 8015452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015456:	095b      	lsrs	r3, r3, #5
 8015458:	2001      	movs	r0, #1
 801545a:	fa00 f202 	lsl.w	r2, r0, r2
 801545e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015462:	bf00      	nop
 8015464:	370c      	adds	r7, #12
 8015466:	46bd      	mov	sp, r7
 8015468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546c:	4770      	bx	lr
 801546e:	bf00      	nop
 8015470:	e000e100 	.word	0xe000e100

08015474 <__NVIC_DisableIRQ>:
{
 8015474:	b480      	push	{r7}
 8015476:	b083      	sub	sp, #12
 8015478:	af00      	add	r7, sp, #0
 801547a:	4603      	mov	r3, r0
 801547c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801547e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015482:	2b00      	cmp	r3, #0
 8015484:	db12      	blt.n	80154ac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801548a:	b2db      	uxtb	r3, r3
 801548c:	f003 021f 	and.w	r2, r3, #31
 8015490:	4909      	ldr	r1, [pc, #36]	; (80154b8 <__NVIC_DisableIRQ+0x44>)
 8015492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015496:	095b      	lsrs	r3, r3, #5
 8015498:	2001      	movs	r0, #1
 801549a:	fa00 f202 	lsl.w	r2, r0, r2
 801549e:	3320      	adds	r3, #32
 80154a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80154a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80154a8:	f3bf 8f6f 	isb	sy
}
 80154ac:	bf00      	nop
 80154ae:	370c      	adds	r7, #12
 80154b0:	46bd      	mov	sp, r7
 80154b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b6:	4770      	bx	lr
 80154b8:	e000e100 	.word	0xe000e100

080154bc <__NVIC_SetPriority>:
{
 80154bc:	b480      	push	{r7}
 80154be:	b083      	sub	sp, #12
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	4603      	mov	r3, r0
 80154c4:	6039      	str	r1, [r7, #0]
 80154c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80154c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	db0c      	blt.n	80154ea <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	4a0e      	ldr	r2, [pc, #56]	; (8015510 <__NVIC_SetPriority+0x54>)
 80154d6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80154da:	4608      	mov	r0, r1
 80154dc:	011b      	lsls	r3, r3, #4
 80154de:	b2d9      	uxtb	r1, r3
 80154e0:	1813      	adds	r3, r2, r0
 80154e2:	460a      	mov	r2, r1
 80154e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80154e8:	e00c      	b.n	8015504 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	b2da      	uxtb	r2, r3
 80154ee:	4909      	ldr	r1, [pc, #36]	; (8015514 <__NVIC_SetPriority+0x58>)
 80154f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154f4:	b2db      	uxtb	r3, r3
 80154f6:	f003 030f 	and.w	r3, r3, #15
 80154fa:	3b04      	subs	r3, #4
 80154fc:	0112      	lsls	r2, r2, #4
 80154fe:	b2d2      	uxtb	r2, r2
 8015500:	440b      	add	r3, r1
 8015502:	761a      	strb	r2, [r3, #24]
}
 8015504:	bf00      	nop
 8015506:	370c      	adds	r7, #12
 8015508:	46bd      	mov	sp, r7
 801550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550e:	4770      	bx	lr
 8015510:	e000e100 	.word	0xe000e100
 8015514:	e000ed00 	.word	0xe000ed00

08015518 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8015518:	b5b0      	push	{r4, r5, r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	4618      	mov	r0, r3
 8015524:	f000 fe76 	bl	8016214 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8015528:	687d      	ldr	r5, [r7, #4]
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	334c      	adds	r3, #76	; 0x4c
 8015530:	681c      	ldr	r4, [r3, #0]
 8015532:	f003 ff55 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 8015536:	4603      	mov	r3, r0
 8015538:	4619      	mov	r1, r3
 801553a:	4628      	mov	r0, r5
 801553c:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	490d      	ldr	r1, [pc, #52]	; (8015578 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8015542:	4618      	mov	r0, r3
 8015544:	f7ff ff68 	bl	8015418 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2101      	movs	r1, #1
 801554c:	4618      	mov	r0, r3
 801554e:	f7ff ff23 	bl	8015398 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8015552:	6878      	ldr	r0, [r7, #4]
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	3374      	adds	r3, #116	; 0x74
 801555a:	681c      	ldr	r4, [r3, #0]
 801555c:	2300      	movs	r3, #0
 801555e:	2200      	movs	r2, #0
 8015560:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8015564:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2101      	movs	r1, #1
 801556a:	4618      	mov	r0, r3
 801556c:	f7ff fef1 	bl	8015352 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8015570:	bf00      	nop
 8015572:	3708      	adds	r7, #8
 8015574:	46bd      	mov	sp, r7
 8015576:	bdb0      	pop	{r4, r5, r7, pc}
 8015578:	08014159 	.word	0x08014159

0801557c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8015584:	2109      	movs	r1, #9
 8015586:	205a      	movs	r0, #90	; 0x5a
 8015588:	f7ff ff98 	bl	80154bc <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 801558c:	2109      	movs	r1, #9
 801558e:	2058      	movs	r0, #88	; 0x58
 8015590:	f7ff ff94 	bl	80154bc <__NVIC_SetPriority>
}
 8015594:	bf00      	nop
 8015596:	3708      	adds	r7, #8
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}

0801559c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b082      	sub	sp, #8
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80155a4:	205a      	movs	r0, #90	; 0x5a
 80155a6:	f7ff ff45 	bl	8015434 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80155aa:	2058      	movs	r0, #88	; 0x58
 80155ac:	f7ff ff42 	bl	8015434 <__NVIC_EnableIRQ>
}
 80155b0:	bf00      	nop
 80155b2:	3708      	adds	r7, #8
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}

080155b8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b082      	sub	sp, #8
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80155c0:	205a      	movs	r0, #90	; 0x5a
 80155c2:	f7ff ff57 	bl	8015474 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80155c6:	2058      	movs	r0, #88	; 0x58
 80155c8:	f7ff ff54 	bl	8015474 <__NVIC_DisableIRQ>
}
 80155cc:	bf00      	nop
 80155ce:	3708      	adds	r7, #8
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}

080155d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80155d4:	b480      	push	{r7}
 80155d6:	b083      	sub	sp, #12
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80155dc:	4b11      	ldr	r3, [pc, #68]	; (8015624 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80155de:	68db      	ldr	r3, [r3, #12]
 80155e0:	b29b      	uxth	r3, r3
 80155e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80155e6:	b29b      	uxth	r3, r3
 80155e8:	3b01      	subs	r3, #1
 80155ea:	b29a      	uxth	r2, r3
 80155ec:	4b0e      	ldr	r3, [pc, #56]	; (8015628 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80155ee:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80155f0:	4b0c      	ldr	r3, [pc, #48]	; (8015624 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80155f2:	691b      	ldr	r3, [r3, #16]
 80155f4:	b29b      	uxth	r3, r3
 80155f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80155fa:	b29b      	uxth	r3, r3
 80155fc:	3b01      	subs	r3, #1
 80155fe:	b29a      	uxth	r2, r3
 8015600:	4b0a      	ldr	r3, [pc, #40]	; (801562c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8015602:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8015604:	4b08      	ldr	r3, [pc, #32]	; (8015628 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015606:	881a      	ldrh	r2, [r3, #0]
 8015608:	4b06      	ldr	r3, [pc, #24]	; (8015624 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801560a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 801560c:	4b05      	ldr	r3, [pc, #20]	; (8015624 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801560e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015610:	4a04      	ldr	r2, [pc, #16]	; (8015624 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015612:	f043 0301 	orr.w	r3, r3, #1
 8015616:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015618:	bf00      	nop
 801561a:	370c      	adds	r7, #12
 801561c:	46bd      	mov	sp, r7
 801561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015622:	4770      	bx	lr
 8015624:	40016800 	.word	0x40016800
 8015628:	2000b35c 	.word	0x2000b35c
 801562c:	2000b35e 	.word	0x2000b35e

08015630 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8015630:	b480      	push	{r7}
 8015632:	b083      	sub	sp, #12
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015638:	4b03      	ldr	r3, [pc, #12]	; (8015648 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801563a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801563c:	4618      	mov	r0, r3
 801563e:	370c      	adds	r7, #12
 8015640:	46bd      	mov	sp, r7
 8015642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015646:	4770      	bx	lr
 8015648:	40016884 	.word	0x40016884

0801564c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801564c:	b480      	push	{r7}
 801564e:	b083      	sub	sp, #12
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
 8015654:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8015656:	4a06      	ldr	r2, [pc, #24]	; (8015670 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801565c:	4b05      	ldr	r3, [pc, #20]	; (8015674 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801565e:	2201      	movs	r2, #1
 8015660:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015662:	bf00      	nop
 8015664:	370c      	adds	r7, #12
 8015666:	46bd      	mov	sp, r7
 8015668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop
 8015670:	40016884 	.word	0x40016884
 8015674:	40016800 	.word	0x40016800

08015678 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b082      	sub	sp, #8
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
 8015680:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	6839      	ldr	r1, [r7, #0]
 8015686:	4618      	mov	r0, r3
 8015688:	f000 fad5 	bl	8015c36 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801568c:	bf00      	nop
 801568e:	3708      	adds	r7, #8
 8015690:	46bd      	mov	sp, r7
 8015692:	bd80      	pop	{r7, pc}

08015694 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8015694:	b480      	push	{r7}
 8015696:	b085      	sub	sp, #20
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 801569c:	4b0d      	ldr	r3, [pc, #52]	; (80156d4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801569e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156a0:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80156a2:	4b0c      	ldr	r3, [pc, #48]	; (80156d4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80156a4:	68db      	ldr	r3, [r3, #12]
 80156a6:	b29b      	uxth	r3, r3
 80156a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80156ac:	b29b      	uxth	r3, r3
 80156ae:	3301      	adds	r3, #1
 80156b0:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 80156b2:	89fa      	ldrh	r2, [r7, #14]
 80156b4:	89bb      	ldrh	r3, [r7, #12]
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d201      	bcs.n	80156be <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 80156ba:	2300      	movs	r3, #0
 80156bc:	e003      	b.n	80156c6 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 80156be:	89fa      	ldrh	r2, [r7, #14]
 80156c0:	89bb      	ldrh	r3, [r7, #12]
 80156c2:	1ad3      	subs	r3, r2, r3
 80156c4:	b29b      	uxth	r3, r3
    }
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3714      	adds	r7, #20
 80156ca:	46bd      	mov	sp, r7
 80156cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d0:	4770      	bx	lr
 80156d2:	bf00      	nop
 80156d4:	40016800 	.word	0x40016800

080156d8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80156e0:	4b1a      	ldr	r3, [pc, #104]	; (801574c <HAL_LTDC_LineEventCallback+0x74>)
 80156e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156e4:	4a1a      	ldr	r2, [pc, #104]	; (8015750 <HAL_LTDC_LineEventCallback+0x78>)
 80156e6:	8812      	ldrh	r2, [r2, #0]
 80156e8:	4293      	cmp	r3, r2
 80156ea:	bf0c      	ite	eq
 80156ec:	2301      	moveq	r3, #1
 80156ee:	2300      	movne	r3, #0
 80156f0:	b2db      	uxtb	r3, r3
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d017      	beq.n	8015726 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80156f6:	4b17      	ldr	r3, [pc, #92]	; (8015754 <HAL_LTDC_LineEventCallback+0x7c>)
 80156f8:	881b      	ldrh	r3, [r3, #0]
 80156fa:	4619      	mov	r1, r3
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f7ef fd37 	bl	8005170 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8015702:	f7f7 f809 	bl	800c718 <_ZN8touchgfx3HAL11getInstanceEv>
 8015706:	4603      	mov	r3, r0
 8015708:	4618      	mov	r0, r3
 801570a:	f7ff fe32 	bl	8015372 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801570e:	f7fe fd03 	bl	8014118 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8015712:	f7f7 f801 	bl	800c718 <_ZN8touchgfx3HAL11getInstanceEv>
 8015716:	4603      	mov	r3, r0
 8015718:	4618      	mov	r0, r3
 801571a:	f001 f803 	bl	8016724 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801571e:	2000      	movs	r0, #0
 8015720:	f7fe f9f6 	bl	8013b10 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8015724:	e00e      	b.n	8015744 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8015726:	4b0a      	ldr	r3, [pc, #40]	; (8015750 <HAL_LTDC_LineEventCallback+0x78>)
 8015728:	881b      	ldrh	r3, [r3, #0]
 801572a:	4619      	mov	r1, r3
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f7ef fd1f 	bl	8005170 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8015732:	2000      	movs	r0, #0
 8015734:	f7fe f9f7 	bl	8013b26 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8015738:	f7f6 ffee 	bl	800c718 <_ZN8touchgfx3HAL11getInstanceEv>
 801573c:	4603      	mov	r3, r0
 801573e:	4618      	mov	r0, r3
 8015740:	f7ff fdf9 	bl	8015336 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8015744:	bf00      	nop
 8015746:	3708      	adds	r7, #8
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}
 801574c:	40016800 	.word	0x40016800
 8015750:	2000b35c 	.word	0x2000b35c
 8015754:	2000b35e 	.word	0x2000b35e

08015758 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015758:	8880      	ldrh	r0, [r0, #4]
 801575a:	4770      	bx	lr

0801575c <_ZN8touchgfx17AbstractPartition5clearEv>:
 801575c:	2300      	movs	r3, #0
 801575e:	8083      	strh	r3, [r0, #4]
 8015760:	4770      	bx	lr
	...

08015764 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015766:	6803      	ldr	r3, [r0, #0]
 8015768:	460e      	mov	r6, r1
 801576a:	2100      	movs	r1, #0
 801576c:	4605      	mov	r5, r0
 801576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015770:	4798      	blx	r3
 8015772:	4604      	mov	r4, r0
 8015774:	682b      	ldr	r3, [r5, #0]
 8015776:	4628      	mov	r0, r5
 8015778:	1b34      	subs	r4, r6, r4
 801577a:	6a1b      	ldr	r3, [r3, #32]
 801577c:	b2a4      	uxth	r4, r4
 801577e:	4798      	blx	r3
 8015780:	88ab      	ldrh	r3, [r5, #4]
 8015782:	fbb4 f4f0 	udiv	r4, r4, r0
 8015786:	42a3      	cmp	r3, r4
 8015788:	d805      	bhi.n	8015796 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801578a:	4b0e      	ldr	r3, [pc, #56]	; (80157c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 801578c:	2120      	movs	r1, #32
 801578e:	4a0e      	ldr	r2, [pc, #56]	; (80157c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015790:	480e      	ldr	r0, [pc, #56]	; (80157cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8015792:	f00f ffa5 	bl	80256e0 <__assert_func>
 8015796:	682b      	ldr	r3, [r5, #0]
 8015798:	2100      	movs	r1, #0
 801579a:	4628      	mov	r0, r5
 801579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801579e:	4798      	blx	r3
 80157a0:	682b      	ldr	r3, [r5, #0]
 80157a2:	4607      	mov	r7, r0
 80157a4:	4628      	mov	r0, r5
 80157a6:	6a1b      	ldr	r3, [r3, #32]
 80157a8:	4798      	blx	r3
 80157aa:	1bf3      	subs	r3, r6, r7
 80157ac:	b29b      	uxth	r3, r3
 80157ae:	fbb3 f2f0 	udiv	r2, r3, r0
 80157b2:	fb02 3010 	mls	r0, r2, r0, r3
 80157b6:	b118      	cbz	r0, 80157c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80157b8:	4b05      	ldr	r3, [pc, #20]	; (80157d0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80157ba:	2121      	movs	r1, #33	; 0x21
 80157bc:	4a02      	ldr	r2, [pc, #8]	; (80157c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80157be:	e7e7      	b.n	8015790 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80157c0:	4620      	mov	r0, r4
 80157c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157c4:	08028cfc 	.word	0x08028cfc
 80157c8:	08028e6a 	.word	0x08028e6a
 80157cc:	08028d11 	.word	0x08028d11
 80157d0:	08028d3f 	.word	0x08028d3f

080157d4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80157d4:	b538      	push	{r3, r4, r5, lr}
 80157d6:	6803      	ldr	r3, [r0, #0]
 80157d8:	460d      	mov	r5, r1
 80157da:	4604      	mov	r4, r0
 80157dc:	6a1b      	ldr	r3, [r3, #32]
 80157de:	4798      	blx	r3
 80157e0:	4285      	cmp	r5, r0
 80157e2:	d905      	bls.n	80157f0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80157e4:	4b0c      	ldr	r3, [pc, #48]	; (8015818 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80157e6:	2132      	movs	r1, #50	; 0x32
 80157e8:	4a0c      	ldr	r2, [pc, #48]	; (801581c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80157ea:	480d      	ldr	r0, [pc, #52]	; (8015820 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80157ec:	f00f ff78 	bl	80256e0 <__assert_func>
 80157f0:	6823      	ldr	r3, [r4, #0]
 80157f2:	4620      	mov	r0, r4
 80157f4:	88a5      	ldrh	r5, [r4, #4]
 80157f6:	69db      	ldr	r3, [r3, #28]
 80157f8:	4798      	blx	r3
 80157fa:	4285      	cmp	r5, r0
 80157fc:	d303      	bcc.n	8015806 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80157fe:	4b09      	ldr	r3, [pc, #36]	; (8015824 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8015800:	2133      	movs	r1, #51	; 0x33
 8015802:	4a06      	ldr	r2, [pc, #24]	; (801581c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015804:	e7f1      	b.n	80157ea <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8015806:	6823      	ldr	r3, [r4, #0]
 8015808:	4620      	mov	r0, r4
 801580a:	88a1      	ldrh	r1, [r4, #4]
 801580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801580e:	4798      	blx	r3
 8015810:	88a3      	ldrh	r3, [r4, #4]
 8015812:	3301      	adds	r3, #1
 8015814:	80a3      	strh	r3, [r4, #4]
 8015816:	bd38      	pop	{r3, r4, r5, pc}
 8015818:	08028db9 	.word	0x08028db9
 801581c:	08028ead 	.word	0x08028ead
 8015820:	08028d11 	.word	0x08028d11
 8015824:	08028dd0 	.word	0x08028dd0

08015828 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015828:	b570      	push	{r4, r5, r6, lr}
 801582a:	6803      	ldr	r3, [r0, #0]
 801582c:	4616      	mov	r6, r2
 801582e:	4604      	mov	r4, r0
 8015830:	460d      	mov	r5, r1
 8015832:	6a1b      	ldr	r3, [r3, #32]
 8015834:	4798      	blx	r3
 8015836:	4286      	cmp	r6, r0
 8015838:	d905      	bls.n	8015846 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801583a:	4b06      	ldr	r3, [pc, #24]	; (8015854 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801583c:	213c      	movs	r1, #60	; 0x3c
 801583e:	4a06      	ldr	r2, [pc, #24]	; (8015858 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8015840:	4806      	ldr	r0, [pc, #24]	; (801585c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8015842:	f00f ff4d 	bl	80256e0 <__assert_func>
 8015846:	6823      	ldr	r3, [r4, #0]
 8015848:	4629      	mov	r1, r5
 801584a:	4620      	mov	r0, r4
 801584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801584e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015852:	4718      	bx	r3
 8015854:	08028db9 	.word	0x08028db9
 8015858:	08028e20 	.word	0x08028e20
 801585c:	08028d11 	.word	0x08028d11

08015860 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015860:	4770      	bx	lr
	...

08015864 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015864:	4a02      	ldr	r2, [pc, #8]	; (8015870 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8015866:	6002      	str	r2, [r0, #0]
 8015868:	2200      	movs	r2, #0
 801586a:	8082      	strh	r2, [r0, #4]
 801586c:	4770      	bx	lr
 801586e:	bf00      	nop
 8015870:	08028df4 	.word	0x08028df4

08015874 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015874:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015876:	2000      	movs	r0, #0
 8015878:	b12b      	cbz	r3, 8015886 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801587a:	b920      	cbnz	r0, 8015886 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801587c:	1a5a      	subs	r2, r3, r1
 801587e:	699b      	ldr	r3, [r3, #24]
 8015880:	4250      	negs	r0, r2
 8015882:	4150      	adcs	r0, r2
 8015884:	e7f8      	b.n	8015878 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015886:	4770      	bx	lr

08015888 <_ZN8touchgfx9Container9removeAllEv>:
 8015888:	2200      	movs	r2, #0
 801588a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801588c:	b123      	cbz	r3, 8015898 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801588e:	6999      	ldr	r1, [r3, #24]
 8015890:	6281      	str	r1, [r0, #40]	; 0x28
 8015892:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015896:	e7f8      	b.n	801588a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015898:	4770      	bx	lr

0801589a <_ZN8touchgfx9Container6unlinkEv>:
 801589a:	2300      	movs	r3, #0
 801589c:	6283      	str	r3, [r0, #40]	; 0x28
 801589e:	4770      	bx	lr

080158a0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80158a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158a4:	461f      	mov	r7, r3
 80158a6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80158aa:	460d      	mov	r5, r1
 80158ac:	4616      	mov	r6, r2
 80158ae:	b103      	cbz	r3, 80158b2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80158b0:	6038      	str	r0, [r7, #0]
 80158b2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80158b4:	b314      	cbz	r4, 80158fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80158b6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80158ba:	b1eb      	cbz	r3, 80158f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80158bc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80158c0:	428d      	cmp	r5, r1
 80158c2:	db19      	blt.n	80158f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80158c4:	b289      	uxth	r1, r1
 80158c6:	8923      	ldrh	r3, [r4, #8]
 80158c8:	440b      	add	r3, r1
 80158ca:	b21b      	sxth	r3, r3
 80158cc:	429d      	cmp	r5, r3
 80158ce:	da13      	bge.n	80158f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80158d0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80158d4:	4296      	cmp	r6, r2
 80158d6:	db0f      	blt.n	80158f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80158d8:	b292      	uxth	r2, r2
 80158da:	8963      	ldrh	r3, [r4, #10]
 80158dc:	4413      	add	r3, r2
 80158de:	b21b      	sxth	r3, r3
 80158e0:	429e      	cmp	r6, r3
 80158e2:	da09      	bge.n	80158f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80158e4:	6823      	ldr	r3, [r4, #0]
 80158e6:	1ab2      	subs	r2, r6, r2
 80158e8:	1a69      	subs	r1, r5, r1
 80158ea:	4620      	mov	r0, r4
 80158ec:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80158f0:	b212      	sxth	r2, r2
 80158f2:	463b      	mov	r3, r7
 80158f4:	b209      	sxth	r1, r1
 80158f6:	47c0      	blx	r8
 80158f8:	69a4      	ldr	r4, [r4, #24]
 80158fa:	e7db      	b.n	80158b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80158fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015900 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015900:	2200      	movs	r2, #0
 8015902:	8002      	strh	r2, [r0, #0]
 8015904:	8042      	strh	r2, [r0, #2]
 8015906:	8082      	strh	r2, [r0, #4]
 8015908:	80c2      	strh	r2, [r0, #6]
 801590a:	4770      	bx	lr

0801590c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801590c:	b570      	push	{r4, r5, r6, lr}
 801590e:	460d      	mov	r5, r1
 8015910:	4616      	mov	r6, r2
 8015912:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015914:	b13c      	cbz	r4, 8015926 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015916:	6823      	ldr	r3, [r4, #0]
 8015918:	4620      	mov	r0, r4
 801591a:	4632      	mov	r2, r6
 801591c:	4629      	mov	r1, r5
 801591e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015920:	4798      	blx	r3
 8015922:	69a4      	ldr	r4, [r4, #24]
 8015924:	e7f6      	b.n	8015914 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015926:	bd70      	pop	{r4, r5, r6, pc}

08015928 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015928:	b538      	push	{r3, r4, r5, lr}
 801592a:	460d      	mov	r5, r1
 801592c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801592e:	b134      	cbz	r4, 801593e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015930:	682b      	ldr	r3, [r5, #0]
 8015932:	4621      	mov	r1, r4
 8015934:	4628      	mov	r0, r5
 8015936:	689b      	ldr	r3, [r3, #8]
 8015938:	4798      	blx	r3
 801593a:	69a4      	ldr	r4, [r4, #24]
 801593c:	e7f7      	b.n	801592e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801593e:	bd38      	pop	{r3, r4, r5, pc}

08015940 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015940:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015942:	b19b      	cbz	r3, 801596c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015944:	428b      	cmp	r3, r1
 8015946:	d109      	bne.n	801595c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015948:	699a      	ldr	r2, [r3, #24]
 801594a:	2100      	movs	r1, #0
 801594c:	6159      	str	r1, [r3, #20]
 801594e:	6282      	str	r2, [r0, #40]	; 0x28
 8015950:	b902      	cbnz	r2, 8015954 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015952:	4770      	bx	lr
 8015954:	6199      	str	r1, [r3, #24]
 8015956:	4770      	bx	lr
 8015958:	4613      	mov	r3, r2
 801595a:	b13a      	cbz	r2, 801596c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801595c:	699a      	ldr	r2, [r3, #24]
 801595e:	428a      	cmp	r2, r1
 8015960:	d1fa      	bne.n	8015958 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015962:	698a      	ldr	r2, [r1, #24]
 8015964:	619a      	str	r2, [r3, #24]
 8015966:	2300      	movs	r3, #0
 8015968:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801596c:	4770      	bx	lr

0801596e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801596e:	b410      	push	{r4}
 8015970:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015972:	4604      	mov	r4, r0
 8015974:	b92b      	cbnz	r3, 8015982 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015976:	6803      	ldr	r3, [r0, #0]
 8015978:	4611      	mov	r1, r2
 801597a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801597e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015980:	4718      	bx	r3
 8015982:	b941      	cbnz	r1, 8015996 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015984:	6193      	str	r3, [r2, #24]
 8015986:	6282      	str	r2, [r0, #40]	; 0x28
 8015988:	6154      	str	r4, [r2, #20]
 801598a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801598e:	4770      	bx	lr
 8015990:	4603      	mov	r3, r0
 8015992:	2800      	cmp	r0, #0
 8015994:	d0f9      	beq.n	801598a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015996:	4299      	cmp	r1, r3
 8015998:	6998      	ldr	r0, [r3, #24]
 801599a:	d1f9      	bne.n	8015990 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801599c:	6190      	str	r0, [r2, #24]
 801599e:	618a      	str	r2, [r1, #24]
 80159a0:	e7f2      	b.n	8015988 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080159a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80159a4:	4288      	cmp	r0, r1
 80159a6:	b508      	push	{r3, lr}
 80159a8:	d105      	bne.n	80159b6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80159aa:	4b11      	ldr	r3, [pc, #68]	; (80159f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80159ac:	2123      	movs	r1, #35	; 0x23
 80159ae:	4a11      	ldr	r2, [pc, #68]	; (80159f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80159b0:	4811      	ldr	r0, [pc, #68]	; (80159f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80159b2:	f00f fe95 	bl	80256e0 <__assert_func>
 80159b6:	694b      	ldr	r3, [r1, #20]
 80159b8:	b11b      	cbz	r3, 80159c2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80159ba:	4b10      	ldr	r3, [pc, #64]	; (80159fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80159bc:	2124      	movs	r1, #36	; 0x24
 80159be:	4a0d      	ldr	r2, [pc, #52]	; (80159f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80159c0:	e7f6      	b.n	80159b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80159c2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80159c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80159c8:	b913      	cbnz	r3, 80159d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80159ca:	6281      	str	r1, [r0, #40]	; 0x28
 80159cc:	bd08      	pop	{r3, pc}
 80159ce:	4613      	mov	r3, r2
 80159d0:	699a      	ldr	r2, [r3, #24]
 80159d2:	b12a      	cbz	r2, 80159e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80159d4:	428b      	cmp	r3, r1
 80159d6:	d1fa      	bne.n	80159ce <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80159d8:	4b09      	ldr	r3, [pc, #36]	; (8015a00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80159da:	2135      	movs	r1, #53	; 0x35
 80159dc:	4a05      	ldr	r2, [pc, #20]	; (80159f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80159de:	e7e7      	b.n	80159b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80159e0:	428b      	cmp	r3, r1
 80159e2:	d103      	bne.n	80159ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80159e4:	4b06      	ldr	r3, [pc, #24]	; (8015a00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80159e6:	2138      	movs	r1, #56	; 0x38
 80159e8:	4a02      	ldr	r2, [pc, #8]	; (80159f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80159ea:	e7e1      	b.n	80159b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80159ec:	6199      	str	r1, [r3, #24]
 80159ee:	e7ed      	b.n	80159cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80159f0:	08028eeb 	.word	0x08028eeb
 80159f4:	08029040 	.word	0x08029040
 80159f8:	08028f17 	.word	0x08028f17
 80159fc:	08028f4a 	.word	0x08028f4a
 8015a00:	08028f80 	.word	0x08028f80

08015a04 <_ZN8touchgfx4RectaNERKS0_>:
 8015a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a08:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015a0c:	888c      	ldrh	r4, [r1, #4]
 8015a0e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015a12:	443c      	add	r4, r7
 8015a14:	b2a4      	uxth	r4, r4
 8015a16:	fa0f f884 	sxth.w	r8, r4
 8015a1a:	45c1      	cmp	r9, r8
 8015a1c:	da2f      	bge.n	8015a7e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015a1e:	8882      	ldrh	r2, [r0, #4]
 8015a20:	444a      	add	r2, r9
 8015a22:	b292      	uxth	r2, r2
 8015a24:	fa0f fe82 	sxth.w	lr, r2
 8015a28:	4577      	cmp	r7, lr
 8015a2a:	da28      	bge.n	8015a7e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015a2c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015a30:	88cb      	ldrh	r3, [r1, #6]
 8015a32:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015a36:	442b      	add	r3, r5
 8015a38:	b21b      	sxth	r3, r3
 8015a3a:	429e      	cmp	r6, r3
 8015a3c:	da1f      	bge.n	8015a7e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015a3e:	88c3      	ldrh	r3, [r0, #6]
 8015a40:	4433      	add	r3, r6
 8015a42:	b29b      	uxth	r3, r3
 8015a44:	fa0f fc83 	sxth.w	ip, r3
 8015a48:	4565      	cmp	r5, ip
 8015a4a:	da18      	bge.n	8015a7e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015a4c:	454f      	cmp	r7, r9
 8015a4e:	bfb8      	it	lt
 8015a50:	464f      	movlt	r7, r9
 8015a52:	42b5      	cmp	r5, r6
 8015a54:	bfb8      	it	lt
 8015a56:	4635      	movlt	r5, r6
 8015a58:	45f0      	cmp	r8, lr
 8015a5a:	bfd8      	it	le
 8015a5c:	4622      	movle	r2, r4
 8015a5e:	1bd2      	subs	r2, r2, r7
 8015a60:	8082      	strh	r2, [r0, #4]
 8015a62:	884a      	ldrh	r2, [r1, #2]
 8015a64:	88c9      	ldrh	r1, [r1, #6]
 8015a66:	8007      	strh	r7, [r0, #0]
 8015a68:	440a      	add	r2, r1
 8015a6a:	8045      	strh	r5, [r0, #2]
 8015a6c:	b292      	uxth	r2, r2
 8015a6e:	b211      	sxth	r1, r2
 8015a70:	458c      	cmp	ip, r1
 8015a72:	bfa8      	it	ge
 8015a74:	4613      	movge	r3, r2
 8015a76:	1b5b      	subs	r3, r3, r5
 8015a78:	80c3      	strh	r3, [r0, #6]
 8015a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a7e:	2300      	movs	r3, #0
 8015a80:	8003      	strh	r3, [r0, #0]
 8015a82:	8043      	strh	r3, [r0, #2]
 8015a84:	8083      	strh	r3, [r0, #4]
 8015a86:	80c3      	strh	r3, [r0, #6]
 8015a88:	e7f7      	b.n	8015a7a <_ZN8touchgfx4RectaNERKS0_+0x76>

08015a8a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015a8a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	dd06      	ble.n	8015aa0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015a92:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015a96:	2800      	cmp	r0, #0
 8015a98:	bfcc      	ite	gt
 8015a9a:	2000      	movgt	r0, #0
 8015a9c:	2001      	movle	r0, #1
 8015a9e:	4770      	bx	lr
 8015aa0:	2001      	movs	r0, #1
 8015aa2:	4770      	bx	lr

08015aa4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	4604      	mov	r4, r0
 8015aac:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015aae:	8003      	strh	r3, [r0, #0]
 8015ab0:	8043      	strh	r3, [r0, #2]
 8015ab2:	8083      	strh	r3, [r0, #4]
 8015ab4:	80c3      	strh	r3, [r0, #6]
 8015ab6:	2d00      	cmp	r5, #0
 8015ab8:	d040      	beq.n	8015b3c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015aba:	1d28      	adds	r0, r5, #4
 8015abc:	f7ff ffe5 	bl	8015a8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ac0:	b988      	cbnz	r0, 8015ae6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015ac2:	4620      	mov	r0, r4
 8015ac4:	f7ff ffe1 	bl	8015a8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ac8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015acc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015ad0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015ad4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015ad8:	b138      	cbz	r0, 8015aea <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015ada:	8022      	strh	r2, [r4, #0]
 8015adc:	8063      	strh	r3, [r4, #2]
 8015ade:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015ae2:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015ae6:	69ad      	ldr	r5, [r5, #24]
 8015ae8:	e7e5      	b.n	8015ab6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015aea:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015aee:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015af2:	4290      	cmp	r0, r2
 8015af4:	4607      	mov	r7, r0
 8015af6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015afa:	460e      	mov	r6, r1
 8015afc:	bfa8      	it	ge
 8015afe:	4617      	movge	r7, r2
 8015b00:	4299      	cmp	r1, r3
 8015b02:	4472      	add	r2, lr
 8015b04:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015b08:	bfa8      	it	ge
 8015b0a:	461e      	movge	r6, r3
 8015b0c:	4440      	add	r0, r8
 8015b0e:	4471      	add	r1, lr
 8015b10:	4463      	add	r3, ip
 8015b12:	b200      	sxth	r0, r0
 8015b14:	8027      	strh	r7, [r4, #0]
 8015b16:	b212      	sxth	r2, r2
 8015b18:	8066      	strh	r6, [r4, #2]
 8015b1a:	b209      	sxth	r1, r1
 8015b1c:	b21b      	sxth	r3, r3
 8015b1e:	4290      	cmp	r0, r2
 8015b20:	bfac      	ite	ge
 8015b22:	ebc7 0200 	rsbge	r2, r7, r0
 8015b26:	ebc7 0202 	rsblt	r2, r7, r2
 8015b2a:	4299      	cmp	r1, r3
 8015b2c:	bfac      	ite	ge
 8015b2e:	ebc6 0301 	rsbge	r3, r6, r1
 8015b32:	ebc6 0303 	rsblt	r3, r6, r3
 8015b36:	80a2      	strh	r2, [r4, #4]
 8015b38:	80e3      	strh	r3, [r4, #6]
 8015b3a:	e7d4      	b.n	8015ae6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b42 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015b42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015b46:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015b4a:	b383      	cbz	r3, 8015bae <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015b4c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015b4e:	b374      	cbz	r4, 8015bae <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015b50:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015b54:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015b58:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015b5c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015b60:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015b64:	b303      	cbz	r3, 8015ba8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015b66:	4668      	mov	r0, sp
 8015b68:	1d21      	adds	r1, r4, #4
 8015b6a:	f8ad 5000 	strh.w	r5, [sp]
 8015b6e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015b72:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015b76:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015b7a:	f7ff ff43 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 8015b7e:	4668      	mov	r0, sp
 8015b80:	f7ff ff83 	bl	8015a8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015b84:	b980      	cbnz	r0, 8015ba8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015b86:	f8bd 3000 	ldrh.w	r3, [sp]
 8015b8a:	4669      	mov	r1, sp
 8015b8c:	88a2      	ldrh	r2, [r4, #4]
 8015b8e:	4620      	mov	r0, r4
 8015b90:	1a9b      	subs	r3, r3, r2
 8015b92:	88e2      	ldrh	r2, [r4, #6]
 8015b94:	f8ad 3000 	strh.w	r3, [sp]
 8015b98:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015b9c:	1a9b      	subs	r3, r3, r2
 8015b9e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015ba2:	6823      	ldr	r3, [r4, #0]
 8015ba4:	689b      	ldr	r3, [r3, #8]
 8015ba6:	4798      	blx	r3
 8015ba8:	69a4      	ldr	r4, [r4, #24]
 8015baa:	2c00      	cmp	r4, #0
 8015bac:	d1d8      	bne.n	8015b60 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015bae:	b002      	add	sp, #8
 8015bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015bb4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015bb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015bb6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015bba:	460d      	mov	r5, r1
 8015bbc:	4616      	mov	r6, r2
 8015bbe:	b323      	cbz	r3, 8015c0a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015bc0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015bc2:	b314      	cbz	r4, 8015c0a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015bc4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015bc8:	b1eb      	cbz	r3, 8015c06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015bca:	6828      	ldr	r0, [r5, #0]
 8015bcc:	466b      	mov	r3, sp
 8015bce:	6869      	ldr	r1, [r5, #4]
 8015bd0:	c303      	stmia	r3!, {r0, r1}
 8015bd2:	4668      	mov	r0, sp
 8015bd4:	1d21      	adds	r1, r4, #4
 8015bd6:	f7ff ff15 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 8015bda:	4668      	mov	r0, sp
 8015bdc:	f7ff ff55 	bl	8015a8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015be0:	b988      	cbnz	r0, 8015c06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015be2:	f8bd 3000 	ldrh.w	r3, [sp]
 8015be6:	4669      	mov	r1, sp
 8015be8:	88a2      	ldrh	r2, [r4, #4]
 8015bea:	4620      	mov	r0, r4
 8015bec:	1a9b      	subs	r3, r3, r2
 8015bee:	88e2      	ldrh	r2, [r4, #6]
 8015bf0:	f8ad 3000 	strh.w	r3, [sp]
 8015bf4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015bf8:	1a9b      	subs	r3, r3, r2
 8015bfa:	4632      	mov	r2, r6
 8015bfc:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015c00:	6823      	ldr	r3, [r4, #0]
 8015c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c04:	4798      	blx	r3
 8015c06:	69a4      	ldr	r4, [r4, #24]
 8015c08:	e7db      	b.n	8015bc2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015c0a:	b002      	add	sp, #8
 8015c0c:	bd70      	pop	{r4, r5, r6, pc}

08015c0e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015c0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015c12:	4770      	bx	lr

08015c14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015c14:	6803      	ldr	r3, [r0, #0]
 8015c16:	b513      	push	{r0, r1, r4, lr}
 8015c18:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	e9cd 3300 	strd	r3, r3, [sp]
 8015c22:	466b      	mov	r3, sp
 8015c24:	47a0      	blx	r4
 8015c26:	b002      	add	sp, #8
 8015c28:	bd10      	pop	{r4, pc}

08015c2a <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015c2a:	2301      	movs	r3, #1
 8015c2c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015c30:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015c34:	4770      	bx	lr

08015c36 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015c36:	2301      	movs	r3, #1
 8015c38:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015c3c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015c40:	4770      	bx	lr

08015c42 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015c42:	6843      	ldr	r3, [r0, #4]
 8015c44:	2201      	movs	r2, #1
 8015c46:	725a      	strb	r2, [r3, #9]
 8015c48:	6840      	ldr	r0, [r0, #4]
 8015c4a:	6803      	ldr	r3, [r0, #0]
 8015c4c:	691b      	ldr	r3, [r3, #16]
 8015c4e:	4718      	bx	r3

08015c50 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015c50:	6840      	ldr	r0, [r0, #4]
 8015c52:	6803      	ldr	r3, [r0, #0]
 8015c54:	689b      	ldr	r3, [r3, #8]
 8015c56:	4718      	bx	r3

08015c58 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015c58:	4b04      	ldr	r3, [pc, #16]	; (8015c6c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	b123      	cbz	r3, 8015c68 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015c5e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015c62:	f080 0001 	eor.w	r0, r0, #1
 8015c66:	4770      	bx	lr
 8015c68:	2001      	movs	r0, #1
 8015c6a:	4770      	bx	lr
 8015c6c:	2000b36a 	.word	0x2000b36a

08015c70 <_ZN8touchgfx3HAL8endFrameEv>:
 8015c70:	b510      	push	{r4, lr}
 8015c72:	4604      	mov	r4, r0
 8015c74:	6840      	ldr	r0, [r0, #4]
 8015c76:	6803      	ldr	r3, [r0, #0]
 8015c78:	689b      	ldr	r3, [r3, #8]
 8015c7a:	4798      	blx	r3
 8015c7c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015c80:	b113      	cbz	r3, 8015c88 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015c82:	2301      	movs	r3, #1
 8015c84:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015c88:	bd10      	pop	{r4, pc}

08015c8a <_ZN8touchgfx3HAL9taskEntryEv>:
 8015c8a:	b508      	push	{r3, lr}
 8015c8c:	6803      	ldr	r3, [r0, #0]
 8015c8e:	4604      	mov	r4, r0
 8015c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c92:	4798      	blx	r3
 8015c94:	6823      	ldr	r3, [r4, #0]
 8015c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015c98:	4620      	mov	r0, r4
 8015c9a:	4798      	blx	r3
 8015c9c:	f7fe fa48 	bl	8014130 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015ca0:	6823      	ldr	r3, [r4, #0]
 8015ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ca4:	e7f8      	b.n	8015c98 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015ca8 <_ZN8touchgfx3HAL4tickEv>:
 8015ca8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015caa:	6803      	ldr	r3, [r0, #0]
 8015cac:	4604      	mov	r4, r0
 8015cae:	4d5c      	ldr	r5, [pc, #368]	; (8015e20 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015cb4:	4798      	blx	r3
 8015cb6:	2800      	cmp	r0, #0
 8015cb8:	f000 8097 	beq.w	8015dea <_ZN8touchgfx3HAL4tickEv+0x142>
 8015cbc:	2001      	movs	r0, #1
 8015cbe:	2600      	movs	r6, #0
 8015cc0:	f7fd ff26 	bl	8013b10 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015cc4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015cc8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015ccc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015cd0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015cd4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015cd8:	b133      	cbz	r3, 8015ce8 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015cda:	6823      	ldr	r3, [r4, #0]
 8015cdc:	4620      	mov	r0, r4
 8015cde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015ce2:	4798      	blx	r3
 8015ce4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015ce8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015cec:	2601      	movs	r6, #1
 8015cee:	6862      	ldr	r2, [r4, #4]
 8015cf0:	f083 0301 	eor.w	r3, r3, #1
 8015cf4:	702e      	strb	r6, [r5, #0]
 8015cf6:	7253      	strb	r3, [r2, #9]
 8015cf8:	f003 fb72 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 8015cfc:	6803      	ldr	r3, [r0, #0]
 8015cfe:	4631      	mov	r1, r6
 8015d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d02:	4798      	blx	r3
 8015d04:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015d08:	b90b      	cbnz	r3, 8015d0e <_ZN8touchgfx3HAL4tickEv+0x66>
 8015d0a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015d0e:	f003 fb67 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 8015d12:	6803      	ldr	r3, [r0, #0]
 8015d14:	695b      	ldr	r3, [r3, #20]
 8015d16:	4798      	blx	r3
 8015d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d1a:	6803      	ldr	r3, [r0, #0]
 8015d1c:	691b      	ldr	r3, [r3, #16]
 8015d1e:	4798      	blx	r3
 8015d20:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015d24:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015d28:	3b01      	subs	r3, #1
 8015d2a:	b2db      	uxtb	r3, r3
 8015d2c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015d30:	b10a      	cbz	r2, 8015d36 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d1eb      	bne.n	8015d0e <_ZN8touchgfx3HAL4tickEv+0x66>
 8015d36:	4a3b      	ldr	r2, [pc, #236]	; (8015e24 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015d38:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015d3c:	7813      	ldrb	r3, [r2, #0]
 8015d3e:	3301      	adds	r3, #1
 8015d40:	b25b      	sxtb	r3, r3
 8015d42:	4299      	cmp	r1, r3
 8015d44:	7013      	strb	r3, [r2, #0]
 8015d46:	dc10      	bgt.n	8015d6a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015d48:	2300      	movs	r3, #0
 8015d4a:	68e0      	ldr	r0, [r4, #12]
 8015d4c:	a902      	add	r1, sp, #8
 8015d4e:	7013      	strb	r3, [r2, #0]
 8015d50:	aa03      	add	r2, sp, #12
 8015d52:	6803      	ldr	r3, [r0, #0]
 8015d54:	68db      	ldr	r3, [r3, #12]
 8015d56:	4798      	blx	r3
 8015d58:	6823      	ldr	r3, [r4, #0]
 8015d5a:	2800      	cmp	r0, #0
 8015d5c:	d051      	beq.n	8015e02 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015d5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015d62:	4620      	mov	r0, r4
 8015d64:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015d68:	4798      	blx	r3
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	6960      	ldr	r0, [r4, #20]
 8015d6e:	f88d 3007 	strb.w	r3, [sp, #7]
 8015d72:	b158      	cbz	r0, 8015d8c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015d74:	6803      	ldr	r3, [r0, #0]
 8015d76:	f10d 0107 	add.w	r1, sp, #7
 8015d7a:	68db      	ldr	r3, [r3, #12]
 8015d7c:	4798      	blx	r3
 8015d7e:	b128      	cbz	r0, 8015d8c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d82:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015d86:	6803      	ldr	r3, [r0, #0]
 8015d88:	68db      	ldr	r3, [r3, #12]
 8015d8a:	4798      	blx	r3
 8015d8c:	f104 001c 	add.w	r0, r4, #28
 8015d90:	f00d ffd0 	bl	8023d34 <_ZN8touchgfx8Gestures4tickEv>
 8015d94:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015d98:	b30b      	cbz	r3, 8015dde <_ZN8touchgfx3HAL4tickEv+0x136>
 8015d9a:	6920      	ldr	r0, [r4, #16]
 8015d9c:	6803      	ldr	r3, [r0, #0]
 8015d9e:	691b      	ldr	r3, [r3, #16]
 8015da0:	4798      	blx	r3
 8015da2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015da4:	4606      	mov	r6, r0
 8015da6:	b903      	cbnz	r3, 8015daa <_ZN8touchgfx3HAL4tickEv+0x102>
 8015da8:	6720      	str	r0, [r4, #112]	; 0x70
 8015daa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015dac:	4a1e      	ldr	r2, [pc, #120]	; (8015e28 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015dae:	1af3      	subs	r3, r6, r3
 8015db0:	4293      	cmp	r3, r2
 8015db2:	d914      	bls.n	8015dde <_ZN8touchgfx3HAL4tickEv+0x136>
 8015db4:	6920      	ldr	r0, [r4, #16]
 8015db6:	6803      	ldr	r3, [r0, #0]
 8015db8:	699b      	ldr	r3, [r3, #24]
 8015dba:	4798      	blx	r3
 8015dbc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015dbe:	2264      	movs	r2, #100	; 0x64
 8015dc0:	1af3      	subs	r3, r6, r3
 8015dc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8015dc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	dc1e      	bgt.n	8015e0c <_ZN8touchgfx3HAL4tickEv+0x164>
 8015dce:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015dd2:	6920      	ldr	r0, [r4, #16]
 8015dd4:	2100      	movs	r1, #0
 8015dd6:	6803      	ldr	r3, [r0, #0]
 8015dd8:	69db      	ldr	r3, [r3, #28]
 8015dda:	4798      	blx	r3
 8015ddc:	6726      	str	r6, [r4, #112]	; 0x70
 8015dde:	f003 faff 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 8015de2:	6803      	ldr	r3, [r0, #0]
 8015de4:	2100      	movs	r1, #0
 8015de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015de8:	4798      	blx	r3
 8015dea:	6823      	ldr	r3, [r4, #0]
 8015dec:	4620      	mov	r0, r4
 8015dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015df2:	4798      	blx	r3
 8015df4:	2001      	movs	r0, #1
 8015df6:	f7fd fe96 	bl	8013b26 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	702b      	strb	r3, [r5, #0]
 8015dfe:	b004      	add	sp, #16
 8015e00:	bd70      	pop	{r4, r5, r6, pc}
 8015e02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015e06:	4620      	mov	r0, r4
 8015e08:	4798      	blx	r3
 8015e0a:	e7ae      	b.n	8015d6a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015e0c:	2863      	cmp	r0, #99	; 0x63
 8015e0e:	bfcb      	itete	gt
 8015e10:	2300      	movgt	r3, #0
 8015e12:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015e16:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015e1a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015e1e:	e7d8      	b.n	8015dd2 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015e20:	2000b370 	.word	0x2000b370
 8015e24:	2000b371 	.word	0x2000b371
 8015e28:	05f5e100 	.word	0x05f5e100

08015e2c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015e2c:	f7fe b950 	b.w	80140d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015e30 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015e30:	6581      	str	r1, [r0, #88]	; 0x58
 8015e32:	301c      	adds	r0, #28
 8015e34:	f00d bf7c 	b.w	8023d30 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015e38 <_ZN8touchgfx3HAL5touchEll>:
 8015e38:	b530      	push	{r4, r5, lr}
 8015e3a:	b087      	sub	sp, #28
 8015e3c:	4604      	mov	r4, r0
 8015e3e:	a804      	add	r0, sp, #16
 8015e40:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015e44:	f003 f886 	bl	8018f54 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015e48:	9b04      	ldr	r3, [sp, #16]
 8015e4a:	a906      	add	r1, sp, #24
 8015e4c:	a803      	add	r0, sp, #12
 8015e4e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015e52:	9b05      	ldr	r3, [sp, #20]
 8015e54:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015e58:	f003 f8ca 	bl	8018ff0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015e5c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015e60:	f104 001c 	add.w	r0, r4, #28
 8015e64:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015e68:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015e6c:	b189      	cbz	r1, 8015e92 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015e6e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015e72:	9300      	str	r3, [sp, #0]
 8015e74:	4613      	mov	r3, r2
 8015e76:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015e7a:	462a      	mov	r2, r5
 8015e7c:	f00d ff68 	bl	8023d50 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015e80:	b128      	cbz	r0, 8015e8e <_ZN8touchgfx3HAL5touchEll+0x56>
 8015e82:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015e86:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015e88:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015e8c:	6623      	str	r3, [r4, #96]	; 0x60
 8015e8e:	b007      	add	sp, #28
 8015e90:	bd30      	pop	{r4, r5, pc}
 8015e92:	f00d ffa1 	bl	8023dd8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015e96:	2301      	movs	r3, #1
 8015e98:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015e9c:	e7f1      	b.n	8015e82 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015e9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015e9e:	b570      	push	{r4, r5, r6, lr}
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d050      	beq.n	8015f46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015ea4:	ea81 0002 	eor.w	r0, r1, r2
 8015ea8:	07c6      	lsls	r6, r0, #31
 8015eaa:	d508      	bpl.n	8015ebe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015eac:	3a01      	subs	r2, #1
 8015eae:	18cc      	adds	r4, r1, r3
 8015eb0:	42a1      	cmp	r1, r4
 8015eb2:	d048      	beq.n	8015f46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015eb4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015eb8:	f801 0b01 	strb.w	r0, [r1], #1
 8015ebc:	e7f8      	b.n	8015eb0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015ebe:	07d5      	lsls	r5, r2, #31
 8015ec0:	bf42      	ittt	mi
 8015ec2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015ec6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015eca:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015ece:	2b01      	cmp	r3, #1
 8015ed0:	d915      	bls.n	8015efe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015ed2:	ea82 0001 	eor.w	r0, r2, r1
 8015ed6:	0784      	lsls	r4, r0, #30
 8015ed8:	d02d      	beq.n	8015f36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015eda:	1e94      	subs	r4, r2, #2
 8015edc:	4608      	mov	r0, r1
 8015ede:	18ce      	adds	r6, r1, r3
 8015ee0:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015ee4:	f820 5b02 	strh.w	r5, [r0], #2
 8015ee8:	1a35      	subs	r5, r6, r0
 8015eea:	2d01      	cmp	r5, #1
 8015eec:	d8f8      	bhi.n	8015ee0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015eee:	1e98      	subs	r0, r3, #2
 8015ef0:	f003 0301 	and.w	r3, r3, #1
 8015ef4:	f020 0001 	bic.w	r0, r0, #1
 8015ef8:	3002      	adds	r0, #2
 8015efa:	4401      	add	r1, r0
 8015efc:	4402      	add	r2, r0
 8015efe:	1f14      	subs	r4, r2, #4
 8015f00:	4608      	mov	r0, r1
 8015f02:	18ce      	adds	r6, r1, r3
 8015f04:	1a35      	subs	r5, r6, r0
 8015f06:	2d03      	cmp	r5, #3
 8015f08:	d810      	bhi.n	8015f2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8015f0a:	089c      	lsrs	r4, r3, #2
 8015f0c:	00a0      	lsls	r0, r4, #2
 8015f0e:	4401      	add	r1, r0
 8015f10:	3801      	subs	r0, #1
 8015f12:	4402      	add	r2, r0
 8015f14:	f06f 0003 	mvn.w	r0, #3
 8015f18:	fb00 3404 	mla	r4, r0, r4, r3
 8015f1c:	440c      	add	r4, r1
 8015f1e:	42a1      	cmp	r1, r4
 8015f20:	d011      	beq.n	8015f46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015f22:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015f26:	f801 3b01 	strb.w	r3, [r1], #1
 8015f2a:	e7f8      	b.n	8015f1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015f2c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015f30:	f840 5b04 	str.w	r5, [r0], #4
 8015f34:	e7e6      	b.n	8015f04 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8015f36:	0790      	lsls	r0, r2, #30
 8015f38:	d0e1      	beq.n	8015efe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015f3a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015f3e:	3b02      	subs	r3, #2
 8015f40:	f821 0b02 	strh.w	r0, [r1], #2
 8015f44:	e7db      	b.n	8015efe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015f46:	2001      	movs	r0, #1
 8015f48:	bd70      	pop	{r4, r5, r6, pc}

08015f4a <_ZN8touchgfx3HAL7noTouchEv>:
 8015f4a:	b510      	push	{r4, lr}
 8015f4c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015f50:	4604      	mov	r4, r0
 8015f52:	b153      	cbz	r3, 8015f6a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015f54:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015f58:	2101      	movs	r1, #1
 8015f5a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015f5e:	301c      	adds	r0, #28
 8015f60:	f00d ff3a 	bl	8023dd8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015f64:	2300      	movs	r3, #0
 8015f66:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015f6a:	bd10      	pop	{r4, pc}

08015f6c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f70:	4605      	mov	r5, r0
 8015f72:	6980      	ldr	r0, [r0, #24]
 8015f74:	b085      	sub	sp, #20
 8015f76:	460f      	mov	r7, r1
 8015f78:	4690      	mov	r8, r2
 8015f7a:	4699      	mov	r9, r3
 8015f7c:	b930      	cbnz	r0, 8015f8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015f7e:	4b1f      	ldr	r3, [pc, #124]	; (8015ffc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015f80:	f44f 7198 	mov.w	r1, #304	; 0x130
 8015f84:	4a1e      	ldr	r2, [pc, #120]	; (8016000 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015f86:	481f      	ldr	r0, [pc, #124]	; (8016004 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8015f88:	f00f fbaa 	bl	80256e0 <__assert_func>
 8015f8c:	ac04      	add	r4, sp, #16
 8015f8e:	2600      	movs	r6, #0
 8015f90:	f844 6d04 	str.w	r6, [r4, #-4]!
 8015f94:	6806      	ldr	r6, [r0, #0]
 8015f96:	9401      	str	r4, [sp, #4]
 8015f98:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015f9c:	9400      	str	r4, [sp, #0]
 8015f9e:	6834      	ldr	r4, [r6, #0]
 8015fa0:	47a0      	blx	r4
 8015fa2:	4c19      	ldr	r4, [pc, #100]	; (8016008 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8015fa4:	4606      	mov	r6, r0
 8015fa6:	f8a4 9000 	strh.w	r9, [r4]
 8015faa:	f7f6 fbc1 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 8015fae:	6803      	ldr	r3, [r0, #0]
 8015fb0:	6a1b      	ldr	r3, [r3, #32]
 8015fb2:	4798      	blx	r3
 8015fb4:	280c      	cmp	r0, #12
 8015fb6:	d80f      	bhi.n	8015fd8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015fb8:	e8df f000 	tbb	[pc, r0]
 8015fbc:	1b1b1207 	.word	0x1b1b1207
 8015fc0:	1b1b1b1b 	.word	0x1b1b1b1b
 8015fc4:	1b1b1b1b 	.word	0x1b1b1b1b
 8015fc8:	1b          	.byte	0x1b
 8015fc9:	00          	.byte	0x00
 8015fca:	8823      	ldrh	r3, [r4, #0]
 8015fcc:	fb08 7203 	mla	r2, r8, r3, r7
 8015fd0:	9b03      	ldr	r3, [sp, #12]
 8015fd2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015fd6:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015fd8:	4630      	mov	r0, r6
 8015fda:	b005      	add	sp, #20
 8015fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fe0:	8822      	ldrh	r2, [r4, #0]
 8015fe2:	9b03      	ldr	r3, [sp, #12]
 8015fe4:	fb08 7202 	mla	r2, r8, r2, r7
 8015fe8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015fec:	1a9a      	subs	r2, r3, r2
 8015fee:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015ff0:	e7f2      	b.n	8015fd8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015ff2:	4b06      	ldr	r3, [pc, #24]	; (801600c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8015ff4:	f240 114d 	movw	r1, #333	; 0x14d
 8015ff8:	4a01      	ldr	r2, [pc, #4]	; (8016000 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015ffa:	e7c4      	b.n	8015f86 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8015ffc:	080290e9 	.word	0x080290e9
 8016000:	080293fa 	.word	0x080293fa
 8016004:	0802912e 	.word	0x0802912e
 8016008:	2000b366 	.word	0x2000b366
 801600c:	08029154 	.word	0x08029154

08016010 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8016010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016014:	4698      	mov	r8, r3
 8016016:	6803      	ldr	r3, [r0, #0]
 8016018:	b087      	sub	sp, #28
 801601a:	460e      	mov	r6, r1
 801601c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801601e:	4617      	mov	r7, r2
 8016020:	4b0d      	ldr	r3, [pc, #52]	; (8016058 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8016022:	4604      	mov	r4, r0
 8016024:	f8b3 9000 	ldrh.w	r9, [r3]
 8016028:	f7f6 fb82 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 801602c:	6803      	ldr	r3, [r0, #0]
 801602e:	6a1b      	ldr	r3, [r3, #32]
 8016030:	4798      	blx	r3
 8016032:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016036:	463a      	mov	r2, r7
 8016038:	4631      	mov	r1, r6
 801603a:	9302      	str	r3, [sp, #8]
 801603c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016040:	9301      	str	r3, [sp, #4]
 8016042:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016046:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801604a:	9300      	str	r3, [sp, #0]
 801604c:	4620      	mov	r0, r4
 801604e:	4643      	mov	r3, r8
 8016050:	47a8      	blx	r5
 8016052:	b007      	add	sp, #28
 8016054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016058:	2000b366 	.word	0x2000b366

0801605c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016060:	4606      	mov	r6, r0
 8016062:	b089      	sub	sp, #36	; 0x24
 8016064:	4610      	mov	r0, r2
 8016066:	460c      	mov	r4, r1
 8016068:	4691      	mov	r9, r2
 801606a:	4698      	mov	r8, r3
 801606c:	f005 fc26 	bl	801b8bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016070:	2800      	cmp	r0, #0
 8016072:	f000 8093 	beq.w	801619c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 8016076:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80161b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801607a:	ad08      	add	r5, sp, #32
 801607c:	f8df b138 	ldr.w	fp, [pc, #312]	; 80161b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8016080:	f8da 0000 	ldr.w	r0, [sl]
 8016084:	4f4a      	ldr	r7, [pc, #296]	; (80161b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8016086:	6802      	ldr	r2, [r0, #0]
 8016088:	6a12      	ldr	r2, [r2, #32]
 801608a:	4790      	blx	r2
 801608c:	f8da 0000 	ldr.w	r0, [sl]
 8016090:	6802      	ldr	r2, [r0, #0]
 8016092:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016094:	4790      	blx	r2
 8016096:	f8bb 3000 	ldrh.w	r3, [fp]
 801609a:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801609e:	4628      	mov	r0, r5
 80160a0:	9300      	str	r3, [sp, #0]
 80160a2:	883b      	ldrh	r3, [r7, #0]
 80160a4:	9301      	str	r3, [sp, #4]
 80160a6:	f005 fccd 	bl	801ba44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80160aa:	f8ab 0000 	strh.w	r0, [fp]
 80160ae:	4628      	mov	r0, r5
 80160b0:	f005 fd02 	bl	801bab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80160b4:	f8da b000 	ldr.w	fp, [sl]
 80160b8:	8038      	strh	r0, [r7, #0]
 80160ba:	4648      	mov	r0, r9
 80160bc:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80160c0:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80160c4:	9302      	str	r3, [sp, #8]
 80160c6:	f005 fbf9 	bl	801b8bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80160ca:	f8da 2000 	ldr.w	r2, [sl]
 80160ce:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80160d2:	63d0      	str	r0, [r2, #60]	; 0x3c
 80160d4:	4620      	mov	r0, r4
 80160d6:	6822      	ldr	r2, [r4, #0]
 80160d8:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 80160dc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80160de:	2200      	movs	r2, #0
 80160e0:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 80160e4:	4611      	mov	r1, r2
 80160e6:	4798      	blx	r3
 80160e8:	2201      	movs	r2, #1
 80160ea:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 80160ee:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80160f2:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80160f6:	2a00      	cmp	r2, #0
 80160f8:	f104 0204 	add.w	r2, r4, #4
 80160fc:	dd51      	ble.n	80161a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 80160fe:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8016102:	2900      	cmp	r1, #0
 8016104:	dd4d      	ble.n	80161a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 8016106:	6810      	ldr	r0, [r2, #0]
 8016108:	f10d 0c18 	add.w	ip, sp, #24
 801610c:	6851      	ldr	r1, [r2, #4]
 801610e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016112:	4641      	mov	r1, r8
 8016114:	a806      	add	r0, sp, #24
 8016116:	f7ff fc75 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 801611a:	4628      	mov	r0, r5
 801611c:	f005 fde4 	bl	801bce8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016120:	4680      	mov	r8, r0
 8016122:	f7f6 fb05 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 8016126:	6802      	ldr	r2, [r0, #0]
 8016128:	6a12      	ldr	r2, [r2, #32]
 801612a:	4790      	blx	r2
 801612c:	4580      	cmp	r8, r0
 801612e:	d03d      	beq.n	80161ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 8016130:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016132:	b150      	cbz	r0, 801614a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8016134:	4628      	mov	r0, r5
 8016136:	f005 fdd7 	bl	801bce8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801613a:	4605      	mov	r5, r0
 801613c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801613e:	6803      	ldr	r3, [r0, #0]
 8016140:	6a1b      	ldr	r3, [r3, #32]
 8016142:	4798      	blx	r3
 8016144:	1a2b      	subs	r3, r5, r0
 8016146:	4258      	negs	r0, r3
 8016148:	4158      	adcs	r0, r3
 801614a:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 801614e:	2500      	movs	r5, #0
 8016150:	6963      	ldr	r3, [r4, #20]
 8016152:	4620      	mov	r0, r4
 8016154:	6822      	ldr	r2, [r4, #0]
 8016156:	a906      	add	r1, sp, #24
 8016158:	6165      	str	r5, [r4, #20]
 801615a:	9303      	str	r3, [sp, #12]
 801615c:	6892      	ldr	r2, [r2, #8]
 801615e:	4790      	blx	r2
 8016160:	9b03      	ldr	r3, [sp, #12]
 8016162:	4620      	mov	r0, r4
 8016164:	4652      	mov	r2, sl
 8016166:	6163      	str	r3, [r4, #20]
 8016168:	4649      	mov	r1, r9
 801616a:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801616e:	6823      	ldr	r3, [r4, #0]
 8016170:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8016174:	4c0f      	ldr	r4, [pc, #60]	; (80161b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8016176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016178:	4798      	blx	r3
 801617a:	6820      	ldr	r0, [r4, #0]
 801617c:	9b02      	ldr	r3, [sp, #8]
 801617e:	9a00      	ldr	r2, [sp, #0]
 8016180:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8016184:	4b0c      	ldr	r3, [pc, #48]	; (80161b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8016186:	801a      	strh	r2, [r3, #0]
 8016188:	4b09      	ldr	r3, [pc, #36]	; (80161b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801618a:	9a01      	ldr	r2, [sp, #4]
 801618c:	801a      	strh	r2, [r3, #0]
 801618e:	6803      	ldr	r3, [r0, #0]
 8016190:	6a1b      	ldr	r3, [r3, #32]
 8016192:	4798      	blx	r3
 8016194:	6820      	ldr	r0, [r4, #0]
 8016196:	6803      	ldr	r3, [r0, #0]
 8016198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801619a:	4798      	blx	r3
 801619c:	b009      	add	sp, #36	; 0x24
 801619e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a2:	ab06      	add	r3, sp, #24
 80161a4:	6810      	ldr	r0, [r2, #0]
 80161a6:	6851      	ldr	r1, [r2, #4]
 80161a8:	c303      	stmia	r3!, {r0, r1}
 80161aa:	e7b6      	b.n	801611a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 80161ac:	2000      	movs	r0, #0
 80161ae:	e7cc      	b.n	801614a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 80161b0:	2000b368 	.word	0x2000b368
 80161b4:	2000b36c 	.word	0x2000b36c
 80161b8:	2000b366 	.word	0x2000b366

080161bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80161bc:	4b07      	ldr	r3, [pc, #28]	; (80161dc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80161be:	b510      	push	{r4, lr}
 80161c0:	781b      	ldrb	r3, [r3, #0]
 80161c2:	4604      	mov	r4, r0
 80161c4:	b13b      	cbz	r3, 80161d6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80161c6:	6803      	ldr	r3, [r0, #0]
 80161c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161ca:	4798      	blx	r3
 80161cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80161ce:	4283      	cmp	r3, r0
 80161d0:	d101      	bne.n	80161d6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80161d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80161d4:	bd10      	pop	{r4, pc}
 80161d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80161d8:	e7fc      	b.n	80161d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80161da:	bf00      	nop
 80161dc:	2000b36a 	.word	0x2000b36a

080161e0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80161e0:	4b0b      	ldr	r3, [pc, #44]	; (8016210 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 80161e2:	b510      	push	{r4, lr}
 80161e4:	781b      	ldrb	r3, [r3, #0]
 80161e6:	4604      	mov	r4, r0
 80161e8:	b95b      	cbnz	r3, 8016202 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80161ea:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80161ee:	2b02      	cmp	r3, #2
 80161f0:	d007      	beq.n	8016202 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80161f2:	6840      	ldr	r0, [r0, #4]
 80161f4:	f000 fbc8 	bl	8016988 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80161f8:	b118      	cbz	r0, 8016202 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80161fa:	6862      	ldr	r2, [r4, #4]
 80161fc:	7a53      	ldrb	r3, [r2, #9]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d0fc      	beq.n	80161fc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016202:	f7fd ff57 	bl	80140b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016206:	4620      	mov	r0, r4
 8016208:	f7ff ffd8 	bl	80161bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801620c:	bd10      	pop	{r4, pc}
 801620e:	bf00      	nop
 8016210:	2000b36a 	.word	0x2000b36a

08016214 <_ZN8touchgfx3HAL10initializeEv>:
 8016214:	b510      	push	{r4, lr}
 8016216:	4604      	mov	r4, r0
 8016218:	f7fd ff16 	bl	8014048 <_ZN8touchgfx10OSWrappers10initializeEv>
 801621c:	6860      	ldr	r0, [r4, #4]
 801621e:	6803      	ldr	r3, [r0, #0]
 8016220:	68db      	ldr	r3, [r3, #12]
 8016222:	4798      	blx	r3
 8016224:	68e0      	ldr	r0, [r4, #12]
 8016226:	6803      	ldr	r3, [r0, #0]
 8016228:	689b      	ldr	r3, [r3, #8]
 801622a:	4798      	blx	r3
 801622c:	6823      	ldr	r3, [r4, #0]
 801622e:	4620      	mov	r0, r4
 8016230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016236:	4718      	bx	r3

08016238 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016238:	b508      	push	{r3, lr}
 801623a:	290c      	cmp	r1, #12
 801623c:	d817      	bhi.n	801626e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801623e:	e8df f001 	tbb	[pc, r1]
 8016242:	090b      	.short	0x090b
 8016244:	0d0d0d07 	.word	0x0d0d0d07
 8016248:	1414140d 	.word	0x1414140d
 801624c:	1414      	.short	0x1414
 801624e:	0d          	.byte	0x0d
 801624f:	00          	.byte	0x00
 8016250:	2020      	movs	r0, #32
 8016252:	bd08      	pop	{r3, pc}
 8016254:	2018      	movs	r0, #24
 8016256:	e7fc      	b.n	8016252 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016258:	2010      	movs	r0, #16
 801625a:	e7fa      	b.n	8016252 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801625c:	4b05      	ldr	r3, [pc, #20]	; (8016274 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801625e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8016262:	4a05      	ldr	r2, [pc, #20]	; (8016278 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8016264:	4805      	ldr	r0, [pc, #20]	; (801627c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8016266:	f00f fa3b 	bl	80256e0 <__assert_func>
 801626a:	2008      	movs	r0, #8
 801626c:	e7f1      	b.n	8016252 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801626e:	2000      	movs	r0, #0
 8016270:	e7ef      	b.n	8016252 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016272:	bf00      	nop
 8016274:	08029227 	.word	0x08029227
 8016278:	080295bc 	.word	0x080295bc
 801627c:	0802912e 	.word	0x0802912e

08016280 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8016280:	b570      	push	{r4, r5, r6, lr}
 8016282:	460d      	mov	r5, r1
 8016284:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8016288:	4616      	mov	r6, r2
 801628a:	461c      	mov	r4, r3
 801628c:	f7ff ffd4 	bl	8016238 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8016290:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016294:	10c0      	asrs	r0, r0, #3
 8016296:	fb06 5101 	mla	r1, r6, r1, r5
 801629a:	fb00 4001 	mla	r0, r0, r1, r4
 801629e:	bd70      	pop	{r4, r5, r6, pc}

080162a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80162a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162a4:	b08a      	sub	sp, #40	; 0x28
 80162a6:	f04f 0c00 	mov.w	ip, #0
 80162aa:	4604      	mov	r4, r0
 80162ac:	469a      	mov	sl, r3
 80162ae:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80162b2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80162b6:	f1b8 0f02 	cmp.w	r8, #2
 80162ba:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80162be:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80162c2:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80162c6:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80162ca:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80162ce:	f8cd c020 	str.w	ip, [sp, #32]
 80162d2:	d030      	beq.n	8016336 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 80162d4:	2bff      	cmp	r3, #255	; 0xff
 80162d6:	d12c      	bne.n	8016332 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 80162d8:	4560      	cmp	r0, ip
 80162da:	bf14      	ite	ne
 80162dc:	2004      	movne	r0, #4
 80162de:	2001      	moveq	r0, #1
 80162e0:	9204      	str	r2, [sp, #16]
 80162e2:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80162e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80162ea:	f8ad 201c 	strh.w	r2, [sp, #28]
 80162ee:	f8ad 6018 	strh.w	r6, [sp, #24]
 80162f2:	f8ad 501a 	strh.w	r5, [sp, #26]
 80162f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80162fa:	4620      	mov	r0, r4
 80162fc:	f7ff ff5e 	bl	80161bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016300:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016304:	4603      	mov	r3, r0
 8016306:	4651      	mov	r1, sl
 8016308:	4620      	mov	r0, r4
 801630a:	e9cd 9700 	strd	r9, r7, [sp]
 801630e:	f7ff ffb7 	bl	8016280 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016312:	f8ad 901e 	strh.w	r9, [sp, #30]
 8016316:	9005      	str	r0, [sp, #20]
 8016318:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801631c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8016320:	b106      	cbz	r6, 8016324 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8016322:	b98d      	cbnz	r5, 8016348 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8016324:	4b12      	ldr	r3, [pc, #72]	; (8016370 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8016326:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801632a:	4a12      	ldr	r2, [pc, #72]	; (8016374 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801632c:	4812      	ldr	r0, [pc, #72]	; (8016378 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801632e:	f00f f9d7 	bl	80256e0 <__assert_func>
 8016332:	2004      	movs	r0, #4
 8016334:	e7d4      	b.n	80162e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016336:	2bff      	cmp	r3, #255	; 0xff
 8016338:	d104      	bne.n	8016344 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801633a:	2800      	cmp	r0, #0
 801633c:	bf14      	ite	ne
 801633e:	2040      	movne	r0, #64	; 0x40
 8016340:	2020      	moveq	r0, #32
 8016342:	e7cd      	b.n	80162e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016344:	2040      	movs	r0, #64	; 0x40
 8016346:	e7cb      	b.n	80162e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016348:	6823      	ldr	r3, [r4, #0]
 801634a:	4620      	mov	r0, r4
 801634c:	9d02      	ldr	r5, [sp, #8]
 801634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016350:	4798      	blx	r3
 8016352:	4228      	tst	r0, r5
 8016354:	d104      	bne.n	8016360 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8016356:	4b09      	ldr	r3, [pc, #36]	; (801637c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016358:	f240 11b1 	movw	r1, #433	; 0x1b1
 801635c:	4a05      	ldr	r2, [pc, #20]	; (8016374 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801635e:	e7e5      	b.n	801632c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8016360:	6860      	ldr	r0, [r4, #4]
 8016362:	a902      	add	r1, sp, #8
 8016364:	6803      	ldr	r3, [r0, #0]
 8016366:	685b      	ldr	r3, [r3, #4]
 8016368:	4798      	blx	r3
 801636a:	b00a      	add	sp, #40	; 0x28
 801636c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016370:	080291aa 	.word	0x080291aa
 8016374:	0802945e 	.word	0x0802945e
 8016378:	0802912e 	.word	0x0802912e
 801637c:	080291e2 	.word	0x080291e2

08016380 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8016380:	b510      	push	{r4, lr}
 8016382:	b08a      	sub	sp, #40	; 0x28
 8016384:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016388:	9408      	str	r4, [sp, #32]
 801638a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801638e:	9407      	str	r4, [sp, #28]
 8016390:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8016394:	9406      	str	r4, [sp, #24]
 8016396:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801639a:	9405      	str	r4, [sp, #20]
 801639c:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80163a0:	9404      	str	r4, [sp, #16]
 80163a2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80163a6:	9403      	str	r4, [sp, #12]
 80163a8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80163ac:	9402      	str	r4, [sp, #8]
 80163ae:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80163b2:	e9cd 3400 	strd	r3, r4, [sp]
 80163b6:	4613      	mov	r3, r2
 80163b8:	2200      	movs	r2, #0
 80163ba:	f7ff ff71 	bl	80162a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80163be:	b00a      	add	sp, #40	; 0x28
 80163c0:	bd10      	pop	{r4, pc}
	...

080163c4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80163c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163c6:	b08b      	sub	sp, #44	; 0x2c
 80163c8:	4616      	mov	r6, r2
 80163ca:	460d      	mov	r5, r1
 80163cc:	461f      	mov	r7, r3
 80163ce:	4604      	mov	r4, r0
 80163d0:	f7f6 f9ae 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 80163d4:	6803      	ldr	r3, [r0, #0]
 80163d6:	6a1b      	ldr	r3, [r3, #32]
 80163d8:	4798      	blx	r3
 80163da:	4b0e      	ldr	r3, [pc, #56]	; (8016414 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 80163dc:	2200      	movs	r2, #0
 80163de:	4629      	mov	r1, r5
 80163e0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80163e4:	881b      	ldrh	r3, [r3, #0]
 80163e6:	4620      	mov	r0, r4
 80163e8:	9306      	str	r3, [sp, #24]
 80163ea:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80163ee:	9305      	str	r3, [sp, #20]
 80163f0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80163f4:	9304      	str	r3, [sp, #16]
 80163f6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80163fa:	9303      	str	r3, [sp, #12]
 80163fc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016400:	9302      	str	r3, [sp, #8]
 8016402:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016406:	e9cd 7300 	strd	r7, r3, [sp]
 801640a:	4633      	mov	r3, r6
 801640c:	f7ff ff48 	bl	80162a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016410:	b00b      	add	sp, #44	; 0x2c
 8016412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016414:	2000b366 	.word	0x2000b366

08016418 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8016418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801641c:	461f      	mov	r7, r3
 801641e:	4b14      	ldr	r3, [pc, #80]	; (8016470 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8016420:	b08a      	sub	sp, #40	; 0x28
 8016422:	4616      	mov	r6, r2
 8016424:	f8b3 8000 	ldrh.w	r8, [r3]
 8016428:	460d      	mov	r5, r1
 801642a:	4604      	mov	r4, r0
 801642c:	f7f6 f980 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 8016430:	6803      	ldr	r3, [r0, #0]
 8016432:	6a1b      	ldr	r3, [r3, #32]
 8016434:	4798      	blx	r3
 8016436:	2302      	movs	r3, #2
 8016438:	9008      	str	r0, [sp, #32]
 801643a:	2200      	movs	r2, #0
 801643c:	4629      	mov	r1, r5
 801643e:	4620      	mov	r0, r4
 8016440:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8016444:	2301      	movs	r3, #1
 8016446:	9305      	str	r3, [sp, #20]
 8016448:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801644c:	9304      	str	r3, [sp, #16]
 801644e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016452:	9303      	str	r3, [sp, #12]
 8016454:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016458:	9302      	str	r3, [sp, #8]
 801645a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801645e:	e9cd 7300 	strd	r7, r3, [sp]
 8016462:	4633      	mov	r3, r6
 8016464:	f7ff ff1c 	bl	80162a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016468:	b00a      	add	sp, #40	; 0x28
 801646a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801646e:	bf00      	nop
 8016470:	2000b366 	.word	0x2000b366

08016474 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8016474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016478:	b08b      	sub	sp, #44	; 0x2c
 801647a:	469b      	mov	fp, r3
 801647c:	4604      	mov	r4, r0
 801647e:	4692      	mov	sl, r2
 8016480:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016484:	2600      	movs	r6, #0
 8016486:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801648a:	4689      	mov	r9, r1
 801648c:	2fff      	cmp	r7, #255	; 0xff
 801648e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8016492:	9608      	str	r6, [sp, #32]
 8016494:	bf14      	ite	ne
 8016496:	2308      	movne	r3, #8
 8016498:	2302      	moveq	r3, #2
 801649a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801649e:	f7ff fe8d 	bl	80161bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80164a2:	465a      	mov	r2, fp
 80164a4:	4603      	mov	r3, r0
 80164a6:	4651      	mov	r1, sl
 80164a8:	4620      	mov	r0, r4
 80164aa:	e9cd 8500 	strd	r8, r5, [sp]
 80164ae:	f7ff fee7 	bl	8016280 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80164b2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80164b6:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80164ba:	f8ad 3018 	strh.w	r3, [sp, #24]
 80164be:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80164c2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80164c6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80164ca:	6823      	ldr	r3, [r4, #0]
 80164cc:	9d02      	ldr	r5, [sp, #8]
 80164ce:	9005      	str	r0, [sp, #20]
 80164d0:	4620      	mov	r0, r4
 80164d2:	f8ad 601c 	strh.w	r6, [sp, #28]
 80164d6:	f8ad 801e 	strh.w	r8, [sp, #30]
 80164da:	f8cd 9020 	str.w	r9, [sp, #32]
 80164de:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80164e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164e4:	4798      	blx	r3
 80164e6:	4228      	tst	r0, r5
 80164e8:	d106      	bne.n	80164f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 80164ea:	4b07      	ldr	r3, [pc, #28]	; (8016508 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 80164ec:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80164f0:	4a06      	ldr	r2, [pc, #24]	; (801650c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 80164f2:	4807      	ldr	r0, [pc, #28]	; (8016510 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 80164f4:	f00f f8f4 	bl	80256e0 <__assert_func>
 80164f8:	6860      	ldr	r0, [r4, #4]
 80164fa:	a902      	add	r1, sp, #8
 80164fc:	6803      	ldr	r3, [r0, #0]
 80164fe:	685b      	ldr	r3, [r3, #4]
 8016500:	4798      	blx	r3
 8016502:	b00b      	add	sp, #44	; 0x2c
 8016504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016508:	080291e2 	.word	0x080291e2
 801650c:	08029527 	.word	0x08029527
 8016510:	0802912e 	.word	0x0802912e

08016514 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016518:	461f      	mov	r7, r3
 801651a:	4b0b      	ldr	r3, [pc, #44]	; (8016548 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801651c:	460d      	mov	r5, r1
 801651e:	4616      	mov	r6, r2
 8016520:	f8b3 8000 	ldrh.w	r8, [r3]
 8016524:	4604      	mov	r4, r0
 8016526:	f7f6 f903 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 801652a:	6803      	ldr	r3, [r0, #0]
 801652c:	6a1b      	ldr	r3, [r3, #32]
 801652e:	4798      	blx	r3
 8016530:	463b      	mov	r3, r7
 8016532:	4632      	mov	r2, r6
 8016534:	4629      	mov	r1, r5
 8016536:	e9cd 8000 	strd	r8, r0, [sp]
 801653a:	4620      	mov	r0, r4
 801653c:	f7ff fea0 	bl	8016280 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016540:	b002      	add	sp, #8
 8016542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016546:	bf00      	nop
 8016548:	2000b366 	.word	0x2000b366

0801654c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801654c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016550:	4698      	mov	r8, r3
 8016552:	b088      	sub	sp, #32
 8016554:	2300      	movs	r3, #0
 8016556:	4617      	mov	r7, r2
 8016558:	4604      	mov	r4, r0
 801655a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801655e:	9306      	str	r3, [sp, #24]
 8016560:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016564:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016568:	f8ad 6010 	strh.w	r6, [sp, #16]
 801656c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8016570:	e9cd 3100 	strd	r3, r1, [sp]
 8016574:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016578:	f8ad 3014 	strh.w	r3, [sp, #20]
 801657c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016580:	f88d 301c 	strb.w	r3, [sp, #28]
 8016584:	f7ff fe1a 	bl	80161bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016588:	4642      	mov	r2, r8
 801658a:	4603      	mov	r3, r0
 801658c:	4639      	mov	r1, r7
 801658e:	4620      	mov	r0, r4
 8016590:	f7ff ffc0 	bl	8016514 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016594:	4b16      	ldr	r3, [pc, #88]	; (80165f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8016596:	9003      	str	r0, [sp, #12]
 8016598:	881b      	ldrh	r3, [r3, #0]
 801659a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801659e:	f7f6 f8c7 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 80165a2:	6803      	ldr	r3, [r0, #0]
 80165a4:	6a1b      	ldr	r3, [r3, #32]
 80165a6:	4798      	blx	r3
 80165a8:	f88d 001e 	strb.w	r0, [sp, #30]
 80165ac:	f88d 001d 	strb.w	r0, [sp, #29]
 80165b0:	b106      	cbz	r6, 80165b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80165b2:	b935      	cbnz	r5, 80165c2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80165b4:	4b0f      	ldr	r3, [pc, #60]	; (80165f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80165b6:	f240 11cd 	movw	r1, #461	; 0x1cd
 80165ba:	4a0f      	ldr	r2, [pc, #60]	; (80165f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80165bc:	480f      	ldr	r0, [pc, #60]	; (80165fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80165be:	f00f f88f 	bl	80256e0 <__assert_func>
 80165c2:	6823      	ldr	r3, [r4, #0]
 80165c4:	4620      	mov	r0, r4
 80165c6:	9d00      	ldr	r5, [sp, #0]
 80165c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ca:	4798      	blx	r3
 80165cc:	4228      	tst	r0, r5
 80165ce:	d104      	bne.n	80165da <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80165d0:	4b0b      	ldr	r3, [pc, #44]	; (8016600 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80165d2:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80165d6:	4a08      	ldr	r2, [pc, #32]	; (80165f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80165d8:	e7f0      	b.n	80165bc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80165da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80165dc:	4669      	mov	r1, sp
 80165de:	6860      	ldr	r0, [r4, #4]
 80165e0:	9306      	str	r3, [sp, #24]
 80165e2:	6803      	ldr	r3, [r0, #0]
 80165e4:	685b      	ldr	r3, [r3, #4]
 80165e6:	4798      	blx	r3
 80165e8:	b008      	add	sp, #32
 80165ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165ee:	bf00      	nop
 80165f0:	2000b366 	.word	0x2000b366
 80165f4:	080291aa 	.word	0x080291aa
 80165f8:	08029310 	.word	0x08029310
 80165fc:	0802912e 	.word	0x0802912e
 8016600:	080291e2 	.word	0x080291e2

08016604 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016604:	b570      	push	{r4, r5, r6, lr}
 8016606:	b08a      	sub	sp, #40	; 0x28
 8016608:	4604      	mov	r4, r0
 801660a:	466b      	mov	r3, sp
 801660c:	e883 0006 	stmia.w	r3, {r1, r2}
 8016610:	4b1f      	ldr	r3, [pc, #124]	; (8016690 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8016612:	781b      	ldrb	r3, [r3, #0]
 8016614:	b933      	cbnz	r3, 8016624 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016616:	4b1f      	ldr	r3, [pc, #124]	; (8016694 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016618:	f240 11f9 	movw	r1, #505	; 0x1f9
 801661c:	4a1e      	ldr	r2, [pc, #120]	; (8016698 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801661e:	481f      	ldr	r0, [pc, #124]	; (801669c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016620:	f00f f85e 	bl	80256e0 <__assert_func>
 8016624:	2300      	movs	r3, #0
 8016626:	f8bd 5000 	ldrh.w	r5, [sp]
 801662a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801662e:	9308      	str	r3, [sp, #32]
 8016630:	2301      	movs	r3, #1
 8016632:	9302      	str	r3, [sp, #8]
 8016634:	6803      	ldr	r3, [r0, #0]
 8016636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016638:	4798      	blx	r3
 801663a:	4632      	mov	r2, r6
 801663c:	4629      	mov	r1, r5
 801663e:	4603      	mov	r3, r0
 8016640:	4620      	mov	r0, r4
 8016642:	f7ff ff67 	bl	8016514 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016646:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016648:	9003      	str	r0, [sp, #12]
 801664a:	9305      	str	r3, [sp, #20]
 801664c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016650:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016654:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016658:	f8ad 301a 	strh.w	r3, [sp, #26]
 801665c:	4b10      	ldr	r3, [pc, #64]	; (80166a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801665e:	881b      	ldrh	r3, [r3, #0]
 8016660:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016664:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016668:	f7f6 f862 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 801666c:	6803      	ldr	r3, [r0, #0]
 801666e:	6a1b      	ldr	r3, [r3, #32]
 8016670:	4798      	blx	r3
 8016672:	23ff      	movs	r3, #255	; 0xff
 8016674:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016678:	a902      	add	r1, sp, #8
 801667a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801667e:	6860      	ldr	r0, [r4, #4]
 8016680:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016684:	6803      	ldr	r3, [r0, #0]
 8016686:	685b      	ldr	r3, [r3, #4]
 8016688:	4798      	blx	r3
 801668a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801668c:	b00a      	add	sp, #40	; 0x28
 801668e:	bd70      	pop	{r4, r5, r6, pc}
 8016690:	2000b36b 	.word	0x2000b36b
 8016694:	0802907b 	.word	0x0802907b
 8016698:	080293b4 	.word	0x080293b4
 801669c:	0802912e 	.word	0x0802912e
 80166a0:	2000b366 	.word	0x2000b366

080166a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80166a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166a6:	b08b      	sub	sp, #44	; 0x2c
 80166a8:	4604      	mov	r4, r0
 80166aa:	466d      	mov	r5, sp
 80166ac:	e885 0006 	stmia.w	r5, {r1, r2}
 80166b0:	461d      	mov	r5, r3
 80166b2:	2300      	movs	r3, #0
 80166b4:	f8bd 6000 	ldrh.w	r6, [sp]
 80166b8:	9308      	str	r3, [sp, #32]
 80166ba:	2301      	movs	r3, #1
 80166bc:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80166c0:	9302      	str	r3, [sp, #8]
 80166c2:	6803      	ldr	r3, [r0, #0]
 80166c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166c6:	4798      	blx	r3
 80166c8:	463a      	mov	r2, r7
 80166ca:	4631      	mov	r1, r6
 80166cc:	4603      	mov	r3, r0
 80166ce:	4620      	mov	r0, r4
 80166d0:	f7ff ff20 	bl	8016514 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80166d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80166d8:	9003      	str	r0, [sp, #12]
 80166da:	f8ad 3018 	strh.w	r3, [sp, #24]
 80166de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80166e2:	9505      	str	r5, [sp, #20]
 80166e4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80166e8:	4b0d      	ldr	r3, [pc, #52]	; (8016720 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 80166ea:	881b      	ldrh	r3, [r3, #0]
 80166ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80166f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80166f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80166f6:	f7f6 f81b 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 80166fa:	6803      	ldr	r3, [r0, #0]
 80166fc:	6a1b      	ldr	r3, [r3, #32]
 80166fe:	4798      	blx	r3
 8016700:	23ff      	movs	r3, #255	; 0xff
 8016702:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016706:	a902      	add	r1, sp, #8
 8016708:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801670c:	6860      	ldr	r0, [r4, #4]
 801670e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016712:	6803      	ldr	r3, [r0, #0]
 8016714:	685b      	ldr	r3, [r3, #4]
 8016716:	4798      	blx	r3
 8016718:	4628      	mov	r0, r5
 801671a:	b00b      	add	sp, #44	; 0x2c
 801671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801671e:	bf00      	nop
 8016720:	2000b366 	.word	0x2000b366

08016724 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016724:	b570      	push	{r4, r5, r6, lr}
 8016726:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801672a:	4604      	mov	r4, r0
 801672c:	b19b      	cbz	r3, 8016756 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801672e:	2002      	movs	r0, #2
 8016730:	f7fd fa04 	bl	8013b3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016734:	2300      	movs	r3, #0
 8016736:	4620      	mov	r0, r4
 8016738:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801673c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016740:	6823      	ldr	r3, [r4, #0]
 8016742:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8016746:	f7ff fd39 	bl	80161bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801674a:	4601      	mov	r1, r0
 801674c:	4620      	mov	r0, r4
 801674e:	462b      	mov	r3, r5
 8016750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016754:	4718      	bx	r3
 8016756:	bd70      	pop	{r4, r5, r6, pc}

08016758 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016758:	4770      	bx	lr

0801675a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801675a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801675e:	1a13      	subs	r3, r2, r0
 8016760:	4258      	negs	r0, r3
 8016762:	4158      	adcs	r0, r3
 8016764:	4770      	bx	lr

08016766 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016766:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801676a:	1a9b      	subs	r3, r3, r2
 801676c:	2b00      	cmp	r3, #0
 801676e:	bfdc      	itt	le
 8016770:	6882      	ldrle	r2, [r0, #8]
 8016772:	189b      	addle	r3, r3, r2
 8016774:	2b01      	cmp	r3, #1
 8016776:	bfcc      	ite	gt
 8016778:	2000      	movgt	r0, #0
 801677a:	2001      	movle	r0, #1
 801677c:	4770      	bx	lr

0801677e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801677e:	6902      	ldr	r2, [r0, #16]
 8016780:	6840      	ldr	r0, [r0, #4]
 8016782:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016786:	4770      	bx	lr

08016788 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016788:	6803      	ldr	r3, [r0, #0]
 801678a:	691b      	ldr	r3, [r3, #16]
 801678c:	4718      	bx	r3

0801678e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801678e:	4770      	bx	lr

08016790 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016790:	4770      	bx	lr
	...

08016794 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016794:	2301      	movs	r3, #1
 8016796:	b570      	push	{r4, r5, r6, lr}
 8016798:	7203      	strb	r3, [r0, #8]
 801679a:	4604      	mov	r4, r0
 801679c:	6840      	ldr	r0, [r0, #4]
 801679e:	6803      	ldr	r3, [r0, #0]
 80167a0:	699b      	ldr	r3, [r3, #24]
 80167a2:	4798      	blx	r3
 80167a4:	6803      	ldr	r3, [r0, #0]
 80167a6:	4605      	mov	r5, r0
 80167a8:	2b08      	cmp	r3, #8
 80167aa:	d01e      	beq.n	80167ea <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80167ac:	d80b      	bhi.n	80167c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167ae:	2b02      	cmp	r3, #2
 80167b0:	d027      	beq.n	8016802 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80167b2:	2b04      	cmp	r3, #4
 80167b4:	d011      	beq.n	80167da <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80167b6:	2b01      	cmp	r3, #1
 80167b8:	d028      	beq.n	801680c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80167ba:	4b17      	ldr	r3, [pc, #92]	; (8016818 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80167bc:	218b      	movs	r1, #139	; 0x8b
 80167be:	4a17      	ldr	r2, [pc, #92]	; (801681c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80167c0:	4817      	ldr	r0, [pc, #92]	; (8016820 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80167c2:	f00e ff8d 	bl	80256e0 <__assert_func>
 80167c6:	2b40      	cmp	r3, #64	; 0x40
 80167c8:	d020      	beq.n	801680c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80167ca:	d801      	bhi.n	80167d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80167cc:	2b20      	cmp	r3, #32
 80167ce:	e7f3      	b.n	80167b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80167d0:	2b80      	cmp	r3, #128	; 0x80
 80167d2:	d01b      	beq.n	801680c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80167d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167d8:	e7ee      	b.n	80167b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80167da:	6823      	ldr	r3, [r4, #0]
 80167dc:	7f01      	ldrb	r1, [r0, #28]
 80167de:	4620      	mov	r0, r4
 80167e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167e2:	4798      	blx	r3
 80167e4:	6823      	ldr	r3, [r4, #0]
 80167e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167e8:	e006      	b.n	80167f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80167ea:	6823      	ldr	r3, [r4, #0]
 80167ec:	7f01      	ldrb	r1, [r0, #28]
 80167ee:	4620      	mov	r0, r4
 80167f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167f2:	4798      	blx	r3
 80167f4:	6823      	ldr	r3, [r4, #0]
 80167f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167f8:	4629      	mov	r1, r5
 80167fa:	4620      	mov	r0, r4
 80167fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016800:	4718      	bx	r3
 8016802:	6823      	ldr	r3, [r4, #0]
 8016804:	4620      	mov	r0, r4
 8016806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016808:	4798      	blx	r3
 801680a:	e7f3      	b.n	80167f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801680c:	6823      	ldr	r3, [r4, #0]
 801680e:	4620      	mov	r0, r4
 8016810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016812:	4798      	blx	r3
 8016814:	e7e6      	b.n	80167e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8016816:	bf00      	nop
 8016818:	08029605 	.word	0x08029605
 801681c:	08029714 	.word	0x08029714
 8016820:	0802962a 	.word	0x0802962a

08016824 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016824:	b570      	push	{r4, r5, r6, lr}
 8016826:	4604      	mov	r4, r0
 8016828:	460e      	mov	r6, r1
 801682a:	6860      	ldr	r0, [r4, #4]
 801682c:	6803      	ldr	r3, [r0, #0]
 801682e:	685b      	ldr	r3, [r3, #4]
 8016830:	4798      	blx	r3
 8016832:	2800      	cmp	r0, #0
 8016834:	d1f9      	bne.n	801682a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016836:	4d0b      	ldr	r5, [pc, #44]	; (8016864 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8016838:	6828      	ldr	r0, [r5, #0]
 801683a:	6803      	ldr	r3, [r0, #0]
 801683c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801683e:	4798      	blx	r3
 8016840:	f7fd fc52 	bl	80140e8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016844:	6860      	ldr	r0, [r4, #4]
 8016846:	4631      	mov	r1, r6
 8016848:	6803      	ldr	r3, [r0, #0]
 801684a:	689b      	ldr	r3, [r3, #8]
 801684c:	4798      	blx	r3
 801684e:	6823      	ldr	r3, [r4, #0]
 8016850:	4620      	mov	r0, r4
 8016852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016854:	4798      	blx	r3
 8016856:	6828      	ldr	r0, [r5, #0]
 8016858:	6803      	ldr	r3, [r0, #0]
 801685a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801685e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016860:	4718      	bx	r3
 8016862:	bf00      	nop
 8016864:	2000b36c 	.word	0x2000b36c

08016868 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016868:	b508      	push	{r3, lr}
 801686a:	f7fd fc23 	bl	80140b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801686e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016872:	f7fd bc2d 	b.w	80140d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016876 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016876:	b510      	push	{r4, lr}
 8016878:	4604      	mov	r4, r0
 801687a:	6840      	ldr	r0, [r0, #4]
 801687c:	6803      	ldr	r3, [r0, #0]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	4798      	blx	r3
 8016882:	b948      	cbnz	r0, 8016898 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016884:	7a63      	ldrb	r3, [r4, #9]
 8016886:	b13b      	cbz	r3, 8016898 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016888:	7a23      	ldrb	r3, [r4, #8]
 801688a:	b92b      	cbnz	r3, 8016898 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801688c:	6823      	ldr	r3, [r4, #0]
 801688e:	4620      	mov	r0, r4
 8016890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016896:	4718      	bx	r3
 8016898:	bd10      	pop	{r4, pc}
	...

0801689c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801689c:	b510      	push	{r4, lr}
 801689e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80168a2:	1b12      	subs	r2, r2, r4
 80168a4:	2a00      	cmp	r2, #0
 80168a6:	bfdc      	itt	le
 80168a8:	6883      	ldrle	r3, [r0, #8]
 80168aa:	18d2      	addle	r2, r2, r3
 80168ac:	2a01      	cmp	r2, #1
 80168ae:	dd18      	ble.n	80168e2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80168b0:	6843      	ldr	r3, [r0, #4]
 80168b2:	f101 021c 	add.w	r2, r1, #28
 80168b6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80168ba:	f851 4b04 	ldr.w	r4, [r1], #4
 80168be:	4291      	cmp	r1, r2
 80168c0:	f843 4b04 	str.w	r4, [r3], #4
 80168c4:	d1f9      	bne.n	80168ba <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80168c6:	880a      	ldrh	r2, [r1, #0]
 80168c8:	801a      	strh	r2, [r3, #0]
 80168ca:	788a      	ldrb	r2, [r1, #2]
 80168cc:	709a      	strb	r2, [r3, #2]
 80168ce:	68c3      	ldr	r3, [r0, #12]
 80168d0:	6882      	ldr	r2, [r0, #8]
 80168d2:	f3bf 8f5b 	dmb	ish
 80168d6:	3301      	adds	r3, #1
 80168d8:	429a      	cmp	r2, r3
 80168da:	bfd8      	it	le
 80168dc:	1a9b      	suble	r3, r3, r2
 80168de:	60c3      	str	r3, [r0, #12]
 80168e0:	bd10      	pop	{r4, pc}
 80168e2:	4b03      	ldr	r3, [pc, #12]	; (80168f0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80168e4:	2139      	movs	r1, #57	; 0x39
 80168e6:	4a03      	ldr	r2, [pc, #12]	; (80168f4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80168e8:	4803      	ldr	r0, [pc, #12]	; (80168f8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80168ea:	f00e fef9 	bl	80256e0 <__assert_func>
 80168ee:	bf00      	nop
 80168f0:	08029650 	.word	0x08029650
 80168f4:	08029744 	.word	0x08029744
 80168f8:	0802962a 	.word	0x0802962a

080168fc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80168fc:	b510      	push	{r4, lr}
 80168fe:	6803      	ldr	r3, [r0, #0]
 8016900:	4604      	mov	r4, r0
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	4798      	blx	r3
 8016906:	b128      	cbz	r0, 8016914 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016908:	4b07      	ldr	r3, [pc, #28]	; (8016928 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801690a:	213f      	movs	r1, #63	; 0x3f
 801690c:	4a07      	ldr	r2, [pc, #28]	; (801692c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801690e:	4808      	ldr	r0, [pc, #32]	; (8016930 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016910:	f00e fee6 	bl	80256e0 <__assert_func>
 8016914:	6923      	ldr	r3, [r4, #16]
 8016916:	68a2      	ldr	r2, [r4, #8]
 8016918:	f3bf 8f5b 	dmb	ish
 801691c:	3301      	adds	r3, #1
 801691e:	429a      	cmp	r2, r3
 8016920:	bfd8      	it	le
 8016922:	1a9b      	suble	r3, r3, r2
 8016924:	6123      	str	r3, [r4, #16]
 8016926:	bd10      	pop	{r4, pc}
 8016928:	08029673 	.word	0x08029673
 801692c:	08029792 	.word	0x08029792
 8016930:	0802962a 	.word	0x0802962a

08016934 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016934:	b570      	push	{r4, r5, r6, lr}
 8016936:	4604      	mov	r4, r0
 8016938:	6840      	ldr	r0, [r0, #4]
 801693a:	6803      	ldr	r3, [r0, #0]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	4798      	blx	r3
 8016940:	4605      	mov	r5, r0
 8016942:	b930      	cbnz	r0, 8016952 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016944:	7a23      	ldrb	r3, [r4, #8]
 8016946:	b123      	cbz	r3, 8016952 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016948:	6860      	ldr	r0, [r4, #4]
 801694a:	6803      	ldr	r3, [r0, #0]
 801694c:	695b      	ldr	r3, [r3, #20]
 801694e:	4798      	blx	r3
 8016950:	7225      	strb	r5, [r4, #8]
 8016952:	6860      	ldr	r0, [r4, #4]
 8016954:	6803      	ldr	r3, [r0, #0]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	4798      	blx	r3
 801695a:	b928      	cbnz	r0, 8016968 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801695c:	6823      	ldr	r3, [r4, #0]
 801695e:	4620      	mov	r0, r4
 8016960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016966:	4718      	bx	r3
 8016968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801696c:	f7fd bbc8 	b.w	8014100 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016970 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016970:	b510      	push	{r4, lr}
 8016972:	6082      	str	r2, [r0, #8]
 8016974:	2200      	movs	r2, #0
 8016976:	4c03      	ldr	r4, [pc, #12]	; (8016984 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016978:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801697c:	e9c0 4100 	strd	r4, r1, [r0]
 8016980:	bd10      	pop	{r4, pc}
 8016982:	bf00      	nop
 8016984:	080296f8 	.word	0x080296f8

08016988 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016988:	6840      	ldr	r0, [r0, #4]
 801698a:	6803      	ldr	r3, [r0, #0]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	4718      	bx	r3

08016990 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8016990:	2001      	movs	r0, #1
 8016992:	4770      	bx	lr

08016994 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8016994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016998:	460d      	mov	r5, r1
 801699a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801699e:	b085      	sub	sp, #20
 80169a0:	4690      	mov	r8, r2
 80169a2:	4411      	add	r1, r2
 80169a4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80169a8:	4699      	mov	r9, r3
 80169aa:	6803      	ldr	r3, [r0, #0]
 80169ac:	60c1      	str	r1, [r0, #12]
 80169ae:	4604      	mov	r4, r0
 80169b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80169b2:	440a      	add	r2, r1
 80169b4:	6102      	str	r2, [r0, #16]
 80169b6:	695b      	ldr	r3, [r3, #20]
 80169b8:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80169bc:	4798      	blx	r3
 80169be:	2800      	cmp	r0, #0
 80169c0:	d039      	beq.n	8016a36 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 80169c2:	44c8      	add	r8, r9
 80169c4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80169c8:	4445      	add	r5, r8
 80169ca:	6823      	ldr	r3, [r4, #0]
 80169cc:	f10d 020f 	add.w	r2, sp, #15
 80169d0:	a903      	add	r1, sp, #12
 80169d2:	4620      	mov	r0, r4
 80169d4:	9200      	str	r2, [sp, #0]
 80169d6:	f10d 020d 	add.w	r2, sp, #13
 80169da:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80169de:	f10d 030e 	add.w	r3, sp, #14
 80169e2:	47c0      	blx	r8
 80169e4:	b1f8      	cbz	r0, 8016a26 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 80169e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80169ea:	7a20      	ldrb	r0, [r4, #8]
 80169ec:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80169f0:	4358      	muls	r0, r3
 80169f2:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80169f6:	1c43      	adds	r3, r0, #1
 80169f8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80169fc:	f817 0b01 	ldrb.w	r0, [r7], #1
 8016a00:	121b      	asrs	r3, r3, #8
 8016a02:	fb10 f003 	smulbb	r0, r0, r3
 8016a06:	b283      	uxth	r3, r0
 8016a08:	1c58      	adds	r0, r3, #1
 8016a0a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016a0e:	6823      	ldr	r3, [r4, #0]
 8016a10:	1200      	asrs	r0, r0, #8
 8016a12:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8016a16:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016a1a:	28ff      	cmp	r0, #255	; 0xff
 8016a1c:	d10e      	bne.n	8016a3c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8016a1e:	9100      	str	r1, [sp, #0]
 8016a20:	4629      	mov	r1, r5
 8016a22:	4620      	mov	r0, r4
 8016a24:	47c0      	blx	r8
 8016a26:	68e3      	ldr	r3, [r4, #12]
 8016a28:	3e01      	subs	r6, #1
 8016a2a:	f105 0503 	add.w	r5, r5, #3
 8016a2e:	f103 0301 	add.w	r3, r3, #1
 8016a32:	60e3      	str	r3, [r4, #12]
 8016a34:	d1c9      	bne.n	80169ca <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8016a36:	b005      	add	sp, #20
 8016a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a3c:	fa1f fc80 	uxth.w	ip, r0
 8016a40:	43c0      	mvns	r0, r0
 8016a42:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016a46:	fb12 f20c 	smulbb	r2, r2, ip
 8016a4a:	b2c0      	uxtb	r0, r0
 8016a4c:	fb13 f30c 	smulbb	r3, r3, ip
 8016a50:	fb0e 2200 	mla	r2, lr, r0, r2
 8016a54:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016a58:	fb11 f10c 	smulbb	r1, r1, ip
 8016a5c:	fb0e 3300 	mla	r3, lr, r0, r3
 8016a60:	f895 e000 	ldrb.w	lr, [r5]
 8016a64:	b292      	uxth	r2, r2
 8016a66:	b29b      	uxth	r3, r3
 8016a68:	fb0e 1000 	mla	r0, lr, r0, r1
 8016a6c:	1c59      	adds	r1, r3, #1
 8016a6e:	b280      	uxth	r0, r0
 8016a70:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016a74:	1c51      	adds	r1, r2, #1
 8016a76:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016a7a:	1c41      	adds	r1, r0, #1
 8016a7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016a80:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016a84:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016a88:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016a8c:	9000      	str	r0, [sp, #0]
 8016a8e:	e7c7      	b.n	8016a20 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08016a90 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8016a90:	f89d 0000 	ldrb.w	r0, [sp]
 8016a94:	704b      	strb	r3, [r1, #1]
 8016a96:	7008      	strb	r0, [r1, #0]
 8016a98:	708a      	strb	r2, [r1, #2]
 8016a9a:	4770      	bx	lr

08016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016a9c:	b507      	push	{r0, r1, r2, lr}
 8016a9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016aa2:	ab01      	add	r3, sp, #4
 8016aa4:	6809      	ldr	r1, [r1, #0]
 8016aa6:	6800      	ldr	r0, [r0, #0]
 8016aa8:	f003 fa2a 	bl	8019f00 <_ZN8touchgfx6muldivElllRl>
 8016aac:	b003      	add	sp, #12
 8016aae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016ab4 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016ab4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016ab8:	fb90 f3f2 	sdiv	r3, r0, r2
 8016abc:	fb03 0312 	mls	r3, r3, r2, r0
 8016ac0:	4413      	add	r3, r2
 8016ac2:	fb93 f0f2 	sdiv	r0, r3, r2
 8016ac6:	fb02 3010 	mls	r0, r2, r0, r3
 8016aca:	4b0a      	ldr	r3, [pc, #40]	; (8016af4 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016acc:	285a      	cmp	r0, #90	; 0x5a
 8016ace:	dc02      	bgt.n	8016ad6 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016ad0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016ad4:	4770      	bx	lr
 8016ad6:	28b4      	cmp	r0, #180	; 0xb4
 8016ad8:	dc02      	bgt.n	8016ae0 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016ada:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016ade:	e7f7      	b.n	8016ad0 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016ae0:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016ae4:	bfd4      	ite	le
 8016ae6:	38b4      	suble	r0, #180	; 0xb4
 8016ae8:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016aec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016af0:	4240      	negs	r0, r0
 8016af2:	4770      	bx	lr
 8016af4:	080297ec 	.word	0x080297ec

08016af8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8016af8:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8016afc:	fb90 f3f2 	sdiv	r3, r0, r2
 8016b00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b02:	fb03 0012 	mls	r0, r3, r2, r0
 8016b06:	4410      	add	r0, r2
 8016b08:	fb90 f4f2 	sdiv	r4, r0, r2
 8016b0c:	fb02 0414 	mls	r4, r2, r4, r0
 8016b10:	f004 061f 	and.w	r6, r4, #31
 8016b14:	1164      	asrs	r4, r4, #5
 8016b16:	4620      	mov	r0, r4
 8016b18:	f7ff ffcc 	bl	8016ab4 <_ZN8touchgfx7CWRUtil4sineEi>
 8016b1c:	4605      	mov	r5, r0
 8016b1e:	b90e      	cbnz	r6, 8016b24 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8016b20:	b002      	add	sp, #8
 8016b22:	bd70      	pop	{r4, r5, r6, pc}
 8016b24:	1c60      	adds	r0, r4, #1
 8016b26:	f7ff ffc5 	bl	8016ab4 <_ZN8touchgfx7CWRUtil4sineEi>
 8016b2a:	ab01      	add	r3, sp, #4
 8016b2c:	2220      	movs	r2, #32
 8016b2e:	4631      	mov	r1, r6
 8016b30:	1b40      	subs	r0, r0, r5
 8016b32:	f003 f9e5 	bl	8019f00 <_ZN8touchgfx6muldivElllRl>
 8016b36:	4428      	add	r0, r5
 8016b38:	e7f2      	b.n	8016b20 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08016b3a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8016b3a:	b508      	push	{r3, lr}
 8016b3c:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8016b40:	f7ff ffda 	bl	8016af8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016b44:	bd08      	pop	{r3, pc}
	...

08016b48 <_ZN8touchgfx6CircleC1Ev>:
 8016b48:	b510      	push	{r4, lr}
 8016b4a:	4604      	mov	r4, r0
 8016b4c:	f000 fce2 	bl	8017514 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016b50:	4b08      	ldr	r3, [pc, #32]	; (8016b74 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8016b52:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8016b56:	4620      	mov	r0, r4
 8016b58:	6023      	str	r3, [r4, #0]
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8016b60:	f24b 4205 	movw	r2, #46085	; 0xb405
 8016b64:	60a3      	str	r3, [r4, #8]
 8016b66:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8016b6a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8016b6e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8016b72:	bd10      	pop	{r4, pc}
 8016b74:	080298ac 	.word	0x080298ac

08016b78 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8016b78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016b7c:	4606      	mov	r6, r0
 8016b7e:	6810      	ldr	r0, [r2, #0]
 8016b80:	4698      	mov	r8, r3
 8016b82:	4691      	mov	r9, r2
 8016b84:	460f      	mov	r7, r1
 8016b86:	f7ff ffb7 	bl	8016af8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016b8a:	a902      	add	r1, sp, #8
 8016b8c:	2402      	movs	r4, #2
 8016b8e:	f841 0d08 	str.w	r0, [r1, #-8]!
 8016b92:	4640      	mov	r0, r8
 8016b94:	f7ff ff82 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016b98:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8016b9a:	fb90 f0f4 	sdiv	r0, r0, r4
 8016b9e:	4405      	add	r5, r0
 8016ba0:	f8d9 0000 	ldr.w	r0, [r9]
 8016ba4:	f7ff ffc9 	bl	8016b3a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016ba8:	a902      	add	r1, sp, #8
 8016baa:	f841 0d04 	str.w	r0, [r1, #-4]!
 8016bae:	4640      	mov	r0, r8
 8016bb0:	f7ff ff74 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016bb4:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8016bb6:	4629      	mov	r1, r5
 8016bb8:	fb90 f0f4 	sdiv	r0, r0, r4
 8016bbc:	1a12      	subs	r2, r2, r0
 8016bbe:	4638      	mov	r0, r7
 8016bc0:	f00d fb81 	bl	80242c6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016bc4:	b003      	add	sp, #12
 8016bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016bca <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8016bca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016bce:	9e08      	ldr	r6, [sp, #32]
 8016bd0:	4698      	mov	r8, r3
 8016bd2:	4615      	mov	r5, r2
 8016bd4:	460f      	mov	r7, r1
 8016bd6:	6830      	ldr	r0, [r6, #0]
 8016bd8:	2402      	movs	r4, #2
 8016bda:	f7ff ff8d 	bl	8016af8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016bde:	a902      	add	r1, sp, #8
 8016be0:	f841 0d08 	str.w	r0, [r1, #-8]!
 8016be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016be6:	f7ff ff59 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016bea:	682d      	ldr	r5, [r5, #0]
 8016bec:	fb90 f0f4 	sdiv	r0, r0, r4
 8016bf0:	4405      	add	r5, r0
 8016bf2:	6830      	ldr	r0, [r6, #0]
 8016bf4:	f7ff ffa1 	bl	8016b3a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016bf8:	a902      	add	r1, sp, #8
 8016bfa:	f841 0d04 	str.w	r0, [r1, #-4]!
 8016bfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c00:	f7ff ff4c 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016c04:	f8d8 2000 	ldr.w	r2, [r8]
 8016c08:	4629      	mov	r1, r5
 8016c0a:	fb90 f0f4 	sdiv	r0, r0, r4
 8016c0e:	1a12      	subs	r2, r2, r0
 8016c10:	4638      	mov	r0, r7
 8016c12:	f00d fae7 	bl	80241e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016c16:	b002      	add	sp, #8
 8016c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016c1c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8016c1c:	b513      	push	{r0, r1, r4, lr}
 8016c1e:	e9cd 2300 	strd	r2, r3, [sp]
 8016c22:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8016c26:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8016c2a:	f7ff ffce 	bl	8016bca <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8016c2e:	b002      	add	sp, #8
 8016c30:	bd10      	pop	{r4, pc}

08016c32 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8016c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c34:	680e      	ldr	r6, [r1, #0]
 8016c36:	681f      	ldr	r7, [r3, #0]
 8016c38:	9807      	ldr	r0, [sp, #28]
 8016c3a:	42be      	cmp	r6, r7
 8016c3c:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8016c40:	bfb8      	it	lt
 8016c42:	601e      	strlt	r6, [r3, #0]
 8016c44:	680b      	ldr	r3, [r1, #0]
 8016c46:	6829      	ldr	r1, [r5, #0]
 8016c48:	428b      	cmp	r3, r1
 8016c4a:	bfc8      	it	gt
 8016c4c:	602b      	strgt	r3, [r5, #0]
 8016c4e:	6813      	ldr	r3, [r2, #0]
 8016c50:	6821      	ldr	r1, [r4, #0]
 8016c52:	428b      	cmp	r3, r1
 8016c54:	bfb8      	it	lt
 8016c56:	6023      	strlt	r3, [r4, #0]
 8016c58:	6813      	ldr	r3, [r2, #0]
 8016c5a:	6802      	ldr	r2, [r0, #0]
 8016c5c:	4293      	cmp	r3, r2
 8016c5e:	bfc8      	it	gt
 8016c60:	6003      	strgt	r3, [r0, #0]
 8016c62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016c64 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8016c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c68:	b089      	sub	sp, #36	; 0x24
 8016c6a:	4690      	mov	r8, r2
 8016c6c:	4606      	mov	r6, r0
 8016c6e:	2402      	movs	r4, #2
 8016c70:	ad08      	add	r5, sp, #32
 8016c72:	6808      	ldr	r0, [r1, #0]
 8016c74:	461f      	mov	r7, r3
 8016c76:	4689      	mov	r9, r1
 8016c78:	f7ff ff3e 	bl	8016af8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016c7c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016c80:	4640      	mov	r0, r8
 8016c82:	4629      	mov	r1, r5
 8016c84:	f7ff ff0a 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016c88:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8016c8a:	fb90 f0f4 	sdiv	r0, r0, r4
 8016c8e:	4418      	add	r0, r3
 8016c90:	9005      	str	r0, [sp, #20]
 8016c92:	f8d9 0000 	ldr.w	r0, [r9]
 8016c96:	f7ff ff50 	bl	8016b3a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016c9a:	4629      	mov	r1, r5
 8016c9c:	9007      	str	r0, [sp, #28]
 8016c9e:	4640      	mov	r0, r8
 8016ca0:	f7ff fefc 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016ca4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016ca6:	aa08      	add	r2, sp, #32
 8016ca8:	a905      	add	r1, sp, #20
 8016caa:	fb90 f0f4 	sdiv	r0, r0, r4
 8016cae:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8016cb0:	1a24      	subs	r4, r4, r0
 8016cb2:	4630      	mov	r0, r6
 8016cb4:	f842 4d08 	str.w	r4, [r2, #-8]!
 8016cb8:	9302      	str	r3, [sp, #8]
 8016cba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016cbc:	9301      	str	r3, [sp, #4]
 8016cbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016cc0:	9300      	str	r3, [sp, #0]
 8016cc2:	463b      	mov	r3, r7
 8016cc4:	f7ff ffb5 	bl	8016c32 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016cc8:	b009      	add	sp, #36	; 0x24
 8016cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016cce <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8016cce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cd2:	4291      	cmp	r1, r2
 8016cd4:	b08d      	sub	sp, #52	; 0x34
 8016cd6:	461e      	mov	r6, r3
 8016cd8:	4604      	mov	r4, r0
 8016cda:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8016cde:	ad0c      	add	r5, sp, #48	; 0x30
 8016ce0:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8016ce4:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8016ce8:	bfc8      	it	gt
 8016cea:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 8016cee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016cf2:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8016cf6:	1a9b      	subs	r3, r3, r2
 8016cf8:	a907      	add	r1, sp, #28
 8016cfa:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016cfe:	bfa2      	ittt	ge
 8016d00:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8016d04:	2200      	movge	r2, #0
 8016d06:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 8016d0a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8016d0c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8016d0e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016d12:	f845 3d04 	str.w	r3, [r5, #-4]!
 8016d16:	4633      	mov	r3, r6
 8016d18:	462a      	mov	r2, r5
 8016d1a:	9700      	str	r7, [sp, #0]
 8016d1c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016d20:	f7ff ffa0 	bl	8016c64 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016d24:	9b07      	ldr	r3, [sp, #28]
 8016d26:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 8016d2a:	f103 0120 	add.w	r1, r3, #32
 8016d2e:	fb91 f3f0 	sdiv	r3, r1, r0
 8016d32:	fb00 1313 	mls	r3, r0, r3, r1
 8016d36:	1ac3      	subs	r3, r0, r3
 8016d38:	fb93 f2f0 	sdiv	r2, r3, r0
 8016d3c:	fb00 3312 	mls	r3, r0, r2, r3
 8016d40:	440b      	add	r3, r1
 8016d42:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 8016d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d48:	9906      	ldr	r1, [sp, #24]
 8016d4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016d4c:	4291      	cmp	r1, r2
 8016d4e:	db11      	blt.n	8016d74 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8016d50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016d52:	4651      	mov	r1, sl
 8016d54:	9700      	str	r7, [sp, #0]
 8016d56:	4620      	mov	r0, r4
 8016d58:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016d5c:	462a      	mov	r2, r5
 8016d5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d60:	4633      	mov	r3, r6
 8016d62:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016d66:	f7ff ff7d 	bl	8016c64 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d6c:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8016d70:	9309      	str	r3, [sp, #36]	; 0x24
 8016d72:	e7e8      	b.n	8016d46 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8016d74:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8016d78:	4291      	cmp	r1, r2
 8016d7a:	dd0c      	ble.n	8016d96 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8016d7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016d7e:	a906      	add	r1, sp, #24
 8016d80:	9700      	str	r7, [sp, #0]
 8016d82:	4620      	mov	r0, r4
 8016d84:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016d88:	462a      	mov	r2, r5
 8016d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d8c:	4633      	mov	r3, r6
 8016d8e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016d92:	f7ff ff67 	bl	8016c64 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016d96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	f040 8097 	bne.w	8016ecc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 8016d9e:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8016da2:	1a52      	subs	r2, r2, r1
 8016da4:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8016da8:	da0a      	bge.n	8016dc0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 8016daa:	462a      	mov	r2, r5
 8016dac:	a90a      	add	r1, sp, #40	; 0x28
 8016dae:	9700      	str	r7, [sp, #0]
 8016db0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8016db4:	4633      	mov	r3, r6
 8016db6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016dba:	4620      	mov	r0, r4
 8016dbc:	f7ff ff52 	bl	8016c64 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016dc0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8016dc4:	2bb3      	cmp	r3, #179	; 0xb3
 8016dc6:	d87e      	bhi.n	8016ec6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8016dc8:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8016dcc:	1a1b      	subs	r3, r3, r0
 8016dce:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016dd2:	da78      	bge.n	8016ec6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8016dd4:	ad0c      	add	r5, sp, #48	; 0x30
 8016dd6:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8016dda:	f7ff fe8d 	bl	8016af8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016dde:	f04f 0a02 	mov.w	sl, #2
 8016de2:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016de6:	4658      	mov	r0, fp
 8016de8:	4629      	mov	r1, r5
 8016dea:	f7ff fe57 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016dee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016df0:	18c3      	adds	r3, r0, r3
 8016df2:	9807      	ldr	r0, [sp, #28]
 8016df4:	9305      	str	r3, [sp, #20]
 8016df6:	f7ff fea0 	bl	8016b3a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016dfa:	4629      	mov	r1, r5
 8016dfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8016dfe:	4658      	mov	r0, fp
 8016e00:	f7ff fe4c 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e06:	9a05      	ldr	r2, [sp, #20]
 8016e08:	a90a      	add	r1, sp, #40	; 0x28
 8016e0a:	1a1b      	subs	r3, r3, r0
 8016e0c:	9700      	str	r7, [sp, #0]
 8016e0e:	4620      	mov	r0, r4
 8016e10:	9304      	str	r3, [sp, #16]
 8016e12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016e14:	fb93 f3fa 	sdiv	r3, r3, sl
 8016e18:	1ad2      	subs	r2, r2, r3
 8016e1a:	920a      	str	r2, [sp, #40]	; 0x28
 8016e1c:	9a04      	ldr	r2, [sp, #16]
 8016e1e:	1ad3      	subs	r3, r2, r3
 8016e20:	462a      	mov	r2, r5
 8016e22:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e24:	4633      	mov	r3, r6
 8016e26:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016e2a:	f7ff ff02 	bl	8016c32 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016e2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016e30:	9a05      	ldr	r2, [sp, #20]
 8016e32:	a90a      	add	r1, sp, #40	; 0x28
 8016e34:	4620      	mov	r0, r4
 8016e36:	9700      	str	r7, [sp, #0]
 8016e38:	fb93 f3fa 	sdiv	r3, r3, sl
 8016e3c:	189a      	adds	r2, r3, r2
 8016e3e:	920a      	str	r2, [sp, #40]	; 0x28
 8016e40:	9a04      	ldr	r2, [sp, #16]
 8016e42:	4413      	add	r3, r2
 8016e44:	462a      	mov	r2, r5
 8016e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e48:	4633      	mov	r3, r6
 8016e4a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016e4e:	f7ff fef0 	bl	8016c32 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016e52:	9806      	ldr	r0, [sp, #24]
 8016e54:	f7ff fe50 	bl	8016af8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016e58:	4629      	mov	r1, r5
 8016e5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8016e5c:	4658      	mov	r0, fp
 8016e5e:	f7ff fe1d 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016e64:	18c3      	adds	r3, r0, r3
 8016e66:	9806      	ldr	r0, [sp, #24]
 8016e68:	9304      	str	r3, [sp, #16]
 8016e6a:	f7ff fe66 	bl	8016b3a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016e6e:	4629      	mov	r1, r5
 8016e70:	900b      	str	r0, [sp, #44]	; 0x2c
 8016e72:	4658      	mov	r0, fp
 8016e74:	f7ff fe12 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e7a:	9a04      	ldr	r2, [sp, #16]
 8016e7c:	a90a      	add	r1, sp, #40	; 0x28
 8016e7e:	eba3 0b00 	sub.w	fp, r3, r0
 8016e82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016e84:	4620      	mov	r0, r4
 8016e86:	9700      	str	r7, [sp, #0]
 8016e88:	fb93 f3fa 	sdiv	r3, r3, sl
 8016e8c:	1ad2      	subs	r2, r2, r3
 8016e8e:	ebab 0303 	sub.w	r3, fp, r3
 8016e92:	920a      	str	r2, [sp, #40]	; 0x28
 8016e94:	462a      	mov	r2, r5
 8016e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e98:	4633      	mov	r3, r6
 8016e9a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016e9e:	f7ff fec8 	bl	8016c32 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016ea2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016ea4:	9700      	str	r7, [sp, #0]
 8016ea6:	462a      	mov	r2, r5
 8016ea8:	a90a      	add	r1, sp, #40	; 0x28
 8016eaa:	4620      	mov	r0, r4
 8016eac:	fb93 fafa 	sdiv	sl, r3, sl
 8016eb0:	9b04      	ldr	r3, [sp, #16]
 8016eb2:	4453      	add	r3, sl
 8016eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8016eb6:	eb0a 030b 	add.w	r3, sl, fp
 8016eba:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ec0:	4633      	mov	r3, r6
 8016ec2:	f7ff feb6 	bl	8016c32 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016ec6:	b00d      	add	sp, #52	; 0x34
 8016ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ecc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016ece:	a907      	add	r1, sp, #28
 8016ed0:	9700      	str	r7, [sp, #0]
 8016ed2:	4620      	mov	r0, r4
 8016ed4:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8016ed8:	462a      	mov	r2, r5
 8016eda:	930b      	str	r3, [sp, #44]	; 0x2c
 8016edc:	4633      	mov	r3, r6
 8016ede:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016ee2:	f7ff febf 	bl	8016c64 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016ee6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016ee8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016eea:	a906      	add	r1, sp, #24
 8016eec:	9700      	str	r7, [sp, #0]
 8016eee:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8016ef2:	462a      	mov	r2, r5
 8016ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ef6:	4633      	mov	r3, r6
 8016ef8:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016efc:	e75d      	b.n	8016dba <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08016efe <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8016efe:	b530      	push	{r4, r5, lr}
 8016f00:	4604      	mov	r4, r0
 8016f02:	4608      	mov	r0, r1
 8016f04:	4611      	mov	r1, r2
 8016f06:	461a      	mov	r2, r3
 8016f08:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8016f0c:	b089      	sub	sp, #36	; 0x24
 8016f0e:	2500      	movs	r5, #0
 8016f10:	015b      	lsls	r3, r3, #5
 8016f12:	9505      	str	r5, [sp, #20]
 8016f14:	9304      	str	r3, [sp, #16]
 8016f16:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016f1a:	015b      	lsls	r3, r3, #5
 8016f1c:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8016f20:	ab07      	add	r3, sp, #28
 8016f22:	2520      	movs	r5, #32
 8016f24:	9302      	str	r3, [sp, #8]
 8016f26:	ab06      	add	r3, sp, #24
 8016f28:	9301      	str	r3, [sp, #4]
 8016f2a:	ab05      	add	r3, sp, #20
 8016f2c:	9300      	str	r3, [sp, #0]
 8016f2e:	ab04      	add	r3, sp, #16
 8016f30:	f7ff fecd 	bl	8016cce <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8016f34:	9a04      	ldr	r2, [sp, #16]
 8016f36:	9805      	ldr	r0, [sp, #20]
 8016f38:	9b06      	ldr	r3, [sp, #24]
 8016f3a:	9907      	ldr	r1, [sp, #28]
 8016f3c:	fb92 f2f5 	sdiv	r2, r2, r5
 8016f40:	fb90 f0f5 	sdiv	r0, r0, r5
 8016f44:	fb93 f3f5 	sdiv	r3, r3, r5
 8016f48:	fb91 f1f5 	sdiv	r1, r1, r5
 8016f4c:	b292      	uxth	r2, r2
 8016f4e:	3002      	adds	r0, #2
 8016f50:	b29b      	uxth	r3, r3
 8016f52:	3102      	adds	r1, #2
 8016f54:	1a80      	subs	r0, r0, r2
 8016f56:	3a01      	subs	r2, #1
 8016f58:	1ac9      	subs	r1, r1, r3
 8016f5a:	3b01      	subs	r3, #1
 8016f5c:	80a0      	strh	r0, [r4, #4]
 8016f5e:	4620      	mov	r0, r4
 8016f60:	8022      	strh	r2, [r4, #0]
 8016f62:	8063      	strh	r3, [r4, #2]
 8016f64:	80e1      	strh	r1, [r4, #6]
 8016f66:	b009      	add	sp, #36	; 0x24
 8016f68:	bd30      	pop	{r4, r5, pc}

08016f6a <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8016f6a:	b510      	push	{r4, lr}
 8016f6c:	4604      	mov	r4, r0
 8016f6e:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8016f72:	f7ff ffc4 	bl	8016efe <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8016f76:	4620      	mov	r0, r4
 8016f78:	bd10      	pop	{r4, pc}

08016f7a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8016f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f7e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016f80:	b0ba      	sub	sp, #232	; 0xe8
 8016f82:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8016f84:	4604      	mov	r4, r0
 8016f86:	9303      	str	r3, [sp, #12]
 8016f88:	460f      	mov	r7, r1
 8016f8a:	429a      	cmp	r2, r3
 8016f8c:	9204      	str	r2, [sp, #16]
 8016f8e:	ae0a      	add	r6, sp, #40	; 0x28
 8016f90:	bfb8      	it	lt
 8016f92:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 8016f96:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8016f9a:	1a9b      	subs	r3, r3, r2
 8016f9c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016fa0:	bfa2      	ittt	ge
 8016fa2:	2200      	movge	r2, #0
 8016fa4:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8016fa8:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 8016fac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016fae:	2a00      	cmp	r2, #0
 8016fb0:	d131      	bne.n	8017016 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8016fb2:	463a      	mov	r2, r7
 8016fb4:	4621      	mov	r1, r4
 8016fb6:	a80b      	add	r0, sp, #44	; 0x2c
 8016fb8:	f00c ffbc 	bl	8023f34 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8016fbc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016fbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016fc0:	9205      	str	r2, [sp, #20]
 8016fc2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8016fc6:	9306      	str	r3, [sp, #24]
 8016fc8:	dc6f      	bgt.n	80170aa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 8016fca:	9b03      	ldr	r3, [sp, #12]
 8016fcc:	a90b      	add	r1, sp, #44	; 0x2c
 8016fce:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8016fd2:	4620      	mov	r0, r4
 8016fd4:	9307      	str	r3, [sp, #28]
 8016fd6:	016d      	lsls	r5, r5, #5
 8016fd8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8016fdc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016fe0:	aa07      	add	r2, sp, #28
 8016fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8016fe4:	4633      	mov	r3, r6
 8016fe6:	f7ff fdc7 	bl	8016b78 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8016fea:	9f07      	ldr	r7, [sp, #28]
 8016fec:	2d00      	cmp	r5, #0
 8016fee:	d165      	bne.n	80170bc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8016ff0:	3720      	adds	r7, #32
 8016ff2:	4639      	mov	r1, r7
 8016ff4:	9a04      	ldr	r2, [sp, #16]
 8016ff6:	9b06      	ldr	r3, [sp, #24]
 8016ff8:	442f      	add	r7, r5
 8016ffa:	4291      	cmp	r1, r2
 8016ffc:	dc6b      	bgt.n	80170d6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 8016ffe:	9a05      	ldr	r2, [sp, #20]
 8017000:	4620      	mov	r0, r4
 8017002:	9107      	str	r1, [sp, #28]
 8017004:	a90b      	add	r1, sp, #44	; 0x2c
 8017006:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801700a:	aa07      	add	r2, sp, #28
 801700c:	930a      	str	r3, [sp, #40]	; 0x28
 801700e:	4633      	mov	r3, r6
 8017010:	f7ff fe04 	bl	8016c1c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017014:	e7ed      	b.n	8016ff2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8017016:	f9b1 c000 	ldrsh.w	ip, [r1]
 801701a:	88bd      	ldrh	r5, [r7, #4]
 801701c:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8017020:	4465      	add	r5, ip
 8017022:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8017026:	b22d      	sxth	r5, r5
 8017028:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 801702c:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8017030:	2d00      	cmp	r5, #0
 8017032:	bfb8      	it	lt
 8017034:	426d      	neglt	r5, r5
 8017036:	2b00      	cmp	r3, #0
 8017038:	bfb8      	it	lt
 801703a:	425b      	neglt	r3, r3
 801703c:	429d      	cmp	r5, r3
 801703e:	bfb8      	it	lt
 8017040:	461d      	movlt	r5, r3
 8017042:	88fb      	ldrh	r3, [r7, #6]
 8017044:	4403      	add	r3, r0
 8017046:	116d      	asrs	r5, r5, #5
 8017048:	b21b      	sxth	r3, r3
 801704a:	3501      	adds	r5, #1
 801704c:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8017050:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8017054:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8017058:	2b00      	cmp	r3, #0
 801705a:	f100 0001 	add.w	r0, r0, #1
 801705e:	bfb8      	it	lt
 8017060:	425b      	neglt	r3, r3
 8017062:	2900      	cmp	r1, #0
 8017064:	ea4f 0060 	mov.w	r0, r0, asr #1
 8017068:	bfb8      	it	lt
 801706a:	4249      	neglt	r1, r1
 801706c:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017070:	428b      	cmp	r3, r1
 8017072:	bfb8      	it	lt
 8017074:	460b      	movlt	r3, r1
 8017076:	115b      	asrs	r3, r3, #5
 8017078:	3301      	adds	r3, #1
 801707a:	435b      	muls	r3, r3
 801707c:	fb05 3505 	mla	r5, r5, r5, r3
 8017080:	2302      	movs	r3, #2
 8017082:	fb92 f2f3 	sdiv	r2, r2, r3
 8017086:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017088:	1a9a      	subs	r2, r3, r2
 801708a:	920a      	str	r2, [sp, #40]	; 0x28
 801708c:	f7ff fd12 	bl	8016ab4 <_ZN8touchgfx7CWRUtil4sineEi>
 8017090:	a90b      	add	r1, sp, #44	; 0x2c
 8017092:	900b      	str	r0, [sp, #44]	; 0x2c
 8017094:	4630      	mov	r0, r6
 8017096:	f7ff fd01 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801709a:	2320      	movs	r3, #32
 801709c:	fb90 f0f3 	sdiv	r0, r0, r3
 80170a0:	4340      	muls	r0, r0
 80170a2:	42a8      	cmp	r0, r5
 80170a4:	dd85      	ble.n	8016fb2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 80170a6:	2401      	movs	r4, #1
 80170a8:	e036      	b.n	8017118 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 80170aa:	2102      	movs	r1, #2
 80170ac:	fb93 f3f1 	sdiv	r3, r3, r1
 80170b0:	4413      	add	r3, r2
 80170b2:	9306      	str	r3, [sp, #24]
 80170b4:	fb93 f3f1 	sdiv	r3, r3, r1
 80170b8:	9305      	str	r3, [sp, #20]
 80170ba:	e786      	b.n	8016fca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 80170bc:	f107 0320 	add.w	r3, r7, #32
 80170c0:	fb93 f7f5 	sdiv	r7, r3, r5
 80170c4:	fb05 3717 	mls	r7, r5, r7, r3
 80170c8:	1bea      	subs	r2, r5, r7
 80170ca:	fb92 f7f5 	sdiv	r7, r2, r5
 80170ce:	fb05 2717 	mls	r7, r5, r7, r2
 80170d2:	441f      	add	r7, r3
 80170d4:	e78d      	b.n	8016ff2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 80170d6:	9907      	ldr	r1, [sp, #28]
 80170d8:	428a      	cmp	r2, r1
 80170da:	dd09      	ble.n	80170f0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 80170dc:	9a05      	ldr	r2, [sp, #20]
 80170de:	a90b      	add	r1, sp, #44	; 0x2c
 80170e0:	4620      	mov	r0, r4
 80170e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80170e6:	aa04      	add	r2, sp, #16
 80170e8:	930a      	str	r3, [sp, #40]	; 0x28
 80170ea:	4633      	mov	r3, r6
 80170ec:	f7ff fd96 	bl	8016c1c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80170f0:	9a06      	ldr	r2, [sp, #24]
 80170f2:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 80170f6:	1ac3      	subs	r3, r0, r3
 80170f8:	b992      	cbnz	r2, 8017120 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 80170fa:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80170fe:	da04      	bge.n	801710a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8017100:	a80b      	add	r0, sp, #44	; 0x2c
 8017102:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8017106:	f00d f86d 	bl	80241e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801710a:	a80b      	add	r0, sp, #44	; 0x2c
 801710c:	f00d f9df 	bl	80244ce <_ZN8touchgfx6Canvas6renderEv>
 8017110:	4604      	mov	r4, r0
 8017112:	a80b      	add	r0, sp, #44	; 0x2c
 8017114:	f00d fa18 	bl	8024548 <_ZN8touchgfx6CanvasD1Ev>
 8017118:	4620      	mov	r0, r4
 801711a:	b03a      	add	sp, #232	; 0xe8
 801711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017120:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8017124:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017128:	ea4f 1747 	mov.w	r7, r7, lsl #5
 801712c:	da2b      	bge.n	8017186 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 801712e:	f7ff fce3 	bl	8016af8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017132:	4631      	mov	r1, r6
 8017134:	900a      	str	r0, [sp, #40]	; 0x28
 8017136:	a805      	add	r0, sp, #20
 8017138:	f7ff fcb0 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801713c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801713e:	f10d 0818 	add.w	r8, sp, #24
 8017142:	4418      	add	r0, r3
 8017144:	9008      	str	r0, [sp, #32]
 8017146:	9804      	ldr	r0, [sp, #16]
 8017148:	f7ff fcf7 	bl	8016b3a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801714c:	4631      	mov	r1, r6
 801714e:	900a      	str	r0, [sp, #40]	; 0x28
 8017150:	a805      	add	r0, sp, #20
 8017152:	f7ff fca3 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017158:	1a18      	subs	r0, r3, r0
 801715a:	9b04      	ldr	r3, [sp, #16]
 801715c:	443b      	add	r3, r7
 801715e:	9009      	str	r0, [sp, #36]	; 0x24
 8017160:	930a      	str	r3, [sp, #40]	; 0x28
 8017162:	9b04      	ldr	r3, [sp, #16]
 8017164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017166:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 801716a:	4293      	cmp	r3, r2
 801716c:	dd0b      	ble.n	8017186 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 801716e:	ab09      	add	r3, sp, #36	; 0x24
 8017170:	aa08      	add	r2, sp, #32
 8017172:	a90b      	add	r1, sp, #44	; 0x2c
 8017174:	4620      	mov	r0, r4
 8017176:	e9cd 6800 	strd	r6, r8, [sp]
 801717a:	f7ff fd26 	bl	8016bca <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 801717e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017180:	443b      	add	r3, r7
 8017182:	930a      	str	r3, [sp, #40]	; 0x28
 8017184:	e7ed      	b.n	8017162 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 8017186:	9a04      	ldr	r2, [sp, #16]
 8017188:	9b07      	ldr	r3, [sp, #28]
 801718a:	429a      	cmp	r2, r3
 801718c:	dd0a      	ble.n	80171a4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 801718e:	a90b      	add	r1, sp, #44	; 0x2c
 8017190:	4620      	mov	r0, r4
 8017192:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017196:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801719a:	aa04      	add	r2, sp, #16
 801719c:	930a      	str	r3, [sp, #40]	; 0x28
 801719e:	4633      	mov	r3, r6
 80171a0:	f7ff fd3c 	bl	8016c1c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80171a4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80171a8:	4642      	mov	r2, r8
 80171aa:	9b03      	ldr	r3, [sp, #12]
 80171ac:	eba8 0805 	sub.w	r8, r8, r5
 80171b0:	429a      	cmp	r2, r3
 80171b2:	db0c      	blt.n	80171ce <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x254>
 80171b4:	9207      	str	r2, [sp, #28]
 80171b6:	a90b      	add	r1, sp, #44	; 0x2c
 80171b8:	4620      	mov	r0, r4
 80171ba:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80171be:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80171c2:	aa07      	add	r2, sp, #28
 80171c4:	930a      	str	r3, [sp, #40]	; 0x28
 80171c6:	4633      	mov	r3, r6
 80171c8:	f7ff fd28 	bl	8016c1c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80171cc:	e7ec      	b.n	80171a8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 80171ce:	9a07      	ldr	r2, [sp, #28]
 80171d0:	4293      	cmp	r3, r2
 80171d2:	da0a      	bge.n	80171ea <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x270>
 80171d4:	a90b      	add	r1, sp, #44	; 0x2c
 80171d6:	4620      	mov	r0, r4
 80171d8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80171dc:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80171e0:	aa03      	add	r2, sp, #12
 80171e2:	930a      	str	r3, [sp, #40]	; 0x28
 80171e4:	4633      	mov	r3, r6
 80171e6:	f7ff fd19 	bl	8016c1c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80171ea:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 80171ee:	1a1b      	subs	r3, r3, r0
 80171f0:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80171f4:	da89      	bge.n	801710a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 80171f6:	f7ff fc7f 	bl	8016af8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80171fa:	4631      	mov	r1, r6
 80171fc:	900a      	str	r0, [sp, #40]	; 0x28
 80171fe:	a805      	add	r0, sp, #20
 8017200:	f7ff fc4c 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017204:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017206:	ad06      	add	r5, sp, #24
 8017208:	4418      	add	r0, r3
 801720a:	9008      	str	r0, [sp, #32]
 801720c:	9803      	ldr	r0, [sp, #12]
 801720e:	f7ff fc94 	bl	8016b3a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017212:	4631      	mov	r1, r6
 8017214:	900a      	str	r0, [sp, #40]	; 0x28
 8017216:	a805      	add	r0, sp, #20
 8017218:	f7ff fc40 	bl	8016a9c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801721c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801721e:	1a18      	subs	r0, r3, r0
 8017220:	9b03      	ldr	r3, [sp, #12]
 8017222:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8017226:	9009      	str	r0, [sp, #36]	; 0x24
 8017228:	443b      	add	r3, r7
 801722a:	930a      	str	r3, [sp, #40]	; 0x28
 801722c:	9a03      	ldr	r2, [sp, #12]
 801722e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017230:	429a      	cmp	r2, r3
 8017232:	f77f af6a 	ble.w	801710a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8017236:	ab09      	add	r3, sp, #36	; 0x24
 8017238:	aa08      	add	r2, sp, #32
 801723a:	a90b      	add	r1, sp, #44	; 0x2c
 801723c:	4620      	mov	r0, r4
 801723e:	e9cd 6500 	strd	r6, r5, [sp]
 8017242:	f7ff fcc2 	bl	8016bca <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8017246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017248:	443b      	add	r3, r7
 801724a:	930a      	str	r3, [sp, #40]	; 0x28
 801724c:	e7ee      	b.n	801722c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

0801724e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 801724e:	4413      	add	r3, r2
 8017250:	7a42      	ldrb	r2, [r0, #9]
 8017252:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017256:	4419      	add	r1, r3
 8017258:	7a03      	ldrb	r3, [r0, #8]
 801725a:	435a      	muls	r2, r3
 801725c:	1c53      	adds	r3, r2, #1
 801725e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8017262:	121b      	asrs	r3, r3, #8
 8017264:	2bff      	cmp	r3, #255	; 0xff
 8017266:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017268:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801726c:	d13e      	bne.n	80172ec <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 801726e:	4427      	add	r7, r4
 8017270:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017274:	3103      	adds	r1, #3
 8017276:	7d86      	ldrb	r6, [r0, #22]
 8017278:	2bff      	cmp	r3, #255	; 0xff
 801727a:	d10a      	bne.n	8017292 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 801727c:	f801 6c03 	strb.w	r6, [r1, #-3]
 8017280:	7d43      	ldrb	r3, [r0, #21]
 8017282:	f801 3c02 	strb.w	r3, [r1, #-2]
 8017286:	7d03      	ldrb	r3, [r0, #20]
 8017288:	f801 3c01 	strb.w	r3, [r1, #-1]
 801728c:	42a7      	cmp	r7, r4
 801728e:	d1ef      	bne.n	8017270 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8017290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017292:	b29a      	uxth	r2, r3
 8017294:	43db      	mvns	r3, r3
 8017296:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801729a:	fb16 f602 	smulbb	r6, r6, r2
 801729e:	b2db      	uxtb	r3, r3
 80172a0:	fb05 6503 	mla	r5, r5, r3, r6
 80172a4:	b2ad      	uxth	r5, r5
 80172a6:	1c6e      	adds	r6, r5, #1
 80172a8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80172ac:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 80172b0:	fb16 f603 	smulbb	r6, r6, r3
 80172b4:	122d      	asrs	r5, r5, #8
 80172b6:	f801 5c03 	strb.w	r5, [r1, #-3]
 80172ba:	7d45      	ldrb	r5, [r0, #21]
 80172bc:	fb05 6502 	mla	r5, r5, r2, r6
 80172c0:	b2ad      	uxth	r5, r5
 80172c2:	1c6e      	adds	r6, r5, #1
 80172c4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80172c8:	122d      	asrs	r5, r5, #8
 80172ca:	f801 5c02 	strb.w	r5, [r1, #-2]
 80172ce:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80172d2:	7d06      	ldrb	r6, [r0, #20]
 80172d4:	fb15 f303 	smulbb	r3, r5, r3
 80172d8:	fb06 3202 	mla	r2, r6, r2, r3
 80172dc:	b292      	uxth	r2, r2
 80172de:	1c53      	adds	r3, r2, #1
 80172e0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80172e4:	1212      	asrs	r2, r2, #8
 80172e6:	f801 2c01 	strb.w	r2, [r1, #-1]
 80172ea:	e7cf      	b.n	801728c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 80172ec:	b2de      	uxtb	r6, r3
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d0ce      	beq.n	8017290 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 80172f2:	3103      	adds	r1, #3
 80172f4:	4427      	add	r7, r4
 80172f6:	f814 2b01 	ldrb.w	r2, [r4], #1
 80172fa:	3103      	adds	r1, #3
 80172fc:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8017300:	fb02 f306 	mul.w	r3, r2, r6
 8017304:	42bc      	cmp	r4, r7
 8017306:	f103 0201 	add.w	r2, r3, #1
 801730a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801730e:	ea4f 2222 	mov.w	r2, r2, asr #8
 8017312:	b295      	uxth	r5, r2
 8017314:	ea6f 0202 	mvn.w	r2, r2
 8017318:	b2d3      	uxtb	r3, r2
 801731a:	7d82      	ldrb	r2, [r0, #22]
 801731c:	fb1c fc03 	smulbb	ip, ip, r3
 8017320:	fb02 c205 	mla	r2, r2, r5, ip
 8017324:	b292      	uxth	r2, r2
 8017326:	f102 0c01 	add.w	ip, r2, #1
 801732a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801732e:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8017332:	fb1c fc03 	smulbb	ip, ip, r3
 8017336:	ea4f 2222 	mov.w	r2, r2, asr #8
 801733a:	f801 2c06 	strb.w	r2, [r1, #-6]
 801733e:	7d42      	ldrb	r2, [r0, #21]
 8017340:	fb02 c205 	mla	r2, r2, r5, ip
 8017344:	b292      	uxth	r2, r2
 8017346:	f102 0c01 	add.w	ip, r2, #1
 801734a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801734e:	ea4f 2222 	mov.w	r2, r2, asr #8
 8017352:	f801 2c05 	strb.w	r2, [r1, #-5]
 8017356:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801735a:	f890 c014 	ldrb.w	ip, [r0, #20]
 801735e:	fb12 f303 	smulbb	r3, r2, r3
 8017362:	fb0c 3305 	mla	r3, ip, r5, r3
 8017366:	b29b      	uxth	r3, r3
 8017368:	f103 0201 	add.w	r2, r3, #1
 801736c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017370:	ea4f 2323 	mov.w	r3, r3, asr #8
 8017374:	f801 3c04 	strb.w	r3, [r1, #-4]
 8017378:	d1bd      	bne.n	80172f6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801737a:	e789      	b.n	8017290 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

0801737c <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 801737c:	b510      	push	{r4, lr}
 801737e:	7d04      	ldrb	r4, [r0, #20]
 8017380:	700c      	strb	r4, [r1, #0]
 8017382:	7d41      	ldrb	r1, [r0, #21]
 8017384:	7011      	strb	r1, [r2, #0]
 8017386:	7d82      	ldrb	r2, [r0, #22]
 8017388:	701a      	strb	r2, [r3, #0]
 801738a:	9b02      	ldr	r3, [sp, #8]
 801738c:	7a42      	ldrb	r2, [r0, #9]
 801738e:	2001      	movs	r0, #1
 8017390:	701a      	strb	r2, [r3, #0]
 8017392:	bd10      	pop	{r4, pc}

08017394 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8017394:	6281      	str	r1, [r0, #40]	; 0x28
 8017396:	4770      	bx	lr

08017398 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8017398:	b513      	push	{r0, r1, r4, lr}
 801739a:	6803      	ldr	r3, [r0, #0]
 801739c:	4604      	mov	r4, r0
 801739e:	4601      	mov	r1, r0
 80173a0:	4668      	mov	r0, sp
 80173a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80173a4:	4798      	blx	r3
 80173a6:	6823      	ldr	r3, [r4, #0]
 80173a8:	4669      	mov	r1, sp
 80173aa:	4620      	mov	r0, r4
 80173ac:	691b      	ldr	r3, [r3, #16]
 80173ae:	4798      	blx	r3
 80173b0:	b002      	add	sp, #8
 80173b2:	bd10      	pop	{r4, pc}

080173b4 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80173b4:	b510      	push	{r4, lr}
 80173b6:	2200      	movs	r2, #0
 80173b8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80173bc:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80173c0:	8002      	strh	r2, [r0, #0]
 80173c2:	8042      	strh	r2, [r0, #2]
 80173c4:	8084      	strh	r4, [r0, #4]
 80173c6:	80c1      	strh	r1, [r0, #6]
 80173c8:	bd10      	pop	{r4, pc}

080173ca <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80173ca:	2200      	movs	r2, #0
 80173cc:	8002      	strh	r2, [r0, #0]
 80173ce:	8042      	strh	r2, [r0, #2]
 80173d0:	8082      	strh	r2, [r0, #4]
 80173d2:	80c2      	strh	r2, [r0, #6]
 80173d4:	4770      	bx	lr
	...

080173d8 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80173d8:	b508      	push	{r3, lr}
 80173da:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80173dc:	b928      	cbnz	r0, 80173ea <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80173de:	4b03      	ldr	r3, [pc, #12]	; (80173ec <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80173e0:	2123      	movs	r1, #35	; 0x23
 80173e2:	4a03      	ldr	r2, [pc, #12]	; (80173f0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80173e4:	4803      	ldr	r0, [pc, #12]	; (80173f4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80173e6:	f00e f97b 	bl	80256e0 <__assert_func>
 80173ea:	bd08      	pop	{r3, pc}
 80173ec:	0802994c 	.word	0x0802994c
 80173f0:	08029a30 	.word	0x08029a30
 80173f4:	08029973 	.word	0x08029973

080173f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80173f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173fc:	b089      	sub	sp, #36	; 0x24
 80173fe:	4604      	mov	r4, r0
 8017400:	6808      	ldr	r0, [r1, #0]
 8017402:	f04f 0a00 	mov.w	sl, #0
 8017406:	6849      	ldr	r1, [r1, #4]
 8017408:	ab02      	add	r3, sp, #8
 801740a:	f04f 0b01 	mov.w	fp, #1
 801740e:	c303      	stmia	r3!, {r0, r1}
 8017410:	4b3f      	ldr	r3, [pc, #252]	; (8017510 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8017412:	4621      	mov	r1, r4
 8017414:	a804      	add	r0, sp, #16
 8017416:	781b      	ldrb	r3, [r3, #0]
 8017418:	2b01      	cmp	r3, #1
 801741a:	6823      	ldr	r3, [r4, #0]
 801741c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801741e:	bf1f      	itttt	ne
 8017420:	f10d 0906 	addne.w	r9, sp, #6
 8017424:	ae03      	addne	r6, sp, #12
 8017426:	f10d 050e 	addne.w	r5, sp, #14
 801742a:	f10d 080a 	addne.w	r8, sp, #10
 801742e:	bf01      	itttt	eq
 8017430:	f10d 090e 	addeq.w	r9, sp, #14
 8017434:	f10d 0606 	addeq.w	r6, sp, #6
 8017438:	ad03      	addeq	r5, sp, #12
 801743a:	f10d 0808 	addeq.w	r8, sp, #8
 801743e:	4798      	blx	r3
 8017440:	f9b5 3000 	ldrsh.w	r3, [r5]
 8017444:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017448:	2b00      	cmp	r3, #0
 801744a:	d056      	beq.n	80174fa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 801744c:	4293      	cmp	r3, r2
 801744e:	bfa8      	it	ge
 8017450:	4613      	movge	r3, r2
 8017452:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017456:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801745a:	2f00      	cmp	r7, #0
 801745c:	dd34      	ble.n	80174c8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 801745e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8017462:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8017466:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801746a:	4484      	add	ip, r0
 801746c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8017470:	f9b6 e000 	ldrsh.w	lr, [r6]
 8017474:	fa0f fc8c 	sxth.w	ip, ip
 8017478:	f9b9 1000 	ldrsh.w	r1, [r9]
 801747c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017480:	4562      	cmp	r2, ip
 8017482:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017486:	f8ad e01c 	strh.w	lr, [sp, #28]
 801748a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801748e:	da29      	bge.n	80174e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8017490:	4472      	add	r2, lr
 8017492:	b212      	sxth	r2, r2
 8017494:	4290      	cmp	r0, r2
 8017496:	da25      	bge.n	80174e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8017498:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801749c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80174a0:	4402      	add	r2, r0
 80174a2:	b212      	sxth	r2, r2
 80174a4:	4293      	cmp	r3, r2
 80174a6:	da1d      	bge.n	80174e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80174a8:	440b      	add	r3, r1
 80174aa:	b21b      	sxth	r3, r3
 80174ac:	4298      	cmp	r0, r3
 80174ae:	da19      	bge.n	80174e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80174b0:	6823      	ldr	r3, [r4, #0]
 80174b2:	a906      	add	r1, sp, #24
 80174b4:	4620      	mov	r0, r4
 80174b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80174b8:	4798      	blx	r3
 80174ba:	b998      	cbnz	r0, 80174e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80174bc:	107f      	asrs	r7, r7, #1
 80174be:	f04f 0a01 	mov.w	sl, #1
 80174c2:	f8ad 7006 	strh.w	r7, [sp, #6]
 80174c6:	e7c6      	b.n	8017456 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80174c8:	d10c      	bne.n	80174e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80174ca:	f8ad b006 	strh.w	fp, [sp, #6]
 80174ce:	f8b8 2000 	ldrh.w	r2, [r8]
 80174d2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80174d6:	440a      	add	r2, r1
 80174d8:	f8a8 2000 	strh.w	r2, [r8]
 80174dc:	882b      	ldrh	r3, [r5, #0]
 80174de:	1a5b      	subs	r3, r3, r1
 80174e0:	802b      	strh	r3, [r5, #0]
 80174e2:	e7ad      	b.n	8017440 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80174e4:	f1ba 0f00 	cmp.w	sl, #0
 80174e8:	d0f1      	beq.n	80174ce <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 80174ea:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80174ee:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80174f2:	429a      	cmp	r2, r3
 80174f4:	bf08      	it	eq
 80174f6:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 80174f8:	e7e9      	b.n	80174ce <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 80174fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80174fe:	429a      	cmp	r2, r3
 8017500:	bf04      	itt	eq
 8017502:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8017506:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8017508:	b009      	add	sp, #36	; 0x24
 801750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801750e:	bf00      	nop
 8017510:	2000b364 	.word	0x2000b364

08017514 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8017514:	2200      	movs	r2, #0
 8017516:	2101      	movs	r1, #1
 8017518:	8082      	strh	r2, [r0, #4]
 801751a:	80c2      	strh	r2, [r0, #6]
 801751c:	8102      	strh	r2, [r0, #8]
 801751e:	8142      	strh	r2, [r0, #10]
 8017520:	8182      	strh	r2, [r0, #12]
 8017522:	81c2      	strh	r2, [r0, #14]
 8017524:	8202      	strh	r2, [r0, #16]
 8017526:	8242      	strh	r2, [r0, #18]
 8017528:	61c2      	str	r2, [r0, #28]
 801752a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801752e:	6282      	str	r2, [r0, #40]	; 0x28
 8017530:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017534:	4905      	ldr	r1, [pc, #20]	; (801754c <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8017536:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801753a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801753e:	6001      	str	r1, [r0, #0]
 8017540:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017542:	22ff      	movs	r2, #255	; 0xff
 8017544:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8017548:	4770      	bx	lr
 801754a:	bf00      	nop
 801754c:	080299b8 	.word	0x080299b8

08017550 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8017550:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8017554:	4770      	bx	lr

08017556 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8017556:	b570      	push	{r4, r5, r6, lr}
 8017558:	790b      	ldrb	r3, [r1, #4]
 801755a:	4604      	mov	r4, r0
 801755c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8017560:	460e      	mov	r6, r1
 8017562:	2b00      	cmp	r3, #0
 8017564:	bf0c      	ite	eq
 8017566:	2301      	moveq	r3, #1
 8017568:	2300      	movne	r3, #0
 801756a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801756e:	d110      	bne.n	8017592 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8017570:	b185      	cbz	r5, 8017594 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 8017572:	7933      	ldrb	r3, [r6, #4]
 8017574:	2b01      	cmp	r3, #1
 8017576:	d113      	bne.n	80175a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8017578:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801757a:	b188      	cbz	r0, 80175a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801757c:	6803      	ldr	r3, [r0, #0]
 801757e:	68db      	ldr	r3, [r3, #12]
 8017580:	4798      	blx	r3
 8017582:	b168      	cbz	r0, 80175a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8017584:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017586:	4621      	mov	r1, r4
 8017588:	6803      	ldr	r3, [r0, #0]
 801758a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801758e:	689b      	ldr	r3, [r3, #8]
 8017590:	4718      	bx	r3
 8017592:	b12d      	cbz	r5, 80175a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8017594:	6823      	ldr	r3, [r4, #0]
 8017596:	4620      	mov	r0, r4
 8017598:	695b      	ldr	r3, [r3, #20]
 801759a:	4798      	blx	r3
 801759c:	2d00      	cmp	r5, #0
 801759e:	d1e8      	bne.n	8017572 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80175a0:	bd70      	pop	{r4, r5, r6, pc}

080175a2 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 80175a2:	6803      	ldr	r3, [r0, #0]
 80175a4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80175a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80175aa:	4718      	bx	r3

080175ac <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 80175ac:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80175b0:	2bff      	cmp	r3, #255	; 0xff
 80175b2:	b510      	push	{r4, lr}
 80175b4:	d104      	bne.n	80175c0 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 80175b6:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 80175b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80175bc:	429a      	cmp	r2, r3
 80175be:	d105      	bne.n	80175cc <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 80175c0:	2300      	movs	r3, #0
 80175c2:	8003      	strh	r3, [r0, #0]
 80175c4:	8043      	strh	r3, [r0, #2]
 80175c6:	8083      	strh	r3, [r0, #4]
 80175c8:	80c3      	strh	r3, [r0, #6]
 80175ca:	bd10      	pop	{r4, pc}
 80175cc:	2300      	movs	r3, #0
 80175ce:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80175d2:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 80175d6:	8003      	strh	r3, [r0, #0]
 80175d8:	8043      	strh	r3, [r0, #2]
 80175da:	8084      	strh	r4, [r0, #4]
 80175dc:	80c2      	strh	r2, [r0, #6]
 80175de:	e7f4      	b.n	80175ca <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

080175e0 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 80175e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175e4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80175e8:	b087      	sub	sp, #28
 80175ea:	4604      	mov	r4, r0
 80175ec:	4689      	mov	r9, r1
 80175ee:	b363      	cbz	r3, 801764a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 80175f0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80175f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80175f6:	429a      	cmp	r2, r3
 80175f8:	d027      	beq.n	801764a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 80175fa:	ad06      	add	r5, sp, #24
 80175fc:	2700      	movs	r7, #0
 80175fe:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8017602:	4628      	mov	r0, r5
 8017604:	f004 fa1e 	bl	801ba44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017608:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801760c:	a904      	add	r1, sp, #16
 801760e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017612:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017616:	4620      	mov	r0, r4
 8017618:	6823      	ldr	r3, [r4, #0]
 801761a:	9704      	str	r7, [sp, #16]
 801761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801761e:	4798      	blx	r3
 8017620:	f7f5 f886 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 8017624:	6803      	ldr	r3, [r0, #0]
 8017626:	4606      	mov	r6, r0
 8017628:	4628      	mov	r0, r5
 801762a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801762e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8017630:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017634:	f004 fad4 	bl	801bbe0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017638:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801763c:	4601      	mov	r1, r0
 801763e:	9701      	str	r7, [sp, #4]
 8017640:	aa04      	add	r2, sp, #16
 8017642:	9300      	str	r3, [sp, #0]
 8017644:	4630      	mov	r0, r6
 8017646:	464b      	mov	r3, r9
 8017648:	47c0      	blx	r8
 801764a:	b007      	add	sp, #28
 801764c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017650 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8017650:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017652:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017656:	460d      	mov	r5, r1
 8017658:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801765c:	2100      	movs	r1, #0
 801765e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017662:	4604      	mov	r4, r0
 8017664:	6803      	ldr	r3, [r0, #0]
 8017666:	f8ad 2004 	strh.w	r2, [sp, #4]
 801766a:	6a1b      	ldr	r3, [r3, #32]
 801766c:	9100      	str	r1, [sp, #0]
 801766e:	4669      	mov	r1, sp
 8017670:	4798      	blx	r3
 8017672:	4621      	mov	r1, r4
 8017674:	a802      	add	r0, sp, #8
 8017676:	f002 fb7e 	bl	8019d76 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801767a:	f7f5 f859 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 801767e:	6803      	ldr	r3, [r0, #0]
 8017680:	aa02      	add	r2, sp, #8
 8017682:	4669      	mov	r1, sp
 8017684:	695e      	ldr	r6, [r3, #20]
 8017686:	462b      	mov	r3, r5
 8017688:	47b0      	blx	r6
 801768a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801768e:	2800      	cmp	r0, #0
 8017690:	bf08      	it	eq
 8017692:	461d      	moveq	r5, r3
 8017694:	84e5      	strh	r5, [r4, #38]	; 0x26
 8017696:	b004      	add	sp, #16
 8017698:	bd70      	pop	{r4, r5, r6, pc}
	...

0801769c <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801769c:	2200      	movs	r2, #0
 801769e:	8082      	strh	r2, [r0, #4]
 80176a0:	80c2      	strh	r2, [r0, #6]
 80176a2:	8102      	strh	r2, [r0, #8]
 80176a4:	8142      	strh	r2, [r0, #10]
 80176a6:	8182      	strh	r2, [r0, #12]
 80176a8:	81c2      	strh	r2, [r0, #14]
 80176aa:	8202      	strh	r2, [r0, #16]
 80176ac:	8242      	strh	r2, [r0, #18]
 80176ae:	61c2      	str	r2, [r0, #28]
 80176b0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80176b4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80176b8:	2201      	movs	r2, #1
 80176ba:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 80176be:	4a04      	ldr	r2, [pc, #16]	; (80176d0 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 80176c0:	6002      	str	r2, [r0, #0]
 80176c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80176c6:	84c2      	strh	r2, [r0, #38]	; 0x26
 80176c8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 80176cc:	4770      	bx	lr
 80176ce:	bf00      	nop
 80176d0:	08029af4 	.word	0x08029af4

080176d4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80176d4:	2200      	movs	r2, #0
 80176d6:	8002      	strh	r2, [r0, #0]
 80176d8:	8042      	strh	r2, [r0, #2]
 80176da:	8082      	strh	r2, [r0, #4]
 80176dc:	80c2      	strh	r2, [r0, #6]
 80176de:	4770      	bx	lr

080176e0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 80176e0:	b570      	push	{r4, r5, r6, lr}
 80176e2:	6803      	ldr	r3, [r0, #0]
 80176e4:	4604      	mov	r4, r0
 80176e6:	4615      	mov	r5, r2
 80176e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176ea:	4798      	blx	r3
 80176ec:	6823      	ldr	r3, [r4, #0]
 80176ee:	4629      	mov	r1, r5
 80176f0:	4620      	mov	r0, r4
 80176f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80176f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176f8:	4718      	bx	r3
	...

080176fc <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80176fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80176fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017702:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017704:	4299      	cmp	r1, r3
 8017706:	d029      	beq.n	801775c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8017708:	4b15      	ldr	r3, [pc, #84]	; (8017760 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	b92b      	cbnz	r3, 801771a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801770e:	4b15      	ldr	r3, [pc, #84]	; (8017764 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017710:	21b1      	movs	r1, #177	; 0xb1
 8017712:	4a15      	ldr	r2, [pc, #84]	; (8017768 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017714:	4815      	ldr	r0, [pc, #84]	; (801776c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017716:	f00d ffe3 	bl	80256e0 <__assert_func>
 801771a:	4a15      	ldr	r2, [pc, #84]	; (8017770 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 801771c:	8812      	ldrh	r2, [r2, #0]
 801771e:	428a      	cmp	r2, r1
 8017720:	d803      	bhi.n	801772a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8017722:	4b14      	ldr	r3, [pc, #80]	; (8017774 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8017724:	21b2      	movs	r1, #178	; 0xb2
 8017726:	4a10      	ldr	r2, [pc, #64]	; (8017768 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017728:	e7f4      	b.n	8017714 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801772a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801772e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017732:	4b11      	ldr	r3, [pc, #68]	; (8017778 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8017734:	7854      	ldrb	r4, [r2, #1]
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801773c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8017740:	682b      	ldr	r3, [r5, #0]
 8017742:	69de      	ldr	r6, [r3, #28]
 8017744:	4b0d      	ldr	r3, [pc, #52]	; (801777c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8017746:	6818      	ldr	r0, [r3, #0]
 8017748:	f7fb f8a6 	bl	8012898 <_ZNK8touchgfx5Texts7getTextEt>
 801774c:	2300      	movs	r3, #0
 801774e:	4602      	mov	r2, r0
 8017750:	4621      	mov	r1, r4
 8017752:	9300      	str	r3, [sp, #0]
 8017754:	4628      	mov	r0, r5
 8017756:	47b0      	blx	r6
 8017758:	b002      	add	sp, #8
 801775a:	bd70      	pop	{r4, r5, r6, pc}
 801775c:	2000      	movs	r0, #0
 801775e:	e7fb      	b.n	8017758 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8017760:	2000b3fc 	.word	0x2000b3fc
 8017764:	08029b5c 	.word	0x08029b5c
 8017768:	08029c98 	.word	0x08029c98
 801776c:	08029b9e 	.word	0x08029b9e
 8017770:	2000b400 	.word	0x2000b400
 8017774:	08029bc7 	.word	0x08029bc7
 8017778:	2000b404 	.word	0x2000b404
 801777c:	2000b408 	.word	0x2000b408

08017780 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8017780:	b570      	push	{r4, r5, r6, lr}
 8017782:	6803      	ldr	r3, [r0, #0]
 8017784:	4604      	mov	r4, r0
 8017786:	b28d      	uxth	r5, r1
 8017788:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801778a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 801778c:	4b10      	ldr	r3, [pc, #64]	; (80177d0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	b92b      	cbnz	r3, 801779e <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8017792:	4b10      	ldr	r3, [pc, #64]	; (80177d4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8017794:	21b1      	movs	r1, #177	; 0xb1
 8017796:	4a10      	ldr	r2, [pc, #64]	; (80177d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8017798:	4810      	ldr	r0, [pc, #64]	; (80177dc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801779a:	f00d ffa1 	bl	80256e0 <__assert_func>
 801779e:	4910      	ldr	r1, [pc, #64]	; (80177e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80177a0:	8809      	ldrh	r1, [r1, #0]
 80177a2:	4291      	cmp	r1, r2
 80177a4:	d803      	bhi.n	80177ae <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80177a6:	4b0f      	ldr	r3, [pc, #60]	; (80177e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80177a8:	21b2      	movs	r1, #178	; 0xb2
 80177aa:	4a0b      	ldr	r2, [pc, #44]	; (80177d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80177ac:	e7f4      	b.n	8017798 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 80177ae:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80177b2:	4b0d      	ldr	r3, [pc, #52]	; (80177e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80177ba:	6803      	ldr	r3, [r0, #0]
 80177bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177be:	4798      	blx	r3
 80177c0:	1a29      	subs	r1, r5, r0
 80177c2:	4633      	mov	r3, r6
 80177c4:	4620      	mov	r0, r4
 80177c6:	b209      	sxth	r1, r1
 80177c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177cc:	4718      	bx	r3
 80177ce:	bf00      	nop
 80177d0:	2000b3fc 	.word	0x2000b3fc
 80177d4:	08029b5c 	.word	0x08029b5c
 80177d8:	08029c98 	.word	0x08029c98
 80177dc:	08029b9e 	.word	0x08029b9e
 80177e0:	2000b400 	.word	0x2000b400
 80177e4:	08029bc7 	.word	0x08029bc7
 80177e8:	2000b404 	.word	0x2000b404

080177ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80177ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80177f4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80177f6:	b08c      	sub	sp, #48	; 0x30
 80177f8:	4604      	mov	r4, r0
 80177fa:	4293      	cmp	r3, r2
 80177fc:	4688      	mov	r8, r1
 80177fe:	d05f      	beq.n	80178c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017800:	4e31      	ldr	r6, [pc, #196]	; (80178c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8017802:	6832      	ldr	r2, [r6, #0]
 8017804:	b92a      	cbnz	r2, 8017812 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8017806:	4b31      	ldr	r3, [pc, #196]	; (80178cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8017808:	21b1      	movs	r1, #177	; 0xb1
 801780a:	4a31      	ldr	r2, [pc, #196]	; (80178d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801780c:	4831      	ldr	r0, [pc, #196]	; (80178d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801780e:	f00d ff67 	bl	80256e0 <__assert_func>
 8017812:	4d31      	ldr	r5, [pc, #196]	; (80178d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8017814:	8829      	ldrh	r1, [r5, #0]
 8017816:	4299      	cmp	r1, r3
 8017818:	d803      	bhi.n	8017822 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801781a:	4b30      	ldr	r3, [pc, #192]	; (80178dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 801781c:	21b2      	movs	r1, #178	; 0xb2
 801781e:	4a2c      	ldr	r2, [pc, #176]	; (80178d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8017820:	e7f4      	b.n	801780c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8017822:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017826:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801782a:	4b2d      	ldr	r3, [pc, #180]	; (80178e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017832:	2a00      	cmp	r2, #0
 8017834:	d044      	beq.n	80178c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017836:	784b      	ldrb	r3, [r1, #1]
 8017838:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 801783c:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8017840:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017844:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8017848:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801784c:	4b25      	ldr	r3, [pc, #148]	; (80178e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801784e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8017858:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801785c:	9207      	str	r2, [sp, #28]
 801785e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017860:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017864:	9009      	str	r0, [sp, #36]	; 0x24
 8017866:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801786a:	f88d 9020 	strb.w	r9, [sp, #32]
 801786e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8017872:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8017876:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801787a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801787e:	b10a      	cbz	r2, 8017884 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8017880:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8017882:	b907      	cbnz	r7, 8017886 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8017884:	689f      	ldr	r7, [r3, #8]
 8017886:	f10d 0914 	add.w	r9, sp, #20
 801788a:	4621      	mov	r1, r4
 801788c:	4648      	mov	r0, r9
 801788e:	f002 fa72 	bl	8019d76 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017892:	6833      	ldr	r3, [r6, #0]
 8017894:	2b00      	cmp	r3, #0
 8017896:	d0b6      	beq.n	8017806 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8017898:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801789a:	882b      	ldrh	r3, [r5, #0]
 801789c:	428b      	cmp	r3, r1
 801789e:	d9bc      	bls.n	801781a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80178a0:	4b11      	ldr	r3, [pc, #68]	; (80178e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80178a2:	6818      	ldr	r0, [r3, #0]
 80178a4:	f7fa fff8 	bl	8012898 <_ZNK8touchgfx5Texts7getTextEt>
 80178a8:	2300      	movs	r3, #0
 80178aa:	9001      	str	r0, [sp, #4]
 80178ac:	4638      	mov	r0, r7
 80178ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80178b2:	ab07      	add	r3, sp, #28
 80178b4:	9300      	str	r3, [sp, #0]
 80178b6:	4643      	mov	r3, r8
 80178b8:	e899 0006 	ldmia.w	r9, {r1, r2}
 80178bc:	f7fa ff7d 	bl	80127ba <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80178c0:	b00c      	add	sp, #48	; 0x30
 80178c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178c6:	bf00      	nop
 80178c8:	2000b3fc 	.word	0x2000b3fc
 80178cc:	08029b5c 	.word	0x08029b5c
 80178d0:	08029c98 	.word	0x08029c98
 80178d4:	08029b9e 	.word	0x08029b9e
 80178d8:	2000b400 	.word	0x2000b400
 80178dc:	08029bc7 	.word	0x08029bc7
 80178e0:	2000b404 	.word	0x2000b404
 80178e4:	2000b36c 	.word	0x2000b36c
 80178e8:	2000b408 	.word	0x2000b408

080178ec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80178ec:	b40e      	push	{r1, r2, r3}
 80178ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80178f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178f6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80178f8:	b09b      	sub	sp, #108	; 0x6c
 80178fa:	4604      	mov	r4, r0
 80178fc:	4293      	cmp	r3, r2
 80178fe:	d061      	beq.n	80179c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8017900:	aa24      	add	r2, sp, #144	; 0x90
 8017902:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80179d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8017906:	9203      	str	r2, [sp, #12]
 8017908:	f8da 2000 	ldr.w	r2, [sl]
 801790c:	b92a      	cbnz	r2, 801791a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801790e:	4b2e      	ldr	r3, [pc, #184]	; (80179c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8017910:	21b1      	movs	r1, #177	; 0xb1
 8017912:	4a2e      	ldr	r2, [pc, #184]	; (80179cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8017914:	482e      	ldr	r0, [pc, #184]	; (80179d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8017916:	f00d fee3 	bl	80256e0 <__assert_func>
 801791a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80179dc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 801791e:	f8b8 1000 	ldrh.w	r1, [r8]
 8017922:	4299      	cmp	r1, r3
 8017924:	d803      	bhi.n	801792e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8017926:	4b2b      	ldr	r3, [pc, #172]	; (80179d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8017928:	21b2      	movs	r1, #178	; 0xb2
 801792a:	4a28      	ldr	r2, [pc, #160]	; (80179cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 801792c:	e7f2      	b.n	8017914 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801792e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80179e0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8017932:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017936:	f8d9 3000 	ldr.w	r3, [r9]
 801793a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	4638      	mov	r0, r7
 8017942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017944:	4798      	blx	r3
 8017946:	4606      	mov	r6, r0
 8017948:	b205      	sxth	r5, r0
 801794a:	a804      	add	r0, sp, #16
 801794c:	f002 feb5 	bl	801a6ba <_ZN8touchgfx12TextProviderC1Ev>
 8017950:	683b      	ldr	r3, [r7, #0]
 8017952:	4638      	mov	r0, r7
 8017954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017956:	4798      	blx	r3
 8017958:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801795a:	4603      	mov	r3, r0
 801795c:	9a03      	ldr	r2, [sp, #12]
 801795e:	a804      	add	r0, sp, #16
 8017960:	f002 fef0 	bl	801a744 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017964:	f8da 3000 	ldr.w	r3, [sl]
 8017968:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801796c:	2b00      	cmp	r3, #0
 801796e:	d0ce      	beq.n	801790e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8017970:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017972:	f8b8 0000 	ldrh.w	r0, [r8]
 8017976:	4290      	cmp	r0, r2
 8017978:	d9d5      	bls.n	8017926 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801797a:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 801797e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017982:	f8d9 3000 	ldr.w	r3, [r9]
 8017986:	787a      	ldrb	r2, [r7, #1]
 8017988:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 801798c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017990:	9700      	str	r7, [sp, #0]
 8017992:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017996:	a804      	add	r0, sp, #16
 8017998:	f001 f918 	bl	8018bcc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801799c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80179a0:	b203      	sxth	r3, r0
 80179a2:	18a9      	adds	r1, r5, r2
 80179a4:	2900      	cmp	r1, #0
 80179a6:	dd0b      	ble.n	80179c0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 80179a8:	3b01      	subs	r3, #1
 80179aa:	fb13 f302 	smulbb	r3, r3, r2
 80179ae:	fb16 3300 	smlabb	r3, r6, r0, r3
 80179b2:	b21d      	sxth	r5, r3
 80179b4:	4628      	mov	r0, r5
 80179b6:	b01b      	add	sp, #108	; 0x6c
 80179b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179bc:	b003      	add	sp, #12
 80179be:	4770      	bx	lr
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	dcf7      	bgt.n	80179b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80179c4:	2500      	movs	r5, #0
 80179c6:	e7f5      	b.n	80179b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80179c8:	08029b5c 	.word	0x08029b5c
 80179cc:	08029c98 	.word	0x08029c98
 80179d0:	08029b9e 	.word	0x08029b9e
 80179d4:	08029bc7 	.word	0x08029bc7
 80179d8:	2000b3fc 	.word	0x2000b3fc
 80179dc:	2000b400 	.word	0x2000b400
 80179e0:	2000b404 	.word	0x2000b404

080179e4 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80179e4:	b570      	push	{r4, r5, r6, lr}
 80179e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80179ea:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80179ec:	4604      	mov	r4, r0
 80179ee:	4299      	cmp	r1, r3
 80179f0:	d01e      	beq.n	8017a30 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 80179f2:	6803      	ldr	r3, [r0, #0]
 80179f4:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80179f6:	4b0f      	ldr	r3, [pc, #60]	; (8017a34 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	b92b      	cbnz	r3, 8017a08 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 80179fc:	4b0e      	ldr	r3, [pc, #56]	; (8017a38 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 80179fe:	21b1      	movs	r1, #177	; 0xb1
 8017a00:	4a0e      	ldr	r2, [pc, #56]	; (8017a3c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017a02:	480f      	ldr	r0, [pc, #60]	; (8017a40 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8017a04:	f00d fe6c 	bl	80256e0 <__assert_func>
 8017a08:	4b0e      	ldr	r3, [pc, #56]	; (8017a44 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8017a0a:	881b      	ldrh	r3, [r3, #0]
 8017a0c:	428b      	cmp	r3, r1
 8017a0e:	d803      	bhi.n	8017a18 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8017a10:	4b0d      	ldr	r3, [pc, #52]	; (8017a48 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8017a12:	21b2      	movs	r1, #178	; 0xb2
 8017a14:	4a09      	ldr	r2, [pc, #36]	; (8017a3c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017a16:	e7f4      	b.n	8017a02 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8017a18:	4b0c      	ldr	r3, [pc, #48]	; (8017a4c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8017a1a:	6818      	ldr	r0, [r3, #0]
 8017a1c:	f7fa ff3c 	bl	8012898 <_ZNK8touchgfx5Texts7getTextEt>
 8017a20:	2300      	movs	r3, #0
 8017a22:	4601      	mov	r1, r0
 8017a24:	46ac      	mov	ip, r5
 8017a26:	4620      	mov	r0, r4
 8017a28:	461a      	mov	r2, r3
 8017a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a2e:	4760      	bx	ip
 8017a30:	2000      	movs	r0, #0
 8017a32:	bd70      	pop	{r4, r5, r6, pc}
 8017a34:	2000b3fc 	.word	0x2000b3fc
 8017a38:	08029b5c 	.word	0x08029b5c
 8017a3c:	08029c98 	.word	0x08029c98
 8017a40:	08029b9e 	.word	0x08029b9e
 8017a44:	2000b400 	.word	0x2000b400
 8017a48:	08029bc7 	.word	0x08029bc7
 8017a4c:	2000b408 	.word	0x2000b408

08017a50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017a50:	b570      	push	{r4, r5, r6, lr}
 8017a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a56:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017a58:	4604      	mov	r4, r0
 8017a5a:	429a      	cmp	r2, r3
 8017a5c:	d021      	beq.n	8017aa2 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8017a5e:	6803      	ldr	r3, [r0, #0]
 8017a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a62:	4798      	blx	r3
 8017a64:	6823      	ldr	r3, [r4, #0]
 8017a66:	4605      	mov	r5, r0
 8017a68:	4620      	mov	r0, r4
 8017a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017a6c:	4798      	blx	r3
 8017a6e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017a72:	4606      	mov	r6, r0
 8017a74:	b22d      	sxth	r5, r5
 8017a76:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017a7a:	6823      	ldr	r3, [r4, #0]
 8017a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a7e:	d109      	bne.n	8017a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8017a80:	4629      	mov	r1, r5
 8017a82:	4620      	mov	r0, r4
 8017a84:	4798      	blx	r3
 8017a86:	6823      	ldr	r3, [r4, #0]
 8017a88:	4631      	mov	r1, r6
 8017a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a92:	4718      	bx	r3
 8017a94:	4601      	mov	r1, r0
 8017a96:	4620      	mov	r0, r4
 8017a98:	4798      	blx	r3
 8017a9a:	6823      	ldr	r3, [r4, #0]
 8017a9c:	4629      	mov	r1, r5
 8017a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017aa0:	e7f4      	b.n	8017a8c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8017aa2:	bd70      	pop	{r4, r5, r6, pc}

08017aa4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8017aa4:	888a      	ldrh	r2, [r1, #4]
 8017aa6:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017aa8:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017aac:	b922      	cbnz	r2, 8017ab8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8017aae:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017ab2:	b90b      	cbnz	r3, 8017ab8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8017ab4:	f7ff bfcc 	b.w	8017a50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017ab8:	4770      	bx	lr

08017aba <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017aba:	2300      	movs	r3, #0
 8017abc:	8003      	strh	r3, [r0, #0]
 8017abe:	8043      	strh	r3, [r0, #2]
 8017ac0:	8083      	strh	r3, [r0, #4]
 8017ac2:	80c3      	strh	r3, [r0, #6]
 8017ac4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8017ac8:	b91b      	cbnz	r3, 8017ad2 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8017aca:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017ace:	2bff      	cmp	r3, #255	; 0xff
 8017ad0:	d103      	bne.n	8017ada <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8017ad2:	890b      	ldrh	r3, [r1, #8]
 8017ad4:	8083      	strh	r3, [r0, #4]
 8017ad6:	894b      	ldrh	r3, [r1, #10]
 8017ad8:	80c3      	strh	r3, [r0, #6]
 8017ada:	4770      	bx	lr

08017adc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ade:	4604      	mov	r4, r0
 8017ae0:	466b      	mov	r3, sp
 8017ae2:	6808      	ldr	r0, [r1, #0]
 8017ae4:	6849      	ldr	r1, [r1, #4]
 8017ae6:	c303      	stmia	r3!, {r0, r1}
 8017ae8:	6823      	ldr	r3, [r4, #0]
 8017aea:	4669      	mov	r1, sp
 8017aec:	4620      	mov	r0, r4
 8017aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017af0:	4798      	blx	r3
 8017af2:	4b08      	ldr	r3, [pc, #32]	; (8017b14 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017afa:	b10a      	cbz	r2, 8017b00 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017afc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017afe:	b900      	cbnz	r0, 8017b02 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017b00:	6898      	ldr	r0, [r3, #8]
 8017b02:	6803      	ldr	r3, [r0, #0]
 8017b04:	4669      	mov	r1, sp
 8017b06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017b08:	699d      	ldr	r5, [r3, #24]
 8017b0a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017b0e:	47a8      	blx	r5
 8017b10:	b003      	add	sp, #12
 8017b12:	bd30      	pop	{r4, r5, pc}
 8017b14:	2000b36c 	.word	0x2000b36c

08017b18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8017b18:	b538      	push	{r3, r4, r5, lr}
 8017b1a:	880b      	ldrh	r3, [r1, #0]
 8017b1c:	4605      	mov	r5, r0
 8017b1e:	4604      	mov	r4, r0
 8017b20:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8017b22:	8813      	ldrh	r3, [r2, #0]
 8017b24:	f825 3f30 	strh.w	r3, [r5, #48]!
 8017b28:	4628      	mov	r0, r5
 8017b2a:	f003 ff8b 	bl	801ba44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017b2e:	8120      	strh	r0, [r4, #8]
 8017b30:	4628      	mov	r0, r5
 8017b32:	f003 ffc1 	bl	801bab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017b36:	8160      	strh	r0, [r4, #10]
 8017b38:	bd38      	pop	{r3, r4, r5, pc}

08017b3a <_ZNK8touchgfx6Button12getSolidRectEv>:
 8017b3a:	b510      	push	{r4, lr}
 8017b3c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8017b40:	4604      	mov	r4, r0
 8017b42:	2bff      	cmp	r3, #255	; 0xff
 8017b44:	d006      	beq.n	8017b54 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8017b46:	2300      	movs	r3, #0
 8017b48:	8003      	strh	r3, [r0, #0]
 8017b4a:	8043      	strh	r3, [r0, #2]
 8017b4c:	8083      	strh	r3, [r0, #4]
 8017b4e:	80c3      	strh	r3, [r0, #6]
 8017b50:	4620      	mov	r0, r4
 8017b52:	bd10      	pop	{r4, pc}
 8017b54:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8017b58:	b11b      	cbz	r3, 8017b62 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8017b5a:	3130      	adds	r1, #48	; 0x30
 8017b5c:	f003 ffe6 	bl	801bb2c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017b60:	e7f6      	b.n	8017b50 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8017b62:	312e      	adds	r1, #46	; 0x2e
 8017b64:	e7fa      	b.n	8017b5c <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08017b68 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8017b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b6c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8017b70:	b08a      	sub	sp, #40	; 0x28
 8017b72:	4604      	mov	r4, r0
 8017b74:	4688      	mov	r8, r1
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d044      	beq.n	8017c04 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8017b7a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8017b7c:	a805      	add	r0, sp, #20
 8017b7e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017b82:	f003 ff5f 	bl	801ba44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017b86:	4605      	mov	r5, r0
 8017b88:	b206      	sxth	r6, r0
 8017b8a:	a805      	add	r0, sp, #20
 8017b8c:	f003 ff94 	bl	801bab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017b90:	f9b8 2000 	ldrsh.w	r2, [r8]
 8017b94:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8017b98:	2300      	movs	r3, #0
 8017b9a:	fa0f fc80 	sxth.w	ip, r0
 8017b9e:	4417      	add	r7, r2
 8017ba0:	9306      	str	r3, [sp, #24]
 8017ba2:	b2bf      	uxth	r7, r7
 8017ba4:	fa0f fe87 	sxth.w	lr, r7
 8017ba8:	459e      	cmp	lr, r3
 8017baa:	dd2d      	ble.n	8017c08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017bac:	4296      	cmp	r6, r2
 8017bae:	dd2b      	ble.n	8017c08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017bb0:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8017bb4:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8017bb8:	4419      	add	r1, r3
 8017bba:	b289      	uxth	r1, r1
 8017bbc:	fa0f f881 	sxth.w	r8, r1
 8017bc0:	f1b8 0f00 	cmp.w	r8, #0
 8017bc4:	dd20      	ble.n	8017c08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017bc6:	459c      	cmp	ip, r3
 8017bc8:	dd1e      	ble.n	8017c08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017bca:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8017bce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017bd2:	4576      	cmp	r6, lr
 8017bd4:	bfa8      	it	ge
 8017bd6:	463d      	movge	r5, r7
 8017bd8:	45c4      	cmp	ip, r8
 8017bda:	bfa8      	it	ge
 8017bdc:	4608      	movge	r0, r1
 8017bde:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017be2:	1aad      	subs	r5, r5, r2
 8017be4:	1ac0      	subs	r0, r0, r3
 8017be6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017bea:	f8ad 501c 	strh.w	r5, [sp, #28]
 8017bee:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017bf2:	4b1f      	ldr	r3, [pc, #124]	; (8017c70 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	b953      	cbnz	r3, 8017c0e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8017bf8:	4b1e      	ldr	r3, [pc, #120]	; (8017c74 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8017bfa:	2189      	movs	r1, #137	; 0x89
 8017bfc:	4a1e      	ldr	r2, [pc, #120]	; (8017c78 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8017bfe:	481f      	ldr	r0, [pc, #124]	; (8017c7c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8017c00:	f00d fd6e 	bl	80256e0 <__assert_func>
 8017c04:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8017c06:	e7b9      	b.n	8017b7c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8017c08:	2300      	movs	r3, #0
 8017c0a:	9307      	str	r3, [sp, #28]
 8017c0c:	e7f1      	b.n	8017bf2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8017c0e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017c16:	429a      	cmp	r2, r3
 8017c18:	d026      	beq.n	8017c68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017c1a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	dd22      	ble.n	8017c68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017c22:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	dd1e      	ble.n	8017c68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	a908      	add	r1, sp, #32
 8017c2e:	4620      	mov	r0, r4
 8017c30:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017c34:	6823      	ldr	r3, [r4, #0]
 8017c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c38:	4798      	blx	r3
 8017c3a:	4b11      	ldr	r3, [pc, #68]	; (8017c80 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017c42:	b10a      	cbz	r2, 8017c48 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8017c44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017c46:	b900      	cbnz	r0, 8017c4a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8017c48:	6898      	ldr	r0, [r3, #8]
 8017c4a:	2501      	movs	r5, #1
 8017c4c:	6801      	ldr	r1, [r0, #0]
 8017c4e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017c52:	9502      	str	r5, [sp, #8]
 8017c54:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8017c58:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017c5c:	9401      	str	r4, [sp, #4]
 8017c5e:	ac06      	add	r4, sp, #24
 8017c60:	9400      	str	r4, [sp, #0]
 8017c62:	688c      	ldr	r4, [r1, #8]
 8017c64:	a905      	add	r1, sp, #20
 8017c66:	47a0      	blx	r4
 8017c68:	b00a      	add	sp, #40	; 0x28
 8017c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c6e:	bf00      	nop
 8017c70:	2000b434 	.word	0x2000b434
 8017c74:	08029d30 	.word	0x08029d30
 8017c78:	08029e04 	.word	0x08029e04
 8017c7c:	08029d6c 	.word	0x08029d6c
 8017c80:	2000b36c 	.word	0x2000b36c

08017c84 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017c8a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017c8c:	4606      	mov	r6, r0
 8017c8e:	4299      	cmp	r1, r3
 8017c90:	d02a      	beq.n	8017ce8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8017c92:	4b16      	ldr	r3, [pc, #88]	; (8017cec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	b92b      	cbnz	r3, 8017ca4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8017c98:	4b15      	ldr	r3, [pc, #84]	; (8017cf0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8017c9a:	21b1      	movs	r1, #177	; 0xb1
 8017c9c:	4a15      	ldr	r2, [pc, #84]	; (8017cf4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017c9e:	4816      	ldr	r0, [pc, #88]	; (8017cf8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8017ca0:	f00d fd1e 	bl	80256e0 <__assert_func>
 8017ca4:	4a15      	ldr	r2, [pc, #84]	; (8017cfc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8017ca6:	8812      	ldrh	r2, [r2, #0]
 8017ca8:	428a      	cmp	r2, r1
 8017caa:	d803      	bhi.n	8017cb4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8017cac:	4b14      	ldr	r3, [pc, #80]	; (8017d00 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8017cae:	21b2      	movs	r1, #178	; 0xb2
 8017cb0:	4a10      	ldr	r2, [pc, #64]	; (8017cf4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017cb2:	e7f4      	b.n	8017c9e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8017cb4:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017cb8:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017cbc:	4b11      	ldr	r3, [pc, #68]	; (8017d04 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8017cbe:	7854      	ldrb	r4, [r2, #1]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8017cc6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8017cca:	682b      	ldr	r3, [r5, #0]
 8017ccc:	69df      	ldr	r7, [r3, #28]
 8017cce:	4b0e      	ldr	r3, [pc, #56]	; (8017d08 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8017cd0:	6818      	ldr	r0, [r3, #0]
 8017cd2:	f7fa fde1 	bl	8012898 <_ZNK8touchgfx5Texts7getTextEt>
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	4602      	mov	r2, r0
 8017cda:	4621      	mov	r1, r4
 8017cdc:	9300      	str	r3, [sp, #0]
 8017cde:	4628      	mov	r0, r5
 8017ce0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8017ce2:	47b8      	blx	r7
 8017ce4:	b003      	add	sp, #12
 8017ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ce8:	2000      	movs	r0, #0
 8017cea:	e7fb      	b.n	8017ce4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8017cec:	2000b3fc 	.word	0x2000b3fc
 8017cf0:	08029b5c 	.word	0x08029b5c
 8017cf4:	08029eb4 	.word	0x08029eb4
 8017cf8:	08029b9e 	.word	0x08029b9e
 8017cfc:	2000b400 	.word	0x2000b400
 8017d00:	08029bc7 	.word	0x08029bc7
 8017d04:	2000b404 	.word	0x2000b404
 8017d08:	2000b408 	.word	0x2000b408

08017d0c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017d0c:	b570      	push	{r4, r5, r6, lr}
 8017d0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d12:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017d14:	4604      	mov	r4, r0
 8017d16:	4299      	cmp	r1, r3
 8017d18:	d01e      	beq.n	8017d58 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8017d1a:	6803      	ldr	r3, [r0, #0]
 8017d1c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017d1e:	4b0f      	ldr	r3, [pc, #60]	; (8017d5c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	b92b      	cbnz	r3, 8017d30 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8017d24:	4b0e      	ldr	r3, [pc, #56]	; (8017d60 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8017d26:	21b1      	movs	r1, #177	; 0xb1
 8017d28:	4a0e      	ldr	r2, [pc, #56]	; (8017d64 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017d2a:	480f      	ldr	r0, [pc, #60]	; (8017d68 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8017d2c:	f00d fcd8 	bl	80256e0 <__assert_func>
 8017d30:	4b0e      	ldr	r3, [pc, #56]	; (8017d6c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8017d32:	881b      	ldrh	r3, [r3, #0]
 8017d34:	428b      	cmp	r3, r1
 8017d36:	d803      	bhi.n	8017d40 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8017d38:	4b0d      	ldr	r3, [pc, #52]	; (8017d70 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8017d3a:	21b2      	movs	r1, #178	; 0xb2
 8017d3c:	4a09      	ldr	r2, [pc, #36]	; (8017d64 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017d3e:	e7f4      	b.n	8017d2a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8017d40:	4b0c      	ldr	r3, [pc, #48]	; (8017d74 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8017d42:	6818      	ldr	r0, [r3, #0]
 8017d44:	f7fa fda8 	bl	8012898 <_ZNK8touchgfx5Texts7getTextEt>
 8017d48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017d4a:	4601      	mov	r1, r0
 8017d4c:	46ac      	mov	ip, r5
 8017d4e:	4620      	mov	r0, r4
 8017d50:	2300      	movs	r3, #0
 8017d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d56:	4760      	bx	ip
 8017d58:	2000      	movs	r0, #0
 8017d5a:	bd70      	pop	{r4, r5, r6, pc}
 8017d5c:	2000b3fc 	.word	0x2000b3fc
 8017d60:	08029b5c 	.word	0x08029b5c
 8017d64:	08029eb4 	.word	0x08029eb4
 8017d68:	08029b9e 	.word	0x08029b9e
 8017d6c:	2000b400 	.word	0x2000b400
 8017d70:	08029bc7 	.word	0x08029bc7
 8017d74:	2000b408 	.word	0x2000b408

08017d78 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8017d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d80:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017d82:	b08c      	sub	sp, #48	; 0x30
 8017d84:	4604      	mov	r4, r0
 8017d86:	4293      	cmp	r3, r2
 8017d88:	460e      	mov	r6, r1
 8017d8a:	d05d      	beq.n	8017e48 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017d8c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8017e6c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8017d90:	f8d8 2000 	ldr.w	r2, [r8]
 8017d94:	b92a      	cbnz	r2, 8017da2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8017d96:	4b2e      	ldr	r3, [pc, #184]	; (8017e50 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8017d98:	21b1      	movs	r1, #177	; 0xb1
 8017d9a:	4a2e      	ldr	r2, [pc, #184]	; (8017e54 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017d9c:	482e      	ldr	r0, [pc, #184]	; (8017e58 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8017d9e:	f00d fc9f 	bl	80256e0 <__assert_func>
 8017da2:	4f2e      	ldr	r7, [pc, #184]	; (8017e5c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8017da4:	8839      	ldrh	r1, [r7, #0]
 8017da6:	4299      	cmp	r1, r3
 8017da8:	d803      	bhi.n	8017db2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8017daa:	4b2d      	ldr	r3, [pc, #180]	; (8017e60 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8017dac:	21b2      	movs	r1, #178	; 0xb2
 8017dae:	4a29      	ldr	r2, [pc, #164]	; (8017e54 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017db0:	e7f4      	b.n	8017d9c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8017db2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017db6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017dba:	4b2a      	ldr	r3, [pc, #168]	; (8017e64 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017dc2:	2a00      	cmp	r2, #0
 8017dc4:	d040      	beq.n	8017e48 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017dc6:	784b      	ldrb	r3, [r1, #1]
 8017dc8:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8017dcc:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8017dd0:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8017dd4:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8017dd8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017ddc:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8017de0:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8017de4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017de8:	ad05      	add	r5, sp, #20
 8017dea:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017dec:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8017df0:	9207      	str	r2, [sp, #28]
 8017df2:	f88d 9020 	strb.w	r9, [sp, #32]
 8017df6:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8017dfa:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8017dfe:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8017e02:	9009      	str	r0, [sp, #36]	; 0x24
 8017e04:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8017e08:	f7f4 fc92 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 8017e0c:	4621      	mov	r1, r4
 8017e0e:	4681      	mov	r9, r0
 8017e10:	4628      	mov	r0, r5
 8017e12:	f001 ffb0 	bl	8019d76 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017e16:	f8d8 3000 	ldr.w	r3, [r8]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d0bb      	beq.n	8017d96 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8017e1e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017e20:	883b      	ldrh	r3, [r7, #0]
 8017e22:	428b      	cmp	r3, r1
 8017e24:	d9c1      	bls.n	8017daa <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8017e26:	4b10      	ldr	r3, [pc, #64]	; (8017e68 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8017e28:	6818      	ldr	r0, [r3, #0]
 8017e2a:	f7fa fd35 	bl	8012898 <_ZNK8touchgfx5Texts7getTextEt>
 8017e2e:	2300      	movs	r3, #0
 8017e30:	9303      	str	r3, [sp, #12]
 8017e32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017e34:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8017e38:	ab07      	add	r3, sp, #28
 8017e3a:	4648      	mov	r0, r9
 8017e3c:	9300      	str	r3, [sp, #0]
 8017e3e:	4633      	mov	r3, r6
 8017e40:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017e44:	f7fa fcb9 	bl	80127ba <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017e48:	b00c      	add	sp, #48	; 0x30
 8017e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e4e:	bf00      	nop
 8017e50:	08029b5c 	.word	0x08029b5c
 8017e54:	08029eb4 	.word	0x08029eb4
 8017e58:	08029b9e 	.word	0x08029b9e
 8017e5c:	2000b400 	.word	0x2000b400
 8017e60:	08029bc7 	.word	0x08029bc7
 8017e64:	2000b404 	.word	0x2000b404
 8017e68:	2000b408 	.word	0x2000b408
 8017e6c:	2000b3fc 	.word	0x2000b3fc

08017e70 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8017e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e74:	461c      	mov	r4, r3
 8017e76:	4606      	mov	r6, r0
 8017e78:	9f06      	ldr	r7, [sp, #24]
 8017e7a:	f7ff fe4d 	bl	8017b18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8017e7e:	8823      	ldrh	r3, [r4, #0]
 8017e80:	f04f 0802 	mov.w	r8, #2
 8017e84:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 8017e88:	4638      	mov	r0, r7
 8017e8a:	86b3      	strh	r3, [r6, #52]	; 0x34
 8017e8c:	883b      	ldrh	r3, [r7, #0]
 8017e8e:	fb95 f5f8 	sdiv	r5, r5, r8
 8017e92:	86f3      	strh	r3, [r6, #54]	; 0x36
 8017e94:	b2ad      	uxth	r5, r5
 8017e96:	f003 fdd5 	bl	801ba44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017e9a:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 8017e9e:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 8017ea2:	fb94 f4f8 	sdiv	r4, r4, r8
 8017ea6:	b2a4      	uxth	r4, r4
 8017ea8:	8730      	strh	r0, [r6, #56]	; 0x38
 8017eaa:	4638      	mov	r0, r7
 8017eac:	f003 fe04 	bl	801bab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017eb0:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 8017eb4:	8770      	strh	r0, [r6, #58]	; 0x3a
 8017eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017ebc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 8017ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ec0:	4604      	mov	r4, r0
 8017ec2:	b08c      	sub	sp, #48	; 0x30
 8017ec4:	460d      	mov	r5, r1
 8017ec6:	f7ff fe4f 	bl	8017b68 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8017eca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017ece:	b33b      	cbz	r3, 8017f20 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 8017ed0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017ed2:	a805      	add	r0, sp, #20
 8017ed4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017ed8:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 8017edc:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 8017ee0:	f003 fdb0 	bl	801ba44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017ee4:	4606      	mov	r6, r0
 8017ee6:	a805      	add	r0, sp, #20
 8017ee8:	f003 fde6 	bl	801bab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017eec:	6869      	ldr	r1, [r5, #4]
 8017eee:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017ef2:	ab08      	add	r3, sp, #32
 8017ef4:	6828      	ldr	r0, [r5, #0]
 8017ef6:	ad08      	add	r5, sp, #32
 8017ef8:	f8ad 8018 	strh.w	r8, [sp, #24]
 8017efc:	f8ad 701a 	strh.w	r7, [sp, #26]
 8017f00:	f8ad 601c 	strh.w	r6, [sp, #28]
 8017f04:	c303      	stmia	r3!, {r0, r1}
 8017f06:	a906      	add	r1, sp, #24
 8017f08:	4628      	mov	r0, r5
 8017f0a:	f7fd fd7b 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 8017f0e:	4b25      	ldr	r3, [pc, #148]	; (8017fa4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	b93b      	cbnz	r3, 8017f24 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 8017f14:	4b24      	ldr	r3, [pc, #144]	; (8017fa8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 8017f16:	2189      	movs	r1, #137	; 0x89
 8017f18:	4a24      	ldr	r2, [pc, #144]	; (8017fac <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 8017f1a:	4825      	ldr	r0, [pc, #148]	; (8017fb0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 8017f1c:	f00d fbe0 	bl	80256e0 <__assert_func>
 8017f20:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017f22:	e7d6      	b.n	8017ed2 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 8017f24:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f2c:	429a      	cmp	r2, r3
 8017f2e:	d035      	beq.n	8017f9c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8017f30:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	dd31      	ble.n	8017f9c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8017f38:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	dd2d      	ble.n	8017f9c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8017f40:	2300      	movs	r3, #0
 8017f42:	a90a      	add	r1, sp, #40	; 0x28
 8017f44:	4620      	mov	r0, r4
 8017f46:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8017f4a:	6823      	ldr	r3, [r4, #0]
 8017f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f4e:	4798      	blx	r3
 8017f50:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017f54:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8017f56:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017f5a:	1a9b      	subs	r3, r3, r2
 8017f5c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017f60:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8017f62:	1ac9      	subs	r1, r1, r3
 8017f64:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8017f68:	4912      	ldr	r1, [pc, #72]	; (8017fb4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 8017f6a:	6809      	ldr	r1, [r1, #0]
 8017f6c:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 8017f70:	b108      	cbz	r0, 8017f76 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 8017f72:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8017f74:	b900      	cbnz	r0, 8017f78 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 8017f76:	6888      	ldr	r0, [r1, #8]
 8017f78:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8017f7c:	2601      	movs	r6, #1
 8017f7e:	440b      	add	r3, r1
 8017f80:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8017f84:	440a      	add	r2, r1
 8017f86:	6801      	ldr	r1, [r0, #0]
 8017f88:	9602      	str	r6, [sp, #8]
 8017f8a:	b21b      	sxth	r3, r3
 8017f8c:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8017f90:	b212      	sxth	r2, r2
 8017f92:	e9cd 5400 	strd	r5, r4, [sp]
 8017f96:	688c      	ldr	r4, [r1, #8]
 8017f98:	a905      	add	r1, sp, #20
 8017f9a:	47a0      	blx	r4
 8017f9c:	b00c      	add	sp, #48	; 0x30
 8017f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fa2:	bf00      	nop
 8017fa4:	2000b434 	.word	0x2000b434
 8017fa8:	08029d30 	.word	0x08029d30
 8017fac:	08029f58 	.word	0x08029f58
 8017fb0:	08029d6c 	.word	0x08029d6c
 8017fb4:	2000b36c 	.word	0x2000b36c

08017fb8 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 8017fb8:	2101      	movs	r1, #1
 8017fba:	2200      	movs	r2, #0
 8017fbc:	b510      	push	{r4, lr}
 8017fbe:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017fc2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8017fc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017fca:	4c0c      	ldr	r4, [pc, #48]	; (8017ffc <_ZN8touchgfx14ButtonWithIconC1Ev+0x44>)
 8017fcc:	8082      	strh	r2, [r0, #4]
 8017fce:	80c2      	strh	r2, [r0, #6]
 8017fd0:	8102      	strh	r2, [r0, #8]
 8017fd2:	8142      	strh	r2, [r0, #10]
 8017fd4:	8182      	strh	r2, [r0, #12]
 8017fd6:	81c2      	strh	r2, [r0, #14]
 8017fd8:	8202      	strh	r2, [r0, #16]
 8017fda:	8242      	strh	r2, [r0, #18]
 8017fdc:	61c2      	str	r2, [r0, #28]
 8017fde:	6282      	str	r2, [r0, #40]	; 0x28
 8017fe0:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8017fe4:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8017fe6:	8601      	strh	r1, [r0, #48]	; 0x30
 8017fe8:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8017fec:	6004      	str	r4, [r0, #0]
 8017fee:	8681      	strh	r1, [r0, #52]	; 0x34
 8017ff0:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017ff2:	8702      	strh	r2, [r0, #56]	; 0x38
 8017ff4:	8742      	strh	r2, [r0, #58]	; 0x3a
 8017ff6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017ffa:	bd10      	pop	{r4, pc}
 8017ffc:	08029eec 	.word	0x08029eec

08018000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8018000:	b570      	push	{r4, r5, r6, lr}
 8018002:	4605      	mov	r5, r0
 8018004:	880b      	ldrh	r3, [r1, #0]
 8018006:	4604      	mov	r4, r0
 8018008:	84c3      	strh	r3, [r0, #38]	; 0x26
 801800a:	f855 3b26 	ldr.w	r3, [r5], #38
 801800e:	4628      	mov	r0, r5
 8018010:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8018012:	f003 fd17 	bl	801ba44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018016:	b201      	sxth	r1, r0
 8018018:	4620      	mov	r0, r4
 801801a:	47b0      	blx	r6
 801801c:	6823      	ldr	r3, [r4, #0]
 801801e:	4628      	mov	r0, r5
 8018020:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8018022:	f003 fd49 	bl	801bab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018026:	b201      	sxth	r1, r0
 8018028:	4620      	mov	r0, r4
 801802a:	4633      	mov	r3, r6
 801802c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018030:	4718      	bx	r3

08018032 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8018032:	b510      	push	{r4, lr}
 8018034:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018038:	4604      	mov	r4, r0
 801803a:	2bff      	cmp	r3, #255	; 0xff
 801803c:	d006      	beq.n	801804c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801803e:	2300      	movs	r3, #0
 8018040:	8003      	strh	r3, [r0, #0]
 8018042:	8043      	strh	r3, [r0, #2]
 8018044:	8083      	strh	r3, [r0, #4]
 8018046:	80c3      	strh	r3, [r0, #6]
 8018048:	4620      	mov	r0, r4
 801804a:	bd10      	pop	{r4, pc}
 801804c:	3126      	adds	r1, #38	; 0x26
 801804e:	f003 fd6d 	bl	801bb2c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018052:	e7f9      	b.n	8018048 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018054 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018058:	4604      	mov	r4, r0
 801805a:	b088      	sub	sp, #32
 801805c:	2500      	movs	r5, #0
 801805e:	460f      	mov	r7, r1
 8018060:	f854 3b26 	ldr.w	r3, [r4], #38
 8018064:	a904      	add	r1, sp, #16
 8018066:	4606      	mov	r6, r0
 8018068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801806a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801806e:	4798      	blx	r3
 8018070:	4620      	mov	r0, r4
 8018072:	f003 fce7 	bl	801ba44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018076:	4680      	mov	r8, r0
 8018078:	4620      	mov	r0, r4
 801807a:	f003 fd1d 	bl	801bab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801807e:	9506      	str	r5, [sp, #24]
 8018080:	ad06      	add	r5, sp, #24
 8018082:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018086:	4639      	mov	r1, r7
 8018088:	f8ad 801c 	strh.w	r8, [sp, #28]
 801808c:	4628      	mov	r0, r5
 801808e:	f7fd fcb9 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 8018092:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018096:	2b00      	cmp	r3, #0
 8018098:	dd19      	ble.n	80180ce <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801809a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	dd15      	ble.n	80180ce <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80180a2:	4b0c      	ldr	r3, [pc, #48]	; (80180d4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80180aa:	b10a      	cbz	r2, 80180b0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80180ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80180ae:	b900      	cbnz	r0, 80180b2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80180b0:	6898      	ldr	r0, [r3, #8]
 80180b2:	2701      	movs	r7, #1
 80180b4:	6801      	ldr	r1, [r0, #0]
 80180b6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80180ba:	9702      	str	r7, [sp, #8]
 80180bc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80180c0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80180c4:	e9cd 5600 	strd	r5, r6, [sp]
 80180c8:	688d      	ldr	r5, [r1, #8]
 80180ca:	4621      	mov	r1, r4
 80180cc:	47a8      	blx	r5
 80180ce:	b008      	add	sp, #32
 80180d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180d4:	2000b36c 	.word	0x2000b36c

080180d8 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 80180d8:	b510      	push	{r4, lr}
 80180da:	4604      	mov	r4, r0
 80180dc:	f7ff fd2d 	bl	8017b3a <_ZNK8touchgfx6Button12getSolidRectEv>
 80180e0:	4620      	mov	r0, r4
 80180e2:	bd10      	pop	{r4, pc}

080180e4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 80180e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180e8:	4604      	mov	r4, r0
 80180ea:	b08c      	sub	sp, #48	; 0x30
 80180ec:	4688      	mov	r8, r1
 80180ee:	f7ff fd3b 	bl	8017b68 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 80180f2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80180f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180f8:	4293      	cmp	r3, r2
 80180fa:	f000 809a 	beq.w	8018232 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 80180fe:	4e55      	ldr	r6, [pc, #340]	; (8018254 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8018100:	6832      	ldr	r2, [r6, #0]
 8018102:	b92a      	cbnz	r2, 8018110 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 8018104:	4b54      	ldr	r3, [pc, #336]	; (8018258 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8018106:	21b1      	movs	r1, #177	; 0xb1
 8018108:	4a54      	ldr	r2, [pc, #336]	; (801825c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801810a:	4855      	ldr	r0, [pc, #340]	; (8018260 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 801810c:	f00d fae8 	bl	80256e0 <__assert_func>
 8018110:	4d54      	ldr	r5, [pc, #336]	; (8018264 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 8018112:	8829      	ldrh	r1, [r5, #0]
 8018114:	4299      	cmp	r1, r3
 8018116:	d803      	bhi.n	8018120 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 8018118:	4b53      	ldr	r3, [pc, #332]	; (8018268 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 801811a:	21b2      	movs	r1, #178	; 0xb2
 801811c:	4a4f      	ldr	r2, [pc, #316]	; (801825c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801811e:	e7f4      	b.n	801810a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 8018120:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018124:	f04f 0c02 	mov.w	ip, #2
 8018128:	4b50      	ldr	r3, [pc, #320]	; (801826c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 801812a:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018134:	f1be 0f01 	cmp.w	lr, #1
 8018138:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801813c:	f04f 0300 	mov.w	r3, #0
 8018140:	b208      	sxth	r0, r1
 8018142:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8018146:	9303      	str	r3, [sp, #12]
 8018148:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801814c:	d074      	beq.n	8018238 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801814e:	f1be 0f03 	cmp.w	lr, #3
 8018152:	d071      	beq.n	8018238 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 8018154:	1a52      	subs	r2, r2, r1
 8018156:	f8ad 3010 	strh.w	r3, [sp, #16]
 801815a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801815e:	fb92 f2fc 	sdiv	r2, r2, ip
 8018162:	f8ad 200e 	strh.w	r2, [sp, #14]
 8018166:	f10d 090c 	add.w	r9, sp, #12
 801816a:	f10d 0a14 	add.w	sl, sp, #20
 801816e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018172:	e88a 0003 	stmia.w	sl, {r0, r1}
 8018176:	4641      	mov	r1, r8
 8018178:	4650      	mov	r0, sl
 801817a:	f7fd fc43 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 801817e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018182:	2b00      	cmp	r3, #0
 8018184:	dd55      	ble.n	8018232 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8018186:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801818a:	2b00      	cmp	r3, #0
 801818c:	dd51      	ble.n	8018232 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801818e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018192:	4649      	mov	r1, r9
 8018194:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018198:	4620      	mov	r0, r4
 801819a:	1a9b      	subs	r3, r3, r2
 801819c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80181a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80181a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80181a8:	1a9b      	subs	r3, r3, r2
 80181aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80181ae:	6823      	ldr	r3, [r4, #0]
 80181b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181b2:	4798      	blx	r3
 80181b4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d047      	beq.n	801824c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 80181bc:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80181c0:	6833      	ldr	r3, [r6, #0]
 80181c2:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d09c      	beq.n	8018104 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 80181ca:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80181cc:	8828      	ldrh	r0, [r5, #0]
 80181ce:	4288      	cmp	r0, r1
 80181d0:	d9a2      	bls.n	8018118 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 80181d2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80181d6:	6812      	ldr	r2, [r2, #0]
 80181d8:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80181dc:	785b      	ldrb	r3, [r3, #1]
 80181de:	9209      	str	r2, [sp, #36]	; 0x24
 80181e0:	f3c3 0501 	ubfx	r5, r3, #0, #2
 80181e4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80181e8:	9707      	str	r7, [sp, #28]
 80181ea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80181ee:	2300      	movs	r3, #0
 80181f0:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80181f4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80181f8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80181fc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8018200:	4b1b      	ldr	r3, [pc, #108]	; (8018270 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 8018202:	f88d 5020 	strb.w	r5, [sp, #32]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801820c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018210:	b10a      	cbz	r2, 8018216 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 8018212:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018214:	b904      	cbnz	r4, 8018218 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 8018216:	689c      	ldr	r4, [r3, #8]
 8018218:	4b16      	ldr	r3, [pc, #88]	; (8018274 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 801821a:	6818      	ldr	r0, [r3, #0]
 801821c:	f7fa fb3c 	bl	8012898 <_ZNK8touchgfx5Texts7getTextEt>
 8018220:	ab07      	add	r3, sp, #28
 8018222:	9001      	str	r0, [sp, #4]
 8018224:	4620      	mov	r0, r4
 8018226:	9300      	str	r3, [sp, #0]
 8018228:	4653      	mov	r3, sl
 801822a:	e899 0006 	ldmia.w	r9, {r1, r2}
 801822e:	f7fa fac4 	bl	80127ba <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018232:	b00c      	add	sp, #48	; 0x30
 8018234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018238:	1a5b      	subs	r3, r3, r1
 801823a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801823e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018242:	fb93 f3fc 	sdiv	r3, r3, ip
 8018246:	f8ad 300c 	strh.w	r3, [sp, #12]
 801824a:	e78c      	b.n	8018166 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 801824c:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8018250:	e7b6      	b.n	80181c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 8018252:	bf00      	nop
 8018254:	2000b3fc 	.word	0x2000b3fc
 8018258:	08029b5c 	.word	0x08029b5c
 801825c:	0802a068 	.word	0x0802a068
 8018260:	08029b9e 	.word	0x08029b9e
 8018264:	2000b400 	.word	0x2000b400
 8018268:	08029bc7 	.word	0x08029bc7
 801826c:	2000b404 	.word	0x2000b404
 8018270:	2000b36c 	.word	0x2000b36c
 8018274:	2000b408 	.word	0x2000b408

08018278 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8018278:	2101      	movs	r1, #1
 801827a:	2200      	movs	r2, #0
 801827c:	b510      	push	{r4, lr}
 801827e:	4c12      	ldr	r4, [pc, #72]	; (80182c8 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
 8018280:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8018284:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8018288:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801828c:	6004      	str	r4, [r0, #0]
 801828e:	4c0f      	ldr	r4, [pc, #60]	; (80182cc <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8018290:	8082      	strh	r2, [r0, #4]
 8018292:	80c2      	strh	r2, [r0, #6]
 8018294:	8102      	strh	r2, [r0, #8]
 8018296:	8142      	strh	r2, [r0, #10]
 8018298:	8182      	strh	r2, [r0, #12]
 801829a:	81c2      	strh	r2, [r0, #14]
 801829c:	8202      	strh	r2, [r0, #16]
 801829e:	8242      	strh	r2, [r0, #18]
 80182a0:	61c2      	str	r2, [r0, #28]
 80182a2:	6282      	str	r2, [r0, #40]	; 0x28
 80182a4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80182a8:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80182aa:	8601      	strh	r1, [r0, #48]	; 0x30
 80182ac:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80182b0:	6344      	str	r4, [r0, #52]	; 0x34
 80182b2:	8701      	strh	r1, [r0, #56]	; 0x38
 80182b4:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80182b8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 80182bc:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80182c0:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80182c4:	bd10      	pop	{r4, pc}
 80182c6:	bf00      	nop
 80182c8:	0802a000 	.word	0x0802a000
 80182cc:	080272a4 	.word	0x080272a4

080182d0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80182d0:	4b02      	ldr	r3, [pc, #8]	; (80182dc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80182d2:	6018      	str	r0, [r3, #0]
 80182d4:	4b02      	ldr	r3, [pc, #8]	; (80182e0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80182d6:	6019      	str	r1, [r3, #0]
 80182d8:	4770      	bx	lr
 80182da:	bf00      	nop
 80182dc:	2000b374 	.word	0x2000b374
 80182e0:	2000b388 	.word	0x2000b388

080182e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80182e4:	b538      	push	{r3, r4, r5, lr}
 80182e6:	4c2b      	ldr	r4, [pc, #172]	; (8018394 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80182e8:	4b2b      	ldr	r3, [pc, #172]	; (8018398 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80182ea:	6821      	ldr	r1, [r4, #0]
 80182ec:	681a      	ldr	r2, [r3, #0]
 80182ee:	4281      	cmp	r1, r0
 80182f0:	4d2a      	ldr	r5, [pc, #168]	; (801839c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80182f2:	492b      	ldr	r1, [pc, #172]	; (80183a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80182f4:	d108      	bne.n	8018308 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80182f6:	682b      	ldr	r3, [r5, #0]
 80182f8:	4293      	cmp	r3, r2
 80182fa:	d105      	bne.n	8018308 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80182fc:	6808      	ldr	r0, [r1, #0]
 80182fe:	280f      	cmp	r0, #15
 8018300:	bf94      	ite	ls
 8018302:	2000      	movls	r0, #0
 8018304:	2001      	movhi	r0, #1
 8018306:	bd38      	pop	{r3, r4, r5, pc}
 8018308:	4b26      	ldr	r3, [pc, #152]	; (80183a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801830a:	6020      	str	r0, [r4, #0]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	602a      	str	r2, [r5, #0]
 8018310:	4298      	cmp	r0, r3
 8018312:	d905      	bls.n	8018320 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8018314:	4b24      	ldr	r3, [pc, #144]	; (80183a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8018316:	2137      	movs	r1, #55	; 0x37
 8018318:	4a24      	ldr	r2, [pc, #144]	; (80183ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801831a:	4825      	ldr	r0, [pc, #148]	; (80183b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801831c:	f00d f9e0 	bl	80256e0 <__assert_func>
 8018320:	f010 0403 	ands.w	r4, r0, #3
 8018324:	bf1f      	itttt	ne
 8018326:	f1c4 0504 	rsbne	r5, r4, #4
 801832a:	3b04      	subne	r3, #4
 801832c:	1952      	addne	r2, r2, r5
 801832e:	191b      	addne	r3, r3, r4
 8018330:	4d20      	ldr	r5, [pc, #128]	; (80183b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8018332:	4402      	add	r2, r0
 8018334:	1a1b      	subs	r3, r3, r0
 8018336:	3001      	adds	r0, #1
 8018338:	602a      	str	r2, [r5, #0]
 801833a:	f020 0401 	bic.w	r4, r0, #1
 801833e:	42a3      	cmp	r3, r4
 8018340:	d203      	bcs.n	801834a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8018342:	4b19      	ldr	r3, [pc, #100]	; (80183a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8018344:	214a      	movs	r1, #74	; 0x4a
 8018346:	4a19      	ldr	r2, [pc, #100]	; (80183ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8018348:	e7e7      	b.n	801831a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801834a:	f010 0002 	ands.w	r0, r0, #2
 801834e:	bf1f      	itttt	ne
 8018350:	f1c0 0504 	rsbne	r5, r0, #4
 8018354:	1952      	addne	r2, r2, r5
 8018356:	1f05      	subne	r5, r0, #4
 8018358:	195b      	addne	r3, r3, r5
 801835a:	4422      	add	r2, r4
 801835c:	4d16      	ldr	r5, [pc, #88]	; (80183b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801835e:	1b1b      	subs	r3, r3, r4
 8018360:	602a      	str	r2, [r5, #0]
 8018362:	429c      	cmp	r4, r3
 8018364:	d903      	bls.n	801836e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8018366:	4b10      	ldr	r3, [pc, #64]	; (80183a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8018368:	215d      	movs	r1, #93	; 0x5d
 801836a:	4a10      	ldr	r2, [pc, #64]	; (80183ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801836c:	e7d5      	b.n	801831a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801836e:	b120      	cbz	r0, 801837a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8018370:	f1c0 0504 	rsb	r5, r0, #4
 8018374:	3804      	subs	r0, #4
 8018376:	442a      	add	r2, r5
 8018378:	4403      	add	r3, r0
 801837a:	1b1b      	subs	r3, r3, r4
 801837c:	4422      	add	r2, r4
 801837e:	480f      	ldr	r0, [pc, #60]	; (80183bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8018380:	2b0f      	cmp	r3, #15
 8018382:	600b      	str	r3, [r1, #0]
 8018384:	6002      	str	r2, [r0, #0]
 8018386:	d803      	bhi.n	8018390 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8018388:	4b0d      	ldr	r3, [pc, #52]	; (80183c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801838a:	2170      	movs	r1, #112	; 0x70
 801838c:	4a07      	ldr	r2, [pc, #28]	; (80183ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801838e:	e7c4      	b.n	801831a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8018390:	2001      	movs	r0, #1
 8018392:	e7b8      	b.n	8018306 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8018394:	2000b37c 	.word	0x2000b37c
 8018398:	2000b374 	.word	0x2000b374
 801839c:	2000b384 	.word	0x2000b384
 80183a0:	2000b38c 	.word	0x2000b38c
 80183a4:	2000b388 	.word	0x2000b388
 80183a8:	0802a096 	.word	0x0802a096
 80183ac:	0802a15e 	.word	0x0802a15e
 80183b0:	0802a0cf 	.word	0x0802a0cf
 80183b4:	2000b390 	.word	0x2000b390
 80183b8:	2000b380 	.word	0x2000b380
 80183bc:	2000b378 	.word	0x2000b378
 80183c0:	0802a119 	.word	0x0802a119

080183c4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80183c4:	4b04      	ldr	r3, [pc, #16]	; (80183d8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80183c6:	6818      	ldr	r0, [r3, #0]
 80183c8:	b120      	cbz	r0, 80183d4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80183ca:	4b04      	ldr	r3, [pc, #16]	; (80183dc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80183cc:	6818      	ldr	r0, [r3, #0]
 80183ce:	3000      	adds	r0, #0
 80183d0:	bf18      	it	ne
 80183d2:	2001      	movne	r0, #1
 80183d4:	4770      	bx	lr
 80183d6:	bf00      	nop
 80183d8:	2000b374 	.word	0x2000b374
 80183dc:	2000b388 	.word	0x2000b388

080183e0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80183e0:	4b01      	ldr	r3, [pc, #4]	; (80183e8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80183e2:	6818      	ldr	r0, [r3, #0]
 80183e4:	4770      	bx	lr
 80183e6:	bf00      	nop
 80183e8:	2000b37c 	.word	0x2000b37c

080183ec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80183ec:	4b01      	ldr	r3, [pc, #4]	; (80183f4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80183ee:	6818      	ldr	r0, [r3, #0]
 80183f0:	4770      	bx	lr
 80183f2:	bf00      	nop
 80183f4:	2000b384 	.word	0x2000b384

080183f8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80183f8:	4b01      	ldr	r3, [pc, #4]	; (8018400 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80183fa:	6818      	ldr	r0, [r3, #0]
 80183fc:	4770      	bx	lr
 80183fe:	bf00      	nop
 8018400:	2000b390 	.word	0x2000b390

08018404 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8018404:	4b01      	ldr	r3, [pc, #4]	; (801840c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8018406:	6818      	ldr	r0, [r3, #0]
 8018408:	4770      	bx	lr
 801840a:	bf00      	nop
 801840c:	2000b380 	.word	0x2000b380

08018410 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8018410:	4b01      	ldr	r3, [pc, #4]	; (8018418 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8018412:	6818      	ldr	r0, [r3, #0]
 8018414:	4770      	bx	lr
 8018416:	bf00      	nop
 8018418:	2000b378 	.word	0x2000b378

0801841c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801841c:	4b01      	ldr	r3, [pc, #4]	; (8018424 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801841e:	6818      	ldr	r0, [r3, #0]
 8018420:	4770      	bx	lr
 8018422:	bf00      	nop
 8018424:	2000b38c 	.word	0x2000b38c

08018428 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018428:	2000      	movs	r0, #0
 801842a:	4770      	bx	lr

0801842c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801842c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018430:	b091      	sub	sp, #68	; 0x44
 8018432:	4699      	mov	r9, r3
 8018434:	4617      	mov	r7, r2
 8018436:	2500      	movs	r5, #0
 8018438:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801843c:	4680      	mov	r8, r0
 801843e:	a80e      	add	r0, sp, #56	; 0x38
 8018440:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8018442:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8018446:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801844a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801844e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018452:	910d      	str	r1, [sp, #52]	; 0x34
 8018454:	950e      	str	r5, [sp, #56]	; 0x38
 8018456:	f000 fe39 	bl	80190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801845a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801845c:	f8d9 6000 	ldr.w	r6, [r9]
 8018460:	6818      	ldr	r0, [r3, #0]
 8018462:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018464:	f9b4 b000 	ldrsh.w	fp, [r4]
 8018468:	1b80      	subs	r0, r0, r6
 801846a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801846e:	eb02 0c06 	add.w	ip, r2, r6
 8018472:	ebab 0e0c 	sub.w	lr, fp, ip
 8018476:	4570      	cmp	r0, lr
 8018478:	f340 80bc 	ble.w	80185f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801847c:	88a1      	ldrh	r1, [r4, #4]
 801847e:	4459      	add	r1, fp
 8018480:	b209      	sxth	r1, r1
 8018482:	458c      	cmp	ip, r1
 8018484:	f300 80b6 	bgt.w	80185f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8018488:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801848c:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8018490:	4283      	cmp	r3, r0
 8018492:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8018496:	edd9 6a07 	vldr	s13, [r9, #28]
 801849a:	bfa8      	it	ge
 801849c:	4603      	movge	r3, r0
 801849e:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 80184a2:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 80184a6:	45e3      	cmp	fp, ip
 80184a8:	ee07 3a90 	vmov	s15, r3
 80184ac:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80184b0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80184b4:	ee25 4a04 	vmul.f32	s8, s10, s8
 80184b8:	ee65 4a24 	vmul.f32	s9, s10, s9
 80184bc:	ee25 5a27 	vmul.f32	s10, s10, s15
 80184c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80184c4:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80184c8:	ee32 1a05 	vadd.f32	s2, s4, s10
 80184cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80184d0:	ee36 0a84 	vadd.f32	s0, s13, s8
 80184d4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80184d8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80184dc:	f340 808d 	ble.w	80185fa <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 80184e0:	fb9e f5f3 	sdiv	r5, lr, r3
 80184e4:	ee07 5a10 	vmov	s14, r5
 80184e8:	2d00      	cmp	r5, #0
 80184ea:	fb03 e415 	mls	r4, r3, r5, lr
 80184ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80184f2:	eea7 0a04 	vfma.f32	s0, s14, s8
 80184f6:	eee7 0a24 	vfma.f32	s1, s14, s9
 80184fa:	eea7 1a05 	vfma.f32	s2, s14, s10
 80184fe:	dd12      	ble.n	8018526 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8018500:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018504:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018508:	ee31 2a45 	vsub.f32	s4, s2, s10
 801850c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018514:	bf14      	ite	ne
 8018516:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801851a:	eeb0 7a67 	vmoveq.f32	s14, s15
 801851e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018522:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018526:	fb05 f703 	mul.w	r7, r5, r3
 801852a:	1bc0      	subs	r0, r0, r7
 801852c:	443e      	add	r6, r7
 801852e:	1997      	adds	r7, r2, r6
 8018530:	4407      	add	r7, r0
 8018532:	42b9      	cmp	r1, r7
 8018534:	bfbc      	itt	lt
 8018536:	1a88      	sublt	r0, r1, r2
 8018538:	1b80      	sublt	r0, r0, r6
 801853a:	2800      	cmp	r0, #0
 801853c:	dd5a      	ble.n	80185f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801853e:	fb90 f1f3 	sdiv	r1, r0, r3
 8018542:	fb03 0211 	mls	r2, r3, r1, r0
 8018546:	b90a      	cbnz	r2, 801854c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8018548:	3901      	subs	r1, #1
 801854a:	461a      	mov	r2, r3
 801854c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8018550:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8018554:	44a4      	add	ip, r4
 8018556:	2900      	cmp	r1, #0
 8018558:	bfcc      	ite	gt
 801855a:	469e      	movgt	lr, r3
 801855c:	4696      	movle	lr, r2
 801855e:	fb03 c505 	mla	r5, r3, r5, ip
 8018562:	eef0 6a42 	vmov.f32	s13, s4
 8018566:	eeb0 7a61 	vmov.f32	s14, s3
 801856a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801856e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018572:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018576:	ee21 3a23 	vmul.f32	s6, s2, s7
 801857a:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801857e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018582:	ee17 0a90 	vmov	r0, s15
 8018586:	ee73 7a42 	vsub.f32	s15, s6, s4
 801858a:	fb90 f6f3 	sdiv	r6, r0, r3
 801858e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018592:	ee17 0a90 	vmov	r0, s15
 8018596:	fb90 f7f3 	sdiv	r7, r0, r3
 801859a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801859e:	f8d0 8000 	ldr.w	r8, [r0]
 80185a2:	900c      	str	r0, [sp, #48]	; 0x30
 80185a4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80185a6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80185aa:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80185ae:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80185b2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80185b6:	f8cd a020 	str.w	sl, [sp, #32]
 80185ba:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 80185be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80185c0:	f8d9 9014 	ldr.w	r9, [r9, #20]
 80185c4:	9603      	str	r6, [sp, #12]
 80185c6:	44ca      	add	sl, r9
 80185c8:	9506      	str	r5, [sp, #24]
 80185ca:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80185ce:	ee16 0a90 	vmov	r0, s13
 80185d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80185d6:	fb07 0704 	mla	r7, r7, r4, r0
 80185da:	ee17 0a10 	vmov	r0, s14
 80185de:	fb06 0604 	mla	r6, r6, r4, r0
 80185e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80185e4:	9702      	str	r7, [sp, #8]
 80185e6:	e9cd 3600 	strd	r3, r6, [sp]
 80185ea:	ebae 0304 	sub.w	r3, lr, r4
 80185ee:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80185f2:	47a8      	blx	r5
 80185f4:	b011      	add	sp, #68	; 0x44
 80185f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185fa:	462c      	mov	r4, r5
 80185fc:	e797      	b.n	801852e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

080185fe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80185fe:	b570      	push	{r4, r5, r6, lr}
 8018600:	4604      	mov	r4, r0
 8018602:	2500      	movs	r5, #0
 8018604:	9804      	ldr	r0, [sp, #16]
 8018606:	7223      	strb	r3, [r4, #8]
 8018608:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801860c:	8025      	strh	r5, [r4, #0]
 801860e:	6061      	str	r1, [r4, #4]
 8018610:	7263      	strb	r3, [r4, #9]
 8018612:	60e0      	str	r0, [r4, #12]
 8018614:	8222      	strh	r2, [r4, #16]
 8018616:	8265      	strh	r5, [r4, #18]
 8018618:	82a5      	strh	r5, [r4, #20]
 801861a:	82e5      	strh	r5, [r4, #22]
 801861c:	8325      	strh	r5, [r4, #24]
 801861e:	8365      	strh	r5, [r4, #26]
 8018620:	83a5      	strh	r5, [r4, #28]
 8018622:	77a5      	strb	r5, [r4, #30]
 8018624:	6803      	ldr	r3, [r0, #0]
 8018626:	695b      	ldr	r3, [r3, #20]
 8018628:	4798      	blx	r3
 801862a:	4606      	mov	r6, r0
 801862c:	b1f8      	cbz	r0, 801866e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801862e:	68e0      	ldr	r0, [r4, #12]
 8018630:	4631      	mov	r1, r6
 8018632:	6803      	ldr	r3, [r0, #0]
 8018634:	68db      	ldr	r3, [r3, #12]
 8018636:	4798      	blx	r3
 8018638:	7b43      	ldrb	r3, [r0, #13]
 801863a:	7a82      	ldrb	r2, [r0, #10]
 801863c:	4605      	mov	r5, r0
 801863e:	005b      	lsls	r3, r3, #1
 8018640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018644:	4313      	orrs	r3, r2
 8018646:	83a3      	strh	r3, [r4, #28]
 8018648:	7a63      	ldrb	r3, [r4, #9]
 801864a:	2b04      	cmp	r3, #4
 801864c:	d10f      	bne.n	801866e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801864e:	68e0      	ldr	r0, [r4, #12]
 8018650:	462a      	mov	r2, r5
 8018652:	4631      	mov	r1, r6
 8018654:	6803      	ldr	r3, [r0, #0]
 8018656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018658:	4798      	blx	r3
 801865a:	7b6b      	ldrb	r3, [r5, #13]
 801865c:	005b      	lsls	r3, r3, #1
 801865e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018662:	7aab      	ldrb	r3, [r5, #10]
 8018664:	4313      	orrs	r3, r2
 8018666:	4418      	add	r0, r3
 8018668:	8ba3      	ldrh	r3, [r4, #28]
 801866a:	4418      	add	r0, r3
 801866c:	83a0      	strh	r0, [r4, #28]
 801866e:	4620      	mov	r0, r4
 8018670:	bd70      	pop	{r4, r5, r6, pc}

08018672 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018676:	2400      	movs	r4, #0
 8018678:	b085      	sub	sp, #20
 801867a:	4681      	mov	r9, r0
 801867c:	4688      	mov	r8, r1
 801867e:	4692      	mov	sl, r2
 8018680:	469b      	mov	fp, r3
 8018682:	4627      	mov	r7, r4
 8018684:	4625      	mov	r5, r4
 8018686:	4626      	mov	r6, r4
 8018688:	4554      	cmp	r4, sl
 801868a:	da2a      	bge.n	80186e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801868c:	2300      	movs	r3, #0
 801868e:	9303      	str	r3, [sp, #12]
 8018690:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018694:	429d      	cmp	r5, r3
 8018696:	d004      	beq.n	80186a2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8018698:	f242 030b 	movw	r3, #8203	; 0x200b
 801869c:	429d      	cmp	r5, r3
 801869e:	bf18      	it	ne
 80186a0:	462f      	movne	r7, r5
 80186a2:	ab03      	add	r3, sp, #12
 80186a4:	4642      	mov	r2, r8
 80186a6:	4659      	mov	r1, fp
 80186a8:	4648      	mov	r0, r9
 80186aa:	f002 fb45 	bl	801ad38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80186ae:	4605      	mov	r5, r0
 80186b0:	b1b8      	cbz	r0, 80186e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80186b2:	280a      	cmp	r0, #10
 80186b4:	d015      	beq.n	80186e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80186b6:	9a03      	ldr	r2, [sp, #12]
 80186b8:	b18a      	cbz	r2, 80186de <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80186ba:	7b50      	ldrb	r0, [r2, #13]
 80186bc:	4639      	mov	r1, r7
 80186be:	7a93      	ldrb	r3, [r2, #10]
 80186c0:	0040      	lsls	r0, r0, #1
 80186c2:	8895      	ldrh	r5, [r2, #4]
 80186c4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80186c8:	4303      	orrs	r3, r0
 80186ca:	4640      	mov	r0, r8
 80186cc:	9301      	str	r3, [sp, #4]
 80186ce:	f8d8 3000 	ldr.w	r3, [r8]
 80186d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186d4:	4798      	blx	r3
 80186d6:	9b01      	ldr	r3, [sp, #4]
 80186d8:	4418      	add	r0, r3
 80186da:	4406      	add	r6, r0
 80186dc:	b2b6      	uxth	r6, r6
 80186de:	3401      	adds	r4, #1
 80186e0:	e7d2      	b.n	8018688 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80186e2:	4630      	mov	r0, r6
 80186e4:	b005      	add	sp, #20
 80186e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186ea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80186ea:	2a02      	cmp	r2, #2
 80186ec:	b530      	push	{r4, r5, lr}
 80186ee:	d011      	beq.n	8018714 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80186f0:	2a03      	cmp	r2, #3
 80186f2:	d01c      	beq.n	801872e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80186f4:	2a01      	cmp	r2, #1
 80186f6:	d10c      	bne.n	8018712 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80186f8:	888b      	ldrh	r3, [r1, #4]
 80186fa:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80186fe:	8801      	ldrh	r1, [r0, #0]
 8018700:	1a9b      	subs	r3, r3, r2
 8018702:	8844      	ldrh	r4, [r0, #2]
 8018704:	1a5b      	subs	r3, r3, r1
 8018706:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801870a:	8004      	strh	r4, [r0, #0]
 801870c:	8043      	strh	r3, [r0, #2]
 801870e:	8081      	strh	r1, [r0, #4]
 8018710:	80c2      	strh	r2, [r0, #6]
 8018712:	bd30      	pop	{r4, r5, pc}
 8018714:	88cb      	ldrh	r3, [r1, #6]
 8018716:	88c2      	ldrh	r2, [r0, #6]
 8018718:	1a9b      	subs	r3, r3, r2
 801871a:	8842      	ldrh	r2, [r0, #2]
 801871c:	1a9b      	subs	r3, r3, r2
 801871e:	888a      	ldrh	r2, [r1, #4]
 8018720:	8881      	ldrh	r1, [r0, #4]
 8018722:	8043      	strh	r3, [r0, #2]
 8018724:	1a52      	subs	r2, r2, r1
 8018726:	8801      	ldrh	r1, [r0, #0]
 8018728:	1a52      	subs	r2, r2, r1
 801872a:	8002      	strh	r2, [r0, #0]
 801872c:	e7f1      	b.n	8018712 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801872e:	88cb      	ldrh	r3, [r1, #6]
 8018730:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018734:	8841      	ldrh	r1, [r0, #2]
 8018736:	1a9b      	subs	r3, r3, r2
 8018738:	f9b0 5000 	ldrsh.w	r5, [r0]
 801873c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018740:	1a5b      	subs	r3, r3, r1
 8018742:	8045      	strh	r5, [r0, #2]
 8018744:	8082      	strh	r2, [r0, #4]
 8018746:	8003      	strh	r3, [r0, #0]
 8018748:	80c4      	strh	r4, [r0, #6]
 801874a:	e7e2      	b.n	8018712 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801874c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018750:	b09f      	sub	sp, #124	; 0x7c
 8018752:	9116      	str	r1, [sp, #88]	; 0x58
 8018754:	9317      	str	r3, [sp, #92]	; 0x5c
 8018756:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018758:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801875a:	8809      	ldrh	r1, [r1, #0]
 801875c:	889b      	ldrh	r3, [r3, #4]
 801875e:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8018762:	440b      	add	r3, r1
 8018764:	9212      	str	r2, [sp, #72]	; 0x48
 8018766:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801876a:	b21b      	sxth	r3, r3
 801876c:	9011      	str	r0, [sp, #68]	; 0x44
 801876e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8018772:	9310      	str	r3, [sp, #64]	; 0x40
 8018774:	f8d8 3000 	ldr.w	r3, [r8]
 8018778:	7a59      	ldrb	r1, [r3, #9]
 801877a:	7a1b      	ldrb	r3, [r3, #8]
 801877c:	9114      	str	r1, [sp, #80]	; 0x50
 801877e:	9315      	str	r3, [sp, #84]	; 0x54
 8018780:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018782:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018786:	2a00      	cmp	r2, #0
 8018788:	d067      	beq.n	801885a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801878a:	f898 3010 	ldrb.w	r3, [r8, #16]
 801878e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018790:	2b04      	cmp	r3, #4
 8018792:	bf14      	ite	ne
 8018794:	2301      	movne	r3, #1
 8018796:	2302      	moveq	r3, #2
 8018798:	4413      	add	r3, r2
 801879a:	f04f 0900 	mov.w	r9, #0
 801879e:	930f      	str	r3, [sp, #60]	; 0x3c
 80187a0:	464c      	mov	r4, r9
 80187a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80187a6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80187aa:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80187ae:	4293      	cmp	r3, r2
 80187b0:	f280 808c 	bge.w	80188cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80187b4:	2300      	movs	r3, #0
 80187b6:	931c      	str	r3, [sp, #112]	; 0x70
 80187b8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80187bc:	429c      	cmp	r4, r3
 80187be:	d006      	beq.n	80187ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 80187c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187c2:	f242 020b 	movw	r2, #8203	; 0x200b
 80187c6:	4294      	cmp	r4, r2
 80187c8:	bf18      	it	ne
 80187ca:	4623      	movne	r3, r4
 80187cc:	930d      	str	r3, [sp, #52]	; 0x34
 80187ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187d0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80187d2:	f8d8 2000 	ldr.w	r2, [r8]
 80187d6:	428b      	cmp	r3, r1
 80187d8:	db41      	blt.n	801885e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80187da:	6813      	ldr	r3, [r2, #0]
 80187dc:	4610      	mov	r0, r2
 80187de:	695b      	ldr	r3, [r3, #20]
 80187e0:	4798      	blx	r3
 80187e2:	4604      	mov	r4, r0
 80187e4:	f8d8 0000 	ldr.w	r0, [r8]
 80187e8:	aa1d      	add	r2, sp, #116	; 0x74
 80187ea:	4621      	mov	r1, r4
 80187ec:	6803      	ldr	r3, [r0, #0]
 80187ee:	689e      	ldr	r6, [r3, #8]
 80187f0:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80187f4:	47b0      	blx	r6
 80187f6:	901c      	str	r0, [sp, #112]	; 0x70
 80187f8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80187fc:	429c      	cmp	r4, r3
 80187fe:	f000 80ea 	beq.w	80189d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018802:	f242 030b 	movw	r3, #8203	; 0x200b
 8018806:	429c      	cmp	r4, r3
 8018808:	f000 80e5 	beq.w	80189d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801880c:	2c00      	cmp	r4, #0
 801880e:	f000 80f7 	beq.w	8018a00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018812:	2c0a      	cmp	r4, #10
 8018814:	d060      	beq.n	80188d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018816:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018818:	b36a      	cbz	r2, 8018876 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801881a:	8894      	ldrh	r4, [r2, #4]
 801881c:	f1bb 0f00 	cmp.w	fp, #0
 8018820:	d03b      	beq.n	801889a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8018822:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018826:	f1bb 0f01 	cmp.w	fp, #1
 801882a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801882e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8018832:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018836:	ea49 0903 	orr.w	r9, r9, r3
 801883a:	d134      	bne.n	80188a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801883c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801883e:	eba5 0509 	sub.w	r5, r5, r9
 8018842:	2b00      	cmp	r3, #0
 8018844:	d14f      	bne.n	80188e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018846:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018848:	eb09 0305 	add.w	r3, r9, r5
 801884c:	4413      	add	r3, r2
 801884e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018850:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018854:	4293      	cmp	r3, r2
 8018856:	da51      	bge.n	80188fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8018858:	e038      	b.n	80188cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801885a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801885c:	e79d      	b.n	801879a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801885e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018862:	4659      	mov	r1, fp
 8018864:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018866:	9301      	str	r3, [sp, #4]
 8018868:	ab1d      	add	r3, sp, #116	; 0x74
 801886a:	9300      	str	r3, [sp, #0]
 801886c:	ab1c      	add	r3, sp, #112	; 0x70
 801886e:	f002 fab7 	bl	801ade0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018872:	4604      	mov	r4, r0
 8018874:	e7c0      	b.n	80187f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018876:	f8d8 0000 	ldr.w	r0, [r8]
 801887a:	6803      	ldr	r3, [r0, #0]
 801887c:	691b      	ldr	r3, [r3, #16]
 801887e:	4798      	blx	r3
 8018880:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018884:	4298      	cmp	r0, r3
 8018886:	f000 80a6 	beq.w	80189d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801888a:	f242 030b 	movw	r3, #8203	; 0x200b
 801888e:	4298      	cmp	r0, r3
 8018890:	f000 80a1 	beq.w	80189d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018894:	f1bb 0f00 	cmp.w	fp, #0
 8018898:	d100      	bne.n	801889c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801889a:	444d      	add	r5, r9
 801889c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801889e:	2a00      	cmp	r2, #0
 80188a0:	d1bf      	bne.n	8018822 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 80188a2:	4691      	mov	r9, r2
 80188a4:	e097      	b.n	80189d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80188a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	f000 80ab 	beq.w	8018a04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80188ae:	f1bb 0f00 	cmp.w	fp, #0
 80188b2:	d118      	bne.n	80188e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80188b4:	f8d8 0000 	ldr.w	r0, [r8]
 80188b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80188ba:	6803      	ldr	r3, [r0, #0]
 80188bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80188be:	4798      	blx	r3
 80188c0:	4405      	add	r5, r0
 80188c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80188c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80188c6:	1aeb      	subs	r3, r5, r3
 80188c8:	4293      	cmp	r3, r2
 80188ca:	dd17      	ble.n	80188fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80188cc:	2c00      	cmp	r4, #0
 80188ce:	f000 8097 	beq.w	8018a00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80188d2:	2c0a      	cmp	r4, #10
 80188d4:	f040 8085 	bne.w	80189e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80188d8:	240a      	movs	r4, #10
 80188da:	fab4 f084 	clz	r0, r4
 80188de:	0940      	lsrs	r0, r0, #5
 80188e0:	b01f      	add	sp, #124	; 0x7c
 80188e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188e6:	f8d8 0000 	ldr.w	r0, [r8]
 80188ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80188ec:	6803      	ldr	r3, [r0, #0]
 80188ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80188f0:	4798      	blx	r3
 80188f2:	f1bb 0f01 	cmp.w	fp, #1
 80188f6:	eba5 0500 	sub.w	r5, r5, r0
 80188fa:	d0a4      	beq.n	8018846 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80188fc:	981c      	ldr	r0, [sp, #112]	; 0x70
 80188fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018900:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8018904:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018908:	7b43      	ldrb	r3, [r0, #13]
 801890a:	4429      	add	r1, r5
 801890c:	015b      	lsls	r3, r3, #5
 801890e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018912:	7983      	ldrb	r3, [r0, #6]
 8018914:	4313      	orrs	r3, r2
 8018916:	440b      	add	r3, r1
 8018918:	42b3      	cmp	r3, r6
 801891a:	db5c      	blt.n	80189d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801891c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801891e:	4299      	cmp	r1, r3
 8018920:	da59      	bge.n	80189d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018922:	f8d8 0000 	ldr.w	r0, [r8]
 8018926:	42ae      	cmp	r6, r5
 8018928:	6803      	ldr	r3, [r0, #0]
 801892a:	bfcc      	ite	gt
 801892c:	1b76      	subgt	r6, r6, r5
 801892e:	2600      	movle	r6, #0
 8018930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018932:	bfc8      	it	gt
 8018934:	b2b6      	uxthgt	r6, r6
 8018936:	4798      	blx	r3
 8018938:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801893a:	7b5a      	ldrb	r2, [r3, #13]
 801893c:	00d1      	lsls	r1, r2, #3
 801893e:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8018942:	7a19      	ldrb	r1, [r3, #8]
 8018944:	4339      	orrs	r1, r7
 8018946:	0657      	lsls	r7, r2, #25
 8018948:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801894a:	bf48      	it	mi
 801894c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8018950:	4407      	add	r7, r0
 8018952:	bf48      	it	mi
 8018954:	b209      	sxthmi	r1, r1
 8018956:	1a7f      	subs	r7, r7, r1
 8018958:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801895a:	b2bf      	uxth	r7, r7
 801895c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018960:	fa0f fa87 	sxth.w	sl, r7
 8018964:	4551      	cmp	r1, sl
 8018966:	dd3a      	ble.n	80189de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8018968:	0112      	lsls	r2, r2, #4
 801896a:	79d8      	ldrb	r0, [r3, #7]
 801896c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018970:	4302      	orrs	r2, r0
 8018972:	4492      	add	sl, r2
 8018974:	4551      	cmp	r1, sl
 8018976:	dc2e      	bgt.n	80189d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018978:	1bcf      	subs	r7, r1, r7
 801897a:	468a      	mov	sl, r1
 801897c:	b2bf      	uxth	r7, r7
 801897e:	9319      	str	r3, [sp, #100]	; 0x64
 8018980:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018982:	f8d8 0000 	ldr.w	r0, [r8]
 8018986:	681a      	ldr	r2, [r3, #0]
 8018988:	6801      	ldr	r1, [r0, #0]
 801898a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801898c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801898e:	9313      	str	r3, [sp, #76]	; 0x4c
 8018990:	9218      	str	r2, [sp, #96]	; 0x60
 8018992:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018994:	4788      	blx	r1
 8018996:	f898 1006 	ldrb.w	r1, [r8, #6]
 801899a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801899c:	910b      	str	r1, [sp, #44]	; 0x2c
 801899e:	f898 100e 	ldrb.w	r1, [r8, #14]
 80189a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80189a4:	910a      	str	r1, [sp, #40]	; 0x28
 80189a6:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80189aa:	9109      	str	r1, [sp, #36]	; 0x24
 80189ac:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80189b0:	9305      	str	r3, [sp, #20]
 80189b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80189b4:	9206      	str	r2, [sp, #24]
 80189b6:	e9cd a601 	strd	sl, r6, [sp, #4]
 80189ba:	442e      	add	r6, r5
 80189bc:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80189c0:	b236      	sxth	r6, r6
 80189c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80189c4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80189c8:	9600      	str	r6, [sp, #0]
 80189ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 80189cc:	681a      	ldr	r2, [r3, #0]
 80189ce:	9811      	ldr	r0, [sp, #68]	; 0x44
 80189d0:	685b      	ldr	r3, [r3, #4]
 80189d2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80189d4:	47b0      	blx	r6
 80189d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189d8:	3301      	adds	r3, #1
 80189da:	930e      	str	r3, [sp, #56]	; 0x38
 80189dc:	e6e5      	b.n	80187aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80189de:	2700      	movs	r7, #0
 80189e0:	e7cd      	b.n	801897e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 80189e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80189e4:	3501      	adds	r5, #1
 80189e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80189e8:	429d      	cmp	r5, r3
 80189ea:	f6bf af76 	bge.w	80188da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80189ee:	4659      	mov	r1, fp
 80189f0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80189f2:	f7f9 fe33 	bl	801265c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80189f6:	4604      	mov	r4, r0
 80189f8:	b110      	cbz	r0, 8018a00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80189fa:	280a      	cmp	r0, #10
 80189fc:	d1f2      	bne.n	80189e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80189fe:	e76b      	b.n	80188d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018a00:	2400      	movs	r4, #0
 8018a02:	e76a      	b.n	80188da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018a04:	f1bb 0f00 	cmp.w	fp, #0
 8018a08:	f43f af5b 	beq.w	80188c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018a0c:	e776      	b.n	80188fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08018a0e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018a0e:	b530      	push	{r4, r5, lr}
 8018a10:	8a44      	ldrh	r4, [r0, #18]
 8018a12:	8ac5      	ldrh	r5, [r0, #22]
 8018a14:	82c3      	strh	r3, [r0, #22]
 8018a16:	442c      	add	r4, r5
 8018a18:	1ae4      	subs	r4, r4, r3
 8018a1a:	8b03      	ldrh	r3, [r0, #24]
 8018a1c:	8244      	strh	r4, [r0, #18]
 8018a1e:	8a84      	ldrh	r4, [r0, #20]
 8018a20:	4422      	add	r2, r4
 8018a22:	440c      	add	r4, r1
 8018a24:	1a59      	subs	r1, r3, r1
 8018a26:	8342      	strh	r2, [r0, #26]
 8018a28:	8284      	strh	r4, [r0, #20]
 8018a2a:	8301      	strh	r1, [r0, #24]
 8018a2c:	bd30      	pop	{r4, r5, pc}

08018a2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018a2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a32:	7a43      	ldrb	r3, [r0, #9]
 8018a34:	b087      	sub	sp, #28
 8018a36:	4604      	mov	r4, r0
 8018a38:	460f      	mov	r7, r1
 8018a3a:	1eda      	subs	r2, r3, #3
 8018a3c:	b2d2      	uxtb	r2, r2
 8018a3e:	2900      	cmp	r1, #0
 8018a40:	d036      	beq.n	8018ab0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8018a42:	2a01      	cmp	r2, #1
 8018a44:	d932      	bls.n	8018aac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8018a46:	1e58      	subs	r0, r3, #1
 8018a48:	f1d0 0b00 	rsbs	fp, r0, #0
 8018a4c:	eb4b 0b00 	adc.w	fp, fp, r0
 8018a50:	1e99      	subs	r1, r3, #2
 8018a52:	424b      	negs	r3, r1
 8018a54:	414b      	adcs	r3, r1
 8018a56:	9303      	str	r3, [sp, #12]
 8018a58:	2300      	movs	r3, #0
 8018a5a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8018a5e:	2500      	movs	r5, #0
 8018a60:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8018a64:	46a9      	mov	r9, r5
 8018a66:	8265      	strh	r5, [r4, #18]
 8018a68:	82a5      	strh	r5, [r4, #20]
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	9305      	str	r3, [sp, #20]
 8018a6e:	8823      	ldrh	r3, [r4, #0]
 8018a70:	2b20      	cmp	r3, #32
 8018a72:	d02b      	beq.n	8018acc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8018a74:	eba3 020a 	sub.w	r2, r3, sl
 8018a78:	4256      	negs	r6, r2
 8018a7a:	4156      	adcs	r6, r2
 8018a7c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018a80:	4293      	cmp	r3, r2
 8018a82:	d004      	beq.n	8018a8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018a84:	4553      	cmp	r3, sl
 8018a86:	bf16      	itet	ne
 8018a88:	4699      	movne	r9, r3
 8018a8a:	2601      	moveq	r6, #1
 8018a8c:	2600      	movne	r6, #0
 8018a8e:	ab05      	add	r3, sp, #20
 8018a90:	68e2      	ldr	r2, [r4, #12]
 8018a92:	7a21      	ldrb	r1, [r4, #8]
 8018a94:	6860      	ldr	r0, [r4, #4]
 8018a96:	f002 f94f 	bl	801ad38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018a9a:	8020      	strh	r0, [r4, #0]
 8018a9c:	b9c8      	cbnz	r0, 8018ad2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8018a9e:	8b22      	ldrh	r2, [r4, #24]
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	4611      	mov	r1, r2
 8018aa4:	4620      	mov	r0, r4
 8018aa6:	f7ff ffb2 	bl	8018a0e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018aaa:	e066      	b.n	8018b7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018aac:	468b      	mov	fp, r1
 8018aae:	e7cf      	b.n	8018a50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8018ab0:	3b01      	subs	r3, #1
 8018ab2:	2a01      	cmp	r2, #1
 8018ab4:	9103      	str	r1, [sp, #12]
 8018ab6:	468b      	mov	fp, r1
 8018ab8:	bf8c      	ite	hi
 8018aba:	2200      	movhi	r2, #0
 8018abc:	2201      	movls	r2, #1
 8018abe:	2b01      	cmp	r3, #1
 8018ac0:	9202      	str	r2, [sp, #8]
 8018ac2:	bf8c      	ite	hi
 8018ac4:	2300      	movhi	r3, #0
 8018ac6:	2301      	movls	r3, #1
 8018ac8:	9301      	str	r3, [sp, #4]
 8018aca:	e7c8      	b.n	8018a5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8018acc:	4699      	mov	r9, r3
 8018ace:	2601      	movs	r6, #1
 8018ad0:	e7dd      	b.n	8018a8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018ad2:	8ae3      	ldrh	r3, [r4, #22]
 8018ad4:	280a      	cmp	r0, #10
 8018ad6:	f103 0301 	add.w	r3, r3, #1
 8018ada:	82e3      	strh	r3, [r4, #22]
 8018adc:	d0df      	beq.n	8018a9e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8018ade:	9a05      	ldr	r2, [sp, #20]
 8018ae0:	bb42      	cbnz	r2, 8018b34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8018ae2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018ae6:	4298      	cmp	r0, r3
 8018ae8:	d001      	beq.n	8018aee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018aea:	4550      	cmp	r0, sl
 8018aec:	d1bd      	bne.n	8018a6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018aee:	8823      	ldrh	r3, [r4, #0]
 8018af0:	8b21      	ldrh	r1, [r4, #24]
 8018af2:	2b20      	cmp	r3, #32
 8018af4:	d001      	beq.n	8018afa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8018af6:	4553      	cmp	r3, sl
 8018af8:	d131      	bne.n	8018b5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8018afa:	2e00      	cmp	r6, #0
 8018afc:	bf0a      	itet	eq
 8018afe:	460d      	moveq	r5, r1
 8018b00:	4630      	movne	r0, r6
 8018b02:	2001      	moveq	r0, #1
 8018b04:	440a      	add	r2, r1
 8018b06:	8aa3      	ldrh	r3, [r4, #20]
 8018b08:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018b0c:	b292      	uxth	r2, r2
 8018b0e:	8322      	strh	r2, [r4, #24]
 8018b10:	4413      	add	r3, r2
 8018b12:	2f00      	cmp	r7, #0
 8018b14:	d03a      	beq.n	8018b8c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8018b16:	f1bb 0f00 	cmp.w	fp, #0
 8018b1a:	d102      	bne.n	8018b22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8018b1c:	9903      	ldr	r1, [sp, #12]
 8018b1e:	b301      	cbz	r1, 8018b62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018b20:	b1f8      	cbz	r0, 8018b62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018b22:	8ba1      	ldrh	r1, [r4, #28]
 8018b24:	4419      	add	r1, r3
 8018b26:	458c      	cmp	ip, r1
 8018b28:	da2a      	bge.n	8018b80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018b2a:	8a61      	ldrh	r1, [r4, #18]
 8018b2c:	b341      	cbz	r1, 8018b80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018b2e:	4563      	cmp	r3, ip
 8018b30:	dd9b      	ble.n	8018a6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018b32:	e01c      	b.n	8018b6e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018b34:	8893      	ldrh	r3, [r2, #4]
 8018b36:	4649      	mov	r1, r9
 8018b38:	8023      	strh	r3, [r4, #0]
 8018b3a:	f892 800d 	ldrb.w	r8, [r2, #13]
 8018b3e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018b42:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8018b46:	f892 800a 	ldrb.w	r8, [r2, #10]
 8018b4a:	ea48 0800 	orr.w	r8, r8, r0
 8018b4e:	68e0      	ldr	r0, [r4, #12]
 8018b50:	6803      	ldr	r3, [r0, #0]
 8018b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b54:	4798      	blx	r3
 8018b56:	eb08 0200 	add.w	r2, r8, r0
 8018b5a:	b292      	uxth	r2, r2
 8018b5c:	e7c7      	b.n	8018aee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018b5e:	2000      	movs	r0, #0
 8018b60:	e7d0      	b.n	8018b04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018b62:	4563      	cmp	r3, ip
 8018b64:	dd81      	ble.n	8018a6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018b66:	8a63      	ldrh	r3, [r4, #18]
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	f43f af7e 	beq.w	8018a6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018b6e:	2301      	movs	r3, #1
 8018b70:	8ba2      	ldrh	r2, [r4, #28]
 8018b72:	77a3      	strb	r3, [r4, #30]
 8018b74:	8b63      	ldrh	r3, [r4, #26]
 8018b76:	4413      	add	r3, r2
 8018b78:	8363      	strh	r3, [r4, #26]
 8018b7a:	b007      	add	sp, #28
 8018b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b80:	2300      	movs	r3, #0
 8018b82:	4611      	mov	r1, r2
 8018b84:	4620      	mov	r0, r4
 8018b86:	f7ff ff42 	bl	8018a0e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018b8a:	e76e      	b.n	8018a6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018b8c:	4563      	cmp	r3, ip
 8018b8e:	dd14      	ble.n	8018bba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8018b90:	9b02      	ldr	r3, [sp, #8]
 8018b92:	b113      	cbz	r3, 8018b9a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8018b94:	2301      	movs	r3, #1
 8018b96:	460a      	mov	r2, r1
 8018b98:	e783      	b.n	8018aa2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8018b9a:	9b01      	ldr	r3, [sp, #4]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	f43f af64 	beq.w	8018a6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ba2:	2800      	cmp	r0, #0
 8018ba4:	f47f af61 	bne.w	8018a6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ba8:	b116      	cbz	r6, 8018bb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8018baa:	2301      	movs	r3, #1
 8018bac:	462a      	mov	r2, r5
 8018bae:	e779      	b.n	8018aa4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8018bb0:	8a63      	ldrh	r3, [r4, #18]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	f43f af59 	beq.w	8018a6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018bb8:	e7df      	b.n	8018b7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018bba:	2800      	cmp	r0, #0
 8018bbc:	f47f af55 	bne.w	8018a6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018bc0:	2e00      	cmp	r6, #0
 8018bc2:	f43f af52 	beq.w	8018a6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018bc6:	2301      	movs	r3, #1
 8018bc8:	462a      	mov	r2, r5
 8018bca:	e7db      	b.n	8018b84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08018bcc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018bcc:	b530      	push	{r4, r5, lr}
 8018bce:	4605      	mov	r5, r0
 8018bd0:	b08b      	sub	sp, #44	; 0x2c
 8018bd2:	b191      	cbz	r1, 8018bfa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8018bd4:	2401      	movs	r4, #1
 8018bd6:	e9cd 3100 	strd	r3, r1, [sp]
 8018bda:	4613      	mov	r3, r2
 8018bdc:	4601      	mov	r1, r0
 8018bde:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018be2:	a802      	add	r0, sp, #8
 8018be4:	f7ff fd0b 	bl	80185fe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018be8:	2100      	movs	r1, #0
 8018bea:	a802      	add	r0, sp, #8
 8018bec:	f7ff ff1f 	bl	8018a2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018bf0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018bf4:	b163      	cbz	r3, 8018c10 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018bf6:	3401      	adds	r4, #1
 8018bf8:	e7f6      	b.n	8018be8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8018bfa:	2401      	movs	r4, #1
 8018bfc:	f002 f98e 	bl	801af1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018c00:	280a      	cmp	r0, #10
 8018c02:	4628      	mov	r0, r5
 8018c04:	bf08      	it	eq
 8018c06:	3401      	addeq	r4, #1
 8018c08:	f002 f988 	bl	801af1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018c0c:	2800      	cmp	r0, #0
 8018c0e:	d1f7      	bne.n	8018c00 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8018c10:	b2a0      	uxth	r0, r4
 8018c12:	b00b      	add	sp, #44	; 0x2c
 8018c14:	bd30      	pop	{r4, r5, pc}

08018c16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018c16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c1a:	b0db      	sub	sp, #364	; 0x16c
 8018c1c:	4689      	mov	r9, r1
 8018c1e:	461c      	mov	r4, r3
 8018c20:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8018c24:	900a      	str	r0, [sp, #40]	; 0x28
 8018c26:	f1ba 0f00 	cmp.w	sl, #0
 8018c2a:	f000 80a5 	beq.w	8018d78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	f000 80a1 	beq.w	8018d78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018c36:	7ba3      	ldrb	r3, [r4, #14]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	f000 809d 	beq.w	8018d78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018c3e:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8018c42:	6810      	ldr	r0, [r2, #0]
 8018c44:	6851      	ldr	r1, [r2, #4]
 8018c46:	2500      	movs	r5, #0
 8018c48:	4643      	mov	r3, r8
 8018c4a:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8018c4e:	950e      	str	r5, [sp, #56]	; 0x38
 8018c50:	af18      	add	r7, sp, #96	; 0x60
 8018c52:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8018c56:	79a2      	ldrb	r2, [r4, #6]
 8018c58:	c303      	stmia	r3!, {r0, r1}
 8018c5a:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8018c5e:	a90e      	add	r1, sp, #56	; 0x38
 8018c60:	4640      	mov	r0, r8
 8018c62:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018c66:	f7ff fd40 	bl	80186ea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018c6a:	a90e      	add	r1, sp, #56	; 0x38
 8018c6c:	79a2      	ldrb	r2, [r4, #6]
 8018c6e:	4608      	mov	r0, r1
 8018c70:	f7ff fd3b 	bl	80186ea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018c74:	4638      	mov	r0, r7
 8018c76:	f001 fd20 	bl	801a6ba <_ZN8touchgfx12TextProviderC1Ev>
 8018c7a:	6820      	ldr	r0, [r4, #0]
 8018c7c:	6803      	ldr	r3, [r0, #0]
 8018c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c80:	4798      	blx	r3
 8018c82:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018c84:	4603      	mov	r3, r0
 8018c86:	4651      	mov	r1, sl
 8018c88:	4638      	mov	r0, r7
 8018c8a:	f001 fd5b 	bl	801a744 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018c8e:	7923      	ldrb	r3, [r4, #4]
 8018c90:	6820      	ldr	r0, [r4, #0]
 8018c92:	9308      	str	r3, [sp, #32]
 8018c94:	6803      	ldr	r3, [r0, #0]
 8018c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c98:	4798      	blx	r3
 8018c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c9e:	181e      	adds	r6, r3, r0
 8018ca0:	42ae      	cmp	r6, r5
 8018ca2:	dd06      	ble.n	8018cb2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8018ca4:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8018ca8:	4282      	cmp	r2, r0
 8018caa:	bfa4      	itt	ge
 8018cac:	189d      	addge	r5, r3, r2
 8018cae:	fb95 f5f6 	sdivge	r5, r5, r6
 8018cb2:	a82e      	add	r0, sp, #184	; 0xb8
 8018cb4:	f001 fd01 	bl	801a6ba <_ZN8touchgfx12TextProviderC1Ev>
 8018cb8:	7c23      	ldrb	r3, [r4, #16]
 8018cba:	b14b      	cbz	r3, 8018cd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 8018cbc:	6820      	ldr	r0, [r4, #0]
 8018cbe:	6803      	ldr	r3, [r0, #0]
 8018cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018cc2:	4798      	blx	r3
 8018cc4:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	4651      	mov	r1, sl
 8018cca:	a82e      	add	r0, sp, #184	; 0xb8
 8018ccc:	f001 fd3a 	bl	801a744 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018cd0:	7c21      	ldrb	r1, [r4, #16]
 8018cd2:	a810      	add	r0, sp, #64	; 0x40
 8018cd4:	7963      	ldrb	r3, [r4, #5]
 8018cd6:	9101      	str	r1, [sp, #4]
 8018cd8:	6821      	ldr	r1, [r4, #0]
 8018cda:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8018cde:	9100      	str	r1, [sp, #0]
 8018ce0:	a92e      	add	r1, sp, #184	; 0xb8
 8018ce2:	f7ff fc8c 	bl	80185fe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018ce6:	7c23      	ldrb	r3, [r4, #16]
 8018ce8:	b9bb      	cbnz	r3, 8018d1a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8018cea:	fa1f fa86 	uxth.w	sl, r6
 8018cee:	2d00      	cmp	r5, #0
 8018cf0:	dd45      	ble.n	8018d7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8018cf2:	4638      	mov	r0, r7
 8018cf4:	f002 f912 	bl	801af1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018cf8:	2800      	cmp	r0, #0
 8018cfa:	d03d      	beq.n	8018d78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018cfc:	280a      	cmp	r0, #10
 8018cfe:	d1f6      	bne.n	8018cee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8018d00:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018d04:	3d01      	subs	r5, #1
 8018d06:	4453      	add	r3, sl
 8018d08:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018d0c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018d10:	eba3 030a 	sub.w	r3, r3, sl
 8018d14:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018d18:	e7e9      	b.n	8018cee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8018d1a:	0073      	lsls	r3, r6, #1
 8018d1c:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8018d20:	fa1f fa86 	uxth.w	sl, r6
 8018d24:	9309      	str	r3, [sp, #36]	; 0x24
 8018d26:	2d00      	cmp	r5, #0
 8018d28:	dd29      	ble.n	8018d7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8018d2a:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018d2e:	a810      	add	r0, sp, #64	; 0x40
 8018d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d32:	428b      	cmp	r3, r1
 8018d34:	bfd4      	ite	le
 8018d36:	2100      	movle	r1, #0
 8018d38:	2101      	movgt	r1, #1
 8018d3a:	f7ff fe78 	bl	8018a2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018d3e:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8018d42:	3b01      	subs	r3, #1
 8018d44:	b29b      	uxth	r3, r3
 8018d46:	455b      	cmp	r3, fp
 8018d48:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d4a:	d005      	beq.n	8018d58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8018d4c:	7961      	ldrb	r1, [r4, #5]
 8018d4e:	4638      	mov	r0, r7
 8018d50:	f7f9 fc84 	bl	801265c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018d54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d56:	e7f4      	b.n	8018d42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 8018d58:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018d5c:	3d01      	subs	r5, #1
 8018d5e:	4453      	add	r3, sl
 8018d60:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018d64:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018d68:	eba3 030a 	sub.w	r3, r3, sl
 8018d6c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018d70:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d1d6      	bne.n	8018d26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 8018d78:	b05b      	add	sp, #364	; 0x16c
 8018d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d7e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8018d82:	ad44      	add	r5, sp, #272	; 0x110
 8018d84:	f04f 0b00 	mov.w	fp, #0
 8018d88:	7c23      	ldrb	r3, [r4, #16]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d067      	beq.n	8018e5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8018d8e:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018d92:	a810      	add	r0, sp, #64	; 0x40
 8018d94:	458a      	cmp	sl, r1
 8018d96:	bfd4      	ite	le
 8018d98:	2100      	movle	r1, #0
 8018d9a:	2101      	movgt	r1, #1
 8018d9c:	f7ff fe47 	bl	8018a2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018da0:	9b08      	ldr	r3, [sp, #32]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d056      	beq.n	8018e54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8018da6:	7c23      	ldrb	r3, [r4, #16]
 8018da8:	2258      	movs	r2, #88	; 0x58
 8018daa:	4639      	mov	r1, r7
 8018dac:	4628      	mov	r0, r5
 8018dae:	9309      	str	r3, [sp, #36]	; 0x24
 8018db0:	f00c fd14 	bl	80257dc <memcpy>
 8018db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d059      	beq.n	8018e6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8018dba:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8018dbe:	7922      	ldrb	r2, [r4, #4]
 8018dc0:	2a01      	cmp	r2, #1
 8018dc2:	d13d      	bne.n	8018e40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 8018dc4:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8018dc8:	1ac0      	subs	r0, r0, r3
 8018dca:	2302      	movs	r3, #2
 8018dcc:	fb90 f0f3 	sdiv	r0, r0, r3
 8018dd0:	b200      	sxth	r0, r0
 8018dd2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018dd6:	4418      	add	r0, r3
 8018dd8:	7c23      	ldrb	r3, [r4, #16]
 8018dda:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d03a      	beq.n	8018e58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8018de2:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8018de6:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8018dea:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018dee:	9500      	str	r5, [sp, #0]
 8018df0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018df2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018df6:	e9cd b703 	strd	fp, r7, [sp, #12]
 8018dfa:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8018dfe:	464a      	mov	r2, r9
 8018e00:	2100      	movs	r1, #0
 8018e02:	f7ff fca3 	bl	801874c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018e06:	2800      	cmp	r0, #0
 8018e08:	d1b6      	bne.n	8018d78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018e0a:	b2b2      	uxth	r2, r6
 8018e0c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018e10:	4611      	mov	r1, r2
 8018e12:	4413      	add	r3, r2
 8018e14:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8018e18:	b21b      	sxth	r3, r3
 8018e1a:	1a52      	subs	r2, r2, r1
 8018e1c:	7c21      	ldrb	r1, [r4, #16]
 8018e1e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018e22:	b212      	sxth	r2, r2
 8018e24:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8018e28:	b109      	cbz	r1, 8018e2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 8018e2a:	42b2      	cmp	r2, r6
 8018e2c:	dba4      	blt.n	8018d78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018e2e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8018e32:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8018e36:	440a      	add	r2, r1
 8018e38:	b212      	sxth	r2, r2
 8018e3a:	4293      	cmp	r3, r2
 8018e3c:	dda4      	ble.n	8018d88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8018e3e:	e79b      	b.n	8018d78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018e40:	2a02      	cmp	r2, #2
 8018e42:	d105      	bne.n	8018e50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 8018e44:	7be2      	ldrb	r2, [r4, #15]
 8018e46:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8018e4a:	1a80      	subs	r0, r0, r2
 8018e4c:	1ac0      	subs	r0, r0, r3
 8018e4e:	e7bf      	b.n	8018dd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8018e50:	2000      	movs	r0, #0
 8018e52:	e7be      	b.n	8018dd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8018e54:	7be0      	ldrb	r0, [r4, #15]
 8018e56:	e7bc      	b.n	8018dd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8018e58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018e5c:	e7c3      	b.n	8018de6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8018e5e:	9b08      	ldr	r3, [sp, #32]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d0f7      	beq.n	8018e54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8018e64:	2258      	movs	r2, #88	; 0x58
 8018e66:	4639      	mov	r1, r7
 8018e68:	4628      	mov	r0, r5
 8018e6a:	f00c fcb7 	bl	80257dc <memcpy>
 8018e6e:	2300      	movs	r3, #0
 8018e70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018e74:	6821      	ldr	r1, [r4, #0]
 8018e76:	4628      	mov	r0, r5
 8018e78:	f7ff fbfb 	bl	8018672 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018e7c:	b203      	sxth	r3, r0
 8018e7e:	e79e      	b.n	8018dbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08018e80 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018e80:	2b02      	cmp	r3, #2
 8018e82:	b510      	push	{r4, lr}
 8018e84:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018e88:	d00b      	beq.n	8018ea2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018e8a:	2b03      	cmp	r3, #3
 8018e8c:	d00e      	beq.n	8018eac <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018e8e:	2b01      	cmp	r3, #1
 8018e90:	d001      	beq.n	8018e96 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018e92:	1860      	adds	r0, r4, r1
 8018e94:	bd10      	pop	{r4, pc}
 8018e96:	8880      	ldrh	r0, [r0, #4]
 8018e98:	4420      	add	r0, r4
 8018e9a:	b200      	sxth	r0, r0
 8018e9c:	1a80      	subs	r0, r0, r2
 8018e9e:	3801      	subs	r0, #1
 8018ea0:	e7f8      	b.n	8018e94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018ea2:	8880      	ldrh	r0, [r0, #4]
 8018ea4:	4420      	add	r0, r4
 8018ea6:	b200      	sxth	r0, r0
 8018ea8:	1a40      	subs	r0, r0, r1
 8018eaa:	e7f8      	b.n	8018e9e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018eac:	18a0      	adds	r0, r4, r2
 8018eae:	e7f1      	b.n	8018e94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018eb0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018eb0:	2b02      	cmp	r3, #2
 8018eb2:	b510      	push	{r4, lr}
 8018eb4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018eb8:	d006      	beq.n	8018ec8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018eba:	2b03      	cmp	r3, #3
 8018ebc:	d00a      	beq.n	8018ed4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018ebe:	2b01      	cmp	r3, #1
 8018ec0:	bf14      	ite	ne
 8018ec2:	18a0      	addne	r0, r4, r2
 8018ec4:	1860      	addeq	r0, r4, r1
 8018ec6:	bd10      	pop	{r4, pc}
 8018ec8:	88c0      	ldrh	r0, [r0, #6]
 8018eca:	4420      	add	r0, r4
 8018ecc:	b200      	sxth	r0, r0
 8018ece:	1a80      	subs	r0, r0, r2
 8018ed0:	3801      	subs	r0, #1
 8018ed2:	e7f8      	b.n	8018ec6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018ed4:	88c0      	ldrh	r0, [r0, #6]
 8018ed6:	4420      	add	r0, r4
 8018ed8:	b200      	sxth	r0, r0
 8018eda:	1a40      	subs	r0, r0, r1
 8018edc:	e7f8      	b.n	8018ed0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08018ee0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018ee0:	4b01      	ldr	r3, [pc, #4]	; (8018ee8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	601a      	str	r2, [r3, #0]
 8018ee6:	4770      	bx	lr
 8018ee8:	2000b394 	.word	0x2000b394

08018eec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8018eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eee:	1e05      	subs	r5, r0, #0
 8018ef0:	f04f 0601 	mov.w	r6, #1
 8018ef4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018ef8:	bfba      	itte	lt
 8018efa:	f04f 37ff 	movlt.w	r7, #4294967295
 8018efe:	426d      	neglt	r5, r5
 8018f00:	2701      	movge	r7, #1
 8018f02:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8018f06:	f1be 0f00 	cmp.w	lr, #0
 8018f0a:	bfbc      	itt	lt
 8018f0c:	f1ce 0e00 	rsblt	lr, lr, #0
 8018f10:	427f      	neglt	r7, r7
 8018f12:	2c00      	cmp	r4, #0
 8018f14:	fa4e f001 	asr.w	r0, lr, r1
 8018f18:	fa06 f101 	lsl.w	r1, r6, r1
 8018f1c:	bfbc      	itt	lt
 8018f1e:	4264      	neglt	r4, r4
 8018f20:	427f      	neglt	r7, r7
 8018f22:	3901      	subs	r1, #1
 8018f24:	ea01 010e 	and.w	r1, r1, lr
 8018f28:	434d      	muls	r5, r1
 8018f2a:	f8dc 1000 	ldr.w	r1, [ip]
 8018f2e:	fb03 1300 	mla	r3, r3, r0, r1
 8018f32:	fb95 f1f4 	sdiv	r1, r5, r4
 8018f36:	fb04 5511 	mls	r5, r4, r1, r5
 8018f3a:	441d      	add	r5, r3
 8018f3c:	fb95 f3f4 	sdiv	r3, r5, r4
 8018f40:	4419      	add	r1, r3
 8018f42:	fb04 5413 	mls	r4, r4, r3, r5
 8018f46:	fb02 1000 	mla	r0, r2, r0, r1
 8018f4a:	f8cc 4000 	str.w	r4, [ip]
 8018f4e:	4378      	muls	r0, r7
 8018f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018f54 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f58:	4c24      	ldr	r4, [pc, #144]	; (8018fec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8018f5a:	b086      	sub	sp, #24
 8018f5c:	4605      	mov	r5, r0
 8018f5e:	6807      	ldr	r7, [r0, #0]
 8018f60:	69a3      	ldr	r3, [r4, #24]
 8018f62:	b92b      	cbnz	r3, 8018f70 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8018f64:	6840      	ldr	r0, [r0, #4]
 8018f66:	e9c5 7000 	strd	r7, r0, [r5]
 8018f6a:	b006      	add	sp, #24
 8018f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f70:	f04f 0802 	mov.w	r8, #2
 8018f74:	68a2      	ldr	r2, [r4, #8]
 8018f76:	ae06      	add	r6, sp, #24
 8018f78:	6820      	ldr	r0, [r4, #0]
 8018f7a:	fb93 f1f8 	sdiv	r1, r3, r8
 8018f7e:	440a      	add	r2, r1
 8018f80:	69e1      	ldr	r1, [r4, #28]
 8018f82:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018f86:	9700      	str	r7, [sp, #0]
 8018f88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018f8a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8018f8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018f90:	f7ff ffac 	bl	8018eec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018f94:	69a3      	ldr	r3, [r4, #24]
 8018f96:	4607      	mov	r7, r0
 8018f98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018f9a:	9301      	str	r3, [sp, #4]
 8018f9c:	686b      	ldr	r3, [r5, #4]
 8018f9e:	6a21      	ldr	r1, [r4, #32]
 8018fa0:	9300      	str	r3, [sp, #0]
 8018fa2:	9602      	str	r6, [sp, #8]
 8018fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018fa6:	6860      	ldr	r0, [r4, #4]
 8018fa8:	f7ff ffa0 	bl	8018eec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018fac:	69a2      	ldr	r2, [r4, #24]
 8018fae:	6963      	ldr	r3, [r4, #20]
 8018fb0:	4407      	add	r7, r0
 8018fb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018fb4:	68e0      	ldr	r0, [r4, #12]
 8018fb6:	fb92 f8f8 	sdiv	r8, r2, r8
 8018fba:	4443      	add	r3, r8
 8018fbc:	9305      	str	r3, [sp, #20]
 8018fbe:	682b      	ldr	r3, [r5, #0]
 8018fc0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8018fc4:	9300      	str	r3, [sp, #0]
 8018fc6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018fc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018fca:	f7ff ff8f 	bl	8018eec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018fce:	69a3      	ldr	r3, [r4, #24]
 8018fd0:	4680      	mov	r8, r0
 8018fd2:	9602      	str	r6, [sp, #8]
 8018fd4:	9301      	str	r3, [sp, #4]
 8018fd6:	686b      	ldr	r3, [r5, #4]
 8018fd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018fda:	9300      	str	r3, [sp, #0]
 8018fdc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018fde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018fe0:	6920      	ldr	r0, [r4, #16]
 8018fe2:	f7ff ff83 	bl	8018eec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018fe6:	4440      	add	r0, r8
 8018fe8:	e7bd      	b.n	8018f66 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8018fea:	bf00      	nop
 8018fec:	2000b398 	.word	0x2000b398

08018ff0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018ff0:	4b07      	ldr	r3, [pc, #28]	; (8019010 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018ff2:	b510      	push	{r4, lr}
 8018ff4:	781b      	ldrb	r3, [r3, #0]
 8018ff6:	2b01      	cmp	r3, #1
 8018ff8:	d108      	bne.n	801900c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018ffa:	4b06      	ldr	r3, [pc, #24]	; (8019014 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018ffc:	880c      	ldrh	r4, [r1, #0]
 8018ffe:	881b      	ldrh	r3, [r3, #0]
 8019000:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019004:	3b01      	subs	r3, #1
 8019006:	1b1b      	subs	r3, r3, r4
 8019008:	8003      	strh	r3, [r0, #0]
 801900a:	800a      	strh	r2, [r1, #0]
 801900c:	bd10      	pop	{r4, pc}
 801900e:	bf00      	nop
 8019010:	2000b364 	.word	0x2000b364
 8019014:	2000b368 	.word	0x2000b368

08019018 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019018:	4b0a      	ldr	r3, [pc, #40]	; (8019044 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801901a:	b510      	push	{r4, lr}
 801901c:	781b      	ldrb	r3, [r3, #0]
 801901e:	2b01      	cmp	r3, #1
 8019020:	d10e      	bne.n	8019040 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019022:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019026:	8843      	ldrh	r3, [r0, #2]
 8019028:	f9b0 4000 	ldrsh.w	r4, [r0]
 801902c:	18ca      	adds	r2, r1, r3
 801902e:	4b06      	ldr	r3, [pc, #24]	; (8019048 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019030:	8044      	strh	r4, [r0, #2]
 8019032:	881b      	ldrh	r3, [r3, #0]
 8019034:	1a9b      	subs	r3, r3, r2
 8019036:	8003      	strh	r3, [r0, #0]
 8019038:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801903c:	8081      	strh	r1, [r0, #4]
 801903e:	80c3      	strh	r3, [r0, #6]
 8019040:	bd10      	pop	{r4, pc}
 8019042:	bf00      	nop
 8019044:	2000b364 	.word	0x2000b364
 8019048:	2000b360 	.word	0x2000b360

0801904c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801904c:	4b07      	ldr	r3, [pc, #28]	; (801906c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801904e:	b510      	push	{r4, lr}
 8019050:	781b      	ldrb	r3, [r3, #0]
 8019052:	2b01      	cmp	r3, #1
 8019054:	d108      	bne.n	8019068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019056:	f9b1 3000 	ldrsh.w	r3, [r1]
 801905a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801905e:	8003      	strh	r3, [r0, #0]
 8019060:	8893      	ldrh	r3, [r2, #4]
 8019062:	3b01      	subs	r3, #1
 8019064:	1b1b      	subs	r3, r3, r4
 8019066:	800b      	strh	r3, [r1, #0]
 8019068:	bd10      	pop	{r4, pc}
 801906a:	bf00      	nop
 801906c:	2000b364 	.word	0x2000b364

08019070 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019070:	4b08      	ldr	r3, [pc, #32]	; (8019094 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019072:	b513      	push	{r0, r1, r4, lr}
 8019074:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019078:	2400      	movs	r4, #0
 801907a:	4b07      	ldr	r3, [pc, #28]	; (8019098 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801907c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019080:	466a      	mov	r2, sp
 8019082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019086:	9400      	str	r4, [sp, #0]
 8019088:	f8ad 3006 	strh.w	r3, [sp, #6]
 801908c:	f7ff ffde 	bl	801904c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019090:	b002      	add	sp, #8
 8019092:	bd10      	pop	{r4, pc}
 8019094:	2000b360 	.word	0x2000b360
 8019098:	2000b362 	.word	0x2000b362

0801909c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801909c:	4b0a      	ldr	r3, [pc, #40]	; (80190c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801909e:	460a      	mov	r2, r1
 80190a0:	b510      	push	{r4, lr}
 80190a2:	781b      	ldrb	r3, [r3, #0]
 80190a4:	2b01      	cmp	r3, #1
 80190a6:	d10d      	bne.n	80190c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80190a8:	8881      	ldrh	r1, [r0, #4]
 80190aa:	8803      	ldrh	r3, [r0, #0]
 80190ac:	440b      	add	r3, r1
 80190ae:	4601      	mov	r1, r0
 80190b0:	3b01      	subs	r3, #1
 80190b2:	f821 3b02 	strh.w	r3, [r1], #2
 80190b6:	f7ff ffc9 	bl	801904c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80190ba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80190be:	88c2      	ldrh	r2, [r0, #6]
 80190c0:	80c3      	strh	r3, [r0, #6]
 80190c2:	8082      	strh	r2, [r0, #4]
 80190c4:	bd10      	pop	{r4, pc}
 80190c6:	bf00      	nop
 80190c8:	2000b364 	.word	0x2000b364

080190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80190cc:	4b09      	ldr	r3, [pc, #36]	; (80190f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80190ce:	b507      	push	{r0, r1, r2, lr}
 80190d0:	2100      	movs	r1, #0
 80190d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80190d6:	4b08      	ldr	r3, [pc, #32]	; (80190f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80190d8:	9100      	str	r1, [sp, #0]
 80190da:	4669      	mov	r1, sp
 80190dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190e0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80190e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80190e8:	f7ff ffd8 	bl	801909c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80190ec:	b003      	add	sp, #12
 80190ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80190f2:	bf00      	nop
 80190f4:	2000b360 	.word	0x2000b360
 80190f8:	2000b362 	.word	0x2000b362

080190fc <_ZN8touchgfx11Application13requestRedrawEv>:
 80190fc:	4b06      	ldr	r3, [pc, #24]	; (8019118 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80190fe:	2100      	movs	r1, #0
 8019100:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019104:	4b05      	ldr	r3, [pc, #20]	; (801911c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019106:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801910a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801910e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8019112:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8019116:	4770      	bx	lr
 8019118:	2000b360 	.word	0x2000b360
 801911c:	2000b362 	.word	0x2000b362

08019120 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019120:	4b03      	ldr	r3, [pc, #12]	; (8019130 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019122:	6818      	ldr	r0, [r3, #0]
 8019124:	b110      	cbz	r0, 801912c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019126:	6803      	ldr	r3, [r0, #0]
 8019128:	699b      	ldr	r3, [r3, #24]
 801912a:	4718      	bx	r3
 801912c:	4770      	bx	lr
 801912e:	bf00      	nop
 8019130:	2000b3e8 	.word	0x2000b3e8

08019134 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019134:	4770      	bx	lr
	...

08019138 <_ZN8touchgfx11Application4drawEv>:
 8019138:	4b09      	ldr	r3, [pc, #36]	; (8019160 <_ZN8touchgfx11Application4drawEv+0x28>)
 801913a:	b507      	push	{r0, r1, r2, lr}
 801913c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019140:	2100      	movs	r1, #0
 8019142:	4b08      	ldr	r3, [pc, #32]	; (8019164 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019144:	9100      	str	r1, [sp, #0]
 8019146:	4669      	mov	r1, sp
 8019148:	f9b3 3000 	ldrsh.w	r3, [r3]
 801914c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019150:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019154:	6803      	ldr	r3, [r0, #0]
 8019156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019158:	4798      	blx	r3
 801915a:	b003      	add	sp, #12
 801915c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019160:	2000b360 	.word	0x2000b360
 8019164:	2000b362 	.word	0x2000b362

08019168 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019168:	4b03      	ldr	r3, [pc, #12]	; (8019178 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801916a:	6818      	ldr	r0, [r3, #0]
 801916c:	b110      	cbz	r0, 8019174 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801916e:	6803      	ldr	r3, [r0, #0]
 8019170:	69db      	ldr	r3, [r3, #28]
 8019172:	4718      	bx	r3
 8019174:	4770      	bx	lr
 8019176:	bf00      	nop
 8019178:	2000b3e8 	.word	0x2000b3e8

0801917c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801917c:	4b03      	ldr	r3, [pc, #12]	; (801918c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801917e:	6818      	ldr	r0, [r3, #0]
 8019180:	b110      	cbz	r0, 8019188 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019182:	6803      	ldr	r3, [r0, #0]
 8019184:	6a1b      	ldr	r3, [r3, #32]
 8019186:	4718      	bx	r3
 8019188:	4770      	bx	lr
 801918a:	bf00      	nop
 801918c:	2000b3e8 	.word	0x2000b3e8

08019190 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019190:	4b03      	ldr	r3, [pc, #12]	; (80191a0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019192:	6818      	ldr	r0, [r3, #0]
 8019194:	b110      	cbz	r0, 801919c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019196:	6803      	ldr	r3, [r0, #0]
 8019198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801919a:	4718      	bx	r3
 801919c:	4770      	bx	lr
 801919e:	bf00      	nop
 80191a0:	2000b3e8 	.word	0x2000b3e8

080191a4 <_ZN8touchgfx11Application15handleTickEventEv>:
 80191a4:	b570      	push	{r4, r5, r6, lr}
 80191a6:	4d34      	ldr	r5, [pc, #208]	; (8019278 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 80191a8:	4604      	mov	r4, r0
 80191aa:	6828      	ldr	r0, [r5, #0]
 80191ac:	b140      	cbz	r0, 80191c0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80191ae:	7a03      	ldrb	r3, [r0, #8]
 80191b0:	b933      	cbnz	r3, 80191c0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80191b2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80191b6:	6803      	ldr	r3, [r0, #0]
 80191b8:	689b      	ldr	r3, [r3, #8]
 80191ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80191be:	4718      	bx	r3
 80191c0:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80191c4:	b97b      	cbnz	r3, 80191e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80191c6:	b170      	cbz	r0, 80191e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80191c8:	7a03      	ldrb	r3, [r0, #8]
 80191ca:	b163      	cbz	r3, 80191e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80191cc:	4b2b      	ldr	r3, [pc, #172]	; (801927c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 80191ce:	6818      	ldr	r0, [r3, #0]
 80191d0:	b110      	cbz	r0, 80191d8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80191d2:	6803      	ldr	r3, [r0, #0]
 80191d4:	691b      	ldr	r3, [r3, #16]
 80191d6:	4798      	blx	r3
 80191d8:	6828      	ldr	r0, [r5, #0]
 80191da:	6803      	ldr	r3, [r0, #0]
 80191dc:	68db      	ldr	r3, [r3, #12]
 80191de:	4798      	blx	r3
 80191e0:	2301      	movs	r3, #1
 80191e2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80191e6:	2500      	movs	r5, #0
 80191e8:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80191ec:	42a8      	cmp	r0, r5
 80191ee:	dd0c      	ble.n	801920a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80191f0:	1963      	adds	r3, r4, r5
 80191f2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80191f6:	b132      	cbz	r2, 8019206 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 80191f8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80191fc:	4413      	add	r3, r2
 80191fe:	6858      	ldr	r0, [r3, #4]
 8019200:	6803      	ldr	r3, [r0, #0]
 8019202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019204:	4798      	blx	r3
 8019206:	3501      	adds	r5, #1
 8019208:	e7ee      	b.n	80191e8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801920a:	2300      	movs	r3, #0
 801920c:	461a      	mov	r2, r3
 801920e:	4298      	cmp	r0, r3
 8019210:	d114      	bne.n	801923c <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8019212:	1d25      	adds	r5, r4, #4
 8019214:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8019218:	1e48      	subs	r0, r1, #1
 801921a:	b280      	uxth	r0, r0
 801921c:	4291      	cmp	r1, r2
 801921e:	dd24      	ble.n	801926a <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 8019220:	4288      	cmp	r0, r1
 8019222:	d2fb      	bcs.n	801921c <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8019224:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8019228:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801922c:	3304      	adds	r3, #4
 801922e:	428b      	cmp	r3, r1
 8019230:	d018      	beq.n	8019264 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8019232:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8019236:	f843 6c04 	str.w	r6, [r3, #-4]
 801923a:	e7f8      	b.n	801922e <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801923c:	18e1      	adds	r1, r4, r3
 801923e:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8019242:	b16d      	cbz	r5, 8019260 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8019244:	429a      	cmp	r2, r3
 8019246:	d00a      	beq.n	801925e <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8019248:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801924c:	4431      	add	r1, r6
 801924e:	684e      	ldr	r6, [r1, #4]
 8019250:	b291      	uxth	r1, r2
 8019252:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019256:	604e      	str	r6, [r1, #4]
 8019258:	18a1      	adds	r1, r4, r2
 801925a:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801925e:	3201      	adds	r2, #1
 8019260:	3301      	adds	r3, #1
 8019262:	e7d4      	b.n	801920e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8019264:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8019268:	e7d4      	b.n	8019214 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801926a:	4b04      	ldr	r3, [pc, #16]	; (801927c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801926c:	6818      	ldr	r0, [r3, #0]
 801926e:	b110      	cbz	r0, 8019276 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8019270:	6803      	ldr	r3, [r0, #0]
 8019272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019274:	e7a1      	b.n	80191ba <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019276:	bd70      	pop	{r4, r5, r6, pc}
 8019278:	2000b3ec 	.word	0x2000b3ec
 801927c:	2000b3e8 	.word	0x2000b3e8

08019280 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019280:	b570      	push	{r4, r5, r6, lr}
 8019282:	4606      	mov	r6, r0
 8019284:	460c      	mov	r4, r1
 8019286:	b929      	cbnz	r1, 8019294 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8019288:	4b0c      	ldr	r3, [pc, #48]	; (80192bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801928a:	2165      	movs	r1, #101	; 0x65
 801928c:	4a0c      	ldr	r2, [pc, #48]	; (80192c0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801928e:	480d      	ldr	r0, [pc, #52]	; (80192c4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8019290:	f00c fa26 	bl	80256e0 <__assert_func>
 8019294:	2300      	movs	r3, #0
 8019296:	4d0c      	ldr	r5, [pc, #48]	; (80192c8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8019298:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801929c:	6828      	ldr	r0, [r5, #0]
 801929e:	b110      	cbz	r0, 80192a6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80192a0:	6803      	ldr	r3, [r0, #0]
 80192a2:	695b      	ldr	r3, [r3, #20]
 80192a4:	4798      	blx	r3
 80192a6:	602c      	str	r4, [r5, #0]
 80192a8:	4620      	mov	r0, r4
 80192aa:	6823      	ldr	r3, [r4, #0]
 80192ac:	68db      	ldr	r3, [r3, #12]
 80192ae:	4798      	blx	r3
 80192b0:	6833      	ldr	r3, [r6, #0]
 80192b2:	4630      	mov	r0, r6
 80192b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192ba:	4718      	bx	r3
 80192bc:	0802a1f8 	.word	0x0802a1f8
 80192c0:	0802a2c8 	.word	0x0802a2c8
 80192c4:	0802a202 	.word	0x0802a202
 80192c8:	2000b3e8 	.word	0x2000b3e8

080192cc <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80192cc:	b510      	push	{r4, lr}
 80192ce:	f9b1 4000 	ldrsh.w	r4, [r1]
 80192d2:	888a      	ldrh	r2, [r1, #4]
 80192d4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80192d8:	4422      	add	r2, r4
 80192da:	b212      	sxth	r2, r2
 80192dc:	4293      	cmp	r3, r2
 80192de:	da15      	bge.n	801930c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80192e0:	8882      	ldrh	r2, [r0, #4]
 80192e2:	4413      	add	r3, r2
 80192e4:	b21b      	sxth	r3, r3
 80192e6:	429c      	cmp	r4, r3
 80192e8:	da10      	bge.n	801930c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80192ea:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80192ee:	88c9      	ldrh	r1, [r1, #6]
 80192f0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80192f4:	4419      	add	r1, r3
 80192f6:	b209      	sxth	r1, r1
 80192f8:	428a      	cmp	r2, r1
 80192fa:	da07      	bge.n	801930c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80192fc:	88c0      	ldrh	r0, [r0, #6]
 80192fe:	4410      	add	r0, r2
 8019300:	b200      	sxth	r0, r0
 8019302:	4283      	cmp	r3, r0
 8019304:	bfac      	ite	ge
 8019306:	2000      	movge	r0, #0
 8019308:	2001      	movlt	r0, #1
 801930a:	bd10      	pop	{r4, pc}
 801930c:	2000      	movs	r0, #0
 801930e:	e7fc      	b.n	801930a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019310 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019310:	b570      	push	{r4, r5, r6, lr}
 8019312:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019316:	f9b0 5000 	ldrsh.w	r5, [r0]
 801931a:	42ac      	cmp	r4, r5
 801931c:	db18      	blt.n	8019350 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801931e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8019322:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019326:	429a      	cmp	r2, r3
 8019328:	db12      	blt.n	8019350 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801932a:	8886      	ldrh	r6, [r0, #4]
 801932c:	4435      	add	r5, r6
 801932e:	888e      	ldrh	r6, [r1, #4]
 8019330:	4434      	add	r4, r6
 8019332:	b22d      	sxth	r5, r5
 8019334:	b224      	sxth	r4, r4
 8019336:	42a5      	cmp	r5, r4
 8019338:	db0a      	blt.n	8019350 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801933a:	88c0      	ldrh	r0, [r0, #6]
 801933c:	4418      	add	r0, r3
 801933e:	88cb      	ldrh	r3, [r1, #6]
 8019340:	441a      	add	r2, r3
 8019342:	b200      	sxth	r0, r0
 8019344:	b212      	sxth	r2, r2
 8019346:	4290      	cmp	r0, r2
 8019348:	bfb4      	ite	lt
 801934a:	2000      	movlt	r0, #0
 801934c:	2001      	movge	r0, #1
 801934e:	bd70      	pop	{r4, r5, r6, pc}
 8019350:	2000      	movs	r0, #0
 8019352:	e7fc      	b.n	801934e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08019354 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019356:	4604      	mov	r4, r0
 8019358:	4608      	mov	r0, r1
 801935a:	460d      	mov	r5, r1
 801935c:	f7fc fb95 	bl	8015a8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019360:	b978      	cbnz	r0, 8019382 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8019362:	4620      	mov	r0, r4
 8019364:	f7fc fb91 	bl	8015a8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019368:	f9b5 6000 	ldrsh.w	r6, [r5]
 801936c:	b150      	cbz	r0, 8019384 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801936e:	8026      	strh	r6, [r4, #0]
 8019370:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019374:	8063      	strh	r3, [r4, #2]
 8019376:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801937a:	80a3      	strh	r3, [r4, #4]
 801937c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019380:	80e3      	strh	r3, [r4, #6]
 8019382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019384:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019388:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801938c:	42b1      	cmp	r1, r6
 801938e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019392:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8019396:	460f      	mov	r7, r1
 8019398:	88ed      	ldrh	r5, [r5, #6]
 801939a:	bfa8      	it	ge
 801939c:	4637      	movge	r7, r6
 801939e:	4293      	cmp	r3, r2
 80193a0:	4618      	mov	r0, r3
 80193a2:	4466      	add	r6, ip
 80193a4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80193a8:	bfa8      	it	ge
 80193aa:	4610      	movge	r0, r2
 80193ac:	442a      	add	r2, r5
 80193ae:	88e5      	ldrh	r5, [r4, #6]
 80193b0:	4461      	add	r1, ip
 80193b2:	b236      	sxth	r6, r6
 80193b4:	8027      	strh	r7, [r4, #0]
 80193b6:	442b      	add	r3, r5
 80193b8:	b209      	sxth	r1, r1
 80193ba:	b212      	sxth	r2, r2
 80193bc:	8060      	strh	r0, [r4, #2]
 80193be:	b21b      	sxth	r3, r3
 80193c0:	428e      	cmp	r6, r1
 80193c2:	bfac      	ite	ge
 80193c4:	ebc7 0106 	rsbge	r1, r7, r6
 80193c8:	ebc7 0101 	rsblt	r1, r7, r1
 80193cc:	429a      	cmp	r2, r3
 80193ce:	bfac      	ite	ge
 80193d0:	ebc0 0202 	rsbge	r2, r0, r2
 80193d4:	ebc0 0203 	rsblt	r2, r0, r3
 80193d8:	80a1      	strh	r1, [r4, #4]
 80193da:	80e2      	strh	r2, [r4, #6]
 80193dc:	e7d1      	b.n	8019382 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080193e0 <_ZN8touchgfx11Application11getInstanceEv>:
 80193e0:	4b01      	ldr	r3, [pc, #4]	; (80193e8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80193e2:	6818      	ldr	r0, [r3, #0]
 80193e4:	4770      	bx	lr
 80193e6:	bf00      	nop
 80193e8:	2000b3f8 	.word	0x2000b3f8

080193ec <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 80193ec:	b570      	push	{r4, r5, r6, lr}
 80193ee:	2300      	movs	r3, #0
 80193f0:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 80193f4:	1d04      	adds	r4, r0, #4
 80193f6:	b29a      	uxth	r2, r3
 80193f8:	4296      	cmp	r6, r2
 80193fa:	d90a      	bls.n	8019412 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 80193fc:	f854 2b04 	ldr.w	r2, [r4], #4
 8019400:	428a      	cmp	r2, r1
 8019402:	d107      	bne.n	8019414 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8019404:	18c5      	adds	r5, r0, r3
 8019406:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801940a:	b11a      	cbz	r2, 8019414 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801940c:	3a01      	subs	r2, #1
 801940e:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8019412:	bd70      	pop	{r4, r5, r6, pc}
 8019414:	3301      	adds	r3, #1
 8019416:	e7ee      	b.n	80193f6 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08019418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8019418:	2300      	movs	r3, #0
 801941a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801941e:	30a8      	adds	r0, #168	; 0xa8
 8019420:	f820 3c24 	strh.w	r3, [r0, #-36]
 8019424:	f802 3b01 	strb.w	r3, [r2], #1
 8019428:	4282      	cmp	r2, r0
 801942a:	d1fb      	bne.n	8019424 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801942c:	4770      	bx	lr

0801942e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801942e:	4603      	mov	r3, r0
 8019430:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8019434:	2200      	movs	r2, #0
 8019436:	801a      	strh	r2, [r3, #0]
 8019438:	3308      	adds	r3, #8
 801943a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801943e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8019442:	f823 2c02 	strh.w	r2, [r3, #-2]
 8019446:	428b      	cmp	r3, r1
 8019448:	d1f5      	bne.n	8019436 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801944a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801944e:	4770      	bx	lr

08019450 <_ZN8touchgfx11ApplicationC1Ev>:
 8019450:	b570      	push	{r4, r5, r6, lr}
 8019452:	4b1a      	ldr	r3, [pc, #104]	; (80194bc <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8019454:	2500      	movs	r5, #0
 8019456:	4604      	mov	r4, r0
 8019458:	30a8      	adds	r0, #168	; 0xa8
 801945a:	f840 3ca8 	str.w	r3, [r0, #-168]
 801945e:	f820 5c24 	strh.w	r5, [r0, #-36]
 8019462:	f7ff ffe4 	bl	801942e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019466:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801946a:	f7ff ffe0 	bl	801942e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801946e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8019472:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8019476:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801947a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801947e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8019482:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8019486:	490e      	ldr	r1, [pc, #56]	; (80194c0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8019488:	480e      	ldr	r0, [pc, #56]	; (80194c4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801948a:	f00a fc05 	bl	8023c98 <CRC_Lock>
 801948e:	4e0e      	ldr	r6, [pc, #56]	; (80194c8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8019490:	4b0e      	ldr	r3, [pc, #56]	; (80194cc <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8019492:	b158      	cbz	r0, 80194ac <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8019494:	801d      	strh	r5, [r3, #0]
 8019496:	2300      	movs	r3, #0
 8019498:	4a0d      	ldr	r2, [pc, #52]	; (80194d0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801949a:	4620      	mov	r0, r4
 801949c:	6013      	str	r3, [r2, #0]
 801949e:	4a0d      	ldr	r2, [pc, #52]	; (80194d4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80194a0:	6033      	str	r3, [r6, #0]
 80194a2:	6013      	str	r3, [r2, #0]
 80194a4:	f7ff ffb8 	bl	8019418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80194a8:	4620      	mov	r0, r4
 80194aa:	bd70      	pop	{r4, r5, r6, pc}
 80194ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80194b0:	2002      	movs	r0, #2
 80194b2:	801a      	strh	r2, [r3, #0]
 80194b4:	6030      	str	r0, [r6, #0]
 80194b6:	f000 ff83 	bl	801a3c0 <_ZN8touchgfx6Screen4drawEv>
 80194ba:	e7ec      	b.n	8019496 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 80194bc:	0802a28c 	.word	0x0802a28c
 80194c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80194c4:	f407a5c2 	.word	0xf407a5c2
 80194c8:	2000b3e8 	.word	0x2000b3e8
 80194cc:	20000040 	.word	0x20000040
 80194d0:	2000b3f8 	.word	0x2000b3f8
 80194d4:	2000b3ec 	.word	0x2000b3ec

080194d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80194d8:	2300      	movs	r3, #0
 80194da:	8003      	strh	r3, [r0, #0]
 80194dc:	8043      	strh	r3, [r0, #2]
 80194de:	8083      	strh	r3, [r0, #4]
 80194e0:	80c3      	strh	r3, [r0, #6]
 80194e2:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 80194e6:	4293      	cmp	r3, r2
 80194e8:	b530      	push	{r4, r5, lr}
 80194ea:	d912      	bls.n	8019512 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80194ec:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80194f0:	3b01      	subs	r3, #1
 80194f2:	6825      	ldr	r5, [r4, #0]
 80194f4:	b29b      	uxth	r3, r3
 80194f6:	6005      	str	r5, [r0, #0]
 80194f8:	4293      	cmp	r3, r2
 80194fa:	6865      	ldr	r5, [r4, #4]
 80194fc:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8019500:	6045      	str	r5, [r0, #4]
 8019502:	d906      	bls.n	8019512 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8019504:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8019508:	681d      	ldr	r5, [r3, #0]
 801950a:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801950e:	685d      	ldr	r5, [r3, #4]
 8019510:	6065      	str	r5, [r4, #4]
 8019512:	bd30      	pop	{r4, r5, pc}

08019514 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8019514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019516:	466b      	mov	r3, sp
 8019518:	4604      	mov	r4, r0
 801951a:	e883 0006 	stmia.w	r3, {r1, r2}
 801951e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8019522:	2a07      	cmp	r2, #7
 8019524:	d906      	bls.n	8019534 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8019526:	4b09      	ldr	r3, [pc, #36]	; (801954c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8019528:	f240 118f 	movw	r1, #399	; 0x18f
 801952c:	4a08      	ldr	r2, [pc, #32]	; (8019550 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801952e:	4809      	ldr	r0, [pc, #36]	; (8019554 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8019530:	f00c f8d6 	bl	80256e0 <__assert_func>
 8019534:	1c51      	adds	r1, r2, #1
 8019536:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801953a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801953e:	cb03      	ldmia	r3!, {r0, r1}
 8019540:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8019544:	6069      	str	r1, [r5, #4]
 8019546:	b003      	add	sp, #12
 8019548:	bd30      	pop	{r4, r5, pc}
 801954a:	bf00      	nop
 801954c:	0802a22c 	.word	0x0802a22c
 8019550:	0802a30c 	.word	0x0802a30c
 8019554:	0802a25b 	.word	0x0802a25b

08019558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801955c:	b089      	sub	sp, #36	; 0x24
 801955e:	4606      	mov	r6, r0
 8019560:	466c      	mov	r4, sp
 8019562:	4620      	mov	r0, r4
 8019564:	e884 0006 	stmia.w	r4, {r1, r2}
 8019568:	f7fc fa8f 	bl	8015a8a <_ZNK8touchgfx4Rect7isEmptyEv>
 801956c:	bbb0      	cbnz	r0, 80195dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801956e:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8019572:	b1fd      	cbz	r5, 80195b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8019574:	3d01      	subs	r5, #1
 8019576:	af04      	add	r7, sp, #16
 8019578:	f04f 090a 	mov.w	r9, #10
 801957c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8019580:	ab02      	add	r3, sp, #8
 8019582:	fa1f f885 	uxth.w	r8, r5
 8019586:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801958a:	6851      	ldr	r1, [r2, #4]
 801958c:	c303      	stmia	r3!, {r0, r1}
 801958e:	4621      	mov	r1, r4
 8019590:	a802      	add	r0, sp, #8
 8019592:	f7ff febd 	bl	8019310 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019596:	bb08      	cbnz	r0, 80195dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8019598:	a902      	add	r1, sp, #8
 801959a:	4620      	mov	r0, r4
 801959c:	f7ff feb8 	bl	8019310 <_ZNK8touchgfx4Rect8includesERKS0_>
 80195a0:	b1f8      	cbz	r0, 80195e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 80195a2:	4642      	mov	r2, r8
 80195a4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80195a8:	a806      	add	r0, sp, #24
 80195aa:	f7ff ff95 	bl	80194d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80195ae:	f115 35ff 	adds.w	r5, r5, #4294967295
 80195b2:	d2e3      	bcs.n	801957c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 80195b4:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80195b8:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 80195bc:	2b08      	cmp	r3, #8
 80195be:	d108      	bne.n	80195d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80195c0:	4629      	mov	r1, r5
 80195c2:	a806      	add	r0, sp, #24
 80195c4:	2207      	movs	r2, #7
 80195c6:	f7ff ff87 	bl	80194d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80195ca:	a906      	add	r1, sp, #24
 80195cc:	4620      	mov	r0, r4
 80195ce:	f7ff fec1 	bl	8019354 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80195d2:	4628      	mov	r0, r5
 80195d4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80195d8:	f7ff ff9c 	bl	8019514 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80195dc:	b009      	add	sp, #36	; 0x24
 80195de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195e2:	4621      	mov	r1, r4
 80195e4:	a802      	add	r0, sp, #8
 80195e6:	f7ff fe71 	bl	80192cc <_ZNK8touchgfx4Rect9intersectERKS0_>
 80195ea:	b150      	cbz	r0, 8019602 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 80195ec:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80195f0:	a806      	add	r0, sp, #24
 80195f2:	4642      	mov	r2, r8
 80195f4:	f7ff ff70 	bl	80194d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80195f8:	a902      	add	r1, sp, #8
 80195fa:	4620      	mov	r0, r4
 80195fc:	f7ff feaa 	bl	8019354 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019600:	e7d5      	b.n	80195ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019602:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019606:	e887 0003 	stmia.w	r7, {r0, r1}
 801960a:	a902      	add	r1, sp, #8
 801960c:	4638      	mov	r0, r7
 801960e:	f7ff fea1 	bl	8019354 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019612:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019616:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801961a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801961e:	fb13 f302 	smulbb	r3, r3, r2
 8019622:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019626:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801962a:	fb11 f102 	smulbb	r1, r1, r2
 801962e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8019632:	fb09 f303 	mul.w	r3, r9, r3
 8019636:	fb12 1100 	smlabb	r1, r2, r0, r1
 801963a:	220b      	movs	r2, #11
 801963c:	434a      	muls	r2, r1
 801963e:	4293      	cmp	r3, r2
 8019640:	dab5      	bge.n	80195ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019642:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019646:	a806      	add	r0, sp, #24
 8019648:	4642      	mov	r2, r8
 801964a:	f7ff ff45 	bl	80194d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801964e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019652:	e884 0003 	stmia.w	r4, {r0, r1}
 8019656:	e7aa      	b.n	80195ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08019658 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019658:	4b1d      	ldr	r3, [pc, #116]	; (80196d0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801965a:	b530      	push	{r4, r5, lr}
 801965c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019660:	b085      	sub	sp, #20
 8019662:	4b1c      	ldr	r3, [pc, #112]	; (80196d4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019664:	460c      	mov	r4, r1
 8019666:	2100      	movs	r1, #0
 8019668:	4605      	mov	r5, r0
 801966a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801966e:	6820      	ldr	r0, [r4, #0]
 8019670:	9100      	str	r1, [sp, #0]
 8019672:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019676:	ab02      	add	r3, sp, #8
 8019678:	6861      	ldr	r1, [r4, #4]
 801967a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801967e:	c303      	stmia	r3!, {r0, r1}
 8019680:	4669      	mov	r1, sp
 8019682:	a802      	add	r0, sp, #8
 8019684:	f7fc f9be 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 8019688:	ab02      	add	r3, sp, #8
 801968a:	cb03      	ldmia	r3!, {r0, r1}
 801968c:	4b12      	ldr	r3, [pc, #72]	; (80196d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801968e:	6020      	str	r0, [r4, #0]
 8019690:	6818      	ldr	r0, [r3, #0]
 8019692:	6061      	str	r1, [r4, #4]
 8019694:	b138      	cbz	r0, 80196a6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019696:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801969a:	b133      	cbz	r3, 80196aa <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801969c:	6821      	ldr	r1, [r4, #0]
 801969e:	4628      	mov	r0, r5
 80196a0:	6862      	ldr	r2, [r4, #4]
 80196a2:	f7ff ff59 	bl	8019558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80196a6:	b005      	add	sp, #20
 80196a8:	bd30      	pop	{r4, r5, pc}
 80196aa:	6803      	ldr	r3, [r0, #0]
 80196ac:	4621      	mov	r1, r4
 80196ae:	689b      	ldr	r3, [r3, #8]
 80196b0:	4798      	blx	r3
 80196b2:	4b0a      	ldr	r3, [pc, #40]	; (80196dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80196b4:	6818      	ldr	r0, [r3, #0]
 80196b6:	b118      	cbz	r0, 80196c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80196b8:	6803      	ldr	r3, [r0, #0]
 80196ba:	4621      	mov	r1, r4
 80196bc:	689b      	ldr	r3, [r3, #8]
 80196be:	4798      	blx	r3
 80196c0:	4b07      	ldr	r3, [pc, #28]	; (80196e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80196c2:	4621      	mov	r1, r4
 80196c4:	6818      	ldr	r0, [r3, #0]
 80196c6:	6803      	ldr	r3, [r0, #0]
 80196c8:	695b      	ldr	r3, [r3, #20]
 80196ca:	4798      	blx	r3
 80196cc:	e7eb      	b.n	80196a6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80196ce:	bf00      	nop
 80196d0:	2000b360 	.word	0x2000b360
 80196d4:	2000b362 	.word	0x2000b362
 80196d8:	2000b3e8 	.word	0x2000b3e8
 80196dc:	2000b3e4 	.word	0x2000b3e4
 80196e0:	2000b36c 	.word	0x2000b36c

080196e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80196e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196e8:	4604      	mov	r4, r0
 80196ea:	b09b      	sub	sp, #108	; 0x6c
 80196ec:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 80196f0:	b129      	cbz	r1, 80196fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80196f2:	2300      	movs	r3, #0
 80196f4:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80196f8:	b01b      	add	sp, #108	; 0x6c
 80196fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196fe:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8019702:	4630      	mov	r0, r6
 8019704:	f7fc f9c1 	bl	8015a8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019708:	4605      	mov	r5, r0
 801970a:	b940      	cbnz	r0, 801971e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801970c:	4620      	mov	r0, r4
 801970e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019712:	f7ff ff21 	bl	8019558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019716:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801971a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801971e:	4baf      	ldr	r3, [pc, #700]	; (80199dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>)
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	b33b      	cbz	r3, 8019774 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019724:	4dae      	ldr	r5, [pc, #696]	; (80199e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fc>)
 8019726:	4628      	mov	r0, r5
 8019728:	f7fc f9af 	bl	8015a8a <_ZNK8touchgfx4Rect7isEmptyEv>
 801972c:	4606      	mov	r6, r0
 801972e:	bb08      	cbnz	r0, 8019774 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019730:	4628      	mov	r0, r5
 8019732:	f7ff fc71 	bl	8019018 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019736:	6829      	ldr	r1, [r5, #0]
 8019738:	686a      	ldr	r2, [r5, #4]
 801973a:	4620      	mov	r0, r4
 801973c:	f7ff ff0c 	bl	8019558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019740:	802e      	strh	r6, [r5, #0]
 8019742:	806e      	strh	r6, [r5, #2]
 8019744:	80ae      	strh	r6, [r5, #4]
 8019746:	80ee      	strh	r6, [r5, #6]
 8019748:	4fa6      	ldr	r7, [pc, #664]	; (80199e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x300>)
 801974a:	a809      	add	r0, sp, #36	; 0x24
 801974c:	f7ff fe6f 	bl	801942e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019750:	883d      	ldrh	r5, [r7, #0]
 8019752:	462e      	mov	r6, r5
 8019754:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019758:	42b3      	cmp	r3, r6
 801975a:	d910      	bls.n	801977e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801975c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019760:	3601      	adds	r6, #1
 8019762:	a809      	add	r0, sp, #36	; 0x24
 8019764:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019768:	b2b6      	uxth	r6, r6
 801976a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801976e:	f7ff fed1 	bl	8019514 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019772:	e7ef      	b.n	8019754 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019774:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019778:	2b00      	cmp	r3, #0
 801977a:	d1e5      	bne.n	8019748 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801977c:	e7bc      	b.n	80196f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801977e:	462e      	mov	r6, r5
 8019780:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8019784:	42b3      	cmp	r3, r6
 8019786:	d90b      	bls.n	80197a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8019788:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801978c:	3601      	adds	r6, #1
 801978e:	4620      	mov	r0, r4
 8019790:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019794:	b2b6      	uxth	r6, r6
 8019796:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801979a:	f7ff fedd 	bl	8019558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801979e:	e7ef      	b.n	8019780 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 80197a0:	4e91      	ldr	r6, [pc, #580]	; (80199e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>)
 80197a2:	6833      	ldr	r3, [r6, #0]
 80197a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80197a8:	2b01      	cmp	r3, #1
 80197aa:	f040 8092 	bne.w	80198d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ee>
 80197ae:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80197b2:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80197b6:	f04f 0900 	mov.w	r9, #0
 80197ba:	33aa      	adds	r3, #170	; 0xaa
 80197bc:	42a8      	cmp	r0, r5
 80197be:	f103 0308 	add.w	r3, r3, #8
 80197c2:	dd0a      	ble.n	80197da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf6>
 80197c4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80197c8:	3501      	adds	r5, #1
 80197ca:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80197ce:	440a      	add	r2, r1
 80197d0:	b212      	sxth	r2, r2
 80197d2:	4591      	cmp	r9, r2
 80197d4:	bfb8      	it	lt
 80197d6:	4691      	movlt	r9, r2
 80197d8:	e7f0      	b.n	80197bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd8>
 80197da:	4b84      	ldr	r3, [pc, #528]	; (80199ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x308>)
 80197dc:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80199f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x310>
 80197e0:	881d      	ldrh	r5, [r3, #0]
 80197e2:	2300      	movs	r3, #0
 80197e4:	2d0f      	cmp	r5, #15
 80197e6:	bf8c      	ite	hi
 80197e8:	08ed      	lsrhi	r5, r5, #3
 80197ea:	2501      	movls	r5, #1
 80197ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80197f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80197f4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80197f8:	6830      	ldr	r0, [r6, #0]
 80197fa:	440b      	add	r3, r1
 80197fc:	6802      	ldr	r2, [r0, #0]
 80197fe:	b21b      	sxth	r3, r3
 8019800:	4599      	cmp	r9, r3
 8019802:	dd49      	ble.n	8019898 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b4>
 8019804:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8019808:	4798      	blx	r3
 801980a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801980e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019812:	4413      	add	r3, r2
 8019814:	b21b      	sxth	r3, r3
 8019816:	195a      	adds	r2, r3, r5
 8019818:	4290      	cmp	r0, r2
 801981a:	da07      	bge.n	801982c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 801981c:	4581      	cmp	r9, r0
 801981e:	dd05      	ble.n	801982c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 8019820:	4298      	cmp	r0, r3
 8019822:	da33      	bge.n	801988c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 8019824:	2b00      	cmp	r3, #0
 8019826:	dd31      	ble.n	801988c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 8019828:	4648      	mov	r0, r9
 801982a:	e004      	b.n	8019836 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x152>
 801982c:	4298      	cmp	r0, r3
 801982e:	dbfb      	blt.n	8019828 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x144>
 8019830:	4548      	cmp	r0, r9
 8019832:	bfa8      	it	ge
 8019834:	4648      	movge	r0, r9
 8019836:	f9b8 2000 	ldrsh.w	r2, [r8]
 801983a:	2100      	movs	r1, #0
 801983c:	1ac0      	subs	r0, r0, r3
 801983e:	f8b7 a000 	ldrh.w	sl, [r7]
 8019842:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019846:	f8ad 3016 	strh.w	r3, [sp, #22]
 801984a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801984e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019852:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019856:	4553      	cmp	r3, sl
 8019858:	d9ca      	bls.n	80197f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801985a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801985e:	ab07      	add	r3, sp, #28
 8019860:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019864:	6851      	ldr	r1, [r2, #4]
 8019866:	c303      	stmia	r3!, {r0, r1}
 8019868:	a807      	add	r0, sp, #28
 801986a:	a905      	add	r1, sp, #20
 801986c:	f7fc f8ca 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 8019870:	a807      	add	r0, sp, #28
 8019872:	f7fc f90a 	bl	8015a8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019876:	b920      	cbnz	r0, 8019882 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x19e>
 8019878:	6823      	ldr	r3, [r4, #0]
 801987a:	a907      	add	r1, sp, #28
 801987c:	4620      	mov	r0, r4
 801987e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019880:	4798      	blx	r3
 8019882:	f10a 0a01 	add.w	sl, sl, #1
 8019886:	fa1f fa8a 	uxth.w	sl, sl
 801988a:	e7e2      	b.n	8019852 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16e>
 801988c:	6830      	ldr	r0, [r6, #0]
 801988e:	2101      	movs	r1, #1
 8019890:	6803      	ldr	r3, [r0, #0]
 8019892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019894:	4798      	blx	r3
 8019896:	e7ab      	b.n	80197f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019898:	69d3      	ldr	r3, [r2, #28]
 801989a:	4798      	blx	r3
 801989c:	4b54      	ldr	r3, [pc, #336]	; (80199f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>)
 801989e:	781b      	ldrb	r3, [r3, #0]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	f43f af29 	beq.w	80196f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80198a6:	2300      	movs	r3, #0
 80198a8:	883d      	ldrh	r5, [r7, #0]
 80198aa:	34ea      	adds	r4, #234	; 0xea
 80198ac:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80198b0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80198b4:	42ab      	cmp	r3, r5
 80198b6:	f67f af1f 	bls.w	80196f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80198ba:	ab1a      	add	r3, sp, #104	; 0x68
 80198bc:	4620      	mov	r0, r4
 80198be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80198c2:	3501      	adds	r5, #1
 80198c4:	3b44      	subs	r3, #68	; 0x44
 80198c6:	b2ad      	uxth	r5, r5
 80198c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80198cc:	f7ff fe22 	bl	8019514 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80198d0:	e7ee      	b.n	80198b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1cc>
 80198d2:	2b02      	cmp	r3, #2
 80198d4:	d16a      	bne.n	80199ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 80198d6:	f8df a120 	ldr.w	sl, [pc, #288]	; 80199f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x314>
 80198da:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80198de:	42ab      	cmp	r3, r5
 80198e0:	d9dc      	bls.n	801989c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 80198e2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80198e6:	ab03      	add	r3, sp, #12
 80198e8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80198ec:	6851      	ldr	r1, [r2, #4]
 80198ee:	c303      	stmia	r3!, {r0, r1}
 80198f0:	f89a 3000 	ldrb.w	r3, [sl]
 80198f4:	2b01      	cmp	r3, #1
 80198f6:	d102      	bne.n	80198fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21a>
 80198f8:	a803      	add	r0, sp, #12
 80198fa:	f7ff fbe7 	bl	80190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80198fe:	a803      	add	r0, sp, #12
 8019900:	f7fc f8c3 	bl	8015a8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019904:	2800      	cmp	r0, #0
 8019906:	d14a      	bne.n	801999e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ba>
 8019908:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801990c:	f10d 0914 	add.w	r9, sp, #20
 8019910:	f10d 081c 	add.w	r8, sp, #28
 8019914:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019918:	f8ad 3014 	strh.w	r3, [sp, #20]
 801991c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019920:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019924:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019928:	f8ad 3018 	strh.w	r3, [sp, #24]
 801992c:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8019930:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8019934:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019938:	44dc      	add	ip, fp
 801993a:	6830      	ldr	r0, [r6, #0]
 801993c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019940:	ebac 0c02 	sub.w	ip, ip, r2
 8019944:	f8d0 e000 	ldr.w	lr, [r0]
 8019948:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801994c:	fa1f fc8c 	uxth.w	ip, ip
 8019950:	f8cd c000 	str.w	ip, [sp]
 8019954:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8019958:	47d8      	blx	fp
 801995a:	f89a 3000 	ldrb.w	r3, [sl]
 801995e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019962:	2b01      	cmp	r3, #1
 8019964:	d11e      	bne.n	80199a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c0>
 8019966:	e899 0003 	ldmia.w	r9, {r0, r1}
 801996a:	e888 0003 	stmia.w	r8, {r0, r1}
 801996e:	4640      	mov	r0, r8
 8019970:	f7ff fb52 	bl	8019018 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019974:	6823      	ldr	r3, [r4, #0]
 8019976:	4641      	mov	r1, r8
 8019978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801997a:	4620      	mov	r0, r4
 801997c:	4798      	blx	r3
 801997e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019982:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019986:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801998a:	4413      	add	r3, r2
 801998c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019990:	440a      	add	r2, r1
 8019992:	b21b      	sxth	r3, r3
 8019994:	b212      	sxth	r2, r2
 8019996:	f8ad 3016 	strh.w	r3, [sp, #22]
 801999a:	4293      	cmp	r3, r2
 801999c:	dbc6      	blt.n	801992c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x248>
 801999e:	3501      	adds	r5, #1
 80199a0:	b2ad      	uxth	r5, r5
 80199a2:	e79a      	b.n	80198da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 80199a4:	6823      	ldr	r3, [r4, #0]
 80199a6:	4649      	mov	r1, r9
 80199a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199aa:	e7e6      	b.n	801997a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x296>
 80199ac:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80199b0:	42ab      	cmp	r3, r5
 80199b2:	f67f af73 	bls.w	801989c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 80199b6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80199ba:	ab07      	add	r3, sp, #28
 80199bc:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80199c0:	6851      	ldr	r1, [r2, #4]
 80199c2:	c303      	stmia	r3!, {r0, r1}
 80199c4:	a807      	add	r0, sp, #28
 80199c6:	f7fc f860 	bl	8015a8a <_ZNK8touchgfx4Rect7isEmptyEv>
 80199ca:	b920      	cbnz	r0, 80199d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f2>
 80199cc:	6823      	ldr	r3, [r4, #0]
 80199ce:	a907      	add	r1, sp, #28
 80199d0:	4620      	mov	r0, r4
 80199d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199d4:	4798      	blx	r3
 80199d6:	3501      	adds	r5, #1
 80199d8:	b2ad      	uxth	r5, r5
 80199da:	e7e7      	b.n	80199ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 80199dc:	2000b3e4 	.word	0x2000b3e4
 80199e0:	2000b3f0 	.word	0x2000b3f0
 80199e4:	20000040 	.word	0x20000040
 80199e8:	2000b36c 	.word	0x2000b36c
 80199ec:	2000b362 	.word	0x2000b362
 80199f0:	2000b36a 	.word	0x2000b36a
 80199f4:	2000b360 	.word	0x2000b360
 80199f8:	2000b364 	.word	0x2000b364

080199fc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80199fc:	4b03      	ldr	r3, [pc, #12]	; (8019a0c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80199fe:	2200      	movs	r2, #0
 8019a00:	801a      	strh	r2, [r3, #0]
 8019a02:	805a      	strh	r2, [r3, #2]
 8019a04:	809a      	strh	r2, [r3, #4]
 8019a06:	80da      	strh	r2, [r3, #6]
 8019a08:	4770      	bx	lr
 8019a0a:	bf00      	nop
 8019a0c:	2000b3f0 	.word	0x2000b3f0

08019a10 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a14:	b099      	sub	sp, #100	; 0x64
 8019a16:	4607      	mov	r7, r0
 8019a18:	4614      	mov	r4, r2
 8019a1a:	461d      	mov	r5, r3
 8019a1c:	a802      	add	r0, sp, #8
 8019a1e:	468a      	mov	sl, r1
 8019a20:	f000 fe4b 	bl	801a6ba <_ZN8touchgfx12TextProviderC1Ev>
 8019a24:	683b      	ldr	r3, [r7, #0]
 8019a26:	4638      	mov	r0, r7
 8019a28:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8019a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a2e:	4798      	blx	r3
 8019a30:	462a      	mov	r2, r5
 8019a32:	2500      	movs	r5, #0
 8019a34:	4621      	mov	r1, r4
 8019a36:	4603      	mov	r3, r0
 8019a38:	a802      	add	r0, sp, #8
 8019a3a:	462c      	mov	r4, r5
 8019a3c:	46a9      	mov	r9, r5
 8019a3e:	46a8      	mov	r8, r5
 8019a40:	f000 fe80 	bl	801a744 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019a44:	2300      	movs	r3, #0
 8019a46:	9301      	str	r3, [sp, #4]
 8019a48:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019a4c:	429c      	cmp	r4, r3
 8019a4e:	d002      	beq.n	8019a56 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8019a50:	455c      	cmp	r4, fp
 8019a52:	bf18      	it	ne
 8019a54:	4625      	movne	r5, r4
 8019a56:	ab01      	add	r3, sp, #4
 8019a58:	463a      	mov	r2, r7
 8019a5a:	4651      	mov	r1, sl
 8019a5c:	a802      	add	r0, sp, #8
 8019a5e:	f001 f96b 	bl	801ad38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a62:	4604      	mov	r4, r0
 8019a64:	b108      	cbz	r0, 8019a6a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8019a66:	280a      	cmp	r0, #10
 8019a68:	d10a      	bne.n	8019a80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8019a6a:	45c1      	cmp	r9, r8
 8019a6c:	bf38      	it	cc
 8019a6e:	46c1      	movcc	r9, r8
 8019a70:	f04f 0800 	mov.w	r8, #0
 8019a74:	2c00      	cmp	r4, #0
 8019a76:	d1e5      	bne.n	8019a44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8019a78:	4648      	mov	r0, r9
 8019a7a:	b019      	add	sp, #100	; 0x64
 8019a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a80:	9a01      	ldr	r2, [sp, #4]
 8019a82:	2a00      	cmp	r2, #0
 8019a84:	d0de      	beq.n	8019a44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8019a86:	7b56      	ldrb	r6, [r2, #13]
 8019a88:	4629      	mov	r1, r5
 8019a8a:	683b      	ldr	r3, [r7, #0]
 8019a8c:	0076      	lsls	r6, r6, #1
 8019a8e:	8894      	ldrh	r4, [r2, #4]
 8019a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a92:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8019a96:	7a96      	ldrb	r6, [r2, #10]
 8019a98:	4306      	orrs	r6, r0
 8019a9a:	4638      	mov	r0, r7
 8019a9c:	4798      	blx	r3
 8019a9e:	4430      	add	r0, r6
 8019aa0:	4480      	add	r8, r0
 8019aa2:	fa1f f888 	uxth.w	r8, r8
 8019aa6:	e7e5      	b.n	8019a74 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08019aa8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019aa8:	b508      	push	{r3, lr}
 8019aaa:	6803      	ldr	r3, [r0, #0]
 8019aac:	68db      	ldr	r3, [r3, #12]
 8019aae:	4798      	blx	r3
 8019ab0:	b128      	cbz	r0, 8019abe <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019ab2:	7b43      	ldrb	r3, [r0, #13]
 8019ab4:	7a80      	ldrb	r0, [r0, #10]
 8019ab6:	005b      	lsls	r3, r3, #1
 8019ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019abc:	4318      	orrs	r0, r3
 8019abe:	bd08      	pop	{r3, pc}

08019ac0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019ac0:	b40e      	push	{r1, r2, r3}
 8019ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ac4:	b098      	sub	sp, #96	; 0x60
 8019ac6:	4605      	mov	r5, r0
 8019ac8:	ab1d      	add	r3, sp, #116	; 0x74
 8019aca:	a802      	add	r0, sp, #8
 8019acc:	ae18      	add	r6, sp, #96	; 0x60
 8019ace:	f853 4b04 	ldr.w	r4, [r3], #4
 8019ad2:	9300      	str	r3, [sp, #0]
 8019ad4:	f000 fdf1 	bl	801a6ba <_ZN8touchgfx12TextProviderC1Ev>
 8019ad8:	682b      	ldr	r3, [r5, #0]
 8019ada:	4628      	mov	r0, r5
 8019adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ade:	4798      	blx	r3
 8019ae0:	4621      	mov	r1, r4
 8019ae2:	2400      	movs	r4, #0
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	9a00      	ldr	r2, [sp, #0]
 8019ae8:	a802      	add	r0, sp, #8
 8019aea:	f000 fe2b 	bl	801a744 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019aee:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8019af2:	462a      	mov	r2, r5
 8019af4:	4633      	mov	r3, r6
 8019af6:	4621      	mov	r1, r4
 8019af8:	a802      	add	r0, sp, #8
 8019afa:	f001 f91d 	bl	801ad38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019afe:	b300      	cbz	r0, 8019b42 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019b00:	280a      	cmp	r0, #10
 8019b02:	d01a      	beq.n	8019b3a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8019b04:	9f01      	ldr	r7, [sp, #4]
 8019b06:	b1c7      	cbz	r7, 8019b3a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8019b08:	7b78      	ldrb	r0, [r7, #13]
 8019b0a:	7a3b      	ldrb	r3, [r7, #8]
 8019b0c:	00c1      	lsls	r1, r0, #3
 8019b0e:	88aa      	ldrh	r2, [r5, #4]
 8019b10:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019b14:	4319      	orrs	r1, r3
 8019b16:	0643      	lsls	r3, r0, #25
 8019b18:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019b1c:	bf48      	it	mi
 8019b1e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8019b22:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019b26:	bf48      	it	mi
 8019b28:	b219      	sxthmi	r1, r3
 8019b2a:	79fb      	ldrb	r3, [r7, #7]
 8019b2c:	4303      	orrs	r3, r0
 8019b2e:	4413      	add	r3, r2
 8019b30:	1a5b      	subs	r3, r3, r1
 8019b32:	b29b      	uxth	r3, r3
 8019b34:	42a3      	cmp	r3, r4
 8019b36:	bfc8      	it	gt
 8019b38:	b21c      	sxthgt	r4, r3
 8019b3a:	4633      	mov	r3, r6
 8019b3c:	462a      	mov	r2, r5
 8019b3e:	2100      	movs	r1, #0
 8019b40:	e7da      	b.n	8019af8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 8019b42:	b2a0      	uxth	r0, r4
 8019b44:	b018      	add	sp, #96	; 0x60
 8019b46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019b4a:	b003      	add	sp, #12
 8019b4c:	4770      	bx	lr

08019b4e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019b4e:	b40e      	push	{r1, r2, r3}
 8019b50:	b530      	push	{r4, r5, lr}
 8019b52:	b098      	sub	sp, #96	; 0x60
 8019b54:	4604      	mov	r4, r0
 8019b56:	ab1b      	add	r3, sp, #108	; 0x6c
 8019b58:	a802      	add	r0, sp, #8
 8019b5a:	f853 5b04 	ldr.w	r5, [r3], #4
 8019b5e:	9301      	str	r3, [sp, #4]
 8019b60:	f000 fdab 	bl	801a6ba <_ZN8touchgfx12TextProviderC1Ev>
 8019b64:	6823      	ldr	r3, [r4, #0]
 8019b66:	4620      	mov	r0, r4
 8019b68:	2401      	movs	r4, #1
 8019b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b6c:	4798      	blx	r3
 8019b6e:	9a01      	ldr	r2, [sp, #4]
 8019b70:	4603      	mov	r3, r0
 8019b72:	4629      	mov	r1, r5
 8019b74:	a802      	add	r0, sp, #8
 8019b76:	f000 fde5 	bl	801a744 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019b7a:	a802      	add	r0, sp, #8
 8019b7c:	f001 f9ce 	bl	801af1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019b80:	b2a3      	uxth	r3, r4
 8019b82:	b138      	cbz	r0, 8019b94 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8019b84:	280a      	cmp	r0, #10
 8019b86:	a802      	add	r0, sp, #8
 8019b88:	bf04      	itt	eq
 8019b8a:	3301      	addeq	r3, #1
 8019b8c:	b21c      	sxtheq	r4, r3
 8019b8e:	f001 f9c5 	bl	801af1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019b92:	e7f5      	b.n	8019b80 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8019b94:	4618      	mov	r0, r3
 8019b96:	b018      	add	sp, #96	; 0x60
 8019b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019b9c:	b003      	add	sp, #12
 8019b9e:	4770      	bx	lr

08019ba0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019ba0:	b40e      	push	{r1, r2, r3}
 8019ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ba4:	b098      	sub	sp, #96	; 0x60
 8019ba6:	4604      	mov	r4, r0
 8019ba8:	26ff      	movs	r6, #255	; 0xff
 8019baa:	ab1d      	add	r3, sp, #116	; 0x74
 8019bac:	a802      	add	r0, sp, #8
 8019bae:	f853 5b04 	ldr.w	r5, [r3], #4
 8019bb2:	9300      	str	r3, [sp, #0]
 8019bb4:	f000 fd81 	bl	801a6ba <_ZN8touchgfx12TextProviderC1Ev>
 8019bb8:	6823      	ldr	r3, [r4, #0]
 8019bba:	4620      	mov	r0, r4
 8019bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019bbe:	4798      	blx	r3
 8019bc0:	4629      	mov	r1, r5
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	9a00      	ldr	r2, [sp, #0]
 8019bc6:	a802      	add	r0, sp, #8
 8019bc8:	ad18      	add	r5, sp, #96	; 0x60
 8019bca:	f000 fdbb 	bl	801a744 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019bce:	2100      	movs	r1, #0
 8019bd0:	4622      	mov	r2, r4
 8019bd2:	a802      	add	r0, sp, #8
 8019bd4:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8019bd8:	462b      	mov	r3, r5
 8019bda:	f001 f8ad 	bl	801ad38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019bde:	b1d8      	cbz	r0, 8019c18 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019be0:	280a      	cmp	r0, #10
 8019be2:	d012      	beq.n	8019c0a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8019be4:	9801      	ldr	r0, [sp, #4]
 8019be6:	b180      	cbz	r0, 8019c0a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8019be8:	7b47      	ldrb	r7, [r0, #13]
 8019bea:	7922      	ldrb	r2, [r4, #4]
 8019bec:	00fb      	lsls	r3, r7, #3
 8019bee:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019bf2:	7a03      	ldrb	r3, [r0, #8]
 8019bf4:	430b      	orrs	r3, r1
 8019bf6:	0679      	lsls	r1, r7, #25
 8019bf8:	bf44      	itt	mi
 8019bfa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019bfe:	b21b      	sxthmi	r3, r3
 8019c00:	1ad3      	subs	r3, r2, r3
 8019c02:	b2db      	uxtb	r3, r3
 8019c04:	429e      	cmp	r6, r3
 8019c06:	bf28      	it	cs
 8019c08:	461e      	movcs	r6, r3
 8019c0a:	462b      	mov	r3, r5
 8019c0c:	4622      	mov	r2, r4
 8019c0e:	2100      	movs	r1, #0
 8019c10:	a802      	add	r0, sp, #8
 8019c12:	f001 f891 	bl	801ad38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019c16:	e7e2      	b.n	8019bde <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8019c18:	4630      	mov	r0, r6
 8019c1a:	b018      	add	sp, #96	; 0x60
 8019c1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019c20:	b003      	add	sp, #12
 8019c22:	4770      	bx	lr

08019c24 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019c24:	b513      	push	{r0, r1, r4, lr}
 8019c26:	1d01      	adds	r1, r0, #4
 8019c28:	4603      	mov	r3, r0
 8019c2a:	466a      	mov	r2, sp
 8019c2c:	c903      	ldmia	r1, {r0, r1}
 8019c2e:	e882 0003 	stmia.w	r2, {r0, r1}
 8019c32:	2100      	movs	r1, #0
 8019c34:	4618      	mov	r0, r3
 8019c36:	9100      	str	r1, [sp, #0]
 8019c38:	6819      	ldr	r1, [r3, #0]
 8019c3a:	690c      	ldr	r4, [r1, #16]
 8019c3c:	4611      	mov	r1, r2
 8019c3e:	47a0      	blx	r4
 8019c40:	b002      	add	sp, #8
 8019c42:	bd10      	pop	{r4, pc}

08019c44 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019c44:	b538      	push	{r3, r4, r5, lr}
 8019c46:	680b      	ldr	r3, [r1, #0]
 8019c48:	460c      	mov	r4, r1
 8019c4a:	4605      	mov	r5, r0
 8019c4c:	68db      	ldr	r3, [r3, #12]
 8019c4e:	4798      	blx	r3
 8019c50:	6823      	ldr	r3, [r4, #0]
 8019c52:	4620      	mov	r0, r4
 8019c54:	4629      	mov	r1, r5
 8019c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c58:	4798      	blx	r3
 8019c5a:	4628      	mov	r0, r5
 8019c5c:	bd38      	pop	{r3, r4, r5, pc}

08019c5e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019c5e:	b410      	push	{r4}
 8019c60:	880a      	ldrh	r2, [r1, #0]
 8019c62:	8884      	ldrh	r4, [r0, #4]
 8019c64:	4422      	add	r2, r4
 8019c66:	800a      	strh	r2, [r1, #0]
 8019c68:	884a      	ldrh	r2, [r1, #2]
 8019c6a:	88c4      	ldrh	r4, [r0, #6]
 8019c6c:	4422      	add	r2, r4
 8019c6e:	804a      	strh	r2, [r1, #2]
 8019c70:	6940      	ldr	r0, [r0, #20]
 8019c72:	b120      	cbz	r0, 8019c7e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019c74:	6803      	ldr	r3, [r0, #0]
 8019c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c7c:	4718      	bx	r3
 8019c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c82:	4770      	bx	lr

08019c84 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c86:	460b      	mov	r3, r1
 8019c88:	b085      	sub	sp, #20
 8019c8a:	4604      	mov	r4, r0
 8019c8c:	b901      	cbnz	r1, 8019c90 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019c8e:	b1fa      	cbz	r2, 8019cd0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8019c90:	1d27      	adds	r7, r4, #4
 8019c92:	466e      	mov	r6, sp
 8019c94:	ad02      	add	r5, sp, #8
 8019c96:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019c9a:	e886 0003 	stmia.w	r6, {r0, r1}
 8019c9e:	88e1      	ldrh	r1, [r4, #6]
 8019ca0:	4620      	mov	r0, r4
 8019ca2:	440a      	add	r2, r1
 8019ca4:	88a1      	ldrh	r1, [r4, #4]
 8019ca6:	4419      	add	r1, r3
 8019ca8:	6823      	ldr	r3, [r4, #0]
 8019caa:	b212      	sxth	r2, r2
 8019cac:	b209      	sxth	r1, r1
 8019cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019cb0:	4798      	blx	r3
 8019cb2:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019cb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8019cba:	6960      	ldr	r0, [r4, #20]
 8019cbc:	b150      	cbz	r0, 8019cd4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8019cbe:	6803      	ldr	r3, [r0, #0]
 8019cc0:	4631      	mov	r1, r6
 8019cc2:	691b      	ldr	r3, [r3, #16]
 8019cc4:	4798      	blx	r3
 8019cc6:	6960      	ldr	r0, [r4, #20]
 8019cc8:	6803      	ldr	r3, [r0, #0]
 8019cca:	691b      	ldr	r3, [r3, #16]
 8019ccc:	4629      	mov	r1, r5
 8019cce:	4798      	blx	r3
 8019cd0:	b005      	add	sp, #20
 8019cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cd4:	f7ff fb84 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 8019cd8:	6803      	ldr	r3, [r0, #0]
 8019cda:	4631      	mov	r1, r6
 8019cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019cde:	4798      	blx	r3
 8019ce0:	f7ff fb7e 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 8019ce4:	6803      	ldr	r3, [r0, #0]
 8019ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ce8:	e7f0      	b.n	8019ccc <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08019cea <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019cea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019cec:	8882      	ldrh	r2, [r0, #4]
 8019cee:	4605      	mov	r5, r0
 8019cf0:	880b      	ldrh	r3, [r1, #0]
 8019cf2:	460c      	mov	r4, r1
 8019cf4:	4413      	add	r3, r2
 8019cf6:	800b      	strh	r3, [r1, #0]
 8019cf8:	884b      	ldrh	r3, [r1, #2]
 8019cfa:	88c2      	ldrh	r2, [r0, #6]
 8019cfc:	4413      	add	r3, r2
 8019cfe:	4602      	mov	r2, r0
 8019d00:	804b      	strh	r3, [r1, #2]
 8019d02:	466b      	mov	r3, sp
 8019d04:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019d08:	6851      	ldr	r1, [r2, #4]
 8019d0a:	c303      	stmia	r3!, {r0, r1}
 8019d0c:	4621      	mov	r1, r4
 8019d0e:	4668      	mov	r0, sp
 8019d10:	f7fb fe78 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 8019d14:	466b      	mov	r3, sp
 8019d16:	cb03      	ldmia	r3!, {r0, r1}
 8019d18:	6020      	str	r0, [r4, #0]
 8019d1a:	6061      	str	r1, [r4, #4]
 8019d1c:	6968      	ldr	r0, [r5, #20]
 8019d1e:	b128      	cbz	r0, 8019d2c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019d20:	6803      	ldr	r3, [r0, #0]
 8019d22:	691b      	ldr	r3, [r3, #16]
 8019d24:	4621      	mov	r1, r4
 8019d26:	4798      	blx	r3
 8019d28:	b003      	add	sp, #12
 8019d2a:	bd30      	pop	{r4, r5, pc}
 8019d2c:	f7ff fb58 	bl	80193e0 <_ZN8touchgfx11Application11getInstanceEv>
 8019d30:	6803      	ldr	r3, [r0, #0]
 8019d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d34:	e7f6      	b.n	8019d24 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08019d36 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019d36:	b570      	push	{r4, r5, r6, lr}
 8019d38:	8882      	ldrh	r2, [r0, #4]
 8019d3a:	460c      	mov	r4, r1
 8019d3c:	880b      	ldrh	r3, [r1, #0]
 8019d3e:	4605      	mov	r5, r0
 8019d40:	4413      	add	r3, r2
 8019d42:	800b      	strh	r3, [r1, #0]
 8019d44:	884b      	ldrh	r3, [r1, #2]
 8019d46:	88c2      	ldrh	r2, [r0, #6]
 8019d48:	4413      	add	r3, r2
 8019d4a:	804b      	strh	r3, [r1, #2]
 8019d4c:	1d01      	adds	r1, r0, #4
 8019d4e:	4620      	mov	r0, r4
 8019d50:	f7fb fe58 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 8019d54:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	dd0b      	ble.n	8019d74 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019d5c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	dd07      	ble.n	8019d74 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019d64:	6968      	ldr	r0, [r5, #20]
 8019d66:	b128      	cbz	r0, 8019d74 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019d68:	6803      	ldr	r3, [r0, #0]
 8019d6a:	4621      	mov	r1, r4
 8019d6c:	6a1b      	ldr	r3, [r3, #32]
 8019d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d72:	4718      	bx	r3
 8019d74:	bd70      	pop	{r4, r5, r6, pc}

08019d76 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019d76:	b510      	push	{r4, lr}
 8019d78:	2300      	movs	r3, #0
 8019d7a:	4604      	mov	r4, r0
 8019d7c:	4608      	mov	r0, r1
 8019d7e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019d82:	8023      	strh	r3, [r4, #0]
 8019d84:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019d88:	8063      	strh	r3, [r4, #2]
 8019d8a:	6803      	ldr	r3, [r0, #0]
 8019d8c:	80a1      	strh	r1, [r4, #4]
 8019d8e:	4621      	mov	r1, r4
 8019d90:	80e2      	strh	r2, [r4, #6]
 8019d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d94:	4798      	blx	r3
 8019d96:	4620      	mov	r0, r4
 8019d98:	bd10      	pop	{r4, pc}
	...

08019d9c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019d9c:	b530      	push	{r4, r5, lr}
 8019d9e:	8083      	strh	r3, [r0, #4]
 8019da0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019da4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019da8:	7183      	strb	r3, [r0, #6]
 8019daa:	79c3      	ldrb	r3, [r0, #7]
 8019dac:	6101      	str	r1, [r0, #16]
 8019dae:	f365 0306 	bfi	r3, r5, #0, #7
 8019db2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019db6:	8282      	strh	r2, [r0, #20]
 8019db8:	f365 13c7 	bfi	r3, r5, #7, #1
 8019dbc:	71c3      	strb	r3, [r0, #7]
 8019dbe:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019dc2:	7203      	strb	r3, [r0, #8]
 8019dc4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019dc8:	7243      	strb	r3, [r0, #9]
 8019dca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019dce:	8143      	strh	r3, [r0, #10]
 8019dd0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019dd4:	8183      	strh	r3, [r0, #12]
 8019dd6:	4b01      	ldr	r3, [pc, #4]	; (8019ddc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019dd8:	6003      	str	r3, [r0, #0]
 8019dda:	bd30      	pop	{r4, r5, pc}
 8019ddc:	0802a3e4 	.word	0x0802a3e4

08019de0 <_ZNK8touchgfx9ConstFont4findEt>:
 8019de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019de2:	6904      	ldr	r4, [r0, #16]
 8019de4:	8a82      	ldrh	r2, [r0, #20]
 8019de6:	88a3      	ldrh	r3, [r4, #4]
 8019de8:	3a01      	subs	r2, #1
 8019dea:	1acb      	subs	r3, r1, r3
 8019dec:	d431      	bmi.n	8019e52 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019dee:	4293      	cmp	r3, r2
 8019df0:	dd0c      	ble.n	8019e0c <_ZNK8touchgfx9ConstFont4findEt+0x2c>
 8019df2:	230e      	movs	r3, #14
 8019df4:	fb03 4302 	mla	r3, r3, r2, r4
 8019df8:	889b      	ldrh	r3, [r3, #4]
 8019dfa:	1a5b      	subs	r3, r3, r1
 8019dfc:	1ad3      	subs	r3, r2, r3
 8019dfe:	429a      	cmp	r2, r3
 8019e00:	db27      	blt.n	8019e52 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	bfbc      	itt	lt
 8019e06:	2302      	movlt	r3, #2
 8019e08:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019e0c:	2500      	movs	r5, #0
 8019e0e:	260e      	movs	r6, #14
 8019e10:	4295      	cmp	r5, r2
 8019e12:	dc1e      	bgt.n	8019e52 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e14:	fb06 4003 	mla	r0, r6, r3, r4
 8019e18:	8887      	ldrh	r7, [r0, #4]
 8019e1a:	428f      	cmp	r7, r1
 8019e1c:	d01a      	beq.n	8019e54 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8019e1e:	d90d      	bls.n	8019e3c <_ZNK8touchgfx9ConstFont4findEt+0x5c>
 8019e20:	1e5a      	subs	r2, r3, #1
 8019e22:	4295      	cmp	r5, r2
 8019e24:	dc15      	bgt.n	8019e52 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e26:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019e2a:	1a5b      	subs	r3, r3, r1
 8019e2c:	1ad3      	subs	r3, r2, r3
 8019e2e:	429a      	cmp	r2, r3
 8019e30:	db0f      	blt.n	8019e52 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e32:	429d      	cmp	r5, r3
 8019e34:	ddec      	ble.n	8019e10 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019e36:	1953      	adds	r3, r2, r5
 8019e38:	105b      	asrs	r3, r3, #1
 8019e3a:	e7e9      	b.n	8019e10 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019e3c:	1c5d      	adds	r5, r3, #1
 8019e3e:	42aa      	cmp	r2, r5
 8019e40:	db07      	blt.n	8019e52 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e42:	8a43      	ldrh	r3, [r0, #18]
 8019e44:	1acb      	subs	r3, r1, r3
 8019e46:	442b      	add	r3, r5
 8019e48:	429d      	cmp	r5, r3
 8019e4a:	dc02      	bgt.n	8019e52 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e4c:	429a      	cmp	r2, r3
 8019e4e:	dadf      	bge.n	8019e10 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019e50:	e7f1      	b.n	8019e36 <_ZNK8touchgfx9ConstFont4findEt+0x56>
 8019e52:	2000      	movs	r0, #0
 8019e54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019e56 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e58:	4604      	mov	r4, r0
 8019e5a:	4617      	mov	r7, r2
 8019e5c:	461e      	mov	r6, r3
 8019e5e:	b911      	cbnz	r1, 8019e66 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019e60:	2500      	movs	r5, #0
 8019e62:	4628      	mov	r0, r5
 8019e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e66:	290a      	cmp	r1, #10
 8019e68:	d0fa      	beq.n	8019e60 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e6a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019e6e:	4291      	cmp	r1, r2
 8019e70:	d0f6      	beq.n	8019e60 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e72:	f242 020b 	movw	r2, #8203	; 0x200b
 8019e76:	4291      	cmp	r1, r2
 8019e78:	d0f2      	beq.n	8019e60 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e7a:	f7ff ffb1 	bl	8019de0 <_ZNK8touchgfx9ConstFont4findEt>
 8019e7e:	4605      	mov	r5, r0
 8019e80:	b950      	cbnz	r0, 8019e98 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019e82:	6823      	ldr	r3, [r4, #0]
 8019e84:	4620      	mov	r0, r4
 8019e86:	691b      	ldr	r3, [r3, #16]
 8019e88:	4798      	blx	r3
 8019e8a:	4601      	mov	r1, r0
 8019e8c:	4620      	mov	r0, r4
 8019e8e:	f7ff ffa7 	bl	8019de0 <_ZNK8touchgfx9ConstFont4findEt>
 8019e92:	4605      	mov	r5, r0
 8019e94:	2800      	cmp	r0, #0
 8019e96:	d0e3      	beq.n	8019e60 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e98:	6823      	ldr	r3, [r4, #0]
 8019e9a:	4629      	mov	r1, r5
 8019e9c:	4620      	mov	r0, r4
 8019e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ea0:	4798      	blx	r3
 8019ea2:	6038      	str	r0, [r7, #0]
 8019ea4:	6823      	ldr	r3, [r4, #0]
 8019ea6:	4620      	mov	r0, r4
 8019ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019eaa:	4798      	blx	r3
 8019eac:	7030      	strb	r0, [r6, #0]
 8019eae:	e7d8      	b.n	8019e62 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019eb0 <_ZN8touchgfx6memsetEPvhm>:
 8019eb0:	4402      	add	r2, r0
 8019eb2:	4290      	cmp	r0, r2
 8019eb4:	d002      	beq.n	8019ebc <_ZN8touchgfx6memsetEPvhm+0xc>
 8019eb6:	f800 1b01 	strb.w	r1, [r0], #1
 8019eba:	e7fa      	b.n	8019eb2 <_ZN8touchgfx6memsetEPvhm+0x2>
 8019ebc:	4770      	bx	lr

08019ebe <_ZN8touchgfx3clzEl>:
 8019ebe:	b1e8      	cbz	r0, 8019efc <_ZN8touchgfx3clzEl+0x3e>
 8019ec0:	2800      	cmp	r0, #0
 8019ec2:	bfb8      	it	lt
 8019ec4:	4240      	neglt	r0, r0
 8019ec6:	0c03      	lsrs	r3, r0, #16
 8019ec8:	041b      	lsls	r3, r3, #16
 8019eca:	b9ab      	cbnz	r3, 8019ef8 <_ZN8touchgfx3clzEl+0x3a>
 8019ecc:	0400      	lsls	r0, r0, #16
 8019ece:	2310      	movs	r3, #16
 8019ed0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019ed4:	bf04      	itt	eq
 8019ed6:	0200      	lsleq	r0, r0, #8
 8019ed8:	3308      	addeq	r3, #8
 8019eda:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019ede:	bf04      	itt	eq
 8019ee0:	0100      	lsleq	r0, r0, #4
 8019ee2:	3304      	addeq	r3, #4
 8019ee4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019ee8:	bf04      	itt	eq
 8019eea:	0080      	lsleq	r0, r0, #2
 8019eec:	3302      	addeq	r3, #2
 8019eee:	2800      	cmp	r0, #0
 8019ef0:	bfa8      	it	ge
 8019ef2:	3301      	addge	r3, #1
 8019ef4:	1e58      	subs	r0, r3, #1
 8019ef6:	4770      	bx	lr
 8019ef8:	2300      	movs	r3, #0
 8019efa:	e7e9      	b.n	8019ed0 <_ZN8touchgfx3clzEl+0x12>
 8019efc:	201f      	movs	r0, #31
 8019efe:	4770      	bx	lr

08019f00 <_ZN8touchgfx6muldivElllRl>:
 8019f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f04:	4604      	mov	r4, r0
 8019f06:	4698      	mov	r8, r3
 8019f08:	2601      	movs	r6, #1
 8019f0a:	f7ff ffd8 	bl	8019ebe <_ZN8touchgfx3clzEl>
 8019f0e:	2c00      	cmp	r4, #0
 8019f10:	fa04 f500 	lsl.w	r5, r4, r0
 8019f14:	fa06 f600 	lsl.w	r6, r6, r0
 8019f18:	bfba      	itte	lt
 8019f1a:	f04f 37ff 	movlt.w	r7, #4294967295
 8019f1e:	4264      	neglt	r4, r4
 8019f20:	2701      	movge	r7, #1
 8019f22:	2900      	cmp	r1, #0
 8019f24:	f106 36ff 	add.w	r6, r6, #4294967295
 8019f28:	bfbc      	itt	lt
 8019f2a:	4249      	neglt	r1, r1
 8019f2c:	427f      	neglt	r7, r7
 8019f2e:	2a00      	cmp	r2, #0
 8019f30:	fa41 fc00 	asr.w	ip, r1, r0
 8019f34:	ea01 0106 	and.w	r1, r1, r6
 8019f38:	bfb8      	it	lt
 8019f3a:	427f      	neglt	r7, r7
 8019f3c:	fb04 f401 	mul.w	r4, r4, r1
 8019f40:	fb95 f3f2 	sdiv	r3, r5, r2
 8019f44:	fb02 5513 	mls	r5, r2, r3, r5
 8019f48:	bfb8      	it	lt
 8019f4a:	4252      	neglt	r2, r2
 8019f4c:	fb94 f0f2 	sdiv	r0, r4, r2
 8019f50:	fb02 4410 	mls	r4, r2, r0, r4
 8019f54:	fb0c 4405 	mla	r4, ip, r5, r4
 8019f58:	fb94 f1f2 	sdiv	r1, r4, r2
 8019f5c:	4408      	add	r0, r1
 8019f5e:	fb02 4211 	mls	r2, r2, r1, r4
 8019f62:	fb0c 0003 	mla	r0, ip, r3, r0
 8019f66:	f8c8 2000 	str.w	r2, [r8]
 8019f6a:	4378      	muls	r0, r7
 8019f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f70 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019f70:	2000      	movs	r0, #0
 8019f72:	4770      	bx	lr

08019f74 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8019f74:	2001      	movs	r0, #1
 8019f76:	4770      	bx	lr

08019f78 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019f78:	2002      	movs	r0, #2
 8019f7a:	4770      	bx	lr

08019f7c <_ZN8touchgfx12GestureEventD1Ev>:
 8019f7c:	4770      	bx	lr

08019f7e <_ZN8touchgfx9DragEventD1Ev>:
 8019f7e:	4770      	bx	lr

08019f80 <_ZN8touchgfx10ClickEventD1Ev>:
 8019f80:	4770      	bx	lr

08019f82 <_ZN8touchgfx10ClickEventD0Ev>:
 8019f82:	b510      	push	{r4, lr}
 8019f84:	4604      	mov	r4, r0
 8019f86:	210c      	movs	r1, #12
 8019f88:	f00b fb7e 	bl	8025688 <_ZdlPvj>
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	bd10      	pop	{r4, pc}

08019f90 <_ZN8touchgfx9DragEventD0Ev>:
 8019f90:	b510      	push	{r4, lr}
 8019f92:	4604      	mov	r4, r0
 8019f94:	2110      	movs	r1, #16
 8019f96:	f00b fb77 	bl	8025688 <_ZdlPvj>
 8019f9a:	4620      	mov	r0, r4
 8019f9c:	bd10      	pop	{r4, pc}

08019f9e <_ZN8touchgfx12GestureEventD0Ev>:
 8019f9e:	b510      	push	{r4, lr}
 8019fa0:	4604      	mov	r4, r0
 8019fa2:	210c      	movs	r1, #12
 8019fa4:	f00b fb70 	bl	8025688 <_ZdlPvj>
 8019fa8:	4620      	mov	r0, r4
 8019faa:	bd10      	pop	{r4, pc}

08019fac <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019fac:	b530      	push	{r4, r5, lr}
 8019fae:	460d      	mov	r5, r1
 8019fb0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019fb2:	b087      	sub	sp, #28
 8019fb4:	4604      	mov	r4, r0
 8019fb6:	b301      	cbz	r1, 8019ffa <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019fb8:	a801      	add	r0, sp, #4
 8019fba:	f7ff fedc 	bl	8019d76 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fbe:	892a      	ldrh	r2, [r5, #8]
 8019fc0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019fc4:	7928      	ldrb	r0, [r5, #4]
 8019fc6:	1ad2      	subs	r2, r2, r3
 8019fc8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019fca:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019fce:	441a      	add	r2, r3
 8019fd0:	896b      	ldrh	r3, [r5, #10]
 8019fd2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019fd6:	f88d 0010 	strb.w	r0, [sp, #16]
 8019fda:	1b5b      	subs	r3, r3, r5
 8019fdc:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019fde:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019fe0:	442b      	add	r3, r5
 8019fe2:	4d07      	ldr	r5, [pc, #28]	; (801a000 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019fe4:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019fe8:	a903      	add	r1, sp, #12
 8019fea:	9503      	str	r5, [sp, #12]
 8019fec:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019ff0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ff4:	6803      	ldr	r3, [r0, #0]
 8019ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ff8:	4798      	blx	r3
 8019ffa:	b007      	add	sp, #28
 8019ffc:	bd30      	pop	{r4, r5, pc}
 8019ffe:	bf00      	nop
 801a000:	0802a460 	.word	0x0802a460

0801a004 <_ZNK8touchgfx4Rect9intersectEss>:
 801a004:	b510      	push	{r4, lr}
 801a006:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a00a:	428b      	cmp	r3, r1
 801a00c:	dc10      	bgt.n	801a030 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a00e:	8884      	ldrh	r4, [r0, #4]
 801a010:	4423      	add	r3, r4
 801a012:	b21b      	sxth	r3, r3
 801a014:	4299      	cmp	r1, r3
 801a016:	da0b      	bge.n	801a030 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a018:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a01c:	4293      	cmp	r3, r2
 801a01e:	dc07      	bgt.n	801a030 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a020:	88c0      	ldrh	r0, [r0, #6]
 801a022:	4418      	add	r0, r3
 801a024:	b200      	sxth	r0, r0
 801a026:	4282      	cmp	r2, r0
 801a028:	bfac      	ite	ge
 801a02a:	2000      	movge	r0, #0
 801a02c:	2001      	movlt	r0, #1
 801a02e:	bd10      	pop	{r4, pc}
 801a030:	2000      	movs	r0, #0
 801a032:	e7fc      	b.n	801a02e <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801a034 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a034:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a036:	460c      	mov	r4, r1
 801a038:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a03a:	b089      	sub	sp, #36	; 0x24
 801a03c:	4605      	mov	r5, r0
 801a03e:	2900      	cmp	r1, #0
 801a040:	d054      	beq.n	801a0ec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801a042:	4668      	mov	r0, sp
 801a044:	f7ff fe97 	bl	8019d76 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a048:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801a04a:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801a04c:	4668      	mov	r0, sp
 801a04e:	8922      	ldrh	r2, [r4, #8]
 801a050:	88e1      	ldrh	r1, [r4, #6]
 801a052:	443a      	add	r2, r7
 801a054:	4431      	add	r1, r6
 801a056:	b212      	sxth	r2, r2
 801a058:	b209      	sxth	r1, r1
 801a05a:	f7ff ffd3 	bl	801a004 <_ZNK8touchgfx4Rect9intersectEss>
 801a05e:	b1d0      	cbz	r0, 801a096 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a060:	89a2      	ldrh	r2, [r4, #12]
 801a062:	4668      	mov	r0, sp
 801a064:	8961      	ldrh	r1, [r4, #10]
 801a066:	443a      	add	r2, r7
 801a068:	4431      	add	r1, r6
 801a06a:	b212      	sxth	r2, r2
 801a06c:	b209      	sxth	r1, r1
 801a06e:	f7ff ffc9 	bl	801a004 <_ZNK8touchgfx4Rect9intersectEss>
 801a072:	4603      	mov	r3, r0
 801a074:	b978      	cbnz	r0, 801a096 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a076:	4a1e      	ldr	r2, [pc, #120]	; (801a0f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801a078:	a904      	add	r1, sp, #16
 801a07a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a07c:	9204      	str	r2, [sp, #16]
 801a07e:	2202      	movs	r2, #2
 801a080:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a084:	f88d 2014 	strb.w	r2, [sp, #20]
 801a088:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a08c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a090:	6803      	ldr	r3, [r0, #0]
 801a092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a094:	4798      	blx	r3
 801a096:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801a098:	a802      	add	r0, sp, #8
 801a09a:	f7ff fe6c 	bl	8019d76 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a09e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a0a2:	88e0      	ldrh	r0, [r4, #6]
 801a0a4:	8961      	ldrh	r1, [r4, #10]
 801a0a6:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a0aa:	1a80      	subs	r0, r0, r2
 801a0ac:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801a0b0:	1a89      	subs	r1, r1, r2
 801a0b2:	8923      	ldrh	r3, [r4, #8]
 801a0b4:	4460      	add	r0, ip
 801a0b6:	89a2      	ldrh	r2, [r4, #12]
 801a0b8:	4461      	add	r1, ip
 801a0ba:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a0bc:	eba3 030e 	sub.w	r3, r3, lr
 801a0c0:	eba2 020e 	sub.w	r2, r2, lr
 801a0c4:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a0c8:	7927      	ldrb	r7, [r4, #4]
 801a0ca:	4433      	add	r3, r6
 801a0cc:	4432      	add	r2, r6
 801a0ce:	4c09      	ldr	r4, [pc, #36]	; (801a0f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801a0d0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a0d2:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a0d6:	a904      	add	r1, sp, #16
 801a0d8:	9404      	str	r4, [sp, #16]
 801a0da:	f88d 7014 	strb.w	r7, [sp, #20]
 801a0de:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a0e2:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a0e6:	6803      	ldr	r3, [r0, #0]
 801a0e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a0ea:	4798      	blx	r3
 801a0ec:	b009      	add	sp, #36	; 0x24
 801a0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0f0:	0802a438 	.word	0x0802a438
 801a0f4:	0802a44c 	.word	0x0802a44c

0801a0f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0fc:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801a100:	b0a1      	sub	sp, #132	; 0x84
 801a102:	4604      	mov	r4, r0
 801a104:	460d      	mov	r5, r1
 801a106:	790b      	ldrb	r3, [r1, #4]
 801a108:	f1b9 0f00 	cmp.w	r9, #0
 801a10c:	d00f      	beq.n	801a12e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801a10e:	2b00      	cmp	r3, #0
 801a110:	f040 80a2 	bne.w	801a258 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a114:	b021      	add	sp, #132	; 0x84
 801a116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a11a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a11e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a122:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a126:	1d20      	adds	r0, r4, #4
 801a128:	f7fb fbba 	bl	80158a0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a12c:	e094      	b.n	801a258 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d1f0      	bne.n	801a114 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a132:	4b5f      	ldr	r3, [pc, #380]	; (801a2b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801a13a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801a13e:	f1ba 0f03 	cmp.w	sl, #3
 801a142:	ddea      	ble.n	801a11a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801a144:	f1ba 0f0c 	cmp.w	sl, #12
 801a148:	f04f 0303 	mov.w	r3, #3
 801a14c:	f04f 0600 	mov.w	r6, #0
 801a150:	4958      	ldr	r1, [pc, #352]	; (801a2b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801a152:	bfd8      	it	le
 801a154:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801a158:	960a      	str	r6, [sp, #40]	; 0x28
 801a15a:	bfd8      	it	le
 801a15c:	fb92 f3f3 	sdivle	r3, r2, r3
 801a160:	9301      	str	r3, [sp, #4]
 801a162:	4b55      	ldr	r3, [pc, #340]	; (801a2b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801a164:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a168:	4b54      	ldr	r3, [pc, #336]	; (801a2bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801a16a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a16e:	2248      	movs	r2, #72	; 0x48
 801a170:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a174:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a178:	ab0e      	add	r3, sp, #56	; 0x38
 801a17a:	4618      	mov	r0, r3
 801a17c:	f00b fb2e 	bl	80257dc <memcpy>
 801a180:	f04f 32ff 	mov.w	r2, #4294967295
 801a184:	f8cd a008 	str.w	sl, [sp, #8]
 801a188:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801a18c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a190:	46b3      	mov	fp, r6
 801a192:	fb93 f3f2 	sdiv	r3, r3, r2
 801a196:	b29b      	uxth	r3, r3
 801a198:	9303      	str	r3, [sp, #12]
 801a19a:	2300      	movs	r3, #0
 801a19c:	9a03      	ldr	r2, [sp, #12]
 801a19e:	88ef      	ldrh	r7, [r5, #6]
 801a1a0:	a80a      	add	r0, sp, #40	; 0x28
 801a1a2:	9309      	str	r3, [sp, #36]	; 0x24
 801a1a4:	9b07      	ldr	r3, [sp, #28]
 801a1a6:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801a1aa:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801a1ae:	fb13 f302 	smulbb	r3, r3, r2
 801a1b2:	b29b      	uxth	r3, r3
 801a1b4:	9304      	str	r3, [sp, #16]
 801a1b6:	9b07      	ldr	r3, [sp, #28]
 801a1b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a1bc:	685b      	ldr	r3, [r3, #4]
 801a1be:	fb13 f302 	smulbb	r3, r3, r2
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	9305      	str	r3, [sp, #20]
 801a1c6:	9b04      	ldr	r3, [sp, #16]
 801a1c8:	441f      	add	r7, r3
 801a1ca:	9b05      	ldr	r3, [sp, #20]
 801a1cc:	4498      	add	r8, r3
 801a1ce:	b23f      	sxth	r7, r7
 801a1d0:	fa0f f888 	sxth.w	r8, r8
 801a1d4:	4639      	mov	r1, r7
 801a1d6:	4642      	mov	r2, r8
 801a1d8:	f7ff ff14 	bl	801a004 <_ZNK8touchgfx4Rect9intersectEss>
 801a1dc:	b380      	cbz	r0, 801a240 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a1de:	4639      	mov	r1, r7
 801a1e0:	ab09      	add	r3, sp, #36	; 0x24
 801a1e2:	4642      	mov	r2, r8
 801a1e4:	1d20      	adds	r0, r4, #4
 801a1e6:	f7fb fb5b 	bl	80158a0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a1ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a1ec:	b341      	cbz	r1, 801a240 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a1ee:	4549      	cmp	r1, r9
 801a1f0:	d026      	beq.n	801a240 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a1f2:	a80c      	add	r0, sp, #48	; 0x30
 801a1f4:	f7ff fdbf 	bl	8019d76 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1f8:	2002      	movs	r0, #2
 801a1fa:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a1fe:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a202:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a206:	fb92 f2f0 	sdiv	r2, r2, r0
 801a20a:	440a      	add	r2, r1
 801a20c:	1a99      	subs	r1, r3, r2
 801a20e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a212:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a216:	fb93 f3f0 	sdiv	r3, r3, r0
 801a21a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801a21e:	4403      	add	r3, r0
 801a220:	1ad3      	subs	r3, r2, r3
 801a222:	9a06      	ldr	r2, [sp, #24]
 801a224:	435b      	muls	r3, r3
 801a226:	fb01 3301 	mla	r3, r1, r1, r3
 801a22a:	4293      	cmp	r3, r2
 801a22c:	d208      	bcs.n	801a240 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a22e:	9a04      	ldr	r2, [sp, #16]
 801a230:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a234:	86a2      	strh	r2, [r4, #52]	; 0x34
 801a236:	9a05      	ldr	r2, [sp, #20]
 801a238:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801a23c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801a23e:	9306      	str	r3, [sp, #24]
 801a240:	f10b 0b02 	add.w	fp, fp, #2
 801a244:	f1bb 0f08 	cmp.w	fp, #8
 801a248:	dda7      	ble.n	801a19a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801a24a:	9b02      	ldr	r3, [sp, #8]
 801a24c:	3601      	adds	r6, #1
 801a24e:	4453      	add	r3, sl
 801a250:	9302      	str	r3, [sp, #8]
 801a252:	9b01      	ldr	r3, [sp, #4]
 801a254:	42b3      	cmp	r3, r6
 801a256:	d199      	bne.n	801a18c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801a258:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a25a:	2900      	cmp	r1, #0
 801a25c:	f43f af5a 	beq.w	801a114 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a260:	a80c      	add	r0, sp, #48	; 0x30
 801a262:	2600      	movs	r6, #0
 801a264:	f7ff fd87 	bl	8019d76 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a268:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a26c:	88ea      	ldrh	r2, [r5, #6]
 801a26e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801a272:	1ad2      	subs	r2, r2, r3
 801a274:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a276:	7929      	ldrb	r1, [r5, #4]
 801a278:	441a      	add	r2, r3
 801a27a:	892b      	ldrh	r3, [r5, #8]
 801a27c:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801a280:	a90e      	add	r1, sp, #56	; 0x38
 801a282:	1a1b      	subs	r3, r3, r0
 801a284:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801a286:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a28a:	4403      	add	r3, r0
 801a28c:	480c      	ldr	r0, [pc, #48]	; (801a2c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801a28e:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801a292:	900e      	str	r0, [sp, #56]	; 0x38
 801a294:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a296:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801a29a:	6803      	ldr	r3, [r0, #0]
 801a29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a29e:	4798      	blx	r3
 801a2a0:	792b      	ldrb	r3, [r5, #4]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	f43f af36 	beq.w	801a114 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a2a8:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a2ac:	e732      	b.n	801a114 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a2ae:	bf00      	nop
 801a2b0:	2000b36c 	.word	0x2000b36c
 801a2b4:	08027214 	.word	0x08027214
 801a2b8:	2000b360 	.word	0x2000b360
 801a2bc:	2000b362 	.word	0x2000b362
 801a2c0:	0802a438 	.word	0x0802a438

0801a2c4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a2c6:	4604      	mov	r4, r0
 801a2c8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a2cc:	3201      	adds	r2, #1
 801a2ce:	d112      	bne.n	801a2f6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a2d0:	2500      	movs	r5, #0
 801a2d2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a2d6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a2da:	6803      	ldr	r3, [r0, #0]
 801a2dc:	9500      	str	r5, [sp, #0]
 801a2de:	466d      	mov	r5, sp
 801a2e0:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a2e4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a2e8:	4629      	mov	r1, r5
 801a2ea:	6a1b      	ldr	r3, [r3, #32]
 801a2ec:	4798      	blx	r3
 801a2ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a2f2:	e884 0003 	stmia.w	r4, {r0, r1}
 801a2f6:	4620      	mov	r0, r4
 801a2f8:	b003      	add	sp, #12
 801a2fa:	bd30      	pop	{r4, r5, pc}

0801a2fc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a2fc:	b513      	push	{r0, r1, r4, lr}
 801a2fe:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a302:	4604      	mov	r4, r0
 801a304:	3301      	adds	r3, #1
 801a306:	d109      	bne.n	801a31c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a308:	4601      	mov	r1, r0
 801a30a:	4668      	mov	r0, sp
 801a30c:	f7ff fd33 	bl	8019d76 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a310:	f8bd 3000 	ldrh.w	r3, [sp]
 801a314:	8423      	strh	r3, [r4, #32]
 801a316:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a31a:	8463      	strh	r3, [r4, #34]	; 0x22
 801a31c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a320:	b002      	add	sp, #8
 801a322:	bd10      	pop	{r4, pc}

0801a324 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a324:	b513      	push	{r0, r1, r4, lr}
 801a326:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a32a:	4604      	mov	r4, r0
 801a32c:	3301      	adds	r3, #1
 801a32e:	d109      	bne.n	801a344 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a330:	4601      	mov	r1, r0
 801a332:	4668      	mov	r0, sp
 801a334:	f7ff fd1f 	bl	8019d76 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a338:	f8bd 3000 	ldrh.w	r3, [sp]
 801a33c:	8423      	strh	r3, [r4, #32]
 801a33e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a342:	8463      	strh	r3, [r4, #34]	; 0x22
 801a344:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a348:	b002      	add	sp, #8
 801a34a:	bd10      	pop	{r4, pc}

0801a34c <_ZN8touchgfx6ScreenC1Ev>:
 801a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a34e:	4605      	mov	r5, r0
 801a350:	4b17      	ldr	r3, [pc, #92]	; (801a3b0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a352:	2200      	movs	r2, #0
 801a354:	4917      	ldr	r1, [pc, #92]	; (801a3b4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a356:	f845 3b04 	str.w	r3, [r5], #4
 801a35a:	2301      	movs	r3, #1
 801a35c:	8102      	strh	r2, [r0, #8]
 801a35e:	4604      	mov	r4, r0
 801a360:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801a364:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a368:	4b13      	ldr	r3, [pc, #76]	; (801a3b8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a36a:	8142      	strh	r2, [r0, #10]
 801a36c:	f9b3 7000 	ldrsh.w	r7, [r3]
 801a370:	4b12      	ldr	r3, [pc, #72]	; (801a3bc <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801a372:	8182      	strh	r2, [r0, #12]
 801a374:	81c2      	strh	r2, [r0, #14]
 801a376:	8202      	strh	r2, [r0, #16]
 801a378:	8242      	strh	r2, [r0, #18]
 801a37a:	8282      	strh	r2, [r0, #20]
 801a37c:	82c2      	strh	r2, [r0, #22]
 801a37e:	6202      	str	r2, [r0, #32]
 801a380:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801a384:	6342      	str	r2, [r0, #52]	; 0x34
 801a386:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a38a:	6041      	str	r1, [r0, #4]
 801a38c:	4611      	mov	r1, r2
 801a38e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a392:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801a396:	4628      	mov	r0, r5
 801a398:	f7f2 f8e5 	bl	800c566 <_ZN8touchgfx8Drawable5setXYEss>
 801a39c:	4639      	mov	r1, r7
 801a39e:	4628      	mov	r0, r5
 801a3a0:	f7f2 f8ff 	bl	800c5a2 <_ZN8touchgfx8Drawable8setWidthEs>
 801a3a4:	4628      	mov	r0, r5
 801a3a6:	4631      	mov	r1, r6
 801a3a8:	f7f2 f90a 	bl	800c5c0 <_ZN8touchgfx8Drawable9setHeightEs>
 801a3ac:	4620      	mov	r0, r4
 801a3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3b0:	0802a474 	.word	0x0802a474
 801a3b4:	08028fbc 	.word	0x08028fbc
 801a3b8:	2000b360 	.word	0x2000b360
 801a3bc:	2000b362 	.word	0x2000b362

0801a3c0 <_ZN8touchgfx6Screen4drawEv>:
 801a3c0:	4b09      	ldr	r3, [pc, #36]	; (801a3e8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a3c2:	b507      	push	{r0, r1, r2, lr}
 801a3c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a3c8:	2100      	movs	r1, #0
 801a3ca:	4b08      	ldr	r3, [pc, #32]	; (801a3ec <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a3cc:	9100      	str	r1, [sp, #0]
 801a3ce:	4669      	mov	r1, sp
 801a3d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3d4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a3d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a3dc:	6803      	ldr	r3, [r0, #0]
 801a3de:	689b      	ldr	r3, [r3, #8]
 801a3e0:	4798      	blx	r3
 801a3e2:	b003      	add	sp, #12
 801a3e4:	f85d fb04 	ldr.w	pc, [sp], #4
 801a3e8:	2000b360 	.word	0x2000b360
 801a3ec:	2000b362 	.word	0x2000b362

0801a3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3f4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a3f8:	b089      	sub	sp, #36	; 0x24
 801a3fa:	4680      	mov	r8, r0
 801a3fc:	460c      	mov	r4, r1
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	4615      	mov	r5, r2
 801a402:	dd0e      	ble.n	801a422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a404:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a408:	2b00      	cmp	r3, #0
 801a40a:	dd0a      	ble.n	801a422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a40c:	4628      	mov	r0, r5
 801a40e:	f7ff ff59 	bl	801a2c4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a412:	4621      	mov	r1, r4
 801a414:	f7fe ff5a 	bl	80192cc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a418:	69eb      	ldr	r3, [r5, #28]
 801a41a:	b928      	cbnz	r0, 801a428 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a41c:	461d      	mov	r5, r3
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d1f4      	bne.n	801a40c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a422:	b009      	add	sp, #36	; 0x24
 801a424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a428:	ae04      	add	r6, sp, #16
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d051      	beq.n	801a4d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801a42e:	682b      	ldr	r3, [r5, #0]
 801a430:	4629      	mov	r1, r5
 801a432:	a802      	add	r0, sp, #8
 801a434:	68db      	ldr	r3, [r3, #12]
 801a436:	4798      	blx	r3
 801a438:	4628      	mov	r0, r5
 801a43a:	f7ff ff5f 	bl	801a2fc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a43e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a442:	4407      	add	r7, r0
 801a444:	4628      	mov	r0, r5
 801a446:	f7ff ff6d 	bl	801a324 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a44a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a44e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a452:	b23f      	sxth	r7, r7
 801a454:	4418      	add	r0, r3
 801a456:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a45a:	4621      	mov	r1, r4
 801a45c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a460:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a464:	4630      	mov	r0, r6
 801a466:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a46a:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a46e:	f7fb fac9 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 801a472:	4628      	mov	r0, r5
 801a474:	f7ff ff26 	bl	801a2c4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a478:	ab06      	add	r3, sp, #24
 801a47a:	4602      	mov	r2, r0
 801a47c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a480:	e883 0003 	stmia.w	r3, {r0, r1}
 801a484:	4611      	mov	r1, r2
 801a486:	4618      	mov	r0, r3
 801a488:	f7fb fabc 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 801a48c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a490:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a494:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a498:	4299      	cmp	r1, r3
 801a49a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a49e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a4a2:	d10b      	bne.n	801a4bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801a4a4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a4a8:	4552      	cmp	r2, sl
 801a4aa:	d107      	bne.n	801a4bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801a4ac:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a4b0:	455a      	cmp	r2, fp
 801a4b2:	d103      	bne.n	801a4bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801a4b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a4b8:	454a      	cmp	r2, r9
 801a4ba:	d00a      	beq.n	801a4d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801a4bc:	f1bb 0f00 	cmp.w	fp, #0
 801a4c0:	d002      	beq.n	801a4c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 801a4c2:	f1b9 0f00 	cmp.w	r9, #0
 801a4c6:	d12e      	bne.n	801a526 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 801a4c8:	69ea      	ldr	r2, [r5, #28]
 801a4ca:	4621      	mov	r1, r4
 801a4cc:	4640      	mov	r0, r8
 801a4ce:	f7ff ff8f 	bl	801a3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a4d2:	4628      	mov	r0, r5
 801a4d4:	f7ff fef6 	bl	801a2c4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a4d8:	6861      	ldr	r1, [r4, #4]
 801a4da:	4602      	mov	r2, r0
 801a4dc:	4633      	mov	r3, r6
 801a4de:	6820      	ldr	r0, [r4, #0]
 801a4e0:	c303      	stmia	r3!, {r0, r1}
 801a4e2:	4611      	mov	r1, r2
 801a4e4:	4630      	mov	r0, r6
 801a4e6:	f7fb fa8d 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 801a4ea:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	dd97      	ble.n	801a422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a4f2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	dd93      	ble.n	801a422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a4fa:	4628      	mov	r0, r5
 801a4fc:	f7ff fefe 	bl	801a2fc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a500:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a504:	1a18      	subs	r0, r3, r0
 801a506:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a50a:	4628      	mov	r0, r5
 801a50c:	f7ff ff0a 	bl	801a324 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a510:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a514:	4631      	mov	r1, r6
 801a516:	1a18      	subs	r0, r3, r0
 801a518:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a51c:	4628      	mov	r0, r5
 801a51e:	682b      	ldr	r3, [r5, #0]
 801a520:	689b      	ldr	r3, [r3, #8]
 801a522:	4798      	blx	r3
 801a524:	e77d      	b.n	801a422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a526:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a52a:	fa1f f08a 	uxth.w	r0, sl
 801a52e:	4552      	cmp	r2, sl
 801a530:	9000      	str	r0, [sp, #0]
 801a532:	da12      	bge.n	801a55a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 801a534:	9301      	str	r3, [sp, #4]
 801a536:	9b00      	ldr	r3, [sp, #0]
 801a538:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a53c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a540:	1a9a      	subs	r2, r3, r2
 801a542:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a546:	4631      	mov	r1, r6
 801a548:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a54c:	4640      	mov	r0, r8
 801a54e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a552:	69ea      	ldr	r2, [r5, #28]
 801a554:	f7ff ff4c 	bl	801a3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a558:	9b01      	ldr	r3, [sp, #4]
 801a55a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a55e:	b29f      	uxth	r7, r3
 801a560:	429a      	cmp	r2, r3
 801a562:	da0d      	bge.n	801a580 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 801a564:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a568:	1aba      	subs	r2, r7, r2
 801a56a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a56e:	4631      	mov	r1, r6
 801a570:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a574:	4640      	mov	r0, r8
 801a576:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a57a:	69ea      	ldr	r2, [r5, #28]
 801a57c:	f7ff ff38 	bl	801a3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a580:	8822      	ldrh	r2, [r4, #0]
 801a582:	445f      	add	r7, fp
 801a584:	88a3      	ldrh	r3, [r4, #4]
 801a586:	b2bf      	uxth	r7, r7
 801a588:	4413      	add	r3, r2
 801a58a:	b23a      	sxth	r2, r7
 801a58c:	b29b      	uxth	r3, r3
 801a58e:	b219      	sxth	r1, r3
 801a590:	4291      	cmp	r1, r2
 801a592:	dd0d      	ble.n	801a5b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 801a594:	1bdb      	subs	r3, r3, r7
 801a596:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a59a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a59e:	4631      	mov	r1, r6
 801a5a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a5a4:	4640      	mov	r0, r8
 801a5a6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a5aa:	69ea      	ldr	r2, [r5, #28]
 801a5ac:	f7ff ff20 	bl	801a3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a5b0:	88e2      	ldrh	r2, [r4, #6]
 801a5b2:	8863      	ldrh	r3, [r4, #2]
 801a5b4:	4413      	add	r3, r2
 801a5b6:	9a00      	ldr	r2, [sp, #0]
 801a5b8:	444a      	add	r2, r9
 801a5ba:	b29b      	uxth	r3, r3
 801a5bc:	fa1f f982 	uxth.w	r9, r2
 801a5c0:	b219      	sxth	r1, r3
 801a5c2:	fa0f f289 	sxth.w	r2, r9
 801a5c6:	428a      	cmp	r2, r1
 801a5c8:	da83      	bge.n	801a4d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801a5ca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a5ce:	eba3 0309 	sub.w	r3, r3, r9
 801a5d2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a5d6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a5da:	4631      	mov	r1, r6
 801a5dc:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a5e0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a5e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a5e8:	69ea      	ldr	r2, [r5, #28]
 801a5ea:	e76f      	b.n	801a4cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

0801a5ec <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a5ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	aa02      	add	r2, sp, #8
 801a5f2:	4604      	mov	r4, r0
 801a5f4:	3004      	adds	r0, #4
 801a5f6:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a5fa:	460d      	mov	r5, r1
 801a5fc:	f7fb fada 	bl	8015bb4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a600:	9a01      	ldr	r2, [sp, #4]
 801a602:	b11a      	cbz	r2, 801a60c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a604:	4629      	mov	r1, r5
 801a606:	4620      	mov	r0, r4
 801a608:	f7ff fef2 	bl	801a3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a60c:	b003      	add	sp, #12
 801a60e:	bd30      	pop	{r4, r5, pc}

0801a610 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a612:	4602      	mov	r2, r0
 801a614:	4604      	mov	r4, r0
 801a616:	460d      	mov	r5, r1
 801a618:	466b      	mov	r3, sp
 801a61a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a61e:	6851      	ldr	r1, [r2, #4]
 801a620:	c303      	stmia	r3!, {r0, r1}
 801a622:	4629      	mov	r1, r5
 801a624:	4668      	mov	r0, sp
 801a626:	f7fb f9ed 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 801a62a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a62e:	4669      	mov	r1, sp
 801a630:	b123      	cbz	r3, 801a63c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a632:	4620      	mov	r0, r4
 801a634:	f7ff ffda 	bl	801a5ec <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a638:	b003      	add	sp, #12
 801a63a:	bd30      	pop	{r4, r5, pc}
 801a63c:	1d20      	adds	r0, r4, #4
 801a63e:	f7fb fa80 	bl	8015b42 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a642:	e7f9      	b.n	801a638 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a644 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a644:	460b      	mov	r3, r1
 801a646:	680a      	ldr	r2, [r1, #0]
 801a648:	1d01      	adds	r1, r0, #4
 801a64a:	6952      	ldr	r2, [r2, #20]
 801a64c:	4618      	mov	r0, r3
 801a64e:	4710      	bx	r2

0801a650 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801a650:	b510      	push	{r4, lr}
 801a652:	4298      	cmp	r0, r3
 801a654:	eb01 0402 	add.w	r4, r1, r2
 801a658:	b224      	sxth	r4, r4
 801a65a:	d22c      	bcs.n	801a6b6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801a65c:	b35b      	cbz	r3, 801a6b6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801a65e:	ee07 0a90 	vmov	s15, r0
 801a662:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801a666:	ee07 3a90 	vmov	s15, r3
 801a66a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a66e:	ee07 2a90 	vmov	s15, r2
 801a672:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801a676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a67a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801a67e:	ee07 1a90 	vmov	s15, r1
 801a682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a686:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a68a:	ee67 5a07 	vmul.f32	s11, s14, s14
 801a68e:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a692:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a696:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a69a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6a2:	bfcc      	ite	gt
 801a6a4:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801a6a8:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801a6ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a6b0:	ee17 3a90 	vmov	r3, s15
 801a6b4:	b21c      	sxth	r4, r3
 801a6b6:	4620      	mov	r0, r4
 801a6b8:	bd10      	pop	{r4, pc}

0801a6ba <_ZN8touchgfx12TextProviderC1Ev>:
 801a6ba:	2300      	movs	r3, #0
 801a6bc:	2201      	movs	r2, #1
 801a6be:	b510      	push	{r4, lr}
 801a6c0:	4604      	mov	r4, r0
 801a6c2:	60c3      	str	r3, [r0, #12]
 801a6c4:	7403      	strb	r3, [r0, #16]
 801a6c6:	82c3      	strh	r3, [r0, #22]
 801a6c8:	8303      	strh	r3, [r0, #24]
 801a6ca:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a6cc:	8603      	strh	r3, [r0, #48]	; 0x30
 801a6ce:	86c3      	strh	r3, [r0, #54]	; 0x36
 801a6d0:	8703      	strh	r3, [r0, #56]	; 0x38
 801a6d2:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a6d4:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801a6d8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801a6dc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801a6e0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801a6e4:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801a6e8:	e9c0 3300 	strd	r3, r3, [r0]
 801a6ec:	f7f8 f85a 	bl	80127a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a6f0:	4620      	mov	r0, r4
 801a6f2:	bd10      	pop	{r4, pc}

0801a6f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a6f4:	b530      	push	{r4, r5, lr}
 801a6f6:	2500      	movs	r5, #0
 801a6f8:	2401      	movs	r4, #1
 801a6fa:	6843      	ldr	r3, [r0, #4]
 801a6fc:	b913      	cbnz	r3, 801a704 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a6fe:	6803      	ldr	r3, [r0, #0]
 801a700:	b1f3      	cbz	r3, 801a740 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a702:	6043      	str	r3, [r0, #4]
 801a704:	7c03      	ldrb	r3, [r0, #16]
 801a706:	b143      	cbz	r3, 801a71a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a708:	68c3      	ldr	r3, [r0, #12]
 801a70a:	b12b      	cbz	r3, 801a718 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a70c:	881a      	ldrh	r2, [r3, #0]
 801a70e:	b11a      	cbz	r2, 801a718 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a710:	1c9a      	adds	r2, r3, #2
 801a712:	60c2      	str	r2, [r0, #12]
 801a714:	8818      	ldrh	r0, [r3, #0]
 801a716:	bd30      	pop	{r4, r5, pc}
 801a718:	7405      	strb	r5, [r0, #16]
 801a71a:	6843      	ldr	r3, [r0, #4]
 801a71c:	8819      	ldrh	r1, [r3, #0]
 801a71e:	b179      	cbz	r1, 801a740 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a720:	1c9a      	adds	r2, r3, #2
 801a722:	2902      	cmp	r1, #2
 801a724:	6042      	str	r2, [r0, #4]
 801a726:	d1f5      	bne.n	801a714 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a728:	6883      	ldr	r3, [r0, #8]
 801a72a:	1d1a      	adds	r2, r3, #4
 801a72c:	6082      	str	r2, [r0, #8]
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	60c3      	str	r3, [r0, #12]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d0e1      	beq.n	801a6fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a736:	881b      	ldrh	r3, [r3, #0]
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d0de      	beq.n	801a6fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a73c:	7404      	strb	r4, [r0, #16]
 801a73e:	e7dc      	b.n	801a6fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a740:	2000      	movs	r0, #0
 801a742:	e7e8      	b.n	801a716 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a744 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801a744:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a746:	2300      	movs	r3, #0
 801a748:	6082      	str	r2, [r0, #8]
 801a74a:	6001      	str	r1, [r0, #0]
 801a74c:	6043      	str	r3, [r0, #4]
 801a74e:	60c3      	str	r3, [r0, #12]
 801a750:	7403      	strb	r3, [r0, #16]
 801a752:	8603      	strh	r3, [r0, #48]	; 0x30
 801a754:	8303      	strh	r3, [r0, #24]
 801a756:	8703      	strh	r3, [r0, #56]	; 0x38
 801a758:	b410      	push	{r4}
 801a75a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a75e:	f7f8 b821 	b.w	80127a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a762 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a762:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a764:	4605      	mov	r5, r0
 801a766:	4608      	mov	r0, r1
 801a768:	b1f1      	cbz	r1, 801a7a8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a76a:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801a76e:	460b      	mov	r3, r1
 801a770:	f101 0708 	add.w	r7, r1, #8
 801a774:	4622      	mov	r2, r4
 801a776:	6818      	ldr	r0, [r3, #0]
 801a778:	3308      	adds	r3, #8
 801a77a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a77e:	4626      	mov	r6, r4
 801a780:	42bb      	cmp	r3, r7
 801a782:	c603      	stmia	r6!, {r0, r1}
 801a784:	4634      	mov	r4, r6
 801a786:	d1f6      	bne.n	801a776 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a788:	6818      	ldr	r0, [r3, #0]
 801a78a:	6030      	str	r0, [r6, #0]
 801a78c:	4610      	mov	r0, r2
 801a78e:	889b      	ldrh	r3, [r3, #4]
 801a790:	80b3      	strh	r3, [r6, #4]
 801a792:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801a796:	015b      	lsls	r3, r3, #5
 801a798:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a79c:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801a7a0:	430b      	orrs	r3, r1
 801a7a2:	425b      	negs	r3, r3
 801a7a4:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801a7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a7aa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a7aa:	b538      	push	{r3, r4, r5, lr}
 801a7ac:	460c      	mov	r4, r1
 801a7ae:	6811      	ldr	r1, [r2, #0]
 801a7b0:	4610      	mov	r0, r2
 801a7b2:	68cd      	ldr	r5, [r1, #12]
 801a7b4:	4619      	mov	r1, r3
 801a7b6:	47a8      	blx	r5
 801a7b8:	2800      	cmp	r0, #0
 801a7ba:	bf08      	it	eq
 801a7bc:	4620      	moveq	r0, r4
 801a7be:	bd38      	pop	{r3, r4, r5, pc}

0801a7c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7c2:	4604      	mov	r4, r0
 801a7c4:	4615      	mov	r5, r2
 801a7c6:	4608      	mov	r0, r1
 801a7c8:	b93a      	cbnz	r2, 801a7da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a7ca:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a7ce:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a7d2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a7d6:	4628      	mov	r0, r5
 801a7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7da:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a7de:	8893      	ldrh	r3, [r2, #4]
 801a7e0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a7e4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a7e8:	79ee      	ldrb	r6, [r5, #7]
 801a7ea:	4316      	orrs	r6, r2
 801a7ec:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801a7f0:	189a      	adds	r2, r3, r2
 801a7f2:	b2b7      	uxth	r7, r6
 801a7f4:	b291      	uxth	r1, r2
 801a7f6:	291d      	cmp	r1, #29
 801a7f8:	f200 8084 	bhi.w	801a904 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a7fc:	2201      	movs	r2, #1
 801a7fe:	10f6      	asrs	r6, r6, #3
 801a800:	408a      	lsls	r2, r1
 801a802:	4978      	ldr	r1, [pc, #480]	; (801a9e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801a804:	420a      	tst	r2, r1
 801a806:	d12e      	bne.n	801a866 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a808:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a80c:	d07a      	beq.n	801a904 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a80e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801a812:	462b      	mov	r3, r5
 801a814:	f105 0e08 	add.w	lr, r5, #8
 801a818:	4615      	mov	r5, r2
 801a81a:	6818      	ldr	r0, [r3, #0]
 801a81c:	3308      	adds	r3, #8
 801a81e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a822:	4694      	mov	ip, r2
 801a824:	4573      	cmp	r3, lr
 801a826:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a82a:	4662      	mov	r2, ip
 801a82c:	d1f5      	bne.n	801a81a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801a82e:	6818      	ldr	r0, [r3, #0]
 801a830:	f8cc 0000 	str.w	r0, [ip]
 801a834:	889b      	ldrh	r3, [r3, #4]
 801a836:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a83a:	b2b3      	uxth	r3, r6
 801a83c:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a840:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801a844:	1aca      	subs	r2, r1, r3
 801a846:	1bcf      	subs	r7, r1, r7
 801a848:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a84c:	b292      	uxth	r2, r2
 801a84e:	1afb      	subs	r3, r7, r3
 801a850:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801a854:	10d2      	asrs	r2, r2, #3
 801a856:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a85a:	4302      	orrs	r2, r0
 801a85c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801a860:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801a864:	e7b7      	b.n	801a7d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a866:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a868:	b92b      	cbnz	r3, 801a876 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801a86a:	4b5f      	ldr	r3, [pc, #380]	; (801a9e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801a86c:	21c0      	movs	r1, #192	; 0xc0
 801a86e:	4a5f      	ldr	r2, [pc, #380]	; (801a9ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801a870:	485f      	ldr	r0, [pc, #380]	; (801a9f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801a872:	f00a ff35 	bl	80256e0 <__assert_func>
 801a876:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801a878:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a87c:	8b59      	ldrh	r1, [r3, #26]
 801a87e:	f640 6333 	movw	r3, #3635	; 0xe33
 801a882:	4299      	cmp	r1, r3
 801a884:	d110      	bne.n	801a8a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801a886:	6803      	ldr	r3, [r0, #0]
 801a888:	68db      	ldr	r3, [r3, #12]
 801a88a:	4798      	blx	r3
 801a88c:	7b41      	ldrb	r1, [r0, #13]
 801a88e:	00cb      	lsls	r3, r1, #3
 801a890:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a894:	7a03      	ldrb	r3, [r0, #8]
 801a896:	0648      	lsls	r0, r1, #25
 801a898:	ea43 0302 	orr.w	r3, r3, r2
 801a89c:	bf44      	itt	mi
 801a89e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a8a2:	b21b      	sxthmi	r3, r3
 801a8a4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a8a8:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801a8ac:	462a      	mov	r2, r5
 801a8ae:	f105 0c08 	add.w	ip, r5, #8
 801a8b2:	443b      	add	r3, r7
 801a8b4:	4433      	add	r3, r6
 801a8b6:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801a8ba:	b29b      	uxth	r3, r3
 801a8bc:	4635      	mov	r5, r6
 801a8be:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a8c2:	6810      	ldr	r0, [r2, #0]
 801a8c4:	3208      	adds	r2, #8
 801a8c6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a8ca:	4637      	mov	r7, r6
 801a8cc:	4562      	cmp	r2, ip
 801a8ce:	c703      	stmia	r7!, {r0, r1}
 801a8d0:	463e      	mov	r6, r7
 801a8d2:	d1f6      	bne.n	801a8c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801a8d4:	6810      	ldr	r0, [r2, #0]
 801a8d6:	6038      	str	r0, [r7, #0]
 801a8d8:	8892      	ldrh	r2, [r2, #4]
 801a8da:	80ba      	strh	r2, [r7, #4]
 801a8dc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801a8e0:	10db      	asrs	r3, r3, #3
 801a8e2:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801a8e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a8ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a8ee:	4313      	orrs	r3, r2
 801a8f0:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801a8f4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801a8f8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a8fc:	1a9b      	subs	r3, r3, r2
 801a8fe:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801a902:	e768      	b.n	801a7d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a904:	f023 0204 	bic.w	r2, r3, #4
 801a908:	f640 611b 	movw	r1, #3611	; 0xe1b
 801a90c:	428a      	cmp	r2, r1
 801a90e:	d003      	beq.n	801a918 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801a910:	f640 621d 	movw	r2, #3613	; 0xe1d
 801a914:	4293      	cmp	r3, r2
 801a916:	d120      	bne.n	801a95a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a918:	3b01      	subs	r3, #1
 801a91a:	4602      	mov	r2, r0
 801a91c:	4629      	mov	r1, r5
 801a91e:	4620      	mov	r0, r4
 801a920:	b29b      	uxth	r3, r3
 801a922:	f7ff ff42 	bl	801a7aa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a926:	7b41      	ldrb	r1, [r0, #13]
 801a928:	00cb      	lsls	r3, r1, #3
 801a92a:	0649      	lsls	r1, r1, #25
 801a92c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a930:	7a03      	ldrb	r3, [r0, #8]
 801a932:	ea43 0302 	orr.w	r3, r3, r2
 801a936:	bf44      	itt	mi
 801a938:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a93c:	b21b      	sxthmi	r3, r3
 801a93e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a942:	7b6b      	ldrb	r3, [r5, #13]
 801a944:	7aaa      	ldrb	r2, [r5, #10]
 801a946:	005b      	lsls	r3, r3, #1
 801a948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a94c:	4313      	orrs	r3, r2
 801a94e:	115a      	asrs	r2, r3, #5
 801a950:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a954:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a958:	e035      	b.n	801a9c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801a95a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a95e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801a962:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801a966:	7a2a      	ldrb	r2, [r5, #8]
 801a968:	ea42 0201 	orr.w	r2, r2, r1
 801a96c:	f640 6109 	movw	r1, #3593	; 0xe09
 801a970:	bf1c      	itt	ne
 801a972:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801a976:	b212      	sxthne	r2, r2
 801a978:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a97c:	f023 0210 	bic.w	r2, r3, #16
 801a980:	428a      	cmp	r2, r1
 801a982:	d003      	beq.n	801a98c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801a984:	f640 6213 	movw	r2, #3603	; 0xe13
 801a988:	4293      	cmp	r3, r2
 801a98a:	d129      	bne.n	801a9e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801a98c:	7b6e      	ldrb	r6, [r5, #13]
 801a98e:	4629      	mov	r1, r5
 801a990:	0076      	lsls	r6, r6, #1
 801a992:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a996:	7aae      	ldrb	r6, [r5, #10]
 801a998:	4316      	orrs	r6, r2
 801a99a:	f640 6213 	movw	r2, #3603	; 0xe13
 801a99e:	4293      	cmp	r3, r2
 801a9a0:	4602      	mov	r2, r0
 801a9a2:	4620      	mov	r0, r4
 801a9a4:	bf16      	itet	ne
 801a9a6:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a9aa:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a9ae:	b29b      	uxthne	r3, r3
 801a9b0:	f7ff fefb 	bl	801a7aa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a9b4:	7b43      	ldrb	r3, [r0, #13]
 801a9b6:	7a82      	ldrb	r2, [r0, #10]
 801a9b8:	005b      	lsls	r3, r3, #1
 801a9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a9be:	4313      	orrs	r3, r2
 801a9c0:	1af6      	subs	r6, r6, r3
 801a9c2:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801a9c6:	7b69      	ldrb	r1, [r5, #13]
 801a9c8:	00cb      	lsls	r3, r1, #3
 801a9ca:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a9ce:	7a2b      	ldrb	r3, [r5, #8]
 801a9d0:	4313      	orrs	r3, r2
 801a9d2:	064a      	lsls	r2, r1, #25
 801a9d4:	bf44      	itt	mi
 801a9d6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a9da:	b21b      	sxthmi	r3, r3
 801a9dc:	1bdb      	subs	r3, r3, r7
 801a9de:	e73f      	b.n	801a860 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801a9e0:	2300      	movs	r3, #0
 801a9e2:	e7b7      	b.n	801a954 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801a9e4:	3fc00079 	.word	0x3fc00079
 801a9e8:	0802a4a0 	.word	0x0802a4a0
 801a9ec:	0802a712 	.word	0x0802a712
 801a9f0:	0802a4a9 	.word	0x0802a4a9

0801a9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9f8:	4604      	mov	r4, r0
 801a9fa:	b942      	cbnz	r2, 801aa0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a9fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801aa00:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801aa04:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801aa08:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801aa0c:	e046      	b.n	801aa9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801aa0e:	7b51      	ldrb	r1, [r2, #13]
 801aa10:	8893      	ldrh	r3, [r2, #4]
 801aa12:	010f      	lsls	r7, r1, #4
 801aa14:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801aa18:	79d7      	ldrb	r7, [r2, #7]
 801aa1a:	4307      	orrs	r7, r0
 801aa1c:	2f04      	cmp	r7, #4
 801aa1e:	b2bd      	uxth	r5, r7
 801aa20:	bfcc      	ite	gt
 801aa22:	08bf      	lsrgt	r7, r7, #2
 801aa24:	2701      	movle	r7, #1
 801aa26:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801aa2a:	f200 80ab 	bhi.w	801ab84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801aa2e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801aa32:	4283      	cmp	r3, r0
 801aa34:	d216      	bcs.n	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa36:	f240 605b 	movw	r0, #1627	; 0x65b
 801aa3a:	4283      	cmp	r3, r0
 801aa3c:	d859      	bhi.n	801aaf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801aa3e:	f240 6057 	movw	r0, #1623	; 0x657
 801aa42:	4283      	cmp	r3, r0
 801aa44:	d20e      	bcs.n	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa46:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801aa4a:	d24a      	bcs.n	801aae2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801aa4c:	f240 604e 	movw	r0, #1614	; 0x64e
 801aa50:	4283      	cmp	r3, r0
 801aa52:	d207      	bcs.n	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa54:	f240 601a 	movw	r0, #1562	; 0x61a
 801aa58:	4283      	cmp	r3, r0
 801aa5a:	d02a      	beq.n	801aab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aa5c:	d821      	bhi.n	801aaa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801aa5e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801aa62:	d35b      	bcc.n	801ab1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aa64:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801aa68:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aa6c:	f040 80d0 	bne.w	801ac10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801aa70:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801aa74:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801aa78:	f040 80ca 	bne.w	801ac10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801aa7c:	00cb      	lsls	r3, r1, #3
 801aa7e:	0649      	lsls	r1, r1, #25
 801aa80:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aa84:	7a13      	ldrb	r3, [r2, #8]
 801aa86:	ea43 0300 	orr.w	r3, r3, r0
 801aa8a:	bf44      	itt	mi
 801aa8c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aa90:	b21b      	sxthmi	r3, r3
 801aa92:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801aa96:	1b5d      	subs	r5, r3, r5
 801aa98:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801aa9c:	4610      	mov	r0, r2
 801aa9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aaa2:	f240 604b 	movw	r0, #1611	; 0x64b
 801aaa6:	4283      	cmp	r3, r0
 801aaa8:	d338      	bcc.n	801ab1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aaaa:	f240 604c 	movw	r0, #1612	; 0x64c
 801aaae:	4283      	cmp	r3, r0
 801aab0:	d9d8      	bls.n	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aab2:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801aab6:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801aaba:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801aabe:	f040 80f2 	bne.w	801aca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801aac2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aac6:	f040 80ee 	bne.w	801aca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801aaca:	00cb      	lsls	r3, r1, #3
 801aacc:	064e      	lsls	r6, r1, #25
 801aace:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aad2:	7a13      	ldrb	r3, [r2, #8]
 801aad4:	ea43 0300 	orr.w	r3, r3, r0
 801aad8:	bf44      	itt	mi
 801aada:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aade:	b21b      	sxthmi	r3, r3
 801aae0:	e7d9      	b.n	801aa96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801aae2:	f240 6054 	movw	r0, #1620	; 0x654
 801aae6:	4283      	cmp	r3, r0
 801aae8:	d8e3      	bhi.n	801aab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aaea:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801aaee:	d9e0      	bls.n	801aab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aaf0:	e7b8      	b.n	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aaf2:	f240 6074 	movw	r0, #1652	; 0x674
 801aaf6:	4283      	cmp	r3, r0
 801aaf8:	d0b4      	beq.n	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aafa:	d82d      	bhi.n	801ab58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801aafc:	f240 605e 	movw	r0, #1630	; 0x65e
 801ab00:	4283      	cmp	r3, r0
 801ab02:	d804      	bhi.n	801ab0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801ab04:	f240 605d 	movw	r0, #1629	; 0x65d
 801ab08:	4283      	cmp	r3, r0
 801ab0a:	d3d2      	bcc.n	801aab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab0c:	e7aa      	b.n	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab0e:	f240 605f 	movw	r0, #1631	; 0x65f
 801ab12:	4283      	cmp	r3, r0
 801ab14:	d0cd      	beq.n	801aab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab16:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801ab1a:	d0a3      	beq.n	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab1c:	00cb      	lsls	r3, r1, #3
 801ab1e:	0649      	lsls	r1, r1, #25
 801ab20:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ab24:	7a13      	ldrb	r3, [r2, #8]
 801ab26:	ea43 0300 	orr.w	r3, r3, r0
 801ab2a:	bf44      	itt	mi
 801ab2c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ab30:	b21b      	sxthmi	r3, r3
 801ab32:	1b5d      	subs	r5, r3, r5
 801ab34:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801ab38:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801ab3c:	7b53      	ldrb	r3, [r2, #13]
 801ab3e:	015b      	lsls	r3, r3, #5
 801ab40:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ab44:	7993      	ldrb	r3, [r2, #6]
 801ab46:	430b      	orrs	r3, r1
 801ab48:	2105      	movs	r1, #5
 801ab4a:	005b      	lsls	r3, r3, #1
 801ab4c:	fb93 f3f1 	sdiv	r3, r3, r1
 801ab50:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801ab54:	440b      	add	r3, r1
 801ab56:	e757      	b.n	801aa08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801ab58:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801ab5c:	4283      	cmp	r3, r0
 801ab5e:	d809      	bhi.n	801ab74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801ab60:	f240 60df 	movw	r0, #1759	; 0x6df
 801ab64:	4283      	cmp	r3, r0
 801ab66:	f4bf af7d 	bcs.w	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab6a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ab6e:	2b05      	cmp	r3, #5
 801ab70:	d8d4      	bhi.n	801ab1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ab72:	e777      	b.n	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab74:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ab78:	4283      	cmp	r3, r0
 801ab7a:	d09a      	beq.n	801aab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab7c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ab80:	4283      	cmp	r3, r0
 801ab82:	e7ca      	b.n	801ab1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801ab84:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801ab88:	d22b      	bcs.n	801abe2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801ab8a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ab8e:	4283      	cmp	r3, r0
 801ab90:	d28f      	bcs.n	801aab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab92:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ab96:	4283      	cmp	r3, r0
 801ab98:	d816      	bhi.n	801abc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801ab9a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ab9e:	4283      	cmp	r3, r0
 801aba0:	f4bf af60 	bcs.w	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aba4:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801aba8:	4283      	cmp	r3, r0
 801abaa:	d80a      	bhi.n	801abc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801abac:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801abb0:	4283      	cmp	r3, r0
 801abb2:	f4bf af57 	bcs.w	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801abb6:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801abba:	4283      	cmp	r3, r0
 801abbc:	f43f af79 	beq.w	801aab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abc0:	e7ac      	b.n	801ab1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801abc2:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801abc6:	e7f8      	b.n	801abba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801abc8:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801abcc:	4283      	cmp	r3, r0
 801abce:	d802      	bhi.n	801abd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801abd0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801abd4:	e798      	b.n	801ab08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801abd6:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801abda:	4283      	cmp	r3, r0
 801abdc:	f47f af42 	bne.w	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801abe0:	e767      	b.n	801aab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abe2:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801abe6:	4283      	cmp	r3, r0
 801abe8:	f43f af63 	beq.w	801aab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abec:	d802      	bhi.n	801abf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801abee:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801abf2:	e7f2      	b.n	801abda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801abf4:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801abf8:	4283      	cmp	r3, r0
 801abfa:	d805      	bhi.n	801ac08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801abfc:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801ac00:	4283      	cmp	r3, r0
 801ac02:	f4ff af2f 	bcc.w	801aa64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ac06:	e754      	b.n	801aab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ac08:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ac0c:	4283      	cmp	r3, r0
 801ac0e:	e7af      	b.n	801ab70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801ac10:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801ac14:	4617      	mov	r7, r2
 801ac16:	f102 0808 	add.w	r8, r2, #8
 801ac1a:	4666      	mov	r6, ip
 801ac1c:	6838      	ldr	r0, [r7, #0]
 801ac1e:	3708      	adds	r7, #8
 801ac20:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ac24:	46e6      	mov	lr, ip
 801ac26:	4547      	cmp	r7, r8
 801ac28:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ac2c:	46f4      	mov	ip, lr
 801ac2e:	d1f5      	bne.n	801ac1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801ac30:	6838      	ldr	r0, [r7, #0]
 801ac32:	f8ce 0000 	str.w	r0, [lr]
 801ac36:	88b9      	ldrh	r1, [r7, #4]
 801ac38:	f8ae 1004 	strh.w	r1, [lr, #4]
 801ac3c:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801ac40:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ac44:	d009      	beq.n	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801ac46:	7b51      	ldrb	r1, [r2, #13]
 801ac48:	7992      	ldrb	r2, [r2, #6]
 801ac4a:	0149      	lsls	r1, r1, #5
 801ac4c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ac50:	4311      	orrs	r1, r2
 801ac52:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ac56:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801ac5a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ac5e:	d00d      	beq.n	801ac7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801ac60:	442b      	add	r3, r5
 801ac62:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801ac66:	b29b      	uxth	r3, r3
 801ac68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ac6c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801ac70:	10db      	asrs	r3, r3, #3
 801ac72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ac76:	4313      	orrs	r3, r2
 801ac78:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801ac7c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801ac80:	00cb      	lsls	r3, r1, #3
 801ac82:	064f      	lsls	r7, r1, #25
 801ac84:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ac88:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801ac8c:	ea43 0302 	orr.w	r3, r3, r2
 801ac90:	bf44      	itt	mi
 801ac92:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ac96:	b21b      	sxthmi	r3, r3
 801ac98:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801ac9c:	1b5d      	subs	r5, r3, r5
 801ac9e:	4632      	mov	r2, r6
 801aca0:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801aca4:	e6fa      	b.n	801aa9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801aca6:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801acaa:	4694      	mov	ip, r2
 801acac:	f102 0908 	add.w	r9, r2, #8
 801acb0:	4676      	mov	r6, lr
 801acb2:	f8dc 0000 	ldr.w	r0, [ip]
 801acb6:	f10c 0c08 	add.w	ip, ip, #8
 801acba:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801acbe:	46f0      	mov	r8, lr
 801acc0:	45cc      	cmp	ip, r9
 801acc2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801acc6:	46c6      	mov	lr, r8
 801acc8:	d1f3      	bne.n	801acb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801acca:	f8dc 0000 	ldr.w	r0, [ip]
 801acce:	f8c8 0000 	str.w	r0, [r8]
 801acd2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801acd6:	f8a8 1004 	strh.w	r1, [r8, #4]
 801acda:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801acde:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ace2:	d009      	beq.n	801acf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801ace4:	7b51      	ldrb	r1, [r2, #13]
 801ace6:	7992      	ldrb	r2, [r2, #6]
 801ace8:	0149      	lsls	r1, r1, #5
 801acea:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801acee:	4311      	orrs	r1, r2
 801acf0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801acf4:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801acf8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801acfc:	d00d      	beq.n	801ad1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801acfe:	1bdb      	subs	r3, r3, r7
 801ad00:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801ad04:	b29b      	uxth	r3, r3
 801ad06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ad0a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801ad0e:	10db      	asrs	r3, r3, #3
 801ad10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ad14:	4313      	orrs	r3, r2
 801ad16:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801ad1a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801ad1e:	00cb      	lsls	r3, r1, #3
 801ad20:	0648      	lsls	r0, r1, #25
 801ad22:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ad26:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801ad2a:	ea43 0302 	orr.w	r3, r3, r2
 801ad2e:	bf44      	itt	mi
 801ad30:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ad34:	b21b      	sxthmi	r3, r3
 801ad36:	e7b1      	b.n	801ac9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801ad38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ad38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad3c:	461d      	mov	r5, r3
 801ad3e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801ad40:	4604      	mov	r4, r0
 801ad42:	4617      	mov	r7, r2
 801ad44:	b92b      	cbnz	r3, 801ad52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801ad46:	4b23      	ldr	r3, [pc, #140]	; (801add4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x9c>)
 801ad48:	21c0      	movs	r1, #192	; 0xc0
 801ad4a:	4a23      	ldr	r2, [pc, #140]	; (801add8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa0>)
 801ad4c:	4823      	ldr	r0, [pc, #140]	; (801addc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801ad4e:	f00a fcc7 	bl	80256e0 <__assert_func>
 801ad52:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ad54:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ad58:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801ad5c:	f7f7 fc7e 	bl	801265c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ad60:	683b      	ldr	r3, [r7, #0]
 801ad62:	4601      	mov	r1, r0
 801ad64:	4606      	mov	r6, r0
 801ad66:	4638      	mov	r0, r7
 801ad68:	68db      	ldr	r3, [r3, #12]
 801ad6a:	4798      	blx	r3
 801ad6c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ad70:	4602      	mov	r2, r0
 801ad72:	6028      	str	r0, [r5, #0]
 801ad74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ad78:	d215      	bcs.n	801ada6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801ad7a:	4643      	mov	r3, r8
 801ad7c:	4639      	mov	r1, r7
 801ad7e:	4620      	mov	r0, r4
 801ad80:	f7ff fe38 	bl	801a9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ad84:	6028      	str	r0, [r5, #0]
 801ad86:	682b      	ldr	r3, [r5, #0]
 801ad88:	b143      	cbz	r3, 801ad9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801ad8a:	7b5a      	ldrb	r2, [r3, #13]
 801ad8c:	7a9b      	ldrb	r3, [r3, #10]
 801ad8e:	0052      	lsls	r2, r2, #1
 801ad90:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ad94:	4313      	orrs	r3, r2
 801ad96:	bf0c      	ite	eq
 801ad98:	2301      	moveq	r3, #1
 801ad9a:	2300      	movne	r3, #0
 801ad9c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801ada0:	4630      	mov	r0, r6
 801ada2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ada6:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801adaa:	b29b      	uxth	r3, r3
 801adac:	2b7f      	cmp	r3, #127	; 0x7f
 801adae:	d804      	bhi.n	801adba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x82>
 801adb0:	4639      	mov	r1, r7
 801adb2:	4620      	mov	r0, r4
 801adb4:	f7ff fd04 	bl	801a7c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801adb8:	e7e4      	b.n	801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801adba:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d0e1      	beq.n	801ad86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801adc2:	f640 1302 	movw	r3, #2306	; 0x902
 801adc6:	429e      	cmp	r6, r3
 801adc8:	d1dd      	bne.n	801ad86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801adca:	4601      	mov	r1, r0
 801adcc:	4620      	mov	r0, r4
 801adce:	f7ff fcc8 	bl	801a762 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801add2:	e7d7      	b.n	801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801add4:	0802a4a0 	.word	0x0802a4a0
 801add8:	0802a712 	.word	0x0802a712
 801addc:	0802a4a9 	.word	0x0802a4a9

0801ade0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ade0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ade4:	461d      	mov	r5, r3
 801ade6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801ade8:	4604      	mov	r4, r0
 801adea:	4617      	mov	r7, r2
 801adec:	b92b      	cbnz	r3, 801adfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801adee:	4b25      	ldr	r3, [pc, #148]	; (801ae84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa4>)
 801adf0:	21c0      	movs	r1, #192	; 0xc0
 801adf2:	4a25      	ldr	r2, [pc, #148]	; (801ae88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801adf4:	4825      	ldr	r0, [pc, #148]	; (801ae8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801adf6:	f00a fc73 	bl	80256e0 <__assert_func>
 801adfa:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801adfc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ae00:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801ae04:	f7f7 fc2a 	bl	801265c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ae08:	683b      	ldr	r3, [r7, #0]
 801ae0a:	4601      	mov	r1, r0
 801ae0c:	4606      	mov	r6, r0
 801ae0e:	4638      	mov	r0, r7
 801ae10:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ae14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ae18:	47c8      	blx	r9
 801ae1a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ae1e:	4602      	mov	r2, r0
 801ae20:	6028      	str	r0, [r5, #0]
 801ae22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ae26:	d215      	bcs.n	801ae54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ae28:	4643      	mov	r3, r8
 801ae2a:	4639      	mov	r1, r7
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	f7ff fde1 	bl	801a9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ae32:	6028      	str	r0, [r5, #0]
 801ae34:	682b      	ldr	r3, [r5, #0]
 801ae36:	b143      	cbz	r3, 801ae4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801ae38:	7b5a      	ldrb	r2, [r3, #13]
 801ae3a:	7a9b      	ldrb	r3, [r3, #10]
 801ae3c:	0052      	lsls	r2, r2, #1
 801ae3e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ae42:	4313      	orrs	r3, r2
 801ae44:	bf0c      	ite	eq
 801ae46:	2301      	moveq	r3, #1
 801ae48:	2300      	movne	r3, #0
 801ae4a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801ae4e:	4630      	mov	r0, r6
 801ae50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae54:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801ae58:	b29b      	uxth	r3, r3
 801ae5a:	2b7f      	cmp	r3, #127	; 0x7f
 801ae5c:	d804      	bhi.n	801ae68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x88>
 801ae5e:	4639      	mov	r1, r7
 801ae60:	4620      	mov	r0, r4
 801ae62:	f7ff fcad 	bl	801a7c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ae66:	e7e4      	b.n	801ae32 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801ae68:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d0e1      	beq.n	801ae34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801ae70:	f640 1302 	movw	r3, #2306	; 0x902
 801ae74:	429e      	cmp	r6, r3
 801ae76:	d1dd      	bne.n	801ae34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801ae78:	4601      	mov	r1, r0
 801ae7a:	4620      	mov	r0, r4
 801ae7c:	f7ff fc71 	bl	801a762 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ae80:	e7d7      	b.n	801ae32 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801ae82:	bf00      	nop
 801ae84:	0802a4a0 	.word	0x0802a4a0
 801ae88:	0802a712 	.word	0x0802a712
 801ae8c:	0802a4a9 	.word	0x0802a4a9

0801ae90 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ae90:	b510      	push	{r4, lr}
 801ae92:	4604      	mov	r4, r0
 801ae94:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801ae96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ae98:	b9d9      	cbnz	r1, 801aed2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801ae9a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ae9c:	2b0a      	cmp	r3, #10
 801ae9e:	d036      	beq.n	801af0e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801aea0:	4620      	mov	r0, r4
 801aea2:	f7ff fc27 	bl	801a6f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801aea6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801aea8:	2b09      	cmp	r3, #9
 801aeaa:	d906      	bls.n	801aeba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801aeac:	4b18      	ldr	r3, [pc, #96]	; (801af10 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801aeae:	f44f 7182 	mov.w	r1, #260	; 0x104
 801aeb2:	4a18      	ldr	r2, [pc, #96]	; (801af14 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801aeb4:	4818      	ldr	r0, [pc, #96]	; (801af18 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801aeb6:	f00a fc13 	bl	80256e0 <__assert_func>
 801aeba:	1c5a      	adds	r2, r3, #1
 801aebc:	8622      	strh	r2, [r4, #48]	; 0x30
 801aebe:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801aec0:	4413      	add	r3, r2
 801aec2:	b29b      	uxth	r3, r3
 801aec4:	2b09      	cmp	r3, #9
 801aec6:	bf88      	it	hi
 801aec8:	3b0a      	subhi	r3, #10
 801aeca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aece:	8358      	strh	r0, [r3, #26]
 801aed0:	e7e3      	b.n	801ae9a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801aed2:	2b0a      	cmp	r3, #10
 801aed4:	d01b      	beq.n	801af0e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801aed6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801aed8:	3901      	subs	r1, #1
 801aeda:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801aede:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801aee0:	8721      	strh	r1, [r4, #56]	; 0x38
 801aee2:	1c51      	adds	r1, r2, #1
 801aee4:	b289      	uxth	r1, r1
 801aee6:	2901      	cmp	r1, #1
 801aee8:	bf8a      	itet	hi
 801aeea:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801aeee:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801aef0:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801aef2:	2b09      	cmp	r3, #9
 801aef4:	d8da      	bhi.n	801aeac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801aef6:	1c5a      	adds	r2, r3, #1
 801aef8:	8622      	strh	r2, [r4, #48]	; 0x30
 801aefa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801aefc:	4413      	add	r3, r2
 801aefe:	b29b      	uxth	r3, r3
 801af00:	2b09      	cmp	r3, #9
 801af02:	bf88      	it	hi
 801af04:	3b0a      	subhi	r3, #10
 801af06:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801af0a:	8358      	strh	r0, [r3, #26]
 801af0c:	e7c2      	b.n	801ae94 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801af0e:	bd10      	pop	{r4, pc}
 801af10:	0802a4d5 	.word	0x0802a4d5
 801af14:	0802a868 	.word	0x0802a868
 801af18:	0802a4a9 	.word	0x0802a4a9

0801af1c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801af1c:	b538      	push	{r3, r4, r5, lr}
 801af1e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801af20:	4604      	mov	r4, r0
 801af22:	b92a      	cbnz	r2, 801af30 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801af24:	4b13      	ldr	r3, [pc, #76]	; (801af74 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801af26:	21d5      	movs	r1, #213	; 0xd5
 801af28:	4a13      	ldr	r2, [pc, #76]	; (801af78 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801af2a:	4814      	ldr	r0, [pc, #80]	; (801af7c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801af2c:	f00a fbd8 	bl	80256e0 <__assert_func>
 801af30:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801af32:	3a01      	subs	r2, #1
 801af34:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801af38:	8b4d      	ldrh	r5, [r1, #26]
 801af3a:	8602      	strh	r2, [r0, #48]	; 0x30
 801af3c:	1c5a      	adds	r2, r3, #1
 801af3e:	b292      	uxth	r2, r2
 801af40:	2a09      	cmp	r2, #9
 801af42:	bf8a      	itet	hi
 801af44:	3b09      	subhi	r3, #9
 801af46:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801af48:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801af4a:	f7ff ffa1 	bl	801ae90 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801af4e:	8b23      	ldrh	r3, [r4, #24]
 801af50:	2b01      	cmp	r3, #1
 801af52:	bf9c      	itt	ls
 801af54:	3301      	addls	r3, #1
 801af56:	8323      	strhls	r3, [r4, #24]
 801af58:	8ae3      	ldrh	r3, [r4, #22]
 801af5a:	b90b      	cbnz	r3, 801af60 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801af5c:	2302      	movs	r3, #2
 801af5e:	82e3      	strh	r3, [r4, #22]
 801af60:	8ae3      	ldrh	r3, [r4, #22]
 801af62:	4628      	mov	r0, r5
 801af64:	3b01      	subs	r3, #1
 801af66:	b29b      	uxth	r3, r3
 801af68:	82e3      	strh	r3, [r4, #22]
 801af6a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801af6e:	8265      	strh	r5, [r4, #18]
 801af70:	bd38      	pop	{r3, r4, r5, pc}
 801af72:	bf00      	nop
 801af74:	0802a4a0 	.word	0x0802a4a0
 801af78:	0802a7bd 	.word	0x0802a7bd
 801af7c:	0802a4a9 	.word	0x0802a4a9

0801af80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801af80:	428a      	cmp	r2, r1
 801af82:	b538      	push	{r3, r4, r5, lr}
 801af84:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801af86:	d90c      	bls.n	801afa2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801af88:	b92c      	cbnz	r4, 801af96 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801af8a:	4b1c      	ldr	r3, [pc, #112]	; (801affc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801af8c:	21e1      	movs	r1, #225	; 0xe1
 801af8e:	4a1c      	ldr	r2, [pc, #112]	; (801b000 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801af90:	481c      	ldr	r0, [pc, #112]	; (801b004 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801af92:	f00a fba5 	bl	80256e0 <__assert_func>
 801af96:	3c01      	subs	r4, #1
 801af98:	4b1b      	ldr	r3, [pc, #108]	; (801b008 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801af9a:	4a1c      	ldr	r2, [pc, #112]	; (801b00c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801af9c:	21c5      	movs	r1, #197	; 0xc5
 801af9e:	8604      	strh	r4, [r0, #48]	; 0x30
 801afa0:	e7f6      	b.n	801af90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801afa2:	428c      	cmp	r4, r1
 801afa4:	d203      	bcs.n	801afae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801afa6:	4b1a      	ldr	r3, [pc, #104]	; (801b010 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801afa8:	21cb      	movs	r1, #203	; 0xcb
 801afaa:	4a1a      	ldr	r2, [pc, #104]	; (801b014 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801afac:	e7f0      	b.n	801af90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801afae:	1a64      	subs	r4, r4, r1
 801afb0:	250a      	movs	r5, #10
 801afb2:	8604      	strh	r4, [r0, #48]	; 0x30
 801afb4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801afb6:	4421      	add	r1, r4
 801afb8:	b289      	uxth	r1, r1
 801afba:	2909      	cmp	r1, #9
 801afbc:	bf88      	it	hi
 801afbe:	390a      	subhi	r1, #10
 801afc0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801afc2:	b1ba      	cbz	r2, 801aff4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801afc4:	3a01      	subs	r2, #1
 801afc6:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801afc8:	b292      	uxth	r2, r2
 801afca:	2909      	cmp	r1, #9
 801afcc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801afd0:	d903      	bls.n	801afda <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801afd2:	4b11      	ldr	r3, [pc, #68]	; (801b018 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801afd4:	21e6      	movs	r1, #230	; 0xe6
 801afd6:	4a11      	ldr	r2, [pc, #68]	; (801b01c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801afd8:	e7da      	b.n	801af90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801afda:	3101      	adds	r1, #1
 801afdc:	8601      	strh	r1, [r0, #48]	; 0x30
 801afde:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801afe0:	b901      	cbnz	r1, 801afe4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801afe2:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801afe4:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801afe6:	3901      	subs	r1, #1
 801afe8:	b289      	uxth	r1, r1
 801afea:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801afec:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801aff0:	834c      	strh	r4, [r1, #26]
 801aff2:	e7e6      	b.n	801afc2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801aff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aff8:	f7ff bf4a 	b.w	801ae90 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801affc:	0802a4a0 	.word	0x0802a4a0
 801b000:	0802a596 	.word	0x0802a596
 801b004:	0802a4a9 	.word	0x0802a4a9
 801b008:	0802a4e1 	.word	0x0802a4e1
 801b00c:	0802a640 	.word	0x0802a640
 801b010:	0802a4ef 	.word	0x0802a4ef
 801b014:	0802a917 	.word	0x0802a917
 801b018:	0802a4fb 	.word	0x0802a4fb
 801b01c:	0802a50e 	.word	0x0802a50e

0801b020 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b020:	3a01      	subs	r2, #1
 801b022:	b570      	push	{r4, r5, r6, lr}
 801b024:	b292      	uxth	r2, r2
 801b026:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b02a:	42b2      	cmp	r2, r6
 801b02c:	d019      	beq.n	801b062 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801b02e:	8b04      	ldrh	r4, [r0, #24]
 801b030:	f831 5b02 	ldrh.w	r5, [r1], #2
 801b034:	4294      	cmp	r4, r2
 801b036:	d805      	bhi.n	801b044 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801b038:	4b19      	ldr	r3, [pc, #100]	; (801b0a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b03a:	4a1a      	ldr	r2, [pc, #104]	; (801b0a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801b03c:	21c5      	movs	r1, #197	; 0xc5
 801b03e:	481a      	ldr	r0, [pc, #104]	; (801b0a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801b040:	f00a fb4e 	bl	80256e0 <__assert_func>
 801b044:	8ac4      	ldrh	r4, [r0, #22]
 801b046:	4414      	add	r4, r2
 801b048:	3a01      	subs	r2, #1
 801b04a:	b2a4      	uxth	r4, r4
 801b04c:	b292      	uxth	r2, r2
 801b04e:	2c01      	cmp	r4, #1
 801b050:	bf88      	it	hi
 801b052:	3c02      	subhi	r4, #2
 801b054:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b058:	8a64      	ldrh	r4, [r4, #18]
 801b05a:	42ac      	cmp	r4, r5
 801b05c:	d0e5      	beq.n	801b02a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801b05e:	2000      	movs	r0, #0
 801b060:	bd70      	pop	{r4, r5, r6, pc}
 801b062:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b066:	2400      	movs	r4, #0
 801b068:	4413      	add	r3, r2
 801b06a:	b2a2      	uxth	r2, r4
 801b06c:	429a      	cmp	r2, r3
 801b06e:	da14      	bge.n	801b09a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801b070:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801b072:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b076:	4296      	cmp	r6, r2
 801b078:	d802      	bhi.n	801b080 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801b07a:	4b09      	ldr	r3, [pc, #36]	; (801b0a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b07c:	4a0b      	ldr	r2, [pc, #44]	; (801b0ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801b07e:	e7dd      	b.n	801b03c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801b080:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801b082:	3401      	adds	r4, #1
 801b084:	4432      	add	r2, r6
 801b086:	b292      	uxth	r2, r2
 801b088:	2a09      	cmp	r2, #9
 801b08a:	bf88      	it	hi
 801b08c:	3a0a      	subhi	r2, #10
 801b08e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b092:	8b52      	ldrh	r2, [r2, #26]
 801b094:	42aa      	cmp	r2, r5
 801b096:	d0e8      	beq.n	801b06a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801b098:	e7e1      	b.n	801b05e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801b09a:	2001      	movs	r0, #1
 801b09c:	e7e0      	b.n	801b060 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801b09e:	bf00      	nop
 801b0a0:	0802a4e1 	.word	0x0802a4e1
 801b0a4:	0802a99b 	.word	0x0802a99b
 801b0a8:	0802a4a9 	.word	0x0802a4a9
 801b0ac:	0802a640 	.word	0x0802a640

0801b0b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b0b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0b4:	4605      	mov	r5, r0
 801b0b6:	4616      	mov	r6, r2
 801b0b8:	1c8c      	adds	r4, r1, #2
 801b0ba:	8809      	ldrh	r1, [r1, #0]
 801b0bc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b0c0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b0c4:	42b3      	cmp	r3, r6
 801b0c6:	d124      	bne.n	801b112 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b0c8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b0cc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b0d0:	f001 070f 	and.w	r7, r1, #15
 801b0d4:	4652      	mov	r2, sl
 801b0d6:	f8cd 8000 	str.w	r8, [sp]
 801b0da:	464b      	mov	r3, r9
 801b0dc:	4621      	mov	r1, r4
 801b0de:	4628      	mov	r0, r5
 801b0e0:	f7ff ff9e 	bl	801b020 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b0e4:	4683      	mov	fp, r0
 801b0e6:	b168      	cbz	r0, 801b104 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b0e8:	eb0a 0109 	add.w	r1, sl, r9
 801b0ec:	463a      	mov	r2, r7
 801b0ee:	4628      	mov	r0, r5
 801b0f0:	4441      	add	r1, r8
 801b0f2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b0f6:	4649      	mov	r1, r9
 801b0f8:	f7ff ff42 	bl	801af80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b0fc:	4658      	mov	r0, fp
 801b0fe:	b003      	add	sp, #12
 801b100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b104:	eb07 010a 	add.w	r1, r7, sl
 801b108:	4449      	add	r1, r9
 801b10a:	4441      	add	r1, r8
 801b10c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b110:	e7d2      	b.n	801b0b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b112:	f04f 0b00 	mov.w	fp, #0
 801b116:	e7f1      	b.n	801b0fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b118 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b118:	b570      	push	{r4, r5, r6, lr}
 801b11a:	8810      	ldrh	r0, [r2, #0]
 801b11c:	4298      	cmp	r0, r3
 801b11e:	d817      	bhi.n	801b150 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b120:	1e48      	subs	r0, r1, #1
 801b122:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b126:	4298      	cmp	r0, r3
 801b128:	d312      	bcc.n	801b150 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b12a:	2400      	movs	r4, #0
 801b12c:	428c      	cmp	r4, r1
 801b12e:	d20f      	bcs.n	801b150 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b130:	1860      	adds	r0, r4, r1
 801b132:	1040      	asrs	r0, r0, #1
 801b134:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b138:	0085      	lsls	r5, r0, #2
 801b13a:	42b3      	cmp	r3, r6
 801b13c:	d902      	bls.n	801b144 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b13e:	3001      	adds	r0, #1
 801b140:	b284      	uxth	r4, r0
 801b142:	e7f3      	b.n	801b12c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b144:	d201      	bcs.n	801b14a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b146:	b281      	uxth	r1, r0
 801b148:	e7f0      	b.n	801b12c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b14a:	442a      	add	r2, r5
 801b14c:	8850      	ldrh	r0, [r2, #2]
 801b14e:	bd70      	pop	{r4, r5, r6, pc}
 801b150:	2000      	movs	r0, #0
 801b152:	e7fc      	b.n	801b14e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b154 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b158:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801b15a:	4604      	mov	r4, r0
 801b15c:	260b      	movs	r6, #11
 801b15e:	886f      	ldrh	r7, [r5, #2]
 801b160:	087f      	lsrs	r7, r7, #1
 801b162:	3e01      	subs	r6, #1
 801b164:	d01b      	beq.n	801b19e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b166:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b168:	b92b      	cbnz	r3, 801b176 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801b16a:	4b0e      	ldr	r3, [pc, #56]	; (801b1a4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801b16c:	21c0      	movs	r1, #192	; 0xc0
 801b16e:	4a0e      	ldr	r2, [pc, #56]	; (801b1a8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801b170:	480e      	ldr	r0, [pc, #56]	; (801b1ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801b172:	f00a fab5 	bl	80256e0 <__assert_func>
 801b176:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b178:	462a      	mov	r2, r5
 801b17a:	4639      	mov	r1, r7
 801b17c:	4620      	mov	r0, r4
 801b17e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b182:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b186:	4643      	mov	r3, r8
 801b188:	f7ff ffc6 	bl	801b118 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b18c:	b138      	cbz	r0, 801b19e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b18e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b192:	4642      	mov	r2, r8
 801b194:	4620      	mov	r0, r4
 801b196:	f7ff ff8b 	bl	801b0b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b19a:	2800      	cmp	r0, #0
 801b19c:	d1e1      	bne.n	801b162 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1a2:	bf00      	nop
 801b1a4:	0802a4a0 	.word	0x0802a4a0
 801b1a8:	0802a712 	.word	0x0802a712
 801b1ac:	0802a4a9 	.word	0x0802a4a9

0801b1b0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b1b0:	4602      	mov	r2, r0
 801b1b2:	b148      	cbz	r0, 801b1c8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	b298      	uxth	r0, r3
 801b1b8:	3301      	adds	r3, #1
 801b1ba:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b1be:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b1c2:	2900      	cmp	r1, #0
 801b1c4:	d1f7      	bne.n	801b1b6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b1c6:	4770      	bx	lr
 801b1c8:	4770      	bx	lr

0801b1ca <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b1ca:	b530      	push	{r4, r5, lr}
 801b1cc:	4604      	mov	r4, r0
 801b1ce:	b159      	cbz	r1, 801b1e8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b1d0:	b148      	cbz	r0, 801b1e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	b298      	uxth	r0, r3
 801b1d6:	4282      	cmp	r2, r0
 801b1d8:	d905      	bls.n	801b1e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b1da:	5ccd      	ldrb	r5, [r1, r3]
 801b1dc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b1e0:	3301      	adds	r3, #1
 801b1e2:	2d00      	cmp	r5, #0
 801b1e4:	d1f6      	bne.n	801b1d4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b1e6:	bd30      	pop	{r4, r5, pc}
 801b1e8:	4608      	mov	r0, r1
 801b1ea:	e7fc      	b.n	801b1e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b1ec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801b1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1ee:	468c      	mov	ip, r1
 801b1f0:	b08b      	sub	sp, #44	; 0x2c
 801b1f2:	2100      	movs	r1, #0
 801b1f4:	ae01      	add	r6, sp, #4
 801b1f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b1fa:	211f      	movs	r1, #31
 801b1fc:	fbb0 f7f3 	udiv	r7, r0, r3
 801b200:	fb03 0517 	mls	r5, r3, r7, r0
 801b204:	4638      	mov	r0, r7
 801b206:	b2ec      	uxtb	r4, r5
 801b208:	2d09      	cmp	r5, #9
 801b20a:	bfd4      	ite	le
 801b20c:	3430      	addle	r4, #48	; 0x30
 801b20e:	3457      	addgt	r4, #87	; 0x57
 801b210:	b2e4      	uxtb	r4, r4
 801b212:	558c      	strb	r4, [r1, r6]
 801b214:	1e4c      	subs	r4, r1, #1
 801b216:	b92f      	cbnz	r7, 801b224 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801b218:	4431      	add	r1, r6
 801b21a:	4660      	mov	r0, ip
 801b21c:	f7ff ffd5 	bl	801b1ca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b220:	b00b      	add	sp, #44	; 0x2c
 801b222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b224:	4621      	mov	r1, r4
 801b226:	e7e9      	b.n	801b1fc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801b228 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b22a:	4607      	mov	r7, r0
 801b22c:	b08b      	sub	sp, #44	; 0x2c
 801b22e:	4608      	mov	r0, r1
 801b230:	b341      	cbz	r1, 801b284 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b232:	1e99      	subs	r1, r3, #2
 801b234:	290e      	cmp	r1, #14
 801b236:	d825      	bhi.n	801b284 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b238:	2100      	movs	r1, #0
 801b23a:	463c      	mov	r4, r7
 801b23c:	261f      	movs	r6, #31
 801b23e:	f10d 0c04 	add.w	ip, sp, #4
 801b242:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b246:	1e71      	subs	r1, r6, #1
 801b248:	fb94 fef3 	sdiv	lr, r4, r3
 801b24c:	fb03 441e 	mls	r4, r3, lr, r4
 801b250:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b254:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b258:	b2ec      	uxtb	r4, r5
 801b25a:	2d09      	cmp	r5, #9
 801b25c:	bfd4      	ite	le
 801b25e:	3430      	addle	r4, #48	; 0x30
 801b260:	3457      	addgt	r4, #87	; 0x57
 801b262:	b2e4      	uxtb	r4, r4
 801b264:	f80c 4006 	strb.w	r4, [ip, r6]
 801b268:	4674      	mov	r4, lr
 801b26a:	b96c      	cbnz	r4, 801b288 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801b26c:	2f00      	cmp	r7, #0
 801b26e:	da05      	bge.n	801b27c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801b270:	ab0a      	add	r3, sp, #40	; 0x28
 801b272:	4419      	add	r1, r3
 801b274:	232d      	movs	r3, #45	; 0x2d
 801b276:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b27a:	1eb1      	subs	r1, r6, #2
 801b27c:	3101      	adds	r1, #1
 801b27e:	4461      	add	r1, ip
 801b280:	f7ff ffa3 	bl	801b1ca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b284:	b00b      	add	sp, #44	; 0x2c
 801b286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b288:	460e      	mov	r6, r1
 801b28a:	e7dc      	b.n	801b246 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801b28c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801b28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b290:	b085      	sub	sp, #20
 801b292:	4691      	mov	r9, r2
 801b294:	6802      	ldr	r2, [r0, #0]
 801b296:	4688      	mov	r8, r1
 801b298:	461c      	mov	r4, r3
 801b29a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801b29e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b2a2:	4683      	mov	fp, r0
 801b2a4:	4610      	mov	r0, r2
 801b2a6:	9103      	str	r1, [sp, #12]
 801b2a8:	9302      	str	r3, [sp, #8]
 801b2aa:	9201      	str	r2, [sp, #4]
 801b2ac:	f7ff ff80 	bl	801b1b0 <_ZN8touchgfx7Unicode6strlenEPKt>
 801b2b0:	f1b8 0f00 	cmp.w	r8, #0
 801b2b4:	bf0c      	ite	eq
 801b2b6:	4684      	moveq	ip, r0
 801b2b8:	f100 0c01 	addne.w	ip, r0, #1
 801b2bc:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801b2c0:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801b2c4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b2c6:	fa1f fc8c 	uxth.w	ip, ip
 801b2ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b2cc:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801b2d0:	9903      	ldr	r1, [sp, #12]
 801b2d2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b2d6:	d041      	beq.n	801b35c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b2d8:	d834      	bhi.n	801b344 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801b2da:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801b2de:	d059      	beq.n	801b394 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801b2e0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801b2e4:	d03a      	beq.n	801b35c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b2e6:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801b2ea:	d034      	beq.n	801b356 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b2ec:	2400      	movs	r4, #0
 801b2ee:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b2f2:	3a01      	subs	r2, #1
 801b2f4:	b169      	cbz	r1, 801b312 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b2f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b2f8:	458c      	cmp	ip, r1
 801b2fa:	da09      	bge.n	801b310 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b2fc:	eba1 010c 	sub.w	r1, r1, ip
 801b300:	b289      	uxth	r1, r1
 801b302:	b933      	cbnz	r3, 801b312 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b304:	2e00      	cmp	r6, #0
 801b306:	d051      	beq.n	801b3ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b308:	2800      	cmp	r0, #0
 801b30a:	d04f      	beq.n	801b3ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b30c:	440c      	add	r4, r1
 801b30e:	b2a4      	uxth	r4, r4
 801b310:	2100      	movs	r1, #0
 801b312:	682b      	ldr	r3, [r5, #0]
 801b314:	4293      	cmp	r3, r2
 801b316:	da07      	bge.n	801b328 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b318:	f1b8 0f00 	cmp.w	r8, #0
 801b31c:	d004      	beq.n	801b328 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b31e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801b322:	682b      	ldr	r3, [r5, #0]
 801b324:	3301      	adds	r3, #1
 801b326:	602b      	str	r3, [r5, #0]
 801b328:	2730      	movs	r7, #48	; 0x30
 801b32a:	2c00      	cmp	r4, #0
 801b32c:	d04e      	beq.n	801b3cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b32e:	682e      	ldr	r6, [r5, #0]
 801b330:	3c01      	subs	r4, #1
 801b332:	42b2      	cmp	r2, r6
 801b334:	b2a4      	uxth	r4, r4
 801b336:	dd49      	ble.n	801b3cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b338:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b33c:	682b      	ldr	r3, [r5, #0]
 801b33e:	3301      	adds	r3, #1
 801b340:	602b      	str	r3, [r5, #0]
 801b342:	e7f2      	b.n	801b32a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801b344:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801b348:	d01d      	beq.n	801b386 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801b34a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801b34e:	d002      	beq.n	801b356 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b350:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801b354:	e7c9      	b.n	801b2ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801b356:	4684      	mov	ip, r0
 801b358:	f04f 0800 	mov.w	r8, #0
 801b35c:	2c00      	cmp	r4, #0
 801b35e:	d0c6      	beq.n	801b2ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b360:	b947      	cbnz	r7, 801b374 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b362:	2801      	cmp	r0, #1
 801b364:	d106      	bne.n	801b374 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b366:	8814      	ldrh	r4, [r2, #0]
 801b368:	2c30      	cmp	r4, #48	; 0x30
 801b36a:	bf02      	ittt	eq
 801b36c:	3202      	addeq	r2, #2
 801b36e:	4638      	moveq	r0, r7
 801b370:	f8cb 2000 	streq.w	r2, [fp]
 801b374:	45bc      	cmp	ip, r7
 801b376:	da14      	bge.n	801b3a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801b378:	b2bf      	uxth	r7, r7
 801b37a:	eba7 040c 	sub.w	r4, r7, ip
 801b37e:	46bc      	mov	ip, r7
 801b380:	b2a4      	uxth	r4, r4
 801b382:	2600      	movs	r6, #0
 801b384:	e7b3      	b.n	801b2ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b386:	4684      	mov	ip, r0
 801b388:	b16c      	cbz	r4, 801b3a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801b38a:	42b8      	cmp	r0, r7
 801b38c:	dd00      	ble.n	801b390 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801b38e:	b2b8      	uxth	r0, r7
 801b390:	2400      	movs	r4, #0
 801b392:	e003      	b.n	801b39c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801b394:	f04f 0c01 	mov.w	ip, #1
 801b398:	2400      	movs	r4, #0
 801b39a:	4660      	mov	r0, ip
 801b39c:	4626      	mov	r6, r4
 801b39e:	46a0      	mov	r8, r4
 801b3a0:	e7a5      	b.n	801b2ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b3a2:	2400      	movs	r4, #0
 801b3a4:	e7ed      	b.n	801b382 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801b3a6:	4626      	mov	r6, r4
 801b3a8:	46a0      	mov	r8, r4
 801b3aa:	e7a0      	b.n	801b2ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b3ac:	2900      	cmp	r1, #0
 801b3ae:	d0b0      	beq.n	801b312 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b3b0:	2720      	movs	r7, #32
 801b3b2:	682e      	ldr	r6, [r5, #0]
 801b3b4:	2900      	cmp	r1, #0
 801b3b6:	d0ac      	beq.n	801b312 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b3b8:	3901      	subs	r1, #1
 801b3ba:	4296      	cmp	r6, r2
 801b3bc:	b289      	uxth	r1, r1
 801b3be:	daa7      	bge.n	801b310 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b3c0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b3c4:	682b      	ldr	r3, [r5, #0]
 801b3c6:	3301      	adds	r3, #1
 801b3c8:	602b      	str	r3, [r5, #0]
 801b3ca:	e7f2      	b.n	801b3b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801b3cc:	b188      	cbz	r0, 801b3f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b3ce:	682b      	ldr	r3, [r5, #0]
 801b3d0:	3801      	subs	r0, #1
 801b3d2:	429a      	cmp	r2, r3
 801b3d4:	b280      	uxth	r0, r0
 801b3d6:	dd0c      	ble.n	801b3f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b3d8:	f8db 3000 	ldr.w	r3, [fp]
 801b3dc:	1c9c      	adds	r4, r3, #2
 801b3de:	f8cb 4000 	str.w	r4, [fp]
 801b3e2:	881c      	ldrh	r4, [r3, #0]
 801b3e4:	682b      	ldr	r3, [r5, #0]
 801b3e6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801b3ea:	682b      	ldr	r3, [r5, #0]
 801b3ec:	3301      	adds	r3, #1
 801b3ee:	602b      	str	r3, [r5, #0]
 801b3f0:	e7ec      	b.n	801b3cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b3f2:	2620      	movs	r6, #32
 801b3f4:	b151      	cbz	r1, 801b40c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b3f6:	6828      	ldr	r0, [r5, #0]
 801b3f8:	3901      	subs	r1, #1
 801b3fa:	4282      	cmp	r2, r0
 801b3fc:	b289      	uxth	r1, r1
 801b3fe:	dd05      	ble.n	801b40c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b400:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801b404:	682b      	ldr	r3, [r5, #0]
 801b406:	3301      	adds	r3, #1
 801b408:	602b      	str	r3, [r5, #0]
 801b40a:	e7f3      	b.n	801b3f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801b40c:	b005      	add	sp, #20
 801b40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b412 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801b412:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b416:	2400      	movs	r4, #0
 801b418:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801b41c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801b420:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801b424:	8014      	strh	r4, [r2, #0]
 801b426:	701c      	strb	r4, [r3, #0]
 801b428:	f888 4000 	strb.w	r4, [r8]
 801b42c:	f88c 4000 	strb.w	r4, [ip]
 801b430:	f88e 4000 	strb.w	r4, [lr]
 801b434:	703c      	strb	r4, [r7, #0]
 801b436:	6804      	ldr	r4, [r0, #0]
 801b438:	b1a4      	cbz	r4, 801b464 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801b43a:	8824      	ldrh	r4, [r4, #0]
 801b43c:	f04f 0901 	mov.w	r9, #1
 801b440:	b314      	cbz	r4, 801b488 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b442:	2c2b      	cmp	r4, #43	; 0x2b
 801b444:	d001      	beq.n	801b44a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801b446:	2c20      	cmp	r4, #32
 801b448:	d110      	bne.n	801b46c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801b44a:	8014      	strh	r4, [r2, #0]
 801b44c:	6804      	ldr	r4, [r0, #0]
 801b44e:	b10c      	cbz	r4, 801b454 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801b450:	3402      	adds	r4, #2
 801b452:	6004      	str	r4, [r0, #0]
 801b454:	680c      	ldr	r4, [r1, #0]
 801b456:	b10c      	cbz	r4, 801b45c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801b458:	3401      	adds	r4, #1
 801b45a:	600c      	str	r4, [r1, #0]
 801b45c:	6804      	ldr	r4, [r0, #0]
 801b45e:	b17c      	cbz	r4, 801b480 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801b460:	8824      	ldrh	r4, [r4, #0]
 801b462:	e7ed      	b.n	801b440 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b464:	680c      	ldr	r4, [r1, #0]
 801b466:	b17c      	cbz	r4, 801b488 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b468:	7824      	ldrb	r4, [r4, #0]
 801b46a:	e7e7      	b.n	801b43c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801b46c:	2c2d      	cmp	r4, #45	; 0x2d
 801b46e:	d102      	bne.n	801b476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801b470:	f883 9000 	strb.w	r9, [r3]
 801b474:	e7ea      	b.n	801b44c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b476:	2c23      	cmp	r4, #35	; 0x23
 801b478:	d107      	bne.n	801b48a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801b47a:	f888 9000 	strb.w	r9, [r8]
 801b47e:	e7e5      	b.n	801b44c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b480:	680c      	ldr	r4, [r1, #0]
 801b482:	b10c      	cbz	r4, 801b488 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b484:	7824      	ldrb	r4, [r4, #0]
 801b486:	e7db      	b.n	801b440 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b488:	2400      	movs	r4, #0
 801b48a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801b48e:	2b09      	cmp	r3, #9
 801b490:	d901      	bls.n	801b496 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801b492:	2c2a      	cmp	r4, #42	; 0x2a
 801b494:	d122      	bne.n	801b4dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b496:	2301      	movs	r3, #1
 801b498:	2c30      	cmp	r4, #48	; 0x30
 801b49a:	f88e 3000 	strb.w	r3, [lr]
 801b49e:	d10d      	bne.n	801b4bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b4a0:	f88c 3000 	strb.w	r3, [ip]
 801b4a4:	6803      	ldr	r3, [r0, #0]
 801b4a6:	b10b      	cbz	r3, 801b4ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801b4a8:	3302      	adds	r3, #2
 801b4aa:	6003      	str	r3, [r0, #0]
 801b4ac:	680b      	ldr	r3, [r1, #0]
 801b4ae:	b10b      	cbz	r3, 801b4b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801b4b0:	3301      	adds	r3, #1
 801b4b2:	600b      	str	r3, [r1, #0]
 801b4b4:	6803      	ldr	r3, [r0, #0]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d02f      	beq.n	801b51a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801b4ba:	881c      	ldrh	r4, [r3, #0]
 801b4bc:	2c2a      	cmp	r4, #42	; 0x2a
 801b4be:	d135      	bne.n	801b52c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b4c0:	f04f 33ff 	mov.w	r3, #4294967295
 801b4c4:	6033      	str	r3, [r6, #0]
 801b4c6:	6803      	ldr	r3, [r0, #0]
 801b4c8:	b10b      	cbz	r3, 801b4ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801b4ca:	3302      	adds	r3, #2
 801b4cc:	6003      	str	r3, [r0, #0]
 801b4ce:	680b      	ldr	r3, [r1, #0]
 801b4d0:	b10b      	cbz	r3, 801b4d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801b4d2:	3301      	adds	r3, #1
 801b4d4:	600b      	str	r3, [r1, #0]
 801b4d6:	6803      	ldr	r3, [r0, #0]
 801b4d8:	b31b      	cbz	r3, 801b522 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801b4da:	881c      	ldrh	r4, [r3, #0]
 801b4dc:	2c2e      	cmp	r4, #46	; 0x2e
 801b4de:	d11a      	bne.n	801b516 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b4e0:	2301      	movs	r3, #1
 801b4e2:	703b      	strb	r3, [r7, #0]
 801b4e4:	6803      	ldr	r3, [r0, #0]
 801b4e6:	b10b      	cbz	r3, 801b4ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801b4e8:	3302      	adds	r3, #2
 801b4ea:	6003      	str	r3, [r0, #0]
 801b4ec:	680b      	ldr	r3, [r1, #0]
 801b4ee:	b10b      	cbz	r3, 801b4f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801b4f0:	3301      	adds	r3, #1
 801b4f2:	600b      	str	r3, [r1, #0]
 801b4f4:	6803      	ldr	r3, [r0, #0]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d036      	beq.n	801b568 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801b4fa:	881b      	ldrh	r3, [r3, #0]
 801b4fc:	2b2a      	cmp	r3, #42	; 0x2a
 801b4fe:	d137      	bne.n	801b570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b500:	f04f 33ff 	mov.w	r3, #4294967295
 801b504:	602b      	str	r3, [r5, #0]
 801b506:	6803      	ldr	r3, [r0, #0]
 801b508:	b10b      	cbz	r3, 801b50e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801b50a:	3302      	adds	r3, #2
 801b50c:	6003      	str	r3, [r0, #0]
 801b50e:	680b      	ldr	r3, [r1, #0]
 801b510:	b10b      	cbz	r3, 801b516 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b512:	3301      	adds	r3, #1
 801b514:	600b      	str	r3, [r1, #0]
 801b516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b51a:	680c      	ldr	r4, [r1, #0]
 801b51c:	b134      	cbz	r4, 801b52c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b51e:	7824      	ldrb	r4, [r4, #0]
 801b520:	e7cc      	b.n	801b4bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b522:	680b      	ldr	r3, [r1, #0]
 801b524:	2b00      	cmp	r3, #0
 801b526:	d0f6      	beq.n	801b516 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b528:	781c      	ldrb	r4, [r3, #0]
 801b52a:	e7d7      	b.n	801b4dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b52c:	2300      	movs	r3, #0
 801b52e:	220a      	movs	r2, #10
 801b530:	6033      	str	r3, [r6, #0]
 801b532:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b536:	fa1f f38c 	uxth.w	r3, ip
 801b53a:	2b09      	cmp	r3, #9
 801b53c:	d8ce      	bhi.n	801b4dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b53e:	6833      	ldr	r3, [r6, #0]
 801b540:	fb02 c303 	mla	r3, r2, r3, ip
 801b544:	6033      	str	r3, [r6, #0]
 801b546:	6803      	ldr	r3, [r0, #0]
 801b548:	b10b      	cbz	r3, 801b54e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801b54a:	3302      	adds	r3, #2
 801b54c:	6003      	str	r3, [r0, #0]
 801b54e:	680b      	ldr	r3, [r1, #0]
 801b550:	b10b      	cbz	r3, 801b556 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801b552:	3301      	adds	r3, #1
 801b554:	600b      	str	r3, [r1, #0]
 801b556:	6803      	ldr	r3, [r0, #0]
 801b558:	b10b      	cbz	r3, 801b55e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801b55a:	881c      	ldrh	r4, [r3, #0]
 801b55c:	e7e9      	b.n	801b532 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b55e:	680c      	ldr	r4, [r1, #0]
 801b560:	2c00      	cmp	r4, #0
 801b562:	d0e6      	beq.n	801b532 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b564:	7824      	ldrb	r4, [r4, #0]
 801b566:	e7e4      	b.n	801b532 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b568:	680b      	ldr	r3, [r1, #0]
 801b56a:	b10b      	cbz	r3, 801b570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b56c:	781b      	ldrb	r3, [r3, #0]
 801b56e:	e7c5      	b.n	801b4fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801b570:	2200      	movs	r2, #0
 801b572:	240a      	movs	r4, #10
 801b574:	602a      	str	r2, [r5, #0]
 801b576:	3b30      	subs	r3, #48	; 0x30
 801b578:	682a      	ldr	r2, [r5, #0]
 801b57a:	b29e      	uxth	r6, r3
 801b57c:	2e09      	cmp	r6, #9
 801b57e:	d813      	bhi.n	801b5a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801b580:	fb04 3302 	mla	r3, r4, r2, r3
 801b584:	602b      	str	r3, [r5, #0]
 801b586:	6803      	ldr	r3, [r0, #0]
 801b588:	b10b      	cbz	r3, 801b58e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801b58a:	3302      	adds	r3, #2
 801b58c:	6003      	str	r3, [r0, #0]
 801b58e:	680b      	ldr	r3, [r1, #0]
 801b590:	b10b      	cbz	r3, 801b596 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801b592:	3301      	adds	r3, #1
 801b594:	600b      	str	r3, [r1, #0]
 801b596:	6803      	ldr	r3, [r0, #0]
 801b598:	b10b      	cbz	r3, 801b59e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801b59a:	881b      	ldrh	r3, [r3, #0]
 801b59c:	e7eb      	b.n	801b576 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b59e:	680b      	ldr	r3, [r1, #0]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d0e8      	beq.n	801b576 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b5a4:	781b      	ldrb	r3, [r3, #0]
 801b5a6:	e7e6      	b.n	801b576 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b5a8:	2a06      	cmp	r2, #6
 801b5aa:	bfa8      	it	ge
 801b5ac:	2206      	movge	r2, #6
 801b5ae:	602a      	str	r2, [r5, #0]
 801b5b0:	e7b1      	b.n	801b516 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801b5b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801b5b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5b6:	b0a3      	sub	sp, #140	; 0x8c
 801b5b8:	2600      	movs	r6, #0
 801b5ba:	4607      	mov	r7, r0
 801b5bc:	4688      	mov	r8, r1
 801b5be:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801b5c2:	4631      	mov	r1, r6
 801b5c4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801b5c6:	4648      	mov	r0, r9
 801b5c8:	960d      	str	r6, [sp, #52]	; 0x34
 801b5ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b5ce:	2242      	movs	r2, #66	; 0x42
 801b5d0:	f7fe fc6e 	bl	8019eb0 <_ZN8touchgfx6memsetEPvhm>
 801b5d4:	b15f      	cbz	r7, 801b5ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801b5d6:	f108 3aff 	add.w	sl, r8, #4294967295
 801b5da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b5dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b5de:	b152      	cbz	r2, 801b5f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801b5e0:	8812      	ldrh	r2, [r2, #0]
 801b5e2:	b10a      	cbz	r2, 801b5e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b5e4:	459a      	cmp	sl, r3
 801b5e6:	dc2e      	bgt.n	801b646 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801b5e8:	2200      	movs	r2, #0
 801b5ea:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b5ee:	4638      	mov	r0, r7
 801b5f0:	b023      	add	sp, #140	; 0x8c
 801b5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5f6:	9a08      	ldr	r2, [sp, #32]
 801b5f8:	2a00      	cmp	r2, #0
 801b5fa:	d0f5      	beq.n	801b5e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b5fc:	7812      	ldrb	r2, [r2, #0]
 801b5fe:	e7f0      	b.n	801b5e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801b600:	2d00      	cmp	r5, #0
 801b602:	d0ea      	beq.n	801b5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b604:	782a      	ldrb	r2, [r5, #0]
 801b606:	b142      	cbz	r2, 801b61a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801b608:	2a25      	cmp	r2, #37	; 0x25
 801b60a:	d001      	beq.n	801b610 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801b60c:	459a      	cmp	sl, r3
 801b60e:	dc08      	bgt.n	801b622 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801b610:	f1bb 0f00 	cmp.w	fp, #0
 801b614:	d121      	bne.n	801b65a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801b616:	2d00      	cmp	r5, #0
 801b618:	d0df      	beq.n	801b5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b61a:	782a      	ldrb	r2, [r5, #0]
 801b61c:	f04f 0b00 	mov.w	fp, #0
 801b620:	e01d      	b.n	801b65e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801b622:	f1bb 0f00 	cmp.w	fp, #0
 801b626:	d077      	beq.n	801b718 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801b628:	f8bb 2000 	ldrh.w	r2, [fp]
 801b62c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b630:	f1bb 0f00 	cmp.w	fp, #0
 801b634:	d002      	beq.n	801b63c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801b636:	f10b 0202 	add.w	r2, fp, #2
 801b63a:	9209      	str	r2, [sp, #36]	; 0x24
 801b63c:	b10d      	cbz	r5, 801b642 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801b63e:	3501      	adds	r5, #1
 801b640:	9508      	str	r5, [sp, #32]
 801b642:	3301      	adds	r3, #1
 801b644:	930d      	str	r3, [sp, #52]	; 0x34
 801b646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b648:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801b64c:	f1bb 0f00 	cmp.w	fp, #0
 801b650:	d0d6      	beq.n	801b600 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801b652:	f8bb 2000 	ldrh.w	r2, [fp]
 801b656:	2a00      	cmp	r2, #0
 801b658:	d1d6      	bne.n	801b608 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801b65a:	f8bb 2000 	ldrh.w	r2, [fp]
 801b65e:	2a00      	cmp	r2, #0
 801b660:	d0bb      	beq.n	801b5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b662:	459a      	cmp	sl, r3
 801b664:	ddb9      	ble.n	801b5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b666:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801b66a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801b66e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801b672:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801b676:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801b67a:	960e      	str	r6, [sp, #56]	; 0x38
 801b67c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801b680:	960f      	str	r6, [sp, #60]	; 0x3c
 801b682:	f1bb 0f00 	cmp.w	fp, #0
 801b686:	d002      	beq.n	801b68e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801b688:	f10b 0302 	add.w	r3, fp, #2
 801b68c:	9309      	str	r3, [sp, #36]	; 0x24
 801b68e:	b10d      	cbz	r5, 801b694 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801b690:	1c6b      	adds	r3, r5, #1
 801b692:	9308      	str	r3, [sp, #32]
 801b694:	ab0f      	add	r3, sp, #60	; 0x3c
 801b696:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801b69a:	a908      	add	r1, sp, #32
 801b69c:	a809      	add	r0, sp, #36	; 0x24
 801b69e:	9305      	str	r3, [sp, #20]
 801b6a0:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801b6a4:	9304      	str	r3, [sp, #16]
 801b6a6:	ab0e      	add	r3, sp, #56	; 0x38
 801b6a8:	9303      	str	r3, [sp, #12]
 801b6aa:	ab0c      	add	r3, sp, #48	; 0x30
 801b6ac:	9302      	str	r3, [sp, #8]
 801b6ae:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801b6b2:	9301      	str	r3, [sp, #4]
 801b6b4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801b6b8:	9300      	str	r3, [sp, #0]
 801b6ba:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801b6be:	f7ff fea8 	bl	801b412 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801b6c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	bfbf      	itttt	lt
 801b6c8:	6823      	ldrlt	r3, [r4, #0]
 801b6ca:	3404      	addlt	r4, #4
 801b6cc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b6d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b6d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	bfbe      	ittt	lt
 801b6d8:	6823      	ldrlt	r3, [r4, #0]
 801b6da:	3404      	addlt	r4, #4
 801b6dc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b6e0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801b6e4:	bfb8      	it	lt
 801b6e6:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801b6e8:	b1d9      	cbz	r1, 801b722 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801b6ea:	880b      	ldrh	r3, [r1, #0]
 801b6ec:	2b69      	cmp	r3, #105	; 0x69
 801b6ee:	d01f      	beq.n	801b730 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b6f0:	d82f      	bhi.n	801b752 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801b6f2:	2b58      	cmp	r3, #88	; 0x58
 801b6f4:	d01c      	beq.n	801b730 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b6f6:	d818      	bhi.n	801b72a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801b6f8:	2b25      	cmp	r3, #37	; 0x25
 801b6fa:	d034      	beq.n	801b766 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801b6fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b6fe:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801b702:	f1bb 0f00 	cmp.w	fp, #0
 801b706:	f000 80b7 	beq.w	801b878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801b70a:	f8bb 5000 	ldrh.w	r5, [fp]
 801b70e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801b712:	3301      	adds	r3, #1
 801b714:	930d      	str	r3, [sp, #52]	; 0x34
 801b716:	e029      	b.n	801b76c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b718:	b10d      	cbz	r5, 801b71e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801b71a:	782a      	ldrb	r2, [r5, #0]
 801b71c:	e786      	b.n	801b62c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b71e:	462a      	mov	r2, r5
 801b720:	e784      	b.n	801b62c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b722:	2a00      	cmp	r2, #0
 801b724:	d0ea      	beq.n	801b6fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b726:	7813      	ldrb	r3, [r2, #0]
 801b728:	e7e0      	b.n	801b6ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801b72a:	3b63      	subs	r3, #99	; 0x63
 801b72c:	2b01      	cmp	r3, #1
 801b72e:	d8e5      	bhi.n	801b6fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b730:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801b734:	b329      	cbz	r1, 801b782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801b736:	880b      	ldrh	r3, [r1, #0]
 801b738:	2b69      	cmp	r3, #105	; 0x69
 801b73a:	d063      	beq.n	801b804 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b73c:	d825      	bhi.n	801b78a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801b73e:	2b63      	cmp	r3, #99	; 0x63
 801b740:	d038      	beq.n	801b7b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801b742:	2b64      	cmp	r3, #100	; 0x64
 801b744:	d05e      	beq.n	801b804 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b746:	2b58      	cmp	r3, #88	; 0x58
 801b748:	d07a      	beq.n	801b840 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801b74a:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801b74e:	4625      	mov	r5, r4
 801b750:	e036      	b.n	801b7c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b752:	2b73      	cmp	r3, #115	; 0x73
 801b754:	d0ec      	beq.n	801b730 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b756:	d802      	bhi.n	801b75e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801b758:	2b6f      	cmp	r3, #111	; 0x6f
 801b75a:	d1cf      	bne.n	801b6fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b75c:	e7e8      	b.n	801b730 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b75e:	2b75      	cmp	r3, #117	; 0x75
 801b760:	d0e6      	beq.n	801b730 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b762:	2b78      	cmp	r3, #120	; 0x78
 801b764:	e7f9      	b.n	801b75a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801b766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b768:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801b76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b76e:	b10b      	cbz	r3, 801b774 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801b770:	3302      	adds	r3, #2
 801b772:	9309      	str	r3, [sp, #36]	; 0x24
 801b774:	9b08      	ldr	r3, [sp, #32]
 801b776:	2b00      	cmp	r3, #0
 801b778:	f43f af2f 	beq.w	801b5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b77c:	3301      	adds	r3, #1
 801b77e:	9308      	str	r3, [sp, #32]
 801b780:	e72b      	b.n	801b5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b782:	2a00      	cmp	r2, #0
 801b784:	d0e1      	beq.n	801b74a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b786:	7813      	ldrb	r3, [r2, #0]
 801b788:	e7d6      	b.n	801b738 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801b78a:	2b73      	cmp	r3, #115	; 0x73
 801b78c:	d036      	beq.n	801b7fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801b78e:	d807      	bhi.n	801b7a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801b790:	2b6f      	cmp	r3, #111	; 0x6f
 801b792:	d1da      	bne.n	801b74a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b794:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b796:	1d25      	adds	r5, r4, #4
 801b798:	2308      	movs	r3, #8
 801b79a:	eba8 0202 	sub.w	r2, r8, r2
 801b79e:	e049      	b.n	801b834 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b7a0:	2b75      	cmp	r3, #117	; 0x75
 801b7a2:	d042      	beq.n	801b82a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801b7a4:	2b78      	cmp	r3, #120	; 0x78
 801b7a6:	d1d0      	bne.n	801b74a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b7a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b7aa:	1d25      	adds	r5, r4, #4
 801b7ac:	2310      	movs	r3, #16
 801b7ae:	eba8 0202 	sub.w	r2, r8, r2
 801b7b2:	e03f      	b.n	801b834 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b7b4:	7823      	ldrb	r3, [r4, #0]
 801b7b6:	1d25      	adds	r5, r4, #4
 801b7b8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801b7bc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801b7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7c2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d051      	beq.n	801b86e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801b7ca:	881a      	ldrh	r2, [r3, #0]
 801b7cc:	a80d      	add	r0, sp, #52	; 0x34
 801b7ce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801b7d2:	462c      	mov	r4, r5
 801b7d4:	9005      	str	r0, [sp, #20]
 801b7d6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801b7da:	9004      	str	r0, [sp, #16]
 801b7dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b7de:	9003      	str	r0, [sp, #12]
 801b7e0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801b7e4:	9002      	str	r0, [sp, #8]
 801b7e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b7e8:	9001      	str	r0, [sp, #4]
 801b7ea:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801b7ee:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801b7f2:	9000      	str	r0, [sp, #0]
 801b7f4:	a810      	add	r0, sp, #64	; 0x40
 801b7f6:	f7ff fd49 	bl	801b28c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801b7fa:	e7b7      	b.n	801b76c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b7fc:	1d25      	adds	r5, r4, #4
 801b7fe:	6823      	ldr	r3, [r4, #0]
 801b800:	9310      	str	r3, [sp, #64]	; 0x40
 801b802:	e7dd      	b.n	801b7c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b804:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b806:	230a      	movs	r3, #10
 801b808:	4649      	mov	r1, r9
 801b80a:	6820      	ldr	r0, [r4, #0]
 801b80c:	eba8 0202 	sub.w	r2, r8, r2
 801b810:	1d25      	adds	r5, r4, #4
 801b812:	b292      	uxth	r2, r2
 801b814:	f7ff fd08 	bl	801b228 <_ZN8touchgfx7Unicode4itoaElPtti>
 801b818:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b81c:	2b2d      	cmp	r3, #45	; 0x2d
 801b81e:	d1cf      	bne.n	801b7c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b820:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b826:	3302      	adds	r3, #2
 801b828:	e7ea      	b.n	801b800 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801b82a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b82c:	1d25      	adds	r5, r4, #4
 801b82e:	230a      	movs	r3, #10
 801b830:	eba8 0202 	sub.w	r2, r8, r2
 801b834:	b292      	uxth	r2, r2
 801b836:	4649      	mov	r1, r9
 801b838:	6820      	ldr	r0, [r4, #0]
 801b83a:	f7ff fcd7 	bl	801b1ec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801b83e:	e7bf      	b.n	801b7c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b842:	2310      	movs	r3, #16
 801b844:	4649      	mov	r1, r9
 801b846:	6820      	ldr	r0, [r4, #0]
 801b848:	eba8 0202 	sub.w	r2, r8, r2
 801b84c:	1d25      	adds	r5, r4, #4
 801b84e:	b292      	uxth	r2, r2
 801b850:	f7ff fccc 	bl	801b1ec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801b854:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801b858:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d0af      	beq.n	801b7c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b860:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801b864:	2919      	cmp	r1, #25
 801b866:	d8f7      	bhi.n	801b858 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b868:	3b20      	subs	r3, #32
 801b86a:	8013      	strh	r3, [r2, #0]
 801b86c:	e7f4      	b.n	801b858 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b86e:	9a08      	ldr	r2, [sp, #32]
 801b870:	2a00      	cmp	r2, #0
 801b872:	d0ab      	beq.n	801b7cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b874:	7812      	ldrb	r2, [r2, #0]
 801b876:	e7a9      	b.n	801b7cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b878:	2d00      	cmp	r5, #0
 801b87a:	f43f af48 	beq.w	801b70e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801b87e:	782d      	ldrb	r5, [r5, #0]
 801b880:	e745      	b.n	801b70e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801b882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b882:	b507      	push	{r0, r1, r2, lr}
 801b884:	9300      	str	r3, [sp, #0]
 801b886:	4613      	mov	r3, r2
 801b888:	2200      	movs	r2, #0
 801b88a:	f7ff fe92 	bl	801b5b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801b88e:	b003      	add	sp, #12
 801b890:	f85d fb04 	ldr.w	pc, [sp], #4

0801b894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b894:	b40c      	push	{r2, r3}
 801b896:	b507      	push	{r0, r1, r2, lr}
 801b898:	ab04      	add	r3, sp, #16
 801b89a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b89e:	9301      	str	r3, [sp, #4]
 801b8a0:	f7ff ffef 	bl	801b882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b8a4:	b003      	add	sp, #12
 801b8a6:	f85d eb04 	ldr.w	lr, [sp], #4
 801b8aa:	b002      	add	sp, #8
 801b8ac:	4770      	bx	lr
	...

0801b8b0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b8b0:	4b01      	ldr	r3, [pc, #4]	; (801b8b8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b8b2:	6018      	str	r0, [r3, #0]
 801b8b4:	4770      	bx	lr
 801b8b6:	bf00      	nop
 801b8b8:	2000b40c 	.word	0x2000b40c

0801b8bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b8bc:	4b07      	ldr	r3, [pc, #28]	; (801b8dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801b8be:	881a      	ldrh	r2, [r3, #0]
 801b8c0:	4282      	cmp	r2, r0
 801b8c2:	d809      	bhi.n	801b8d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b8c4:	4b06      	ldr	r3, [pc, #24]	; (801b8e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801b8c6:	881b      	ldrh	r3, [r3, #0]
 801b8c8:	4413      	add	r3, r2
 801b8ca:	4298      	cmp	r0, r3
 801b8cc:	da04      	bge.n	801b8d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b8ce:	4b05      	ldr	r3, [pc, #20]	; (801b8e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b8d6:	4770      	bx	lr
 801b8d8:	2000      	movs	r0, #0
 801b8da:	4770      	bx	lr
 801b8dc:	2000b42c 	.word	0x2000b42c
 801b8e0:	2000b430 	.word	0x2000b430
 801b8e4:	2000b410 	.word	0x2000b410

0801b8e8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8ec:	4d28      	ldr	r5, [pc, #160]	; (801b990 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b8ee:	682b      	ldr	r3, [r5, #0]
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d04a      	beq.n	801b98a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801b8f4:	4a27      	ldr	r2, [pc, #156]	; (801b994 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b8f6:	4e28      	ldr	r6, [pc, #160]	; (801b998 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b8f8:	8810      	ldrh	r0, [r2, #0]
 801b8fa:	f8b6 8000 	ldrh.w	r8, [r6]
 801b8fe:	4c27      	ldr	r4, [pc, #156]	; (801b99c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b900:	4440      	add	r0, r8
 801b902:	4f27      	ldr	r7, [pc, #156]	; (801b9a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b904:	1c41      	adds	r1, r0, #1
 801b906:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801b90a:	f021 0101 	bic.w	r1, r1, #1
 801b90e:	eb03 020e 	add.w	r2, r3, lr
 801b912:	0409      	lsls	r1, r1, #16
 801b914:	6022      	str	r2, [r4, #0]
 801b916:	0c09      	lsrs	r1, r1, #16
 801b918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801b91c:	eb0e 010c 	add.w	r1, lr, ip
 801b920:	185a      	adds	r2, r3, r1
 801b922:	603a      	str	r2, [r7, #0]
 801b924:	220e      	movs	r2, #14
 801b926:	fb02 f208 	mul.w	r2, r2, r8
 801b92a:	3203      	adds	r2, #3
 801b92c:	f022 0203 	bic.w	r2, r2, #3
 801b930:	4411      	add	r1, r2
 801b932:	440b      	add	r3, r1
 801b934:	491b      	ldr	r1, [pc, #108]	; (801b9a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b936:	600b      	str	r3, [r1, #0]
 801b938:	2300      	movs	r3, #0
 801b93a:	491b      	ldr	r1, [pc, #108]	; (801b9a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b93c:	800b      	strh	r3, [r1, #0]
 801b93e:	491b      	ldr	r1, [pc, #108]	; (801b9ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b940:	6809      	ldr	r1, [r1, #0]
 801b942:	eba1 010e 	sub.w	r1, r1, lr
 801b946:	eba1 010c 	sub.w	r1, r1, ip
 801b94a:	469c      	mov	ip, r3
 801b94c:	1a8a      	subs	r2, r1, r2
 801b94e:	4918      	ldr	r1, [pc, #96]	; (801b9b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801b950:	600a      	str	r2, [r1, #0]
 801b952:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b956:	4a17      	ldr	r2, [pc, #92]	; (801b9b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801b958:	8013      	strh	r3, [r2, #0]
 801b95a:	4283      	cmp	r3, r0
 801b95c:	d10d      	bne.n	801b97a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801b95e:	8835      	ldrh	r5, [r6, #0]
 801b960:	2300      	movs	r3, #0
 801b962:	6838      	ldr	r0, [r7, #0]
 801b964:	240e      	movs	r4, #14
 801b966:	429d      	cmp	r5, r3
 801b968:	d90f      	bls.n	801b98a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801b96a:	fb04 0203 	mla	r2, r4, r3, r0
 801b96e:	3301      	adds	r3, #1
 801b970:	7b11      	ldrb	r1, [r2, #12]
 801b972:	f36f 1145 	bfc	r1, #5, #1
 801b976:	7311      	strb	r1, [r2, #12]
 801b978:	e7f5      	b.n	801b966 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801b97a:	682a      	ldr	r2, [r5, #0]
 801b97c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b980:	6822      	ldr	r2, [r4, #0]
 801b982:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b986:	3301      	adds	r3, #1
 801b988:	e7e7      	b.n	801b95a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801b98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b98e:	bf00      	nop
 801b990:	2000b410 	.word	0x2000b410
 801b994:	2000b42c 	.word	0x2000b42c
 801b998:	2000b430 	.word	0x2000b430
 801b99c:	2000b424 	.word	0x2000b424
 801b9a0:	2000b414 	.word	0x2000b414
 801b9a4:	2000b41c 	.word	0x2000b41c
 801b9a8:	2000b42e 	.word	0x2000b42e
 801b9ac:	2000b418 	.word	0x2000b418
 801b9b0:	2000b428 	.word	0x2000b428
 801b9b4:	2000b420 	.word	0x2000b420

0801b9b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b9b8:	4b10      	ldr	r3, [pc, #64]	; (801b9fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801b9ba:	b510      	push	{r4, lr}
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	b9db      	cbnz	r3, 801b9f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b9c0:	b1d1      	cbz	r1, 801b9f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b9c2:	4b0f      	ldr	r3, [pc, #60]	; (801ba00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801b9c4:	240e      	movs	r4, #14
 801b9c6:	801a      	strh	r2, [r3, #0]
 801b9c8:	b292      	uxth	r2, r2
 801b9ca:	4b0e      	ldr	r3, [pc, #56]	; (801ba04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801b9cc:	881b      	ldrh	r3, [r3, #0]
 801b9ce:	4413      	add	r3, r2
 801b9d0:	4362      	muls	r2, r4
 801b9d2:	2406      	movs	r4, #6
 801b9d4:	fb04 2203 	mla	r2, r4, r3, r2
 801b9d8:	428a      	cmp	r2, r1
 801b9da:	d305      	bcc.n	801b9e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801b9dc:	4b0a      	ldr	r3, [pc, #40]	; (801ba08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801b9de:	2137      	movs	r1, #55	; 0x37
 801b9e0:	4a0a      	ldr	r2, [pc, #40]	; (801ba0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801b9e2:	480b      	ldr	r0, [pc, #44]	; (801ba10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801b9e4:	f009 fe7c 	bl	80256e0 <__assert_func>
 801b9e8:	4b0a      	ldr	r3, [pc, #40]	; (801ba14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801b9ea:	6019      	str	r1, [r3, #0]
 801b9ec:	4b0a      	ldr	r3, [pc, #40]	; (801ba18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801b9ee:	6018      	str	r0, [r3, #0]
 801b9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9f4:	f7ff bf78 	b.w	801b8e8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b9f8:	bd10      	pop	{r4, pc}
 801b9fa:	bf00      	nop
 801b9fc:	2000b41c 	.word	0x2000b41c
 801ba00:	2000b430 	.word	0x2000b430
 801ba04:	2000b42c 	.word	0x2000b42c
 801ba08:	0802aac9 	.word	0x0802aac9
 801ba0c:	0802ab22 	.word	0x0802ab22
 801ba10:	0802aaa4 	.word	0x0802aaa4
 801ba14:	2000b418 	.word	0x2000b418
 801ba18:	2000b410 	.word	0x2000b410

0801ba1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ba1c:	b470      	push	{r4, r5, r6}
 801ba1e:	4c07      	ldr	r4, [pc, #28]	; (801ba3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ba20:	4605      	mov	r5, r0
 801ba22:	4610      	mov	r0, r2
 801ba24:	9a03      	ldr	r2, [sp, #12]
 801ba26:	6826      	ldr	r6, [r4, #0]
 801ba28:	b936      	cbnz	r6, 801ba38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ba2a:	6025      	str	r5, [r4, #0]
 801ba2c:	4c04      	ldr	r4, [pc, #16]	; (801ba40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ba2e:	8021      	strh	r1, [r4, #0]
 801ba30:	4619      	mov	r1, r3
 801ba32:	bc70      	pop	{r4, r5, r6}
 801ba34:	f7ff bfc0 	b.w	801b9b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ba38:	bc70      	pop	{r4, r5, r6}
 801ba3a:	4770      	bx	lr
 801ba3c:	2000b434 	.word	0x2000b434
 801ba40:	2000b42c 	.word	0x2000b42c

0801ba44 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ba44:	b508      	push	{r3, lr}
 801ba46:	4b14      	ldr	r3, [pc, #80]	; (801ba98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ba48:	6819      	ldr	r1, [r3, #0]
 801ba4a:	b931      	cbnz	r1, 801ba5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801ba4c:	4b13      	ldr	r3, [pc, #76]	; (801ba9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ba4e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 801ba52:	4a13      	ldr	r2, [pc, #76]	; (801baa0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ba54:	4813      	ldr	r0, [pc, #76]	; (801baa4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ba56:	f009 fe43 	bl	80256e0 <__assert_func>
 801ba5a:	4a13      	ldr	r2, [pc, #76]	; (801baa8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ba5c:	8803      	ldrh	r3, [r0, #0]
 801ba5e:	8812      	ldrh	r2, [r2, #0]
 801ba60:	4293      	cmp	r3, r2
 801ba62:	d204      	bcs.n	801ba6e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801ba64:	2214      	movs	r2, #20
 801ba66:	fb02 1303 	mla	r3, r2, r3, r1
 801ba6a:	8918      	ldrh	r0, [r3, #8]
 801ba6c:	bd08      	pop	{r3, pc}
 801ba6e:	490f      	ldr	r1, [pc, #60]	; (801baac <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801ba70:	8809      	ldrh	r1, [r1, #0]
 801ba72:	4411      	add	r1, r2
 801ba74:	428b      	cmp	r3, r1
 801ba76:	da06      	bge.n	801ba86 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801ba78:	1a9b      	subs	r3, r3, r2
 801ba7a:	4a0d      	ldr	r2, [pc, #52]	; (801bab0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801ba7c:	210e      	movs	r1, #14
 801ba7e:	6812      	ldr	r2, [r2, #0]
 801ba80:	fb01 2303 	mla	r3, r1, r3, r2
 801ba84:	e7f1      	b.n	801ba6a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801ba86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ba8a:	4293      	cmp	r3, r2
 801ba8c:	bf0a      	itet	eq
 801ba8e:	4b09      	ldreq	r3, [pc, #36]	; (801bab4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801ba90:	2000      	movne	r0, #0
 801ba92:	8818      	ldrheq	r0, [r3, #0]
 801ba94:	e7ea      	b.n	801ba6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801ba96:	bf00      	nop
 801ba98:	2000b434 	.word	0x2000b434
 801ba9c:	08029d30 	.word	0x08029d30
 801baa0:	0802abcf 	.word	0x0802abcf
 801baa4:	0802aaa4 	.word	0x0802aaa4
 801baa8:	2000b42c 	.word	0x2000b42c
 801baac:	2000b430 	.word	0x2000b430
 801bab0:	2000b414 	.word	0x2000b414
 801bab4:	2000b360 	.word	0x2000b360

0801bab8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bab8:	b508      	push	{r3, lr}
 801baba:	4b14      	ldr	r3, [pc, #80]	; (801bb0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801babc:	6819      	ldr	r1, [r3, #0]
 801babe:	b931      	cbnz	r1, 801bace <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801bac0:	4b13      	ldr	r3, [pc, #76]	; (801bb10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bac2:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801bac6:	4a13      	ldr	r2, [pc, #76]	; (801bb14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bac8:	4813      	ldr	r0, [pc, #76]	; (801bb18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801baca:	f009 fe09 	bl	80256e0 <__assert_func>
 801bace:	4a13      	ldr	r2, [pc, #76]	; (801bb1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bad0:	8803      	ldrh	r3, [r0, #0]
 801bad2:	8812      	ldrh	r2, [r2, #0]
 801bad4:	4293      	cmp	r3, r2
 801bad6:	d204      	bcs.n	801bae2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801bad8:	2214      	movs	r2, #20
 801bada:	fb02 1303 	mla	r3, r2, r3, r1
 801bade:	8958      	ldrh	r0, [r3, #10]
 801bae0:	bd08      	pop	{r3, pc}
 801bae2:	490f      	ldr	r1, [pc, #60]	; (801bb20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801bae4:	8809      	ldrh	r1, [r1, #0]
 801bae6:	4411      	add	r1, r2
 801bae8:	428b      	cmp	r3, r1
 801baea:	da06      	bge.n	801bafa <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801baec:	1a9b      	subs	r3, r3, r2
 801baee:	4a0d      	ldr	r2, [pc, #52]	; (801bb24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801baf0:	210e      	movs	r1, #14
 801baf2:	6812      	ldr	r2, [r2, #0]
 801baf4:	fb01 2303 	mla	r3, r1, r3, r2
 801baf8:	e7f1      	b.n	801bade <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801bafa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bafe:	4293      	cmp	r3, r2
 801bb00:	bf0a      	itet	eq
 801bb02:	4b09      	ldreq	r3, [pc, #36]	; (801bb28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801bb04:	2000      	movne	r0, #0
 801bb06:	8818      	ldrheq	r0, [r3, #0]
 801bb08:	e7ea      	b.n	801bae0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801bb0a:	bf00      	nop
 801bb0c:	2000b434 	.word	0x2000b434
 801bb10:	08029d30 	.word	0x08029d30
 801bb14:	0802abfb 	.word	0x0802abfb
 801bb18:	0802aaa4 	.word	0x0802aaa4
 801bb1c:	2000b42c 	.word	0x2000b42c
 801bb20:	2000b430 	.word	0x2000b430
 801bb24:	2000b414 	.word	0x2000b414
 801bb28:	2000b362 	.word	0x2000b362

0801bb2c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801bb2c:	4b23      	ldr	r3, [pc, #140]	; (801bbbc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801bb2e:	b510      	push	{r4, lr}
 801bb30:	681c      	ldr	r4, [r3, #0]
 801bb32:	b934      	cbnz	r4, 801bb42 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801bb34:	4b22      	ldr	r3, [pc, #136]	; (801bbc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801bb36:	f44f 7148 	mov.w	r1, #800	; 0x320
 801bb3a:	4a22      	ldr	r2, [pc, #136]	; (801bbc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801bb3c:	4822      	ldr	r0, [pc, #136]	; (801bbc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801bb3e:	f009 fdcf 	bl	80256e0 <__assert_func>
 801bb42:	4a22      	ldr	r2, [pc, #136]	; (801bbcc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801bb44:	880b      	ldrh	r3, [r1, #0]
 801bb46:	8812      	ldrh	r2, [r2, #0]
 801bb48:	4293      	cmp	r3, r2
 801bb4a:	d211      	bcs.n	801bb70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801bb4c:	2214      	movs	r2, #20
 801bb4e:	fb02 4303 	mla	r3, r2, r3, r4
 801bb52:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801bb56:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801bb5a:	8a1a      	ldrh	r2, [r3, #16]
 801bb5c:	8a5b      	ldrh	r3, [r3, #18]
 801bb5e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bb62:	8004      	strh	r4, [r0, #0]
 801bb64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bb68:	8041      	strh	r1, [r0, #2]
 801bb6a:	8082      	strh	r2, [r0, #4]
 801bb6c:	80c3      	strh	r3, [r0, #6]
 801bb6e:	e00e      	b.n	801bb8e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bb70:	4917      	ldr	r1, [pc, #92]	; (801bbd0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801bb72:	8809      	ldrh	r1, [r1, #0]
 801bb74:	4411      	add	r1, r2
 801bb76:	428b      	cmp	r3, r1
 801bb78:	da0a      	bge.n	801bb90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801bb7a:	1a9b      	subs	r3, r3, r2
 801bb7c:	4a15      	ldr	r2, [pc, #84]	; (801bbd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801bb7e:	210e      	movs	r1, #14
 801bb80:	6812      	ldr	r2, [r2, #0]
 801bb82:	fb01 2303 	mla	r3, r1, r3, r2
 801bb86:	681a      	ldr	r2, [r3, #0]
 801bb88:	6002      	str	r2, [r0, #0]
 801bb8a:	685a      	ldr	r2, [r3, #4]
 801bb8c:	6042      	str	r2, [r0, #4]
 801bb8e:	bd10      	pop	{r4, pc}
 801bb90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bb94:	4293      	cmp	r3, r2
 801bb96:	d10b      	bne.n	801bbb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801bb98:	4b0f      	ldr	r3, [pc, #60]	; (801bbd8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801bb9a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bb9e:	4b0f      	ldr	r3, [pc, #60]	; (801bbdc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801bba0:	8081      	strh	r1, [r0, #4]
 801bba2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bba6:	2300      	movs	r3, #0
 801bba8:	80c2      	strh	r2, [r0, #6]
 801bbaa:	8003      	strh	r3, [r0, #0]
 801bbac:	8043      	strh	r3, [r0, #2]
 801bbae:	e7ee      	b.n	801bb8e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bbb0:	2300      	movs	r3, #0
 801bbb2:	8003      	strh	r3, [r0, #0]
 801bbb4:	8043      	strh	r3, [r0, #2]
 801bbb6:	8083      	strh	r3, [r0, #4]
 801bbb8:	e7d8      	b.n	801bb6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801bbba:	bf00      	nop
 801bbbc:	2000b434 	.word	0x2000b434
 801bbc0:	08029d30 	.word	0x08029d30
 801bbc4:	0802ab68 	.word	0x0802ab68
 801bbc8:	0802aaa4 	.word	0x0802aaa4
 801bbcc:	2000b42c 	.word	0x2000b42c
 801bbd0:	2000b430 	.word	0x2000b430
 801bbd4:	2000b414 	.word	0x2000b414
 801bbd8:	2000b360 	.word	0x2000b360
 801bbdc:	2000b362 	.word	0x2000b362

0801bbe0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bbe0:	b508      	push	{r3, lr}
 801bbe2:	4b12      	ldr	r3, [pc, #72]	; (801bc2c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bbe4:	6819      	ldr	r1, [r3, #0]
 801bbe6:	b931      	cbnz	r1, 801bbf6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bbe8:	4b11      	ldr	r3, [pc, #68]	; (801bc30 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bbea:	f44f 7151 	mov.w	r1, #836	; 0x344
 801bbee:	4a11      	ldr	r2, [pc, #68]	; (801bc34 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bbf0:	4811      	ldr	r0, [pc, #68]	; (801bc38 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bbf2:	f009 fd75 	bl	80256e0 <__assert_func>
 801bbf6:	8803      	ldrh	r3, [r0, #0]
 801bbf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bbfc:	4293      	cmp	r3, r2
 801bbfe:	d012      	beq.n	801bc26 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bc00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bc04:	4293      	cmp	r3, r2
 801bc06:	d103      	bne.n	801bc10 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801bc08:	4b0c      	ldr	r3, [pc, #48]	; (801bc3c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bc0a:	681b      	ldr	r3, [r3, #0]
 801bc0c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bc0e:	bd08      	pop	{r3, pc}
 801bc10:	4a0b      	ldr	r2, [pc, #44]	; (801bc40 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801bc12:	6812      	ldr	r2, [r2, #0]
 801bc14:	b11a      	cbz	r2, 801bc1e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801bc16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bc1a:	2800      	cmp	r0, #0
 801bc1c:	d1f7      	bne.n	801bc0e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bc1e:	2214      	movs	r2, #20
 801bc20:	4353      	muls	r3, r2
 801bc22:	58c8      	ldr	r0, [r1, r3]
 801bc24:	e7f3      	b.n	801bc0e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bc26:	2000      	movs	r0, #0
 801bc28:	e7f1      	b.n	801bc0e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bc2a:	bf00      	nop
 801bc2c:	2000b434 	.word	0x2000b434
 801bc30:	08029d30 	.word	0x08029d30
 801bc34:	0802ab9e 	.word	0x0802ab9e
 801bc38:	0802aaa4 	.word	0x0802aaa4
 801bc3c:	2000b36c 	.word	0x2000b36c
 801bc40:	2000b410 	.word	0x2000b410

0801bc44 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bc44:	8802      	ldrh	r2, [r0, #0]
 801bc46:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801bc4a:	429a      	cmp	r2, r3
 801bc4c:	d840      	bhi.n	801bcd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bc4e:	4b21      	ldr	r3, [pc, #132]	; (801bcd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801bc50:	881b      	ldrh	r3, [r3, #0]
 801bc52:	429a      	cmp	r2, r3
 801bc54:	d220      	bcs.n	801bc98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801bc56:	4b20      	ldr	r3, [pc, #128]	; (801bcd8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bc58:	6819      	ldr	r1, [r3, #0]
 801bc5a:	2314      	movs	r3, #20
 801bc5c:	fb03 1302 	mla	r3, r3, r2, r1
 801bc60:	6858      	ldr	r0, [r3, #4]
 801bc62:	2800      	cmp	r0, #0
 801bc64:	d035      	beq.n	801bcd2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bc66:	491d      	ldr	r1, [pc, #116]	; (801bcdc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bc68:	6809      	ldr	r1, [r1, #0]
 801bc6a:	2900      	cmp	r1, #0
 801bc6c:	d031      	beq.n	801bcd2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bc6e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bc72:	b371      	cbz	r1, 801bcd2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bc74:	895a      	ldrh	r2, [r3, #10]
 801bc76:	8918      	ldrh	r0, [r3, #8]
 801bc78:	4350      	muls	r0, r2
 801bc7a:	7c5a      	ldrb	r2, [r3, #17]
 801bc7c:	7cdb      	ldrb	r3, [r3, #19]
 801bc7e:	0952      	lsrs	r2, r2, #5
 801bc80:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bc84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bc88:	2b0b      	cmp	r3, #11
 801bc8a:	bf18      	it	ne
 801bc8c:	0040      	lslne	r0, r0, #1
 801bc8e:	3003      	adds	r0, #3
 801bc90:	f020 0003 	bic.w	r0, r0, #3
 801bc94:	4408      	add	r0, r1
 801bc96:	4770      	bx	lr
 801bc98:	4911      	ldr	r1, [pc, #68]	; (801bce0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bc9a:	8809      	ldrh	r1, [r1, #0]
 801bc9c:	4419      	add	r1, r3
 801bc9e:	428a      	cmp	r2, r1
 801bca0:	da16      	bge.n	801bcd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bca2:	4910      	ldr	r1, [pc, #64]	; (801bce4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bca4:	1ad3      	subs	r3, r2, r3
 801bca6:	200e      	movs	r0, #14
 801bca8:	6809      	ldr	r1, [r1, #0]
 801bcaa:	fb00 1303 	mla	r3, r0, r3, r1
 801bcae:	7b19      	ldrb	r1, [r3, #12]
 801bcb0:	f001 011f 	and.w	r1, r1, #31
 801bcb4:	290b      	cmp	r1, #11
 801bcb6:	d10b      	bne.n	801bcd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bcb8:	8919      	ldrh	r1, [r3, #8]
 801bcba:	8958      	ldrh	r0, [r3, #10]
 801bcbc:	4b07      	ldr	r3, [pc, #28]	; (801bcdc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bcbe:	4348      	muls	r0, r1
 801bcc0:	6819      	ldr	r1, [r3, #0]
 801bcc2:	3003      	adds	r0, #3
 801bcc4:	f020 0303 	bic.w	r3, r0, #3
 801bcc8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801bccc:	4418      	add	r0, r3
 801bcce:	4770      	bx	lr
 801bcd0:	2000      	movs	r0, #0
 801bcd2:	4770      	bx	lr
 801bcd4:	2000b42c 	.word	0x2000b42c
 801bcd8:	2000b434 	.word	0x2000b434
 801bcdc:	2000b410 	.word	0x2000b410
 801bce0:	2000b430 	.word	0x2000b430
 801bce4:	2000b414 	.word	0x2000b414

0801bce8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801bce8:	4b19      	ldr	r3, [pc, #100]	; (801bd50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801bcea:	6819      	ldr	r1, [r3, #0]
 801bcec:	8803      	ldrh	r3, [r0, #0]
 801bcee:	b1e9      	cbz	r1, 801bd2c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801bcf0:	4a18      	ldr	r2, [pc, #96]	; (801bd54 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801bcf2:	8812      	ldrh	r2, [r2, #0]
 801bcf4:	429a      	cmp	r2, r3
 801bcf6:	d90a      	bls.n	801bd0e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801bcf8:	2214      	movs	r2, #20
 801bcfa:	fb02 1303 	mla	r3, r2, r3, r1
 801bcfe:	7c58      	ldrb	r0, [r3, #17]
 801bd00:	0942      	lsrs	r2, r0, #5
 801bd02:	7cd8      	ldrb	r0, [r3, #19]
 801bd04:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801bd08:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801bd0c:	4770      	bx	lr
 801bd0e:	4912      	ldr	r1, [pc, #72]	; (801bd58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801bd10:	8809      	ldrh	r1, [r1, #0]
 801bd12:	4411      	add	r1, r2
 801bd14:	428b      	cmp	r3, r1
 801bd16:	da09      	bge.n	801bd2c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801bd18:	1a9b      	subs	r3, r3, r2
 801bd1a:	4a10      	ldr	r2, [pc, #64]	; (801bd5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801bd1c:	210e      	movs	r1, #14
 801bd1e:	6812      	ldr	r2, [r2, #0]
 801bd20:	fb01 2303 	mla	r3, r1, r3, r2
 801bd24:	7b18      	ldrb	r0, [r3, #12]
 801bd26:	f000 001f 	and.w	r0, r0, #31
 801bd2a:	4770      	bx	lr
 801bd2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bd30:	4293      	cmp	r3, r2
 801bd32:	d10a      	bne.n	801bd4a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801bd34:	4b0a      	ldr	r3, [pc, #40]	; (801bd60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bd3c:	b10a      	cbz	r2, 801bd42 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801bd3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801bd40:	b900      	cbnz	r0, 801bd44 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801bd42:	6898      	ldr	r0, [r3, #8]
 801bd44:	6803      	ldr	r3, [r0, #0]
 801bd46:	6a1b      	ldr	r3, [r3, #32]
 801bd48:	4718      	bx	r3
 801bd4a:	2000      	movs	r0, #0
 801bd4c:	4770      	bx	lr
 801bd4e:	bf00      	nop
 801bd50:	2000b434 	.word	0x2000b434
 801bd54:	2000b42c 	.word	0x2000b42c
 801bd58:	2000b430 	.word	0x2000b430
 801bd5c:	2000b414 	.word	0x2000b414
 801bd60:	2000b36c 	.word	0x2000b36c

0801bd64 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801bd64:	2018      	movs	r0, #24
 801bd66:	4770      	bx	lr

0801bd68 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801bd68:	2001      	movs	r0, #1
 801bd6a:	4770      	bx	lr

0801bd6c <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801bd6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801bd70:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801bd74:	4770      	bx	lr

0801bd76 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801bd76:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801bd7a:	4770      	bx	lr

0801bd7c <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801bd7c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801bd80:	4770      	bx	lr

0801bd82 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801bd82:	b2c8      	uxtb	r0, r1
 801bd84:	4770      	bx	lr

0801bd86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bd86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd8a:	b085      	sub	sp, #20
 801bd8c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801bd8e:	9203      	str	r2, [sp, #12]
 801bd90:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801bd94:	6878      	ldr	r0, [r7, #4]
 801bd96:	9201      	str	r2, [sp, #4]
 801bd98:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801bd9a:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801bd9e:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801bda2:	fa1f fc84 	uxth.w	ip, r4
 801bda6:	43e4      	mvns	r4, r4
 801bda8:	9100      	str	r1, [sp, #0]
 801bdaa:	b2e4      	uxtb	r4, r4
 801bdac:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801bdb0:	fb00 2505 	mla	r5, r0, r5, r2
 801bdb4:	683a      	ldr	r2, [r7, #0]
 801bdb6:	6877      	ldr	r7, [r6, #4]
 801bdb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bdbc:	3704      	adds	r7, #4
 801bdbe:	4415      	add	r5, r2
 801bdc0:	6832      	ldr	r2, [r6, #0]
 801bdc2:	9202      	str	r2, [sp, #8]
 801bdc4:	9a00      	ldr	r2, [sp, #0]
 801bdc6:	2a00      	cmp	r2, #0
 801bdc8:	dc03      	bgt.n	801bdd2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801bdca:	9a03      	ldr	r2, [sp, #12]
 801bdcc:	2a00      	cmp	r2, #0
 801bdce:	f340 8116 	ble.w	801bffe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801bdd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bdd4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bdd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bdda:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	dd0f      	ble.n	801be02 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801bde2:	1406      	asrs	r6, r0, #16
 801bde4:	d406      	bmi.n	801bdf4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bde6:	4546      	cmp	r6, r8
 801bde8:	da04      	bge.n	801bdf4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bdea:	1416      	asrs	r6, r2, #16
 801bdec:	d402      	bmi.n	801bdf4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bdee:	9901      	ldr	r1, [sp, #4]
 801bdf0:	428e      	cmp	r6, r1
 801bdf2:	db07      	blt.n	801be04 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801bdf4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bdf6:	3b01      	subs	r3, #1
 801bdf8:	3503      	adds	r5, #3
 801bdfa:	4408      	add	r0, r1
 801bdfc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bdfe:	440a      	add	r2, r1
 801be00:	e7ed      	b.n	801bdde <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801be02:	d011      	beq.n	801be28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801be04:	1e5e      	subs	r6, r3, #1
 801be06:	9911      	ldr	r1, [sp, #68]	; 0x44
 801be08:	fb01 0e06 	mla	lr, r1, r6, r0
 801be0c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801be10:	d548      	bpl.n	801bea4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801be12:	4699      	mov	r9, r3
 801be14:	462e      	mov	r6, r5
 801be16:	f1b9 0f00 	cmp.w	r9, #0
 801be1a:	f300 809e 	bgt.w	801bf5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801be1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be26:	441d      	add	r5, r3
 801be28:	9b00      	ldr	r3, [sp, #0]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	f340 80e7 	ble.w	801bffe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801be30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801be34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be36:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be3e:	eef0 6a62 	vmov.f32	s13, s5
 801be42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801be46:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be4e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801be52:	eef0 6a43 	vmov.f32	s13, s6
 801be56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be5a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801be5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be62:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be66:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be76:	ee12 2a90 	vmov	r2, s5
 801be7a:	eef0 2a47 	vmov.f32	s5, s14
 801be7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801be82:	ee13 2a10 	vmov	r2, s6
 801be86:	9311      	str	r3, [sp, #68]	; 0x44
 801be88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be8a:	eeb0 3a67 	vmov.f32	s6, s15
 801be8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801be92:	9312      	str	r3, [sp, #72]	; 0x48
 801be94:	9b00      	ldr	r3, [sp, #0]
 801be96:	9a03      	ldr	r2, [sp, #12]
 801be98:	3b01      	subs	r3, #1
 801be9a:	9300      	str	r3, [sp, #0]
 801be9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be9e:	bf08      	it	eq
 801bea0:	4613      	moveq	r3, r2
 801bea2:	e78f      	b.n	801bdc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801bea4:	45c6      	cmp	lr, r8
 801bea6:	dab4      	bge.n	801be12 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801bea8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801beaa:	fb01 2606 	mla	r6, r1, r6, r2
 801beae:	1436      	asrs	r6, r6, #16
 801beb0:	d4af      	bmi.n	801be12 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801beb2:	9901      	ldr	r1, [sp, #4]
 801beb4:	428e      	cmp	r6, r1
 801beb6:	daac      	bge.n	801be12 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801beb8:	1cee      	adds	r6, r5, #3
 801beba:	4699      	mov	r9, r3
 801bebc:	f1b9 0f00 	cmp.w	r9, #0
 801bec0:	f106 0603 	add.w	r6, r6, #3
 801bec4:	ddab      	ble.n	801be1e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801bec6:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801beca:	9902      	ldr	r1, [sp, #8]
 801becc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801bed0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801bed4:	fb08 1e0e 	mla	lr, r8, lr, r1
 801bed8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801beda:	fb1b fb04 	smulbb	fp, fp, r4
 801bede:	f109 39ff 	add.w	r9, r9, #4294967295
 801bee2:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801bee6:	4408      	add	r0, r1
 801bee8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801beea:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801beee:	440a      	add	r2, r1
 801bef0:	eb07 0a0e 	add.w	sl, r7, lr
 801bef4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801bef8:	fb0e be0c 	mla	lr, lr, ip, fp
 801befc:	fa1f fe8e 	uxth.w	lr, lr
 801bf00:	f10e 0b01 	add.w	fp, lr, #1
 801bf04:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bf08:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801bf0c:	fb1b fb04 	smulbb	fp, fp, r4
 801bf10:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bf14:	f806 ec06 	strb.w	lr, [r6, #-6]
 801bf18:	f89a e001 	ldrb.w	lr, [sl, #1]
 801bf1c:	fb0e be0c 	mla	lr, lr, ip, fp
 801bf20:	fa1f fe8e 	uxth.w	lr, lr
 801bf24:	f10e 0b01 	add.w	fp, lr, #1
 801bf28:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bf2c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bf30:	f806 ec05 	strb.w	lr, [r6, #-5]
 801bf34:	f89a e002 	ldrb.w	lr, [sl, #2]
 801bf38:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801bf3c:	fb1a fa04 	smulbb	sl, sl, r4
 801bf40:	fb0e ae0c 	mla	lr, lr, ip, sl
 801bf44:	fa1f fe8e 	uxth.w	lr, lr
 801bf48:	f10e 0a01 	add.w	sl, lr, #1
 801bf4c:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801bf50:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bf54:	f806 ec04 	strb.w	lr, [r6, #-4]
 801bf58:	e7b0      	b.n	801bebc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bf5a:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801bf5e:	d446      	bmi.n	801bfee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801bf60:	45c2      	cmp	sl, r8
 801bf62:	da44      	bge.n	801bfee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801bf64:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801bf68:	d441      	bmi.n	801bfee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801bf6a:	9901      	ldr	r1, [sp, #4]
 801bf6c:	458e      	cmp	lr, r1
 801bf6e:	da3e      	bge.n	801bfee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801bf70:	9902      	ldr	r1, [sp, #8]
 801bf72:	f896 b000 	ldrb.w	fp, [r6]
 801bf76:	fb08 1e0e 	mla	lr, r8, lr, r1
 801bf7a:	fb1b fb04 	smulbb	fp, fp, r4
 801bf7e:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801bf82:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bf86:	eb07 0a0e 	add.w	sl, r7, lr
 801bf8a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801bf8e:	fb0e be0c 	mla	lr, lr, ip, fp
 801bf92:	fa1f fe8e 	uxth.w	lr, lr
 801bf96:	f10e 0b01 	add.w	fp, lr, #1
 801bf9a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bf9e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801bfa2:	fb1b fb04 	smulbb	fp, fp, r4
 801bfa6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bfaa:	f886 e000 	strb.w	lr, [r6]
 801bfae:	f89a e001 	ldrb.w	lr, [sl, #1]
 801bfb2:	fb0e be0c 	mla	lr, lr, ip, fp
 801bfb6:	fa1f fe8e 	uxth.w	lr, lr
 801bfba:	f10e 0b01 	add.w	fp, lr, #1
 801bfbe:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bfc2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bfc6:	f886 e001 	strb.w	lr, [r6, #1]
 801bfca:	f89a e002 	ldrb.w	lr, [sl, #2]
 801bfce:	f896 a002 	ldrb.w	sl, [r6, #2]
 801bfd2:	fb1a fa04 	smulbb	sl, sl, r4
 801bfd6:	fb0e ae0c 	mla	lr, lr, ip, sl
 801bfda:	fa1f fe8e 	uxth.w	lr, lr
 801bfde:	f10e 0a01 	add.w	sl, lr, #1
 801bfe2:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801bfe6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bfea:	f886 e002 	strb.w	lr, [r6, #2]
 801bfee:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bff0:	3603      	adds	r6, #3
 801bff2:	f109 39ff 	add.w	r9, r9, #4294967295
 801bff6:	4408      	add	r0, r1
 801bff8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bffa:	440a      	add	r2, r1
 801bffc:	e70b      	b.n	801be16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801bffe:	b005      	add	sp, #20
 801c000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c004 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c008:	b085      	sub	sp, #20
 801c00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c00e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c010:	9203      	str	r2, [sp, #12]
 801c012:	6870      	ldr	r0, [r6, #4]
 801c014:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c016:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c01a:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c01e:	9101      	str	r1, [sp, #4]
 801c020:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c024:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801c028:	fb00 2404 	mla	r4, r0, r4, r2
 801c02c:	6832      	ldr	r2, [r6, #0]
 801c02e:	686e      	ldr	r6, [r5, #4]
 801c030:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c034:	3604      	adds	r6, #4
 801c036:	4414      	add	r4, r2
 801c038:	682a      	ldr	r2, [r5, #0]
 801c03a:	9202      	str	r2, [sp, #8]
 801c03c:	9a01      	ldr	r2, [sp, #4]
 801c03e:	2a00      	cmp	r2, #0
 801c040:	dc03      	bgt.n	801c04a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801c042:	9a03      	ldr	r2, [sp, #12]
 801c044:	2a00      	cmp	r2, #0
 801c046:	f340 80b2 	ble.w	801c1ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c04a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c04c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c050:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c052:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c056:	2b00      	cmp	r3, #0
 801c058:	dd0c      	ble.n	801c074 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c05a:	1405      	asrs	r5, r0, #16
 801c05c:	d405      	bmi.n	801c06a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c05e:	4575      	cmp	r5, lr
 801c060:	da03      	bge.n	801c06a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c062:	1415      	asrs	r5, r2, #16
 801c064:	d401      	bmi.n	801c06a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c066:	4545      	cmp	r5, r8
 801c068:	db05      	blt.n	801c076 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c06a:	4460      	add	r0, ip
 801c06c:	443a      	add	r2, r7
 801c06e:	3b01      	subs	r3, #1
 801c070:	3403      	adds	r4, #3
 801c072:	e7f0      	b.n	801c056 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801c074:	d03d      	beq.n	801c0f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801c076:	1e5d      	subs	r5, r3, #1
 801c078:	fb0c 0905 	mla	r9, ip, r5, r0
 801c07c:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c080:	d42c      	bmi.n	801c0dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c082:	45f1      	cmp	r9, lr
 801c084:	da2a      	bge.n	801c0dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c086:	fb07 2505 	mla	r5, r7, r5, r2
 801c08a:	142d      	asrs	r5, r5, #16
 801c08c:	d426      	bmi.n	801c0dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c08e:	4545      	cmp	r5, r8
 801c090:	da24      	bge.n	801c0dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c092:	1ce5      	adds	r5, r4, #3
 801c094:	469a      	mov	sl, r3
 801c096:	f1ba 0f00 	cmp.w	sl, #0
 801c09a:	f105 0503 	add.w	r5, r5, #3
 801c09e:	dd23      	ble.n	801c0e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801c0a0:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c0a4:	9902      	ldr	r1, [sp, #8]
 801c0a6:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c0aa:	443a      	add	r2, r7
 801c0ac:	fb0e 1909 	mla	r9, lr, r9, r1
 801c0b0:	4460      	add	r0, ip
 801c0b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c0b6:	f819 900b 	ldrb.w	r9, [r9, fp]
 801c0ba:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c0be:	eb06 0b09 	add.w	fp, r6, r9
 801c0c2:	f816 9009 	ldrb.w	r9, [r6, r9]
 801c0c6:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c0ca:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801c0ce:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c0d2:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c0d6:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c0da:	e7dc      	b.n	801c096 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c0dc:	2500      	movs	r5, #0
 801c0de:	eba3 0905 	sub.w	r9, r3, r5
 801c0e2:	f1b9 0f00 	cmp.w	r9, #0
 801c0e6:	dc3c      	bgt.n	801c162 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801c0e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c0ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c0f0:	441c      	add	r4, r3
 801c0f2:	9b01      	ldr	r3, [sp, #4]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	dd5a      	ble.n	801c1ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c0f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c0fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c0fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c102:	eeb0 6a62 	vmov.f32	s12, s5
 801c106:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c10a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c10e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c112:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c116:	eeb0 6a43 	vmov.f32	s12, s6
 801c11a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c11e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c122:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c126:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c12a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c12e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c132:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c136:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c13a:	ee12 2a90 	vmov	r2, s5
 801c13e:	eef0 2a47 	vmov.f32	s5, s14
 801c142:	fb92 fcf3 	sdiv	ip, r2, r3
 801c146:	ee13 2a10 	vmov	r2, s6
 801c14a:	eeb0 3a67 	vmov.f32	s6, s15
 801c14e:	fb92 f7f3 	sdiv	r7, r2, r3
 801c152:	9b01      	ldr	r3, [sp, #4]
 801c154:	9a03      	ldr	r2, [sp, #12]
 801c156:	3b01      	subs	r3, #1
 801c158:	9301      	str	r3, [sp, #4]
 801c15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c15c:	bf08      	it	eq
 801c15e:	4613      	moveq	r3, r2
 801c160:	e76c      	b.n	801c03c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801c162:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c166:	d41e      	bmi.n	801c1a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c168:	45f2      	cmp	sl, lr
 801c16a:	da1c      	bge.n	801c1a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c16c:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c170:	d419      	bmi.n	801c1a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c172:	45c1      	cmp	r9, r8
 801c174:	da17      	bge.n	801c1a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c176:	9902      	ldr	r1, [sp, #8]
 801c178:	fb0e 1909 	mla	r9, lr, r9, r1
 801c17c:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c180:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c184:	f816 b009 	ldrb.w	fp, [r6, r9]
 801c188:	eb06 0a09 	add.w	sl, r6, r9
 801c18c:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801c190:	f804 b009 	strb.w	fp, [r4, r9]
 801c194:	44a1      	add	r9, r4
 801c196:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c19a:	f889 b001 	strb.w	fp, [r9, #1]
 801c19e:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c1a2:	f889 a002 	strb.w	sl, [r9, #2]
 801c1a6:	4460      	add	r0, ip
 801c1a8:	443a      	add	r2, r7
 801c1aa:	3501      	adds	r5, #1
 801c1ac:	e797      	b.n	801c0de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801c1ae:	b005      	add	sp, #20
 801c1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c1b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1b8:	b087      	sub	sp, #28
 801c1ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1be:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c1c0:	9204      	str	r2, [sp, #16]
 801c1c2:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c1c6:	6870      	ldr	r0, [r6, #4]
 801c1c8:	9205      	str	r2, [sp, #20]
 801c1ca:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c1cc:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c1d0:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c1d4:	9101      	str	r1, [sp, #4]
 801c1d6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c1da:	fb00 2505 	mla	r5, r0, r5, r2
 801c1de:	6832      	ldr	r2, [r6, #0]
 801c1e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1e4:	4415      	add	r5, r2
 801c1e6:	6822      	ldr	r2, [r4, #0]
 801c1e8:	9202      	str	r2, [sp, #8]
 801c1ea:	6862      	ldr	r2, [r4, #4]
 801c1ec:	3204      	adds	r2, #4
 801c1ee:	9203      	str	r2, [sp, #12]
 801c1f0:	9a01      	ldr	r2, [sp, #4]
 801c1f2:	2a00      	cmp	r2, #0
 801c1f4:	dc03      	bgt.n	801c1fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801c1f6:	9a04      	ldr	r2, [sp, #16]
 801c1f8:	2a00      	cmp	r2, #0
 801c1fa:	f340 8124 	ble.w	801c446 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c1fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c200:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c204:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c206:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	dd0e      	ble.n	801c22c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801c20e:	1422      	asrs	r2, r4, #16
 801c210:	d405      	bmi.n	801c21e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c212:	4572      	cmp	r2, lr
 801c214:	da03      	bge.n	801c21e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c216:	1402      	asrs	r2, r0, #16
 801c218:	d401      	bmi.n	801c21e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c21a:	4542      	cmp	r2, r8
 801c21c:	db07      	blt.n	801c22e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c21e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c220:	3b01      	subs	r3, #1
 801c222:	3503      	adds	r5, #3
 801c224:	4414      	add	r4, r2
 801c226:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c228:	4410      	add	r0, r2
 801c22a:	e7ee      	b.n	801c20a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801c22c:	d010      	beq.n	801c250 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801c22e:	1e5a      	subs	r2, r3, #1
 801c230:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c232:	fb06 4602 	mla	r6, r6, r2, r4
 801c236:	1436      	asrs	r6, r6, #16
 801c238:	d546      	bpl.n	801c2c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801c23a:	4699      	mov	r9, r3
 801c23c:	462f      	mov	r7, r5
 801c23e:	f1b9 0f00 	cmp.w	r9, #0
 801c242:	f300 80a5 	bgt.w	801c390 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801c246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c24a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c24e:	441d      	add	r5, r3
 801c250:	9b01      	ldr	r3, [sp, #4]
 801c252:	2b00      	cmp	r3, #0
 801c254:	f340 80f7 	ble.w	801c446 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c258:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c25c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c25e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c262:	eeb0 6a62 	vmov.f32	s12, s5
 801c266:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c26a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c26e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c272:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c276:	eeb0 6a43 	vmov.f32	s12, s6
 801c27a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c27e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c282:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c286:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c28a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c28e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c292:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c296:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c29a:	ee12 2a90 	vmov	r2, s5
 801c29e:	eef0 2a47 	vmov.f32	s5, s14
 801c2a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2a6:	ee13 2a10 	vmov	r2, s6
 801c2aa:	9313      	str	r3, [sp, #76]	; 0x4c
 801c2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c2ae:	eeb0 3a67 	vmov.f32	s6, s15
 801c2b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2b6:	9314      	str	r3, [sp, #80]	; 0x50
 801c2b8:	9b01      	ldr	r3, [sp, #4]
 801c2ba:	9a04      	ldr	r2, [sp, #16]
 801c2bc:	3b01      	subs	r3, #1
 801c2be:	9301      	str	r3, [sp, #4]
 801c2c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c2c2:	bf08      	it	eq
 801c2c4:	4613      	moveq	r3, r2
 801c2c6:	e793      	b.n	801c1f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c2c8:	4576      	cmp	r6, lr
 801c2ca:	dab6      	bge.n	801c23a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c2cc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c2ce:	fb06 0202 	mla	r2, r6, r2, r0
 801c2d2:	1412      	asrs	r2, r2, #16
 801c2d4:	d4b1      	bmi.n	801c23a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c2d6:	4542      	cmp	r2, r8
 801c2d8:	daaf      	bge.n	801c23a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c2da:	1cef      	adds	r7, r5, #3
 801c2dc:	4699      	mov	r9, r3
 801c2de:	f1b9 0f00 	cmp.w	r9, #0
 801c2e2:	ddb0      	ble.n	801c246 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c2e4:	9902      	ldr	r1, [sp, #8]
 801c2e6:	1402      	asrs	r2, r0, #16
 801c2e8:	1426      	asrs	r6, r4, #16
 801c2ea:	fb0e 1202 	mla	r2, lr, r2, r1
 801c2ee:	9903      	ldr	r1, [sp, #12]
 801c2f0:	5d92      	ldrb	r2, [r2, r6]
 801c2f2:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c2f6:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c2fa:	d041      	beq.n	801c380 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c2fc:	9a05      	ldr	r2, [sp, #20]
 801c2fe:	fa5f fb86 	uxtb.w	fp, r6
 801c302:	fb02 fc0c 	mul.w	ip, r2, ip
 801c306:	f10c 0201 	add.w	r2, ip, #1
 801c30a:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c30e:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c312:	1212      	asrs	r2, r2, #8
 801c314:	fa1f fa82 	uxth.w	sl, r2
 801c318:	43d2      	mvns	r2, r2
 801c31a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c31e:	b2d2      	uxtb	r2, r2
 801c320:	fb0c bc02 	mla	ip, ip, r2, fp
 801c324:	fa1f fc8c 	uxth.w	ip, ip
 801c328:	f10c 0b01 	add.w	fp, ip, #1
 801c32c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c330:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c334:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c338:	fb1b fb0a 	smulbb	fp, fp, sl
 801c33c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c340:	fb16 fa0a 	smulbb	sl, r6, sl
 801c344:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c348:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c34c:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c350:	fb06 aa02 	mla	sl, r6, r2, sl
 801c354:	fb0c bc02 	mla	ip, ip, r2, fp
 801c358:	fa1f fa8a 	uxth.w	sl, sl
 801c35c:	fa1f fc8c 	uxth.w	ip, ip
 801c360:	f10a 0601 	add.w	r6, sl, #1
 801c364:	f10c 0b01 	add.w	fp, ip, #1
 801c368:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c36c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c370:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c374:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c378:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c37c:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c380:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c382:	3703      	adds	r7, #3
 801c384:	f109 39ff 	add.w	r9, r9, #4294967295
 801c388:	4414      	add	r4, r2
 801c38a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c38c:	4410      	add	r0, r2
 801c38e:	e7a6      	b.n	801c2de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c390:	1426      	asrs	r6, r4, #16
 801c392:	d450      	bmi.n	801c436 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c394:	4576      	cmp	r6, lr
 801c396:	da4e      	bge.n	801c436 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c398:	1402      	asrs	r2, r0, #16
 801c39a:	d44c      	bmi.n	801c436 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c39c:	4542      	cmp	r2, r8
 801c39e:	da4a      	bge.n	801c436 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c3a0:	9902      	ldr	r1, [sp, #8]
 801c3a2:	fb0e 1202 	mla	r2, lr, r2, r1
 801c3a6:	9903      	ldr	r1, [sp, #12]
 801c3a8:	5d92      	ldrb	r2, [r2, r6]
 801c3aa:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c3ae:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c3b2:	d040      	beq.n	801c436 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c3b4:	9a05      	ldr	r2, [sp, #20]
 801c3b6:	fa5f fb86 	uxtb.w	fp, r6
 801c3ba:	fb02 fc0c 	mul.w	ip, r2, ip
 801c3be:	f10c 0201 	add.w	r2, ip, #1
 801c3c2:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c3c6:	f897 c000 	ldrb.w	ip, [r7]
 801c3ca:	1212      	asrs	r2, r2, #8
 801c3cc:	fa1f fa82 	uxth.w	sl, r2
 801c3d0:	43d2      	mvns	r2, r2
 801c3d2:	fb1b fb0a 	smulbb	fp, fp, sl
 801c3d6:	b2d2      	uxtb	r2, r2
 801c3d8:	fb0c bc02 	mla	ip, ip, r2, fp
 801c3dc:	fa1f fc8c 	uxth.w	ip, ip
 801c3e0:	f10c 0b01 	add.w	fp, ip, #1
 801c3e4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c3e8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c3ec:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c3f0:	fb1b fb0a 	smulbb	fp, fp, sl
 801c3f4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c3f8:	fb16 fa0a 	smulbb	sl, r6, sl
 801c3fc:	78be      	ldrb	r6, [r7, #2]
 801c3fe:	f887 c000 	strb.w	ip, [r7]
 801c402:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c406:	fb06 aa02 	mla	sl, r6, r2, sl
 801c40a:	fb0c bc02 	mla	ip, ip, r2, fp
 801c40e:	fa1f fa8a 	uxth.w	sl, sl
 801c412:	fa1f fc8c 	uxth.w	ip, ip
 801c416:	f10a 0601 	add.w	r6, sl, #1
 801c41a:	f10c 0b01 	add.w	fp, ip, #1
 801c41e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c422:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c426:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c42a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c42e:	f887 a002 	strb.w	sl, [r7, #2]
 801c432:	f887 c001 	strb.w	ip, [r7, #1]
 801c436:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c438:	3703      	adds	r7, #3
 801c43a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c43e:	4414      	add	r4, r2
 801c440:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c442:	4410      	add	r0, r2
 801c444:	e6fb      	b.n	801c23e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c446:	b007      	add	sp, #28
 801c448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c44c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c450:	b085      	sub	sp, #20
 801c452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c456:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c458:	9203      	str	r2, [sp, #12]
 801c45a:	6870      	ldr	r0, [r6, #4]
 801c45c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c45e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c462:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c466:	9100      	str	r1, [sp, #0]
 801c468:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c46c:	fb00 2404 	mla	r4, r0, r4, r2
 801c470:	6832      	ldr	r2, [r6, #0]
 801c472:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c476:	4414      	add	r4, r2
 801c478:	682a      	ldr	r2, [r5, #0]
 801c47a:	9201      	str	r2, [sp, #4]
 801c47c:	686a      	ldr	r2, [r5, #4]
 801c47e:	3204      	adds	r2, #4
 801c480:	9202      	str	r2, [sp, #8]
 801c482:	9a00      	ldr	r2, [sp, #0]
 801c484:	2a00      	cmp	r2, #0
 801c486:	dc03      	bgt.n	801c490 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801c488:	9a03      	ldr	r2, [sp, #12]
 801c48a:	2a00      	cmp	r2, #0
 801c48c:	f340 8131 	ble.w	801c6f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c490:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c492:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c496:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c498:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	dd0e      	ble.n	801c4be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c4a0:	1405      	asrs	r5, r0, #16
 801c4a2:	d405      	bmi.n	801c4b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c4a4:	4575      	cmp	r5, lr
 801c4a6:	da03      	bge.n	801c4b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c4a8:	1415      	asrs	r5, r2, #16
 801c4aa:	d401      	bmi.n	801c4b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c4ac:	4545      	cmp	r5, r8
 801c4ae:	db07      	blt.n	801c4c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c4b0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c4b2:	3b01      	subs	r3, #1
 801c4b4:	3403      	adds	r4, #3
 801c4b6:	4428      	add	r0, r5
 801c4b8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c4ba:	442a      	add	r2, r5
 801c4bc:	e7ee      	b.n	801c49c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801c4be:	d06f      	beq.n	801c5a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801c4c0:	1e5d      	subs	r5, r3, #1
 801c4c2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c4c4:	fb06 0605 	mla	r6, r6, r5, r0
 801c4c8:	1436      	asrs	r6, r6, #16
 801c4ca:	d460      	bmi.n	801c58e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c4cc:	4576      	cmp	r6, lr
 801c4ce:	da5e      	bge.n	801c58e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c4d0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c4d2:	fb06 2505 	mla	r5, r6, r5, r2
 801c4d6:	142d      	asrs	r5, r5, #16
 801c4d8:	d459      	bmi.n	801c58e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c4da:	4545      	cmp	r5, r8
 801c4dc:	da57      	bge.n	801c58e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c4de:	1ce5      	adds	r5, r4, #3
 801c4e0:	469a      	mov	sl, r3
 801c4e2:	f1ba 0f00 	cmp.w	sl, #0
 801c4e6:	dd56      	ble.n	801c596 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801c4e8:	9901      	ldr	r1, [sp, #4]
 801c4ea:	1416      	asrs	r6, r2, #16
 801c4ec:	1407      	asrs	r7, r0, #16
 801c4ee:	fb0e 1606 	mla	r6, lr, r6, r1
 801c4f2:	9902      	ldr	r1, [sp, #8]
 801c4f4:	5df6      	ldrb	r6, [r6, r7]
 801c4f6:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801c4fa:	0e37      	lsrs	r7, r6, #24
 801c4fc:	2fff      	cmp	r7, #255	; 0xff
 801c4fe:	f000 80ef 	beq.w	801c6e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801c502:	fa5f fc87 	uxtb.w	ip, r7
 801c506:	b3d7      	cbz	r7, 801c57e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c508:	fa1f f78c 	uxth.w	r7, ip
 801c50c:	ea6f 0c0c 	mvn.w	ip, ip
 801c510:	fa5f fb86 	uxtb.w	fp, r6
 801c514:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c518:	fa5f fc8c 	uxtb.w	ip, ip
 801c51c:	fb1b fb07 	smulbb	fp, fp, r7
 801c520:	fb09 b90c 	mla	r9, r9, ip, fp
 801c524:	fa1f f989 	uxth.w	r9, r9
 801c528:	f109 0b01 	add.w	fp, r9, #1
 801c52c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c530:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c534:	fb1b fb0c 	smulbb	fp, fp, ip
 801c538:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c53c:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c540:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c544:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c548:	fb09 b907 	mla	r9, r9, r7, fp
 801c54c:	fa1f f989 	uxth.w	r9, r9
 801c550:	f109 0b01 	add.w	fp, r9, #1
 801c554:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c558:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c55c:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c560:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c564:	fb19 fc0c 	smulbb	ip, r9, ip
 801c568:	fb06 c607 	mla	r6, r6, r7, ip
 801c56c:	b2b6      	uxth	r6, r6
 801c56e:	f106 0c01 	add.w	ip, r6, #1
 801c572:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801c576:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c57a:	f805 cc01 	strb.w	ip, [r5, #-1]
 801c57e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c580:	3503      	adds	r5, #3
 801c582:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c586:	4408      	add	r0, r1
 801c588:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c58a:	440a      	add	r2, r1
 801c58c:	e7a9      	b.n	801c4e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c58e:	2600      	movs	r6, #0
 801c590:	1b9d      	subs	r5, r3, r6
 801c592:	2d00      	cmp	r5, #0
 801c594:	dc40      	bgt.n	801c618 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c596:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c59a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c59e:	441c      	add	r4, r3
 801c5a0:	9b00      	ldr	r3, [sp, #0]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	f340 80a5 	ble.w	801c6f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c5a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c5ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5b2:	eeb0 6a62 	vmov.f32	s12, s5
 801c5b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c5ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5c2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c5c6:	eeb0 6a43 	vmov.f32	s12, s6
 801c5ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5ce:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c5d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c5d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c5da:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c5e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c5e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c5ea:	ee12 2a90 	vmov	r2, s5
 801c5ee:	eef0 2a47 	vmov.f32	s5, s14
 801c5f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5f6:	ee13 2a10 	vmov	r2, s6
 801c5fa:	9311      	str	r3, [sp, #68]	; 0x44
 801c5fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c5fe:	eeb0 3a67 	vmov.f32	s6, s15
 801c602:	fb92 f3f3 	sdiv	r3, r2, r3
 801c606:	9312      	str	r3, [sp, #72]	; 0x48
 801c608:	9b00      	ldr	r3, [sp, #0]
 801c60a:	9a03      	ldr	r2, [sp, #12]
 801c60c:	3b01      	subs	r3, #1
 801c60e:	9300      	str	r3, [sp, #0]
 801c610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c612:	bf08      	it	eq
 801c614:	4613      	moveq	r3, r2
 801c616:	e734      	b.n	801c482 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c618:	1407      	asrs	r7, r0, #16
 801c61a:	d450      	bmi.n	801c6be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c61c:	4577      	cmp	r7, lr
 801c61e:	da4e      	bge.n	801c6be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c620:	1415      	asrs	r5, r2, #16
 801c622:	d44c      	bmi.n	801c6be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c624:	4545      	cmp	r5, r8
 801c626:	da4a      	bge.n	801c6be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c628:	9901      	ldr	r1, [sp, #4]
 801c62a:	fb0e 1505 	mla	r5, lr, r5, r1
 801c62e:	9902      	ldr	r1, [sp, #8]
 801c630:	5ded      	ldrb	r5, [r5, r7]
 801c632:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801c636:	0e2f      	lsrs	r7, r5, #24
 801c638:	2fff      	cmp	r7, #255	; 0xff
 801c63a:	d046      	beq.n	801c6ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801c63c:	fa5f f987 	uxtb.w	r9, r7
 801c640:	b3ef      	cbz	r7, 801c6be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c642:	fa1f fc89 	uxth.w	ip, r9
 801c646:	ea6f 0909 	mvn.w	r9, r9
 801c64a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c64e:	fa5f fb85 	uxtb.w	fp, r5
 801c652:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c656:	fa5f f989 	uxtb.w	r9, r9
 801c65a:	fb1b fb0c 	smulbb	fp, fp, ip
 801c65e:	fb0a ba09 	mla	sl, sl, r9, fp
 801c662:	fa1f fa8a 	uxth.w	sl, sl
 801c666:	f10a 0b01 	add.w	fp, sl, #1
 801c66a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c66e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c672:	f804 a007 	strb.w	sl, [r4, r7]
 801c676:	4427      	add	r7, r4
 801c678:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c67c:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801c680:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c684:	fb1b fb09 	smulbb	fp, fp, r9
 801c688:	fb0a ba0c 	mla	sl, sl, ip, fp
 801c68c:	fa1f fa8a 	uxth.w	sl, sl
 801c690:	f10a 0b01 	add.w	fp, sl, #1
 801c694:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c698:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c69c:	f887 a001 	strb.w	sl, [r7, #1]
 801c6a0:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c6a4:	fb1a f909 	smulbb	r9, sl, r9
 801c6a8:	fb05 950c 	mla	r5, r5, ip, r9
 801c6ac:	b2ad      	uxth	r5, r5
 801c6ae:	f105 0901 	add.w	r9, r5, #1
 801c6b2:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801c6b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c6ba:	f887 9002 	strb.w	r9, [r7, #2]
 801c6be:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c6c0:	3601      	adds	r6, #1
 801c6c2:	4408      	add	r0, r1
 801c6c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c6c6:	440a      	add	r2, r1
 801c6c8:	e762      	b.n	801c590 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c6ca:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c6ce:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801c6d2:	55e5      	strb	r5, [r4, r7]
 801c6d4:	4427      	add	r7, r4
 801c6d6:	0c2d      	lsrs	r5, r5, #16
 801c6d8:	f887 c001 	strb.w	ip, [r7, #1]
 801c6dc:	70bd      	strb	r5, [r7, #2]
 801c6de:	e7ee      	b.n	801c6be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c6e0:	0a37      	lsrs	r7, r6, #8
 801c6e2:	f805 6c03 	strb.w	r6, [r5, #-3]
 801c6e6:	0c36      	lsrs	r6, r6, #16
 801c6e8:	f805 7c02 	strb.w	r7, [r5, #-2]
 801c6ec:	f805 6c01 	strb.w	r6, [r5, #-1]
 801c6f0:	e745      	b.n	801c57e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c6f2:	b005      	add	sp, #20
 801c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c6f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c6f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6fc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c6fe:	9201      	str	r2, [sp, #4]
 801c700:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801c704:	6870      	ldr	r0, [r6, #4]
 801c706:	9200      	str	r2, [sp, #0]
 801c708:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c70c:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801c710:	fa1f fc85 	uxth.w	ip, r5
 801c714:	43ed      	mvns	r5, r5
 801c716:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c71a:	b2ed      	uxtb	r5, r5
 801c71c:	fb00 2404 	mla	r4, r0, r4, r2
 801c720:	6832      	ldr	r2, [r6, #0]
 801c722:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c726:	4414      	add	r4, r2
 801c728:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c72a:	f8d2 8000 	ldr.w	r8, [r2]
 801c72e:	2900      	cmp	r1, #0
 801c730:	dc03      	bgt.n	801c73a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801c732:	9a01      	ldr	r2, [sp, #4]
 801c734:	2a00      	cmp	r2, #0
 801c736:	f340 8104 	ble.w	801c942 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c73a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c73c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c742:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c746:	2b00      	cmp	r3, #0
 801c748:	dd0f      	ble.n	801c76a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c74a:	1406      	asrs	r6, r0, #16
 801c74c:	d406      	bmi.n	801c75c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c74e:	4576      	cmp	r6, lr
 801c750:	da04      	bge.n	801c75c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c752:	1416      	asrs	r6, r2, #16
 801c754:	d402      	bmi.n	801c75c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c756:	9f00      	ldr	r7, [sp, #0]
 801c758:	42be      	cmp	r6, r7
 801c75a:	db07      	blt.n	801c76c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c75c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c75e:	3b01      	subs	r3, #1
 801c760:	3403      	adds	r4, #3
 801c762:	4430      	add	r0, r6
 801c764:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c766:	4432      	add	r2, r6
 801c768:	e7ed      	b.n	801c746 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c76a:	d05f      	beq.n	801c82c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801c76c:	1e5e      	subs	r6, r3, #1
 801c76e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c770:	fb07 0706 	mla	r7, r7, r6, r0
 801c774:	143f      	asrs	r7, r7, #16
 801c776:	d450      	bmi.n	801c81a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c778:	4577      	cmp	r7, lr
 801c77a:	da4e      	bge.n	801c81a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c77c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c77e:	fb07 2606 	mla	r6, r7, r6, r2
 801c782:	1436      	asrs	r6, r6, #16
 801c784:	d449      	bmi.n	801c81a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c786:	9f00      	ldr	r7, [sp, #0]
 801c788:	42be      	cmp	r6, r7
 801c78a:	da46      	bge.n	801c81a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c78c:	1ce6      	adds	r6, r4, #3
 801c78e:	4699      	mov	r9, r3
 801c790:	f1b9 0f00 	cmp.w	r9, #0
 801c794:	f106 0603 	add.w	r6, r6, #3
 801c798:	dd43      	ble.n	801c822 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c79a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c79e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c7a2:	1417      	asrs	r7, r2, #16
 801c7a4:	f109 39ff 	add.w	r9, r9, #4294967295
 801c7a8:	fb1b fb05 	smulbb	fp, fp, r5
 801c7ac:	fb0e a707 	mla	r7, lr, r7, sl
 801c7b0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c7b4:	eb08 0a07 	add.w	sl, r8, r7
 801c7b8:	f818 7007 	ldrb.w	r7, [r8, r7]
 801c7bc:	fb07 b70c 	mla	r7, r7, ip, fp
 801c7c0:	b2bf      	uxth	r7, r7
 801c7c2:	f107 0b01 	add.w	fp, r7, #1
 801c7c6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c7ca:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c7ce:	fb1b fb05 	smulbb	fp, fp, r5
 801c7d2:	123f      	asrs	r7, r7, #8
 801c7d4:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c7d8:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c7dc:	fb07 b70c 	mla	r7, r7, ip, fp
 801c7e0:	b2bf      	uxth	r7, r7
 801c7e2:	f107 0b01 	add.w	fp, r7, #1
 801c7e6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c7ea:	123f      	asrs	r7, r7, #8
 801c7ec:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c7f0:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c7f4:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c7f8:	fb1a fa05 	smulbb	sl, sl, r5
 801c7fc:	fb07 a70c 	mla	r7, r7, ip, sl
 801c800:	b2bf      	uxth	r7, r7
 801c802:	f107 0a01 	add.w	sl, r7, #1
 801c806:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c80a:	123f      	asrs	r7, r7, #8
 801c80c:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c810:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c812:	4438      	add	r0, r7
 801c814:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c816:	443a      	add	r2, r7
 801c818:	e7ba      	b.n	801c790 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c81a:	2700      	movs	r7, #0
 801c81c:	1bde      	subs	r6, r3, r7
 801c81e:	2e00      	cmp	r6, #0
 801c820:	dc3f      	bgt.n	801c8a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c822:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c826:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c82a:	441c      	add	r4, r3
 801c82c:	2900      	cmp	r1, #0
 801c82e:	f340 8088 	ble.w	801c942 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c838:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c83c:	3901      	subs	r1, #1
 801c83e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c842:	eef0 6a62 	vmov.f32	s13, s5
 801c846:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c84a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c84e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c852:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801c856:	eef0 6a43 	vmov.f32	s13, s6
 801c85a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c85e:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801c862:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c866:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c86a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c86e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c872:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c876:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c87a:	ee12 2a90 	vmov	r2, s5
 801c87e:	eef0 2a47 	vmov.f32	s5, s14
 801c882:	fb92 f3f3 	sdiv	r3, r2, r3
 801c886:	ee13 2a10 	vmov	r2, s6
 801c88a:	930f      	str	r3, [sp, #60]	; 0x3c
 801c88c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c88e:	eeb0 3a67 	vmov.f32	s6, s15
 801c892:	fb92 f3f3 	sdiv	r3, r2, r3
 801c896:	9a01      	ldr	r2, [sp, #4]
 801c898:	9310      	str	r3, [sp, #64]	; 0x40
 801c89a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c89c:	bf08      	it	eq
 801c89e:	4613      	moveq	r3, r2
 801c8a0:	e745      	b.n	801c72e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c8a2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c8a6:	d446      	bmi.n	801c936 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c8a8:	45f2      	cmp	sl, lr
 801c8aa:	da44      	bge.n	801c936 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c8ac:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c8b0:	d441      	bmi.n	801c936 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c8b2:	9e00      	ldr	r6, [sp, #0]
 801c8b4:	45b1      	cmp	r9, r6
 801c8b6:	da3e      	bge.n	801c936 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c8b8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c8bc:	fb0e a909 	mla	r9, lr, r9, sl
 801c8c0:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c8c4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c8c8:	fb1b fb05 	smulbb	fp, fp, r5
 801c8cc:	eb08 0a09 	add.w	sl, r8, r9
 801c8d0:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c8d4:	fb09 b90c 	mla	r9, r9, ip, fp
 801c8d8:	fa1f f989 	uxth.w	r9, r9
 801c8dc:	f109 0b01 	add.w	fp, r9, #1
 801c8e0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c8e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8e8:	f804 9006 	strb.w	r9, [r4, r6]
 801c8ec:	4426      	add	r6, r4
 801c8ee:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c8f2:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c8f6:	fb1b fb05 	smulbb	fp, fp, r5
 801c8fa:	fb09 b90c 	mla	r9, r9, ip, fp
 801c8fe:	fa1f f989 	uxth.w	r9, r9
 801c902:	f109 0b01 	add.w	fp, r9, #1
 801c906:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c90a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c90e:	f886 9001 	strb.w	r9, [r6, #1]
 801c912:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c916:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c91a:	fb1a fa05 	smulbb	sl, sl, r5
 801c91e:	fb09 a90c 	mla	r9, r9, ip, sl
 801c922:	fa1f f989 	uxth.w	r9, r9
 801c926:	f109 0a01 	add.w	sl, r9, #1
 801c92a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c92e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c932:	f886 9002 	strb.w	r9, [r6, #2]
 801c936:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c938:	3701      	adds	r7, #1
 801c93a:	4430      	add	r0, r6
 801c93c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c93e:	4432      	add	r2, r6
 801c940:	e76c      	b.n	801c81c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801c942:	b003      	add	sp, #12
 801c944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c948 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c94c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c94e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c952:	9201      	str	r2, [sp, #4]
 801c954:	6868      	ldr	r0, [r5, #4]
 801c956:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801c95a:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801c95e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c962:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801c966:	fb00 2404 	mla	r4, r0, r4, r2
 801c96a:	682a      	ldr	r2, [r5, #0]
 801c96c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c970:	4414      	add	r4, r2
 801c972:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c974:	f8d2 9000 	ldr.w	r9, [r2]
 801c978:	2900      	cmp	r1, #0
 801c97a:	dc03      	bgt.n	801c984 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c97c:	9a01      	ldr	r2, [sp, #4]
 801c97e:	2a00      	cmp	r2, #0
 801c980:	f340 80a8 	ble.w	801cad4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c984:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c986:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c98a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c98c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c990:	2b00      	cmp	r3, #0
 801c992:	dd0c      	ble.n	801c9ae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c994:	1405      	asrs	r5, r0, #16
 801c996:	d405      	bmi.n	801c9a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c998:	4565      	cmp	r5, ip
 801c99a:	da03      	bge.n	801c9a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c99c:	1415      	asrs	r5, r2, #16
 801c99e:	d401      	bmi.n	801c9a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c9a0:	4575      	cmp	r5, lr
 801c9a2:	db05      	blt.n	801c9b0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801c9a4:	4438      	add	r0, r7
 801c9a6:	4432      	add	r2, r6
 801c9a8:	3b01      	subs	r3, #1
 801c9aa:	3403      	adds	r4, #3
 801c9ac:	e7f0      	b.n	801c990 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c9ae:	d03a      	beq.n	801ca26 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801c9b0:	1e5d      	subs	r5, r3, #1
 801c9b2:	fb07 0805 	mla	r8, r7, r5, r0
 801c9b6:	ea5f 4828 	movs.w	r8, r8, asr #16
 801c9ba:	d429      	bmi.n	801ca10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c9bc:	45e0      	cmp	r8, ip
 801c9be:	da27      	bge.n	801ca10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c9c0:	fb06 2505 	mla	r5, r6, r5, r2
 801c9c4:	142d      	asrs	r5, r5, #16
 801c9c6:	d423      	bmi.n	801ca10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c9c8:	4575      	cmp	r5, lr
 801c9ca:	da21      	bge.n	801ca10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c9cc:	f104 0803 	add.w	r8, r4, #3
 801c9d0:	469a      	mov	sl, r3
 801c9d2:	f1ba 0f00 	cmp.w	sl, #0
 801c9d6:	f108 0803 	add.w	r8, r8, #3
 801c9da:	dd1f      	ble.n	801ca1c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801c9dc:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c9e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c9e4:	1415      	asrs	r5, r2, #16
 801c9e6:	4438      	add	r0, r7
 801c9e8:	4432      	add	r2, r6
 801c9ea:	fb0c b505 	mla	r5, ip, r5, fp
 801c9ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c9f2:	eb09 0b05 	add.w	fp, r9, r5
 801c9f6:	f819 5005 	ldrb.w	r5, [r9, r5]
 801c9fa:	f808 5c06 	strb.w	r5, [r8, #-6]
 801c9fe:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801ca02:	f808 5c05 	strb.w	r5, [r8, #-5]
 801ca06:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801ca0a:	f808 5c04 	strb.w	r5, [r8, #-4]
 801ca0e:	e7e0      	b.n	801c9d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ca10:	2500      	movs	r5, #0
 801ca12:	eba3 0805 	sub.w	r8, r3, r5
 801ca16:	f1b8 0f00 	cmp.w	r8, #0
 801ca1a:	dc38      	bgt.n	801ca8e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801ca1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ca20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca24:	441c      	add	r4, r3
 801ca26:	2900      	cmp	r1, #0
 801ca28:	dd54      	ble.n	801cad4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801ca2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ca30:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca34:	3901      	subs	r1, #1
 801ca36:	eeb0 6a62 	vmov.f32	s12, s5
 801ca3a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ca3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca42:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca46:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801ca4a:	eeb0 6a43 	vmov.f32	s12, s6
 801ca4e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca52:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801ca56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ca5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca6e:	ee12 2a90 	vmov	r2, s5
 801ca72:	eef0 2a47 	vmov.f32	s5, s14
 801ca76:	fb92 f7f3 	sdiv	r7, r2, r3
 801ca7a:	ee13 2a10 	vmov	r2, s6
 801ca7e:	eeb0 3a67 	vmov.f32	s6, s15
 801ca82:	fb92 f6f3 	sdiv	r6, r2, r3
 801ca86:	9a01      	ldr	r2, [sp, #4]
 801ca88:	bf08      	it	eq
 801ca8a:	4613      	moveq	r3, r2
 801ca8c:	e774      	b.n	801c978 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801ca8e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ca92:	d41b      	bmi.n	801cacc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ca94:	45e2      	cmp	sl, ip
 801ca96:	da19      	bge.n	801cacc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ca98:	ea5f 4822 	movs.w	r8, r2, asr #16
 801ca9c:	d416      	bmi.n	801cacc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ca9e:	45f0      	cmp	r8, lr
 801caa0:	da14      	bge.n	801cacc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801caa2:	fb0c a808 	mla	r8, ip, r8, sl
 801caa6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801caaa:	f819 b008 	ldrb.w	fp, [r9, r8]
 801caae:	eb09 0a08 	add.w	sl, r9, r8
 801cab2:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801cab6:	f804 b008 	strb.w	fp, [r4, r8]
 801caba:	44a0      	add	r8, r4
 801cabc:	f89a b001 	ldrb.w	fp, [sl, #1]
 801cac0:	f888 b001 	strb.w	fp, [r8, #1]
 801cac4:	f89a a002 	ldrb.w	sl, [sl, #2]
 801cac8:	f888 a002 	strb.w	sl, [r8, #2]
 801cacc:	4438      	add	r0, r7
 801cace:	4432      	add	r2, r6
 801cad0:	3501      	adds	r5, #1
 801cad2:	e79e      	b.n	801ca12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801cad4:	b003      	add	sp, #12
 801cad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cada <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cade:	b085      	sub	sp, #20
 801cae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cae4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cae6:	9202      	str	r2, [sp, #8]
 801cae8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801caec:	6860      	ldr	r0, [r4, #4]
 801caee:	9203      	str	r2, [sp, #12]
 801caf0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801caf4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801caf8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801cafc:	fb00 2505 	mla	r5, r0, r5, r2
 801cb00:	6822      	ldr	r2, [r4, #0]
 801cb02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cb06:	4415      	add	r5, r2
 801cb08:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cb0a:	6812      	ldr	r2, [r2, #0]
 801cb0c:	9201      	str	r2, [sp, #4]
 801cb0e:	2900      	cmp	r1, #0
 801cb10:	dc03      	bgt.n	801cb1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801cb12:	9a02      	ldr	r2, [sp, #8]
 801cb14:	2a00      	cmp	r2, #0
 801cb16:	f340 811c 	ble.w	801cd52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cb1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cb1c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cb20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb22:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	dd0e      	ble.n	801cb48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cb2a:	1422      	asrs	r2, r4, #16
 801cb2c:	d405      	bmi.n	801cb3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cb2e:	4572      	cmp	r2, lr
 801cb30:	da03      	bge.n	801cb3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cb32:	1402      	asrs	r2, r0, #16
 801cb34:	d401      	bmi.n	801cb3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cb36:	4542      	cmp	r2, r8
 801cb38:	db07      	blt.n	801cb4a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801cb3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cb3c:	3b01      	subs	r3, #1
 801cb3e:	3503      	adds	r5, #3
 801cb40:	4414      	add	r4, r2
 801cb42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cb44:	4410      	add	r0, r2
 801cb46:	e7ee      	b.n	801cb26 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801cb48:	d072      	beq.n	801cc30 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801cb4a:	1e5a      	subs	r2, r3, #1
 801cb4c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cb4e:	fb06 4602 	mla	r6, r6, r2, r4
 801cb52:	1436      	asrs	r6, r6, #16
 801cb54:	d461      	bmi.n	801cc1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cb56:	4576      	cmp	r6, lr
 801cb58:	da5f      	bge.n	801cc1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cb5a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cb5c:	fb06 0202 	mla	r2, r6, r2, r0
 801cb60:	1412      	asrs	r2, r2, #16
 801cb62:	d45a      	bmi.n	801cc1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cb64:	4542      	cmp	r2, r8
 801cb66:	da58      	bge.n	801cc1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cb68:	1cef      	adds	r7, r5, #3
 801cb6a:	4699      	mov	r9, r3
 801cb6c:	f1b9 0f00 	cmp.w	r9, #0
 801cb70:	dd59      	ble.n	801cc26 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801cb72:	1426      	asrs	r6, r4, #16
 801cb74:	1402      	asrs	r2, r0, #16
 801cb76:	fb0e 6202 	mla	r2, lr, r2, r6
 801cb7a:	9e01      	ldr	r6, [sp, #4]
 801cb7c:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801cb80:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801cb84:	d041      	beq.n	801cc0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801cb86:	9a03      	ldr	r2, [sp, #12]
 801cb88:	fa5f fb86 	uxtb.w	fp, r6
 801cb8c:	fb02 fc0c 	mul.w	ip, r2, ip
 801cb90:	f10c 0201 	add.w	r2, ip, #1
 801cb94:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801cb98:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801cb9c:	1212      	asrs	r2, r2, #8
 801cb9e:	fa1f fa82 	uxth.w	sl, r2
 801cba2:	43d2      	mvns	r2, r2
 801cba4:	fb1b fb0a 	smulbb	fp, fp, sl
 801cba8:	b2d2      	uxtb	r2, r2
 801cbaa:	fb0c bc02 	mla	ip, ip, r2, fp
 801cbae:	fa1f fc8c 	uxth.w	ip, ip
 801cbb2:	f10c 0b01 	add.w	fp, ip, #1
 801cbb6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cbba:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cbbe:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cbc2:	fb1b fb0a 	smulbb	fp, fp, sl
 801cbc6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cbca:	fb16 fa0a 	smulbb	sl, r6, sl
 801cbce:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cbd2:	f807 cc03 	strb.w	ip, [r7, #-3]
 801cbd6:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801cbda:	fb06 aa02 	mla	sl, r6, r2, sl
 801cbde:	fb0c bc02 	mla	ip, ip, r2, fp
 801cbe2:	fa1f fa8a 	uxth.w	sl, sl
 801cbe6:	fa1f fc8c 	uxth.w	ip, ip
 801cbea:	f10a 0601 	add.w	r6, sl, #1
 801cbee:	f10c 0b01 	add.w	fp, ip, #1
 801cbf2:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801cbf6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cbfa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cbfe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cc02:	f807 ac01 	strb.w	sl, [r7, #-1]
 801cc06:	f807 cc02 	strb.w	ip, [r7, #-2]
 801cc0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cc0c:	3703      	adds	r7, #3
 801cc0e:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc12:	4414      	add	r4, r2
 801cc14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cc16:	4410      	add	r0, r2
 801cc18:	e7a8      	b.n	801cb6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cc1a:	f04f 0c00 	mov.w	ip, #0
 801cc1e:	eba3 020c 	sub.w	r2, r3, ip
 801cc22:	2a00      	cmp	r2, #0
 801cc24:	dc3d      	bgt.n	801cca2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801cc26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc2e:	441d      	add	r5, r3
 801cc30:	2900      	cmp	r1, #0
 801cc32:	f340 808e 	ble.w	801cd52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cc36:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc3c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc40:	3901      	subs	r1, #1
 801cc42:	eeb0 6a62 	vmov.f32	s12, s5
 801cc46:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cc4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc4e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc52:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cc56:	eeb0 6a43 	vmov.f32	s12, s6
 801cc5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc5e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cc62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cc66:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cc6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cc6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cc72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc7a:	ee12 2a90 	vmov	r2, s5
 801cc7e:	eef0 2a47 	vmov.f32	s5, s14
 801cc82:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc86:	ee13 2a10 	vmov	r2, s6
 801cc8a:	9311      	str	r3, [sp, #68]	; 0x44
 801cc8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc8e:	eeb0 3a67 	vmov.f32	s6, s15
 801cc92:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc96:	9a02      	ldr	r2, [sp, #8]
 801cc98:	9312      	str	r3, [sp, #72]	; 0x48
 801cc9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc9c:	bf08      	it	eq
 801cc9e:	4613      	moveq	r3, r2
 801cca0:	e735      	b.n	801cb0e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801cca2:	1426      	asrs	r6, r4, #16
 801cca4:	d44e      	bmi.n	801cd44 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cca6:	4576      	cmp	r6, lr
 801cca8:	da4c      	bge.n	801cd44 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ccaa:	1402      	asrs	r2, r0, #16
 801ccac:	d44a      	bmi.n	801cd44 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ccae:	4542      	cmp	r2, r8
 801ccb0:	da48      	bge.n	801cd44 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ccb2:	fb0e 6202 	mla	r2, lr, r2, r6
 801ccb6:	9e01      	ldr	r6, [sp, #4]
 801ccb8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801ccbc:	0e3a      	lsrs	r2, r7, #24
 801ccbe:	d041      	beq.n	801cd44 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ccc0:	9e03      	ldr	r6, [sp, #12]
 801ccc2:	fa5f fb87 	uxtb.w	fp, r7
 801ccc6:	4372      	muls	r2, r6
 801ccc8:	1c56      	adds	r6, r2, #1
 801ccca:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ccce:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801ccd2:	1212      	asrs	r2, r2, #8
 801ccd4:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ccd8:	fa1f fa82 	uxth.w	sl, r2
 801ccdc:	43d2      	mvns	r2, r2
 801ccde:	fb1b fb0a 	smulbb	fp, fp, sl
 801cce2:	b2d2      	uxtb	r2, r2
 801cce4:	fb09 b902 	mla	r9, r9, r2, fp
 801cce8:	fa1f f989 	uxth.w	r9, r9
 801ccec:	f109 0b01 	add.w	fp, r9, #1
 801ccf0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ccf4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ccf8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ccfc:	fb1b fb0a 	smulbb	fp, fp, sl
 801cd00:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd04:	fb17 fa0a 	smulbb	sl, r7, sl
 801cd08:	f805 9006 	strb.w	r9, [r5, r6]
 801cd0c:	442e      	add	r6, r5
 801cd0e:	78b7      	ldrb	r7, [r6, #2]
 801cd10:	f896 9001 	ldrb.w	r9, [r6, #1]
 801cd14:	fb07 aa02 	mla	sl, r7, r2, sl
 801cd18:	fb09 b902 	mla	r9, r9, r2, fp
 801cd1c:	fa1f fa8a 	uxth.w	sl, sl
 801cd20:	fa1f f989 	uxth.w	r9, r9
 801cd24:	f10a 0701 	add.w	r7, sl, #1
 801cd28:	f109 0b01 	add.w	fp, r9, #1
 801cd2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cd30:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cd34:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cd38:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd3c:	f886 a002 	strb.w	sl, [r6, #2]
 801cd40:	f886 9001 	strb.w	r9, [r6, #1]
 801cd44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd46:	f10c 0c01 	add.w	ip, ip, #1
 801cd4a:	4414      	add	r4, r2
 801cd4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd4e:	4410      	add	r0, r2
 801cd50:	e765      	b.n	801cc1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801cd52:	b005      	add	sp, #20
 801cd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd58 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd5c:	b085      	sub	sp, #20
 801cd5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cd62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cd64:	9203      	str	r2, [sp, #12]
 801cd66:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801cd6a:	6860      	ldr	r0, [r4, #4]
 801cd6c:	9201      	str	r2, [sp, #4]
 801cd6e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801cd72:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801cd76:	fb00 2505 	mla	r5, r0, r5, r2
 801cd7a:	6822      	ldr	r2, [r4, #0]
 801cd7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd80:	4415      	add	r5, r2
 801cd82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cd84:	6812      	ldr	r2, [r2, #0]
 801cd86:	9202      	str	r2, [sp, #8]
 801cd88:	2900      	cmp	r1, #0
 801cd8a:	dc03      	bgt.n	801cd94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801cd8c:	9a03      	ldr	r2, [sp, #12]
 801cd8e:	2a00      	cmp	r2, #0
 801cd90:	f340 8122 	ble.w	801cfd8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801cd94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cd96:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cd9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cd9c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cda0:	2b00      	cmp	r3, #0
 801cda2:	dd0f      	ble.n	801cdc4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cda4:	1422      	asrs	r2, r4, #16
 801cda6:	d406      	bmi.n	801cdb6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cda8:	4572      	cmp	r2, lr
 801cdaa:	da04      	bge.n	801cdb6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cdac:	1402      	asrs	r2, r0, #16
 801cdae:	d402      	bmi.n	801cdb6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cdb0:	9e01      	ldr	r6, [sp, #4]
 801cdb2:	42b2      	cmp	r2, r6
 801cdb4:	db07      	blt.n	801cdc6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cdb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cdb8:	3b01      	subs	r3, #1
 801cdba:	3503      	adds	r5, #3
 801cdbc:	4414      	add	r4, r2
 801cdbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cdc0:	4410      	add	r0, r2
 801cdc2:	e7ed      	b.n	801cda0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801cdc4:	d06e      	beq.n	801cea4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801cdc6:	1e5a      	subs	r2, r3, #1
 801cdc8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cdca:	fb06 4602 	mla	r6, r6, r2, r4
 801cdce:	1436      	asrs	r6, r6, #16
 801cdd0:	d45d      	bmi.n	801ce8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cdd2:	4576      	cmp	r6, lr
 801cdd4:	da5b      	bge.n	801ce8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cdd6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cdd8:	fb06 0202 	mla	r2, r6, r2, r0
 801cddc:	1412      	asrs	r2, r2, #16
 801cdde:	d456      	bmi.n	801ce8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cde0:	9e01      	ldr	r6, [sp, #4]
 801cde2:	42b2      	cmp	r2, r6
 801cde4:	da53      	bge.n	801ce8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cde6:	1cee      	adds	r6, r5, #3
 801cde8:	469a      	mov	sl, r3
 801cdea:	f1ba 0f00 	cmp.w	sl, #0
 801cdee:	dd54      	ble.n	801ce9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cdf0:	1427      	asrs	r7, r4, #16
 801cdf2:	1402      	asrs	r2, r0, #16
 801cdf4:	fb0e 7202 	mla	r2, lr, r2, r7
 801cdf8:	9f02      	ldr	r7, [sp, #8]
 801cdfa:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801cdfe:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801ce02:	d03c      	beq.n	801ce7e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801ce04:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ce08:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ce0c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ce10:	fa5f f28c 	uxtb.w	r2, ip
 801ce14:	b2ff      	uxtb	r7, r7
 801ce16:	f000 80d8 	beq.w	801cfca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ce1a:	fa1f f882 	uxth.w	r8, r2
 801ce1e:	43d2      	mvns	r2, r2
 801ce20:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801ce24:	fb17 f708 	smulbb	r7, r7, r8
 801ce28:	b2d2      	uxtb	r2, r2
 801ce2a:	fb19 f908 	smulbb	r9, r9, r8
 801ce2e:	fb0c 7702 	mla	r7, ip, r2, r7
 801ce32:	fb1b f808 	smulbb	r8, fp, r8
 801ce36:	b2bf      	uxth	r7, r7
 801ce38:	f107 0c01 	add.w	ip, r7, #1
 801ce3c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ce40:	123f      	asrs	r7, r7, #8
 801ce42:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ce46:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801ce4a:	fb07 9902 	mla	r9, r7, r2, r9
 801ce4e:	fa1f f989 	uxth.w	r9, r9
 801ce52:	f109 0701 	add.w	r7, r9, #1
 801ce56:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ce5a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ce5e:	fb07 8802 	mla	r8, r7, r2, r8
 801ce62:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce66:	fa1f f888 	uxth.w	r8, r8
 801ce6a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ce6e:	f108 0201 	add.w	r2, r8, #1
 801ce72:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ce76:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ce7a:	f806 8c01 	strb.w	r8, [r6, #-1]
 801ce7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ce80:	3603      	adds	r6, #3
 801ce82:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ce86:	4414      	add	r4, r2
 801ce88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ce8a:	4410      	add	r0, r2
 801ce8c:	e7ad      	b.n	801cdea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801ce8e:	f04f 0c00 	mov.w	ip, #0
 801ce92:	eba3 020c 	sub.w	r2, r3, ip
 801ce96:	2a00      	cmp	r2, #0
 801ce98:	dc3d      	bgt.n	801cf16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801ce9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ce9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cea2:	441d      	add	r5, r3
 801cea4:	2900      	cmp	r1, #0
 801cea6:	f340 8097 	ble.w	801cfd8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ceaa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ceae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ceb0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ceb4:	3901      	subs	r1, #1
 801ceb6:	eeb0 6a62 	vmov.f32	s12, s5
 801ceba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cebe:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cec2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cec6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ceca:	eeb0 6a43 	vmov.f32	s12, s6
 801cece:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ced2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ced6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ceda:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cede:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cee2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cee6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ceea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ceee:	ee12 2a90 	vmov	r2, s5
 801cef2:	eef0 2a47 	vmov.f32	s5, s14
 801cef6:	fb92 f3f3 	sdiv	r3, r2, r3
 801cefa:	ee13 2a10 	vmov	r2, s6
 801cefe:	9311      	str	r3, [sp, #68]	; 0x44
 801cf00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf02:	eeb0 3a67 	vmov.f32	s6, s15
 801cf06:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf0a:	9a03      	ldr	r2, [sp, #12]
 801cf0c:	9312      	str	r3, [sp, #72]	; 0x48
 801cf0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf10:	bf08      	it	eq
 801cf12:	4613      	moveq	r3, r2
 801cf14:	e738      	b.n	801cd88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801cf16:	1426      	asrs	r6, r4, #16
 801cf18:	d448      	bmi.n	801cfac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cf1a:	4576      	cmp	r6, lr
 801cf1c:	da46      	bge.n	801cfac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cf1e:	1402      	asrs	r2, r0, #16
 801cf20:	d444      	bmi.n	801cfac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cf22:	9f01      	ldr	r7, [sp, #4]
 801cf24:	42ba      	cmp	r2, r7
 801cf26:	da41      	bge.n	801cfac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cf28:	fb0e 6202 	mla	r2, lr, r2, r6
 801cf2c:	9e02      	ldr	r6, [sp, #8]
 801cf2e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801cf32:	0e3a      	lsrs	r2, r7, #24
 801cf34:	d03a      	beq.n	801cfac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cf36:	2aff      	cmp	r2, #255	; 0xff
 801cf38:	b2d6      	uxtb	r6, r2
 801cf3a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cf3e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801cf42:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801cf46:	b2ff      	uxtb	r7, r7
 801cf48:	d037      	beq.n	801cfba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801cf4a:	fa1f f986 	uxth.w	r9, r6
 801cf4e:	4462      	add	r2, ip
 801cf50:	43f6      	mvns	r6, r6
 801cf52:	f815 8002 	ldrb.w	r8, [r5, r2]
 801cf56:	fb17 f709 	smulbb	r7, r7, r9
 801cf5a:	fb1a fa09 	smulbb	sl, sl, r9
 801cf5e:	b2f6      	uxtb	r6, r6
 801cf60:	fb1b f909 	smulbb	r9, fp, r9
 801cf64:	fb08 7706 	mla	r7, r8, r6, r7
 801cf68:	b2bf      	uxth	r7, r7
 801cf6a:	f107 0801 	add.w	r8, r7, #1
 801cf6e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801cf72:	123f      	asrs	r7, r7, #8
 801cf74:	54af      	strb	r7, [r5, r2]
 801cf76:	442a      	add	r2, r5
 801cf78:	7857      	ldrb	r7, [r2, #1]
 801cf7a:	fb07 aa06 	mla	sl, r7, r6, sl
 801cf7e:	fa1f fa8a 	uxth.w	sl, sl
 801cf82:	f10a 0701 	add.w	r7, sl, #1
 801cf86:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cf8a:	7897      	ldrb	r7, [r2, #2]
 801cf8c:	fb07 9906 	mla	r9, r7, r6, r9
 801cf90:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cf94:	fa1f f989 	uxth.w	r9, r9
 801cf98:	f882 a001 	strb.w	sl, [r2, #1]
 801cf9c:	f109 0601 	add.w	r6, r9, #1
 801cfa0:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801cfa4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cfa8:	f882 9002 	strb.w	r9, [r2, #2]
 801cfac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cfae:	f10c 0c01 	add.w	ip, ip, #1
 801cfb2:	4414      	add	r4, r2
 801cfb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cfb6:	4410      	add	r0, r2
 801cfb8:	e76b      	b.n	801ce92 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801cfba:	4462      	add	r2, ip
 801cfbc:	54af      	strb	r7, [r5, r2]
 801cfbe:	442a      	add	r2, r5
 801cfc0:	f882 a001 	strb.w	sl, [r2, #1]
 801cfc4:	f882 b002 	strb.w	fp, [r2, #2]
 801cfc8:	e7f0      	b.n	801cfac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cfca:	f806 7c03 	strb.w	r7, [r6, #-3]
 801cfce:	f806 9c02 	strb.w	r9, [r6, #-2]
 801cfd2:	f806 bc01 	strb.w	fp, [r6, #-1]
 801cfd6:	e752      	b.n	801ce7e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801cfd8:	b005      	add	sp, #20
 801cfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801cfe0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfe4:	b087      	sub	sp, #28
 801cfe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cfea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cfec:	9204      	str	r2, [sp, #16]
 801cfee:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801cff2:	6860      	ldr	r0, [r4, #4]
 801cff4:	9205      	str	r2, [sp, #20]
 801cff6:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801cffa:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801cffe:	9101      	str	r1, [sp, #4]
 801d000:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d004:	fb00 2505 	mla	r5, r0, r5, r2
 801d008:	6822      	ldr	r2, [r4, #0]
 801d00a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d00e:	4415      	add	r5, r2
 801d010:	f10e 0201 	add.w	r2, lr, #1
 801d014:	f022 0201 	bic.w	r2, r2, #1
 801d018:	9202      	str	r2, [sp, #8]
 801d01a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d01c:	6812      	ldr	r2, [r2, #0]
 801d01e:	9203      	str	r2, [sp, #12]
 801d020:	9a01      	ldr	r2, [sp, #4]
 801d022:	2a00      	cmp	r2, #0
 801d024:	dc03      	bgt.n	801d02e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801d026:	9a04      	ldr	r2, [sp, #16]
 801d028:	2a00      	cmp	r2, #0
 801d02a:	f340 8132 	ble.w	801d292 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d02e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d030:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d036:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	dd0e      	ble.n	801d05c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d03e:	1422      	asrs	r2, r4, #16
 801d040:	d405      	bmi.n	801d04e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d042:	4596      	cmp	lr, r2
 801d044:	dd03      	ble.n	801d04e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d046:	1402      	asrs	r2, r0, #16
 801d048:	d401      	bmi.n	801d04e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d04a:	4542      	cmp	r2, r8
 801d04c:	db07      	blt.n	801d05e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801d04e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d050:	3b01      	subs	r3, #1
 801d052:	3503      	adds	r5, #3
 801d054:	4414      	add	r4, r2
 801d056:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d058:	4410      	add	r0, r2
 801d05a:	e7ee      	b.n	801d03a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801d05c:	d010      	beq.n	801d080 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d05e:	1e5a      	subs	r2, r3, #1
 801d060:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d062:	fb06 4602 	mla	r6, r6, r2, r4
 801d066:	1436      	asrs	r6, r6, #16
 801d068:	d546      	bpl.n	801d0f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801d06a:	4699      	mov	r9, r3
 801d06c:	462e      	mov	r6, r5
 801d06e:	f1b9 0f00 	cmp.w	r9, #0
 801d072:	f300 80ac 	bgt.w	801d1ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801d076:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d07a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d07e:	441d      	add	r5, r3
 801d080:	9b01      	ldr	r3, [sp, #4]
 801d082:	2b00      	cmp	r3, #0
 801d084:	f340 8105 	ble.w	801d292 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d088:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d08c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d08e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d092:	eeb0 6a62 	vmov.f32	s12, s5
 801d096:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d09a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d09e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0a2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d0a6:	eeb0 6a43 	vmov.f32	s12, s6
 801d0aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0ae:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d0b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d0b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d0ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d0be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d0c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d0c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d0ca:	ee12 2a90 	vmov	r2, s5
 801d0ce:	eef0 2a47 	vmov.f32	s5, s14
 801d0d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d0d6:	ee13 2a10 	vmov	r2, s6
 801d0da:	9313      	str	r3, [sp, #76]	; 0x4c
 801d0dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0de:	eeb0 3a67 	vmov.f32	s6, s15
 801d0e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d0e6:	9314      	str	r3, [sp, #80]	; 0x50
 801d0e8:	9b01      	ldr	r3, [sp, #4]
 801d0ea:	9a04      	ldr	r2, [sp, #16]
 801d0ec:	3b01      	subs	r3, #1
 801d0ee:	9301      	str	r3, [sp, #4]
 801d0f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0f2:	bf08      	it	eq
 801d0f4:	4613      	moveq	r3, r2
 801d0f6:	e793      	b.n	801d020 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801d0f8:	45b6      	cmp	lr, r6
 801d0fa:	ddb6      	ble.n	801d06a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d0fc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d0fe:	fb06 0202 	mla	r2, r6, r2, r0
 801d102:	1412      	asrs	r2, r2, #16
 801d104:	d4b1      	bmi.n	801d06a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d106:	4542      	cmp	r2, r8
 801d108:	daaf      	bge.n	801d06a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d10a:	1cee      	adds	r6, r5, #3
 801d10c:	4699      	mov	r9, r3
 801d10e:	f1b9 0f00 	cmp.w	r9, #0
 801d112:	ddb0      	ble.n	801d076 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801d114:	1422      	asrs	r2, r4, #16
 801d116:	9902      	ldr	r1, [sp, #8]
 801d118:	1407      	asrs	r7, r0, #16
 801d11a:	fb01 2707 	mla	r7, r1, r7, r2
 801d11e:	9903      	ldr	r1, [sp, #12]
 801d120:	087a      	lsrs	r2, r7, #1
 801d122:	5c8a      	ldrb	r2, [r1, r2]
 801d124:	07f9      	lsls	r1, r7, #31
 801d126:	bf54      	ite	pl
 801d128:	f002 020f 	andpl.w	r2, r2, #15
 801d12c:	1112      	asrmi	r2, r2, #4
 801d12e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d132:	b2d2      	uxtb	r2, r2
 801d134:	2a00      	cmp	r2, #0
 801d136:	d042      	beq.n	801d1be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801d138:	4957      	ldr	r1, [pc, #348]	; (801d298 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d13a:	680f      	ldr	r7, [r1, #0]
 801d13c:	9905      	ldr	r1, [sp, #20]
 801d13e:	fa5f fb87 	uxtb.w	fp, r7
 801d142:	434a      	muls	r2, r1
 801d144:	f102 0c01 	add.w	ip, r2, #1
 801d148:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d14c:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801d150:	1212      	asrs	r2, r2, #8
 801d152:	fa1f fa82 	uxth.w	sl, r2
 801d156:	43d2      	mvns	r2, r2
 801d158:	fb1b fb0a 	smulbb	fp, fp, sl
 801d15c:	b2d2      	uxtb	r2, r2
 801d15e:	fb0c bc02 	mla	ip, ip, r2, fp
 801d162:	fa1f fc8c 	uxth.w	ip, ip
 801d166:	f10c 0b01 	add.w	fp, ip, #1
 801d16a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d16e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d172:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d176:	fb1b fb0a 	smulbb	fp, fp, sl
 801d17a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d17e:	fb17 fa0a 	smulbb	sl, r7, sl
 801d182:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d186:	f806 cc03 	strb.w	ip, [r6, #-3]
 801d18a:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801d18e:	fb07 aa02 	mla	sl, r7, r2, sl
 801d192:	fb0c bc02 	mla	ip, ip, r2, fp
 801d196:	fa1f fa8a 	uxth.w	sl, sl
 801d19a:	fa1f fc8c 	uxth.w	ip, ip
 801d19e:	f10a 0701 	add.w	r7, sl, #1
 801d1a2:	f10c 0b01 	add.w	fp, ip, #1
 801d1a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d1aa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d1ae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d1b2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d1b6:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d1ba:	f806 cc02 	strb.w	ip, [r6, #-2]
 801d1be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d1c0:	3603      	adds	r6, #3
 801d1c2:	f109 39ff 	add.w	r9, r9, #4294967295
 801d1c6:	4414      	add	r4, r2
 801d1c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d1ca:	4410      	add	r0, r2
 801d1cc:	e79f      	b.n	801d10e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801d1ce:	1422      	asrs	r2, r4, #16
 801d1d0:	d457      	bmi.n	801d282 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d1d2:	4596      	cmp	lr, r2
 801d1d4:	dd55      	ble.n	801d282 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d1d6:	1407      	asrs	r7, r0, #16
 801d1d8:	d453      	bmi.n	801d282 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d1da:	4547      	cmp	r7, r8
 801d1dc:	da51      	bge.n	801d282 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d1de:	9902      	ldr	r1, [sp, #8]
 801d1e0:	fb07 2701 	mla	r7, r7, r1, r2
 801d1e4:	9903      	ldr	r1, [sp, #12]
 801d1e6:	087a      	lsrs	r2, r7, #1
 801d1e8:	07ff      	lsls	r7, r7, #31
 801d1ea:	5c8a      	ldrb	r2, [r1, r2]
 801d1ec:	bf54      	ite	pl
 801d1ee:	f002 020f 	andpl.w	r2, r2, #15
 801d1f2:	1112      	asrmi	r2, r2, #4
 801d1f4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d1f8:	b2d2      	uxtb	r2, r2
 801d1fa:	2a00      	cmp	r2, #0
 801d1fc:	d041      	beq.n	801d282 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d1fe:	4926      	ldr	r1, [pc, #152]	; (801d298 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d200:	680f      	ldr	r7, [r1, #0]
 801d202:	9905      	ldr	r1, [sp, #20]
 801d204:	fa5f fb87 	uxtb.w	fp, r7
 801d208:	434a      	muls	r2, r1
 801d20a:	f102 0c01 	add.w	ip, r2, #1
 801d20e:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d212:	f896 c000 	ldrb.w	ip, [r6]
 801d216:	1212      	asrs	r2, r2, #8
 801d218:	fa1f fa82 	uxth.w	sl, r2
 801d21c:	43d2      	mvns	r2, r2
 801d21e:	fb1b fb0a 	smulbb	fp, fp, sl
 801d222:	b2d2      	uxtb	r2, r2
 801d224:	fb0c bc02 	mla	ip, ip, r2, fp
 801d228:	fa1f fc8c 	uxth.w	ip, ip
 801d22c:	f10c 0b01 	add.w	fp, ip, #1
 801d230:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d234:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d238:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d23c:	fb1b fb0a 	smulbb	fp, fp, sl
 801d240:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d244:	fb17 fa0a 	smulbb	sl, r7, sl
 801d248:	78b7      	ldrb	r7, [r6, #2]
 801d24a:	f886 c000 	strb.w	ip, [r6]
 801d24e:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d252:	fb07 aa02 	mla	sl, r7, r2, sl
 801d256:	fb0c bc02 	mla	ip, ip, r2, fp
 801d25a:	fa1f fa8a 	uxth.w	sl, sl
 801d25e:	fa1f fc8c 	uxth.w	ip, ip
 801d262:	f10a 0701 	add.w	r7, sl, #1
 801d266:	f10c 0b01 	add.w	fp, ip, #1
 801d26a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d26e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d272:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d276:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d27a:	f886 a002 	strb.w	sl, [r6, #2]
 801d27e:	f886 c001 	strb.w	ip, [r6, #1]
 801d282:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d284:	3603      	adds	r6, #3
 801d286:	f109 39ff 	add.w	r9, r9, #4294967295
 801d28a:	4414      	add	r4, r2
 801d28c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d28e:	4410      	add	r0, r2
 801d290:	e6ed      	b.n	801d06e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801d292:	b007      	add	sp, #28
 801d294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d298:	2000b394 	.word	0x2000b394

0801d29c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2a0:	b087      	sub	sp, #28
 801d2a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d2a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d2a8:	9205      	str	r2, [sp, #20]
 801d2aa:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801d2ae:	6860      	ldr	r0, [r4, #4]
 801d2b0:	9202      	str	r2, [sp, #8]
 801d2b2:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801d2b6:	9101      	str	r1, [sp, #4]
 801d2b8:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801d2bc:	fb00 2606 	mla	r6, r0, r6, r2
 801d2c0:	6822      	ldr	r2, [r4, #0]
 801d2c2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d2c6:	4416      	add	r6, r2
 801d2c8:	f108 0201 	add.w	r2, r8, #1
 801d2cc:	f022 0201 	bic.w	r2, r2, #1
 801d2d0:	9203      	str	r2, [sp, #12]
 801d2d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d2d4:	6812      	ldr	r2, [r2, #0]
 801d2d6:	9204      	str	r2, [sp, #16]
 801d2d8:	9a01      	ldr	r2, [sp, #4]
 801d2da:	2a00      	cmp	r2, #0
 801d2dc:	dc03      	bgt.n	801d2e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801d2de:	9a05      	ldr	r2, [sp, #20]
 801d2e0:	2a00      	cmp	r2, #0
 801d2e2:	f340 813a 	ble.w	801d55a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d2e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d2e8:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d2ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d2ee:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	dd0f      	ble.n	801d316 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d2f6:	142a      	asrs	r2, r5, #16
 801d2f8:	d406      	bmi.n	801d308 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d2fa:	4590      	cmp	r8, r2
 801d2fc:	dd04      	ble.n	801d308 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d2fe:	1422      	asrs	r2, r4, #16
 801d300:	d402      	bmi.n	801d308 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d302:	9802      	ldr	r0, [sp, #8]
 801d304:	4282      	cmp	r2, r0
 801d306:	db07      	blt.n	801d318 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d308:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d30a:	3b01      	subs	r3, #1
 801d30c:	3603      	adds	r6, #3
 801d30e:	4415      	add	r5, r2
 801d310:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d312:	4414      	add	r4, r2
 801d314:	e7ed      	b.n	801d2f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801d316:	d073      	beq.n	801d400 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801d318:	1e5a      	subs	r2, r3, #1
 801d31a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d31c:	fb00 5002 	mla	r0, r0, r2, r5
 801d320:	1400      	asrs	r0, r0, #16
 801d322:	d464      	bmi.n	801d3ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d324:	4580      	cmp	r8, r0
 801d326:	dd62      	ble.n	801d3ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d328:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d32a:	fb00 4202 	mla	r2, r0, r2, r4
 801d32e:	1412      	asrs	r2, r2, #16
 801d330:	d45d      	bmi.n	801d3ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d332:	9802      	ldr	r0, [sp, #8]
 801d334:	4282      	cmp	r2, r0
 801d336:	da5a      	bge.n	801d3ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d338:	1cf0      	adds	r0, r6, #3
 801d33a:	469a      	mov	sl, r3
 801d33c:	f1ba 0f00 	cmp.w	sl, #0
 801d340:	dd59      	ble.n	801d3f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801d342:	142a      	asrs	r2, r5, #16
 801d344:	9903      	ldr	r1, [sp, #12]
 801d346:	1427      	asrs	r7, r4, #16
 801d348:	fb01 2707 	mla	r7, r1, r7, r2
 801d34c:	9904      	ldr	r1, [sp, #16]
 801d34e:	087a      	lsrs	r2, r7, #1
 801d350:	5c8a      	ldrb	r2, [r1, r2]
 801d352:	07f9      	lsls	r1, r7, #31
 801d354:	bf54      	ite	pl
 801d356:	f002 020f 	andpl.w	r2, r2, #15
 801d35a:	1112      	asrmi	r2, r2, #4
 801d35c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d360:	b2d2      	uxtb	r2, r2
 801d362:	2a00      	cmp	r2, #0
 801d364:	d03b      	beq.n	801d3de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d366:	497e      	ldr	r1, [pc, #504]	; (801d560 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d368:	2aff      	cmp	r2, #255	; 0xff
 801d36a:	680f      	ldr	r7, [r1, #0]
 801d36c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d370:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d374:	b2ff      	uxtb	r7, r7
 801d376:	f000 80e9 	beq.w	801d54c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d37a:	fa1f fe82 	uxth.w	lr, r2
 801d37e:	43d2      	mvns	r2, r2
 801d380:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801d384:	fb17 f70e 	smulbb	r7, r7, lr
 801d388:	b2d2      	uxtb	r2, r2
 801d38a:	fb19 f90e 	smulbb	r9, r9, lr
 801d38e:	fb0c 7702 	mla	r7, ip, r2, r7
 801d392:	fb1b fe0e 	smulbb	lr, fp, lr
 801d396:	b2bf      	uxth	r7, r7
 801d398:	f107 0c01 	add.w	ip, r7, #1
 801d39c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d3a0:	123f      	asrs	r7, r7, #8
 801d3a2:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d3a6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d3aa:	fb07 9902 	mla	r9, r7, r2, r9
 801d3ae:	fa1f f989 	uxth.w	r9, r9
 801d3b2:	f109 0701 	add.w	r7, r9, #1
 801d3b6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d3ba:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d3be:	fb07 ee02 	mla	lr, r7, r2, lr
 801d3c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d3c6:	fa1f fe8e 	uxth.w	lr, lr
 801d3ca:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d3ce:	f10e 0201 	add.w	r2, lr, #1
 801d3d2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d3d6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d3da:	f800 ec01 	strb.w	lr, [r0, #-1]
 801d3de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d3e0:	3003      	adds	r0, #3
 801d3e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d3e6:	4415      	add	r5, r2
 801d3e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d3ea:	4414      	add	r4, r2
 801d3ec:	e7a6      	b.n	801d33c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d3ee:	2700      	movs	r7, #0
 801d3f0:	1bda      	subs	r2, r3, r7
 801d3f2:	2a00      	cmp	r2, #0
 801d3f4:	dc40      	bgt.n	801d478 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801d3f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d3fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d3fe:	441e      	add	r6, r3
 801d400:	9b01      	ldr	r3, [sp, #4]
 801d402:	2b00      	cmp	r3, #0
 801d404:	f340 80a9 	ble.w	801d55a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d408:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d40c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d40e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d412:	eeb0 6a62 	vmov.f32	s12, s5
 801d416:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d41a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d41e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d422:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d426:	eeb0 6a43 	vmov.f32	s12, s6
 801d42a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d42e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d432:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d436:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d43a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d43e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d442:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d446:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d44a:	ee12 2a90 	vmov	r2, s5
 801d44e:	eef0 2a47 	vmov.f32	s5, s14
 801d452:	fb92 f3f3 	sdiv	r3, r2, r3
 801d456:	ee13 2a10 	vmov	r2, s6
 801d45a:	9313      	str	r3, [sp, #76]	; 0x4c
 801d45c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d45e:	eeb0 3a67 	vmov.f32	s6, s15
 801d462:	fb92 f3f3 	sdiv	r3, r2, r3
 801d466:	9314      	str	r3, [sp, #80]	; 0x50
 801d468:	9b01      	ldr	r3, [sp, #4]
 801d46a:	9a05      	ldr	r2, [sp, #20]
 801d46c:	3b01      	subs	r3, #1
 801d46e:	9301      	str	r3, [sp, #4]
 801d470:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d472:	bf08      	it	eq
 801d474:	4613      	moveq	r3, r2
 801d476:	e72f      	b.n	801d2d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d478:	142a      	asrs	r2, r5, #16
 801d47a:	d458      	bmi.n	801d52e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d47c:	4590      	cmp	r8, r2
 801d47e:	dd56      	ble.n	801d52e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d480:	1420      	asrs	r0, r4, #16
 801d482:	d454      	bmi.n	801d52e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d484:	9902      	ldr	r1, [sp, #8]
 801d486:	4288      	cmp	r0, r1
 801d488:	da51      	bge.n	801d52e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d48a:	9903      	ldr	r1, [sp, #12]
 801d48c:	fb00 2001 	mla	r0, r0, r1, r2
 801d490:	9904      	ldr	r1, [sp, #16]
 801d492:	0842      	lsrs	r2, r0, #1
 801d494:	07c0      	lsls	r0, r0, #31
 801d496:	5c8a      	ldrb	r2, [r1, r2]
 801d498:	bf54      	ite	pl
 801d49a:	f002 020f 	andpl.w	r2, r2, #15
 801d49e:	1112      	asrmi	r2, r2, #4
 801d4a0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d4a4:	b2d2      	uxtb	r2, r2
 801d4a6:	2a00      	cmp	r2, #0
 801d4a8:	d041      	beq.n	801d52e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d4aa:	492d      	ldr	r1, [pc, #180]	; (801d560 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d4ac:	2aff      	cmp	r2, #255	; 0xff
 801d4ae:	6808      	ldr	r0, [r1, #0]
 801d4b0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d4b4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d4b8:	fa5f fc80 	uxtb.w	ip, r0
 801d4bc:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d4c0:	d03b      	beq.n	801d53a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801d4c2:	fa1f f982 	uxth.w	r9, r2
 801d4c6:	4438      	add	r0, r7
 801d4c8:	43d2      	mvns	r2, r2
 801d4ca:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d4ce:	fb1c fc09 	smulbb	ip, ip, r9
 801d4d2:	fb1a fa09 	smulbb	sl, sl, r9
 801d4d6:	b2d2      	uxtb	r2, r2
 801d4d8:	fb1b f909 	smulbb	r9, fp, r9
 801d4dc:	fb0e cc02 	mla	ip, lr, r2, ip
 801d4e0:	fa1f fc8c 	uxth.w	ip, ip
 801d4e4:	f10c 0e01 	add.w	lr, ip, #1
 801d4e8:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801d4ec:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d4f0:	f806 c000 	strb.w	ip, [r6, r0]
 801d4f4:	4430      	add	r0, r6
 801d4f6:	f890 c001 	ldrb.w	ip, [r0, #1]
 801d4fa:	fb0c aa02 	mla	sl, ip, r2, sl
 801d4fe:	fa1f fa8a 	uxth.w	sl, sl
 801d502:	f10a 0c01 	add.w	ip, sl, #1
 801d506:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d50a:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d50e:	fb0c 9902 	mla	r9, ip, r2, r9
 801d512:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d516:	fa1f f989 	uxth.w	r9, r9
 801d51a:	f880 a001 	strb.w	sl, [r0, #1]
 801d51e:	f109 0201 	add.w	r2, r9, #1
 801d522:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d526:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d52a:	f880 9002 	strb.w	r9, [r0, #2]
 801d52e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d530:	3701      	adds	r7, #1
 801d532:	4415      	add	r5, r2
 801d534:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d536:	4414      	add	r4, r2
 801d538:	e75a      	b.n	801d3f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801d53a:	4438      	add	r0, r7
 801d53c:	f806 c000 	strb.w	ip, [r6, r0]
 801d540:	4430      	add	r0, r6
 801d542:	f880 a001 	strb.w	sl, [r0, #1]
 801d546:	f880 b002 	strb.w	fp, [r0, #2]
 801d54a:	e7f0      	b.n	801d52e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d54c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d550:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d554:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d558:	e741      	b.n	801d3de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d55a:	b007      	add	sp, #28
 801d55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d560:	2000b394 	.word	0x2000b394

0801d564 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d564:	4770      	bx	lr

0801d566 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d566:	4770      	bx	lr

0801d568 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d568:	4770      	bx	lr

0801d56a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d56a:	4770      	bx	lr

0801d56c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d56c:	4770      	bx	lr

0801d56e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d56e:	4770      	bx	lr

0801d570 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d570:	4770      	bx	lr

0801d572 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d572:	4770      	bx	lr

0801d574 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d574:	4770      	bx	lr

0801d576 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d576:	4770      	bx	lr

0801d578 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d578:	4770      	bx	lr

0801d57a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d57a:	4770      	bx	lr

0801d57c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d57c:	4770      	bx	lr

0801d57e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d57e:	4770      	bx	lr

0801d580 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d580:	4770      	bx	lr

0801d582 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d582:	4770      	bx	lr

0801d584 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d584:	4770      	bx	lr

0801d586 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d586:	4770      	bx	lr

0801d588 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d588:	4770      	bx	lr

0801d58a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d58a:	4770      	bx	lr

0801d58c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d58c:	2bff      	cmp	r3, #255	; 0xff
 801d58e:	b508      	push	{r3, lr}
 801d590:	d04f      	beq.n	801d632 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d592:	2a2c      	cmp	r2, #44	; 0x2c
 801d594:	d032      	beq.n	801d5fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801d596:	d80f      	bhi.n	801d5b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801d598:	2a08      	cmp	r2, #8
 801d59a:	d046      	beq.n	801d62a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d59c:	d805      	bhi.n	801d5aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801d59e:	2a04      	cmp	r2, #4
 801d5a0:	d041      	beq.n	801d626 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d5a2:	2a05      	cmp	r2, #5
 801d5a4:	d03d      	beq.n	801d622 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d5a6:	2000      	movs	r0, #0
 801d5a8:	e027      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5aa:	2a0a      	cmp	r2, #10
 801d5ac:	d03d      	beq.n	801d62a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d5ae:	d301      	bcc.n	801d5b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d5b0:	2a0b      	cmp	r2, #11
 801d5b2:	d1f8      	bne.n	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d5b4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d5b6:	e020      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5b8:	2a30      	cmp	r2, #48	; 0x30
 801d5ba:	d038      	beq.n	801d62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d5bc:	d808      	bhi.n	801d5d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801d5be:	2a2e      	cmp	r2, #46	; 0x2e
 801d5c0:	684b      	ldr	r3, [r1, #4]
 801d5c2:	d029      	beq.n	801d618 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d5c4:	d90b      	bls.n	801d5de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801d5c6:	781b      	ldrb	r3, [r3, #0]
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	d1ec      	bne.n	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d5cc:	6a00      	ldr	r0, [r0, #32]
 801d5ce:	e014      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5d0:	2a32      	cmp	r2, #50	; 0x32
 801d5d2:	d02c      	beq.n	801d62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d5d4:	d301      	bcc.n	801d5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801d5d6:	2a33      	cmp	r2, #51	; 0x33
 801d5d8:	d1e5      	bne.n	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d5da:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d5dc:	e00d      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5de:	781b      	ldrb	r3, [r3, #0]
 801d5e0:	2b01      	cmp	r3, #1
 801d5e2:	d009      	beq.n	801d5f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801d5e4:	d3f2      	bcc.n	801d5cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801d5e6:	2b02      	cmp	r3, #2
 801d5e8:	d1dd      	bne.n	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d5ea:	4b39      	ldr	r3, [pc, #228]	; (801d6d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d5ec:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 801d5f0:	4a38      	ldr	r2, [pc, #224]	; (801d6d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d5f2:	4839      	ldr	r0, [pc, #228]	; (801d6d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801d5f4:	f008 f874 	bl	80256e0 <__assert_func>
 801d5f8:	6900      	ldr	r0, [r0, #16]
 801d5fa:	bd08      	pop	{r3, pc}
 801d5fc:	684b      	ldr	r3, [r1, #4]
 801d5fe:	781b      	ldrb	r3, [r3, #0]
 801d600:	2b01      	cmp	r3, #1
 801d602:	d007      	beq.n	801d614 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d604:	d30b      	bcc.n	801d61e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d606:	2b02      	cmp	r3, #2
 801d608:	d1cd      	bne.n	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d60a:	4b31      	ldr	r3, [pc, #196]	; (801d6d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d60c:	f44f 6181 	mov.w	r1, #1032	; 0x408
 801d610:	4a30      	ldr	r2, [pc, #192]	; (801d6d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d612:	e7ee      	b.n	801d5f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d614:	6880      	ldr	r0, [r0, #8]
 801d616:	e7f0      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d618:	781b      	ldrb	r3, [r3, #0]
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	d1c3      	bne.n	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d61e:	6980      	ldr	r0, [r0, #24]
 801d620:	e7eb      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d622:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d624:	e7e9      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d626:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d628:	e7e7      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d62a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d62c:	e7e5      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d62e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d630:	e7e3      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d632:	2a2c      	cmp	r2, #44	; 0x2c
 801d634:	d030      	beq.n	801d698 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801d636:	d80f      	bhi.n	801d658 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801d638:	2a08      	cmp	r2, #8
 801d63a:	d044      	beq.n	801d6c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d63c:	d805      	bhi.n	801d64a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d63e:	2a04      	cmp	r2, #4
 801d640:	d03f      	beq.n	801d6c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d642:	2a05      	cmp	r2, #5
 801d644:	d1af      	bne.n	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d646:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d648:	e7d7      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d64a:	2a0a      	cmp	r2, #10
 801d64c:	d03b      	beq.n	801d6c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d64e:	d301      	bcc.n	801d654 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d650:	2a0b      	cmp	r2, #11
 801d652:	d1a8      	bne.n	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d654:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d656:	e7d0      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d658:	2a30      	cmp	r2, #48	; 0x30
 801d65a:	d036      	beq.n	801d6ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d65c:	d808      	bhi.n	801d670 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801d65e:	2a2e      	cmp	r2, #46	; 0x2e
 801d660:	684b      	ldr	r3, [r1, #4]
 801d662:	d028      	beq.n	801d6b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801d664:	d90b      	bls.n	801d67e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801d666:	781b      	ldrb	r3, [r3, #0]
 801d668:	2b00      	cmp	r3, #0
 801d66a:	d19c      	bne.n	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d66c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d66e:	e7c4      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d670:	2a32      	cmp	r2, #50	; 0x32
 801d672:	d02a      	beq.n	801d6ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d674:	d301      	bcc.n	801d67a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801d676:	2a33      	cmp	r2, #51	; 0x33
 801d678:	d195      	bne.n	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d67a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d67c:	e7bd      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d67e:	781b      	ldrb	r3, [r3, #0]
 801d680:	2b01      	cmp	r3, #1
 801d682:	d007      	beq.n	801d694 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801d684:	d3f2      	bcc.n	801d66c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801d686:	2b02      	cmp	r3, #2
 801d688:	d18d      	bne.n	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d68a:	4b11      	ldr	r3, [pc, #68]	; (801d6d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d68c:	f240 4139 	movw	r1, #1081	; 0x439
 801d690:	4a10      	ldr	r2, [pc, #64]	; (801d6d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d692:	e7ae      	b.n	801d5f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d694:	6940      	ldr	r0, [r0, #20]
 801d696:	e7b0      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d698:	684b      	ldr	r3, [r1, #4]
 801d69a:	781b      	ldrb	r3, [r3, #0]
 801d69c:	2b01      	cmp	r3, #1
 801d69e:	d008      	beq.n	801d6b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801d6a0:	d30d      	bcc.n	801d6be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d6a2:	2b02      	cmp	r3, #2
 801d6a4:	f47f af7f 	bne.w	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d6a8:	4b09      	ldr	r3, [pc, #36]	; (801d6d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d6aa:	f240 4145 	movw	r1, #1093	; 0x445
 801d6ae:	4a09      	ldr	r2, [pc, #36]	; (801d6d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d6b0:	e79f      	b.n	801d5f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d6b2:	68c0      	ldr	r0, [r0, #12]
 801d6b4:	e7a1      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6b6:	781b      	ldrb	r3, [r3, #0]
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	f47f af74 	bne.w	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d6be:	69c0      	ldr	r0, [r0, #28]
 801d6c0:	e79b      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801d6c4:	e799      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6c6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d6c8:	e797      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6ca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801d6cc:	e795      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6ce:	bf00      	nop
 801d6d0:	0802addf 	.word	0x0802addf
 801d6d4:	0802b58f 	.word	0x0802b58f
 801d6d8:	0802ae2b 	.word	0x0802ae2b

0801d6dc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801d6dc:	b508      	push	{r3, lr}
 801d6de:	4b06      	ldr	r3, [pc, #24]	; (801d6f8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801d6e0:	8818      	ldrh	r0, [r3, #0]
 801d6e2:	b928      	cbnz	r0, 801d6f0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801d6e4:	4b05      	ldr	r3, [pc, #20]	; (801d6fc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801d6e6:	2155      	movs	r1, #85	; 0x55
 801d6e8:	4a05      	ldr	r2, [pc, #20]	; (801d700 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801d6ea:	4806      	ldr	r0, [pc, #24]	; (801d704 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801d6ec:	f007 fff8 	bl	80256e0 <__assert_func>
 801d6f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d6f4:	b280      	uxth	r0, r0
 801d6f6:	bd08      	pop	{r3, pc}
 801d6f8:	2000b366 	.word	0x2000b366
 801d6fc:	0802b078 	.word	0x0802b078
 801d700:	0802b554 	.word	0x0802b554
 801d704:	0802b0ba 	.word	0x0802b0ba

0801d708 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d70c:	4616      	mov	r6, r2
 801d70e:	b087      	sub	sp, #28
 801d710:	461f      	mov	r7, r3
 801d712:	b34b      	cbz	r3, 801d768 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d714:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d718:	2b00      	cmp	r3, #0
 801d71a:	dd25      	ble.n	801d768 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d71c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d720:	2b00      	cmp	r3, #0
 801d722:	dd21      	ble.n	801d768 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d724:	6808      	ldr	r0, [r1, #0]
 801d726:	ab04      	add	r3, sp, #16
 801d728:	6849      	ldr	r1, [r1, #4]
 801d72a:	4c5a      	ldr	r4, [pc, #360]	; (801d894 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801d72c:	c303      	stmia	r3!, {r0, r1}
 801d72e:	a804      	add	r0, sp, #16
 801d730:	f7fb fccc 	bl	80190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d734:	6820      	ldr	r0, [r4, #0]
 801d736:	6803      	ldr	r3, [r0, #0]
 801d738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d73a:	4798      	blx	r3
 801d73c:	2fff      	cmp	r7, #255	; 0xff
 801d73e:	4623      	mov	r3, r4
 801d740:	d015      	beq.n	801d76e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801d742:	f010 0f08 	tst.w	r0, #8
 801d746:	d015      	beq.n	801d774 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801d748:	6818      	ldr	r0, [r3, #0]
 801d74a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d74e:	6801      	ldr	r1, [r0, #0]
 801d750:	9401      	str	r4, [sp, #4]
 801d752:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d756:	9702      	str	r7, [sp, #8]
 801d758:	9400      	str	r4, [sp, #0]
 801d75a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d75e:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801d760:	4631      	mov	r1, r6
 801d762:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d766:	47a0      	blx	r4
 801d768:	b007      	add	sp, #28
 801d76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d76e:	f010 0f02 	tst.w	r0, #2
 801d772:	e7e8      	b.n	801d746 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3e>
 801d774:	6818      	ldr	r0, [r3, #0]
 801d776:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801d77a:	6803      	ldr	r3, [r0, #0]
 801d77c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d780:	6a1b      	ldr	r3, [r3, #32]
 801d782:	4798      	blx	r3
 801d784:	4944      	ldr	r1, [pc, #272]	; (801d898 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>)
 801d786:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d78a:	2fff      	cmp	r7, #255	; 0xff
 801d78c:	f8b1 c000 	ldrh.w	ip, [r1]
 801d790:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801d794:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d798:	4688      	mov	r8, r1
 801d79a:	fb0c 2303 	mla	r3, ip, r3, r2
 801d79e:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801d7a2:	b2f2      	uxtb	r2, r6
 801d7a4:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801d7a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d7ac:	4418      	add	r0, r3
 801d7ae:	d112      	bne.n	801d7d6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xce>
 801d7b0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d7b4:	2100      	movs	r1, #0
 801d7b6:	42a9      	cmp	r1, r5
 801d7b8:	da66      	bge.n	801d888 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801d7ba:	4603      	mov	r3, r0
 801d7bc:	2700      	movs	r7, #0
 801d7be:	42a7      	cmp	r7, r4
 801d7c0:	f103 0303 	add.w	r3, r3, #3
 801d7c4:	da57      	bge.n	801d876 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801d7c6:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d7ca:	3701      	adds	r7, #1
 801d7cc:	f803 ec02 	strb.w	lr, [r3, #-2]
 801d7d0:	f803 cc01 	strb.w	ip, [r3, #-1]
 801d7d4:	e7f3      	b.n	801d7be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801d7d6:	b2bb      	uxth	r3, r7
 801d7d8:	f04f 0800 	mov.w	r8, #0
 801d7dc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d7e0:	fb0c fc03 	mul.w	ip, ip, r3
 801d7e4:	fb0e fe03 	mul.w	lr, lr, r3
 801d7e8:	435a      	muls	r2, r3
 801d7ea:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801d7ee:	460f      	mov	r7, r1
 801d7f0:	b29b      	uxth	r3, r3
 801d7f2:	45a8      	cmp	r8, r5
 801d7f4:	da48      	bge.n	801d888 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801d7f6:	4601      	mov	r1, r0
 801d7f8:	f04f 0a00 	mov.w	sl, #0
 801d7fc:	45a2      	cmp	sl, r4
 801d7fe:	f101 0103 	add.w	r1, r1, #3
 801d802:	da2f      	bge.n	801d864 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>
 801d804:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801d808:	f10a 0a01 	add.w	sl, sl, #1
 801d80c:	fb19 f903 	smulbb	r9, r9, r3
 801d810:	4491      	add	r9, r2
 801d812:	fa1f f989 	uxth.w	r9, r9
 801d816:	f109 0b01 	add.w	fp, r9, #1
 801d81a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d81e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d822:	f801 9c03 	strb.w	r9, [r1, #-3]
 801d826:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801d82a:	fb19 f903 	smulbb	r9, r9, r3
 801d82e:	44f1      	add	r9, lr
 801d830:	fa1f f989 	uxth.w	r9, r9
 801d834:	f109 0b01 	add.w	fp, r9, #1
 801d838:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d83c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d840:	f801 9c02 	strb.w	r9, [r1, #-2]
 801d844:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801d848:	fb19 f903 	smulbb	r9, r9, r3
 801d84c:	44e1      	add	r9, ip
 801d84e:	fa1f f989 	uxth.w	r9, r9
 801d852:	f109 0b01 	add.w	fp, r9, #1
 801d856:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d85a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d85e:	f801 9c01 	strb.w	r9, [r1, #-1]
 801d862:	e7cb      	b.n	801d7fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf4>
 801d864:	8839      	ldrh	r1, [r7, #0]
 801d866:	f108 0801 	add.w	r8, r8, #1
 801d86a:	1b09      	subs	r1, r1, r4
 801d86c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d870:	4431      	add	r1, r6
 801d872:	4408      	add	r0, r1
 801d874:	e7bd      	b.n	801d7f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xea>
 801d876:	f8b8 3000 	ldrh.w	r3, [r8]
 801d87a:	3101      	adds	r1, #1
 801d87c:	1b1b      	subs	r3, r3, r4
 801d87e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d882:	4433      	add	r3, r6
 801d884:	4418      	add	r0, r3
 801d886:	e796      	b.n	801d7b6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xae>
 801d888:	4b02      	ldr	r3, [pc, #8]	; (801d894 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801d88a:	6818      	ldr	r0, [r3, #0]
 801d88c:	6803      	ldr	r3, [r0, #0]
 801d88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d890:	4798      	blx	r3
 801d892:	e769      	b.n	801d768 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d894:	2000b36c 	.word	0x2000b36c
 801d898:	2000b366 	.word	0x2000b366

0801d89c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8a0:	b08d      	sub	sp, #52	; 0x34
 801d8a2:	460c      	mov	r4, r1
 801d8a4:	4617      	mov	r7, r2
 801d8a6:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801d8aa:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801d8ae:	2e00      	cmp	r6, #0
 801d8b0:	d04a      	beq.n	801d948 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d8b2:	6810      	ldr	r0, [r2, #0]
 801d8b4:	ad08      	add	r5, sp, #32
 801d8b6:	6851      	ldr	r1, [r2, #4]
 801d8b8:	c503      	stmia	r5!, {r0, r1}
 801d8ba:	6818      	ldr	r0, [r3, #0]
 801d8bc:	ad0a      	add	r5, sp, #40	; 0x28
 801d8be:	6859      	ldr	r1, [r3, #4]
 801d8c0:	c503      	stmia	r5!, {r0, r1}
 801d8c2:	a808      	add	r0, sp, #32
 801d8c4:	f7fb fc02 	bl	80190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d8c8:	4639      	mov	r1, r7
 801d8ca:	a80a      	add	r0, sp, #40	; 0x28
 801d8cc:	4f59      	ldr	r7, [pc, #356]	; (801da34 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801d8ce:	f7fb fbe5 	bl	801909c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d8d2:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d8d6:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d8da:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d8de:	6838      	ldr	r0, [r7, #0]
 801d8e0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d8e4:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801d8e8:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801d8ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d8f0:	440c      	add	r4, r1
 801d8f2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d8f6:	440a      	add	r2, r1
 801d8f8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d8fc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d900:	4413      	add	r3, r2
 801d902:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d906:	6803      	ldr	r3, [r0, #0]
 801d908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d90a:	4798      	blx	r3
 801d90c:	2eff      	cmp	r6, #255	; 0xff
 801d90e:	f000 8089 	beq.w	801da24 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801d912:	0743      	lsls	r3, r0, #29
 801d914:	d405      	bmi.n	801d922 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801d916:	f1b9 0f00 	cmp.w	r9, #0
 801d91a:	d018      	beq.n	801d94e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d91c:	f010 0f10 	tst.w	r0, #16
 801d920:	d015      	beq.n	801d94e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d922:	6838      	ldr	r0, [r7, #0]
 801d924:	b2ad      	uxth	r5, r5
 801d926:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d92a:	6801      	ldr	r1, [r0, #0]
 801d92c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d930:	9500      	str	r5, [sp, #0]
 801d932:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801d936:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801d93a:	9602      	str	r6, [sp, #8]
 801d93c:	fa1f f688 	uxth.w	r6, r8
 801d940:	9601      	str	r6, [sp, #4]
 801d942:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801d944:	4621      	mov	r1, r4
 801d946:	47a8      	blx	r5
 801d948:	b00d      	add	sp, #52	; 0x34
 801d94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d94e:	6838      	ldr	r0, [r7, #0]
 801d950:	6803      	ldr	r3, [r0, #0]
 801d952:	6a1b      	ldr	r3, [r3, #32]
 801d954:	4798      	blx	r3
 801d956:	4a38      	ldr	r2, [pc, #224]	; (801da38 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801d958:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d95c:	2eff      	cmp	r6, #255	; 0xff
 801d95e:	8813      	ldrh	r3, [r2, #0]
 801d960:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801d964:	fb0c 1303 	mla	r3, ip, r3, r1
 801d968:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801d96c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d970:	4418      	add	r0, r3
 801d972:	d032      	beq.n	801d9da <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801d974:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801d978:	f04f 0c00 	mov.w	ip, #0
 801d97c:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801d980:	9306      	str	r3, [sp, #24]
 801d982:	45c4      	cmp	ip, r8
 801d984:	da49      	bge.n	801da1a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d986:	4686      	mov	lr, r0
 801d988:	46a1      	mov	r9, r4
 801d98a:	eba9 0304 	sub.w	r3, r9, r4
 801d98e:	428b      	cmp	r3, r1
 801d990:	da13      	bge.n	801d9ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801d992:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d996:	f89e b000 	ldrb.w	fp, [lr]
 801d99a:	9307      	str	r3, [sp, #28]
 801d99c:	9b06      	ldr	r3, [sp, #24]
 801d99e:	fb1b fb03 	smulbb	fp, fp, r3
 801d9a2:	9b07      	ldr	r3, [sp, #28]
 801d9a4:	fb03 b306 	mla	r3, r3, r6, fp
 801d9a8:	b29b      	uxth	r3, r3
 801d9aa:	f103 0b01 	add.w	fp, r3, #1
 801d9ae:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801d9b2:	121b      	asrs	r3, r3, #8
 801d9b4:	f80e 3b01 	strb.w	r3, [lr], #1
 801d9b8:	e7e7      	b.n	801d98a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801d9ba:	8813      	ldrh	r3, [r2, #0]
 801d9bc:	f10c 0c01 	add.w	ip, ip, #1
 801d9c0:	1b5b      	subs	r3, r3, r5
 801d9c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9c6:	4453      	add	r3, sl
 801d9c8:	4418      	add	r0, r3
 801d9ca:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d9ce:	1b5b      	subs	r3, r3, r5
 801d9d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9d4:	4453      	add	r3, sl
 801d9d6:	441c      	add	r4, r3
 801d9d8:	e7d3      	b.n	801d982 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801d9da:	2600      	movs	r6, #0
 801d9dc:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801d9e0:	4546      	cmp	r6, r8
 801d9e2:	da1a      	bge.n	801da1a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d9e4:	f100 3eff 	add.w	lr, r0, #4294967295
 801d9e8:	4623      	mov	r3, r4
 801d9ea:	eba3 0904 	sub.w	r9, r3, r4
 801d9ee:	4589      	cmp	r9, r1
 801d9f0:	da04      	bge.n	801d9fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801d9f2:	f813 9b01 	ldrb.w	r9, [r3], #1
 801d9f6:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801d9fa:	e7f6      	b.n	801d9ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801d9fc:	8813      	ldrh	r3, [r2, #0]
 801d9fe:	3601      	adds	r6, #1
 801da00:	1b5b      	subs	r3, r3, r5
 801da02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da06:	4463      	add	r3, ip
 801da08:	4418      	add	r0, r3
 801da0a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801da0e:	1b5b      	subs	r3, r3, r5
 801da10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da14:	4463      	add	r3, ip
 801da16:	441c      	add	r4, r3
 801da18:	e7e2      	b.n	801d9e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801da1a:	6838      	ldr	r0, [r7, #0]
 801da1c:	6803      	ldr	r3, [r0, #0]
 801da1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da20:	4798      	blx	r3
 801da22:	e791      	b.n	801d948 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801da24:	f1b9 0f00 	cmp.w	r9, #0
 801da28:	f47f af78 	bne.w	801d91c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801da2c:	f010 0f01 	tst.w	r0, #1
 801da30:	e776      	b.n	801d920 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801da32:	bf00      	nop
 801da34:	2000b36c 	.word	0x2000b36c
 801da38:	2000b366 	.word	0x2000b366

0801da3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801da3c:	b510      	push	{r4, lr}
 801da3e:	4604      	mov	r4, r0
 801da40:	2104      	movs	r1, #4
 801da42:	f007 fe21 	bl	8025688 <_ZdlPvj>
 801da46:	4620      	mov	r0, r4
 801da48:	bd10      	pop	{r4, pc}

0801da4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801da4a:	b510      	push	{r4, lr}
 801da4c:	4604      	mov	r4, r0
 801da4e:	2104      	movs	r1, #4
 801da50:	f007 fe1a 	bl	8025688 <_ZdlPvj>
 801da54:	4620      	mov	r0, r4
 801da56:	bd10      	pop	{r4, pc}

0801da58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801da58:	b510      	push	{r4, lr}
 801da5a:	4604      	mov	r4, r0
 801da5c:	2104      	movs	r1, #4
 801da5e:	f007 fe13 	bl	8025688 <_ZdlPvj>
 801da62:	4620      	mov	r0, r4
 801da64:	bd10      	pop	{r4, pc}

0801da66 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801da66:	b510      	push	{r4, lr}
 801da68:	4604      	mov	r4, r0
 801da6a:	2104      	movs	r1, #4
 801da6c:	f007 fe0c 	bl	8025688 <_ZdlPvj>
 801da70:	4620      	mov	r0, r4
 801da72:	bd10      	pop	{r4, pc}

0801da74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801da74:	b510      	push	{r4, lr}
 801da76:	4604      	mov	r4, r0
 801da78:	2104      	movs	r1, #4
 801da7a:	f007 fe05 	bl	8025688 <_ZdlPvj>
 801da7e:	4620      	mov	r0, r4
 801da80:	bd10      	pop	{r4, pc}

0801da82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801da82:	b510      	push	{r4, lr}
 801da84:	4604      	mov	r4, r0
 801da86:	2104      	movs	r1, #4
 801da88:	f007 fdfe 	bl	8025688 <_ZdlPvj>
 801da8c:	4620      	mov	r0, r4
 801da8e:	bd10      	pop	{r4, pc}

0801da90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801da90:	b510      	push	{r4, lr}
 801da92:	4604      	mov	r4, r0
 801da94:	2104      	movs	r1, #4
 801da96:	f007 fdf7 	bl	8025688 <_ZdlPvj>
 801da9a:	4620      	mov	r0, r4
 801da9c:	bd10      	pop	{r4, pc}

0801da9e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801da9e:	b510      	push	{r4, lr}
 801daa0:	4604      	mov	r4, r0
 801daa2:	2104      	movs	r1, #4
 801daa4:	f007 fdf0 	bl	8025688 <_ZdlPvj>
 801daa8:	4620      	mov	r0, r4
 801daaa:	bd10      	pop	{r4, pc}

0801daac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801daac:	b510      	push	{r4, lr}
 801daae:	4604      	mov	r4, r0
 801dab0:	2104      	movs	r1, #4
 801dab2:	f007 fde9 	bl	8025688 <_ZdlPvj>
 801dab6:	4620      	mov	r0, r4
 801dab8:	bd10      	pop	{r4, pc}

0801daba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801daba:	b510      	push	{r4, lr}
 801dabc:	4604      	mov	r4, r0
 801dabe:	2104      	movs	r1, #4
 801dac0:	f007 fde2 	bl	8025688 <_ZdlPvj>
 801dac4:	4620      	mov	r0, r4
 801dac6:	bd10      	pop	{r4, pc}

0801dac8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dac8:	b510      	push	{r4, lr}
 801daca:	4604      	mov	r4, r0
 801dacc:	2104      	movs	r1, #4
 801dace:	f007 fddb 	bl	8025688 <_ZdlPvj>
 801dad2:	4620      	mov	r0, r4
 801dad4:	bd10      	pop	{r4, pc}

0801dad6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801dad6:	b510      	push	{r4, lr}
 801dad8:	4604      	mov	r4, r0
 801dada:	2104      	movs	r1, #4
 801dadc:	f007 fdd4 	bl	8025688 <_ZdlPvj>
 801dae0:	4620      	mov	r0, r4
 801dae2:	bd10      	pop	{r4, pc}

0801dae4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dae4:	b510      	push	{r4, lr}
 801dae6:	4604      	mov	r4, r0
 801dae8:	2104      	movs	r1, #4
 801daea:	f007 fdcd 	bl	8025688 <_ZdlPvj>
 801daee:	4620      	mov	r0, r4
 801daf0:	bd10      	pop	{r4, pc}

0801daf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801daf2:	b510      	push	{r4, lr}
 801daf4:	4604      	mov	r4, r0
 801daf6:	2104      	movs	r1, #4
 801daf8:	f007 fdc6 	bl	8025688 <_ZdlPvj>
 801dafc:	4620      	mov	r0, r4
 801dafe:	bd10      	pop	{r4, pc}

0801db00 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801db00:	b510      	push	{r4, lr}
 801db02:	4604      	mov	r4, r0
 801db04:	2104      	movs	r1, #4
 801db06:	f007 fdbf 	bl	8025688 <_ZdlPvj>
 801db0a:	4620      	mov	r0, r4
 801db0c:	bd10      	pop	{r4, pc}

0801db0e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801db0e:	b510      	push	{r4, lr}
 801db10:	4604      	mov	r4, r0
 801db12:	2104      	movs	r1, #4
 801db14:	f007 fdb8 	bl	8025688 <_ZdlPvj>
 801db18:	4620      	mov	r0, r4
 801db1a:	bd10      	pop	{r4, pc}

0801db1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801db1c:	b510      	push	{r4, lr}
 801db1e:	4604      	mov	r4, r0
 801db20:	2104      	movs	r1, #4
 801db22:	f007 fdb1 	bl	8025688 <_ZdlPvj>
 801db26:	4620      	mov	r0, r4
 801db28:	bd10      	pop	{r4, pc}

0801db2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801db2a:	b510      	push	{r4, lr}
 801db2c:	4604      	mov	r4, r0
 801db2e:	2104      	movs	r1, #4
 801db30:	f007 fdaa 	bl	8025688 <_ZdlPvj>
 801db34:	4620      	mov	r0, r4
 801db36:	bd10      	pop	{r4, pc}

0801db38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801db38:	b510      	push	{r4, lr}
 801db3a:	4604      	mov	r4, r0
 801db3c:	2104      	movs	r1, #4
 801db3e:	f007 fda3 	bl	8025688 <_ZdlPvj>
 801db42:	4620      	mov	r0, r4
 801db44:	bd10      	pop	{r4, pc}

0801db46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801db46:	b510      	push	{r4, lr}
 801db48:	4604      	mov	r4, r0
 801db4a:	2104      	movs	r1, #4
 801db4c:	f007 fd9c 	bl	8025688 <_ZdlPvj>
 801db50:	4620      	mov	r0, r4
 801db52:	bd10      	pop	{r4, pc}

0801db54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801db54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db58:	4d9e      	ldr	r5, [pc, #632]	; (801ddd4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801db5a:	4690      	mov	r8, r2
 801db5c:	b08f      	sub	sp, #60	; 0x3c
 801db5e:	4604      	mov	r4, r0
 801db60:	682a      	ldr	r2, [r5, #0]
 801db62:	4689      	mov	r9, r1
 801db64:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801db68:	2a02      	cmp	r2, #2
 801db6a:	d106      	bne.n	801db7a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801db6c:	4b9a      	ldr	r3, [pc, #616]	; (801ddd8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801db6e:	f240 11ef 	movw	r1, #495	; 0x1ef
 801db72:	4a9a      	ldr	r2, [pc, #616]	; (801dddc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801db74:	489a      	ldr	r0, [pc, #616]	; (801dde0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801db76:	f007 fdb3 	bl	80256e0 <__assert_func>
 801db7a:	ae0e      	add	r6, sp, #56	; 0x38
 801db7c:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801db80:	4630      	mov	r0, r6
 801db82:	f7fe f8b1 	bl	801bce8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801db86:	6823      	ldr	r3, [r4, #0]
 801db88:	4607      	mov	r7, r0
 801db8a:	4620      	mov	r0, r4
 801db8c:	6a1b      	ldr	r3, [r3, #32]
 801db8e:	4798      	blx	r3
 801db90:	4287      	cmp	r7, r0
 801db92:	d004      	beq.n	801db9e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801db94:	4b93      	ldr	r3, [pc, #588]	; (801dde4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801db96:	f240 11f1 	movw	r1, #497	; 0x1f1
 801db9a:	4a90      	ldr	r2, [pc, #576]	; (801dddc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801db9c:	e7ea      	b.n	801db74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801db9e:	4630      	mov	r0, r6
 801dba0:	f7fe f81e 	bl	801bbe0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dba4:	4607      	mov	r7, r0
 801dba6:	b920      	cbnz	r0, 801dbb2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801dba8:	4b8f      	ldr	r3, [pc, #572]	; (801dde8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801dbaa:	f240 11f3 	movw	r1, #499	; 0x1f3
 801dbae:	4a8b      	ldr	r2, [pc, #556]	; (801dddc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dbb0:	e7e0      	b.n	801db74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dbb2:	f8d8 0000 	ldr.w	r0, [r8]
 801dbb6:	ab06      	add	r3, sp, #24
 801dbb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dbbc:	f9b8 a000 	ldrsh.w	sl, [r8]
 801dbc0:	c303      	stmia	r3!, {r0, r1}
 801dbc2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801dbc6:	ab08      	add	r3, sp, #32
 801dbc8:	f8d9 0000 	ldr.w	r0, [r9]
 801dbcc:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801dbd0:	c303      	stmia	r3!, {r0, r1}
 801dbd2:	4630      	mov	r0, r6
 801dbd4:	f7fd ff36 	bl	801ba44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dbd8:	4680      	mov	r8, r0
 801dbda:	4630      	mov	r0, r6
 801dbdc:	4e83      	ldr	r6, [pc, #524]	; (801ddec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801dbde:	f7fd ff6b 	bl	801bab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dbe2:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801dbe6:	f10d 0920 	add.w	r9, sp, #32
 801dbea:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801dbee:	a806      	add	r0, sp, #24
 801dbf0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801dbf4:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801dbf8:	f7fb fa68 	bl	80190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dbfc:	4648      	mov	r0, r9
 801dbfe:	f7fb fa65 	bl	80190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc02:	a80a      	add	r0, sp, #40	; 0x28
 801dc04:	f7fb fa62 	bl	80190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc08:	4b79      	ldr	r3, [pc, #484]	; (801ddf0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801dc0a:	2100      	movs	r1, #0
 801dc0c:	f9b6 2000 	ldrsh.w	r2, [r6]
 801dc10:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dc14:	4648      	mov	r0, r9
 801dc16:	910c      	str	r1, [sp, #48]	; 0x30
 801dc18:	a90c      	add	r1, sp, #48	; 0x30
 801dc1a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801dc1e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801dc22:	f7f7 feef 	bl	8015a04 <_ZN8touchgfx4RectaNERKS0_>
 801dc26:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801dc2a:	9602      	str	r6, [sp, #8]
 801dc2c:	f1bc 0f00 	cmp.w	ip, #0
 801dc30:	f340 80a4 	ble.w	801dd7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dc34:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801dc38:	2e00      	cmp	r6, #0
 801dc3a:	f340 809f 	ble.w	801dd7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dc3e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801dc42:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801dc46:	4288      	cmp	r0, r1
 801dc48:	db36      	blt.n	801dcb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dc4a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801dc4e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801dc52:	429a      	cmp	r2, r3
 801dc54:	db30      	blt.n	801dcb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dc56:	4460      	add	r0, ip
 801dc58:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801dc5c:	4461      	add	r1, ip
 801dc5e:	b200      	sxth	r0, r0
 801dc60:	b209      	sxth	r1, r1
 801dc62:	4288      	cmp	r0, r1
 801dc64:	dc28      	bgt.n	801dcb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dc66:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801dc6a:	4432      	add	r2, r6
 801dc6c:	440b      	add	r3, r1
 801dc6e:	b212      	sxth	r2, r2
 801dc70:	b21b      	sxth	r3, r3
 801dc72:	429a      	cmp	r2, r3
 801dc74:	dc20      	bgt.n	801dcb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dc76:	6823      	ldr	r3, [r4, #0]
 801dc78:	4620      	mov	r0, r4
 801dc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc7c:	4798      	blx	r3
 801dc7e:	4682      	mov	sl, r0
 801dc80:	6828      	ldr	r0, [r5, #0]
 801dc82:	6803      	ldr	r3, [r0, #0]
 801dc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc86:	4798      	blx	r3
 801dc88:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801dc8c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dc90:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801dc94:	9303      	str	r3, [sp, #12]
 801dc96:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801dc9a:	1a9b      	subs	r3, r3, r2
 801dc9c:	b29b      	uxth	r3, r3
 801dc9e:	b21c      	sxth	r4, r3
 801dca0:	2c00      	cmp	r4, #0
 801dca2:	dc0e      	bgt.n	801dcc2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801dca4:	b134      	cbz	r4, 801dcb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801dca6:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dcaa:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801dcae:	4413      	add	r3, r2
 801dcb0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801dcb4:	463c      	mov	r4, r7
 801dcb6:	e00b      	b.n	801dcd0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801dcb8:	4b4e      	ldr	r3, [pc, #312]	; (801ddf4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801dcba:	f240 2101 	movw	r1, #513	; 0x201
 801dcbe:	4a47      	ldr	r2, [pc, #284]	; (801dddc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dcc0:	e758      	b.n	801db74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dcc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dcc6:	ebab 0303 	sub.w	r3, fp, r3
 801dcca:	443c      	add	r4, r7
 801dccc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801dcd0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801dcd4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801dcd8:	1a9b      	subs	r3, r3, r2
 801dcda:	b29b      	uxth	r3, r3
 801dcdc:	b219      	sxth	r1, r3
 801dcde:	2900      	cmp	r1, #0
 801dce0:	dd50      	ble.n	801dd84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801dce2:	9a03      	ldr	r2, [sp, #12]
 801dce4:	fb02 4401 	mla	r4, r2, r1, r4
 801dce8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801dcec:	1ad3      	subs	r3, r2, r3
 801dcee:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801dcf2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801dcf6:	f1bc 0f00 	cmp.w	ip, #0
 801dcfa:	dd3f      	ble.n	801dd7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dcfc:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801dd00:	2e00      	cmp	r6, #0
 801dd02:	dd3b      	ble.n	801dd7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dd04:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801dd08:	2203      	movs	r2, #3
 801dd0a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801dd0e:	fb0a f801 	mul.w	r8, sl, r1
 801dd12:	fb13 8802 	smlabb	r8, r3, r2, r8
 801dd16:	9a02      	ldr	r2, [sp, #8]
 801dd18:	4480      	add	r8, r0
 801dd1a:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801dd1e:	8812      	ldrh	r2, [r2, #0]
 801dd20:	4584      	cmp	ip, r0
 801dd22:	eba2 0303 	sub.w	r3, r2, r3
 801dd26:	bfa8      	it	ge
 801dd28:	4684      	movge	ip, r0
 801dd2a:	459c      	cmp	ip, r3
 801dd2c:	bfa8      	it	ge
 801dd2e:	469c      	movge	ip, r3
 801dd30:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801dd34:	429e      	cmp	r6, r3
 801dd36:	bfa8      	it	ge
 801dd38:	461e      	movge	r6, r3
 801dd3a:	4b2d      	ldr	r3, [pc, #180]	; (801ddf0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801dd3c:	881b      	ldrh	r3, [r3, #0]
 801dd3e:	1a59      	subs	r1, r3, r1
 801dd40:	4633      	mov	r3, r6
 801dd42:	428e      	cmp	r6, r1
 801dd44:	bfa8      	it	ge
 801dd46:	460b      	movge	r3, r1
 801dd48:	4562      	cmp	r2, ip
 801dd4a:	9302      	str	r3, [sp, #8]
 801dd4c:	d12d      	bne.n	801ddaa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801dd4e:	455a      	cmp	r2, fp
 801dd50:	d12b      	bne.n	801ddaa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801dd52:	6828      	ldr	r0, [r5, #0]
 801dd54:	6803      	ldr	r3, [r0, #0]
 801dd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd58:	4798      	blx	r3
 801dd5a:	07c3      	lsls	r3, r0, #31
 801dd5c:	d51b      	bpl.n	801dd96 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801dd5e:	6828      	ldr	r0, [r5, #0]
 801dd60:	9b02      	ldr	r3, [sp, #8]
 801dd62:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801dd66:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801dd6a:	6803      	ldr	r3, [r0, #0]
 801dd6c:	f8cd b000 	str.w	fp, [sp]
 801dd70:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801dd72:	4623      	mov	r3, r4
 801dd74:	e899 0006 	ldmia.w	r9, {r1, r2}
 801dd78:	47a8      	blx	r5
 801dd7a:	4607      	mov	r7, r0
 801dd7c:	4638      	mov	r0, r7
 801dd7e:	b00f      	add	sp, #60	; 0x3c
 801dd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd84:	bf1f      	itttt	ne
 801dd86:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801dd8a:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801dd8e:	189b      	addne	r3, r3, r2
 801dd90:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801dd94:	e7ad      	b.n	801dcf2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801dd96:	6828      	ldr	r0, [r5, #0]
 801dd98:	4642      	mov	r2, r8
 801dd9a:	4621      	mov	r1, r4
 801dd9c:	6803      	ldr	r3, [r0, #0]
 801dd9e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801dda0:	9b02      	ldr	r3, [sp, #8]
 801dda2:	fb03 f30a 	mul.w	r3, r3, sl
 801dda6:	47a8      	blx	r5
 801dda8:	e7e8      	b.n	801dd7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ddaa:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801ddae:	f04f 0900 	mov.w	r9, #0
 801ddb2:	9b02      	ldr	r3, [sp, #8]
 801ddb4:	454b      	cmp	r3, r9
 801ddb6:	dde1      	ble.n	801dd7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ddb8:	6828      	ldr	r0, [r5, #0]
 801ddba:	4642      	mov	r2, r8
 801ddbc:	4621      	mov	r1, r4
 801ddbe:	44d0      	add	r8, sl
 801ddc0:	6803      	ldr	r3, [r0, #0]
 801ddc2:	f109 0901 	add.w	r9, r9, #1
 801ddc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ddc8:	461e      	mov	r6, r3
 801ddca:	465b      	mov	r3, fp
 801ddcc:	47b0      	blx	r6
 801ddce:	9b03      	ldr	r3, [sp, #12]
 801ddd0:	441c      	add	r4, r3
 801ddd2:	e7ee      	b.n	801ddb2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801ddd4:	2000b36c 	.word	0x2000b36c
 801ddd8:	0802ae5d 	.word	0x0802ae5d
 801dddc:	0802b639 	.word	0x0802b639
 801dde0:	0802ae2b 	.word	0x0802ae2b
 801dde4:	0802af0f 	.word	0x0802af0f
 801dde8:	0802af64 	.word	0x0802af64
 801ddec:	2000b366 	.word	0x2000b366
 801ddf0:	2000b368 	.word	0x2000b368
 801ddf4:	0802afa2 	.word	0x0802afa2

0801ddf8 <_ZN8touchgfx8LCD24bppC1Ev>:
 801ddf8:	4a0b      	ldr	r2, [pc, #44]	; (801de28 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801ddfa:	6002      	str	r2, [r0, #0]
 801ddfc:	2200      	movs	r2, #0
 801ddfe:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801de02:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801de06:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801de0a:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801de0e:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801de12:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801de16:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801de1a:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801de1e:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801de22:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801de26:	4770      	bx	lr
 801de28:	0802b288 	.word	0x0802b288

0801de2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801de2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de30:	b093      	sub	sp, #76	; 0x4c
 801de32:	880c      	ldrh	r4, [r1, #0]
 801de34:	4605      	mov	r5, r0
 801de36:	460f      	mov	r7, r1
 801de38:	4691      	mov	r9, r2
 801de3a:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801de3e:	b12c      	cbz	r4, 801de4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801de40:	4b71      	ldr	r3, [pc, #452]	; (801e008 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801de42:	2168      	movs	r1, #104	; 0x68
 801de44:	4a71      	ldr	r2, [pc, #452]	; (801e00c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801de46:	4872      	ldr	r0, [pc, #456]	; (801e010 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801de48:	f007 fc4a 	bl	80256e0 <__assert_func>
 801de4c:	6810      	ldr	r0, [r2, #0]
 801de4e:	ae0e      	add	r6, sp, #56	; 0x38
 801de50:	6851      	ldr	r1, [r2, #4]
 801de52:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801e018 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801de56:	c603      	stmia	r6!, {r0, r1}
 801de58:	6818      	ldr	r0, [r3, #0]
 801de5a:	ae10      	add	r6, sp, #64	; 0x40
 801de5c:	6859      	ldr	r1, [r3, #4]
 801de5e:	c603      	stmia	r6!, {r0, r1}
 801de60:	a80e      	add	r0, sp, #56	; 0x38
 801de62:	f7fb f933 	bl	80190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de66:	4649      	mov	r1, r9
 801de68:	a810      	add	r0, sp, #64	; 0x40
 801de6a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801e014 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801de6e:	f7fb f915 	bl	801909c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801de72:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801de76:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801de7a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801de7e:	f8d9 0000 	ldr.w	r0, [r9]
 801de82:	fb11 2103 	smlabb	r1, r1, r3, r2
 801de86:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801de8a:	440d      	add	r5, r1
 801de8c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801de90:	440a      	add	r2, r1
 801de92:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801de96:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801de9a:	4413      	add	r3, r2
 801de9c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801dea0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801dea4:	930b      	str	r3, [sp, #44]	; 0x2c
 801dea6:	6803      	ldr	r3, [r0, #0]
 801dea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801deac:	4798      	blx	r3
 801deae:	2801      	cmp	r0, #1
 801deb0:	d11e      	bne.n	801def0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801deb2:	220b      	movs	r2, #11
 801deb4:	9008      	str	r0, [sp, #32]
 801deb6:	b2b6      	uxth	r6, r6
 801deb8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801debc:	9207      	str	r2, [sp, #28]
 801debe:	4629      	mov	r1, r5
 801dec0:	f8ba 2000 	ldrh.w	r2, [sl]
 801dec4:	f8cd 8010 	str.w	r8, [sp, #16]
 801dec8:	9601      	str	r6, [sp, #4]
 801deca:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801dece:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801ded2:	9203      	str	r2, [sp, #12]
 801ded4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801ded8:	9202      	str	r2, [sp, #8]
 801deda:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801dede:	9200      	str	r2, [sp, #0]
 801dee0:	463a      	mov	r2, r7
 801dee2:	f8d9 0000 	ldr.w	r0, [r9]
 801dee6:	f7f8 f9db 	bl	80162a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801deea:	b013      	add	sp, #76	; 0x4c
 801deec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801def0:	f8d9 0000 	ldr.w	r0, [r9]
 801def4:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801def8:	6803      	ldr	r3, [r0, #0]
 801defa:	6a1b      	ldr	r3, [r3, #32]
 801defc:	4798      	blx	r3
 801defe:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801df02:	f8ba 3000 	ldrh.w	r3, [sl]
 801df06:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801df0a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801df0e:	fb01 2303 	mla	r3, r1, r3, r2
 801df12:	4621      	mov	r1, r4
 801df14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df18:	4418      	add	r0, r3
 801df1a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801df1e:	930c      	str	r3, [sp, #48]	; 0x30
 801df20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df22:	4299      	cmp	r1, r3
 801df24:	da6a      	bge.n	801dffc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801df26:	1cc2      	adds	r2, r0, #3
 801df28:	46aa      	mov	sl, r5
 801df2a:	ebaa 0305 	sub.w	r3, sl, r5
 801df2e:	429e      	cmp	r6, r3
 801df30:	dd55      	ble.n	801dfde <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801df32:	2404      	movs	r4, #4
 801df34:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801df38:	fb14 4303 	smlabb	r3, r4, r3, r4
 801df3c:	eb07 0e03 	add.w	lr, r7, r3
 801df40:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801df44:	b184      	cbz	r4, 801df68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801df46:	2cff      	cmp	r4, #255	; 0xff
 801df48:	f817 b003 	ldrb.w	fp, [r7, r3]
 801df4c:	d10e      	bne.n	801df6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801df4e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801df52:	d10b      	bne.n	801df6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801df54:	f802 bc03 	strb.w	fp, [r2, #-3]
 801df58:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801df5c:	f802 3c02 	strb.w	r3, [r2, #-2]
 801df60:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801df64:	f802 3c01 	strb.w	r3, [r2, #-1]
 801df68:	3203      	adds	r2, #3
 801df6a:	e7de      	b.n	801df2a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801df6c:	fb08 f404 	mul.w	r4, r8, r4
 801df70:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801df74:	1c63      	adds	r3, r4, #1
 801df76:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801df7a:	121b      	asrs	r3, r3, #8
 801df7c:	b29c      	uxth	r4, r3
 801df7e:	43db      	mvns	r3, r3
 801df80:	fb1b fb04 	smulbb	fp, fp, r4
 801df84:	b2db      	uxtb	r3, r3
 801df86:	fb0c bc03 	mla	ip, ip, r3, fp
 801df8a:	fa1f fc8c 	uxth.w	ip, ip
 801df8e:	f10c 0b01 	add.w	fp, ip, #1
 801df92:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801df96:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801df9a:	fb1b fb03 	smulbb	fp, fp, r3
 801df9e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dfa2:	f802 cc03 	strb.w	ip, [r2, #-3]
 801dfa6:	f89e c001 	ldrb.w	ip, [lr, #1]
 801dfaa:	fb0c bc04 	mla	ip, ip, r4, fp
 801dfae:	fa1f fc8c 	uxth.w	ip, ip
 801dfb2:	f10c 0b01 	add.w	fp, ip, #1
 801dfb6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801dfba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dfbe:	f802 cc02 	strb.w	ip, [r2, #-2]
 801dfc2:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801dfc6:	f89e e002 	ldrb.w	lr, [lr, #2]
 801dfca:	fb1c f303 	smulbb	r3, ip, r3
 801dfce:	fb0e 3304 	mla	r3, lr, r4, r3
 801dfd2:	b29b      	uxth	r3, r3
 801dfd4:	1c5c      	adds	r4, r3, #1
 801dfd6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801dfda:	121b      	asrs	r3, r3, #8
 801dfdc:	e7c2      	b.n	801df64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801dfde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dfe0:	3101      	adds	r1, #1
 801dfe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dfe4:	881b      	ldrh	r3, [r3, #0]
 801dfe6:	1b9b      	subs	r3, r3, r6
 801dfe8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dfec:	4413      	add	r3, r2
 801dfee:	4418      	add	r0, r3
 801dff0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801dff4:	1b9b      	subs	r3, r3, r6
 801dff6:	444b      	add	r3, r9
 801dff8:	441d      	add	r5, r3
 801dffa:	e791      	b.n	801df20 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801dffc:	4b05      	ldr	r3, [pc, #20]	; (801e014 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801dffe:	6818      	ldr	r0, [r3, #0]
 801e000:	6803      	ldr	r3, [r0, #0]
 801e002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e004:	4798      	blx	r3
 801e006:	e770      	b.n	801deea <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e008:	0802ad8f 	.word	0x0802ad8f
 801e00c:	0802b45b 	.word	0x0802b45b
 801e010:	0802ae2b 	.word	0x0802ae2b
 801e014:	2000b36c 	.word	0x2000b36c
 801e018:	2000b366 	.word	0x2000b366

0801e01c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e020:	4614      	mov	r4, r2
 801e022:	880a      	ldrh	r2, [r1, #0]
 801e024:	b091      	sub	sp, #68	; 0x44
 801e026:	4680      	mov	r8, r0
 801e028:	2a01      	cmp	r2, #1
 801e02a:	460e      	mov	r6, r1
 801e02c:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801e030:	d005      	beq.n	801e03e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801e032:	4b6d      	ldr	r3, [pc, #436]	; (801e1e8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801e034:	21b6      	movs	r1, #182	; 0xb6
 801e036:	4a6d      	ldr	r2, [pc, #436]	; (801e1ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801e038:	486d      	ldr	r0, [pc, #436]	; (801e1f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801e03a:	f007 fb51 	bl	80256e0 <__assert_func>
 801e03e:	6820      	ldr	r0, [r4, #0]
 801e040:	ad0c      	add	r5, sp, #48	; 0x30
 801e042:	6861      	ldr	r1, [r4, #4]
 801e044:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801e1f4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801e048:	c503      	stmia	r5!, {r0, r1}
 801e04a:	6818      	ldr	r0, [r3, #0]
 801e04c:	ad0e      	add	r5, sp, #56	; 0x38
 801e04e:	6859      	ldr	r1, [r3, #4]
 801e050:	c503      	stmia	r5!, {r0, r1}
 801e052:	a80c      	add	r0, sp, #48	; 0x30
 801e054:	f7fb f83a 	bl	80190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e058:	4621      	mov	r1, r4
 801e05a:	a80e      	add	r0, sp, #56	; 0x38
 801e05c:	f7fb f81e 	bl	801909c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e060:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e064:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e068:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e06c:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801e070:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e074:	eb08 0401 	add.w	r4, r8, r1
 801e078:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e07c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801e1f8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801e080:	440a      	add	r2, r1
 801e082:	f8d8 0000 	ldr.w	r0, [r8]
 801e086:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e08a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e08e:	4413      	add	r3, r2
 801e090:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e094:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e098:	930a      	str	r3, [sp, #40]	; 0x28
 801e09a:	6803      	ldr	r3, [r0, #0]
 801e09c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e0a0:	4798      	blx	r3
 801e0a2:	2801      	cmp	r0, #1
 801e0a4:	d11e      	bne.n	801e0e4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801e0a6:	220b      	movs	r2, #11
 801e0a8:	9008      	str	r0, [sp, #32]
 801e0aa:	b2ad      	uxth	r5, r5
 801e0ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e0b0:	9207      	str	r2, [sp, #28]
 801e0b2:	4621      	mov	r1, r4
 801e0b4:	f8b9 2000 	ldrh.w	r2, [r9]
 801e0b8:	9501      	str	r5, [sp, #4]
 801e0ba:	9206      	str	r2, [sp, #24]
 801e0bc:	2200      	movs	r2, #0
 801e0be:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801e0c2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e0c6:	9203      	str	r2, [sp, #12]
 801e0c8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e0cc:	9202      	str	r2, [sp, #8]
 801e0ce:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e0d2:	9200      	str	r2, [sp, #0]
 801e0d4:	4632      	mov	r2, r6
 801e0d6:	f8d8 0000 	ldr.w	r0, [r8]
 801e0da:	f7f8 f8e1 	bl	80162a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e0de:	b011      	add	sp, #68	; 0x44
 801e0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0e4:	f8d8 0000 	ldr.w	r0, [r8]
 801e0e8:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801e0ec:	6803      	ldr	r3, [r0, #0]
 801e0ee:	6a1b      	ldr	r3, [r3, #32]
 801e0f0:	4798      	blx	r3
 801e0f2:	f8b9 3000 	ldrh.w	r3, [r9]
 801e0f6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e0fa:	f04f 0e00 	mov.w	lr, #0
 801e0fe:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e102:	fa1f f987 	uxth.w	r9, r7
 801e106:	fb01 2303 	mla	r3, r1, r3, r2
 801e10a:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801e10e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e112:	b289      	uxth	r1, r1
 801e114:	4418      	add	r0, r3
 801e116:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e11a:	930b      	str	r3, [sp, #44]	; 0x2c
 801e11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e11e:	459e      	cmp	lr, r3
 801e120:	da5c      	bge.n	801e1dc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801e122:	1cc3      	adds	r3, r0, #3
 801e124:	46a2      	mov	sl, r4
 801e126:	ebaa 0204 	sub.w	r2, sl, r4
 801e12a:	4295      	cmp	r5, r2
 801e12c:	dd46      	ble.n	801e1bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801e12e:	f04f 0c03 	mov.w	ip, #3
 801e132:	f04f 0b04 	mov.w	fp, #4
 801e136:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801e13a:	2fff      	cmp	r7, #255	; 0xff
 801e13c:	fb1c b202 	smlabb	r2, ip, r2, fp
 801e140:	eb06 0c02 	add.w	ip, r6, r2
 801e144:	f816 b002 	ldrb.w	fp, [r6, r2]
 801e148:	d02f      	beq.n	801e1aa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801e14a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801e14e:	fb12 f201 	smulbb	r2, r2, r1
 801e152:	fb0b 2209 	mla	r2, fp, r9, r2
 801e156:	b292      	uxth	r2, r2
 801e158:	f102 0b01 	add.w	fp, r2, #1
 801e15c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e160:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801e164:	fb1b fb01 	smulbb	fp, fp, r1
 801e168:	1212      	asrs	r2, r2, #8
 801e16a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801e16e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e172:	fb02 b209 	mla	r2, r2, r9, fp
 801e176:	b292      	uxth	r2, r2
 801e178:	f102 0b01 	add.w	fp, r2, #1
 801e17c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e180:	1212      	asrs	r2, r2, #8
 801e182:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e186:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e18a:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801e18e:	fb1c fc01 	smulbb	ip, ip, r1
 801e192:	fb02 c209 	mla	r2, r2, r9, ip
 801e196:	b292      	uxth	r2, r2
 801e198:	f102 0c01 	add.w	ip, r2, #1
 801e19c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e1a0:	1212      	asrs	r2, r2, #8
 801e1a2:	f803 2c01 	strb.w	r2, [r3, #-1]
 801e1a6:	3303      	adds	r3, #3
 801e1a8:	e7bd      	b.n	801e126 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801e1aa:	f803 bc03 	strb.w	fp, [r3, #-3]
 801e1ae:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e1b2:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e1b6:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e1ba:	e7f2      	b.n	801e1a2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801e1bc:	4b0d      	ldr	r3, [pc, #52]	; (801e1f4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801e1be:	f10e 0e01 	add.w	lr, lr, #1
 801e1c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e1c4:	881b      	ldrh	r3, [r3, #0]
 801e1c6:	1b5b      	subs	r3, r3, r5
 801e1c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e1cc:	4413      	add	r3, r2
 801e1ce:	4418      	add	r0, r3
 801e1d0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e1d4:	1b5b      	subs	r3, r3, r5
 801e1d6:	4443      	add	r3, r8
 801e1d8:	441c      	add	r4, r3
 801e1da:	e79f      	b.n	801e11c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801e1dc:	4b06      	ldr	r3, [pc, #24]	; (801e1f8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e1de:	6818      	ldr	r0, [r3, #0]
 801e1e0:	6803      	ldr	r3, [r0, #0]
 801e1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1e4:	4798      	blx	r3
 801e1e6:	e77a      	b.n	801e0de <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801e1e8:	0802ac73 	.word	0x0802ac73
 801e1ec:	0802b34e 	.word	0x0802b34e
 801e1f0:	0802ae2b 	.word	0x0802ae2b
 801e1f4:	2000b366 	.word	0x2000b366
 801e1f8:	2000b36c 	.word	0x2000b36c

0801e1fc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e1fc:	b570      	push	{r4, r5, r6, lr}
 801e1fe:	780d      	ldrb	r5, [r1, #0]
 801e200:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801e204:	2d01      	cmp	r5, #1
 801e206:	d00d      	beq.n	801e224 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801e208:	d307      	bcc.n	801e21a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801e20a:	2d02      	cmp	r5, #2
 801e20c:	d10f      	bne.n	801e22e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801e20e:	4b08      	ldr	r3, [pc, #32]	; (801e230 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801e210:	215b      	movs	r1, #91	; 0x5b
 801e212:	4a08      	ldr	r2, [pc, #32]	; (801e234 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801e214:	4808      	ldr	r0, [pc, #32]	; (801e238 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801e216:	f007 fa63 	bl	80256e0 <__assert_func>
 801e21a:	9404      	str	r4, [sp, #16]
 801e21c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e220:	f7ff be04 	b.w	801de2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e224:	9404      	str	r4, [sp, #16]
 801e226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e22a:	f7ff bef7 	b.w	801e01c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e22e:	bd70      	pop	{r4, r5, r6, pc}
 801e230:	0802ac28 	.word	0x0802ac28
 801e234:	0802b2cc 	.word	0x0802b2cc
 801e238:	0802ae2b 	.word	0x0802ae2b

0801e23c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801e23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e240:	4605      	mov	r5, r0
 801e242:	b08f      	sub	sp, #60	; 0x3c
 801e244:	460c      	mov	r4, r1
 801e246:	461f      	mov	r7, r3
 801e248:	2b00      	cmp	r3, #0
 801e24a:	d04e      	beq.n	801e2ea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 801e24c:	6808      	ldr	r0, [r1, #0]
 801e24e:	ab0a      	add	r3, sp, #40	; 0x28
 801e250:	6849      	ldr	r1, [r1, #4]
 801e252:	4e81      	ldr	r6, [pc, #516]	; (801e458 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 801e254:	c303      	stmia	r3!, {r0, r1}
 801e256:	6810      	ldr	r0, [r2, #0]
 801e258:	ab0c      	add	r3, sp, #48	; 0x30
 801e25a:	6851      	ldr	r1, [r2, #4]
 801e25c:	c303      	stmia	r3!, {r0, r1}
 801e25e:	a80a      	add	r0, sp, #40	; 0x28
 801e260:	f7fa ff34 	bl	80190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e264:	4621      	mov	r1, r4
 801e266:	a80c      	add	r0, sp, #48	; 0x30
 801e268:	f7fa ff18 	bl	801909c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e26c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e270:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801e274:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e278:	6830      	ldr	r0, [r6, #0]
 801e27a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e27e:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 801e282:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
 801e286:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801e28a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801e28e:	440a      	add	r2, r1
 801e290:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801e294:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801e298:	4413      	add	r3, r2
 801e29a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e29e:	6803      	ldr	r3, [r0, #0]
 801e2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e2a2:	4798      	blx	r3
 801e2a4:	2fff      	cmp	r7, #255	; 0xff
 801e2a6:	4633      	mov	r3, r6
 801e2a8:	4e6c      	ldr	r6, [pc, #432]	; (801e45c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 801e2aa:	d021      	beq.n	801e2f0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801e2ac:	f010 0f04 	tst.w	r0, #4
 801e2b0:	6818      	ldr	r0, [r3, #0]
 801e2b2:	d020      	beq.n	801e2f6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801e2b4:	2100      	movs	r1, #0
 801e2b6:	f04f 0e01 	mov.w	lr, #1
 801e2ba:	f8d0 c000 	ldr.w	ip, [r0]
 801e2be:	b2a4      	uxth	r4, r4
 801e2c0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801e2c4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801e2c8:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801e2cc:	8836      	ldrh	r6, [r6, #0]
 801e2ce:	9703      	str	r7, [sp, #12]
 801e2d0:	9400      	str	r4, [sp, #0]
 801e2d2:	e9cd 1604 	strd	r1, r6, [sp, #16]
 801e2d6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e2da:	9102      	str	r1, [sp, #8]
 801e2dc:	fa1f f188 	uxth.w	r1, r8
 801e2e0:	9101      	str	r1, [sp, #4]
 801e2e2:	4629      	mov	r1, r5
 801e2e4:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 801e2e8:	47a0      	blx	r4
 801e2ea:	b00f      	add	sp, #60	; 0x3c
 801e2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2f0:	f010 0f01 	tst.w	r0, #1
 801e2f4:	e7dc      	b.n	801e2b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x74>
 801e2f6:	6803      	ldr	r3, [r0, #0]
 801e2f8:	6a1b      	ldr	r3, [r3, #32]
 801e2fa:	4798      	blx	r3
 801e2fc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e300:	8833      	ldrh	r3, [r6, #0]
 801e302:	2fff      	cmp	r7, #255	; 0xff
 801e304:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801e308:	fb01 2303 	mla	r3, r1, r3, r2
 801e30c:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 801e310:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e314:	4418      	add	r0, r3
 801e316:	d128      	bne.n	801e36a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x12e>
 801e318:	0051      	lsls	r1, r2, #1
 801e31a:	2700      	movs	r7, #0
 801e31c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e320:	4547      	cmp	r7, r8
 801e322:	f280 8092 	bge.w	801e44a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 801e326:	4684      	mov	ip, r0
 801e328:	f04f 0e00 	mov.w	lr, #0
 801e32c:	45a6      	cmp	lr, r4
 801e32e:	f10c 0c03 	add.w	ip, ip, #3
 801e332:	da7c      	bge.n	801e42e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1f2>
 801e334:	f835 901e 	ldrh.w	r9, [r5, lr, lsl #1]
 801e338:	f10e 0e01 	add.w	lr, lr, #1
 801e33c:	ea4f 2a29 	mov.w	sl, r9, asr #8
 801e340:	f3c9 0b82 	ubfx	fp, r9, #2, #3
 801e344:	ea4f 03e9 	mov.w	r3, r9, asr #3
 801e348:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801e34c:	ea4b 09c9 	orr.w	r9, fp, r9, lsl #3
 801e350:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e354:	ea4a 1a5a 	orr.w	sl, sl, sl, lsr #5
 801e358:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801e35c:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 801e360:	f80c ac01 	strb.w	sl, [ip, #-1]
 801e364:	f80c 3c02 	strb.w	r3, [ip, #-2]
 801e368:	e7e0      	b.n	801e32c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xf0>
 801e36a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801e36e:	ea6f 0c07 	mvn.w	ip, r7
 801e372:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 801e376:	f04f 0900 	mov.w	r9, #0
 801e37a:	9309      	str	r3, [sp, #36]	; 0x24
 801e37c:	fa5f fc8c 	uxtb.w	ip, ip
 801e380:	b2bb      	uxth	r3, r7
 801e382:	45c1      	cmp	r9, r8
 801e384:	da61      	bge.n	801e44a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 801e386:	4601      	mov	r1, r0
 801e388:	f04f 0e00 	mov.w	lr, #0
 801e38c:	45a6      	cmp	lr, r4
 801e38e:	f101 0103 	add.w	r1, r1, #3
 801e392:	da3b      	bge.n	801e40c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d0>
 801e394:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 801e398:	f10e 0e01 	add.w	lr, lr, #1
 801e39c:	f3c2 0b82 	ubfx	fp, r2, #2, #3
 801e3a0:	1216      	asrs	r6, r2, #8
 801e3a2:	10d7      	asrs	r7, r2, #3
 801e3a4:	ea4b 02c2 	orr.w	r2, fp, r2, lsl #3
 801e3a8:	f811 bc03 	ldrb.w	fp, [r1, #-3]
 801e3ac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e3b0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e3b4:	fb1b fb0c 	smulbb	fp, fp, ip
 801e3b8:	b2d2      	uxtb	r2, r2
 801e3ba:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e3be:	fb02 b203 	mla	r2, r2, r3, fp
 801e3c2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e3c6:	fb17 f703 	smulbb	r7, r7, r3
 801e3ca:	fb16 f603 	smulbb	r6, r6, r3
 801e3ce:	b292      	uxth	r2, r2
 801e3d0:	f102 0b01 	add.w	fp, r2, #1
 801e3d4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e3d8:	1212      	asrs	r2, r2, #8
 801e3da:	f801 2c03 	strb.w	r2, [r1, #-3]
 801e3de:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 801e3e2:	fb02 770c 	mla	r7, r2, ip, r7
 801e3e6:	b2bf      	uxth	r7, r7
 801e3e8:	1c7a      	adds	r2, r7, #1
 801e3ea:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e3ee:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 801e3f2:	fb02 660c 	mla	r6, r2, ip, r6
 801e3f6:	123f      	asrs	r7, r7, #8
 801e3f8:	b2b6      	uxth	r6, r6
 801e3fa:	f801 7c02 	strb.w	r7, [r1, #-2]
 801e3fe:	1c72      	adds	r2, r6, #1
 801e400:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801e404:	1236      	asrs	r6, r6, #8
 801e406:	f801 6c01 	strb.w	r6, [r1, #-1]
 801e40a:	e7bf      	b.n	801e38c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x150>
 801e40c:	4a13      	ldr	r2, [pc, #76]	; (801e45c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 801e40e:	f109 0901 	add.w	r9, r9, #1
 801e412:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e414:	8812      	ldrh	r2, [r2, #0]
 801e416:	1b12      	subs	r2, r2, r4
 801e418:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e41c:	440a      	add	r2, r1
 801e41e:	4410      	add	r0, r2
 801e420:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801e424:	1b12      	subs	r2, r2, r4
 801e426:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801e42a:	4415      	add	r5, r2
 801e42c:	e7a9      	b.n	801e382 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x146>
 801e42e:	8833      	ldrh	r3, [r6, #0]
 801e430:	3701      	adds	r7, #1
 801e432:	1b1b      	subs	r3, r3, r4
 801e434:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e438:	4413      	add	r3, r2
 801e43a:	4418      	add	r0, r3
 801e43c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801e440:	1b1b      	subs	r3, r3, r4
 801e442:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801e446:	441d      	add	r5, r3
 801e448:	e76a      	b.n	801e320 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xe4>
 801e44a:	4b03      	ldr	r3, [pc, #12]	; (801e458 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 801e44c:	6818      	ldr	r0, [r3, #0]
 801e44e:	6803      	ldr	r3, [r0, #0]
 801e450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e452:	4798      	blx	r3
 801e454:	e749      	b.n	801e2ea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 801e456:	bf00      	nop
 801e458:	2000b36c 	.word	0x2000b36c
 801e45c:	2000b366 	.word	0x2000b366

0801e460 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e464:	b08b      	sub	sp, #44	; 0x2c
 801e466:	460c      	mov	r4, r1
 801e468:	4680      	mov	r8, r0
 801e46a:	469a      	mov	sl, r3
 801e46c:	6808      	ldr	r0, [r1, #0]
 801e46e:	ab06      	add	r3, sp, #24
 801e470:	6849      	ldr	r1, [r1, #4]
 801e472:	c303      	stmia	r3!, {r0, r1}
 801e474:	6810      	ldr	r0, [r2, #0]
 801e476:	ab08      	add	r3, sp, #32
 801e478:	6851      	ldr	r1, [r2, #4]
 801e47a:	c303      	stmia	r3!, {r0, r1}
 801e47c:	a806      	add	r0, sp, #24
 801e47e:	f7fa fe25 	bl	80190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e482:	4621      	mov	r1, r4
 801e484:	a808      	add	r0, sp, #32
 801e486:	4c61      	ldr	r4, [pc, #388]	; (801e60c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e488:	f7fa fe08 	bl	801909c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e48c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e490:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e494:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e498:	6820      	ldr	r0, [r4, #0]
 801e49a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e49e:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801e4a2:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801e4a6:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801e4aa:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e4ae:	440a      	add	r2, r1
 801e4b0:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e4b4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e4b8:	4413      	add	r3, r2
 801e4ba:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e4be:	6803      	ldr	r3, [r0, #0]
 801e4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e4c2:	4798      	blx	r3
 801e4c4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e4c8:	d118      	bne.n	801e4fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e4ca:	f010 0f20 	tst.w	r0, #32
 801e4ce:	6820      	ldr	r0, [r4, #0]
 801e4d0:	d017      	beq.n	801e502 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e4d2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e4d6:	b2bf      	uxth	r7, r7
 801e4d8:	6801      	ldr	r1, [r0, #0]
 801e4da:	9402      	str	r4, [sp, #8]
 801e4dc:	fa1f f489 	uxth.w	r4, r9
 801e4e0:	f8cd a00c 	str.w	sl, [sp, #12]
 801e4e4:	9401      	str	r4, [sp, #4]
 801e4e6:	9700      	str	r7, [sp, #0]
 801e4e8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e4ec:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801e4ee:	4641      	mov	r1, r8
 801e4f0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e4f4:	47a0      	blx	r4
 801e4f6:	b00b      	add	sp, #44	; 0x2c
 801e4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e500:	e7e5      	b.n	801e4ce <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801e502:	6803      	ldr	r3, [r0, #0]
 801e504:	6a1b      	ldr	r3, [r3, #32]
 801e506:	4798      	blx	r3
 801e508:	4b41      	ldr	r3, [pc, #260]	; (801e610 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801e50a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e50e:	f04f 0c00 	mov.w	ip, #0
 801e512:	881a      	ldrh	r2, [r3, #0]
 801e514:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801e518:	fb04 1202 	mla	r2, r4, r2, r1
 801e51c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e520:	4410      	add	r0, r2
 801e522:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801e526:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801e52a:	0092      	lsls	r2, r2, #2
 801e52c:	9105      	str	r1, [sp, #20]
 801e52e:	9204      	str	r2, [sp, #16]
 801e530:	45cc      	cmp	ip, r9
 801e532:	da65      	bge.n	801e600 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801e534:	1cc4      	adds	r4, r0, #3
 801e536:	f108 0504 	add.w	r5, r8, #4
 801e53a:	f04f 0e00 	mov.w	lr, #0
 801e53e:	45be      	cmp	lr, r7
 801e540:	da4d      	bge.n	801e5de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801e542:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e546:	b181      	cbz	r1, 801e56a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e548:	29ff      	cmp	r1, #255	; 0xff
 801e54a:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801e54e:	d111      	bne.n	801e574 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e550:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e554:	d10e      	bne.n	801e574 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e556:	f804 bc03 	strb.w	fp, [r4, #-3]
 801e55a:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801e55e:	f804 2c02 	strb.w	r2, [r4, #-2]
 801e562:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801e566:	f804 2c01 	strb.w	r2, [r4, #-1]
 801e56a:	f10e 0e01 	add.w	lr, lr, #1
 801e56e:	3403      	adds	r4, #3
 801e570:	3504      	adds	r5, #4
 801e572:	e7e4      	b.n	801e53e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801e574:	fb0a f101 	mul.w	r1, sl, r1
 801e578:	1c4a      	adds	r2, r1, #1
 801e57a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e57e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e582:	1212      	asrs	r2, r2, #8
 801e584:	b296      	uxth	r6, r2
 801e586:	43d2      	mvns	r2, r2
 801e588:	fb1b fb06 	smulbb	fp, fp, r6
 801e58c:	b2d2      	uxtb	r2, r2
 801e58e:	fb01 b102 	mla	r1, r1, r2, fp
 801e592:	b289      	uxth	r1, r1
 801e594:	f101 0b01 	add.w	fp, r1, #1
 801e598:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e59c:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801e5a0:	fb1b fb02 	smulbb	fp, fp, r2
 801e5a4:	1209      	asrs	r1, r1, #8
 801e5a6:	f804 1c03 	strb.w	r1, [r4, #-3]
 801e5aa:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801e5ae:	fb01 b106 	mla	r1, r1, r6, fp
 801e5b2:	b289      	uxth	r1, r1
 801e5b4:	f101 0b01 	add.w	fp, r1, #1
 801e5b8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e5bc:	1209      	asrs	r1, r1, #8
 801e5be:	f804 1c02 	strb.w	r1, [r4, #-2]
 801e5c2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e5c6:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e5ca:	fb11 f202 	smulbb	r2, r1, r2
 801e5ce:	fb0b 2206 	mla	r2, fp, r6, r2
 801e5d2:	b292      	uxth	r2, r2
 801e5d4:	1c56      	adds	r6, r2, #1
 801e5d6:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e5da:	1212      	asrs	r2, r2, #8
 801e5dc:	e7c3      	b.n	801e566 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801e5de:	881a      	ldrh	r2, [r3, #0]
 801e5e0:	f10c 0c01 	add.w	ip, ip, #1
 801e5e4:	9905      	ldr	r1, [sp, #20]
 801e5e6:	1bd2      	subs	r2, r2, r7
 801e5e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e5ec:	440a      	add	r2, r1
 801e5ee:	9904      	ldr	r1, [sp, #16]
 801e5f0:	4410      	add	r0, r2
 801e5f2:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801e5f6:	1bd2      	subs	r2, r2, r7
 801e5f8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e5fc:	4490      	add	r8, r2
 801e5fe:	e797      	b.n	801e530 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801e600:	4b02      	ldr	r3, [pc, #8]	; (801e60c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e602:	6818      	ldr	r0, [r3, #0]
 801e604:	6803      	ldr	r3, [r0, #0]
 801e606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e608:	4798      	blx	r3
 801e60a:	e774      	b.n	801e4f6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e60c:	2000b36c 	.word	0x2000b36c
 801e610:	2000b366 	.word	0x2000b366

0801e614 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e618:	b085      	sub	sp, #20
 801e61a:	4606      	mov	r6, r0
 801e61c:	460c      	mov	r4, r1
 801e61e:	4691      	mov	r9, r2
 801e620:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801e624:	4698      	mov	r8, r3
 801e626:	b3a5      	cbz	r5, 801e692 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e628:	4608      	mov	r0, r1
 801e62a:	f7fd fa0b 	bl	801ba44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e62e:	4607      	mov	r7, r0
 801e630:	4620      	mov	r0, r4
 801e632:	f7fd fa41 	bl	801bab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e636:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e63a:	4620      	mov	r0, r4
 801e63c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e640:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e644:	f8ad 700c 	strh.w	r7, [sp, #12]
 801e648:	f7fd fb4e 	bl	801bce8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e64c:	b1a0      	cbz	r0, 801e678 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e64e:	4620      	mov	r0, r4
 801e650:	f7fd fb4a 	bl	801bce8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e654:	2801      	cmp	r0, #1
 801e656:	d00f      	beq.n	801e678 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e658:	4620      	mov	r0, r4
 801e65a:	f7fd fb45 	bl	801bce8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e65e:	2802      	cmp	r0, #2
 801e660:	d00a      	beq.n	801e678 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e662:	4620      	mov	r0, r4
 801e664:	f7fd fb40 	bl	801bce8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e668:	280b      	cmp	r0, #11
 801e66a:	d005      	beq.n	801e678 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e66c:	4b21      	ldr	r3, [pc, #132]	; (801e6f4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>)
 801e66e:	213f      	movs	r1, #63	; 0x3f
 801e670:	4a21      	ldr	r2, [pc, #132]	; (801e6f8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>)
 801e672:	4822      	ldr	r0, [pc, #136]	; (801e6fc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe8>)
 801e674:	f007 f834 	bl	80256e0 <__assert_func>
 801e678:	4620      	mov	r0, r4
 801e67a:	f7fd fb35 	bl	801bce8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e67e:	2802      	cmp	r0, #2
 801e680:	4620      	mov	r0, r4
 801e682:	d109      	bne.n	801e698 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 801e684:	f7fd faac 	bl	801bbe0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e688:	462b      	mov	r3, r5
 801e68a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e68c:	a902      	add	r1, sp, #8
 801e68e:	f7ff fee7 	bl	801e460 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e692:	b005      	add	sp, #20
 801e694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e698:	f7fd fb26 	bl	801bce8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e69c:	280b      	cmp	r0, #11
 801e69e:	4620      	mov	r0, r4
 801e6a0:	d10d      	bne.n	801e6be <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801e6a2:	f7fd fa9d 	bl	801bbe0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e6a6:	4606      	mov	r6, r0
 801e6a8:	4620      	mov	r0, r4
 801e6aa:	f7fd facb 	bl	801bc44 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e6ae:	9500      	str	r5, [sp, #0]
 801e6b0:	4601      	mov	r1, r0
 801e6b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6b4:	aa02      	add	r2, sp, #8
 801e6b6:	4630      	mov	r0, r6
 801e6b8:	f7ff fda0 	bl	801e1fc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e6bc:	e7e9      	b.n	801e692 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e6be:	f7fd fb13 	bl	801bce8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e6c2:	b940      	cbnz	r0, 801e6d6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc2>
 801e6c4:	4620      	mov	r0, r4
 801e6c6:	f7fd fa8b 	bl	801bbe0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e6ca:	462b      	mov	r3, r5
 801e6cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e6ce:	a902      	add	r1, sp, #8
 801e6d0:	f7ff fdb4 	bl	801e23c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801e6d4:	e7dd      	b.n	801e692 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e6d6:	6833      	ldr	r3, [r6, #0]
 801e6d8:	4620      	mov	r0, r4
 801e6da:	68df      	ldr	r7, [r3, #12]
 801e6dc:	f7fd fa80 	bl	801bbe0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	4601      	mov	r1, r0
 801e6e4:	aa02      	add	r2, sp, #8
 801e6e6:	4630      	mov	r0, r6
 801e6e8:	e9cd 5300 	strd	r5, r3, [sp]
 801e6ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6ee:	47b8      	blx	r7
 801e6f0:	e7cf      	b.n	801e692 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e6f2:	bf00      	nop
 801e6f4:	0802acc1 	.word	0x0802acc1
 801e6f8:	0802b3d7 	.word	0x0802b3d7
 801e6fc:	0802ae2b 	.word	0x0802ae2b

0801e700 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e700:	b570      	push	{r4, r5, r6, lr}
 801e702:	9d04      	ldr	r5, [sp, #16]
 801e704:	460c      	mov	r4, r1
 801e706:	4619      	mov	r1, r3
 801e708:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e70c:	2a0c      	cmp	r2, #12
 801e70e:	d826      	bhi.n	801e75e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801e710:	e8df f002 	tbb	[pc, r2]
 801e714:	200e1407 	.word	0x200e1407
 801e718:	20202020 	.word	0x20202020
 801e71c:	20202020 	.word	0x20202020
 801e720:	20          	.byte	0x20
 801e721:	00          	.byte	0x00
 801e722:	4b0f      	ldr	r3, [pc, #60]	; (801e760 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801e724:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 801e728:	4a0e      	ldr	r2, [pc, #56]	; (801e764 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e72a:	480f      	ldr	r0, [pc, #60]	; (801e768 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801e72c:	f006 ffd8 	bl	80256e0 <__assert_func>
 801e730:	462a      	mov	r2, r5
 801e732:	4620      	mov	r0, r4
 801e734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e738:	f7ff be92 	b.w	801e460 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e73c:	6802      	ldr	r2, [r0, #0]
 801e73e:	2600      	movs	r6, #0
 801e740:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e744:	68d6      	ldr	r6, [r2, #12]
 801e746:	462b      	mov	r3, r5
 801e748:	460a      	mov	r2, r1
 801e74a:	4621      	mov	r1, r4
 801e74c:	46b4      	mov	ip, r6
 801e74e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e752:	4760      	bx	ip
 801e754:	4b05      	ldr	r3, [pc, #20]	; (801e76c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801e756:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801e75a:	4a02      	ldr	r2, [pc, #8]	; (801e764 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e75c:	e7e5      	b.n	801e72a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801e75e:	bd70      	pop	{r4, r5, r6, pc}
 801e760:	0802b002 	.word	0x0802b002
 801e764:	0802b6bf 	.word	0x0802b6bf
 801e768:	0802ae2b 	.word	0x0802ae2b
 801e76c:	0802b043 	.word	0x0802b043

0801e770 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801e770:	b158      	cbz	r0, 801e78a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801e772:	2902      	cmp	r1, #2
 801e774:	d00f      	beq.n	801e796 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801e776:	2903      	cmp	r1, #3
 801e778:	d010      	beq.n	801e79c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e77a:	2901      	cmp	r1, #1
 801e77c:	d101      	bne.n	801e782 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e77e:	2001      	movs	r0, #1
 801e780:	4770      	bx	lr
 801e782:	4b08      	ldr	r3, [pc, #32]	; (801e7a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e784:	8819      	ldrh	r1, [r3, #0]
 801e786:	4248      	negs	r0, r1
 801e788:	4770      	bx	lr
 801e78a:	2902      	cmp	r1, #2
 801e78c:	d006      	beq.n	801e79c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e78e:	2903      	cmp	r1, #3
 801e790:	d0f7      	beq.n	801e782 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e792:	2901      	cmp	r1, #1
 801e794:	d1f3      	bne.n	801e77e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801e796:	4b03      	ldr	r3, [pc, #12]	; (801e7a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e798:	8818      	ldrh	r0, [r3, #0]
 801e79a:	4770      	bx	lr
 801e79c:	f04f 30ff 	mov.w	r0, #4294967295
 801e7a0:	4770      	bx	lr
 801e7a2:	bf00      	nop
 801e7a4:	2000b366 	.word	0x2000b366

0801e7a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801e7a8:	b170      	cbz	r0, 801e7c8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801e7aa:	2902      	cmp	r1, #2
 801e7ac:	d012      	beq.n	801e7d4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801e7ae:	2903      	cmp	r1, #3
 801e7b0:	d006      	beq.n	801e7c0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e7b2:	2901      	cmp	r1, #1
 801e7b4:	d001      	beq.n	801e7ba <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e7b6:	2001      	movs	r0, #1
 801e7b8:	4770      	bx	lr
 801e7ba:	4b08      	ldr	r3, [pc, #32]	; (801e7dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e7bc:	8818      	ldrh	r0, [r3, #0]
 801e7be:	4770      	bx	lr
 801e7c0:	4b06      	ldr	r3, [pc, #24]	; (801e7dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e7c2:	8818      	ldrh	r0, [r3, #0]
 801e7c4:	4240      	negs	r0, r0
 801e7c6:	4770      	bx	lr
 801e7c8:	2902      	cmp	r1, #2
 801e7ca:	d0f9      	beq.n	801e7c0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e7cc:	2903      	cmp	r1, #3
 801e7ce:	d0f2      	beq.n	801e7b6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801e7d0:	2901      	cmp	r1, #1
 801e7d2:	d1f2      	bne.n	801e7ba <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e7d4:	f04f 30ff 	mov.w	r0, #4294967295
 801e7d8:	4770      	bx	lr
 801e7da:	bf00      	nop
 801e7dc:	2000b366 	.word	0x2000b366

0801e7e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7e4:	b097      	sub	sp, #92	; 0x5c
 801e7e6:	910b      	str	r1, [sp, #44]	; 0x2c
 801e7e8:	a912      	add	r1, sp, #72	; 0x48
 801e7ea:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801e7ee:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801e7f2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801e7f6:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801e7fa:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801e7fe:	e881 000c 	stmia.w	r1, {r2, r3}
 801e802:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801e806:	9308      	str	r3, [sp, #32]
 801e808:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801e80c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801e810:	9310      	str	r3, [sp, #64]	; 0x40
 801e812:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801e816:	798d      	ldrb	r5, [r1, #6]
 801e818:	930c      	str	r3, [sp, #48]	; 0x30
 801e81a:	7b4b      	ldrb	r3, [r1, #13]
 801e81c:	0158      	lsls	r0, r3, #5
 801e81e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e822:	4328      	orrs	r0, r5
 801e824:	9007      	str	r0, [sp, #28]
 801e826:	f000 8184 	beq.w	801eb32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801e82a:	011b      	lsls	r3, r3, #4
 801e82c:	79c8      	ldrb	r0, [r1, #7]
 801e82e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e832:	4303      	orrs	r3, r0
 801e834:	9309      	str	r3, [sp, #36]	; 0x24
 801e836:	f000 817c 	beq.w	801eb32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801e83a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e83e:	b29b      	uxth	r3, r3
 801e840:	2f00      	cmp	r7, #0
 801e842:	f000 8122 	beq.w	801ea8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801e846:	1aff      	subs	r7, r7, r3
 801e848:	b2bf      	uxth	r7, r7
 801e84a:	043b      	lsls	r3, r7, #16
 801e84c:	d502      	bpl.n	801e854 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e84e:	1bf6      	subs	r6, r6, r7
 801e850:	2700      	movs	r7, #0
 801e852:	b236      	sxth	r6, r6
 801e854:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e858:	a812      	add	r0, sp, #72	; 0x48
 801e85a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801e85e:	428e      	cmp	r6, r1
 801e860:	b28b      	uxth	r3, r1
 801e862:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801e866:	bfbf      	itttt	lt
 801e868:	18ff      	addlt	r7, r7, r3
 801e86a:	1bbe      	sublt	r6, r7, r6
 801e86c:	b2b7      	uxthlt	r7, r6
 801e86e:	460e      	movlt	r6, r1
 801e870:	8891      	ldrh	r1, [r2, #4]
 801e872:	440b      	add	r3, r1
 801e874:	4631      	mov	r1, r6
 801e876:	b21b      	sxth	r3, r3
 801e878:	930f      	str	r3, [sp, #60]	; 0x3c
 801e87a:	88d3      	ldrh	r3, [r2, #6]
 801e87c:	9a08      	ldr	r2, [sp, #32]
 801e87e:	449a      	add	sl, r3
 801e880:	fa0f f38a 	sxth.w	r3, sl
 801e884:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 801e888:	930e      	str	r3, [sp, #56]	; 0x38
 801e88a:	4bb2      	ldr	r3, [pc, #712]	; (801eb54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801e88c:	f893 b000 	ldrb.w	fp, [r3]
 801e890:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e894:	f1dc 0300 	rsbs	r3, ip, #0
 801e898:	eb43 030c 	adc.w	r3, r3, ip
 801e89c:	930d      	str	r3, [sp, #52]	; 0x34
 801e89e:	464b      	mov	r3, r9
 801e8a0:	f7fa faee 	bl	8018e80 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e8a4:	4631      	mov	r1, r6
 801e8a6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801e8aa:	464b      	mov	r3, r9
 801e8ac:	9a08      	ldr	r2, [sp, #32]
 801e8ae:	a812      	add	r0, sp, #72	; 0x48
 801e8b0:	f7fa fafe 	bl	8018eb0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e8b4:	a916      	add	r1, sp, #88	; 0x58
 801e8b6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e8ba:	a815      	add	r0, sp, #84	; 0x54
 801e8bc:	f7fa fbd8 	bl	8019070 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e8c0:	f1b9 0f00 	cmp.w	r9, #0
 801e8c4:	f040 80e4 	bne.w	801ea90 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b0>
 801e8c8:	f1bb 0f01 	cmp.w	fp, #1
 801e8cc:	f040 80e8 	bne.w	801eaa0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c0>
 801e8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8d2:	2b00      	cmp	r3, #0
 801e8d4:	f040 8132 	bne.w	801eb3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 801e8d8:	4b9f      	ldr	r3, [pc, #636]	; (801eb58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801e8da:	6818      	ldr	r0, [r3, #0]
 801e8dc:	6803      	ldr	r3, [r0, #0]
 801e8de:	6a1b      	ldr	r3, [r3, #32]
 801e8e0:	4798      	blx	r3
 801e8e2:	4a9e      	ldr	r2, [pc, #632]	; (801eb5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801e8e4:	f1b8 0f01 	cmp.w	r8, #1
 801e8e8:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801e8ec:	8811      	ldrh	r1, [r2, #0]
 801e8ee:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801e8f2:	fb01 2303 	mla	r3, r1, r3, r2
 801e8f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e8fa:	4403      	add	r3, r0
 801e8fc:	9309      	str	r3, [sp, #36]	; 0x24
 801e8fe:	f04f 0301 	mov.w	r3, #1
 801e902:	fa03 f308 	lsl.w	r3, r3, r8
 801e906:	f103 33ff 	add.w	r3, r3, #4294967295
 801e90a:	b2db      	uxtb	r3, r3
 801e90c:	9311      	str	r3, [sp, #68]	; 0x44
 801e90e:	f000 8117 	beq.w	801eb40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 801e912:	f1b8 0f02 	cmp.w	r8, #2
 801e916:	f000 8115 	beq.w	801eb44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x364>
 801e91a:	f1b8 0f04 	cmp.w	r8, #4
 801e91e:	bf14      	ite	ne
 801e920:	2301      	movne	r3, #1
 801e922:	2311      	moveq	r3, #17
 801e924:	930a      	str	r3, [sp, #40]	; 0x28
 801e926:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e928:	b153      	cbz	r3, 801e940 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801e92a:	2508      	movs	r5, #8
 801e92c:	9a07      	ldr	r2, [sp, #28]
 801e92e:	fb95 f3f8 	sdiv	r3, r5, r8
 801e932:	1e5d      	subs	r5, r3, #1
 801e934:	4415      	add	r5, r2
 801e936:	fb95 f5f3 	sdiv	r5, r5, r3
 801e93a:	fb15 f503 	smulbb	r5, r5, r3
 801e93e:	b2ad      	uxth	r5, r5
 801e940:	b907      	cbnz	r7, 801e944 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x164>
 801e942:	b174      	cbz	r4, 801e962 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x182>
 801e944:	fb15 7304 	smlabb	r3, r5, r4, r7
 801e948:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e94a:	ebaa 0a04 	sub.w	sl, sl, r4
 801e94e:	fb13 f308 	smulbb	r3, r3, r8
 801e952:	fa1f fa8a 	uxth.w	sl, sl
 801e956:	b29b      	uxth	r3, r3
 801e958:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801e95c:	f003 0407 	and.w	r4, r3, #7
 801e960:	9226      	str	r2, [sp, #152]	; 0x98
 801e962:	4649      	mov	r1, r9
 801e964:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e966:	f7ff ff03 	bl	801e770 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801e96a:	4649      	mov	r1, r9
 801e96c:	4683      	mov	fp, r0
 801e96e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e970:	f7ff ff1a 	bl	801e7a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801e974:	9a08      	ldr	r2, [sp, #32]
 801e976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e978:	1bf6      	subs	r6, r6, r7
 801e97a:	1a9b      	subs	r3, r3, r2
 801e97c:	459a      	cmp	sl, r3
 801e97e:	bfa8      	it	ge
 801e980:	469a      	movge	sl, r3
 801e982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e984:	1b9e      	subs	r6, r3, r6
 801e986:	9b07      	ldr	r3, [sp, #28]
 801e988:	429e      	cmp	r6, r3
 801e98a:	bfd4      	ite	le
 801e98c:	ebc7 0706 	rsble	r7, r7, r6
 801e990:	ebc7 0703 	rsbgt	r7, r7, r3
 801e994:	1bed      	subs	r5, r5, r7
 801e996:	fb0b 0017 	mls	r0, fp, r7, r0
 801e99a:	fb08 f305 	mul.w	r3, r8, r5
 801e99e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e9a2:	9308      	str	r3, [sp, #32]
 801e9a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e9a6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e9aa:	930d      	str	r3, [sp, #52]	; 0x34
 801e9ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e9ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e9b2:	930e      	str	r3, [sp, #56]	; 0x38
 801e9b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e9b6:	b2de      	uxtb	r6, r3
 801e9b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e9ba:	781a      	ldrb	r2, [r3, #0]
 801e9bc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e9c0:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 801e9c4:	4122      	asrs	r2, r4
 801e9c6:	9307      	str	r3, [sp, #28]
 801e9c8:	fb03 0b0b 	mla	fp, r3, fp, r0
 801e9cc:	b2d2      	uxtb	r2, r2
 801e9ce:	f1ba 0f00 	cmp.w	sl, #0
 801e9d2:	f340 80d8 	ble.w	801eb86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a6>
 801e9d6:	46be      	mov	lr, r7
 801e9d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e9da:	f1be 0f00 	cmp.w	lr, #0
 801e9de:	f340 80bf 	ble.w	801eb60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801e9e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e9e4:	4013      	ands	r3, r2
 801e9e6:	d03e      	beq.n	801ea66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 801e9e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e9ea:	fb13 f300 	smulbb	r3, r3, r0
 801e9ee:	2bfe      	cmp	r3, #254	; 0xfe
 801e9f0:	dd03      	ble.n	801e9fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21a>
 801e9f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e9f4:	28ff      	cmp	r0, #255	; 0xff
 801e9f6:	f000 80a7 	beq.w	801eb48 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x368>
 801e9fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e9fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e9fe:	fb10 f303 	smulbb	r3, r0, r3
 801ea02:	b29b      	uxth	r3, r3
 801ea04:	1c58      	adds	r0, r3, #1
 801ea06:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ea0a:	7808      	ldrb	r0, [r1, #0]
 801ea0c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ea10:	fa1f fc83 	uxth.w	ip, r3
 801ea14:	43db      	mvns	r3, r3
 801ea16:	fb16 f90c 	smulbb	r9, r6, ip
 801ea1a:	b2db      	uxtb	r3, r3
 801ea1c:	fb00 9003 	mla	r0, r0, r3, r9
 801ea20:	b280      	uxth	r0, r0
 801ea22:	f100 0901 	add.w	r9, r0, #1
 801ea26:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ea2a:	fb15 f90c 	smulbb	r9, r5, ip
 801ea2e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ea30:	1200      	asrs	r0, r0, #8
 801ea32:	fb15 fc0c 	smulbb	ip, r5, ip
 801ea36:	7008      	strb	r0, [r1, #0]
 801ea38:	7848      	ldrb	r0, [r1, #1]
 801ea3a:	fb00 9003 	mla	r0, r0, r3, r9
 801ea3e:	b280      	uxth	r0, r0
 801ea40:	f100 0901 	add.w	r9, r0, #1
 801ea44:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ea48:	1200      	asrs	r0, r0, #8
 801ea4a:	7048      	strb	r0, [r1, #1]
 801ea4c:	7888      	ldrb	r0, [r1, #2]
 801ea4e:	fb00 cc03 	mla	ip, r0, r3, ip
 801ea52:	fa1f fc8c 	uxth.w	ip, ip
 801ea56:	f10c 0301 	add.w	r3, ip, #1
 801ea5a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ea5e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ea62:	f881 c002 	strb.w	ip, [r1, #2]
 801ea66:	4444      	add	r4, r8
 801ea68:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ea6c:	b2a4      	uxth	r4, r4
 801ea6e:	2c07      	cmp	r4, #7
 801ea70:	bf89      	itett	hi
 801ea72:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801ea74:	fa42 f208 	asrls.w	r2, r2, r8
 801ea78:	2400      	movhi	r4, #0
 801ea7a:	785a      	ldrbhi	r2, [r3, #1]
 801ea7c:	bf8a      	itet	hi
 801ea7e:	3301      	addhi	r3, #1
 801ea80:	b2d2      	uxtbls	r2, r2
 801ea82:	9326      	strhi	r3, [sp, #152]	; 0x98
 801ea84:	9b07      	ldr	r3, [sp, #28]
 801ea86:	4419      	add	r1, r3
 801ea88:	e7a7      	b.n	801e9da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801ea8a:	441e      	add	r6, r3
 801ea8c:	b236      	sxth	r6, r6
 801ea8e:	e6e1      	b.n	801e854 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ea90:	f1b9 0f01 	cmp.w	r9, #1
 801ea94:	f47f af1c 	bne.w	801e8d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ea98:	f1bb 0f01 	cmp.w	fp, #1
 801ea9c:	f47f af18 	bne.w	801e8d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eaa0:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801eb58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801eaa4:	f8db 0000 	ldr.w	r0, [fp]
 801eaa8:	6803      	ldr	r3, [r0, #0]
 801eaaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eaac:	4798      	blx	r3
 801eaae:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801eab2:	465a      	mov	r2, fp
 801eab4:	d006      	beq.n	801eac4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801eab6:	f1b8 0f04 	cmp.w	r8, #4
 801eaba:	d13d      	bne.n	801eb38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x358>
 801eabc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eabe:	3300      	adds	r3, #0
 801eac0:	bf18      	it	ne
 801eac2:	2301      	movne	r3, #1
 801eac4:	05c0      	lsls	r0, r0, #23
 801eac6:	d567      	bpl.n	801eb98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 801eac8:	f1b8 0f08 	cmp.w	r8, #8
 801eacc:	d164      	bne.n	801eb98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 801eace:	2b00      	cmp	r3, #0
 801ead0:	bf0c      	ite	eq
 801ead2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801ead6:	2180      	movne	r1, #128	; 0x80
 801ead8:	2f00      	cmp	r7, #0
 801eada:	f47f aef9 	bne.w	801e8d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eade:	2c00      	cmp	r4, #0
 801eae0:	f47f aef6 	bne.w	801e8d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eae4:	9b07      	ldr	r3, [sp, #28]
 801eae6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801eae8:	18f3      	adds	r3, r6, r3
 801eaea:	4283      	cmp	r3, r0
 801eaec:	f73f aef0 	bgt.w	801e8d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eaf0:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 801eaf4:	4403      	add	r3, r0
 801eaf6:	980e      	ldr	r0, [sp, #56]	; 0x38
 801eaf8:	4283      	cmp	r3, r0
 801eafa:	f73f aee9 	bgt.w	801e8d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eafe:	f1b8 0f08 	cmp.w	r8, #8
 801eb02:	6810      	ldr	r0, [r2, #0]
 801eb04:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801eb08:	bf18      	it	ne
 801eb0a:	3501      	addne	r5, #1
 801eb0c:	6804      	ldr	r4, [r0, #0]
 801eb0e:	9105      	str	r1, [sp, #20]
 801eb10:	bf18      	it	ne
 801eb12:	f025 0501 	bicne.w	r5, r5, #1
 801eb16:	990c      	ldr	r1, [sp, #48]	; 0x30
 801eb18:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801eb1c:	bf18      	it	ne
 801eb1e:	b2ad      	uxthne	r5, r5
 801eb20:	9104      	str	r1, [sp, #16]
 801eb22:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801eb24:	e9cd 5a00 	strd	r5, sl, [sp]
 801eb28:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801eb2c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801eb2e:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801eb30:	47a0      	blx	r4
 801eb32:	b017      	add	sp, #92	; 0x5c
 801eb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb38:	2300      	movs	r3, #0
 801eb3a:	e7c3      	b.n	801eac4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801eb3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801eb3e:	e6d0      	b.n	801e8e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801eb40:	23ff      	movs	r3, #255	; 0xff
 801eb42:	e6ef      	b.n	801e924 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 801eb44:	2355      	movs	r3, #85	; 0x55
 801eb46:	e6ed      	b.n	801e924 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 801eb48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb4a:	700e      	strb	r6, [r1, #0]
 801eb4c:	704b      	strb	r3, [r1, #1]
 801eb4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eb50:	708b      	strb	r3, [r1, #2]
 801eb52:	e788      	b.n	801ea66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 801eb54:	2000b364 	.word	0x2000b364
 801eb58:	2000b36c 	.word	0x2000b36c
 801eb5c:	2000b366 	.word	0x2000b366
 801eb60:	9b08      	ldr	r3, [sp, #32]
 801eb62:	b153      	cbz	r3, 801eb7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801eb64:	441c      	add	r4, r3
 801eb66:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eb68:	b2a4      	uxth	r4, r4
 801eb6a:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801eb6e:	f004 0407 	and.w	r4, r4, #7
 801eb72:	781a      	ldrb	r2, [r3, #0]
 801eb74:	9326      	str	r3, [sp, #152]	; 0x98
 801eb76:	4122      	asrs	r2, r4
 801eb78:	b2d2      	uxtb	r2, r2
 801eb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eb80:	445b      	add	r3, fp
 801eb82:	9309      	str	r3, [sp, #36]	; 0x24
 801eb84:	e723      	b.n	801e9ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801eb86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb88:	2b00      	cmp	r3, #0
 801eb8a:	d1d2      	bne.n	801eb32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801eb8c:	4b05      	ldr	r3, [pc, #20]	; (801eba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c4>)
 801eb8e:	6818      	ldr	r0, [r3, #0]
 801eb90:	6803      	ldr	r3, [r0, #0]
 801eb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb94:	4798      	blx	r3
 801eb96:	e7cc      	b.n	801eb32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	f43f ae99 	beq.w	801e8d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eb9e:	2180      	movs	r1, #128	; 0x80
 801eba0:	e79a      	b.n	801ead8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801eba2:	bf00      	nop
 801eba4:	2000b36c 	.word	0x2000b36c

0801eba8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801eba8:	b538      	push	{r3, r4, r5, lr}
 801ebaa:	4c15      	ldr	r4, [pc, #84]	; (801ec00 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ebac:	4605      	mov	r5, r0
 801ebae:	7823      	ldrb	r3, [r4, #0]
 801ebb0:	f3bf 8f5b 	dmb	ish
 801ebb4:	07da      	lsls	r2, r3, #31
 801ebb6:	d40b      	bmi.n	801ebd0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ebb8:	4620      	mov	r0, r4
 801ebba:	f006 fd67 	bl	802568c <__cxa_guard_acquire>
 801ebbe:	b138      	cbz	r0, 801ebd0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ebc0:	4620      	mov	r0, r4
 801ebc2:	f006 fd6f 	bl	80256a4 <__cxa_guard_release>
 801ebc6:	4a0f      	ldr	r2, [pc, #60]	; (801ec04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ebc8:	490f      	ldr	r1, [pc, #60]	; (801ec08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ebca:	4810      	ldr	r0, [pc, #64]	; (801ec0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ebcc:	f006 fd54 	bl	8025678 <__aeabi_atexit>
 801ebd0:	4c0f      	ldr	r4, [pc, #60]	; (801ec10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ebd2:	7823      	ldrb	r3, [r4, #0]
 801ebd4:	f3bf 8f5b 	dmb	ish
 801ebd8:	07db      	lsls	r3, r3, #31
 801ebda:	d40b      	bmi.n	801ebf4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ebdc:	4620      	mov	r0, r4
 801ebde:	f006 fd55 	bl	802568c <__cxa_guard_acquire>
 801ebe2:	b138      	cbz	r0, 801ebf4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ebe4:	4620      	mov	r0, r4
 801ebe6:	f006 fd5d 	bl	80256a4 <__cxa_guard_release>
 801ebea:	4a06      	ldr	r2, [pc, #24]	; (801ec04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ebec:	4909      	ldr	r1, [pc, #36]	; (801ec14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ebee:	480a      	ldr	r0, [pc, #40]	; (801ec18 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ebf0:	f006 fd42 	bl	8025678 <__aeabi_atexit>
 801ebf4:	4b05      	ldr	r3, [pc, #20]	; (801ec0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ebf6:	612b      	str	r3, [r5, #16]
 801ebf8:	4b07      	ldr	r3, [pc, #28]	; (801ec18 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ebfa:	616b      	str	r3, [r5, #20]
 801ebfc:	bd38      	pop	{r3, r4, r5, pc}
 801ebfe:	bf00      	nop
 801ec00:	2000b478 	.word	0x2000b478
 801ec04:	20000000 	.word	0x20000000
 801ec08:	0801d587 	.word	0x0801d587
 801ec0c:	20000084 	.word	0x20000084
 801ec10:	2000b47c 	.word	0x2000b47c
 801ec14:	0801d585 	.word	0x0801d585
 801ec18:	20000088 	.word	0x20000088

0801ec1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801ec1c:	b538      	push	{r3, r4, r5, lr}
 801ec1e:	4c15      	ldr	r4, [pc, #84]	; (801ec74 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801ec20:	4605      	mov	r5, r0
 801ec22:	7823      	ldrb	r3, [r4, #0]
 801ec24:	f3bf 8f5b 	dmb	ish
 801ec28:	07da      	lsls	r2, r3, #31
 801ec2a:	d40b      	bmi.n	801ec44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ec2c:	4620      	mov	r0, r4
 801ec2e:	f006 fd2d 	bl	802568c <__cxa_guard_acquire>
 801ec32:	b138      	cbz	r0, 801ec44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ec34:	4620      	mov	r0, r4
 801ec36:	f006 fd35 	bl	80256a4 <__cxa_guard_release>
 801ec3a:	4a0f      	ldr	r2, [pc, #60]	; (801ec78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ec3c:	490f      	ldr	r1, [pc, #60]	; (801ec7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801ec3e:	4810      	ldr	r0, [pc, #64]	; (801ec80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ec40:	f006 fd1a 	bl	8025678 <__aeabi_atexit>
 801ec44:	4c0f      	ldr	r4, [pc, #60]	; (801ec84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801ec46:	7823      	ldrb	r3, [r4, #0]
 801ec48:	f3bf 8f5b 	dmb	ish
 801ec4c:	07db      	lsls	r3, r3, #31
 801ec4e:	d40b      	bmi.n	801ec68 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ec50:	4620      	mov	r0, r4
 801ec52:	f006 fd1b 	bl	802568c <__cxa_guard_acquire>
 801ec56:	b138      	cbz	r0, 801ec68 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ec58:	4620      	mov	r0, r4
 801ec5a:	f006 fd23 	bl	80256a4 <__cxa_guard_release>
 801ec5e:	4a06      	ldr	r2, [pc, #24]	; (801ec78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ec60:	4909      	ldr	r1, [pc, #36]	; (801ec88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801ec62:	480a      	ldr	r0, [pc, #40]	; (801ec8c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ec64:	f006 fd08 	bl	8025678 <__aeabi_atexit>
 801ec68:	4b05      	ldr	r3, [pc, #20]	; (801ec80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ec6a:	60ab      	str	r3, [r5, #8]
 801ec6c:	4b07      	ldr	r3, [pc, #28]	; (801ec8c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ec6e:	60eb      	str	r3, [r5, #12]
 801ec70:	bd38      	pop	{r3, r4, r5, pc}
 801ec72:	bf00      	nop
 801ec74:	2000b458 	.word	0x2000b458
 801ec78:	20000000 	.word	0x20000000
 801ec7c:	0801d58b 	.word	0x0801d58b
 801ec80:	20000064 	.word	0x20000064
 801ec84:	2000b45c 	.word	0x2000b45c
 801ec88:	0801d589 	.word	0x0801d589
 801ec8c:	20000068 	.word	0x20000068

0801ec90 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801ec90:	b510      	push	{r4, lr}
 801ec92:	4604      	mov	r4, r0
 801ec94:	f7ff ff88 	bl	801eba8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801ec98:	4620      	mov	r0, r4
 801ec9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ec9e:	f7ff bfbd 	b.w	801ec1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801eca4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801eca4:	b538      	push	{r3, r4, r5, lr}
 801eca6:	4c15      	ldr	r4, [pc, #84]	; (801ecfc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801eca8:	4605      	mov	r5, r0
 801ecaa:	7823      	ldrb	r3, [r4, #0]
 801ecac:	f3bf 8f5b 	dmb	ish
 801ecb0:	07da      	lsls	r2, r3, #31
 801ecb2:	d40b      	bmi.n	801eccc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ecb4:	4620      	mov	r0, r4
 801ecb6:	f006 fce9 	bl	802568c <__cxa_guard_acquire>
 801ecba:	b138      	cbz	r0, 801eccc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ecbc:	4620      	mov	r0, r4
 801ecbe:	f006 fcf1 	bl	80256a4 <__cxa_guard_release>
 801ecc2:	4a0f      	ldr	r2, [pc, #60]	; (801ed00 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ecc4:	490f      	ldr	r1, [pc, #60]	; (801ed04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801ecc6:	4810      	ldr	r0, [pc, #64]	; (801ed08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ecc8:	f006 fcd6 	bl	8025678 <__aeabi_atexit>
 801eccc:	4c0f      	ldr	r4, [pc, #60]	; (801ed0c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801ecce:	7823      	ldrb	r3, [r4, #0]
 801ecd0:	f3bf 8f5b 	dmb	ish
 801ecd4:	07db      	lsls	r3, r3, #31
 801ecd6:	d40b      	bmi.n	801ecf0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ecd8:	4620      	mov	r0, r4
 801ecda:	f006 fcd7 	bl	802568c <__cxa_guard_acquire>
 801ecde:	b138      	cbz	r0, 801ecf0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ece0:	4620      	mov	r0, r4
 801ece2:	f006 fcdf 	bl	80256a4 <__cxa_guard_release>
 801ece6:	4a06      	ldr	r2, [pc, #24]	; (801ed00 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ece8:	4909      	ldr	r1, [pc, #36]	; (801ed10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ecea:	480a      	ldr	r0, [pc, #40]	; (801ed14 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ecec:	f006 fcc4 	bl	8025678 <__aeabi_atexit>
 801ecf0:	4b05      	ldr	r3, [pc, #20]	; (801ed08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ecf2:	622b      	str	r3, [r5, #32]
 801ecf4:	4b07      	ldr	r3, [pc, #28]	; (801ed14 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ecf6:	626b      	str	r3, [r5, #36]	; 0x24
 801ecf8:	bd38      	pop	{r3, r4, r5, pc}
 801ecfa:	bf00      	nop
 801ecfc:	2000b480 	.word	0x2000b480
 801ed00:	20000000 	.word	0x20000000
 801ed04:	0801d57f 	.word	0x0801d57f
 801ed08:	2000008c 	.word	0x2000008c
 801ed0c:	2000b484 	.word	0x2000b484
 801ed10:	0801d57d 	.word	0x0801d57d
 801ed14:	20000090 	.word	0x20000090

0801ed18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ed18:	b538      	push	{r3, r4, r5, lr}
 801ed1a:	4c15      	ldr	r4, [pc, #84]	; (801ed70 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ed1c:	4605      	mov	r5, r0
 801ed1e:	7823      	ldrb	r3, [r4, #0]
 801ed20:	f3bf 8f5b 	dmb	ish
 801ed24:	07da      	lsls	r2, r3, #31
 801ed26:	d40b      	bmi.n	801ed40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ed28:	4620      	mov	r0, r4
 801ed2a:	f006 fcaf 	bl	802568c <__cxa_guard_acquire>
 801ed2e:	b138      	cbz	r0, 801ed40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ed30:	4620      	mov	r0, r4
 801ed32:	f006 fcb7 	bl	80256a4 <__cxa_guard_release>
 801ed36:	4a0f      	ldr	r2, [pc, #60]	; (801ed74 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ed38:	490f      	ldr	r1, [pc, #60]	; (801ed78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ed3a:	4810      	ldr	r0, [pc, #64]	; (801ed7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ed3c:	f006 fc9c 	bl	8025678 <__aeabi_atexit>
 801ed40:	4c0f      	ldr	r4, [pc, #60]	; (801ed80 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801ed42:	7823      	ldrb	r3, [r4, #0]
 801ed44:	f3bf 8f5b 	dmb	ish
 801ed48:	07db      	lsls	r3, r3, #31
 801ed4a:	d40b      	bmi.n	801ed64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ed4c:	4620      	mov	r0, r4
 801ed4e:	f006 fc9d 	bl	802568c <__cxa_guard_acquire>
 801ed52:	b138      	cbz	r0, 801ed64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ed54:	4620      	mov	r0, r4
 801ed56:	f006 fca5 	bl	80256a4 <__cxa_guard_release>
 801ed5a:	4a06      	ldr	r2, [pc, #24]	; (801ed74 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ed5c:	4909      	ldr	r1, [pc, #36]	; (801ed84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801ed5e:	480a      	ldr	r0, [pc, #40]	; (801ed88 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ed60:	f006 fc8a 	bl	8025678 <__aeabi_atexit>
 801ed64:	4b05      	ldr	r3, [pc, #20]	; (801ed7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ed66:	61ab      	str	r3, [r5, #24]
 801ed68:	4b07      	ldr	r3, [pc, #28]	; (801ed88 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ed6a:	61eb      	str	r3, [r5, #28]
 801ed6c:	bd38      	pop	{r3, r4, r5, pc}
 801ed6e:	bf00      	nop
 801ed70:	2000b460 	.word	0x2000b460
 801ed74:	20000000 	.word	0x20000000
 801ed78:	0801d583 	.word	0x0801d583
 801ed7c:	2000006c 	.word	0x2000006c
 801ed80:	2000b464 	.word	0x2000b464
 801ed84:	0801d581 	.word	0x0801d581
 801ed88:	20000070 	.word	0x20000070

0801ed8c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801ed8c:	b510      	push	{r4, lr}
 801ed8e:	4604      	mov	r4, r0
 801ed90:	f7ff ff88 	bl	801eca4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801ed94:	4620      	mov	r0, r4
 801ed96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed9a:	f7ff bfbd 	b.w	801ed18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801eda0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801eda0:	b538      	push	{r3, r4, r5, lr}
 801eda2:	4c15      	ldr	r4, [pc, #84]	; (801edf8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801eda4:	4605      	mov	r5, r0
 801eda6:	7823      	ldrb	r3, [r4, #0]
 801eda8:	f3bf 8f5b 	dmb	ish
 801edac:	07da      	lsls	r2, r3, #31
 801edae:	d40b      	bmi.n	801edc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801edb0:	4620      	mov	r0, r4
 801edb2:	f006 fc6b 	bl	802568c <__cxa_guard_acquire>
 801edb6:	b138      	cbz	r0, 801edc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801edb8:	4620      	mov	r0, r4
 801edba:	f006 fc73 	bl	80256a4 <__cxa_guard_release>
 801edbe:	4a0f      	ldr	r2, [pc, #60]	; (801edfc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801edc0:	490f      	ldr	r1, [pc, #60]	; (801ee00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801edc2:	4810      	ldr	r0, [pc, #64]	; (801ee04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801edc4:	f006 fc58 	bl	8025678 <__aeabi_atexit>
 801edc8:	4c0f      	ldr	r4, [pc, #60]	; (801ee08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801edca:	7823      	ldrb	r3, [r4, #0]
 801edcc:	f3bf 8f5b 	dmb	ish
 801edd0:	07db      	lsls	r3, r3, #31
 801edd2:	d40b      	bmi.n	801edec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801edd4:	4620      	mov	r0, r4
 801edd6:	f006 fc59 	bl	802568c <__cxa_guard_acquire>
 801edda:	b138      	cbz	r0, 801edec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801eddc:	4620      	mov	r0, r4
 801edde:	f006 fc61 	bl	80256a4 <__cxa_guard_release>
 801ede2:	4a06      	ldr	r2, [pc, #24]	; (801edfc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801ede4:	4909      	ldr	r1, [pc, #36]	; (801ee0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801ede6:	480a      	ldr	r0, [pc, #40]	; (801ee10 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ede8:	f006 fc46 	bl	8025678 <__aeabi_atexit>
 801edec:	4b05      	ldr	r3, [pc, #20]	; (801ee04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801edee:	632b      	str	r3, [r5, #48]	; 0x30
 801edf0:	4b07      	ldr	r3, [pc, #28]	; (801ee10 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801edf2:	636b      	str	r3, [r5, #52]	; 0x34
 801edf4:	bd38      	pop	{r3, r4, r5, pc}
 801edf6:	bf00      	nop
 801edf8:	2000b468 	.word	0x2000b468
 801edfc:	20000000 	.word	0x20000000
 801ee00:	0801d577 	.word	0x0801d577
 801ee04:	20000074 	.word	0x20000074
 801ee08:	2000b46c 	.word	0x2000b46c
 801ee0c:	0801d575 	.word	0x0801d575
 801ee10:	20000078 	.word	0x20000078

0801ee14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801ee14:	b538      	push	{r3, r4, r5, lr}
 801ee16:	4c15      	ldr	r4, [pc, #84]	; (801ee6c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801ee18:	4605      	mov	r5, r0
 801ee1a:	7823      	ldrb	r3, [r4, #0]
 801ee1c:	f3bf 8f5b 	dmb	ish
 801ee20:	07da      	lsls	r2, r3, #31
 801ee22:	d40b      	bmi.n	801ee3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ee24:	4620      	mov	r0, r4
 801ee26:	f006 fc31 	bl	802568c <__cxa_guard_acquire>
 801ee2a:	b138      	cbz	r0, 801ee3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ee2c:	4620      	mov	r0, r4
 801ee2e:	f006 fc39 	bl	80256a4 <__cxa_guard_release>
 801ee32:	4a0f      	ldr	r2, [pc, #60]	; (801ee70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ee34:	490f      	ldr	r1, [pc, #60]	; (801ee74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801ee36:	4810      	ldr	r0, [pc, #64]	; (801ee78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ee38:	f006 fc1e 	bl	8025678 <__aeabi_atexit>
 801ee3c:	4c0f      	ldr	r4, [pc, #60]	; (801ee7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801ee3e:	7823      	ldrb	r3, [r4, #0]
 801ee40:	f3bf 8f5b 	dmb	ish
 801ee44:	07db      	lsls	r3, r3, #31
 801ee46:	d40b      	bmi.n	801ee60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ee48:	4620      	mov	r0, r4
 801ee4a:	f006 fc1f 	bl	802568c <__cxa_guard_acquire>
 801ee4e:	b138      	cbz	r0, 801ee60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ee50:	4620      	mov	r0, r4
 801ee52:	f006 fc27 	bl	80256a4 <__cxa_guard_release>
 801ee56:	4a06      	ldr	r2, [pc, #24]	; (801ee70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ee58:	4909      	ldr	r1, [pc, #36]	; (801ee80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801ee5a:	480a      	ldr	r0, [pc, #40]	; (801ee84 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ee5c:	f006 fc0c 	bl	8025678 <__aeabi_atexit>
 801ee60:	4b05      	ldr	r3, [pc, #20]	; (801ee78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ee62:	62ab      	str	r3, [r5, #40]	; 0x28
 801ee64:	4b07      	ldr	r3, [pc, #28]	; (801ee84 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ee66:	62eb      	str	r3, [r5, #44]	; 0x2c
 801ee68:	bd38      	pop	{r3, r4, r5, pc}
 801ee6a:	bf00      	nop
 801ee6c:	2000b440 	.word	0x2000b440
 801ee70:	20000000 	.word	0x20000000
 801ee74:	0801d57b 	.word	0x0801d57b
 801ee78:	2000004c 	.word	0x2000004c
 801ee7c:	2000b444 	.word	0x2000b444
 801ee80:	0801d579 	.word	0x0801d579
 801ee84:	20000050 	.word	0x20000050

0801ee88 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801ee88:	b510      	push	{r4, lr}
 801ee8a:	4604      	mov	r4, r0
 801ee8c:	f7ff ff88 	bl	801eda0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801ee90:	4620      	mov	r0, r4
 801ee92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee96:	f7ff bfbd 	b.w	801ee14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801ee9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801ee9c:	b538      	push	{r3, r4, r5, lr}
 801ee9e:	4c15      	ldr	r4, [pc, #84]	; (801eef4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801eea0:	4605      	mov	r5, r0
 801eea2:	7823      	ldrb	r3, [r4, #0]
 801eea4:	f3bf 8f5b 	dmb	ish
 801eea8:	07da      	lsls	r2, r3, #31
 801eeaa:	d40b      	bmi.n	801eec4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801eeac:	4620      	mov	r0, r4
 801eeae:	f006 fbed 	bl	802568c <__cxa_guard_acquire>
 801eeb2:	b138      	cbz	r0, 801eec4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801eeb4:	4620      	mov	r0, r4
 801eeb6:	f006 fbf5 	bl	80256a4 <__cxa_guard_release>
 801eeba:	4a0f      	ldr	r2, [pc, #60]	; (801eef8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801eebc:	490f      	ldr	r1, [pc, #60]	; (801eefc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801eebe:	4810      	ldr	r0, [pc, #64]	; (801ef00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801eec0:	f006 fbda 	bl	8025678 <__aeabi_atexit>
 801eec4:	4c0f      	ldr	r4, [pc, #60]	; (801ef04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801eec6:	7823      	ldrb	r3, [r4, #0]
 801eec8:	f3bf 8f5b 	dmb	ish
 801eecc:	07db      	lsls	r3, r3, #31
 801eece:	d40b      	bmi.n	801eee8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801eed0:	4620      	mov	r0, r4
 801eed2:	f006 fbdb 	bl	802568c <__cxa_guard_acquire>
 801eed6:	b138      	cbz	r0, 801eee8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801eed8:	4620      	mov	r0, r4
 801eeda:	f006 fbe3 	bl	80256a4 <__cxa_guard_release>
 801eede:	4a06      	ldr	r2, [pc, #24]	; (801eef8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801eee0:	4909      	ldr	r1, [pc, #36]	; (801ef08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801eee2:	480a      	ldr	r0, [pc, #40]	; (801ef0c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801eee4:	f006 fbc8 	bl	8025678 <__aeabi_atexit>
 801eee8:	4b05      	ldr	r3, [pc, #20]	; (801ef00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801eeea:	642b      	str	r3, [r5, #64]	; 0x40
 801eeec:	4b07      	ldr	r3, [pc, #28]	; (801ef0c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801eeee:	646b      	str	r3, [r5, #68]	; 0x44
 801eef0:	bd38      	pop	{r3, r4, r5, pc}
 801eef2:	bf00      	nop
 801eef4:	2000b470 	.word	0x2000b470
 801eef8:	20000000 	.word	0x20000000
 801eefc:	0801d56f 	.word	0x0801d56f
 801ef00:	2000007c 	.word	0x2000007c
 801ef04:	2000b474 	.word	0x2000b474
 801ef08:	0801d56d 	.word	0x0801d56d
 801ef0c:	20000080 	.word	0x20000080

0801ef10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801ef10:	b538      	push	{r3, r4, r5, lr}
 801ef12:	4c15      	ldr	r4, [pc, #84]	; (801ef68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ef14:	4605      	mov	r5, r0
 801ef16:	7823      	ldrb	r3, [r4, #0]
 801ef18:	f3bf 8f5b 	dmb	ish
 801ef1c:	07da      	lsls	r2, r3, #31
 801ef1e:	d40b      	bmi.n	801ef38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ef20:	4620      	mov	r0, r4
 801ef22:	f006 fbb3 	bl	802568c <__cxa_guard_acquire>
 801ef26:	b138      	cbz	r0, 801ef38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ef28:	4620      	mov	r0, r4
 801ef2a:	f006 fbbb 	bl	80256a4 <__cxa_guard_release>
 801ef2e:	4a0f      	ldr	r2, [pc, #60]	; (801ef6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ef30:	490f      	ldr	r1, [pc, #60]	; (801ef70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ef32:	4810      	ldr	r0, [pc, #64]	; (801ef74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ef34:	f006 fba0 	bl	8025678 <__aeabi_atexit>
 801ef38:	4c0f      	ldr	r4, [pc, #60]	; (801ef78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801ef3a:	7823      	ldrb	r3, [r4, #0]
 801ef3c:	f3bf 8f5b 	dmb	ish
 801ef40:	07db      	lsls	r3, r3, #31
 801ef42:	d40b      	bmi.n	801ef5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ef44:	4620      	mov	r0, r4
 801ef46:	f006 fba1 	bl	802568c <__cxa_guard_acquire>
 801ef4a:	b138      	cbz	r0, 801ef5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	f006 fba9 	bl	80256a4 <__cxa_guard_release>
 801ef52:	4a06      	ldr	r2, [pc, #24]	; (801ef6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ef54:	4909      	ldr	r1, [pc, #36]	; (801ef7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ef56:	480a      	ldr	r0, [pc, #40]	; (801ef80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ef58:	f006 fb8e 	bl	8025678 <__aeabi_atexit>
 801ef5c:	4b05      	ldr	r3, [pc, #20]	; (801ef74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ef5e:	63ab      	str	r3, [r5, #56]	; 0x38
 801ef60:	4b07      	ldr	r3, [pc, #28]	; (801ef80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ef62:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ef64:	bd38      	pop	{r3, r4, r5, pc}
 801ef66:	bf00      	nop
 801ef68:	2000b450 	.word	0x2000b450
 801ef6c:	20000000 	.word	0x20000000
 801ef70:	0801d573 	.word	0x0801d573
 801ef74:	2000005c 	.word	0x2000005c
 801ef78:	2000b454 	.word	0x2000b454
 801ef7c:	0801d571 	.word	0x0801d571
 801ef80:	20000060 	.word	0x20000060

0801ef84 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801ef84:	b510      	push	{r4, lr}
 801ef86:	4604      	mov	r4, r0
 801ef88:	f7ff ff88 	bl	801ee9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ef8c:	4620      	mov	r0, r4
 801ef8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef92:	f7ff bfbd 	b.w	801ef10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ef98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ef98:	b538      	push	{r3, r4, r5, lr}
 801ef9a:	4c15      	ldr	r4, [pc, #84]	; (801eff0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ef9c:	4605      	mov	r5, r0
 801ef9e:	7823      	ldrb	r3, [r4, #0]
 801efa0:	f3bf 8f5b 	dmb	ish
 801efa4:	07da      	lsls	r2, r3, #31
 801efa6:	d40b      	bmi.n	801efc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801efa8:	4620      	mov	r0, r4
 801efaa:	f006 fb6f 	bl	802568c <__cxa_guard_acquire>
 801efae:	b138      	cbz	r0, 801efc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801efb0:	4620      	mov	r0, r4
 801efb2:	f006 fb77 	bl	80256a4 <__cxa_guard_release>
 801efb6:	4a0f      	ldr	r2, [pc, #60]	; (801eff4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801efb8:	490f      	ldr	r1, [pc, #60]	; (801eff8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801efba:	4810      	ldr	r0, [pc, #64]	; (801effc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801efbc:	f006 fb5c 	bl	8025678 <__aeabi_atexit>
 801efc0:	4c0f      	ldr	r4, [pc, #60]	; (801f000 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801efc2:	7823      	ldrb	r3, [r4, #0]
 801efc4:	f3bf 8f5b 	dmb	ish
 801efc8:	07db      	lsls	r3, r3, #31
 801efca:	d40b      	bmi.n	801efe4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801efcc:	4620      	mov	r0, r4
 801efce:	f006 fb5d 	bl	802568c <__cxa_guard_acquire>
 801efd2:	b138      	cbz	r0, 801efe4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801efd4:	4620      	mov	r0, r4
 801efd6:	f006 fb65 	bl	80256a4 <__cxa_guard_release>
 801efda:	4a06      	ldr	r2, [pc, #24]	; (801eff4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801efdc:	4909      	ldr	r1, [pc, #36]	; (801f004 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801efde:	480a      	ldr	r0, [pc, #40]	; (801f008 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801efe0:	f006 fb4a 	bl	8025678 <__aeabi_atexit>
 801efe4:	4b05      	ldr	r3, [pc, #20]	; (801effc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801efe6:	652b      	str	r3, [r5, #80]	; 0x50
 801efe8:	4b07      	ldr	r3, [pc, #28]	; (801f008 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801efea:	656b      	str	r3, [r5, #84]	; 0x54
 801efec:	bd38      	pop	{r3, r4, r5, pc}
 801efee:	bf00      	nop
 801eff0:	2000b448 	.word	0x2000b448
 801eff4:	20000000 	.word	0x20000000
 801eff8:	0801d567 	.word	0x0801d567
 801effc:	20000054 	.word	0x20000054
 801f000:	2000b44c 	.word	0x2000b44c
 801f004:	0801d565 	.word	0x0801d565
 801f008:	20000058 	.word	0x20000058

0801f00c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f00c:	b538      	push	{r3, r4, r5, lr}
 801f00e:	4c15      	ldr	r4, [pc, #84]	; (801f064 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f010:	4605      	mov	r5, r0
 801f012:	7823      	ldrb	r3, [r4, #0]
 801f014:	f3bf 8f5b 	dmb	ish
 801f018:	07da      	lsls	r2, r3, #31
 801f01a:	d40b      	bmi.n	801f034 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f01c:	4620      	mov	r0, r4
 801f01e:	f006 fb35 	bl	802568c <__cxa_guard_acquire>
 801f022:	b138      	cbz	r0, 801f034 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f024:	4620      	mov	r0, r4
 801f026:	f006 fb3d 	bl	80256a4 <__cxa_guard_release>
 801f02a:	4a0f      	ldr	r2, [pc, #60]	; (801f068 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f02c:	490f      	ldr	r1, [pc, #60]	; (801f06c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f02e:	4810      	ldr	r0, [pc, #64]	; (801f070 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f030:	f006 fb22 	bl	8025678 <__aeabi_atexit>
 801f034:	4c0f      	ldr	r4, [pc, #60]	; (801f074 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f036:	7823      	ldrb	r3, [r4, #0]
 801f038:	f3bf 8f5b 	dmb	ish
 801f03c:	07db      	lsls	r3, r3, #31
 801f03e:	d40b      	bmi.n	801f058 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f040:	4620      	mov	r0, r4
 801f042:	f006 fb23 	bl	802568c <__cxa_guard_acquire>
 801f046:	b138      	cbz	r0, 801f058 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f048:	4620      	mov	r0, r4
 801f04a:	f006 fb2b 	bl	80256a4 <__cxa_guard_release>
 801f04e:	4a06      	ldr	r2, [pc, #24]	; (801f068 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f050:	4909      	ldr	r1, [pc, #36]	; (801f078 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f052:	480a      	ldr	r0, [pc, #40]	; (801f07c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f054:	f006 fb10 	bl	8025678 <__aeabi_atexit>
 801f058:	4b05      	ldr	r3, [pc, #20]	; (801f070 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f05a:	64ab      	str	r3, [r5, #72]	; 0x48
 801f05c:	4b07      	ldr	r3, [pc, #28]	; (801f07c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f05e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f060:	bd38      	pop	{r3, r4, r5, pc}
 801f062:	bf00      	nop
 801f064:	2000b438 	.word	0x2000b438
 801f068:	20000000 	.word	0x20000000
 801f06c:	0801d56b 	.word	0x0801d56b
 801f070:	20000044 	.word	0x20000044
 801f074:	2000b43c 	.word	0x2000b43c
 801f078:	0801d569 	.word	0x0801d569
 801f07c:	20000048 	.word	0x20000048

0801f080 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801f080:	b510      	push	{r4, lr}
 801f082:	4604      	mov	r4, r0
 801f084:	f7ff ff88 	bl	801ef98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f088:	4620      	mov	r0, r4
 801f08a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f08e:	f7ff bfbd 	b.w	801f00c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801f092 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801f092:	b510      	push	{r4, lr}
 801f094:	4604      	mov	r4, r0
 801f096:	f7ff fff3 	bl	801f080 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801f09a:	4620      	mov	r0, r4
 801f09c:	f7ff ff72 	bl	801ef84 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801f0a0:	4620      	mov	r0, r4
 801f0a2:	f7ff fe73 	bl	801ed8c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801f0a6:	4620      	mov	r0, r4
 801f0a8:	f7ff fdf2 	bl	801ec90 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801f0ac:	4620      	mov	r0, r4
 801f0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0b2:	f7ff bee9 	b.w	801ee88 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801f0b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0bc:	b087      	sub	sp, #28
 801f0be:	7888      	ldrb	r0, [r1, #2]
 801f0c0:	4616      	mov	r6, r2
 801f0c2:	9001      	str	r0, [sp, #4]
 801f0c4:	7848      	ldrb	r0, [r1, #1]
 801f0c6:	9100      	str	r1, [sp, #0]
 801f0c8:	9002      	str	r0, [sp, #8]
 801f0ca:	7808      	ldrb	r0, [r1, #0]
 801f0cc:	9901      	ldr	r1, [sp, #4]
 801f0ce:	9003      	str	r0, [sp, #12]
 801f0d0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f0d4:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801f0d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801f0dc:	9902      	ldr	r1, [sp, #8]
 801f0de:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801f0e2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801f0e6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801f0ea:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f0ee:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801f0f2:	9005      	str	r0, [sp, #20]
 801f0f4:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801f0f8:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f0fc:	2d00      	cmp	r5, #0
 801f0fe:	eb06 080a 	add.w	r8, r6, sl
 801f102:	db4a      	blt.n	801f19a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801f104:	45a9      	cmp	r9, r5
 801f106:	dd48      	ble.n	801f19a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801f108:	f1bc 0f00 	cmp.w	ip, #0
 801f10c:	db43      	blt.n	801f196 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801f10e:	45e6      	cmp	lr, ip
 801f110:	dd41      	ble.n	801f196 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801f112:	f816 600a 	ldrb.w	r6, [r6, sl]
 801f116:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f11a:	441e      	add	r6, r3
 801f11c:	f11c 0001 	adds.w	r0, ip, #1
 801f120:	d43e      	bmi.n	801f1a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f122:	4586      	cmp	lr, r0
 801f124:	dd3c      	ble.n	801f1a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f126:	2a00      	cmp	r2, #0
 801f128:	d03a      	beq.n	801f1a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f12a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f12e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f132:	4418      	add	r0, r3
 801f134:	3501      	adds	r5, #1
 801f136:	d437      	bmi.n	801f1a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f138:	45a9      	cmp	r9, r5
 801f13a:	dd35      	ble.n	801f1a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f13c:	b3a4      	cbz	r4, 801f1a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f13e:	f1bc 0f00 	cmp.w	ip, #0
 801f142:	db2f      	blt.n	801f1a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801f144:	45e6      	cmp	lr, ip
 801f146:	dd2d      	ble.n	801f1a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801f148:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f14c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f150:	441d      	add	r5, r3
 801f152:	f11c 0c01 	adds.w	ip, ip, #1
 801f156:	d42a      	bmi.n	801f1ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f158:	45e6      	cmp	lr, ip
 801f15a:	dd28      	ble.n	801f1ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f15c:	b33a      	cbz	r2, 801f1ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f15e:	44c6      	add	lr, r8
 801f160:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f164:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f168:	4463      	add	r3, ip
 801f16a:	ea6f 0c07 	mvn.w	ip, r7
 801f16e:	2a0f      	cmp	r2, #15
 801f170:	f896 a000 	ldrb.w	sl, [r6]
 801f174:	fa5f fc8c 	uxtb.w	ip, ip
 801f178:	f890 b000 	ldrb.w	fp, [r0]
 801f17c:	f895 9000 	ldrb.w	r9, [r5]
 801f180:	7819      	ldrb	r1, [r3, #0]
 801f182:	d801      	bhi.n	801f188 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801f184:	2c0f      	cmp	r4, #15
 801f186:	d914      	bls.n	801f1b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801f188:	4b40      	ldr	r3, [pc, #256]	; (801f28c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801f18a:	f240 11a5 	movw	r1, #421	; 0x1a5
 801f18e:	4a40      	ldr	r2, [pc, #256]	; (801f290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801f190:	4840      	ldr	r0, [pc, #256]	; (801f294 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801f192:	f006 faa5 	bl	80256e0 <__assert_func>
 801f196:	ae05      	add	r6, sp, #20
 801f198:	e7c0      	b.n	801f11c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801f19a:	a805      	add	r0, sp, #20
 801f19c:	4606      	mov	r6, r0
 801f19e:	e7c9      	b.n	801f134 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f1a0:	a805      	add	r0, sp, #20
 801f1a2:	e7c7      	b.n	801f134 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f1a4:	ad05      	add	r5, sp, #20
 801f1a6:	e7d4      	b.n	801f152 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801f1a8:	ab05      	add	r3, sp, #20
 801f1aa:	461d      	mov	r5, r3
 801f1ac:	e7dd      	b.n	801f16a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f1ae:	ab05      	add	r3, sp, #20
 801f1b0:	e7db      	b.n	801f16a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f1b2:	b292      	uxth	r2, r2
 801f1b4:	b2a4      	uxth	r4, r4
 801f1b6:	fa1f fc8c 	uxth.w	ip, ip
 801f1ba:	fb02 f804 	mul.w	r8, r2, r4
 801f1be:	0112      	lsls	r2, r2, #4
 801f1c0:	b2bf      	uxth	r7, r7
 801f1c2:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801f1c6:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801f1ca:	eba2 0208 	sub.w	r2, r2, r8
 801f1ce:	b2a4      	uxth	r4, r4
 801f1d0:	b292      	uxth	r2, r2
 801f1d2:	ebae 0e04 	sub.w	lr, lr, r4
 801f1d6:	fb02 fb0b 	mul.w	fp, r2, fp
 801f1da:	fa1f fe8e 	uxth.w	lr, lr
 801f1de:	fb0e ba0a 	mla	sl, lr, sl, fp
 801f1e2:	fb04 aa09 	mla	sl, r4, r9, sl
 801f1e6:	fb08 aa01 	mla	sl, r8, r1, sl
 801f1ea:	9903      	ldr	r1, [sp, #12]
 801f1ec:	fb11 f90c 	smulbb	r9, r1, ip
 801f1f0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f1f4:	9900      	ldr	r1, [sp, #0]
 801f1f6:	fb0a 9a07 	mla	sl, sl, r7, r9
 801f1fa:	fa1f fa8a 	uxth.w	sl, sl
 801f1fe:	f10a 0901 	add.w	r9, sl, #1
 801f202:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801f206:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f20a:	f881 a000 	strb.w	sl, [r1]
 801f20e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f212:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f216:	fb02 fa0a 	mul.w	sl, r2, sl
 801f21a:	9902      	ldr	r1, [sp, #8]
 801f21c:	fb0e aa09 	mla	sl, lr, r9, sl
 801f220:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f224:	fb04 aa09 	mla	sl, r4, r9, sl
 801f228:	f893 9001 	ldrb.w	r9, [r3, #1]
 801f22c:	fb08 a909 	mla	r9, r8, r9, sl
 801f230:	fb11 fa0c 	smulbb	sl, r1, ip
 801f234:	9900      	ldr	r1, [sp, #0]
 801f236:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f23a:	fb09 a907 	mla	r9, r9, r7, sl
 801f23e:	fa1f f989 	uxth.w	r9, r9
 801f242:	f109 0a01 	add.w	sl, r9, #1
 801f246:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f24a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f24e:	f881 9001 	strb.w	r9, [r1, #1]
 801f252:	7880      	ldrb	r0, [r0, #2]
 801f254:	78b6      	ldrb	r6, [r6, #2]
 801f256:	4342      	muls	r2, r0
 801f258:	78a8      	ldrb	r0, [r5, #2]
 801f25a:	789b      	ldrb	r3, [r3, #2]
 801f25c:	fb0e 2206 	mla	r2, lr, r6, r2
 801f260:	fb04 2400 	mla	r4, r4, r0, r2
 801f264:	fb08 4803 	mla	r8, r8, r3, r4
 801f268:	9b01      	ldr	r3, [sp, #4]
 801f26a:	fb13 fc0c 	smulbb	ip, r3, ip
 801f26e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f272:	fb08 c707 	mla	r7, r8, r7, ip
 801f276:	b2bf      	uxth	r7, r7
 801f278:	f107 0c01 	add.w	ip, r7, #1
 801f27c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f280:	123f      	asrs	r7, r7, #8
 801f282:	708f      	strb	r7, [r1, #2]
 801f284:	b007      	add	sp, #28
 801f286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f28a:	bf00      	nop
 801f28c:	0802aff1 	.word	0x0802aff1
 801f290:	0802b4e6 	.word	0x0802b4e6
 801f294:	0802b0ba 	.word	0x0802b0ba

0801f298 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f29c:	ed2d 8b08 	vpush	{d8-d11}
 801f2a0:	b095      	sub	sp, #84	; 0x54
 801f2a2:	eeb0 aa40 	vmov.f32	s20, s0
 801f2a6:	eef0 9a60 	vmov.f32	s19, s1
 801f2aa:	930a      	str	r3, [sp, #40]	; 0x28
 801f2ac:	eeb0 9a41 	vmov.f32	s18, s2
 801f2b0:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801f2b4:	eeb0 8a62 	vmov.f32	s16, s5
 801f2b8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801f2ba:	eef0 8a43 	vmov.f32	s17, s6
 801f2be:	930c      	str	r3, [sp, #48]	; 0x30
 801f2c0:	eef0 ba44 	vmov.f32	s23, s8
 801f2c4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801f2c8:	eeb0 ba64 	vmov.f32	s22, s9
 801f2cc:	9013      	str	r0, [sp, #76]	; 0x4c
 801f2ce:	eef0 aa45 	vmov.f32	s21, s10
 801f2d2:	9310      	str	r3, [sp, #64]	; 0x40
 801f2d4:	6860      	ldr	r0, [r4, #4]
 801f2d6:	910f      	str	r1, [sp, #60]	; 0x3c
 801f2d8:	9212      	str	r2, [sp, #72]	; 0x48
 801f2da:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f2dc:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801f2e0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f2e4:	fb00 1303 	mla	r3, r0, r3, r1
 801f2e8:	6821      	ldr	r1, [r4, #0]
 801f2ea:	6854      	ldr	r4, [r2, #4]
 801f2ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f2f0:	18cb      	adds	r3, r1, r3
 801f2f2:	930b      	str	r3, [sp, #44]	; 0x2c
 801f2f4:	6813      	ldr	r3, [r2, #0]
 801f2f6:	930e      	str	r3, [sp, #56]	; 0x38
 801f2f8:	1d23      	adds	r3, r4, #4
 801f2fa:	9309      	str	r3, [sp, #36]	; 0x24
 801f2fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f2fe:	43db      	mvns	r3, r3
 801f300:	b2db      	uxtb	r3, r3
 801f302:	930d      	str	r3, [sp, #52]	; 0x34
 801f304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f306:	2b00      	cmp	r3, #0
 801f308:	dc03      	bgt.n	801f312 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f30a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f30c:	2b00      	cmp	r3, #0
 801f30e:	f340 823c 	ble.w	801f78a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f314:	2b00      	cmp	r3, #0
 801f316:	f340 8115 	ble.w	801f544 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801f31a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f31c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f31e:	1412      	asrs	r2, r2, #16
 801f320:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f324:	d431      	bmi.n	801f38a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f326:	1c51      	adds	r1, r2, #1
 801f328:	428d      	cmp	r5, r1
 801f32a:	dd31      	ble.n	801f390 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	db2f      	blt.n	801f390 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f330:	1c59      	adds	r1, r3, #1
 801f332:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f334:	4288      	cmp	r0, r1
 801f336:	dd2b      	ble.n	801f390 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f33a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f33c:	3b01      	subs	r3, #1
 801f33e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801f340:	fb02 1203 	mla	r2, r2, r3, r1
 801f344:	1412      	asrs	r2, r2, #16
 801f346:	d42d      	bmi.n	801f3a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f348:	3201      	adds	r2, #1
 801f34a:	4295      	cmp	r5, r2
 801f34c:	dd2a      	ble.n	801f3a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f34e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f350:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f352:	fb02 1303 	mla	r3, r2, r3, r1
 801f356:	141b      	asrs	r3, r3, #16
 801f358:	d424      	bmi.n	801f3a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f35a:	3301      	adds	r3, #1
 801f35c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f35e:	429a      	cmp	r2, r3
 801f360:	dd20      	ble.n	801f3a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f364:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801f368:	f103 0c03 	add.w	ip, r3, #3
 801f36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f36e:	9311      	str	r3, [sp, #68]	; 0x44
 801f370:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f372:	2b00      	cmp	r3, #0
 801f374:	f300 814f 	bgt.w	801f616 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801f378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f37a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f37c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f380:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f384:	441a      	add	r2, r3
 801f386:	920b      	str	r2, [sp, #44]	; 0x2c
 801f388:	e0de      	b.n	801f548 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f38a:	1c51      	adds	r1, r2, #1
 801f38c:	f040 80cb 	bne.w	801f526 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f390:	42aa      	cmp	r2, r5
 801f392:	f280 80c8 	bge.w	801f526 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f396:	1c5f      	adds	r7, r3, #1
 801f398:	f2c0 80c5 	blt.w	801f526 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f39c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f39e:	4293      	cmp	r3, r2
 801f3a0:	f280 80c1 	bge.w	801f526 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3a6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f3a8:	9311      	str	r3, [sp, #68]	; 0x44
 801f3aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	dde3      	ble.n	801f378 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801f3b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f3b2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f3b4:	141a      	asrs	r2, r3, #16
 801f3b6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f3b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f3ba:	1400      	asrs	r0, r0, #16
 801f3bc:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f3c0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f3c4:	f100 810e 	bmi.w	801f5e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f3c8:	1c46      	adds	r6, r0, #1
 801f3ca:	42b5      	cmp	r5, r6
 801f3cc:	f340 810c 	ble.w	801f5e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f3d0:	2a00      	cmp	r2, #0
 801f3d2:	f2c0 8109 	blt.w	801f5e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f3d6:	1c56      	adds	r6, r2, #1
 801f3d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f3da:	42b4      	cmp	r4, r6
 801f3dc:	f340 8104 	ble.w	801f5e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f3e0:	fb02 0005 	mla	r0, r2, r5, r0
 801f3e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f3e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f3e8:	f814 e000 	ldrb.w	lr, [r4, r0]
 801f3ec:	4402      	add	r2, r0
 801f3ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f3f0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f3f4:	eb00 080e 	add.w	r8, r0, lr
 801f3f8:	2b00      	cmp	r3, #0
 801f3fa:	f000 80e4 	beq.w	801f5c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801f3fe:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f402:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f406:	4484      	add	ip, r0
 801f408:	2900      	cmp	r1, #0
 801f40a:	f000 80e5 	beq.w	801f5d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801f40e:	1950      	adds	r0, r2, r5
 801f410:	5d52      	ldrb	r2, [r2, r5]
 801f412:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f414:	7840      	ldrb	r0, [r0, #1]
 801f416:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f41a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f41e:	4422      	add	r2, r4
 801f420:	4420      	add	r0, r4
 801f422:	b29b      	uxth	r3, r3
 801f424:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f426:	b289      	uxth	r1, r1
 801f428:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801f42c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f430:	fb03 fa01 	mul.w	sl, r3, r1
 801f434:	011b      	lsls	r3, r3, #4
 801f436:	f89c e000 	ldrb.w	lr, [ip]
 801f43a:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f43e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801f442:	eba3 030a 	sub.w	r3, r3, sl
 801f446:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f448:	b289      	uxth	r1, r1
 801f44a:	b29b      	uxth	r3, r3
 801f44c:	eba9 0901 	sub.w	r9, r9, r1
 801f450:	fb03 fe0e 	mul.w	lr, r3, lr
 801f454:	fa1f f989 	uxth.w	r9, r9
 801f458:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f45c:	f892 b000 	ldrb.w	fp, [r2]
 801f460:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f464:	f890 b000 	ldrb.w	fp, [r0]
 801f468:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f46c:	f897 b000 	ldrb.w	fp, [r7]
 801f470:	fb1b fb04 	smulbb	fp, fp, r4
 801f474:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f478:	fb0e be06 	mla	lr, lr, r6, fp
 801f47c:	fa1f fe8e 	uxth.w	lr, lr
 801f480:	f10e 0b01 	add.w	fp, lr, #1
 801f484:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801f488:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801f48c:	f887 b000 	strb.w	fp, [r7]
 801f490:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f494:	f898 b001 	ldrb.w	fp, [r8, #1]
 801f498:	fb03 fe0e 	mul.w	lr, r3, lr
 801f49c:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f4a0:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f4a4:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f4a8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f4ac:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f4b0:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f4b4:	fb1b fb04 	smulbb	fp, fp, r4
 801f4b8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f4bc:	fb0e be06 	mla	lr, lr, r6, fp
 801f4c0:	fa1f fe8e 	uxth.w	lr, lr
 801f4c4:	f10e 0b01 	add.w	fp, lr, #1
 801f4c8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f4cc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f4d0:	f887 e001 	strb.w	lr, [r7, #1]
 801f4d4:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f4d8:	f898 e002 	ldrb.w	lr, [r8, #2]
 801f4dc:	fb03 f30c 	mul.w	r3, r3, ip
 801f4e0:	fb09 330e 	mla	r3, r9, lr, r3
 801f4e4:	f892 e002 	ldrb.w	lr, [r2, #2]
 801f4e8:	7882      	ldrb	r2, [r0, #2]
 801f4ea:	fb01 310e 	mla	r1, r1, lr, r3
 801f4ee:	fb0a 1a02 	mla	sl, sl, r2, r1
 801f4f2:	78b9      	ldrb	r1, [r7, #2]
 801f4f4:	fb11 f104 	smulbb	r1, r1, r4
 801f4f8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f4fc:	fb0a 1606 	mla	r6, sl, r6, r1
 801f500:	b2b6      	uxth	r6, r6
 801f502:	1c73      	adds	r3, r6, #1
 801f504:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f508:	1236      	asrs	r6, r6, #8
 801f50a:	70be      	strb	r6, [r7, #2]
 801f50c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f50e:	3703      	adds	r7, #3
 801f510:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f512:	4413      	add	r3, r2
 801f514:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f516:	9327      	str	r3, [sp, #156]	; 0x9c
 801f518:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f51a:	4413      	add	r3, r2
 801f51c:	9328      	str	r3, [sp, #160]	; 0xa0
 801f51e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f520:	3b01      	subs	r3, #1
 801f522:	9311      	str	r3, [sp, #68]	; 0x44
 801f524:	e741      	b.n	801f3aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801f526:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f528:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f52a:	4413      	add	r3, r2
 801f52c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f52e:	9327      	str	r3, [sp, #156]	; 0x9c
 801f530:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f532:	4413      	add	r3, r2
 801f534:	9328      	str	r3, [sp, #160]	; 0xa0
 801f536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f538:	3b01      	subs	r3, #1
 801f53a:	930a      	str	r3, [sp, #40]	; 0x28
 801f53c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f53e:	3303      	adds	r3, #3
 801f540:	930b      	str	r3, [sp, #44]	; 0x2c
 801f542:	e6e6      	b.n	801f312 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f544:	f47f aef8 	bne.w	801f338 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801f548:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f54a:	2b00      	cmp	r3, #0
 801f54c:	f340 811d 	ble.w	801f78a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f554:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f556:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f55a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f55e:	eef0 6a48 	vmov.f32	s13, s16
 801f562:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f566:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f56a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f56e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801f572:	eef0 6a68 	vmov.f32	s13, s17
 801f576:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f57a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801f57e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f582:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f586:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f58a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f58e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f592:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f596:	ee18 2a10 	vmov	r2, s16
 801f59a:	eeb0 8a47 	vmov.f32	s16, s14
 801f59e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5a2:	ee18 2a90 	vmov	r2, s17
 801f5a6:	9329      	str	r3, [sp, #164]	; 0xa4
 801f5a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f5aa:	eef0 8a67 	vmov.f32	s17, s15
 801f5ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5b2:	932a      	str	r3, [sp, #168]	; 0xa8
 801f5b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f5b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f5b8:	3b01      	subs	r3, #1
 801f5ba:	930f      	str	r3, [sp, #60]	; 0x3c
 801f5bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f5be:	bf08      	it	eq
 801f5c0:	4613      	moveq	r3, r2
 801f5c2:	930a      	str	r3, [sp, #40]	; 0x28
 801f5c4:	e69e      	b.n	801f304 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f5c6:	b151      	cbz	r1, 801f5de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801f5c8:	5d52      	ldrb	r2, [r2, r5]
 801f5ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f5cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f5d0:	4402      	add	r2, r0
 801f5d2:	4640      	mov	r0, r8
 801f5d4:	46c4      	mov	ip, r8
 801f5d6:	e724      	b.n	801f422 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f5d8:	4640      	mov	r0, r8
 801f5da:	4642      	mov	r2, r8
 801f5dc:	e721      	b.n	801f422 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f5de:	4640      	mov	r0, r8
 801f5e0:	4642      	mov	r2, r8
 801f5e2:	e7f7      	b.n	801f5d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801f5e4:	1c46      	adds	r6, r0, #1
 801f5e6:	d191      	bne.n	801f50c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f5e8:	4285      	cmp	r5, r0
 801f5ea:	dd8f      	ble.n	801f50c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f5ec:	1c54      	adds	r4, r2, #1
 801f5ee:	db8d      	blt.n	801f50c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f5f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f5f2:	4294      	cmp	r4, r2
 801f5f4:	dd8a      	ble.n	801f50c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f5f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f5f8:	9002      	str	r0, [sp, #8]
 801f5fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f5fc:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801f600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f604:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f608:	e9cd 5300 	strd	r5, r3, [sp]
 801f60c:	4639      	mov	r1, r7
 801f60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f610:	f7ff fd52 	bl	801f0b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801f614:	e77a      	b.n	801f50c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f616:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f618:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f61a:	1410      	asrs	r0, r2, #16
 801f61c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f620:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f622:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f624:	1412      	asrs	r2, r2, #16
 801f626:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f62a:	fb05 2000 	mla	r0, r5, r0, r2
 801f62e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f630:	f814 8000 	ldrb.w	r8, [r4, r0]
 801f634:	4402      	add	r2, r0
 801f636:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f638:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f63c:	eb00 0708 	add.w	r7, r0, r8
 801f640:	2b00      	cmp	r3, #0
 801f642:	f000 8093 	beq.w	801f76c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801f646:	7856      	ldrb	r6, [r2, #1]
 801f648:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f64c:	4406      	add	r6, r0
 801f64e:	2900      	cmp	r1, #0
 801f650:	f000 8095 	beq.w	801f77e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801f654:	1950      	adds	r0, r2, r5
 801f656:	5d52      	ldrb	r2, [r2, r5]
 801f658:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f65a:	7840      	ldrb	r0, [r0, #1]
 801f65c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f660:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f664:	4422      	add	r2, r4
 801f666:	4420      	add	r0, r4
 801f668:	b29b      	uxth	r3, r3
 801f66a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f66c:	b289      	uxth	r1, r1
 801f66e:	f10c 0c03 	add.w	ip, ip, #3
 801f672:	f814 b008 	ldrb.w	fp, [r4, r8]
 801f676:	fb03 f901 	mul.w	r9, r3, r1
 801f67a:	011b      	lsls	r3, r3, #4
 801f67c:	f896 8000 	ldrb.w	r8, [r6]
 801f680:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f684:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f688:	eba3 0309 	sub.w	r3, r3, r9
 801f68c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f68e:	b289      	uxth	r1, r1
 801f690:	b29b      	uxth	r3, r3
 801f692:	ebae 0e01 	sub.w	lr, lr, r1
 801f696:	fb03 f808 	mul.w	r8, r3, r8
 801f69a:	fa1f fe8e 	uxth.w	lr, lr
 801f69e:	fb0e 880b 	mla	r8, lr, fp, r8
 801f6a2:	f892 b000 	ldrb.w	fp, [r2]
 801f6a6:	fb01 880b 	mla	r8, r1, fp, r8
 801f6aa:	f890 b000 	ldrb.w	fp, [r0]
 801f6ae:	fb09 880b 	mla	r8, r9, fp, r8
 801f6b2:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801f6b6:	fb1b fb04 	smulbb	fp, fp, r4
 801f6ba:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f6be:	fb08 b80a 	mla	r8, r8, sl, fp
 801f6c2:	fa1f f888 	uxth.w	r8, r8
 801f6c6:	f108 0b01 	add.w	fp, r8, #1
 801f6ca:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f6ce:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f6d2:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801f6d6:	f896 8001 	ldrb.w	r8, [r6, #1]
 801f6da:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f6de:	fb03 f808 	mul.w	r8, r3, r8
 801f6e2:	fb0e 880b 	mla	r8, lr, fp, r8
 801f6e6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f6ea:	fb01 880b 	mla	r8, r1, fp, r8
 801f6ee:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f6f2:	fb09 880b 	mla	r8, r9, fp, r8
 801f6f6:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801f6fa:	fb1b fb04 	smulbb	fp, fp, r4
 801f6fe:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f702:	fb08 b80a 	mla	r8, r8, sl, fp
 801f706:	fa1f f888 	uxth.w	r8, r8
 801f70a:	f108 0b01 	add.w	fp, r8, #1
 801f70e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f712:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f716:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801f71a:	78b6      	ldrb	r6, [r6, #2]
 801f71c:	78bf      	ldrb	r7, [r7, #2]
 801f71e:	4373      	muls	r3, r6
 801f720:	7896      	ldrb	r6, [r2, #2]
 801f722:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f724:	fb0e 3307 	mla	r3, lr, r7, r3
 801f728:	fb01 3306 	mla	r3, r1, r6, r3
 801f72c:	7886      	ldrb	r6, [r0, #2]
 801f72e:	fb09 3906 	mla	r9, r9, r6, r3
 801f732:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801f736:	fb13 f304 	smulbb	r3, r3, r4
 801f73a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f73e:	fb09 390a 	mla	r9, r9, sl, r3
 801f742:	fa1f f989 	uxth.w	r9, r9
 801f746:	f109 0301 	add.w	r3, r9, #1
 801f74a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f74e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f750:	4413      	add	r3, r2
 801f752:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f754:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f758:	9327      	str	r3, [sp, #156]	; 0x9c
 801f75a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f75c:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801f760:	4413      	add	r3, r2
 801f762:	9328      	str	r3, [sp, #160]	; 0xa0
 801f764:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f766:	3b01      	subs	r3, #1
 801f768:	9311      	str	r3, [sp, #68]	; 0x44
 801f76a:	e601      	b.n	801f370 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f76c:	b151      	cbz	r1, 801f784 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801f76e:	5d52      	ldrb	r2, [r2, r5]
 801f770:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f772:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f776:	4402      	add	r2, r0
 801f778:	4638      	mov	r0, r7
 801f77a:	463e      	mov	r6, r7
 801f77c:	e774      	b.n	801f668 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f77e:	4638      	mov	r0, r7
 801f780:	463a      	mov	r2, r7
 801f782:	e771      	b.n	801f668 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f784:	4638      	mov	r0, r7
 801f786:	463a      	mov	r2, r7
 801f788:	e7f7      	b.n	801f77a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801f78a:	b015      	add	sp, #84	; 0x54
 801f78c:	ecbd 8b08 	vpop	{d8-d11}
 801f790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f794 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801f794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f798:	780d      	ldrb	r5, [r1, #0]
 801f79a:	f891 9002 	ldrb.w	r9, [r1, #2]
 801f79e:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801f7a2:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f7a6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801f7aa:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801f7ae:	f891 9001 	ldrb.w	r9, [r1, #1]
 801f7b2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801f7b6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801f7ba:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801f7be:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801f7c2:	9501      	str	r5, [sp, #4]
 801f7c4:	fb06 470c 	mla	r7, r6, ip, r4
 801f7c8:	2e00      	cmp	r6, #0
 801f7ca:	eb02 0e07 	add.w	lr, r2, r7
 801f7ce:	db46      	blt.n	801f85e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f7d0:	45b0      	cmp	r8, r6
 801f7d2:	dd44      	ble.n	801f85e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f7d4:	2c00      	cmp	r4, #0
 801f7d6:	db40      	blt.n	801f85a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f7d8:	45a4      	cmp	ip, r4
 801f7da:	dd3e      	ble.n	801f85a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f7dc:	5dd7      	ldrb	r7, [r2, r7]
 801f7de:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f7e2:	441f      	add	r7, r3
 801f7e4:	1c62      	adds	r2, r4, #1
 801f7e6:	d43d      	bmi.n	801f864 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f7e8:	4594      	cmp	ip, r2
 801f7ea:	dd3b      	ble.n	801f864 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f7ec:	f1ba 0f00 	cmp.w	sl, #0
 801f7f0:	d038      	beq.n	801f864 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f7f2:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801f7f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f7fa:	441d      	add	r5, r3
 801f7fc:	3601      	adds	r6, #1
 801f7fe:	d435      	bmi.n	801f86c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f800:	45b0      	cmp	r8, r6
 801f802:	dd33      	ble.n	801f86c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f804:	b390      	cbz	r0, 801f86c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f806:	2c00      	cmp	r4, #0
 801f808:	db2e      	blt.n	801f868 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f80a:	45a4      	cmp	ip, r4
 801f80c:	dd2c      	ble.n	801f868 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f80e:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801f812:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f816:	441e      	add	r6, r3
 801f818:	1c62      	adds	r2, r4, #1
 801f81a:	d42a      	bmi.n	801f872 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f81c:	4594      	cmp	ip, r2
 801f81e:	dd28      	ble.n	801f872 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f820:	f1ba 0f00 	cmp.w	sl, #0
 801f824:	d025      	beq.n	801f872 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f826:	44f4      	add	ip, lr
 801f828:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f82c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f830:	4413      	add	r3, r2
 801f832:	f1ba 0f0f 	cmp.w	sl, #15
 801f836:	f897 8000 	ldrb.w	r8, [r7]
 801f83a:	f895 9000 	ldrb.w	r9, [r5]
 801f83e:	f896 e000 	ldrb.w	lr, [r6]
 801f842:	f893 c000 	ldrb.w	ip, [r3]
 801f846:	d801      	bhi.n	801f84c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801f848:	280f      	cmp	r0, #15
 801f84a:	d914      	bls.n	801f876 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801f84c:	4b29      	ldr	r3, [pc, #164]	; (801f8f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801f84e:	f240 11a5 	movw	r1, #421	; 0x1a5
 801f852:	4a29      	ldr	r2, [pc, #164]	; (801f8f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801f854:	4829      	ldr	r0, [pc, #164]	; (801f8fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801f856:	f005 ff43 	bl	80256e0 <__assert_func>
 801f85a:	af01      	add	r7, sp, #4
 801f85c:	e7c2      	b.n	801f7e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801f85e:	ad01      	add	r5, sp, #4
 801f860:	462f      	mov	r7, r5
 801f862:	e7cb      	b.n	801f7fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f864:	ad01      	add	r5, sp, #4
 801f866:	e7c9      	b.n	801f7fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f868:	ae01      	add	r6, sp, #4
 801f86a:	e7d5      	b.n	801f818 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801f86c:	ab01      	add	r3, sp, #4
 801f86e:	461e      	mov	r6, r3
 801f870:	e7df      	b.n	801f832 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f872:	ab01      	add	r3, sp, #4
 801f874:	e7dd      	b.n	801f832 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f876:	fa1f f48a 	uxth.w	r4, sl
 801f87a:	b280      	uxth	r0, r0
 801f87c:	fb04 fa00 	mul.w	sl, r4, r0
 801f880:	0124      	lsls	r4, r4, #4
 801f882:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f886:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801f88a:	b282      	uxth	r2, r0
 801f88c:	eba4 000a 	sub.w	r0, r4, sl
 801f890:	ebab 0b02 	sub.w	fp, fp, r2
 801f894:	b280      	uxth	r0, r0
 801f896:	fa1f fb8b 	uxth.w	fp, fp
 801f89a:	fb00 f909 	mul.w	r9, r0, r9
 801f89e:	fb0b 9808 	mla	r8, fp, r8, r9
 801f8a2:	fb02 8e0e 	mla	lr, r2, lr, r8
 801f8a6:	fb0a ec0c 	mla	ip, sl, ip, lr
 801f8aa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f8ae:	f881 c000 	strb.w	ip, [r1]
 801f8b2:	786c      	ldrb	r4, [r5, #1]
 801f8b4:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f8b8:	4344      	muls	r4, r0
 801f8ba:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f8be:	7874      	ldrb	r4, [r6, #1]
 801f8c0:	fb02 cc04 	mla	ip, r2, r4, ip
 801f8c4:	785c      	ldrb	r4, [r3, #1]
 801f8c6:	fb0a c404 	mla	r4, sl, r4, ip
 801f8ca:	1224      	asrs	r4, r4, #8
 801f8cc:	704c      	strb	r4, [r1, #1]
 801f8ce:	78ad      	ldrb	r5, [r5, #2]
 801f8d0:	78bc      	ldrb	r4, [r7, #2]
 801f8d2:	4368      	muls	r0, r5
 801f8d4:	fb0b 0b04 	mla	fp, fp, r4, r0
 801f8d8:	78b0      	ldrb	r0, [r6, #2]
 801f8da:	fb02 b000 	mla	r0, r2, r0, fp
 801f8de:	789a      	ldrb	r2, [r3, #2]
 801f8e0:	fb0a 0a02 	mla	sl, sl, r2, r0
 801f8e4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f8e8:	f881 a002 	strb.w	sl, [r1, #2]
 801f8ec:	b003      	add	sp, #12
 801f8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8f2:	bf00      	nop
 801f8f4:	0802aff1 	.word	0x0802aff1
 801f8f8:	0802b4e6 	.word	0x0802b4e6
 801f8fc:	0802b0ba 	.word	0x0802b0ba

0801f900 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f904:	ed2d 8b0a 	vpush	{d8-d12}
 801f908:	b08f      	sub	sp, #60	; 0x3c
 801f90a:	eeb0 aa40 	vmov.f32	s20, s0
 801f90e:	eef0 9a60 	vmov.f32	s19, s1
 801f912:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801f914:	eeb0 9a41 	vmov.f32	s18, s2
 801f918:	9307      	str	r3, [sp, #28]
 801f91a:	eeb0 8a62 	vmov.f32	s16, s5
 801f91e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801f922:	eef0 8a43 	vmov.f32	s17, s6
 801f926:	900d      	str	r0, [sp, #52]	; 0x34
 801f928:	eeb0 ca44 	vmov.f32	s24, s8
 801f92c:	6860      	ldr	r0, [r4, #4]
 801f92e:	eef0 ba64 	vmov.f32	s23, s9
 801f932:	9309      	str	r3, [sp, #36]	; 0x24
 801f934:	eeb0 ba45 	vmov.f32	s22, s10
 801f938:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f93c:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801f940:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801f944:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801f948:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f94a:	fb00 1303 	mla	r3, r0, r3, r1
 801f94e:	6821      	ldr	r1, [r4, #0]
 801f950:	6854      	ldr	r4, [r2, #4]
 801f952:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f956:	3404      	adds	r4, #4
 801f958:	18cb      	adds	r3, r1, r3
 801f95a:	9308      	str	r3, [sp, #32]
 801f95c:	6813      	ldr	r3, [r2, #0]
 801f95e:	930a      	str	r3, [sp, #40]	; 0x28
 801f960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f962:	2b00      	cmp	r3, #0
 801f964:	dc03      	bgt.n	801f96e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f968:	2b00      	cmp	r3, #0
 801f96a:	f340 81d2 	ble.w	801fd12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f96e:	9b07      	ldr	r3, [sp, #28]
 801f970:	2b00      	cmp	r3, #0
 801f972:	f340 80e3 	ble.w	801fb3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801f976:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f978:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f97a:	1412      	asrs	r2, r2, #16
 801f97c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f980:	d42f      	bmi.n	801f9e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f982:	1c51      	adds	r1, r2, #1
 801f984:	428d      	cmp	r5, r1
 801f986:	dd2f      	ble.n	801f9e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f988:	2b00      	cmp	r3, #0
 801f98a:	db2d      	blt.n	801f9e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f98c:	1c59      	adds	r1, r3, #1
 801f98e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f990:	4288      	cmp	r0, r1
 801f992:	dd29      	ble.n	801f9e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f994:	9b07      	ldr	r3, [sp, #28]
 801f996:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f998:	3b01      	subs	r3, #1
 801f99a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801f99c:	fb02 1203 	mla	r2, r2, r3, r1
 801f9a0:	1412      	asrs	r2, r2, #16
 801f9a2:	d42b      	bmi.n	801f9fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f9a4:	3201      	adds	r2, #1
 801f9a6:	4295      	cmp	r5, r2
 801f9a8:	dd28      	ble.n	801f9fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f9aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f9ac:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f9ae:	fb02 1303 	mla	r3, r2, r3, r1
 801f9b2:	141b      	asrs	r3, r3, #16
 801f9b4:	d422      	bmi.n	801f9fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f9b6:	3301      	adds	r3, #1
 801f9b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f9ba:	429a      	cmp	r2, r3
 801f9bc:	dd1e      	ble.n	801f9fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f9be:	9b08      	ldr	r3, [sp, #32]
 801f9c0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f9c4:	f103 0803 	add.w	r8, r3, #3
 801f9c8:	f1ba 0f00 	cmp.w	sl, #0
 801f9cc:	f300 8119 	bgt.w	801fc02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801f9d0:	9b07      	ldr	r3, [sp, #28]
 801f9d2:	9a08      	ldr	r2, [sp, #32]
 801f9d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f9dc:	441a      	add	r2, r3
 801f9de:	9208      	str	r2, [sp, #32]
 801f9e0:	e0ae      	b.n	801fb40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801f9e2:	1c51      	adds	r1, r2, #1
 801f9e4:	f040 809b 	bne.w	801fb1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f9e8:	42aa      	cmp	r2, r5
 801f9ea:	f280 8098 	bge.w	801fb1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f9ee:	1c5a      	adds	r2, r3, #1
 801f9f0:	f2c0 8095 	blt.w	801fb1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f9f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f9f6:	4293      	cmp	r3, r2
 801f9f8:	f280 8091 	bge.w	801fb1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f9fc:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801fa00:	f1bb 0f00 	cmp.w	fp, #0
 801fa04:	dde4      	ble.n	801f9d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801fa06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fa08:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801fa0a:	141a      	asrs	r2, r3, #16
 801fa0c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fa0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fa10:	1400      	asrs	r0, r0, #16
 801fa12:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801fa16:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fa1a:	f100 80dc 	bmi.w	801fbd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801fa1e:	1c47      	adds	r7, r0, #1
 801fa20:	42bd      	cmp	r5, r7
 801fa22:	f340 80da 	ble.w	801fbda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fa26:	2a00      	cmp	r2, #0
 801fa28:	f2c0 80d7 	blt.w	801fbda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fa2c:	f102 0c01 	add.w	ip, r2, #1
 801fa30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fa32:	4567      	cmp	r7, ip
 801fa34:	f340 80d1 	ble.w	801fbda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fa38:	fb02 0005 	mla	r0, r2, r5, r0
 801fa3c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fa3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fa40:	f817 8000 	ldrb.w	r8, [r7, r0]
 801fa44:	4402      	add	r2, r0
 801fa46:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fa4a:	eb04 0c08 	add.w	ip, r4, r8
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	f000 80b3 	beq.w	801fbba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801fa54:	7857      	ldrb	r7, [r2, #1]
 801fa56:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fa5a:	4427      	add	r7, r4
 801fa5c:	2900      	cmp	r1, #0
 801fa5e:	f000 80b4 	beq.w	801fbca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801fa62:	1950      	adds	r0, r2, r5
 801fa64:	5d52      	ldrb	r2, [r2, r5]
 801fa66:	7840      	ldrb	r0, [r0, #1]
 801fa68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fa70:	4422      	add	r2, r4
 801fa72:	4420      	add	r0, r4
 801fa74:	b29b      	uxth	r3, r3
 801fa76:	f814 a008 	ldrb.w	sl, [r4, r8]
 801fa7a:	b289      	uxth	r1, r1
 801fa7c:	f897 8000 	ldrb.w	r8, [r7]
 801fa80:	fb03 f901 	mul.w	r9, r3, r1
 801fa84:	011b      	lsls	r3, r3, #4
 801fa86:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fa8a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fa8e:	eba3 0309 	sub.w	r3, r3, r9
 801fa92:	b289      	uxth	r1, r1
 801fa94:	b29b      	uxth	r3, r3
 801fa96:	ebae 0e01 	sub.w	lr, lr, r1
 801fa9a:	fb03 f808 	mul.w	r8, r3, r8
 801fa9e:	fa1f fe8e 	uxth.w	lr, lr
 801faa2:	fb0e 880a 	mla	r8, lr, sl, r8
 801faa6:	f892 a000 	ldrb.w	sl, [r2]
 801faaa:	fb01 880a 	mla	r8, r1, sl, r8
 801faae:	f890 a000 	ldrb.w	sl, [r0]
 801fab2:	fb09 880a 	mla	r8, r9, sl, r8
 801fab6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801faba:	f886 8000 	strb.w	r8, [r6]
 801fabe:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fac2:	f89c a001 	ldrb.w	sl, [ip, #1]
 801fac6:	fb03 f808 	mul.w	r8, r3, r8
 801faca:	fb0e 880a 	mla	r8, lr, sl, r8
 801face:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fad2:	fb01 880a 	mla	r8, r1, sl, r8
 801fad6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fada:	fb09 880a 	mla	r8, r9, sl, r8
 801fade:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fae2:	f886 8001 	strb.w	r8, [r6, #1]
 801fae6:	78bf      	ldrb	r7, [r7, #2]
 801fae8:	f89c c002 	ldrb.w	ip, [ip, #2]
 801faec:	437b      	muls	r3, r7
 801faee:	7892      	ldrb	r2, [r2, #2]
 801faf0:	fb0e 330c 	mla	r3, lr, ip, r3
 801faf4:	fb01 3102 	mla	r1, r1, r2, r3
 801faf8:	7882      	ldrb	r2, [r0, #2]
 801fafa:	fb09 1902 	mla	r9, r9, r2, r1
 801fafe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fb02:	f886 9002 	strb.w	r9, [r6, #2]
 801fb06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fb08:	3603      	adds	r6, #3
 801fb0a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fb0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fb10:	4413      	add	r3, r2
 801fb12:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fb14:	9323      	str	r3, [sp, #140]	; 0x8c
 801fb16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb18:	4413      	add	r3, r2
 801fb1a:	9324      	str	r3, [sp, #144]	; 0x90
 801fb1c:	e770      	b.n	801fa00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801fb1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fb20:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fb22:	4413      	add	r3, r2
 801fb24:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fb26:	9323      	str	r3, [sp, #140]	; 0x8c
 801fb28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb2a:	4413      	add	r3, r2
 801fb2c:	9324      	str	r3, [sp, #144]	; 0x90
 801fb2e:	9b07      	ldr	r3, [sp, #28]
 801fb30:	3b01      	subs	r3, #1
 801fb32:	9307      	str	r3, [sp, #28]
 801fb34:	9b08      	ldr	r3, [sp, #32]
 801fb36:	3303      	adds	r3, #3
 801fb38:	9308      	str	r3, [sp, #32]
 801fb3a:	e718      	b.n	801f96e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fb3c:	f47f af2a 	bne.w	801f994 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801fb40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	f340 80e5 	ble.w	801fd12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801fb48:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801fb4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fb4e:	ee79 9aab 	vadd.f32	s19, s19, s23
 801fb52:	eef0 6a48 	vmov.f32	s13, s16
 801fb56:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801fb5a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801fb5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb62:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801fb66:	eef0 6a68 	vmov.f32	s13, s17
 801fb6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb6e:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801fb72:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fb76:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fb7a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fb7e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fb82:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fb86:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fb8a:	ee18 2a10 	vmov	r2, s16
 801fb8e:	eeb0 8a47 	vmov.f32	s16, s14
 801fb92:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb96:	ee18 2a90 	vmov	r2, s17
 801fb9a:	9325      	str	r3, [sp, #148]	; 0x94
 801fb9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fb9e:	eef0 8a67 	vmov.f32	s17, s15
 801fba2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fba6:	9326      	str	r3, [sp, #152]	; 0x98
 801fba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fbaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fbac:	3b01      	subs	r3, #1
 801fbae:	930b      	str	r3, [sp, #44]	; 0x2c
 801fbb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fbb2:	bf08      	it	eq
 801fbb4:	4613      	moveq	r3, r2
 801fbb6:	9307      	str	r3, [sp, #28]
 801fbb8:	e6d2      	b.n	801f960 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fbba:	b149      	cbz	r1, 801fbd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801fbbc:	5d52      	ldrb	r2, [r2, r5]
 801fbbe:	4660      	mov	r0, ip
 801fbc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fbc4:	4422      	add	r2, r4
 801fbc6:	4667      	mov	r7, ip
 801fbc8:	e754      	b.n	801fa74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801fbca:	4660      	mov	r0, ip
 801fbcc:	4662      	mov	r2, ip
 801fbce:	e751      	b.n	801fa74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801fbd0:	4660      	mov	r0, ip
 801fbd2:	4662      	mov	r2, ip
 801fbd4:	e7f7      	b.n	801fbc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801fbd6:	1c47      	adds	r7, r0, #1
 801fbd8:	d195      	bne.n	801fb06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fbda:	4285      	cmp	r5, r0
 801fbdc:	dd93      	ble.n	801fb06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fbde:	1c57      	adds	r7, r2, #1
 801fbe0:	db91      	blt.n	801fb06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fbe2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fbe4:	4297      	cmp	r7, r2
 801fbe6:	dd8e      	ble.n	801fb06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fbe8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fbec:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801fbf0:	e9cd 5700 	strd	r5, r7, [sp]
 801fbf4:	4623      	mov	r3, r4
 801fbf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fbf8:	4631      	mov	r1, r6
 801fbfa:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fbfc:	f7ff fdca 	bl	801f794 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801fc00:	e781      	b.n	801fb06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fc02:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801fc04:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fc06:	1410      	asrs	r0, r2, #16
 801fc08:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fc0c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fc0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fc10:	1412      	asrs	r2, r2, #16
 801fc12:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fc16:	fb05 2000 	mla	r0, r5, r0, r2
 801fc1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fc1c:	f816 e000 	ldrb.w	lr, [r6, r0]
 801fc20:	4402      	add	r2, r0
 801fc22:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fc26:	eb04 070e 	add.w	r7, r4, lr
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	d063      	beq.n	801fcf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801fc2e:	7856      	ldrb	r6, [r2, #1]
 801fc30:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fc34:	4426      	add	r6, r4
 801fc36:	2900      	cmp	r1, #0
 801fc38:	d065      	beq.n	801fd06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801fc3a:	1950      	adds	r0, r2, r5
 801fc3c:	5d52      	ldrb	r2, [r2, r5]
 801fc3e:	7840      	ldrb	r0, [r0, #1]
 801fc40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fc48:	4422      	add	r2, r4
 801fc4a:	4420      	add	r0, r4
 801fc4c:	b29b      	uxth	r3, r3
 801fc4e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801fc52:	b289      	uxth	r1, r1
 801fc54:	f896 e000 	ldrb.w	lr, [r6]
 801fc58:	f108 0803 	add.w	r8, r8, #3
 801fc5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fc60:	fb03 f901 	mul.w	r9, r3, r1
 801fc64:	011b      	lsls	r3, r3, #4
 801fc66:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fc6a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801fc6e:	eba3 0309 	sub.w	r3, r3, r9
 801fc72:	b289      	uxth	r1, r1
 801fc74:	b29b      	uxth	r3, r3
 801fc76:	ebac 0c01 	sub.w	ip, ip, r1
 801fc7a:	fb03 fe0e 	mul.w	lr, r3, lr
 801fc7e:	fa1f fc8c 	uxth.w	ip, ip
 801fc82:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fc86:	f892 b000 	ldrb.w	fp, [r2]
 801fc8a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fc8e:	f890 b000 	ldrb.w	fp, [r0]
 801fc92:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fc96:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fc9a:	f808 ec06 	strb.w	lr, [r8, #-6]
 801fc9e:	f896 e001 	ldrb.w	lr, [r6, #1]
 801fca2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801fca6:	fb03 fe0e 	mul.w	lr, r3, lr
 801fcaa:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fcae:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fcb2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fcb6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fcba:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fcbe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fcc2:	f808 ec05 	strb.w	lr, [r8, #-5]
 801fcc6:	78b6      	ldrb	r6, [r6, #2]
 801fcc8:	78bf      	ldrb	r7, [r7, #2]
 801fcca:	4373      	muls	r3, r6
 801fccc:	7896      	ldrb	r6, [r2, #2]
 801fcce:	7882      	ldrb	r2, [r0, #2]
 801fcd0:	fb0c 3307 	mla	r3, ip, r7, r3
 801fcd4:	fb01 3306 	mla	r3, r1, r6, r3
 801fcd8:	fb09 3902 	mla	r9, r9, r2, r3
 801fcdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fcde:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fce0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fce4:	4413      	add	r3, r2
 801fce6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fce8:	f808 9c04 	strb.w	r9, [r8, #-4]
 801fcec:	9323      	str	r3, [sp, #140]	; 0x8c
 801fcee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fcf0:	4413      	add	r3, r2
 801fcf2:	9324      	str	r3, [sp, #144]	; 0x90
 801fcf4:	e668      	b.n	801f9c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fcf6:	b149      	cbz	r1, 801fd0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801fcf8:	5d52      	ldrb	r2, [r2, r5]
 801fcfa:	4638      	mov	r0, r7
 801fcfc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fd00:	4422      	add	r2, r4
 801fd02:	463e      	mov	r6, r7
 801fd04:	e7a2      	b.n	801fc4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fd06:	4638      	mov	r0, r7
 801fd08:	463a      	mov	r2, r7
 801fd0a:	e79f      	b.n	801fc4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fd0c:	4638      	mov	r0, r7
 801fd0e:	463a      	mov	r2, r7
 801fd10:	e7f7      	b.n	801fd02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801fd12:	b00f      	add	sp, #60	; 0x3c
 801fd14:	ecbd 8b0a 	vpop	{d8-d12}
 801fd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fd1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801fd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd20:	b087      	sub	sp, #28
 801fd22:	7888      	ldrb	r0, [r1, #2]
 801fd24:	9002      	str	r0, [sp, #8]
 801fd26:	7848      	ldrb	r0, [r1, #1]
 801fd28:	9e02      	ldr	r6, [sp, #8]
 801fd2a:	9003      	str	r0, [sp, #12]
 801fd2c:	7808      	ldrb	r0, [r1, #0]
 801fd2e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801fd32:	9004      	str	r0, [sp, #16]
 801fd34:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fd38:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801fd3c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801fd40:	9e03      	ldr	r6, [sp, #12]
 801fd42:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801fd46:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801fd4a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801fd4e:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801fd52:	fb04 7508 	mla	r5, r4, r8, r7
 801fd56:	2c00      	cmp	r4, #0
 801fd58:	eb02 0905 	add.w	r9, r2, r5
 801fd5c:	db45      	blt.n	801fdea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fd5e:	45a2      	cmp	sl, r4
 801fd60:	dd43      	ble.n	801fdea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fd62:	2f00      	cmp	r7, #0
 801fd64:	db3f      	blt.n	801fde6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fd66:	45b8      	cmp	r8, r7
 801fd68:	dd3d      	ble.n	801fde6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fd6a:	5d52      	ldrb	r2, [r2, r5]
 801fd6c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801fd70:	1c7a      	adds	r2, r7, #1
 801fd72:	d43d      	bmi.n	801fdf0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fd74:	4590      	cmp	r8, r2
 801fd76:	dd3b      	ble.n	801fdf0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fd78:	f1bc 0f00 	cmp.w	ip, #0
 801fd7c:	d038      	beq.n	801fdf0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fd7e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801fd82:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fd86:	3401      	adds	r4, #1
 801fd88:	d436      	bmi.n	801fdf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fd8a:	45a2      	cmp	sl, r4
 801fd8c:	dd34      	ble.n	801fdf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fd8e:	f1be 0f00 	cmp.w	lr, #0
 801fd92:	d031      	beq.n	801fdf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fd94:	2f00      	cmp	r7, #0
 801fd96:	db2d      	blt.n	801fdf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801fd98:	45b8      	cmp	r8, r7
 801fd9a:	dd2b      	ble.n	801fdf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801fd9c:	f819 2008 	ldrb.w	r2, [r9, r8]
 801fda0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801fda4:	3701      	adds	r7, #1
 801fda6:	d409      	bmi.n	801fdbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fda8:	45b8      	cmp	r8, r7
 801fdaa:	dd07      	ble.n	801fdbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fdac:	f1bc 0f00 	cmp.w	ip, #0
 801fdb0:	d004      	beq.n	801fdbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fdb2:	44c8      	add	r8, r9
 801fdb4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fdb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801fdbc:	f1bc 0f0f 	cmp.w	ip, #15
 801fdc0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801fdc4:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801fdc8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fdcc:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801fdd0:	d802      	bhi.n	801fdd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801fdd2:	f1be 0f0f 	cmp.w	lr, #15
 801fdd6:	d911      	bls.n	801fdfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801fdd8:	4b77      	ldr	r3, [pc, #476]	; (801ffb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801fdda:	f240 11a5 	movw	r1, #421	; 0x1a5
 801fdde:	4a77      	ldr	r2, [pc, #476]	; (801ffbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801fde0:	4877      	ldr	r0, [pc, #476]	; (801ffc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801fde2:	f005 fc7d 	bl	80256e0 <__assert_func>
 801fde6:	4606      	mov	r6, r0
 801fde8:	e7c2      	b.n	801fd70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801fdea:	4605      	mov	r5, r0
 801fdec:	4606      	mov	r6, r0
 801fdee:	e7ca      	b.n	801fd86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801fdf0:	4605      	mov	r5, r0
 801fdf2:	e7c8      	b.n	801fd86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801fdf4:	4604      	mov	r4, r0
 801fdf6:	e7d5      	b.n	801fda4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801fdf8:	4604      	mov	r4, r0
 801fdfa:	e7df      	b.n	801fdbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fdfc:	fa1f fc8c 	uxth.w	ip, ip
 801fe00:	fa1f f28e 	uxth.w	r2, lr
 801fe04:	fb02 fe0c 	mul.w	lr, r2, ip
 801fe08:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801fe0c:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801fe10:	ebac 070e 	sub.w	r7, ip, lr
 801fe14:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801fe18:	b292      	uxth	r2, r2
 801fe1a:	b2bf      	uxth	r7, r7
 801fe1c:	1a9b      	subs	r3, r3, r2
 801fe1e:	fb07 fc0a 	mul.w	ip, r7, sl
 801fe22:	b29b      	uxth	r3, r3
 801fe24:	fb03 cc0b 	mla	ip, r3, fp, ip
 801fe28:	9301      	str	r3, [sp, #4]
 801fe2a:	fb02 cc09 	mla	ip, r2, r9, ip
 801fe2e:	fb0e cc08 	mla	ip, lr, r8, ip
 801fe32:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fe36:	9305      	str	r3, [sp, #20]
 801fe38:	2b00      	cmp	r3, #0
 801fe3a:	f000 80b9 	beq.w	801ffb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801fe3e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fe42:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fe46:	fb0b fc0c 	mul.w	ip, fp, ip
 801fe4a:	fb0b f606 	mul.w	r6, fp, r6
 801fe4e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fe52:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fe56:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801fe5a:	44dc      	add	ip, fp
 801fe5c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fe60:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fe64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe68:	fb0a fb0b 	mul.w	fp, sl, fp
 801fe6c:	fb0a fa05 	mul.w	sl, sl, r5
 801fe70:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801fe74:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801fe78:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801fe7c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fe80:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801fe84:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fe88:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801fe8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe90:	0a36      	lsrs	r6, r6, #8
 801fe92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fe96:	44dc      	add	ip, fp
 801fe98:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fe9c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fea0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fea4:	fb09 fb0b 	mul.w	fp, r9, fp
 801fea8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801feac:	fb09 f904 	mul.w	r9, r9, r4
 801feb0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801feb4:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801feb8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801febc:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801fec0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fec4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fec8:	fb0c fc07 	mul.w	ip, ip, r7
 801fecc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801fed0:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801fed4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fed8:	445d      	add	r5, fp
 801feda:	fb08 f404 	mul.w	r4, r8, r4
 801fede:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fee2:	fb08 f800 	mul.w	r8, r8, r0
 801fee6:	0a2d      	lsrs	r5, r5, #8
 801fee8:	0a20      	lsrs	r0, r4, #8
 801feea:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801feee:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fef2:	fb07 f70a 	mul.w	r7, r7, sl
 801fef6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fefa:	4404      	add	r4, r0
 801fefc:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801ff00:	0a24      	lsrs	r4, r4, #8
 801ff02:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801ff06:	9801      	ldr	r0, [sp, #4]
 801ff08:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ff0c:	fb03 cc00 	mla	ip, r3, r0, ip
 801ff10:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ff14:	fb00 7606 	mla	r6, r0, r6, r7
 801ff18:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801ff1c:	fb04 cc0e 	mla	ip, r4, lr, ip
 801ff20:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801ff24:	b280      	uxth	r0, r0
 801ff26:	9c04      	ldr	r4, [sp, #16]
 801ff28:	fb05 cc02 	mla	ip, r5, r2, ip
 801ff2c:	fb0e 6e08 	mla	lr, lr, r8, r6
 801ff30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff34:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801ff38:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801ff3c:	fb02 ec0c 	mla	ip, r2, ip, lr
 801ff40:	9a05      	ldr	r2, [sp, #20]
 801ff42:	4342      	muls	r2, r0
 801ff44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff48:	1c53      	adds	r3, r2, #1
 801ff4a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ff4e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ff52:	ea45 0c0c 	orr.w	ip, r5, ip
 801ff56:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801ff5a:	fa5f f28c 	uxtb.w	r2, ip
 801ff5e:	b2db      	uxtb	r3, r3
 801ff60:	fb14 f403 	smulbb	r4, r4, r3
 801ff64:	fb02 4200 	mla	r2, r2, r0, r4
 801ff68:	b292      	uxth	r2, r2
 801ff6a:	1c54      	adds	r4, r2, #1
 801ff6c:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801ff70:	9c03      	ldr	r4, [sp, #12]
 801ff72:	fb14 f403 	smulbb	r4, r4, r3
 801ff76:	1212      	asrs	r2, r2, #8
 801ff78:	700a      	strb	r2, [r1, #0]
 801ff7a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801ff7e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ff82:	fb02 4200 	mla	r2, r2, r0, r4
 801ff86:	b292      	uxth	r2, r2
 801ff88:	1c54      	adds	r4, r2, #1
 801ff8a:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801ff8e:	1212      	asrs	r2, r2, #8
 801ff90:	704a      	strb	r2, [r1, #1]
 801ff92:	9a02      	ldr	r2, [sp, #8]
 801ff94:	fb12 f303 	smulbb	r3, r2, r3
 801ff98:	fb0c 3c00 	mla	ip, ip, r0, r3
 801ff9c:	fa1f fc8c 	uxth.w	ip, ip
 801ffa0:	f10c 0301 	add.w	r3, ip, #1
 801ffa4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ffa8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ffac:	f881 c002 	strb.w	ip, [r1, #2]
 801ffb0:	b007      	add	sp, #28
 801ffb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffb6:	bf00      	nop
 801ffb8:	0802aff1 	.word	0x0802aff1
 801ffbc:	0802b4e6 	.word	0x0802b4e6
 801ffc0:	0802b0ba 	.word	0x0802b0ba

0801ffc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ffc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffc8:	ed2d 8b08 	vpush	{d8-d11}
 801ffcc:	b09b      	sub	sp, #108	; 0x6c
 801ffce:	eeb0 aa40 	vmov.f32	s20, s0
 801ffd2:	eef0 9a60 	vmov.f32	s19, s1
 801ffd6:	930a      	str	r3, [sp, #40]	; 0x28
 801ffd8:	eeb0 9a41 	vmov.f32	s18, s2
 801ffdc:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801ffe0:	eeb0 8a62 	vmov.f32	s16, s5
 801ffe4:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801ffe6:	eef0 8a43 	vmov.f32	s17, s6
 801ffea:	9312      	str	r3, [sp, #72]	; 0x48
 801ffec:	eef0 ba44 	vmov.f32	s23, s8
 801fff0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801fff4:	eeb0 ba64 	vmov.f32	s22, s9
 801fff8:	9019      	str	r0, [sp, #100]	; 0x64
 801fffa:	eef0 aa45 	vmov.f32	s21, s10
 801fffe:	9114      	str	r1, [sp, #80]	; 0x50
 8020000:	9317      	str	r3, [sp, #92]	; 0x5c
 8020002:	6868      	ldr	r0, [r5, #4]
 8020004:	9218      	str	r2, [sp, #96]	; 0x60
 8020006:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020008:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 802000c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8020010:	fb00 1303 	mla	r3, r0, r3, r1
 8020014:	6829      	ldr	r1, [r5, #0]
 8020016:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802001a:	18cb      	adds	r3, r1, r3
 802001c:	930d      	str	r3, [sp, #52]	; 0x34
 802001e:	6813      	ldr	r3, [r2, #0]
 8020020:	9313      	str	r3, [sp, #76]	; 0x4c
 8020022:	6853      	ldr	r3, [r2, #4]
 8020024:	3304      	adds	r3, #4
 8020026:	9309      	str	r3, [sp, #36]	; 0x24
 8020028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802002a:	2b00      	cmp	r3, #0
 802002c:	dc03      	bgt.n	8020036 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802002e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020030:	2b00      	cmp	r3, #0
 8020032:	f340 8352 	ble.w	80206da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8020036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020038:	2b00      	cmp	r3, #0
 802003a:	f340 81a2 	ble.w	8020382 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 802003e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020040:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020042:	1412      	asrs	r2, r2, #16
 8020044:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020048:	d431      	bmi.n	80200ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 802004a:	1c51      	adds	r1, r2, #1
 802004c:	428c      	cmp	r4, r1
 802004e:	dd31      	ble.n	80200b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020050:	2b00      	cmp	r3, #0
 8020052:	db2f      	blt.n	80200b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020054:	1c59      	adds	r1, r3, #1
 8020056:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020058:	4288      	cmp	r0, r1
 802005a:	dd2b      	ble.n	80200b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 802005c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802005e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020060:	3b01      	subs	r3, #1
 8020062:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8020064:	fb02 1203 	mla	r2, r2, r3, r1
 8020068:	1412      	asrs	r2, r2, #16
 802006a:	d42d      	bmi.n	80200c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802006c:	3201      	adds	r2, #1
 802006e:	4294      	cmp	r4, r2
 8020070:	dd2a      	ble.n	80200c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020072:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020074:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8020076:	fb02 1303 	mla	r3, r2, r3, r1
 802007a:	141b      	asrs	r3, r3, #16
 802007c:	d424      	bmi.n	80200c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802007e:	3301      	adds	r3, #1
 8020080:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020082:	429a      	cmp	r2, r3
 8020084:	dd20      	ble.n	80200c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020088:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 802008c:	f103 0e03 	add.w	lr, r3, #3
 8020090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020092:	9315      	str	r3, [sp, #84]	; 0x54
 8020094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020096:	2b00      	cmp	r3, #0
 8020098:	f300 81de 	bgt.w	8020458 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 802009c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802009e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80200a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80200a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80200a8:	441a      	add	r2, r3
 80200aa:	920d      	str	r2, [sp, #52]	; 0x34
 80200ac:	e16b      	b.n	8020386 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 80200ae:	1c51      	adds	r1, r2, #1
 80200b0:	f040 8158 	bne.w	8020364 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80200b4:	42a2      	cmp	r2, r4
 80200b6:	f280 8155 	bge.w	8020364 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80200ba:	1c5a      	adds	r2, r3, #1
 80200bc:	f2c0 8152 	blt.w	8020364 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80200c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80200c2:	4293      	cmp	r3, r2
 80200c4:	f280 814e 	bge.w	8020364 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80200c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80200ca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80200cc:	9316      	str	r3, [sp, #88]	; 0x58
 80200ce:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 80200d2:	9315      	str	r3, [sp, #84]	; 0x54
 80200d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	dde0      	ble.n	802009c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80200da:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80200dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80200de:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80200e2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80200e4:	141b      	asrs	r3, r3, #16
 80200e6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80200ea:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80200ec:	1412      	asrs	r2, r2, #16
 80200ee:	f100 819a 	bmi.w	8020426 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 80200f2:	1c55      	adds	r5, r2, #1
 80200f4:	42ac      	cmp	r4, r5
 80200f6:	f340 8198 	ble.w	802042a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	f2c0 8195 	blt.w	802042a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8020100:	1c5d      	adds	r5, r3, #1
 8020102:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8020104:	42af      	cmp	r7, r5
 8020106:	f340 8190 	ble.w	802042a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802010a:	fb03 2304 	mla	r3, r3, r4, r2
 802010e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020110:	18d5      	adds	r5, r2, r3
 8020112:	5cd3      	ldrb	r3, [r2, r3]
 8020114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802011a:	0e1f      	lsrs	r7, r3, #24
 802011c:	2800      	cmp	r0, #0
 802011e:	f000 8171 	beq.w	8020404 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8020122:	f895 c001 	ldrb.w	ip, [r5, #1]
 8020126:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802012a:	920e      	str	r2, [sp, #56]	; 0x38
 802012c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020130:	2900      	cmp	r1, #0
 8020132:	f000 8172 	beq.w	802041a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8020136:	eb05 0c04 	add.w	ip, r5, r4
 802013a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802013c:	5d2d      	ldrb	r5, [r5, r4]
 802013e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8020142:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020146:	950b      	str	r5, [sp, #44]	; 0x2c
 8020148:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802014c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802014e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020152:	0e15      	lsrs	r5, r2, #24
 8020154:	920f      	str	r2, [sp, #60]	; 0x3c
 8020156:	b280      	uxth	r0, r0
 8020158:	b289      	uxth	r1, r1
 802015a:	fb00 fa01 	mul.w	sl, r0, r1
 802015e:	0100      	lsls	r0, r0, #4
 8020160:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8020164:	eba0 080a 	sub.w	r8, r0, sl
 8020168:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 802016c:	b289      	uxth	r1, r1
 802016e:	fa1f f888 	uxth.w	r8, r8
 8020172:	1a52      	subs	r2, r2, r1
 8020174:	fb08 f00e 	mul.w	r0, r8, lr
 8020178:	b292      	uxth	r2, r2
 802017a:	fb02 0007 	mla	r0, r2, r7, r0
 802017e:	fb01 0009 	mla	r0, r1, r9, r0
 8020182:	fb0a 0005 	mla	r0, sl, r5, r0
 8020186:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802018a:	2800      	cmp	r0, #0
 802018c:	f000 80dd 	beq.w	802034a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020190:	2fff      	cmp	r7, #255	; 0xff
 8020192:	d01a      	beq.n	80201ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020194:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020198:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802019c:	fb07 fc0c 	mul.w	ip, r7, ip
 80201a0:	435f      	muls	r7, r3
 80201a2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80201a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80201aa:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80201ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80201b2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80201b6:	4463      	add	r3, ip
 80201b8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80201bc:	0a1b      	lsrs	r3, r3, #8
 80201be:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80201c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80201c6:	ea43 030b 	orr.w	r3, r3, fp
 80201ca:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80201ce:	d01e      	beq.n	802020e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 80201d0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80201d2:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80201d6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80201da:	fb0e fb0b 	mul.w	fp, lr, fp
 80201de:	fb0e fe07 	mul.w	lr, lr, r7
 80201e2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80201e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80201ea:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80201ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80201f2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80201f6:	44dc      	add	ip, fp
 80201f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80201fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020200:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020204:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020208:	ea4c 070e 	orr.w	r7, ip, lr
 802020c:	970e      	str	r7, [sp, #56]	; 0x38
 802020e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020212:	d01e      	beq.n	8020252 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8020214:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020216:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802021a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802021e:	fb09 fe0e 	mul.w	lr, r9, lr
 8020222:	fb09 f907 	mul.w	r9, r9, r7
 8020226:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802022a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802022e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8020232:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020236:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802023a:	44f4      	add	ip, lr
 802023c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020240:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020244:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020248:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802024c:	ea4c 0709 	orr.w	r7, ip, r9
 8020250:	970b      	str	r7, [sp, #44]	; 0x2c
 8020252:	2dff      	cmp	r5, #255	; 0xff
 8020254:	d01c      	beq.n	8020290 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8020256:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020258:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802025c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020260:	fb05 fe0e 	mul.w	lr, r5, lr
 8020264:	437d      	muls	r5, r7
 8020266:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802026a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802026e:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8020272:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020276:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802027a:	44f4      	add	ip, lr
 802027c:	0a2d      	lsrs	r5, r5, #8
 802027e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020282:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020286:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802028a:	ea4c 0505 	orr.w	r5, ip, r5
 802028e:	950f      	str	r5, [sp, #60]	; 0x3c
 8020290:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020292:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020296:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802029a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802029e:	fb08 f505 	mul.w	r5, r8, r5
 80202a2:	fb02 5507 	mla	r5, r2, r7, r5
 80202a6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80202a8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80202ac:	fb01 5507 	mla	r5, r1, r7, r5
 80202b0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80202b2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80202b6:	fb0a 5507 	mla	r5, sl, r7, r5
 80202ba:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80202bc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80202c0:	0a2d      	lsrs	r5, r5, #8
 80202c2:	fb08 f807 	mul.w	r8, r8, r7
 80202c6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80202ca:	fb02 8303 	mla	r3, r2, r3, r8
 80202ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80202d0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80202d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80202d6:	fb01 330c 	mla	r3, r1, ip, r3
 80202da:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80202de:	fb0a 3a01 	mla	sl, sl, r1, r3
 80202e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80202e4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80202e6:	4343      	muls	r3, r0
 80202e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80202ec:	1c58      	adds	r0, r3, #1
 80202ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80202f2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80202f6:	ea45 050a 	orr.w	r5, r5, sl
 80202fa:	7833      	ldrb	r3, [r6, #0]
 80202fc:	b2ea      	uxtb	r2, r5
 80202fe:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020302:	fb12 f201 	smulbb	r2, r2, r1
 8020306:	b2c0      	uxtb	r0, r0
 8020308:	fb03 2300 	mla	r3, r3, r0, r2
 802030c:	b29b      	uxth	r3, r3
 802030e:	1c5a      	adds	r2, r3, #1
 8020310:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020314:	7872      	ldrb	r2, [r6, #1]
 8020316:	fb12 f200 	smulbb	r2, r2, r0
 802031a:	121b      	asrs	r3, r3, #8
 802031c:	7033      	strb	r3, [r6, #0]
 802031e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8020322:	0c2d      	lsrs	r5, r5, #16
 8020324:	fb03 2301 	mla	r3, r3, r1, r2
 8020328:	b29b      	uxth	r3, r3
 802032a:	1c5a      	adds	r2, r3, #1
 802032c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020330:	121b      	asrs	r3, r3, #8
 8020332:	7073      	strb	r3, [r6, #1]
 8020334:	78b3      	ldrb	r3, [r6, #2]
 8020336:	fb13 f000 	smulbb	r0, r3, r0
 802033a:	fb05 0501 	mla	r5, r5, r1, r0
 802033e:	b2ad      	uxth	r5, r5
 8020340:	1c6b      	adds	r3, r5, #1
 8020342:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020346:	122d      	asrs	r5, r5, #8
 8020348:	70b5      	strb	r5, [r6, #2]
 802034a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802034c:	3603      	adds	r6, #3
 802034e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020350:	4413      	add	r3, r2
 8020352:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020354:	932d      	str	r3, [sp, #180]	; 0xb4
 8020356:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020358:	4413      	add	r3, r2
 802035a:	932e      	str	r3, [sp, #184]	; 0xb8
 802035c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802035e:	3b01      	subs	r3, #1
 8020360:	9316      	str	r3, [sp, #88]	; 0x58
 8020362:	e6b7      	b.n	80200d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020364:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020366:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020368:	4413      	add	r3, r2
 802036a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802036c:	932d      	str	r3, [sp, #180]	; 0xb4
 802036e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020370:	4413      	add	r3, r2
 8020372:	932e      	str	r3, [sp, #184]	; 0xb8
 8020374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020376:	3b01      	subs	r3, #1
 8020378:	930a      	str	r3, [sp, #40]	; 0x28
 802037a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802037c:	3303      	adds	r3, #3
 802037e:	930d      	str	r3, [sp, #52]	; 0x34
 8020380:	e659      	b.n	8020036 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020382:	f47f ae6b 	bne.w	802005c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8020386:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020388:	2b00      	cmp	r3, #0
 802038a:	f340 81a6 	ble.w	80206da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 802038e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020392:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020394:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020398:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802039c:	eef0 6a48 	vmov.f32	s13, s16
 80203a0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80203a4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80203a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203ac:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80203b0:	eef0 6a68 	vmov.f32	s13, s17
 80203b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203b8:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80203bc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80203c0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80203c4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80203c8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80203cc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80203d0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80203d4:	ee18 2a10 	vmov	r2, s16
 80203d8:	eeb0 8a47 	vmov.f32	s16, s14
 80203dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80203e0:	ee18 2a90 	vmov	r2, s17
 80203e4:	932f      	str	r3, [sp, #188]	; 0xbc
 80203e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80203e8:	eef0 8a67 	vmov.f32	s17, s15
 80203ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80203f0:	9330      	str	r3, [sp, #192]	; 0xc0
 80203f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80203f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80203f6:	3b01      	subs	r3, #1
 80203f8:	9314      	str	r3, [sp, #80]	; 0x50
 80203fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80203fc:	bf08      	it	eq
 80203fe:	4613      	moveq	r3, r2
 8020400:	930a      	str	r3, [sp, #40]	; 0x28
 8020402:	e611      	b.n	8020028 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020404:	b161      	cbz	r1, 8020420 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8020406:	5d2a      	ldrb	r2, [r5, r4]
 8020408:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802040a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802040e:	25ff      	movs	r5, #255	; 0xff
 8020410:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020414:	920b      	str	r2, [sp, #44]	; 0x2c
 8020416:	46ae      	mov	lr, r5
 8020418:	e69d      	b.n	8020156 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 802041a:	25ff      	movs	r5, #255	; 0xff
 802041c:	46a9      	mov	r9, r5
 802041e:	e69a      	b.n	8020156 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8020420:	25ff      	movs	r5, #255	; 0xff
 8020422:	46a9      	mov	r9, r5
 8020424:	e7f7      	b.n	8020416 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8020426:	1c57      	adds	r7, r2, #1
 8020428:	d18f      	bne.n	802034a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802042a:	4294      	cmp	r4, r2
 802042c:	dd8d      	ble.n	802034a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802042e:	1c5d      	adds	r5, r3, #1
 8020430:	db8b      	blt.n	802034a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020432:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020434:	429d      	cmp	r5, r3
 8020436:	dd88      	ble.n	802034a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020438:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802043a:	9202      	str	r2, [sp, #8]
 802043c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802043e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8020442:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020444:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020446:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802044a:	e9cd 4300 	strd	r4, r3, [sp]
 802044e:	4631      	mov	r1, r6
 8020450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020452:	f7ff fc63 	bl	801fd1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8020456:	e778      	b.n	802034a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020458:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802045a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802045c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020460:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020462:	1412      	asrs	r2, r2, #16
 8020464:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020468:	141b      	asrs	r3, r3, #16
 802046a:	fb04 2303 	mla	r3, r4, r3, r2
 802046e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020470:	18d5      	adds	r5, r2, r3
 8020472:	5cd3      	ldrb	r3, [r2, r3]
 8020474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802047a:	0e1e      	lsrs	r6, r3, #24
 802047c:	2900      	cmp	r1, #0
 802047e:	f000 811b 	beq.w	80206b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 8020482:	786a      	ldrb	r2, [r5, #1]
 8020484:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020486:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802048a:	9210      	str	r2, [sp, #64]	; 0x40
 802048c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8020490:	2800      	cmp	r0, #0
 8020492:	f000 811c 	beq.w	80206ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 8020496:	192a      	adds	r2, r5, r4
 8020498:	5d2d      	ldrb	r5, [r5, r4]
 802049a:	7852      	ldrb	r2, [r2, #1]
 802049c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80204a0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80204a4:	950c      	str	r5, [sp, #48]	; 0x30
 80204a6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80204aa:	0e15      	lsrs	r5, r2, #24
 80204ac:	9211      	str	r2, [sp, #68]	; 0x44
 80204ae:	b289      	uxth	r1, r1
 80204b0:	b280      	uxth	r0, r0
 80204b2:	fb01 fa00 	mul.w	sl, r1, r0
 80204b6:	0109      	lsls	r1, r1, #4
 80204b8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80204bc:	eba1 080a 	sub.w	r8, r1, sl
 80204c0:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80204c4:	b280      	uxth	r0, r0
 80204c6:	fa1f f888 	uxth.w	r8, r8
 80204ca:	1a12      	subs	r2, r2, r0
 80204cc:	fb08 f10c 	mul.w	r1, r8, ip
 80204d0:	b292      	uxth	r2, r2
 80204d2:	fb02 1106 	mla	r1, r2, r6, r1
 80204d6:	fb00 1109 	mla	r1, r0, r9, r1
 80204da:	fb0a 1105 	mla	r1, sl, r5, r1
 80204de:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80204e2:	2900      	cmp	r1, #0
 80204e4:	f000 80da 	beq.w	802069c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 80204e8:	2eff      	cmp	r6, #255	; 0xff
 80204ea:	d016      	beq.n	802051a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 80204ec:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80204f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80204f4:	4377      	muls	r7, r6
 80204f6:	435e      	muls	r6, r3
 80204f8:	0a3b      	lsrs	r3, r7, #8
 80204fa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80204fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020502:	443b      	add	r3, r7
 8020504:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020508:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802050c:	0a1b      	lsrs	r3, r3, #8
 802050e:	0a3f      	lsrs	r7, r7, #8
 8020510:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020514:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020518:	433b      	orrs	r3, r7
 802051a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802051e:	d01d      	beq.n	802055c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8020520:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020522:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020524:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020528:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802052c:	fb0c f606 	mul.w	r6, ip, r6
 8020530:	fb0c fc07 	mul.w	ip, ip, r7
 8020534:	0a37      	lsrs	r7, r6, #8
 8020536:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802053a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802053e:	4437      	add	r7, r6
 8020540:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8020544:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8020548:	0a3f      	lsrs	r7, r7, #8
 802054a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802054e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020552:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020556:	ea47 060c 	orr.w	r6, r7, ip
 802055a:	9610      	str	r6, [sp, #64]	; 0x40
 802055c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020560:	d01d      	beq.n	802059e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8020562:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020564:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020568:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802056c:	fb09 fc0c 	mul.w	ip, r9, ip
 8020570:	fb09 f906 	mul.w	r9, r9, r6
 8020574:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8020578:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802057c:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8020580:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020584:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020588:	4467      	add	r7, ip
 802058a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802058e:	0a3f      	lsrs	r7, r7, #8
 8020590:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020594:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020598:	ea47 0609 	orr.w	r6, r7, r9
 802059c:	960c      	str	r6, [sp, #48]	; 0x30
 802059e:	2dff      	cmp	r5, #255	; 0xff
 80205a0:	d01a      	beq.n	80205d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 80205a2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80205a4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80205a8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80205ac:	fb05 fc0c 	mul.w	ip, r5, ip
 80205b0:	4375      	muls	r5, r6
 80205b2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80205b6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80205ba:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80205be:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80205c2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80205c6:	4467      	add	r7, ip
 80205c8:	0a2d      	lsrs	r5, r5, #8
 80205ca:	0a3f      	lsrs	r7, r7, #8
 80205cc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80205d0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80205d4:	433d      	orrs	r5, r7
 80205d6:	9511      	str	r5, [sp, #68]	; 0x44
 80205d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80205da:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80205de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80205e2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80205e6:	fb08 f505 	mul.w	r5, r8, r5
 80205ea:	fb02 5506 	mla	r5, r2, r6, r5
 80205ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80205f0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80205f4:	fb00 5506 	mla	r5, r0, r6, r5
 80205f8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80205fa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80205fe:	fb0a 5506 	mla	r5, sl, r6, r5
 8020602:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020604:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020608:	0a2d      	lsrs	r5, r5, #8
 802060a:	fb08 f806 	mul.w	r8, r8, r6
 802060e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020612:	fb02 8303 	mla	r3, r2, r3, r8
 8020616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020618:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802061c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802061e:	fb00 3307 	mla	r3, r0, r7, r3
 8020622:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020626:	fb0a 3c0c 	mla	ip, sl, ip, r3
 802062a:	fb01 f30b 	mul.w	r3, r1, fp
 802062e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020632:	1c59      	adds	r1, r3, #1
 8020634:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020638:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802063c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020640:	ea45 050c 	orr.w	r5, r5, ip
 8020644:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020648:	b2ea      	uxtb	r2, r5
 802064a:	b2c9      	uxtb	r1, r1
 802064c:	fb12 f20b 	smulbb	r2, r2, fp
 8020650:	fb03 2301 	mla	r3, r3, r1, r2
 8020654:	b29b      	uxth	r3, r3
 8020656:	1c5a      	adds	r2, r3, #1
 8020658:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802065c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020660:	fb12 f201 	smulbb	r2, r2, r1
 8020664:	121b      	asrs	r3, r3, #8
 8020666:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802066a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802066e:	0c2d      	lsrs	r5, r5, #16
 8020670:	fb03 230b 	mla	r3, r3, fp, r2
 8020674:	b29b      	uxth	r3, r3
 8020676:	1c5a      	adds	r2, r3, #1
 8020678:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802067c:	121b      	asrs	r3, r3, #8
 802067e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020682:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020686:	fb13 f101 	smulbb	r1, r3, r1
 802068a:	fb05 150b 	mla	r5, r5, fp, r1
 802068e:	b2ad      	uxth	r5, r5
 8020690:	1c69      	adds	r1, r5, #1
 8020692:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8020696:	122d      	asrs	r5, r5, #8
 8020698:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802069c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802069e:	f10e 0e03 	add.w	lr, lr, #3
 80206a2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80206a4:	4413      	add	r3, r2
 80206a6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80206a8:	932d      	str	r3, [sp, #180]	; 0xb4
 80206aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80206ac:	4413      	add	r3, r2
 80206ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80206b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80206b2:	3b01      	subs	r3, #1
 80206b4:	9315      	str	r3, [sp, #84]	; 0x54
 80206b6:	e4ed      	b.n	8020094 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80206b8:	b160      	cbz	r0, 80206d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80206ba:	5d2a      	ldrb	r2, [r5, r4]
 80206bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80206be:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80206c2:	25ff      	movs	r5, #255	; 0xff
 80206c4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80206c8:	920c      	str	r2, [sp, #48]	; 0x30
 80206ca:	46ac      	mov	ip, r5
 80206cc:	e6ef      	b.n	80204ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80206ce:	25ff      	movs	r5, #255	; 0xff
 80206d0:	46a9      	mov	r9, r5
 80206d2:	e6ec      	b.n	80204ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80206d4:	25ff      	movs	r5, #255	; 0xff
 80206d6:	46a9      	mov	r9, r5
 80206d8:	e7f7      	b.n	80206ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 80206da:	b01b      	add	sp, #108	; 0x6c
 80206dc:	ecbd 8b08 	vpop	{d8-d11}
 80206e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080206e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80206e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206e8:	b085      	sub	sp, #20
 80206ea:	7888      	ldrb	r0, [r1, #2]
 80206ec:	4692      	mov	sl, r2
 80206ee:	4698      	mov	r8, r3
 80206f0:	9000      	str	r0, [sp, #0]
 80206f2:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80206f6:	7848      	ldrb	r0, [r1, #1]
 80206f8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80206fc:	9001      	str	r0, [sp, #4]
 80206fe:	7808      	ldrb	r0, [r1, #0]
 8020700:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8020704:	9002      	str	r0, [sp, #8]
 8020706:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802070a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802070e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8020712:	fb04 560c 	mla	r6, r4, ip, r5
 8020716:	2c00      	cmp	r4, #0
 8020718:	eb02 0e06 	add.w	lr, r2, r6
 802071c:	9a00      	ldr	r2, [sp, #0]
 802071e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8020722:	9a01      	ldr	r2, [sp, #4]
 8020724:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8020728:	db3e      	blt.n	80207a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802072a:	45a1      	cmp	r9, r4
 802072c:	dd3c      	ble.n	80207a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802072e:	2d00      	cmp	r5, #0
 8020730:	db38      	blt.n	80207a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020732:	45ac      	cmp	ip, r5
 8020734:	dd36      	ble.n	80207a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020736:	f81a 2006 	ldrb.w	r2, [sl, r6]
 802073a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 802073e:	1c6e      	adds	r6, r5, #1
 8020740:	d435      	bmi.n	80207ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020742:	45b4      	cmp	ip, r6
 8020744:	dd33      	ble.n	80207ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020746:	b393      	cbz	r3, 80207ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020748:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802074c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8020750:	3401      	adds	r4, #1
 8020752:	d430      	bmi.n	80207b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020754:	45a1      	cmp	r9, r4
 8020756:	dd2e      	ble.n	80207b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020758:	b36f      	cbz	r7, 80207b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802075a:	2d00      	cmp	r5, #0
 802075c:	db29      	blt.n	80207b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802075e:	45ac      	cmp	ip, r5
 8020760:	dd27      	ble.n	80207b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8020762:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8020766:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 802076a:	3501      	adds	r5, #1
 802076c:	d407      	bmi.n	802077e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802076e:	45ac      	cmp	ip, r5
 8020770:	dd05      	ble.n	802077e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020772:	b123      	cbz	r3, 802077e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020774:	44f4      	add	ip, lr
 8020776:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802077a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 802077e:	2b0f      	cmp	r3, #15
 8020780:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020784:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020788:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802078c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020790:	d801      	bhi.n	8020796 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8020792:	2f0f      	cmp	r7, #15
 8020794:	d911      	bls.n	80207ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 8020796:	4b76      	ldr	r3, [pc, #472]	; (8020970 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8020798:	f240 11a5 	movw	r1, #421	; 0x1a5
 802079c:	4a75      	ldr	r2, [pc, #468]	; (8020974 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 802079e:	4876      	ldr	r0, [pc, #472]	; (8020978 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 80207a0:	f004 ff9e 	bl	80256e0 <__assert_func>
 80207a4:	4602      	mov	r2, r0
 80207a6:	e7ca      	b.n	802073e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 80207a8:	4606      	mov	r6, r0
 80207aa:	4602      	mov	r2, r0
 80207ac:	e7d0      	b.n	8020750 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80207ae:	4606      	mov	r6, r0
 80207b0:	e7ce      	b.n	8020750 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80207b2:	4604      	mov	r4, r0
 80207b4:	e7d9      	b.n	802076a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 80207b6:	4604      	mov	r4, r0
 80207b8:	e7e1      	b.n	802077e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80207ba:	b29b      	uxth	r3, r3
 80207bc:	b2bf      	uxth	r7, r7
 80207be:	fb07 fe03 	mul.w	lr, r7, r3
 80207c2:	011b      	lsls	r3, r3, #4
 80207c4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80207c8:	eba3 0c0e 	sub.w	ip, r3, lr
 80207cc:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80207d0:	b2bf      	uxth	r7, r7
 80207d2:	fa1f fc8c 	uxth.w	ip, ip
 80207d6:	1bed      	subs	r5, r5, r7
 80207d8:	fb0c f30a 	mul.w	r3, ip, sl
 80207dc:	b2ad      	uxth	r5, r5
 80207de:	fb05 330b 	mla	r3, r5, fp, r3
 80207e2:	fb07 3309 	mla	r3, r7, r9, r3
 80207e6:	fb0e 3308 	mla	r3, lr, r8, r3
 80207ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80207ee:	9303      	str	r3, [sp, #12]
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	f000 80b9 	beq.w	8020968 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 80207f6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80207fa:	d018      	beq.n	802082e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 80207fc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020800:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020804:	fb0b f303 	mul.w	r3, fp, r3
 8020808:	fb0b fb02 	mul.w	fp, fp, r2
 802080c:	0a1a      	lsrs	r2, r3, #8
 802080e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020812:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020816:	441a      	add	r2, r3
 8020818:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802081c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8020820:	0a12      	lsrs	r2, r2, #8
 8020822:	0a1b      	lsrs	r3, r3, #8
 8020824:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020828:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802082c:	431a      	orrs	r2, r3
 802082e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020832:	d019      	beq.n	8020868 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8020834:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020838:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802083c:	fb0a fb0b 	mul.w	fp, sl, fp
 8020840:	fb0a fa06 	mul.w	sl, sl, r6
 8020844:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020848:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802084c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8020850:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020854:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020858:	445e      	add	r6, fp
 802085a:	0a1b      	lsrs	r3, r3, #8
 802085c:	0a36      	lsrs	r6, r6, #8
 802085e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020862:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020866:	431e      	orrs	r6, r3
 8020868:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802086c:	d019      	beq.n	80208a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 802086e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020872:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020876:	fb09 fa0a 	mul.w	sl, r9, sl
 802087a:	fb09 f904 	mul.w	r9, r9, r4
 802087e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020882:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020886:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802088a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802088e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8020892:	4454      	add	r4, sl
 8020894:	0a1b      	lsrs	r3, r3, #8
 8020896:	0a24      	lsrs	r4, r4, #8
 8020898:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802089c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80208a0:	431c      	orrs	r4, r3
 80208a2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80208a6:	d019      	beq.n	80208dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 80208a8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80208ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80208b0:	fb08 f909 	mul.w	r9, r8, r9
 80208b4:	fb08 f800 	mul.w	r8, r8, r0
 80208b8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80208bc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80208c0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80208c4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80208c8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80208cc:	4448      	add	r0, r9
 80208ce:	0a1b      	lsrs	r3, r3, #8
 80208d0:	0a00      	lsrs	r0, r0, #8
 80208d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80208d6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80208da:	4318      	orrs	r0, r3
 80208dc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80208e0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80208e4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80208e8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80208ec:	fb0c f808 	mul.w	r8, ip, r8
 80208f0:	fb0c f606 	mul.w	r6, ip, r6
 80208f4:	fb05 8803 	mla	r8, r5, r3, r8
 80208f8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80208fc:	fb05 6202 	mla	r2, r5, r2, r6
 8020900:	fb07 8803 	mla	r8, r7, r3, r8
 8020904:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8020908:	fb0e 8303 	mla	r3, lr, r3, r8
 802090c:	0a1b      	lsrs	r3, r3, #8
 802090e:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8020912:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8020916:	9c02      	ldr	r4, [sp, #8]
 8020918:	fb07 2703 	mla	r7, r7, r3, r2
 802091c:	9a03      	ldr	r2, [sp, #12]
 802091e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020922:	43d2      	mvns	r2, r2
 8020924:	fb0e 7303 	mla	r3, lr, r3, r7
 8020928:	b2d2      	uxtb	r2, r2
 802092a:	0a1b      	lsrs	r3, r3, #8
 802092c:	4354      	muls	r4, r2
 802092e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020932:	1c60      	adds	r0, r4, #1
 8020934:	ea48 0303 	orr.w	r3, r8, r3
 8020938:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802093c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020940:	7008      	strb	r0, [r1, #0]
 8020942:	9801      	ldr	r0, [sp, #4]
 8020944:	4350      	muls	r0, r2
 8020946:	1c44      	adds	r4, r0, #1
 8020948:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 802094c:	0a18      	lsrs	r0, r3, #8
 802094e:	0c1b      	lsrs	r3, r3, #16
 8020950:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020954:	7048      	strb	r0, [r1, #1]
 8020956:	9800      	ldr	r0, [sp, #0]
 8020958:	4350      	muls	r0, r2
 802095a:	4602      	mov	r2, r0
 802095c:	3001      	adds	r0, #1
 802095e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020962:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020966:	708b      	strb	r3, [r1, #2]
 8020968:	b005      	add	sp, #20
 802096a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802096e:	bf00      	nop
 8020970:	0802aff1 	.word	0x0802aff1
 8020974:	0802b4e6 	.word	0x0802b4e6
 8020978:	0802b0ba 	.word	0x0802b0ba

0802097c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802097c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020980:	ed2d 8b08 	vpush	{d8-d11}
 8020984:	b097      	sub	sp, #92	; 0x5c
 8020986:	eeb0 aa40 	vmov.f32	s20, s0
 802098a:	eef0 9a60 	vmov.f32	s19, s1
 802098e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8020990:	eeb0 9a41 	vmov.f32	s18, s2
 8020994:	9308      	str	r3, [sp, #32]
 8020996:	eeb0 8a62 	vmov.f32	s16, s5
 802099a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802099e:	eef0 8a43 	vmov.f32	s17, s6
 80209a2:	9015      	str	r0, [sp, #84]	; 0x54
 80209a4:	eef0 ba44 	vmov.f32	s23, s8
 80209a8:	6868      	ldr	r0, [r5, #4]
 80209aa:	eeb0 ba64 	vmov.f32	s22, s9
 80209ae:	9112      	str	r1, [sp, #72]	; 0x48
 80209b0:	eef0 aa45 	vmov.f32	s21, s10
 80209b4:	9310      	str	r3, [sp, #64]	; 0x40
 80209b6:	9214      	str	r2, [sp, #80]	; 0x50
 80209b8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80209ba:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80209be:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80209c2:	fb00 1303 	mla	r3, r0, r3, r1
 80209c6:	6829      	ldr	r1, [r5, #0]
 80209c8:	6855      	ldr	r5, [r2, #4]
 80209ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80209ce:	3504      	adds	r5, #4
 80209d0:	18cb      	adds	r3, r1, r3
 80209d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80209d4:	6813      	ldr	r3, [r2, #0]
 80209d6:	9311      	str	r3, [sp, #68]	; 0x44
 80209d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80209da:	2b00      	cmp	r3, #0
 80209dc:	dc03      	bgt.n	80209e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80209de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	f340 8333 	ble.w	802104c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 80209e6:	9b08      	ldr	r3, [sp, #32]
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	f340 8190 	ble.w	8020d0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80209ee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80209f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80209f2:	1412      	asrs	r2, r2, #16
 80209f4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80209f8:	d42f      	bmi.n	8020a5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80209fa:	1c51      	adds	r1, r2, #1
 80209fc:	428c      	cmp	r4, r1
 80209fe:	dd2f      	ble.n	8020a60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020a00:	2b00      	cmp	r3, #0
 8020a02:	db2d      	blt.n	8020a60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020a04:	1c59      	adds	r1, r3, #1
 8020a06:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020a08:	4288      	cmp	r0, r1
 8020a0a:	dd29      	ble.n	8020a60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020a0c:	9b08      	ldr	r3, [sp, #32]
 8020a0e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020a10:	3b01      	subs	r3, #1
 8020a12:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020a14:	fb02 1203 	mla	r2, r2, r3, r1
 8020a18:	1412      	asrs	r2, r2, #16
 8020a1a:	d42b      	bmi.n	8020a74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020a1c:	3201      	adds	r2, #1
 8020a1e:	4294      	cmp	r4, r2
 8020a20:	dd28      	ble.n	8020a74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020a22:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020a24:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020a26:	fb02 1303 	mla	r3, r2, r3, r1
 8020a2a:	141b      	asrs	r3, r3, #16
 8020a2c:	d422      	bmi.n	8020a74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020a2e:	3301      	adds	r3, #1
 8020a30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020a32:	429a      	cmp	r2, r3
 8020a34:	dd1e      	ble.n	8020a74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a38:	f103 0803 	add.w	r8, r3, #3
 8020a3c:	9b08      	ldr	r3, [sp, #32]
 8020a3e:	9307      	str	r3, [sp, #28]
 8020a40:	9b07      	ldr	r3, [sp, #28]
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	f300 81ca 	bgt.w	8020ddc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8020a48:	9b08      	ldr	r3, [sp, #32]
 8020a4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020a4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020a50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a54:	441a      	add	r2, r3
 8020a56:	920b      	str	r2, [sp, #44]	; 0x2c
 8020a58:	e15b      	b.n	8020d12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8020a5a:	1c51      	adds	r1, r2, #1
 8020a5c:	f040 8148 	bne.w	8020cf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020a60:	42a2      	cmp	r2, r4
 8020a62:	f280 8145 	bge.w	8020cf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020a66:	1c5a      	adds	r2, r3, #1
 8020a68:	f2c0 8142 	blt.w	8020cf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020a6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020a6e:	4293      	cmp	r3, r2
 8020a70:	f280 813e 	bge.w	8020cf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020a74:	9b08      	ldr	r3, [sp, #32]
 8020a76:	9313      	str	r3, [sp, #76]	; 0x4c
 8020a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a7a:	9307      	str	r3, [sp, #28]
 8020a7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020a7e:	2b00      	cmp	r3, #0
 8020a80:	dde2      	ble.n	8020a48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8020a82:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020a84:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a86:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020a8a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020a8c:	141b      	asrs	r3, r3, #16
 8020a8e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020a92:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020a94:	1412      	asrs	r2, r2, #16
 8020a96:	f100 818b 	bmi.w	8020db0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8020a9a:	1c56      	adds	r6, r2, #1
 8020a9c:	42b4      	cmp	r4, r6
 8020a9e:	f340 8189 	ble.w	8020db4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020aa2:	2b00      	cmp	r3, #0
 8020aa4:	f2c0 8186 	blt.w	8020db4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020aa8:	1c5e      	adds	r6, r3, #1
 8020aaa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020aac:	42b7      	cmp	r7, r6
 8020aae:	f340 8181 	ble.w	8020db4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020ab2:	fb03 2304 	mla	r3, r3, r4, r2
 8020ab6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ab8:	18d6      	adds	r6, r2, r3
 8020aba:	5cd3      	ldrb	r3, [r2, r3]
 8020abc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020ac0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020ac4:	2900      	cmp	r1, #0
 8020ac6:	f000 8163 	beq.w	8020d90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8020aca:	7872      	ldrb	r2, [r6, #1]
 8020acc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020ad0:	920c      	str	r2, [sp, #48]	; 0x30
 8020ad2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020ad6:	2800      	cmp	r0, #0
 8020ad8:	f000 8164 	beq.w	8020da4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8020adc:	1932      	adds	r2, r6, r4
 8020ade:	5d36      	ldrb	r6, [r6, r4]
 8020ae0:	7852      	ldrb	r2, [r2, #1]
 8020ae2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020ae6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020aea:	9609      	str	r6, [sp, #36]	; 0x24
 8020aec:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020af0:	0e16      	lsrs	r6, r2, #24
 8020af2:	920d      	str	r2, [sp, #52]	; 0x34
 8020af4:	b289      	uxth	r1, r1
 8020af6:	b280      	uxth	r0, r0
 8020af8:	fb01 fb00 	mul.w	fp, r1, r0
 8020afc:	0109      	lsls	r1, r1, #4
 8020afe:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020b02:	eba1 090b 	sub.w	r9, r1, fp
 8020b06:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020b0a:	b280      	uxth	r0, r0
 8020b0c:	fa1f f989 	uxth.w	r9, r9
 8020b10:	1a12      	subs	r2, r2, r0
 8020b12:	fb09 f108 	mul.w	r1, r9, r8
 8020b16:	b292      	uxth	r2, r2
 8020b18:	fb02 110c 	mla	r1, r2, ip, r1
 8020b1c:	fb00 110a 	mla	r1, r0, sl, r1
 8020b20:	fb0b 1106 	mla	r1, fp, r6, r1
 8020b24:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020b28:	2900      	cmp	r1, #0
 8020b2a:	f000 80d2 	beq.w	8020cd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020b2e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020b32:	d01b      	beq.n	8020b6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8020b34:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020b38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020b3c:	fb0c fe0e 	mul.w	lr, ip, lr
 8020b40:	fb0c fc03 	mul.w	ip, ip, r3
 8020b44:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020b48:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020b4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020b50:	4473      	add	r3, lr
 8020b52:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020b56:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8020b5a:	0a1b      	lsrs	r3, r3, #8
 8020b5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020b60:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020b64:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020b68:	ea43 030e 	orr.w	r3, r3, lr
 8020b6c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020b70:	d01e      	beq.n	8020bb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8020b72:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020b74:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020b78:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8020b7c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020b80:	fb08 f80e 	mul.w	r8, r8, lr
 8020b84:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020b88:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020b8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b90:	44e6      	add	lr, ip
 8020b92:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8020b96:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8020b9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020b9e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020ba2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ba6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020baa:	ea4e 0708 	orr.w	r7, lr, r8
 8020bae:	970c      	str	r7, [sp, #48]	; 0x30
 8020bb0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020bb4:	d01e      	beq.n	8020bf4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020bb6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020bb8:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020bbc:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020bc0:	fb0a f808 	mul.w	r8, sl, r8
 8020bc4:	fb0a fa0c 	mul.w	sl, sl, ip
 8020bc8:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020bcc:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020bd0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020bd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020bd8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020bdc:	44c6      	add	lr, r8
 8020bde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020be2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020be6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020bea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020bee:	ea4e 070a 	orr.w	r7, lr, sl
 8020bf2:	9709      	str	r7, [sp, #36]	; 0x24
 8020bf4:	2eff      	cmp	r6, #255	; 0xff
 8020bf6:	d01d      	beq.n	8020c34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8020bf8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020bfa:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020bfe:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020c02:	fb06 f808 	mul.w	r8, r6, r8
 8020c06:	fb06 f60c 	mul.w	r6, r6, ip
 8020c0a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020c0e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020c12:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020c16:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c1a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020c1e:	44c6      	add	lr, r8
 8020c20:	0a36      	lsrs	r6, r6, #8
 8020c22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c26:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020c2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c2e:	ea4e 0606 	orr.w	r6, lr, r6
 8020c32:	960d      	str	r6, [sp, #52]	; 0x34
 8020c34:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020c36:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020c3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020c3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c40:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020c44:	43c9      	mvns	r1, r1
 8020c46:	fb09 f606 	mul.w	r6, r9, r6
 8020c4a:	b2c9      	uxtb	r1, r1
 8020c4c:	fb02 660c 	mla	r6, r2, ip, r6
 8020c50:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020c54:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020c56:	fb00 660c 	mla	r6, r0, ip, r6
 8020c5a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020c5e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020c60:	fb0b 660c 	mla	r6, fp, ip, r6
 8020c64:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020c68:	fb09 f90c 	mul.w	r9, r9, ip
 8020c6c:	0a36      	lsrs	r6, r6, #8
 8020c6e:	fb02 9303 	mla	r3, r2, r3, r9
 8020c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020c74:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020c78:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020c7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020c7e:	fb00 330e 	mla	r3, r0, lr, r3
 8020c82:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020c86:	fb0b 3b00 	mla	fp, fp, r0, r3
 8020c8a:	9b07      	ldr	r3, [sp, #28]
 8020c8c:	781b      	ldrb	r3, [r3, #0]
 8020c8e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020c92:	fb03 f201 	mul.w	r2, r3, r1
 8020c96:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020c9a:	1c53      	adds	r3, r2, #1
 8020c9c:	ea46 060b 	orr.w	r6, r6, fp
 8020ca0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020ca4:	9a07      	ldr	r2, [sp, #28]
 8020ca6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020caa:	7013      	strb	r3, [r2, #0]
 8020cac:	7853      	ldrb	r3, [r2, #1]
 8020cae:	434b      	muls	r3, r1
 8020cb0:	1c5a      	adds	r2, r3, #1
 8020cb2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020cb6:	0a33      	lsrs	r3, r6, #8
 8020cb8:	0c36      	lsrs	r6, r6, #16
 8020cba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020cbe:	9a07      	ldr	r2, [sp, #28]
 8020cc0:	7053      	strb	r3, [r2, #1]
 8020cc2:	7893      	ldrb	r3, [r2, #2]
 8020cc4:	4359      	muls	r1, r3
 8020cc6:	1c4b      	adds	r3, r1, #1
 8020cc8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020ccc:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8020cd0:	7096      	strb	r6, [r2, #2]
 8020cd2:	9b07      	ldr	r3, [sp, #28]
 8020cd4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020cd6:	3303      	adds	r3, #3
 8020cd8:	9307      	str	r3, [sp, #28]
 8020cda:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020cdc:	4413      	add	r3, r2
 8020cde:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020ce0:	9329      	str	r3, [sp, #164]	; 0xa4
 8020ce2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ce4:	4413      	add	r3, r2
 8020ce6:	932a      	str	r3, [sp, #168]	; 0xa8
 8020ce8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020cea:	3b01      	subs	r3, #1
 8020cec:	9313      	str	r3, [sp, #76]	; 0x4c
 8020cee:	e6c5      	b.n	8020a7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020cf0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020cf2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020cf4:	4413      	add	r3, r2
 8020cf6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020cf8:	9329      	str	r3, [sp, #164]	; 0xa4
 8020cfa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020cfc:	4413      	add	r3, r2
 8020cfe:	932a      	str	r3, [sp, #168]	; 0xa8
 8020d00:	9b08      	ldr	r3, [sp, #32]
 8020d02:	3b01      	subs	r3, #1
 8020d04:	9308      	str	r3, [sp, #32]
 8020d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d08:	3303      	adds	r3, #3
 8020d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8020d0c:	e66b      	b.n	80209e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020d0e:	f47f ae7d 	bne.w	8020a0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8020d12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	f340 8199 	ble.w	802104c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020d1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d20:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020d24:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020d28:	eef0 6a48 	vmov.f32	s13, s16
 8020d2c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020d30:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020d34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d38:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020d3c:	eef0 6a68 	vmov.f32	s13, s17
 8020d40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d44:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8020d48:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020d4c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020d50:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020d54:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020d58:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020d5c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020d60:	ee18 2a10 	vmov	r2, s16
 8020d64:	eeb0 8a47 	vmov.f32	s16, s14
 8020d68:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d6c:	ee18 2a90 	vmov	r2, s17
 8020d70:	932b      	str	r3, [sp, #172]	; 0xac
 8020d72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d74:	eef0 8a67 	vmov.f32	s17, s15
 8020d78:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d7c:	932c      	str	r3, [sp, #176]	; 0xb0
 8020d7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020d80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020d82:	3b01      	subs	r3, #1
 8020d84:	9312      	str	r3, [sp, #72]	; 0x48
 8020d86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d88:	bf08      	it	eq
 8020d8a:	4613      	moveq	r3, r2
 8020d8c:	9308      	str	r3, [sp, #32]
 8020d8e:	e623      	b.n	80209d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8020d90:	b158      	cbz	r0, 8020daa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020d92:	5d32      	ldrb	r2, [r6, r4]
 8020d94:	26ff      	movs	r6, #255	; 0xff
 8020d96:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020d9a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8020d9e:	9209      	str	r2, [sp, #36]	; 0x24
 8020da0:	46b0      	mov	r8, r6
 8020da2:	e6a7      	b.n	8020af4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020da4:	26ff      	movs	r6, #255	; 0xff
 8020da6:	46b2      	mov	sl, r6
 8020da8:	e6a4      	b.n	8020af4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020daa:	26ff      	movs	r6, #255	; 0xff
 8020dac:	46b2      	mov	sl, r6
 8020dae:	e7f7      	b.n	8020da0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8020db0:	1c57      	adds	r7, r2, #1
 8020db2:	d18e      	bne.n	8020cd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020db4:	4294      	cmp	r4, r2
 8020db6:	dd8c      	ble.n	8020cd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020db8:	1c5e      	adds	r6, r3, #1
 8020dba:	db8a      	blt.n	8020cd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020dbc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020dbe:	429e      	cmp	r6, r3
 8020dc0:	dd87      	ble.n	8020cd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020dc2:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8020dc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020dca:	e9cd 4600 	strd	r4, r6, [sp]
 8020dce:	462b      	mov	r3, r5
 8020dd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020dd2:	9907      	ldr	r1, [sp, #28]
 8020dd4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020dd6:	f7ff fc85 	bl	80206e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020dda:	e77a      	b.n	8020cd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ddc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020dde:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020de0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020de4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020de6:	1409      	asrs	r1, r1, #16
 8020de8:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020dec:	141b      	asrs	r3, r3, #16
 8020dee:	fb04 1303 	mla	r3, r4, r3, r1
 8020df2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020df4:	18ce      	adds	r6, r1, r3
 8020df6:	5ccb      	ldrb	r3, [r1, r3]
 8020df8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020dfc:	0e1f      	lsrs	r7, r3, #24
 8020dfe:	2a00      	cmp	r2, #0
 8020e00:	f000 8114 	beq.w	802102c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8020e04:	7871      	ldrb	r1, [r6, #1]
 8020e06:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020e0a:	910e      	str	r1, [sp, #56]	; 0x38
 8020e0c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020e10:	2800      	cmp	r0, #0
 8020e12:	f000 8115 	beq.w	8021040 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8020e16:	1931      	adds	r1, r6, r4
 8020e18:	5d36      	ldrb	r6, [r6, r4]
 8020e1a:	7849      	ldrb	r1, [r1, #1]
 8020e1c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020e20:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020e24:	960a      	str	r6, [sp, #40]	; 0x28
 8020e26:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020e2a:	0e0e      	lsrs	r6, r1, #24
 8020e2c:	910f      	str	r1, [sp, #60]	; 0x3c
 8020e2e:	b292      	uxth	r2, r2
 8020e30:	b280      	uxth	r0, r0
 8020e32:	fb02 fb00 	mul.w	fp, r2, r0
 8020e36:	0112      	lsls	r2, r2, #4
 8020e38:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020e3c:	eba2 090b 	sub.w	r9, r2, fp
 8020e40:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020e44:	b280      	uxth	r0, r0
 8020e46:	fa1f f989 	uxth.w	r9, r9
 8020e4a:	1a09      	subs	r1, r1, r0
 8020e4c:	fb09 f20e 	mul.w	r2, r9, lr
 8020e50:	b289      	uxth	r1, r1
 8020e52:	fb01 2207 	mla	r2, r1, r7, r2
 8020e56:	fb00 220a 	mla	r2, r0, sl, r2
 8020e5a:	fb0b 2206 	mla	r2, fp, r6, r2
 8020e5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020e62:	9213      	str	r2, [sp, #76]	; 0x4c
 8020e64:	2a00      	cmp	r2, #0
 8020e66:	f000 80d4 	beq.w	8021012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8020e6a:	2fff      	cmp	r7, #255	; 0xff
 8020e6c:	d01a      	beq.n	8020ea4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8020e6e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020e72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e76:	fb07 fc0c 	mul.w	ip, r7, ip
 8020e7a:	435f      	muls	r7, r3
 8020e7c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020e80:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020e84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e88:	4463      	add	r3, ip
 8020e8a:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8020e8e:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8020e92:	0a1b      	lsrs	r3, r3, #8
 8020e94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e98:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e9c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020ea0:	ea43 030c 	orr.w	r3, r3, ip
 8020ea4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020ea8:	d01f      	beq.n	8020eea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8020eaa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020eac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020eae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020eb2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020eb6:	fb0e f707 	mul.w	r7, lr, r7
 8020eba:	fb0e fe0c 	mul.w	lr, lr, ip
 8020ebe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020ec2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020ec6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020eca:	44bc      	add	ip, r7
 8020ecc:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8020ed0:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020ed4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ed8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020edc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ee0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020ee4:	ea4c 020e 	orr.w	r2, ip, lr
 8020ee8:	920e      	str	r2, [sp, #56]	; 0x38
 8020eea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020eee:	d01e      	beq.n	8020f2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8020ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020ef2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020ef6:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020efa:	fb0a fe0e 	mul.w	lr, sl, lr
 8020efe:	fb0a fa07 	mul.w	sl, sl, r7
 8020f02:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020f06:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020f0a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020f0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f12:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020f16:	44f4      	add	ip, lr
 8020f18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f28:	ea4c 020a 	orr.w	r2, ip, sl
 8020f2c:	920a      	str	r2, [sp, #40]	; 0x28
 8020f2e:	2eff      	cmp	r6, #255	; 0xff
 8020f30:	d01c      	beq.n	8020f6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8020f32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020f34:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020f38:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020f3c:	fb06 fe0e 	mul.w	lr, r6, lr
 8020f40:	437e      	muls	r6, r7
 8020f42:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020f46:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020f4a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020f4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f52:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8020f56:	44f4      	add	ip, lr
 8020f58:	0a36      	lsrs	r6, r6, #8
 8020f5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f5e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020f62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f66:	ea4c 0206 	orr.w	r2, ip, r6
 8020f6a:	920f      	str	r2, [sp, #60]	; 0x3c
 8020f6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020f6e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020f72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f76:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8020f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f7c:	fb09 f606 	mul.w	r6, r9, r6
 8020f80:	fb01 6607 	mla	r6, r1, r7, r6
 8020f84:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020f88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020f8a:	fb00 6607 	mla	r6, r0, r7, r6
 8020f8e:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020f92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020f94:	fb0b 6607 	mla	r6, fp, r7, r6
 8020f98:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f9e:	fb09 f907 	mul.w	r9, r9, r7
 8020fa2:	0a36      	lsrs	r6, r6, #8
 8020fa4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020fa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020faa:	fb01 9303 	mla	r3, r1, r3, r9
 8020fae:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020fb2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020fb6:	fb00 330c 	mla	r3, r0, ip, r3
 8020fba:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8020fbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020fc0:	43da      	mvns	r2, r3
 8020fc2:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8020fc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fca:	b2d2      	uxtb	r2, r2
 8020fcc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020fd0:	fb03 f102 	mul.w	r1, r3, r2
 8020fd4:	ea46 060e 	orr.w	r6, r6, lr
 8020fd8:	1c4b      	adds	r3, r1, #1
 8020fda:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020fde:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020fe2:	f808 3c03 	strb.w	r3, [r8, #-3]
 8020fe6:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8020fea:	4353      	muls	r3, r2
 8020fec:	1c59      	adds	r1, r3, #1
 8020fee:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020ff2:	0a33      	lsrs	r3, r6, #8
 8020ff4:	0c36      	lsrs	r6, r6, #16
 8020ff6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020ffa:	f808 3c02 	strb.w	r3, [r8, #-2]
 8020ffe:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021002:	435a      	muls	r2, r3
 8021004:	1c53      	adds	r3, r2, #1
 8021006:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802100a:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802100e:	f808 6c01 	strb.w	r6, [r8, #-1]
 8021012:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021014:	f108 0803 	add.w	r8, r8, #3
 8021018:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802101a:	4413      	add	r3, r2
 802101c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802101e:	9329      	str	r3, [sp, #164]	; 0xa4
 8021020:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021022:	4413      	add	r3, r2
 8021024:	932a      	str	r3, [sp, #168]	; 0xa8
 8021026:	9b07      	ldr	r3, [sp, #28]
 8021028:	3b01      	subs	r3, #1
 802102a:	e508      	b.n	8020a3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 802102c:	b158      	cbz	r0, 8021046 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802102e:	5d31      	ldrb	r1, [r6, r4]
 8021030:	26ff      	movs	r6, #255	; 0xff
 8021032:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8021036:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802103a:	910a      	str	r1, [sp, #40]	; 0x28
 802103c:	46b6      	mov	lr, r6
 802103e:	e6f6      	b.n	8020e2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021040:	26ff      	movs	r6, #255	; 0xff
 8021042:	46b2      	mov	sl, r6
 8021044:	e6f3      	b.n	8020e2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021046:	26ff      	movs	r6, #255	; 0xff
 8021048:	46b2      	mov	sl, r6
 802104a:	e7f7      	b.n	802103c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 802104c:	b017      	add	sp, #92	; 0x5c
 802104e:	ecbd 8b08 	vpop	{d8-d11}
 8021052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021058 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8021058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802105c:	b08d      	sub	sp, #52	; 0x34
 802105e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8021062:	9103      	str	r1, [sp, #12]
 8021064:	fb07 5803 	mla	r8, r7, r3, r5
 8021068:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 802106c:	9803      	ldr	r0, [sp, #12]
 802106e:	2f00      	cmp	r7, #0
 8021070:	910b      	str	r1, [sp, #44]	; 0x2c
 8021072:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021076:	9903      	ldr	r1, [sp, #12]
 8021078:	9c03      	ldr	r4, [sp, #12]
 802107a:	eb02 0608 	add.w	r6, r2, r8
 802107e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8021082:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8021086:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 802108a:	7809      	ldrb	r1, [r1, #0]
 802108c:	7840      	ldrb	r0, [r0, #1]
 802108e:	78a4      	ldrb	r4, [r4, #2]
 8021090:	db51      	blt.n	8021136 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021092:	45be      	cmp	lr, r7
 8021094:	dd4f      	ble.n	8021136 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021096:	2d00      	cmp	r5, #0
 8021098:	db49      	blt.n	802112e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802109a:	42ab      	cmp	r3, r5
 802109c:	dd47      	ble.n	802112e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802109e:	f812 2008 	ldrb.w	r2, [r2, r8]
 80210a2:	9204      	str	r2, [sp, #16]
 80210a4:	7872      	ldrb	r2, [r6, #1]
 80210a6:	9205      	str	r2, [sp, #20]
 80210a8:	78b2      	ldrb	r2, [r6, #2]
 80210aa:	9206      	str	r2, [sp, #24]
 80210ac:	1c6a      	adds	r2, r5, #1
 80210ae:	d449      	bmi.n	8021144 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80210b0:	4293      	cmp	r3, r2
 80210b2:	dd47      	ble.n	8021144 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80210b4:	f1bc 0f00 	cmp.w	ip, #0
 80210b8:	d044      	beq.n	8021144 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80210ba:	7972      	ldrb	r2, [r6, #5]
 80210bc:	f896 b003 	ldrb.w	fp, [r6, #3]
 80210c0:	f896 a004 	ldrb.w	sl, [r6, #4]
 80210c4:	9201      	str	r2, [sp, #4]
 80210c6:	3701      	adds	r7, #1
 80210c8:	d444      	bmi.n	8021154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80210ca:	45be      	cmp	lr, r7
 80210cc:	dd42      	ble.n	8021154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80210ce:	f1b9 0f00 	cmp.w	r9, #0
 80210d2:	f000 80c1 	beq.w	8021258 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80210d6:	2d00      	cmp	r5, #0
 80210d8:	db38      	blt.n	802114c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80210da:	42ab      	cmp	r3, r5
 80210dc:	dd36      	ble.n	802114c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80210de:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80210e2:	f816 8002 	ldrb.w	r8, [r6, r2]
 80210e6:	2203      	movs	r2, #3
 80210e8:	fb03 6702 	mla	r7, r3, r2, r6
 80210ec:	fb03 6202 	mla	r2, r3, r2, r6
 80210f0:	787f      	ldrb	r7, [r7, #1]
 80210f2:	f892 e002 	ldrb.w	lr, [r2, #2]
 80210f6:	9702      	str	r7, [sp, #8]
 80210f8:	3501      	adds	r5, #1
 80210fa:	d432      	bmi.n	8021162 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80210fc:	42ab      	cmp	r3, r5
 80210fe:	dd30      	ble.n	8021162 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8021100:	f1bc 0f00 	cmp.w	ip, #0
 8021104:	d031      	beq.n	802116a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8021106:	2703      	movs	r7, #3
 8021108:	fb13 7207 	smlabb	r2, r3, r7, r7
 802110c:	5cb5      	ldrb	r5, [r6, r2]
 802110e:	fb03 6207 	mla	r2, r3, r7, r6
 8021112:	fb03 6307 	mla	r3, r3, r7, r6
 8021116:	7912      	ldrb	r2, [r2, #4]
 8021118:	795e      	ldrb	r6, [r3, #5]
 802111a:	f1bc 0f0f 	cmp.w	ip, #15
 802111e:	d927      	bls.n	8021170 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8021120:	4b53      	ldr	r3, [pc, #332]	; (8021270 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8021122:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021126:	4a53      	ldr	r2, [pc, #332]	; (8021274 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8021128:	4853      	ldr	r0, [pc, #332]	; (8021278 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 802112a:	f004 fad9 	bl	80256e0 <__assert_func>
 802112e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8021132:	9104      	str	r1, [sp, #16]
 8021134:	e7ba      	b.n	80210ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8021136:	9401      	str	r4, [sp, #4]
 8021138:	4682      	mov	sl, r0
 802113a:	468b      	mov	fp, r1
 802113c:	9104      	str	r1, [sp, #16]
 802113e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8021142:	e7c0      	b.n	80210c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8021144:	9401      	str	r4, [sp, #4]
 8021146:	4682      	mov	sl, r0
 8021148:	468b      	mov	fp, r1
 802114a:	e7bc      	b.n	80210c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802114c:	46a6      	mov	lr, r4
 802114e:	9002      	str	r0, [sp, #8]
 8021150:	4688      	mov	r8, r1
 8021152:	e7d1      	b.n	80210f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8021154:	4626      	mov	r6, r4
 8021156:	4602      	mov	r2, r0
 8021158:	460d      	mov	r5, r1
 802115a:	46a6      	mov	lr, r4
 802115c:	9002      	str	r0, [sp, #8]
 802115e:	4688      	mov	r8, r1
 8021160:	e7db      	b.n	802111a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8021162:	4626      	mov	r6, r4
 8021164:	4602      	mov	r2, r0
 8021166:	460d      	mov	r5, r1
 8021168:	e7d7      	b.n	802111a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802116a:	4626      	mov	r6, r4
 802116c:	4602      	mov	r2, r0
 802116e:	460d      	mov	r5, r1
 8021170:	f1b9 0f0f 	cmp.w	r9, #15
 8021174:	d8d4      	bhi.n	8021120 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021176:	fa1f f38c 	uxth.w	r3, ip
 802117a:	fa1f fc89 	uxth.w	ip, r9
 802117e:	fb03 f70c 	mul.w	r7, r3, ip
 8021182:	011b      	lsls	r3, r3, #4
 8021184:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8021188:	9707      	str	r7, [sp, #28]
 802118a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802118e:	fa1f fc8c 	uxth.w	ip, ip
 8021192:	eba7 070c 	sub.w	r7, r7, ip
 8021196:	b2bf      	uxth	r7, r7
 8021198:	9709      	str	r7, [sp, #36]	; 0x24
 802119a:	9f07      	ldr	r7, [sp, #28]
 802119c:	1bdb      	subs	r3, r3, r7
 802119e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80211a2:	b29b      	uxth	r3, r3
 80211a4:	9708      	str	r7, [sp, #32]
 80211a6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80211a8:	930a      	str	r3, [sp, #40]	; 0x28
 80211aa:	ea6f 0907 	mvn.w	r9, r7
 80211ae:	fb03 fb0b 	mul.w	fp, r3, fp
 80211b2:	9f04      	ldr	r7, [sp, #16]
 80211b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211b6:	fa5f f989 	uxtb.w	r9, r9
 80211ba:	fb03 bb07 	mla	fp, r3, r7, fp
 80211be:	9f07      	ldr	r7, [sp, #28]
 80211c0:	fb11 f109 	smulbb	r1, r1, r9
 80211c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211c6:	fb0c b808 	mla	r8, ip, r8, fp
 80211ca:	fb10 f009 	smulbb	r0, r0, r9
 80211ce:	fb14 f409 	smulbb	r4, r4, r9
 80211d2:	fb07 8805 	mla	r8, r7, r5, r8
 80211d6:	9d08      	ldr	r5, [sp, #32]
 80211d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80211da:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80211de:	fb08 1805 	mla	r8, r8, r5, r1
 80211e2:	9d05      	ldr	r5, [sp, #20]
 80211e4:	fa1f f888 	uxth.w	r8, r8
 80211e8:	f108 0101 	add.w	r1, r8, #1
 80211ec:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80211f0:	9903      	ldr	r1, [sp, #12]
 80211f2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80211f6:	f881 8000 	strb.w	r8, [r1]
 80211fa:	fb03 f10a 	mul.w	r1, r3, sl
 80211fe:	fb07 1105 	mla	r1, r7, r5, r1
 8021202:	9d02      	ldr	r5, [sp, #8]
 8021204:	fb0c 1105 	mla	r1, ip, r5, r1
 8021208:	9d07      	ldr	r5, [sp, #28]
 802120a:	fb05 1102 	mla	r1, r5, r2, r1
 802120e:	9a08      	ldr	r2, [sp, #32]
 8021210:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021214:	fb01 0102 	mla	r1, r1, r2, r0
 8021218:	9a03      	ldr	r2, [sp, #12]
 802121a:	b289      	uxth	r1, r1
 802121c:	1c48      	adds	r0, r1, #1
 802121e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021222:	1209      	asrs	r1, r1, #8
 8021224:	7051      	strb	r1, [r2, #1]
 8021226:	9a01      	ldr	r2, [sp, #4]
 8021228:	4353      	muls	r3, r2
 802122a:	9a06      	ldr	r2, [sp, #24]
 802122c:	fb07 3702 	mla	r7, r7, r2, r3
 8021230:	9b08      	ldr	r3, [sp, #32]
 8021232:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8021236:	fb05 c606 	mla	r6, r5, r6, ip
 802123a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802123e:	fb06 4603 	mla	r6, r6, r3, r4
 8021242:	9b03      	ldr	r3, [sp, #12]
 8021244:	b2b6      	uxth	r6, r6
 8021246:	f106 0e01 	add.w	lr, r6, #1
 802124a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802124e:	1236      	asrs	r6, r6, #8
 8021250:	709e      	strb	r6, [r3, #2]
 8021252:	b00d      	add	sp, #52	; 0x34
 8021254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021258:	f1bc 0f0f 	cmp.w	ip, #15
 802125c:	f63f af60 	bhi.w	8021120 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021260:	4626      	mov	r6, r4
 8021262:	4602      	mov	r2, r0
 8021264:	460d      	mov	r5, r1
 8021266:	46a6      	mov	lr, r4
 8021268:	9002      	str	r0, [sp, #8]
 802126a:	4688      	mov	r8, r1
 802126c:	e783      	b.n	8021176 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 802126e:	bf00      	nop
 8021270:	0802aff1 	.word	0x0802aff1
 8021274:	0802b4e6 	.word	0x0802b4e6
 8021278:	0802b0ba 	.word	0x0802b0ba

0802127c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802127c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021280:	ed2d 8b08 	vpush	{d8-d11}
 8021284:	b0a1      	sub	sp, #132	; 0x84
 8021286:	eeb0 aa40 	vmov.f32	s20, s0
 802128a:	eef0 9a60 	vmov.f32	s19, s1
 802128e:	9307      	str	r3, [sp, #28]
 8021290:	eeb0 9a41 	vmov.f32	s18, s2
 8021294:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8021298:	eeb0 8a62 	vmov.f32	s16, s5
 802129c:	9210      	str	r2, [sp, #64]	; 0x40
 802129e:	eef0 8a43 	vmov.f32	s17, s6
 80212a2:	9308      	str	r3, [sp, #32]
 80212a4:	eef0 ba44 	vmov.f32	s23, s8
 80212a8:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80212ac:	eeb0 ba64 	vmov.f32	s22, s9
 80212b0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80212b2:	eef0 aa45 	vmov.f32	s21, s10
 80212b6:	930a      	str	r3, [sp, #40]	; 0x28
 80212b8:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80212bc:	901f      	str	r0, [sp, #124]	; 0x7c
 80212be:	930f      	str	r3, [sp, #60]	; 0x3c
 80212c0:	6850      	ldr	r0, [r2, #4]
 80212c2:	910e      	str	r1, [sp, #56]	; 0x38
 80212c4:	6812      	ldr	r2, [r2, #0]
 80212c6:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80212ca:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 80212ce:	fb00 1303 	mla	r3, r0, r3, r1
 80212d2:	9908      	ldr	r1, [sp, #32]
 80212d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80212d8:	18d3      	adds	r3, r2, r3
 80212da:	2203      	movs	r2, #3
 80212dc:	9309      	str	r3, [sp, #36]	; 0x24
 80212de:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80212e0:	681b      	ldr	r3, [r3, #0]
 80212e2:	930c      	str	r3, [sp, #48]	; 0x30
 80212e4:	f06f 0304 	mvn.w	r3, #4
 80212e8:	fb11 3302 	smlabb	r3, r1, r2, r3
 80212ec:	930d      	str	r3, [sp, #52]	; 0x34
 80212ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80212f0:	43db      	mvns	r3, r3
 80212f2:	b2db      	uxtb	r3, r3
 80212f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80212f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80212f8:	2b00      	cmp	r3, #0
 80212fa:	dc03      	bgt.n	8021304 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80212fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80212fe:	2b00      	cmp	r3, #0
 8021300:	f340 81df 	ble.w	80216c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8021304:	9b07      	ldr	r3, [sp, #28]
 8021306:	2b00      	cmp	r3, #0
 8021308:	f340 80f2 	ble.w	80214f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802130c:	ea5f 4228 	movs.w	r2, r8, asr #16
 8021310:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021314:	d430      	bmi.n	8021378 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021316:	1c51      	adds	r1, r2, #1
 8021318:	9808      	ldr	r0, [sp, #32]
 802131a:	4281      	cmp	r1, r0
 802131c:	da2f      	bge.n	802137e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802131e:	2b00      	cmp	r3, #0
 8021320:	db2d      	blt.n	802137e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8021322:	1c59      	adds	r1, r3, #1
 8021324:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021326:	4288      	cmp	r0, r1
 8021328:	dd29      	ble.n	802137e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802132a:	9b07      	ldr	r3, [sp, #28]
 802132c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802132e:	3b01      	subs	r3, #1
 8021330:	fb02 8203 	mla	r2, r2, r3, r8
 8021334:	1412      	asrs	r2, r2, #16
 8021336:	d42d      	bmi.n	8021394 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021338:	3201      	adds	r2, #1
 802133a:	9908      	ldr	r1, [sp, #32]
 802133c:	4291      	cmp	r1, r2
 802133e:	dd29      	ble.n	8021394 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021340:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8021342:	fb02 b303 	mla	r3, r2, r3, fp
 8021346:	141b      	asrs	r3, r3, #16
 8021348:	d424      	bmi.n	8021394 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802134a:	3301      	adds	r3, #1
 802134c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802134e:	429a      	cmp	r2, r3
 8021350:	dd20      	ble.n	8021394 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021354:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021358:	1cde      	adds	r6, r3, #3
 802135a:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802135e:	f1bc 0f00 	cmp.w	ip, #0
 8021362:	f300 811f 	bgt.w	80215a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8021366:	9b07      	ldr	r3, [sp, #28]
 8021368:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802136c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802136e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021372:	4423      	add	r3, r4
 8021374:	9309      	str	r3, [sp, #36]	; 0x24
 8021376:	e0bd      	b.n	80214f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021378:	1c57      	adds	r7, r2, #1
 802137a:	f040 80ae 	bne.w	80214da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802137e:	9908      	ldr	r1, [sp, #32]
 8021380:	428a      	cmp	r2, r1
 8021382:	f280 80aa 	bge.w	80214da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8021386:	1c5e      	adds	r6, r3, #1
 8021388:	f2c0 80a7 	blt.w	80214da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802138c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802138e:	4293      	cmp	r3, r2
 8021390:	f280 80a3 	bge.w	80214da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8021394:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021398:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802139a:	f1ba 0f00 	cmp.w	sl, #0
 802139e:	dde2      	ble.n	8021366 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80213a0:	ea5f 4028 	movs.w	r0, r8, asr #16
 80213a4:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80213a8:	ea4f 412b 	mov.w	r1, fp, asr #16
 80213ac:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80213b0:	f100 80df 	bmi.w	8021572 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80213b4:	1c45      	adds	r5, r0, #1
 80213b6:	9f08      	ldr	r7, [sp, #32]
 80213b8:	42af      	cmp	r7, r5
 80213ba:	f340 80dc 	ble.w	8021576 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80213be:	2900      	cmp	r1, #0
 80213c0:	f2c0 80d9 	blt.w	8021576 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80213c4:	1c4d      	adds	r5, r1, #1
 80213c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80213c8:	42af      	cmp	r7, r5
 80213ca:	f340 80d4 	ble.w	8021576 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80213ce:	9d08      	ldr	r5, [sp, #32]
 80213d0:	fb05 0101 	mla	r1, r5, r1, r0
 80213d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80213d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80213da:	1845      	adds	r5, r0, r1
 80213dc:	5c40      	ldrb	r0, [r0, r1]
 80213de:	792f      	ldrb	r7, [r5, #4]
 80213e0:	7869      	ldrb	r1, [r5, #1]
 80213e2:	9711      	str	r7, [sp, #68]	; 0x44
 80213e4:	796f      	ldrb	r7, [r5, #5]
 80213e6:	f895 e002 	ldrb.w	lr, [r5, #2]
 80213ea:	f895 9003 	ldrb.w	r9, [r5, #3]
 80213ee:	9712      	str	r7, [sp, #72]	; 0x48
 80213f0:	b17a      	cbz	r2, 8021412 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 80213f2:	3505      	adds	r5, #5
 80213f4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80213f6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80213f8:	19ef      	adds	r7, r5, r7
 80213fa:	5d2d      	ldrb	r5, [r5, r4]
 80213fc:	787c      	ldrb	r4, [r7, #1]
 80213fe:	9513      	str	r5, [sp, #76]	; 0x4c
 8021400:	9415      	str	r4, [sp, #84]	; 0x54
 8021402:	78bc      	ldrb	r4, [r7, #2]
 8021404:	9417      	str	r4, [sp, #92]	; 0x5c
 8021406:	78fc      	ldrb	r4, [r7, #3]
 8021408:	9414      	str	r4, [sp, #80]	; 0x50
 802140a:	793c      	ldrb	r4, [r7, #4]
 802140c:	9416      	str	r4, [sp, #88]	; 0x58
 802140e:	797c      	ldrb	r4, [r7, #5]
 8021410:	9418      	str	r4, [sp, #96]	; 0x60
 8021412:	b29b      	uxth	r3, r3
 8021414:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021416:	b292      	uxth	r2, r2
 8021418:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 802141c:	fb03 f702 	mul.w	r7, r3, r2
 8021420:	011b      	lsls	r3, r3, #4
 8021422:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8021426:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802142a:	1bdb      	subs	r3, r3, r7
 802142c:	b292      	uxth	r2, r2
 802142e:	b29b      	uxth	r3, r3
 8021430:	ebac 0c02 	sub.w	ip, ip, r2
 8021434:	fb03 f909 	mul.w	r9, r3, r9
 8021438:	fa1f fc8c 	uxth.w	ip, ip
 802143c:	fb0c 9000 	mla	r0, ip, r0, r9
 8021440:	f896 9000 	ldrb.w	r9, [r6]
 8021444:	fb02 0004 	mla	r0, r2, r4, r0
 8021448:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802144a:	fb07 0004 	mla	r0, r7, r4, r0
 802144e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021450:	fb19 f904 	smulbb	r9, r9, r4
 8021454:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021458:	fb00 9005 	mla	r0, r0, r5, r9
 802145c:	b280      	uxth	r0, r0
 802145e:	f100 0901 	add.w	r9, r0, #1
 8021462:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021466:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021468:	4358      	muls	r0, r3
 802146a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802146e:	fb0c 0101 	mla	r1, ip, r1, r0
 8021472:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021474:	f886 9000 	strb.w	r9, [r6]
 8021478:	fb02 1100 	mla	r1, r2, r0, r1
 802147c:	9816      	ldr	r0, [sp, #88]	; 0x58
 802147e:	fb07 1100 	mla	r1, r7, r0, r1
 8021482:	7870      	ldrb	r0, [r6, #1]
 8021484:	fb10 f004 	smulbb	r0, r0, r4
 8021488:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802148c:	fb01 0105 	mla	r1, r1, r5, r0
 8021490:	b289      	uxth	r1, r1
 8021492:	1c48      	adds	r0, r1, #1
 8021494:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021498:	1209      	asrs	r1, r1, #8
 802149a:	7071      	strb	r1, [r6, #1]
 802149c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802149e:	434b      	muls	r3, r1
 80214a0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80214a2:	fb0c 330e 	mla	r3, ip, lr, r3
 80214a6:	fb02 3201 	mla	r2, r2, r1, r3
 80214aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80214ac:	fb07 2703 	mla	r7, r7, r3, r2
 80214b0:	78b2      	ldrb	r2, [r6, #2]
 80214b2:	fb12 f204 	smulbb	r2, r2, r4
 80214b6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80214ba:	fb07 2505 	mla	r5, r7, r5, r2
 80214be:	b2ad      	uxth	r5, r5
 80214c0:	1c6f      	adds	r7, r5, #1
 80214c2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80214c6:	122d      	asrs	r5, r5, #8
 80214c8:	70b5      	strb	r5, [r6, #2]
 80214ca:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80214cc:	3603      	adds	r6, #3
 80214ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80214d2:	4498      	add	r8, r3
 80214d4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80214d6:	449b      	add	fp, r3
 80214d8:	e75f      	b.n	802139a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80214da:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80214dc:	4498      	add	r8, r3
 80214de:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80214e0:	449b      	add	fp, r3
 80214e2:	9b07      	ldr	r3, [sp, #28]
 80214e4:	3b01      	subs	r3, #1
 80214e6:	9307      	str	r3, [sp, #28]
 80214e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214ea:	3303      	adds	r3, #3
 80214ec:	9309      	str	r3, [sp, #36]	; 0x24
 80214ee:	e709      	b.n	8021304 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80214f0:	f47f af1b 	bne.w	802132a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 80214f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80214f6:	2b00      	cmp	r3, #0
 80214f8:	f340 80e3 	ble.w	80216c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80214fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021500:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021502:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021506:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802150a:	eef0 6a48 	vmov.f32	s13, s16
 802150e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021512:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021516:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802151a:	ee16 8a90 	vmov	r8, s13
 802151e:	eef0 6a68 	vmov.f32	s13, s17
 8021522:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021526:	ee16 ba90 	vmov	fp, s13
 802152a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802152e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021532:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021536:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802153a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802153e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021542:	ee18 2a10 	vmov	r2, s16
 8021546:	eeb0 8a47 	vmov.f32	s16, s14
 802154a:	fb92 f3f3 	sdiv	r3, r2, r3
 802154e:	ee18 2a90 	vmov	r2, s17
 8021552:	9335      	str	r3, [sp, #212]	; 0xd4
 8021554:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021556:	eef0 8a67 	vmov.f32	s17, s15
 802155a:	fb92 f3f3 	sdiv	r3, r2, r3
 802155e:	9336      	str	r3, [sp, #216]	; 0xd8
 8021560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021562:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021564:	3b01      	subs	r3, #1
 8021566:	930e      	str	r3, [sp, #56]	; 0x38
 8021568:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802156a:	bf08      	it	eq
 802156c:	4613      	moveq	r3, r2
 802156e:	9307      	str	r3, [sp, #28]
 8021570:	e6c1      	b.n	80212f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021572:	1c45      	adds	r5, r0, #1
 8021574:	d1a9      	bne.n	80214ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021576:	9c08      	ldr	r4, [sp, #32]
 8021578:	42a0      	cmp	r0, r4
 802157a:	daa6      	bge.n	80214ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802157c:	1c4c      	adds	r4, r1, #1
 802157e:	dba4      	blt.n	80214ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021580:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021582:	428c      	cmp	r4, r1
 8021584:	dda1      	ble.n	80214ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021586:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021588:	9001      	str	r0, [sp, #4]
 802158a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802158c:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8021590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021592:	4631      	mov	r1, r6
 8021594:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8021598:	9300      	str	r3, [sp, #0]
 802159a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802159c:	9b08      	ldr	r3, [sp, #32]
 802159e:	f7ff fd5b 	bl	8021058 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80215a2:	e792      	b.n	80214ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80215a4:	ea4f 4228 	mov.w	r2, r8, asr #16
 80215a8:	9c08      	ldr	r4, [sp, #32]
 80215aa:	ea4f 402b 	mov.w	r0, fp, asr #16
 80215ae:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80215b2:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80215b6:	fb04 2000 	mla	r0, r4, r0, r2
 80215ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80215bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80215be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80215c2:	4402      	add	r2, r0
 80215c4:	5c25      	ldrb	r5, [r4, r0]
 80215c6:	7894      	ldrb	r4, [r2, #2]
 80215c8:	7850      	ldrb	r0, [r2, #1]
 80215ca:	9411      	str	r4, [sp, #68]	; 0x44
 80215cc:	7954      	ldrb	r4, [r2, #5]
 80215ce:	f892 a003 	ldrb.w	sl, [r2, #3]
 80215d2:	f892 9004 	ldrb.w	r9, [r2, #4]
 80215d6:	9412      	str	r4, [sp, #72]	; 0x48
 80215d8:	b171      	cbz	r1, 80215f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80215da:	3205      	adds	r2, #5
 80215dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80215de:	1917      	adds	r7, r2, r4
 80215e0:	5d12      	ldrb	r2, [r2, r4]
 80215e2:	9219      	str	r2, [sp, #100]	; 0x64
 80215e4:	787a      	ldrb	r2, [r7, #1]
 80215e6:	921b      	str	r2, [sp, #108]	; 0x6c
 80215e8:	78ba      	ldrb	r2, [r7, #2]
 80215ea:	921d      	str	r2, [sp, #116]	; 0x74
 80215ec:	78fa      	ldrb	r2, [r7, #3]
 80215ee:	921a      	str	r2, [sp, #104]	; 0x68
 80215f0:	793a      	ldrb	r2, [r7, #4]
 80215f2:	921c      	str	r2, [sp, #112]	; 0x70
 80215f4:	797a      	ldrb	r2, [r7, #5]
 80215f6:	921e      	str	r2, [sp, #120]	; 0x78
 80215f8:	b29b      	uxth	r3, r3
 80215fa:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80215fc:	b289      	uxth	r1, r1
 80215fe:	3603      	adds	r6, #3
 8021600:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021604:	fb03 f201 	mul.w	r2, r3, r1
 8021608:	011b      	lsls	r3, r3, #4
 802160a:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 802160e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021612:	1a9b      	subs	r3, r3, r2
 8021614:	b289      	uxth	r1, r1
 8021616:	b29b      	uxth	r3, r3
 8021618:	1a7f      	subs	r7, r7, r1
 802161a:	fb03 fa0a 	mul.w	sl, r3, sl
 802161e:	b2bf      	uxth	r7, r7
 8021620:	fb03 f909 	mul.w	r9, r3, r9
 8021624:	fb07 a505 	mla	r5, r7, r5, sl
 8021628:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 802162c:	fb07 9000 	mla	r0, r7, r0, r9
 8021630:	fb01 5504 	mla	r5, r1, r4, r5
 8021634:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8021636:	fb02 5504 	mla	r5, r2, r4, r5
 802163a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802163c:	fb1a fa04 	smulbb	sl, sl, r4
 8021640:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8021644:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8021646:	fb05 a50e 	mla	r5, r5, lr, sl
 802164a:	fb01 0004 	mla	r0, r1, r4, r0
 802164e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8021650:	b2ad      	uxth	r5, r5
 8021652:	fb02 0004 	mla	r0, r2, r4, r0
 8021656:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021658:	f105 0a01 	add.w	sl, r5, #1
 802165c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021660:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021664:	122d      	asrs	r5, r5, #8
 8021666:	f806 5c06 	strb.w	r5, [r6, #-6]
 802166a:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 802166e:	fb15 f504 	smulbb	r5, r5, r4
 8021672:	fb00 500e 	mla	r0, r0, lr, r5
 8021676:	b280      	uxth	r0, r0
 8021678:	1c45      	adds	r5, r0, #1
 802167a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802167e:	1200      	asrs	r0, r0, #8
 8021680:	f806 0c05 	strb.w	r0, [r6, #-5]
 8021684:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021686:	4343      	muls	r3, r0
 8021688:	9811      	ldr	r0, [sp, #68]	; 0x44
 802168a:	fb07 3300 	mla	r3, r7, r0, r3
 802168e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8021690:	fb01 3100 	mla	r1, r1, r0, r3
 8021694:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021696:	fb02 1203 	mla	r2, r2, r3, r1
 802169a:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 802169e:	fb11 f104 	smulbb	r1, r1, r4
 80216a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80216a6:	fb02 120e 	mla	r2, r2, lr, r1
 80216aa:	b292      	uxth	r2, r2
 80216ac:	1c53      	adds	r3, r2, #1
 80216ae:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80216b2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80216b4:	1212      	asrs	r2, r2, #8
 80216b6:	4498      	add	r8, r3
 80216b8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80216ba:	f806 2c04 	strb.w	r2, [r6, #-4]
 80216be:	449b      	add	fp, r3
 80216c0:	e64d      	b.n	802135e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80216c2:	b021      	add	sp, #132	; 0x84
 80216c4:	ecbd 8b08 	vpop	{d8-d11}
 80216c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080216cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80216cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216d0:	b085      	sub	sp, #20
 80216d2:	784d      	ldrb	r5, [r1, #1]
 80216d4:	788e      	ldrb	r6, [r1, #2]
 80216d6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80216da:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80216de:	9403      	str	r4, [sp, #12]
 80216e0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80216e4:	780c      	ldrb	r4, [r1, #0]
 80216e6:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80216ea:	fb07 ce03 	mla	lr, r7, r3, ip
 80216ee:	2f00      	cmp	r7, #0
 80216f0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80216f4:	eb02 0b0e 	add.w	fp, r2, lr
 80216f8:	db56      	blt.n	80217a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80216fa:	45b9      	cmp	r9, r7
 80216fc:	dd54      	ble.n	80217a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80216fe:	f1bc 0f00 	cmp.w	ip, #0
 8021702:	db4d      	blt.n	80217a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021704:	4563      	cmp	r3, ip
 8021706:	dd4b      	ble.n	80217a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021708:	f812 200e 	ldrb.w	r2, [r2, lr]
 802170c:	9200      	str	r2, [sp, #0]
 802170e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8021712:	9201      	str	r2, [sp, #4]
 8021714:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8021718:	9202      	str	r2, [sp, #8]
 802171a:	f11c 0201 	adds.w	r2, ip, #1
 802171e:	d44a      	bmi.n	80217b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021720:	4293      	cmp	r3, r2
 8021722:	dd48      	ble.n	80217b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021724:	2800      	cmp	r0, #0
 8021726:	d046      	beq.n	80217b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021728:	f89b e003 	ldrb.w	lr, [fp, #3]
 802172c:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8021730:	f89b a005 	ldrb.w	sl, [fp, #5]
 8021734:	3701      	adds	r7, #1
 8021736:	d446      	bmi.n	80217c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021738:	45b9      	cmp	r9, r7
 802173a:	dd44      	ble.n	80217c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802173c:	9a03      	ldr	r2, [sp, #12]
 802173e:	2a00      	cmp	r2, #0
 8021740:	d045      	beq.n	80217ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8021742:	f1bc 0f00 	cmp.w	ip, #0
 8021746:	db3a      	blt.n	80217be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021748:	4563      	cmp	r3, ip
 802174a:	dd38      	ble.n	80217be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 802174c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021750:	f04f 0903 	mov.w	r9, #3
 8021754:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8021758:	fb03 b209 	mla	r2, r3, r9, fp
 802175c:	fb03 b909 	mla	r9, r3, r9, fp
 8021760:	7852      	ldrb	r2, [r2, #1]
 8021762:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021766:	f11c 0c01 	adds.w	ip, ip, #1
 802176a:	d40d      	bmi.n	8021788 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802176c:	4563      	cmp	r3, ip
 802176e:	dd0b      	ble.n	8021788 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021770:	b160      	cbz	r0, 802178c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8021772:	2603      	movs	r6, #3
 8021774:	fb13 6406 	smlabb	r4, r3, r6, r6
 8021778:	fb03 b506 	mla	r5, r3, r6, fp
 802177c:	fb03 b306 	mla	r3, r3, r6, fp
 8021780:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8021784:	792d      	ldrb	r5, [r5, #4]
 8021786:	795e      	ldrb	r6, [r3, #5]
 8021788:	280f      	cmp	r0, #15
 802178a:	d802      	bhi.n	8021792 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 802178c:	9b03      	ldr	r3, [sp, #12]
 802178e:	2b0f      	cmp	r3, #15
 8021790:	d922      	bls.n	80217d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8021792:	4b2f      	ldr	r3, [pc, #188]	; (8021850 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8021794:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021798:	4a2e      	ldr	r2, [pc, #184]	; (8021854 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 802179a:	482f      	ldr	r0, [pc, #188]	; (8021858 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 802179c:	f003 ffa0 	bl	80256e0 <__assert_func>
 80217a0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80217a4:	9400      	str	r4, [sp, #0]
 80217a6:	e7b8      	b.n	802171a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80217a8:	46b2      	mov	sl, r6
 80217aa:	46a8      	mov	r8, r5
 80217ac:	46a6      	mov	lr, r4
 80217ae:	9400      	str	r4, [sp, #0]
 80217b0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80217b4:	e7be      	b.n	8021734 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80217b6:	46b2      	mov	sl, r6
 80217b8:	46a8      	mov	r8, r5
 80217ba:	46a6      	mov	lr, r4
 80217bc:	e7ba      	b.n	8021734 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80217be:	46b1      	mov	r9, r6
 80217c0:	462a      	mov	r2, r5
 80217c2:	4627      	mov	r7, r4
 80217c4:	e7cf      	b.n	8021766 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80217c6:	46b1      	mov	r9, r6
 80217c8:	462a      	mov	r2, r5
 80217ca:	4627      	mov	r7, r4
 80217cc:	e7dc      	b.n	8021788 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80217ce:	280f      	cmp	r0, #15
 80217d0:	d8df      	bhi.n	8021792 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80217d2:	46b1      	mov	r9, r6
 80217d4:	462a      	mov	r2, r5
 80217d6:	4627      	mov	r7, r4
 80217d8:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80217dc:	b280      	uxth	r0, r0
 80217de:	fb00 f30b 	mul.w	r3, r0, fp
 80217e2:	0100      	lsls	r0, r0, #4
 80217e4:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80217e8:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80217ec:	1ac0      	subs	r0, r0, r3
 80217ee:	fa1f fb8b 	uxth.w	fp, fp
 80217f2:	b280      	uxth	r0, r0
 80217f4:	ebac 0c0b 	sub.w	ip, ip, fp
 80217f8:	9003      	str	r0, [sp, #12]
 80217fa:	fa1f fc8c 	uxth.w	ip, ip
 80217fe:	fb00 fe0e 	mul.w	lr, r0, lr
 8021802:	9800      	ldr	r0, [sp, #0]
 8021804:	fb0c ee00 	mla	lr, ip, r0, lr
 8021808:	9803      	ldr	r0, [sp, #12]
 802180a:	fb00 f808 	mul.w	r8, r0, r8
 802180e:	9801      	ldr	r0, [sp, #4]
 8021810:	fb0b ee07 	mla	lr, fp, r7, lr
 8021814:	fb0c 8800 	mla	r8, ip, r0, r8
 8021818:	fb03 ee04 	mla	lr, r3, r4, lr
 802181c:	fb0b 8202 	mla	r2, fp, r2, r8
 8021820:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021824:	fb03 2505 	mla	r5, r3, r5, r2
 8021828:	9a03      	ldr	r2, [sp, #12]
 802182a:	f881 e000 	strb.w	lr, [r1]
 802182e:	fb02 f00a 	mul.w	r0, r2, sl
 8021832:	9a02      	ldr	r2, [sp, #8]
 8021834:	122d      	asrs	r5, r5, #8
 8021836:	fb0c 0c02 	mla	ip, ip, r2, r0
 802183a:	704d      	strb	r5, [r1, #1]
 802183c:	fb0b c909 	mla	r9, fp, r9, ip
 8021840:	fb03 9606 	mla	r6, r3, r6, r9
 8021844:	1236      	asrs	r6, r6, #8
 8021846:	708e      	strb	r6, [r1, #2]
 8021848:	b005      	add	sp, #20
 802184a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802184e:	bf00      	nop
 8021850:	0802aff1 	.word	0x0802aff1
 8021854:	0802b4e6 	.word	0x0802b4e6
 8021858:	0802b0ba 	.word	0x0802b0ba

0802185c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021860:	ed2d 8b0a 	vpush	{d8-d12}
 8021864:	b09d      	sub	sp, #116	; 0x74
 8021866:	eeb0 aa40 	vmov.f32	s20, s0
 802186a:	eef0 9a60 	vmov.f32	s19, s1
 802186e:	9306      	str	r3, [sp, #24]
 8021870:	eeb0 9a41 	vmov.f32	s18, s2
 8021874:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8021878:	eeb0 8a62 	vmov.f32	s16, s5
 802187c:	901b      	str	r0, [sp, #108]	; 0x6c
 802187e:	eef0 8a43 	vmov.f32	s17, s6
 8021882:	9307      	str	r3, [sp, #28]
 8021884:	eeb0 ca44 	vmov.f32	s24, s8
 8021888:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 802188c:	eef0 ba64 	vmov.f32	s23, s9
 8021890:	eeb0 ba45 	vmov.f32	s22, s10
 8021894:	9309      	str	r3, [sp, #36]	; 0x24
 8021896:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802189a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 802189e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80218a0:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80218a4:	6850      	ldr	r0, [r2, #4]
 80218a6:	6812      	ldr	r2, [r2, #0]
 80218a8:	fb00 1303 	mla	r3, r0, r3, r1
 80218ac:	9907      	ldr	r1, [sp, #28]
 80218ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218b2:	18d3      	adds	r3, r2, r3
 80218b4:	2203      	movs	r2, #3
 80218b6:	9308      	str	r3, [sp, #32]
 80218b8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80218ba:	681b      	ldr	r3, [r3, #0]
 80218bc:	930a      	str	r3, [sp, #40]	; 0x28
 80218be:	f06f 0304 	mvn.w	r3, #4
 80218c2:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80218c6:	fb11 3302 	smlabb	r3, r1, r2, r3
 80218ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80218cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	dc03      	bgt.n	80218da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80218d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	f340 8193 	ble.w	8021c00 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80218da:	9b06      	ldr	r3, [sp, #24]
 80218dc:	2b00      	cmp	r3, #0
 80218de:	f340 80d0 	ble.w	8021a82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 80218e2:	1432      	asrs	r2, r6, #16
 80218e4:	ea4f 4325 	mov.w	r3, r5, asr #16
 80218e8:	d42f      	bmi.n	802194a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80218ea:	1c51      	adds	r1, r2, #1
 80218ec:	9807      	ldr	r0, [sp, #28]
 80218ee:	4281      	cmp	r1, r0
 80218f0:	da2e      	bge.n	8021950 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	db2c      	blt.n	8021950 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80218f6:	1c59      	adds	r1, r3, #1
 80218f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80218fa:	4288      	cmp	r0, r1
 80218fc:	dd28      	ble.n	8021950 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80218fe:	9b06      	ldr	r3, [sp, #24]
 8021900:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8021902:	3b01      	subs	r3, #1
 8021904:	fb02 6203 	mla	r2, r2, r3, r6
 8021908:	1412      	asrs	r2, r2, #16
 802190a:	d42c      	bmi.n	8021966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802190c:	3201      	adds	r2, #1
 802190e:	9907      	ldr	r1, [sp, #28]
 8021910:	4291      	cmp	r1, r2
 8021912:	dd28      	ble.n	8021966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021914:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8021916:	fb02 5303 	mla	r3, r2, r3, r5
 802191a:	141b      	asrs	r3, r3, #16
 802191c:	d423      	bmi.n	8021966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802191e:	3301      	adds	r3, #1
 8021920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021922:	429a      	cmp	r2, r3
 8021924:	dd1f      	ble.n	8021966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021926:	9b08      	ldr	r3, [sp, #32]
 8021928:	f8dd e018 	ldr.w	lr, [sp, #24]
 802192c:	f103 0c03 	add.w	ip, r3, #3
 8021930:	f1be 0f00 	cmp.w	lr, #0
 8021934:	f300 80fa 	bgt.w	8021b2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8021938:	9b06      	ldr	r3, [sp, #24]
 802193a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802193e:	9b08      	ldr	r3, [sp, #32]
 8021940:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021944:	4423      	add	r3, r4
 8021946:	9308      	str	r3, [sp, #32]
 8021948:	e09d      	b.n	8021a86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 802194a:	1c51      	adds	r1, r2, #1
 802194c:	f040 808e 	bne.w	8021a6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021950:	9907      	ldr	r1, [sp, #28]
 8021952:	428a      	cmp	r2, r1
 8021954:	f280 808a 	bge.w	8021a6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021958:	1c5f      	adds	r7, r3, #1
 802195a:	f2c0 8087 	blt.w	8021a6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802195e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021960:	4293      	cmp	r3, r2
 8021962:	f280 8083 	bge.w	8021a6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021966:	9f06      	ldr	r7, [sp, #24]
 8021968:	f8dd a020 	ldr.w	sl, [sp, #32]
 802196c:	2f00      	cmp	r7, #0
 802196e:	dde3      	ble.n	8021938 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8021970:	1432      	asrs	r2, r6, #16
 8021972:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021976:	ea4f 4325 	mov.w	r3, r5, asr #16
 802197a:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 802197e:	f100 80bf 	bmi.w	8021b00 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8021982:	1c50      	adds	r0, r2, #1
 8021984:	9c07      	ldr	r4, [sp, #28]
 8021986:	4284      	cmp	r4, r0
 8021988:	f340 80bc 	ble.w	8021b04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802198c:	2b00      	cmp	r3, #0
 802198e:	f2c0 80b9 	blt.w	8021b04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021992:	1c58      	adds	r0, r3, #1
 8021994:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021996:	4284      	cmp	r4, r0
 8021998:	f340 80b4 	ble.w	8021b04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802199c:	9807      	ldr	r0, [sp, #28]
 802199e:	fb00 2303 	mla	r3, r0, r3, r2
 80219a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80219a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80219a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219aa:	441a      	add	r2, r3
 80219ac:	f810 c003 	ldrb.w	ip, [r0, r3]
 80219b0:	7953      	ldrb	r3, [r2, #5]
 80219b2:	7850      	ldrb	r0, [r2, #1]
 80219b4:	f892 e002 	ldrb.w	lr, [r2, #2]
 80219b8:	f892 9003 	ldrb.w	r9, [r2, #3]
 80219bc:	f892 8004 	ldrb.w	r8, [r2, #4]
 80219c0:	930e      	str	r3, [sp, #56]	; 0x38
 80219c2:	f1bb 0f00 	cmp.w	fp, #0
 80219c6:	d00f      	beq.n	80219e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80219c8:	3205      	adds	r2, #5
 80219ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80219cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80219ce:	18d3      	adds	r3, r2, r3
 80219d0:	5d12      	ldrb	r2, [r2, r4]
 80219d2:	920f      	str	r2, [sp, #60]	; 0x3c
 80219d4:	785a      	ldrb	r2, [r3, #1]
 80219d6:	9211      	str	r2, [sp, #68]	; 0x44
 80219d8:	789a      	ldrb	r2, [r3, #2]
 80219da:	9213      	str	r2, [sp, #76]	; 0x4c
 80219dc:	78da      	ldrb	r2, [r3, #3]
 80219de:	9210      	str	r2, [sp, #64]	; 0x40
 80219e0:	791a      	ldrb	r2, [r3, #4]
 80219e2:	795b      	ldrb	r3, [r3, #5]
 80219e4:	9212      	str	r2, [sp, #72]	; 0x48
 80219e6:	9314      	str	r3, [sp, #80]	; 0x50
 80219e8:	b28b      	uxth	r3, r1
 80219ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80219ec:	fa1f f28b 	uxth.w	r2, fp
 80219f0:	fb03 fb02 	mul.w	fp, r3, r2
 80219f4:	011b      	lsls	r3, r3, #4
 80219f6:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80219fa:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80219fe:	eba3 030b 	sub.w	r3, r3, fp
 8021a02:	b292      	uxth	r2, r2
 8021a04:	b29b      	uxth	r3, r3
 8021a06:	1a89      	subs	r1, r1, r2
 8021a08:	fb03 f808 	mul.w	r8, r3, r8
 8021a0c:	b289      	uxth	r1, r1
 8021a0e:	fb03 f909 	mul.w	r9, r3, r9
 8021a12:	fb01 8800 	mla	r8, r1, r0, r8
 8021a16:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021a18:	fb01 990c 	mla	r9, r1, ip, r9
 8021a1c:	fb02 8800 	mla	r8, r2, r0, r8
 8021a20:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021a22:	fb02 9904 	mla	r9, r2, r4, r9
 8021a26:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021a28:	fb0b 8800 	mla	r8, fp, r0, r8
 8021a2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021a2e:	fb0b 9904 	mla	r9, fp, r4, r9
 8021a32:	4343      	muls	r3, r0
 8021a34:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021a38:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021a3c:	fb01 330e 	mla	r3, r1, lr, r3
 8021a40:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021a42:	f88a 9000 	strb.w	r9, [sl]
 8021a46:	fb02 3201 	mla	r2, r2, r1, r3
 8021a4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021a4c:	f88a 8001 	strb.w	r8, [sl, #1]
 8021a50:	fb0b 2b03 	mla	fp, fp, r3, r2
 8021a54:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8021a58:	f88a b002 	strb.w	fp, [sl, #2]
 8021a5c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021a5e:	f10a 0a03 	add.w	sl, sl, #3
 8021a62:	3f01      	subs	r7, #1
 8021a64:	441e      	add	r6, r3
 8021a66:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021a68:	441d      	add	r5, r3
 8021a6a:	e77f      	b.n	802196c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8021a6c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021a6e:	441e      	add	r6, r3
 8021a70:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021a72:	441d      	add	r5, r3
 8021a74:	9b06      	ldr	r3, [sp, #24]
 8021a76:	3b01      	subs	r3, #1
 8021a78:	9306      	str	r3, [sp, #24]
 8021a7a:	9b08      	ldr	r3, [sp, #32]
 8021a7c:	3303      	adds	r3, #3
 8021a7e:	9308      	str	r3, [sp, #32]
 8021a80:	e72b      	b.n	80218da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021a82:	f47f af3c 	bne.w	80218fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a88:	2b00      	cmp	r3, #0
 8021a8a:	f340 80b9 	ble.w	8021c00 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8021a8e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021a92:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021a94:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021a98:	eef0 6a48 	vmov.f32	s13, s16
 8021a9c:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021aa0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021aa4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021aa8:	ee16 6a90 	vmov	r6, s13
 8021aac:	eef0 6a68 	vmov.f32	s13, s17
 8021ab0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ab4:	ee16 5a90 	vmov	r5, s13
 8021ab8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021abc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021ac0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021ac4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021ac8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021acc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021ad0:	ee18 2a10 	vmov	r2, s16
 8021ad4:	eeb0 8a47 	vmov.f32	s16, s14
 8021ad8:	fb92 f3f3 	sdiv	r3, r2, r3
 8021adc:	ee18 2a90 	vmov	r2, s17
 8021ae0:	9333      	str	r3, [sp, #204]	; 0xcc
 8021ae2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021ae4:	eef0 8a67 	vmov.f32	s17, s15
 8021ae8:	fb92 f3f3 	sdiv	r3, r2, r3
 8021aec:	9334      	str	r3, [sp, #208]	; 0xd0
 8021aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021af0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021af2:	3b01      	subs	r3, #1
 8021af4:	930c      	str	r3, [sp, #48]	; 0x30
 8021af6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021af8:	bf08      	it	eq
 8021afa:	4613      	moveq	r3, r2
 8021afc:	9306      	str	r3, [sp, #24]
 8021afe:	e6e5      	b.n	80218cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021b00:	1c54      	adds	r4, r2, #1
 8021b02:	d1ab      	bne.n	8021a5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021b04:	9807      	ldr	r0, [sp, #28]
 8021b06:	4282      	cmp	r2, r0
 8021b08:	daa8      	bge.n	8021a5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021b0a:	1c58      	adds	r0, r3, #1
 8021b0c:	dba6      	blt.n	8021a5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021b10:	4298      	cmp	r0, r3
 8021b12:	dda3      	ble.n	8021a5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021b14:	9000      	str	r0, [sp, #0]
 8021b16:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021b18:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8021b1c:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8021b20:	9b07      	ldr	r3, [sp, #28]
 8021b22:	4651      	mov	r1, sl
 8021b24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021b26:	f7ff fdd1 	bl	80216cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8021b2a:	e797      	b.n	8021a5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021b2c:	1431      	asrs	r1, r6, #16
 8021b2e:	9c07      	ldr	r4, [sp, #28]
 8021b30:	1428      	asrs	r0, r5, #16
 8021b32:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021b36:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8021b3a:	fb04 1000 	mla	r0, r4, r0, r1
 8021b3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021b40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021b42:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021b46:	4401      	add	r1, r0
 8021b48:	5c20      	ldrb	r0, [r4, r0]
 8021b4a:	f891 8002 	ldrb.w	r8, [r1, #2]
 8021b4e:	900e      	str	r0, [sp, #56]	; 0x38
 8021b50:	f891 a003 	ldrb.w	sl, [r1, #3]
 8021b54:	7848      	ldrb	r0, [r1, #1]
 8021b56:	f891 9004 	ldrb.w	r9, [r1, #4]
 8021b5a:	f891 b005 	ldrb.w	fp, [r1, #5]
 8021b5e:	b172      	cbz	r2, 8021b7e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8021b60:	3105      	adds	r1, #5
 8021b62:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021b64:	190f      	adds	r7, r1, r4
 8021b66:	5d09      	ldrb	r1, [r1, r4]
 8021b68:	9115      	str	r1, [sp, #84]	; 0x54
 8021b6a:	7879      	ldrb	r1, [r7, #1]
 8021b6c:	9117      	str	r1, [sp, #92]	; 0x5c
 8021b6e:	78b9      	ldrb	r1, [r7, #2]
 8021b70:	9119      	str	r1, [sp, #100]	; 0x64
 8021b72:	78f9      	ldrb	r1, [r7, #3]
 8021b74:	9116      	str	r1, [sp, #88]	; 0x58
 8021b76:	7939      	ldrb	r1, [r7, #4]
 8021b78:	9118      	str	r1, [sp, #96]	; 0x60
 8021b7a:	7979      	ldrb	r1, [r7, #5]
 8021b7c:	911a      	str	r1, [sp, #104]	; 0x68
 8021b7e:	b29b      	uxth	r3, r3
 8021b80:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021b82:	b292      	uxth	r2, r2
 8021b84:	f10c 0c03 	add.w	ip, ip, #3
 8021b88:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021b8c:	fb03 f102 	mul.w	r1, r3, r2
 8021b90:	011b      	lsls	r3, r3, #4
 8021b92:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8021b96:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021b9a:	1a5b      	subs	r3, r3, r1
 8021b9c:	b292      	uxth	r2, r2
 8021b9e:	b29b      	uxth	r3, r3
 8021ba0:	1abf      	subs	r7, r7, r2
 8021ba2:	fb03 f909 	mul.w	r9, r3, r9
 8021ba6:	b2bf      	uxth	r7, r7
 8021ba8:	fb03 fa0a 	mul.w	sl, r3, sl
 8021bac:	fb03 f30b 	mul.w	r3, r3, fp
 8021bb0:	fb07 9900 	mla	r9, r7, r0, r9
 8021bb4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021bb6:	fb07 aa04 	mla	sl, r7, r4, sl
 8021bba:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021bbc:	fb02 9900 	mla	r9, r2, r0, r9
 8021bc0:	9818      	ldr	r0, [sp, #96]	; 0x60
 8021bc2:	fb07 3308 	mla	r3, r7, r8, r3
 8021bc6:	fb01 9900 	mla	r9, r1, r0, r9
 8021bca:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021bcc:	fb02 aa04 	mla	sl, r2, r4, sl
 8021bd0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021bd2:	fb02 3200 	mla	r2, r2, r0, r3
 8021bd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021bd8:	fb01 aa04 	mla	sl, r1, r4, sl
 8021bdc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021be0:	fb01 2103 	mla	r1, r1, r3, r2
 8021be4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021be6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021bea:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8021bee:	1209      	asrs	r1, r1, #8
 8021bf0:	441e      	add	r6, r3
 8021bf2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021bf4:	f80c ac06 	strb.w	sl, [ip, #-6]
 8021bf8:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8021bfc:	441d      	add	r5, r3
 8021bfe:	e697      	b.n	8021930 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8021c00:	b01d      	add	sp, #116	; 0x74
 8021c02:	ecbd 8b0a 	vpop	{d8-d12}
 8021c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c10:	b085      	sub	sp, #20
 8021c12:	7888      	ldrb	r0, [r1, #2]
 8021c14:	4691      	mov	r9, r2
 8021c16:	9000      	str	r0, [sp, #0]
 8021c18:	7848      	ldrb	r0, [r1, #1]
 8021c1a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021c1e:	9001      	str	r0, [sp, #4]
 8021c20:	7808      	ldrb	r0, [r1, #0]
 8021c22:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021c26:	9002      	str	r0, [sp, #8]
 8021c28:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021c2c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021c30:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021c34:	fb04 c603 	mla	r6, r4, r3, ip
 8021c38:	2c00      	cmp	r4, #0
 8021c3a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021c3e:	9a00      	ldr	r2, [sp, #0]
 8021c40:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021c44:	9a01      	ldr	r2, [sp, #4]
 8021c46:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021c4a:	db3a      	blt.n	8021cc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021c4c:	45a0      	cmp	r8, r4
 8021c4e:	dd38      	ble.n	8021cc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021c50:	f1bc 0f00 	cmp.w	ip, #0
 8021c54:	db33      	blt.n	8021cbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021c56:	4563      	cmp	r3, ip
 8021c58:	dd31      	ble.n	8021cbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021c5a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021c5e:	f11c 0601 	adds.w	r6, ip, #1
 8021c62:	d431      	bmi.n	8021cc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021c64:	42b3      	cmp	r3, r6
 8021c66:	dd2f      	ble.n	8021cc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021c68:	b375      	cbz	r5, 8021cc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021c6a:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021c6e:	3401      	adds	r4, #1
 8021c70:	d42e      	bmi.n	8021cd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021c72:	45a0      	cmp	r8, r4
 8021c74:	dd2c      	ble.n	8021cd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021c76:	b35f      	cbz	r7, 8021cd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021c78:	f1bc 0f00 	cmp.w	ip, #0
 8021c7c:	db26      	blt.n	8021ccc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021c7e:	4563      	cmp	r3, ip
 8021c80:	dd24      	ble.n	8021ccc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021c82:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021c86:	f11c 0c01 	adds.w	ip, ip, #1
 8021c8a:	d405      	bmi.n	8021c98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021c8c:	4563      	cmp	r3, ip
 8021c8e:	dd03      	ble.n	8021c98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021c90:	b115      	cbz	r5, 8021c98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021c92:	3301      	adds	r3, #1
 8021c94:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021c98:	2d0f      	cmp	r5, #15
 8021c9a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021c9e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021ca2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021ca6:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021caa:	d801      	bhi.n	8021cb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8021cac:	2f0f      	cmp	r7, #15
 8021cae:	d911      	bls.n	8021cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8021cb0:	4b80      	ldr	r3, [pc, #512]	; (8021eb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8021cb2:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021cb6:	4a80      	ldr	r2, [pc, #512]	; (8021eb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8021cb8:	4880      	ldr	r0, [pc, #512]	; (8021ebc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8021cba:	f003 fd11 	bl	80256e0 <__assert_func>
 8021cbe:	4602      	mov	r2, r0
 8021cc0:	e7cd      	b.n	8021c5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8021cc2:	4606      	mov	r6, r0
 8021cc4:	4602      	mov	r2, r0
 8021cc6:	e7d2      	b.n	8021c6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021cc8:	4606      	mov	r6, r0
 8021cca:	e7d0      	b.n	8021c6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021ccc:	4604      	mov	r4, r0
 8021cce:	e7da      	b.n	8021c86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8021cd0:	4604      	mov	r4, r0
 8021cd2:	e7e1      	b.n	8021c98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021cd4:	b2ab      	uxth	r3, r5
 8021cd6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021cda:	b2bf      	uxth	r7, r7
 8021cdc:	fb03 fe07 	mul.w	lr, r3, r7
 8021ce0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021ce4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021ce8:	eba3 0c0e 	sub.w	ip, r3, lr
 8021cec:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021cf0:	b2bf      	uxth	r7, r7
 8021cf2:	fa1f fc8c 	uxth.w	ip, ip
 8021cf6:	eba5 0507 	sub.w	r5, r5, r7
 8021cfa:	fb0c f30a 	mul.w	r3, ip, sl
 8021cfe:	b2ad      	uxth	r5, r5
 8021d00:	fb05 330b 	mla	r3, r5, fp, r3
 8021d04:	fb07 3309 	mla	r3, r7, r9, r3
 8021d08:	fb0e 3308 	mla	r3, lr, r8, r3
 8021d0c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021d10:	9303      	str	r3, [sp, #12]
 8021d12:	d018      	beq.n	8021d46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8021d14:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021d18:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021d1c:	fb0b f303 	mul.w	r3, fp, r3
 8021d20:	fb0b fb02 	mul.w	fp, fp, r2
 8021d24:	0a1a      	lsrs	r2, r3, #8
 8021d26:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021d2a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021d2e:	441a      	add	r2, r3
 8021d30:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021d34:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021d38:	0a12      	lsrs	r2, r2, #8
 8021d3a:	0a1b      	lsrs	r3, r3, #8
 8021d3c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021d40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d44:	431a      	orrs	r2, r3
 8021d46:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021d4a:	d019      	beq.n	8021d80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8021d4c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021d50:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d54:	fb0a fb0b 	mul.w	fp, sl, fp
 8021d58:	fb0a fa06 	mul.w	sl, sl, r6
 8021d5c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021d60:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021d64:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021d68:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d6c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021d70:	445e      	add	r6, fp
 8021d72:	0a1b      	lsrs	r3, r3, #8
 8021d74:	0a36      	lsrs	r6, r6, #8
 8021d76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d7a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d7e:	431e      	orrs	r6, r3
 8021d80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021d84:	d019      	beq.n	8021dba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8021d86:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021d8a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021d8e:	fb09 fa0a 	mul.w	sl, r9, sl
 8021d92:	fb09 f904 	mul.w	r9, r9, r4
 8021d96:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021d9a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021d9e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021da2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021da6:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021daa:	4454      	add	r4, sl
 8021dac:	0a1b      	lsrs	r3, r3, #8
 8021dae:	0a24      	lsrs	r4, r4, #8
 8021db0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021db4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021db8:	431c      	orrs	r4, r3
 8021dba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021dbe:	d019      	beq.n	8021df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8021dc0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021dc4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021dc8:	fb08 f909 	mul.w	r9, r8, r9
 8021dcc:	fb08 f800 	mul.w	r8, r8, r0
 8021dd0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021dd4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021dd8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021ddc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021de0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021de4:	4448      	add	r0, r9
 8021de6:	0a1b      	lsrs	r3, r3, #8
 8021de8:	0a00      	lsrs	r0, r0, #8
 8021dea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021dee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021df2:	4318      	orrs	r0, r3
 8021df4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021df8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021dfc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021e00:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021e04:	fb0c f808 	mul.w	r8, ip, r8
 8021e08:	fb0c f606 	mul.w	r6, ip, r6
 8021e0c:	fb05 8803 	mla	r8, r5, r3, r8
 8021e10:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021e14:	fb05 6202 	mla	r2, r5, r2, r6
 8021e18:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021e1c:	fb07 8803 	mla	r8, r7, r3, r8
 8021e20:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021e24:	fb07 2704 	mla	r7, r7, r4, r2
 8021e28:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021e2c:	fb0e 8303 	mla	r3, lr, r3, r8
 8021e30:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8021e34:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021e38:	9803      	ldr	r0, [sp, #12]
 8021e3a:	b292      	uxth	r2, r2
 8021e3c:	9c02      	ldr	r4, [sp, #8]
 8021e3e:	0a1b      	lsrs	r3, r3, #8
 8021e40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e44:	4350      	muls	r0, r2
 8021e46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e4a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021e4e:	ea43 0e0e 	orr.w	lr, r3, lr
 8021e52:	1c43      	adds	r3, r0, #1
 8021e54:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021e58:	fa5f f08e 	uxtb.w	r0, lr
 8021e5c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021e60:	b2db      	uxtb	r3, r3
 8021e62:	fb14 f403 	smulbb	r4, r4, r3
 8021e66:	fb00 4002 	mla	r0, r0, r2, r4
 8021e6a:	b280      	uxth	r0, r0
 8021e6c:	1c44      	adds	r4, r0, #1
 8021e6e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021e72:	9c01      	ldr	r4, [sp, #4]
 8021e74:	fb14 f403 	smulbb	r4, r4, r3
 8021e78:	1200      	asrs	r0, r0, #8
 8021e7a:	7008      	strb	r0, [r1, #0]
 8021e7c:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8021e80:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021e84:	fb00 4002 	mla	r0, r0, r2, r4
 8021e88:	b280      	uxth	r0, r0
 8021e8a:	1c44      	adds	r4, r0, #1
 8021e8c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021e90:	1200      	asrs	r0, r0, #8
 8021e92:	7048      	strb	r0, [r1, #1]
 8021e94:	9800      	ldr	r0, [sp, #0]
 8021e96:	fb10 f303 	smulbb	r3, r0, r3
 8021e9a:	fb0e 3202 	mla	r2, lr, r2, r3
 8021e9e:	b292      	uxth	r2, r2
 8021ea0:	f102 0e01 	add.w	lr, r2, #1
 8021ea4:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021ea8:	1212      	asrs	r2, r2, #8
 8021eaa:	708a      	strb	r2, [r1, #2]
 8021eac:	b005      	add	sp, #20
 8021eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eb2:	bf00      	nop
 8021eb4:	0802aff1 	.word	0x0802aff1
 8021eb8:	0802b4e6 	.word	0x0802b4e6
 8021ebc:	0802b0ba 	.word	0x0802b0ba

08021ec0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ec4:	ed2d 8b08 	vpush	{d8-d11}
 8021ec8:	b099      	sub	sp, #100	; 0x64
 8021eca:	eeb0 aa40 	vmov.f32	s20, s0
 8021ece:	eef0 9a60 	vmov.f32	s19, s1
 8021ed2:	9306      	str	r3, [sp, #24]
 8021ed4:	eeb0 9a41 	vmov.f32	s18, s2
 8021ed8:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8021edc:	eeb0 8a62 	vmov.f32	s16, s5
 8021ee0:	9216      	str	r2, [sp, #88]	; 0x58
 8021ee2:	eef0 8a43 	vmov.f32	s17, s6
 8021ee6:	9307      	str	r3, [sp, #28]
 8021ee8:	eef0 ba44 	vmov.f32	s23, s8
 8021eec:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8021ef0:	eeb0 ba64 	vmov.f32	s22, s9
 8021ef4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021ef6:	eef0 aa45 	vmov.f32	s21, s10
 8021efa:	9310      	str	r3, [sp, #64]	; 0x40
 8021efc:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8021f00:	9017      	str	r0, [sp, #92]	; 0x5c
 8021f02:	9112      	str	r1, [sp, #72]	; 0x48
 8021f04:	6850      	ldr	r0, [r2, #4]
 8021f06:	9315      	str	r3, [sp, #84]	; 0x54
 8021f08:	6812      	ldr	r2, [r2, #0]
 8021f0a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8021f0c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8021f10:	fb00 1303 	mla	r3, r0, r3, r1
 8021f14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f18:	18d3      	adds	r3, r2, r3
 8021f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8021f1c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021f1e:	681b      	ldr	r3, [r3, #0]
 8021f20:	9311      	str	r3, [sp, #68]	; 0x44
 8021f22:	9b07      	ldr	r3, [sp, #28]
 8021f24:	009b      	lsls	r3, r3, #2
 8021f26:	930e      	str	r3, [sp, #56]	; 0x38
 8021f28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	dc03      	bgt.n	8021f36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021f2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021f30:	2b00      	cmp	r3, #0
 8021f32:	f340 833b 	ble.w	80225ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8021f36:	9b06      	ldr	r3, [sp, #24]
 8021f38:	2b00      	cmp	r3, #0
 8021f3a:	f340 8197 	ble.w	802226c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8021f3e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021f40:	1423      	asrs	r3, r4, #16
 8021f42:	1412      	asrs	r2, r2, #16
 8021f44:	d432      	bmi.n	8021fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8021f46:	1c51      	adds	r1, r2, #1
 8021f48:	9807      	ldr	r0, [sp, #28]
 8021f4a:	4288      	cmp	r0, r1
 8021f4c:	dd31      	ble.n	8021fb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021f4e:	2b00      	cmp	r3, #0
 8021f50:	db2f      	blt.n	8021fb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021f52:	1c59      	adds	r1, r3, #1
 8021f54:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021f56:	4288      	cmp	r0, r1
 8021f58:	dd2b      	ble.n	8021fb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021f5a:	9b06      	ldr	r3, [sp, #24]
 8021f5c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021f5e:	3b01      	subs	r3, #1
 8021f60:	992b      	ldr	r1, [sp, #172]	; 0xac
 8021f62:	fb02 1203 	mla	r2, r2, r3, r1
 8021f66:	1412      	asrs	r2, r2, #16
 8021f68:	d42e      	bmi.n	8021fc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021f6a:	3201      	adds	r2, #1
 8021f6c:	9907      	ldr	r1, [sp, #28]
 8021f6e:	4291      	cmp	r1, r2
 8021f70:	dd2a      	ble.n	8021fc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021f72:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021f74:	fb02 4303 	mla	r3, r2, r3, r4
 8021f78:	141b      	asrs	r3, r3, #16
 8021f7a:	d425      	bmi.n	8021fc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021f7c:	3301      	adds	r3, #1
 8021f7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021f80:	429a      	cmp	r2, r3
 8021f82:	dd21      	ble.n	8021fc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f86:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8021f8a:	f103 0e03 	add.w	lr, r3, #3
 8021f8e:	9b06      	ldr	r3, [sp, #24]
 8021f90:	9313      	str	r3, [sp, #76]	; 0x4c
 8021f92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021f94:	2b00      	cmp	r3, #0
 8021f96:	f300 81d2 	bgt.w	802233e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8021f9a:	9b06      	ldr	r3, [sp, #24]
 8021f9c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021fa2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021fa6:	4423      	add	r3, r4
 8021fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8021faa:	e161      	b.n	8022270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8021fac:	1c51      	adds	r1, r2, #1
 8021fae:	f040 8150 	bne.w	8022252 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021fb2:	9907      	ldr	r1, [sp, #28]
 8021fb4:	428a      	cmp	r2, r1
 8021fb6:	f280 814c 	bge.w	8022252 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021fba:	1c5a      	adds	r2, r3, #1
 8021fbc:	f2c0 8149 	blt.w	8022252 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021fc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021fc2:	4293      	cmp	r3, r2
 8021fc4:	f280 8145 	bge.w	8022252 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021fc8:	9b06      	ldr	r3, [sp, #24]
 8021fca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021fcc:	9314      	str	r3, [sp, #80]	; 0x50
 8021fce:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8021fd2:	9313      	str	r3, [sp, #76]	; 0x4c
 8021fd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021fd6:	2b00      	cmp	r3, #0
 8021fd8:	dddf      	ble.n	8021f9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8021fda:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021fdc:	1423      	asrs	r3, r4, #16
 8021fde:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021fe2:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8021fe6:	1412      	asrs	r2, r2, #16
 8021fe8:	f100 8190 	bmi.w	802230c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8021fec:	1c55      	adds	r5, r2, #1
 8021fee:	9f07      	ldr	r7, [sp, #28]
 8021ff0:	42af      	cmp	r7, r5
 8021ff2:	f340 818d 	ble.w	8022310 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021ff6:	2b00      	cmp	r3, #0
 8021ff8:	f2c0 818a 	blt.w	8022310 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021ffc:	1c5d      	adds	r5, r3, #1
 8021ffe:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022000:	42af      	cmp	r7, r5
 8022002:	f340 8185 	ble.w	8022310 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022006:	9d07      	ldr	r5, [sp, #28]
 8022008:	fb03 2305 	mla	r3, r3, r5, r2
 802200c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802200e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8022012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022016:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802201a:	2800      	cmp	r0, #0
 802201c:	f000 8167 	beq.w	80222ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022020:	686a      	ldr	r2, [r5, #4]
 8022022:	920b      	str	r2, [sp, #44]	; 0x2c
 8022024:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022028:	2900      	cmp	r1, #0
 802202a:	f000 8169 	beq.w	8022300 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802202e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022030:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022032:	18aa      	adds	r2, r5, r2
 8022034:	59ed      	ldr	r5, [r5, r7]
 8022036:	6852      	ldr	r2, [r2, #4]
 8022038:	9508      	str	r5, [sp, #32]
 802203a:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802203e:	0e15      	lsrs	r5, r2, #24
 8022040:	920c      	str	r2, [sp, #48]	; 0x30
 8022042:	b280      	uxth	r0, r0
 8022044:	b289      	uxth	r1, r1
 8022046:	fb00 fb01 	mul.w	fp, r0, r1
 802204a:	0100      	lsls	r0, r0, #4
 802204c:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8022050:	eba0 090b 	sub.w	r9, r0, fp
 8022054:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8022058:	b289      	uxth	r1, r1
 802205a:	fa1f f989 	uxth.w	r9, r9
 802205e:	1a52      	subs	r2, r2, r1
 8022060:	fb09 f008 	mul.w	r0, r9, r8
 8022064:	b292      	uxth	r2, r2
 8022066:	fb02 000c 	mla	r0, r2, ip, r0
 802206a:	fb01 000a 	mla	r0, r1, sl, r0
 802206e:	fb0b 0005 	mla	r0, fp, r5, r0
 8022072:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022076:	2800      	cmp	r0, #0
 8022078:	f000 80e0 	beq.w	802223c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802207c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022080:	d01b      	beq.n	80220ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8022082:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022086:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802208a:	fb0c fe0e 	mul.w	lr, ip, lr
 802208e:	fb0c fc03 	mul.w	ip, ip, r3
 8022092:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8022096:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802209a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802209e:	4473      	add	r3, lr
 80220a0:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80220a4:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80220a8:	0a1b      	lsrs	r3, r3, #8
 80220aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80220ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80220b2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80220b6:	ea43 030e 	orr.w	r3, r3, lr
 80220ba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80220be:	d01e      	beq.n	80220fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80220c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80220c2:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80220c6:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80220ca:	fb08 fc0c 	mul.w	ip, r8, ip
 80220ce:	fb08 f80e 	mul.w	r8, r8, lr
 80220d2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80220d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80220da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80220de:	44e6      	add	lr, ip
 80220e0:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80220e4:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80220e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80220ec:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80220f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80220f4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80220f8:	ea4e 0708 	orr.w	r7, lr, r8
 80220fc:	970b      	str	r7, [sp, #44]	; 0x2c
 80220fe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022102:	d01e      	beq.n	8022142 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022104:	9f08      	ldr	r7, [sp, #32]
 8022106:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802210a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802210e:	fb0a f808 	mul.w	r8, sl, r8
 8022112:	fb0a fa0c 	mul.w	sl, sl, ip
 8022116:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802211a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802211e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022122:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022126:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802212a:	44c6      	add	lr, r8
 802212c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022130:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022134:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022138:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802213c:	ea4e 070a 	orr.w	r7, lr, sl
 8022140:	9708      	str	r7, [sp, #32]
 8022142:	2dff      	cmp	r5, #255	; 0xff
 8022144:	d01d      	beq.n	8022182 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8022146:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022148:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802214c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022150:	fb05 f808 	mul.w	r8, r5, r8
 8022154:	fb05 f50c 	mul.w	r5, r5, ip
 8022158:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802215c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022160:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022164:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022168:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802216c:	44c6      	add	lr, r8
 802216e:	0a2d      	lsrs	r5, r5, #8
 8022170:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022174:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022178:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802217c:	ea4e 0505 	orr.w	r5, lr, r5
 8022180:	950c      	str	r5, [sp, #48]	; 0x30
 8022182:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022184:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022188:	9f08      	ldr	r7, [sp, #32]
 802218a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802218e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022192:	fb09 f505 	mul.w	r5, r9, r5
 8022196:	fb02 550c 	mla	r5, r2, ip, r5
 802219a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802219e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80221a0:	fb01 550c 	mla	r5, r1, ip, r5
 80221a4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80221a8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80221aa:	fb0b 550c 	mla	r5, fp, ip, r5
 80221ae:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80221b2:	fb09 f90c 	mul.w	r9, r9, ip
 80221b6:	0a2d      	lsrs	r5, r5, #8
 80221b8:	fb02 9303 	mla	r3, r2, r3, r9
 80221bc:	9a08      	ldr	r2, [sp, #32]
 80221be:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80221c2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80221c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80221c8:	fb01 330e 	mla	r3, r1, lr, r3
 80221cc:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80221d0:	fb0b 3b01 	mla	fp, fp, r1, r3
 80221d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80221d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80221d8:	4343      	muls	r3, r0
 80221da:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80221de:	1c58      	adds	r0, r3, #1
 80221e0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80221e4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80221e8:	ea45 050b 	orr.w	r5, r5, fp
 80221ec:	7833      	ldrb	r3, [r6, #0]
 80221ee:	b2ea      	uxtb	r2, r5
 80221f0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80221f4:	fb12 f201 	smulbb	r2, r2, r1
 80221f8:	b2c0      	uxtb	r0, r0
 80221fa:	fb03 2300 	mla	r3, r3, r0, r2
 80221fe:	b29b      	uxth	r3, r3
 8022200:	1c5a      	adds	r2, r3, #1
 8022202:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022206:	7872      	ldrb	r2, [r6, #1]
 8022208:	fb12 f200 	smulbb	r2, r2, r0
 802220c:	121b      	asrs	r3, r3, #8
 802220e:	7033      	strb	r3, [r6, #0]
 8022210:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022214:	0c2d      	lsrs	r5, r5, #16
 8022216:	fb03 2301 	mla	r3, r3, r1, r2
 802221a:	b29b      	uxth	r3, r3
 802221c:	1c5a      	adds	r2, r3, #1
 802221e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022222:	121b      	asrs	r3, r3, #8
 8022224:	7073      	strb	r3, [r6, #1]
 8022226:	78b3      	ldrb	r3, [r6, #2]
 8022228:	fb13 f000 	smulbb	r0, r3, r0
 802222c:	fb05 0501 	mla	r5, r5, r1, r0
 8022230:	b2ad      	uxth	r5, r5
 8022232:	1c6b      	adds	r3, r5, #1
 8022234:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022238:	122d      	asrs	r5, r5, #8
 802223a:	70b5      	strb	r5, [r6, #2]
 802223c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802223e:	3603      	adds	r6, #3
 8022240:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022242:	4413      	add	r3, r2
 8022244:	932b      	str	r3, [sp, #172]	; 0xac
 8022246:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022248:	441c      	add	r4, r3
 802224a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802224c:	3b01      	subs	r3, #1
 802224e:	9314      	str	r3, [sp, #80]	; 0x50
 8022250:	e6c0      	b.n	8021fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8022252:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022254:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022256:	4413      	add	r3, r2
 8022258:	932b      	str	r3, [sp, #172]	; 0xac
 802225a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802225c:	441c      	add	r4, r3
 802225e:	9b06      	ldr	r3, [sp, #24]
 8022260:	3b01      	subs	r3, #1
 8022262:	9306      	str	r3, [sp, #24]
 8022264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022266:	3303      	adds	r3, #3
 8022268:	930a      	str	r3, [sp, #40]	; 0x28
 802226a:	e664      	b.n	8021f36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802226c:	f47f ae75 	bne.w	8021f5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022270:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022272:	2b00      	cmp	r3, #0
 8022274:	f340 819a 	ble.w	80225ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8022278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802227c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802227e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022282:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022286:	eef0 6a48 	vmov.f32	s13, s16
 802228a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802228e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022292:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022296:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 802229a:	eef0 6a68 	vmov.f32	s13, s17
 802229e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222a2:	ee16 4a90 	vmov	r4, s13
 80222a6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80222aa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80222ae:	ee37 8a48 	vsub.f32	s16, s14, s16
 80222b2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80222b6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80222ba:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80222be:	ee18 2a10 	vmov	r2, s16
 80222c2:	eeb0 8a47 	vmov.f32	s16, s14
 80222c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80222ca:	ee18 2a90 	vmov	r2, s17
 80222ce:	932d      	str	r3, [sp, #180]	; 0xb4
 80222d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80222d2:	eef0 8a67 	vmov.f32	s17, s15
 80222d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80222da:	932e      	str	r3, [sp, #184]	; 0xb8
 80222dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80222de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80222e0:	3b01      	subs	r3, #1
 80222e2:	9312      	str	r3, [sp, #72]	; 0x48
 80222e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80222e6:	bf08      	it	eq
 80222e8:	4613      	moveq	r3, r2
 80222ea:	9306      	str	r3, [sp, #24]
 80222ec:	e61c      	b.n	8021f28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80222ee:	b151      	cbz	r1, 8022306 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80222f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80222f2:	58aa      	ldr	r2, [r5, r2]
 80222f4:	25ff      	movs	r5, #255	; 0xff
 80222f6:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80222fa:	9208      	str	r2, [sp, #32]
 80222fc:	46a8      	mov	r8, r5
 80222fe:	e6a0      	b.n	8022042 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8022300:	25ff      	movs	r5, #255	; 0xff
 8022302:	46aa      	mov	sl, r5
 8022304:	e69d      	b.n	8022042 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8022306:	25ff      	movs	r5, #255	; 0xff
 8022308:	46aa      	mov	sl, r5
 802230a:	e7f7      	b.n	80222fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 802230c:	1c57      	adds	r7, r2, #1
 802230e:	d195      	bne.n	802223c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022310:	9d07      	ldr	r5, [sp, #28]
 8022312:	4295      	cmp	r5, r2
 8022314:	dd92      	ble.n	802223c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022316:	1c5d      	adds	r5, r3, #1
 8022318:	db90      	blt.n	802223c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802231a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802231c:	429d      	cmp	r5, r3
 802231e:	dd8d      	ble.n	802223c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022320:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022322:	9201      	str	r2, [sp, #4]
 8022324:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022326:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802232a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802232c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802232e:	9300      	str	r3, [sp, #0]
 8022330:	9b07      	ldr	r3, [sp, #28]
 8022332:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8022336:	4631      	mov	r1, r6
 8022338:	f7ff fc68 	bl	8021c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 802233c:	e77e      	b.n	802223c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802233e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022340:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022344:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022346:	9d07      	ldr	r5, [sp, #28]
 8022348:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802234c:	1412      	asrs	r2, r2, #16
 802234e:	1423      	asrs	r3, r4, #16
 8022350:	fb05 2303 	mla	r3, r5, r3, r2
 8022354:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022356:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802235a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802235e:	0e1e      	lsrs	r6, r3, #24
 8022360:	2900      	cmp	r1, #0
 8022362:	f000 8114 	beq.w	802258e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8022366:	686a      	ldr	r2, [r5, #4]
 8022368:	920d      	str	r2, [sp, #52]	; 0x34
 802236a:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802236e:	2800      	cmp	r0, #0
 8022370:	f000 8116 	beq.w	80225a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8022374:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022376:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022378:	18aa      	adds	r2, r5, r2
 802237a:	59ed      	ldr	r5, [r5, r7]
 802237c:	6852      	ldr	r2, [r2, #4]
 802237e:	9509      	str	r5, [sp, #36]	; 0x24
 8022380:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022384:	0e15      	lsrs	r5, r2, #24
 8022386:	920f      	str	r2, [sp, #60]	; 0x3c
 8022388:	b289      	uxth	r1, r1
 802238a:	b280      	uxth	r0, r0
 802238c:	fb01 fa00 	mul.w	sl, r1, r0
 8022390:	0109      	lsls	r1, r1, #4
 8022392:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022396:	eba1 080a 	sub.w	r8, r1, sl
 802239a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802239e:	b280      	uxth	r0, r0
 80223a0:	fa1f f888 	uxth.w	r8, r8
 80223a4:	1a12      	subs	r2, r2, r0
 80223a6:	fb08 f10c 	mul.w	r1, r8, ip
 80223aa:	b292      	uxth	r2, r2
 80223ac:	fb02 1106 	mla	r1, r2, r6, r1
 80223b0:	fb00 1109 	mla	r1, r0, r9, r1
 80223b4:	fb0a 1105 	mla	r1, sl, r5, r1
 80223b8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80223bc:	2900      	cmp	r1, #0
 80223be:	f000 80da 	beq.w	8022576 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80223c2:	2eff      	cmp	r6, #255	; 0xff
 80223c4:	d016      	beq.n	80223f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80223c6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80223ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80223ce:	4377      	muls	r7, r6
 80223d0:	435e      	muls	r6, r3
 80223d2:	0a3b      	lsrs	r3, r7, #8
 80223d4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80223d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80223dc:	443b      	add	r3, r7
 80223de:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80223e2:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80223e6:	0a1b      	lsrs	r3, r3, #8
 80223e8:	0a3f      	lsrs	r7, r7, #8
 80223ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80223ee:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80223f2:	433b      	orrs	r3, r7
 80223f4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80223f8:	d01d      	beq.n	8022436 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 80223fa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80223fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80223fe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022402:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022406:	fb0c f606 	mul.w	r6, ip, r6
 802240a:	fb0c fc07 	mul.w	ip, ip, r7
 802240e:	0a37      	lsrs	r7, r6, #8
 8022410:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022414:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022418:	4437      	add	r7, r6
 802241a:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802241e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8022422:	0a3f      	lsrs	r7, r7, #8
 8022424:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022428:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802242c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022430:	ea47 060c 	orr.w	r6, r7, ip
 8022434:	960d      	str	r6, [sp, #52]	; 0x34
 8022436:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802243a:	d01d      	beq.n	8022478 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 802243c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802243e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022442:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022446:	fb09 fc0c 	mul.w	ip, r9, ip
 802244a:	fb09 f906 	mul.w	r9, r9, r6
 802244e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022452:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022456:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802245a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802245e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022462:	4467      	add	r7, ip
 8022464:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022468:	0a3f      	lsrs	r7, r7, #8
 802246a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802246e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022472:	ea47 0609 	orr.w	r6, r7, r9
 8022476:	9609      	str	r6, [sp, #36]	; 0x24
 8022478:	2dff      	cmp	r5, #255	; 0xff
 802247a:	d01a      	beq.n	80224b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 802247c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802247e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022482:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022486:	fb05 fc0c 	mul.w	ip, r5, ip
 802248a:	4375      	muls	r5, r6
 802248c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022490:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022494:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8022498:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802249c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80224a0:	4467      	add	r7, ip
 80224a2:	0a2d      	lsrs	r5, r5, #8
 80224a4:	0a3f      	lsrs	r7, r7, #8
 80224a6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80224aa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80224ae:	433d      	orrs	r5, r7
 80224b0:	950f      	str	r5, [sp, #60]	; 0x3c
 80224b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80224b4:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80224b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80224bc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80224c0:	fb08 f505 	mul.w	r5, r8, r5
 80224c4:	fb02 5506 	mla	r5, r2, r6, r5
 80224c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80224ca:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80224ce:	fb00 5506 	mla	r5, r0, r6, r5
 80224d2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80224d4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80224d8:	fb0a 5506 	mla	r5, sl, r6, r5
 80224dc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80224de:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80224e2:	0a2d      	lsrs	r5, r5, #8
 80224e4:	fb08 f806 	mul.w	r8, r8, r6
 80224e8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80224ec:	fb02 8303 	mla	r3, r2, r3, r8
 80224f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80224f2:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80224f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80224f8:	fb00 3307 	mla	r3, r0, r7, r3
 80224fc:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022500:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8022504:	fb01 f30b 	mul.w	r3, r1, fp
 8022508:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802250c:	1c59      	adds	r1, r3, #1
 802250e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022512:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022516:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802251a:	ea45 050c 	orr.w	r5, r5, ip
 802251e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022522:	b2ea      	uxtb	r2, r5
 8022524:	b2c9      	uxtb	r1, r1
 8022526:	fb12 f20b 	smulbb	r2, r2, fp
 802252a:	fb03 2301 	mla	r3, r3, r1, r2
 802252e:	b29b      	uxth	r3, r3
 8022530:	1c5a      	adds	r2, r3, #1
 8022532:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022536:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802253a:	fb12 f201 	smulbb	r2, r2, r1
 802253e:	121b      	asrs	r3, r3, #8
 8022540:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022544:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022548:	0c2d      	lsrs	r5, r5, #16
 802254a:	fb03 230b 	mla	r3, r3, fp, r2
 802254e:	b29b      	uxth	r3, r3
 8022550:	1c5a      	adds	r2, r3, #1
 8022552:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022556:	121b      	asrs	r3, r3, #8
 8022558:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802255c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022560:	fb13 f101 	smulbb	r1, r3, r1
 8022564:	fb05 150b 	mla	r5, r5, fp, r1
 8022568:	b2ad      	uxth	r5, r5
 802256a:	1c69      	adds	r1, r5, #1
 802256c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022570:	122d      	asrs	r5, r5, #8
 8022572:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022576:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022578:	f10e 0e03 	add.w	lr, lr, #3
 802257c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802257e:	4413      	add	r3, r2
 8022580:	932b      	str	r3, [sp, #172]	; 0xac
 8022582:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022584:	441c      	add	r4, r3
 8022586:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022588:	3b01      	subs	r3, #1
 802258a:	9313      	str	r3, [sp, #76]	; 0x4c
 802258c:	e501      	b.n	8021f92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802258e:	b150      	cbz	r0, 80225a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8022590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022592:	58aa      	ldr	r2, [r5, r2]
 8022594:	25ff      	movs	r5, #255	; 0xff
 8022596:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802259a:	9209      	str	r2, [sp, #36]	; 0x24
 802259c:	46ac      	mov	ip, r5
 802259e:	e6f3      	b.n	8022388 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80225a0:	25ff      	movs	r5, #255	; 0xff
 80225a2:	46a9      	mov	r9, r5
 80225a4:	e6f0      	b.n	8022388 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80225a6:	25ff      	movs	r5, #255	; 0xff
 80225a8:	46a9      	mov	r9, r5
 80225aa:	e7f7      	b.n	802259c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80225ac:	b019      	add	sp, #100	; 0x64
 80225ae:	ecbd 8b08 	vpop	{d8-d11}
 80225b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080225b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80225b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225bc:	b085      	sub	sp, #20
 80225be:	7888      	ldrb	r0, [r1, #2]
 80225c0:	4691      	mov	r9, r2
 80225c2:	9000      	str	r0, [sp, #0]
 80225c4:	7848      	ldrb	r0, [r1, #1]
 80225c6:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80225ca:	9001      	str	r0, [sp, #4]
 80225cc:	7808      	ldrb	r0, [r1, #0]
 80225ce:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80225d2:	9002      	str	r0, [sp, #8]
 80225d4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80225d8:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80225dc:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80225e0:	fb04 c603 	mla	r6, r4, r3, ip
 80225e4:	2c00      	cmp	r4, #0
 80225e6:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80225ea:	9a00      	ldr	r2, [sp, #0]
 80225ec:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80225f0:	9a01      	ldr	r2, [sp, #4]
 80225f2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80225f6:	db3a      	blt.n	802266e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80225f8:	45a0      	cmp	r8, r4
 80225fa:	dd38      	ble.n	802266e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80225fc:	f1bc 0f00 	cmp.w	ip, #0
 8022600:	db33      	blt.n	802266a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8022602:	4563      	cmp	r3, ip
 8022604:	dd31      	ble.n	802266a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8022606:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802260a:	f11c 0601 	adds.w	r6, ip, #1
 802260e:	d431      	bmi.n	8022674 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022610:	42b3      	cmp	r3, r6
 8022612:	dd2f      	ble.n	8022674 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022614:	b375      	cbz	r5, 8022674 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022616:	f8de 6004 	ldr.w	r6, [lr, #4]
 802261a:	3401      	adds	r4, #1
 802261c:	d42e      	bmi.n	802267c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802261e:	45a0      	cmp	r8, r4
 8022620:	dd2c      	ble.n	802267c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8022622:	b35f      	cbz	r7, 802267c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8022624:	f1bc 0f00 	cmp.w	ip, #0
 8022628:	db26      	blt.n	8022678 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802262a:	4563      	cmp	r3, ip
 802262c:	dd24      	ble.n	8022678 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802262e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8022632:	f11c 0c01 	adds.w	ip, ip, #1
 8022636:	d405      	bmi.n	8022644 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022638:	4563      	cmp	r3, ip
 802263a:	dd03      	ble.n	8022644 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802263c:	b115      	cbz	r5, 8022644 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802263e:	3301      	adds	r3, #1
 8022640:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8022644:	2d0f      	cmp	r5, #15
 8022646:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802264a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802264e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022652:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022656:	d801      	bhi.n	802265c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8022658:	2f0f      	cmp	r7, #15
 802265a:	d911      	bls.n	8022680 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 802265c:	4b77      	ldr	r3, [pc, #476]	; (802283c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 802265e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8022662:	4a77      	ldr	r2, [pc, #476]	; (8022840 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8022664:	4877      	ldr	r0, [pc, #476]	; (8022844 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8022666:	f003 f83b 	bl	80256e0 <__assert_func>
 802266a:	4602      	mov	r2, r0
 802266c:	e7cd      	b.n	802260a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 802266e:	4606      	mov	r6, r0
 8022670:	4602      	mov	r2, r0
 8022672:	e7d2      	b.n	802261a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8022674:	4606      	mov	r6, r0
 8022676:	e7d0      	b.n	802261a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8022678:	4604      	mov	r4, r0
 802267a:	e7da      	b.n	8022632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 802267c:	4604      	mov	r4, r0
 802267e:	e7e1      	b.n	8022644 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022680:	b2ab      	uxth	r3, r5
 8022682:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022686:	b2bf      	uxth	r7, r7
 8022688:	fb03 fe07 	mul.w	lr, r3, r7
 802268c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022690:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022694:	eba3 0c0e 	sub.w	ip, r3, lr
 8022698:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802269c:	b2bf      	uxth	r7, r7
 802269e:	fa1f fc8c 	uxth.w	ip, ip
 80226a2:	eba5 0507 	sub.w	r5, r5, r7
 80226a6:	fb0c f30a 	mul.w	r3, ip, sl
 80226aa:	b2ad      	uxth	r5, r5
 80226ac:	fb05 330b 	mla	r3, r5, fp, r3
 80226b0:	fb07 3309 	mla	r3, r7, r9, r3
 80226b4:	fb0e 3308 	mla	r3, lr, r8, r3
 80226b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80226bc:	9303      	str	r3, [sp, #12]
 80226be:	d018      	beq.n	80226f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80226c0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80226c4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80226c8:	fb0b f303 	mul.w	r3, fp, r3
 80226cc:	fb0b fb02 	mul.w	fp, fp, r2
 80226d0:	0a1a      	lsrs	r2, r3, #8
 80226d2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80226d6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80226da:	441a      	add	r2, r3
 80226dc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80226e0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80226e4:	0a12      	lsrs	r2, r2, #8
 80226e6:	0a1b      	lsrs	r3, r3, #8
 80226e8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80226ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80226f0:	431a      	orrs	r2, r3
 80226f2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80226f6:	d019      	beq.n	802272c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 80226f8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80226fc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022700:	fb0a fb0b 	mul.w	fp, sl, fp
 8022704:	fb0a fa06 	mul.w	sl, sl, r6
 8022708:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802270c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022710:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022714:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022718:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802271c:	445e      	add	r6, fp
 802271e:	0a1b      	lsrs	r3, r3, #8
 8022720:	0a36      	lsrs	r6, r6, #8
 8022722:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022726:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802272a:	431e      	orrs	r6, r3
 802272c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022730:	d019      	beq.n	8022766 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8022732:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022736:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802273a:	fb09 fa0a 	mul.w	sl, r9, sl
 802273e:	fb09 f904 	mul.w	r9, r9, r4
 8022742:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022746:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802274a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802274e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022752:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8022756:	4454      	add	r4, sl
 8022758:	0a1b      	lsrs	r3, r3, #8
 802275a:	0a24      	lsrs	r4, r4, #8
 802275c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022760:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022764:	431c      	orrs	r4, r3
 8022766:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802276a:	d019      	beq.n	80227a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 802276c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022770:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022774:	fb08 f909 	mul.w	r9, r8, r9
 8022778:	fb08 f800 	mul.w	r8, r8, r0
 802277c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8022780:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022784:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8022788:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802278c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022790:	4448      	add	r0, r9
 8022792:	0a1b      	lsrs	r3, r3, #8
 8022794:	0a00      	lsrs	r0, r0, #8
 8022796:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802279a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802279e:	4318      	orrs	r0, r3
 80227a0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80227a4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80227a8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80227ac:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80227b0:	fb0c f808 	mul.w	r8, ip, r8
 80227b4:	fb0c f606 	mul.w	r6, ip, r6
 80227b8:	fb05 8803 	mla	r8, r5, r3, r8
 80227bc:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80227c0:	fb05 6202 	mla	r2, r5, r2, r6
 80227c4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80227c8:	fb07 8803 	mla	r8, r7, r3, r8
 80227cc:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80227d0:	fb07 2704 	mla	r7, r7, r4, r2
 80227d4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80227d8:	fb0e 8303 	mla	r3, lr, r3, r8
 80227dc:	fb0e 7e00 	mla	lr, lr, r0, r7
 80227e0:	9802      	ldr	r0, [sp, #8]
 80227e2:	0a1b      	lsrs	r3, r3, #8
 80227e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80227e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80227ec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80227f0:	ea43 0e0e 	orr.w	lr, r3, lr
 80227f4:	9b03      	ldr	r3, [sp, #12]
 80227f6:	43db      	mvns	r3, r3
 80227f8:	b2db      	uxtb	r3, r3
 80227fa:	4358      	muls	r0, r3
 80227fc:	1c42      	adds	r2, r0, #1
 80227fe:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022802:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022806:	700a      	strb	r2, [r1, #0]
 8022808:	9a01      	ldr	r2, [sp, #4]
 802280a:	435a      	muls	r2, r3
 802280c:	1c50      	adds	r0, r2, #1
 802280e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022812:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022816:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802281a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802281e:	704a      	strb	r2, [r1, #1]
 8022820:	9a00      	ldr	r2, [sp, #0]
 8022822:	435a      	muls	r2, r3
 8022824:	4613      	mov	r3, r2
 8022826:	3201      	adds	r2, #1
 8022828:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802282c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022830:	f881 e002 	strb.w	lr, [r1, #2]
 8022834:	b005      	add	sp, #20
 8022836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802283a:	bf00      	nop
 802283c:	0802aff1 	.word	0x0802aff1
 8022840:	0802b4e6 	.word	0x0802b4e6
 8022844:	0802b0ba 	.word	0x0802b0ba

08022848 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802284c:	ed2d 8b08 	vpush	{d8-d11}
 8022850:	b097      	sub	sp, #92	; 0x5c
 8022852:	eeb0 aa40 	vmov.f32	s20, s0
 8022856:	eef0 9a60 	vmov.f32	s19, s1
 802285a:	9306      	str	r3, [sp, #24]
 802285c:	eeb0 9a41 	vmov.f32	s18, s2
 8022860:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8022864:	eeb0 8a62 	vmov.f32	s16, s5
 8022868:	9214      	str	r2, [sp, #80]	; 0x50
 802286a:	eef0 8a43 	vmov.f32	s17, s6
 802286e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022870:	eef0 ba44 	vmov.f32	s23, s8
 8022874:	9307      	str	r3, [sp, #28]
 8022876:	eeb0 ba64 	vmov.f32	s22, s9
 802287a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802287e:	eef0 aa45 	vmov.f32	s21, s10
 8022882:	9015      	str	r0, [sp, #84]	; 0x54
 8022884:	9112      	str	r1, [sp, #72]	; 0x48
 8022886:	6850      	ldr	r0, [r2, #4]
 8022888:	9310      	str	r3, [sp, #64]	; 0x40
 802288a:	6812      	ldr	r2, [r2, #0]
 802288c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802288e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022892:	fb00 1303 	mla	r3, r0, r3, r1
 8022896:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802289a:	18d3      	adds	r3, r2, r3
 802289c:	930a      	str	r3, [sp, #40]	; 0x28
 802289e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	9311      	str	r3, [sp, #68]	; 0x44
 80228a4:	9b07      	ldr	r3, [sp, #28]
 80228a6:	009b      	lsls	r3, r3, #2
 80228a8:	930e      	str	r3, [sp, #56]	; 0x38
 80228aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80228ac:	2b00      	cmp	r3, #0
 80228ae:	dc03      	bgt.n	80228b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80228b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80228b2:	2b00      	cmp	r3, #0
 80228b4:	f340 832e 	ble.w	8022f14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80228b8:	9b06      	ldr	r3, [sp, #24]
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	f340 8186 	ble.w	8022bcc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80228c0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80228c2:	1423      	asrs	r3, r4, #16
 80228c4:	1412      	asrs	r2, r2, #16
 80228c6:	d42f      	bmi.n	8022928 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80228c8:	1c51      	adds	r1, r2, #1
 80228ca:	9807      	ldr	r0, [sp, #28]
 80228cc:	4288      	cmp	r0, r1
 80228ce:	dd2e      	ble.n	802292e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80228d0:	2b00      	cmp	r3, #0
 80228d2:	db2c      	blt.n	802292e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80228d4:	1c59      	adds	r1, r3, #1
 80228d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80228d8:	4288      	cmp	r0, r1
 80228da:	dd28      	ble.n	802292e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80228dc:	9b06      	ldr	r3, [sp, #24]
 80228de:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80228e0:	3b01      	subs	r3, #1
 80228e2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80228e4:	fb02 1203 	mla	r2, r2, r3, r1
 80228e8:	1412      	asrs	r2, r2, #16
 80228ea:	d42b      	bmi.n	8022944 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80228ec:	3201      	adds	r2, #1
 80228ee:	9907      	ldr	r1, [sp, #28]
 80228f0:	4291      	cmp	r1, r2
 80228f2:	dd27      	ble.n	8022944 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80228f4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80228f6:	fb02 4303 	mla	r3, r2, r3, r4
 80228fa:	141b      	asrs	r3, r3, #16
 80228fc:	d422      	bmi.n	8022944 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80228fe:	3301      	adds	r3, #1
 8022900:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022902:	429a      	cmp	r2, r3
 8022904:	dd1e      	ble.n	8022944 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022908:	f8dd b018 	ldr.w	fp, [sp, #24]
 802290c:	1cdd      	adds	r5, r3, #3
 802290e:	f1bb 0f00 	cmp.w	fp, #0
 8022912:	f300 81c4 	bgt.w	8022c9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8022916:	9b06      	ldr	r3, [sp, #24]
 8022918:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802291c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802291e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022922:	4423      	add	r3, r4
 8022924:	930a      	str	r3, [sp, #40]	; 0x28
 8022926:	e153      	b.n	8022bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8022928:	1c51      	adds	r1, r2, #1
 802292a:	f040 8142 	bne.w	8022bb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802292e:	9907      	ldr	r1, [sp, #28]
 8022930:	428a      	cmp	r2, r1
 8022932:	f280 813e 	bge.w	8022bb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022936:	1c5a      	adds	r2, r3, #1
 8022938:	f2c0 813b 	blt.w	8022bb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802293c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802293e:	4293      	cmp	r3, r2
 8022940:	f280 8137 	bge.w	8022bb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022944:	9b06      	ldr	r3, [sp, #24]
 8022946:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022948:	9313      	str	r3, [sp, #76]	; 0x4c
 802294a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802294c:	2b00      	cmp	r3, #0
 802294e:	dde2      	ble.n	8022916 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8022950:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022952:	1423      	asrs	r3, r4, #16
 8022954:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022956:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802295a:	1409      	asrs	r1, r1, #16
 802295c:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8022960:	f100 8187 	bmi.w	8022c72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8022964:	1c4e      	adds	r6, r1, #1
 8022966:	9f07      	ldr	r7, [sp, #28]
 8022968:	42b7      	cmp	r7, r6
 802296a:	f340 8184 	ble.w	8022c76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802296e:	2b00      	cmp	r3, #0
 8022970:	f2c0 8181 	blt.w	8022c76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022974:	1c5e      	adds	r6, r3, #1
 8022976:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022978:	42b7      	cmp	r7, r6
 802297a:	f340 817c 	ble.w	8022c76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802297e:	9e07      	ldr	r6, [sp, #28]
 8022980:	fb03 1306 	mla	r3, r3, r6, r1
 8022984:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022986:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 802298a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802298e:	0e1f      	lsrs	r7, r3, #24
 8022990:	2a00      	cmp	r2, #0
 8022992:	f000 815c 	beq.w	8022c4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8022996:	6871      	ldr	r1, [r6, #4]
 8022998:	910b      	str	r1, [sp, #44]	; 0x2c
 802299a:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802299e:	2800      	cmp	r0, #0
 80229a0:	f000 815e 	beq.w	8022c60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 80229a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80229a6:	eb06 0c01 	add.w	ip, r6, r1
 80229aa:	5876      	ldr	r6, [r6, r1]
 80229ac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80229b0:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80229b4:	9608      	str	r6, [sp, #32]
 80229b6:	0e0e      	lsrs	r6, r1, #24
 80229b8:	910c      	str	r1, [sp, #48]	; 0x30
 80229ba:	b292      	uxth	r2, r2
 80229bc:	b280      	uxth	r0, r0
 80229be:	fb02 fa00 	mul.w	sl, r2, r0
 80229c2:	0112      	lsls	r2, r2, #4
 80229c4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80229c8:	eba2 080a 	sub.w	r8, r2, sl
 80229cc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80229d0:	b280      	uxth	r0, r0
 80229d2:	fa1f f888 	uxth.w	r8, r8
 80229d6:	1a09      	subs	r1, r1, r0
 80229d8:	fb08 f20e 	mul.w	r2, r8, lr
 80229dc:	b289      	uxth	r1, r1
 80229de:	fb01 2207 	mla	r2, r1, r7, r2
 80229e2:	fb00 2209 	mla	r2, r0, r9, r2
 80229e6:	fb0a 2206 	mla	r2, sl, r6, r2
 80229ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80229ee:	2a00      	cmp	r2, #0
 80229f0:	f000 80d4 	beq.w	8022b9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80229f4:	2fff      	cmp	r7, #255	; 0xff
 80229f6:	d01a      	beq.n	8022a2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 80229f8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80229fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a00:	fb07 fc0c 	mul.w	ip, r7, ip
 8022a04:	435f      	muls	r7, r3
 8022a06:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022a0a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022a0e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8022a12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a16:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8022a1a:	4463      	add	r3, ip
 8022a1c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022a20:	0a1b      	lsrs	r3, r3, #8
 8022a22:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022a26:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a2a:	ea43 030b 	orr.w	r3, r3, fp
 8022a2e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022a32:	d01e      	beq.n	8022a72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8022a34:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022a36:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8022a3a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022a3e:	fb0e fb0b 	mul.w	fp, lr, fp
 8022a42:	fb0e fe07 	mul.w	lr, lr, r7
 8022a46:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022a4a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022a4e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022a52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a56:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022a5a:	44dc      	add	ip, fp
 8022a5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022a60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022a64:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022a68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a6c:	ea4c 070e 	orr.w	r7, ip, lr
 8022a70:	970b      	str	r7, [sp, #44]	; 0x2c
 8022a72:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022a76:	d01e      	beq.n	8022ab6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022a78:	9f08      	ldr	r7, [sp, #32]
 8022a7a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022a7e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022a82:	fb09 fe0e 	mul.w	lr, r9, lr
 8022a86:	fb09 f907 	mul.w	r9, r9, r7
 8022a8a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022a8e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022a92:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022a96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a9a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022a9e:	44f4      	add	ip, lr
 8022aa0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022aa4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022aa8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022aac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ab0:	ea4c 0709 	orr.w	r7, ip, r9
 8022ab4:	9708      	str	r7, [sp, #32]
 8022ab6:	2eff      	cmp	r6, #255	; 0xff
 8022ab8:	d01c      	beq.n	8022af4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8022aba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022abc:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022ac0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022ac4:	fb06 fe0e 	mul.w	lr, r6, lr
 8022ac8:	437e      	muls	r6, r7
 8022aca:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022ace:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022ad2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022ad6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ada:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022ade:	44f4      	add	ip, lr
 8022ae0:	0a36      	lsrs	r6, r6, #8
 8022ae2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ae6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022aea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022aee:	ea4c 0606 	orr.w	r6, ip, r6
 8022af2:	960c      	str	r6, [sp, #48]	; 0x30
 8022af4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022af6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022afa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022afe:	2aff      	cmp	r2, #255	; 0xff
 8022b00:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b04:	fb08 f606 	mul.w	r6, r8, r6
 8022b08:	fb01 6607 	mla	r6, r1, r7, r6
 8022b0c:	9f08      	ldr	r7, [sp, #32]
 8022b0e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022b12:	fb00 6607 	mla	r6, r0, r7, r6
 8022b16:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022b18:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022b1c:	fb0a 6607 	mla	r6, sl, r7, r6
 8022b20:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022b22:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022b26:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022b2a:	fb08 f807 	mul.w	r8, r8, r7
 8022b2e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b32:	fb01 8303 	mla	r3, r1, r3, r8
 8022b36:	9908      	ldr	r1, [sp, #32]
 8022b38:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022b3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022b3e:	fb00 330c 	mla	r3, r0, ip, r3
 8022b42:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022b46:	fb0a 3a00 	mla	sl, sl, r0, r3
 8022b4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b4e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b52:	ea46 060a 	orr.w	r6, r6, sl
 8022b56:	b2f0      	uxtb	r0, r6
 8022b58:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022b5c:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022b60:	f000 8084 	beq.w	8022c6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022b64:	43d2      	mvns	r2, r2
 8022b66:	782b      	ldrb	r3, [r5, #0]
 8022b68:	b2d2      	uxtb	r2, r2
 8022b6a:	fb03 f702 	mul.w	r7, r3, r2
 8022b6e:	1c7b      	adds	r3, r7, #1
 8022b70:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022b74:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022b78:	702b      	strb	r3, [r5, #0]
 8022b7a:	786b      	ldrb	r3, [r5, #1]
 8022b7c:	fb03 f002 	mul.w	r0, r3, r2
 8022b80:	1c43      	adds	r3, r0, #1
 8022b82:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022b86:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022b8a:	706b      	strb	r3, [r5, #1]
 8022b8c:	78ab      	ldrb	r3, [r5, #2]
 8022b8e:	4353      	muls	r3, r2
 8022b90:	1c5a      	adds	r2, r3, #1
 8022b92:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022b96:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022b9a:	70ae      	strb	r6, [r5, #2]
 8022b9c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022b9e:	3503      	adds	r5, #3
 8022ba0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022ba2:	4413      	add	r3, r2
 8022ba4:	9329      	str	r3, [sp, #164]	; 0xa4
 8022ba6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022ba8:	441c      	add	r4, r3
 8022baa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022bac:	3b01      	subs	r3, #1
 8022bae:	9313      	str	r3, [sp, #76]	; 0x4c
 8022bb0:	e6cb      	b.n	802294a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022bb2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022bb4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022bb6:	4413      	add	r3, r2
 8022bb8:	9329      	str	r3, [sp, #164]	; 0xa4
 8022bba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022bbc:	441c      	add	r4, r3
 8022bbe:	9b06      	ldr	r3, [sp, #24]
 8022bc0:	3b01      	subs	r3, #1
 8022bc2:	9306      	str	r3, [sp, #24]
 8022bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bc6:	3303      	adds	r3, #3
 8022bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8022bca:	e675      	b.n	80228b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022bcc:	f47f ae86 	bne.w	80228dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	f340 819e 	ble.w	8022f14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8022bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022bdc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022bde:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022be2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022be6:	eef0 6a48 	vmov.f32	s13, s16
 8022bea:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022bee:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022bf2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022bf6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022bfa:	eef0 6a68 	vmov.f32	s13, s17
 8022bfe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c02:	ee16 4a90 	vmov	r4, s13
 8022c06:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022c0a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022c0e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022c12:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022c16:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022c1a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022c1e:	ee18 2a10 	vmov	r2, s16
 8022c22:	eeb0 8a47 	vmov.f32	s16, s14
 8022c26:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c2a:	ee18 2a90 	vmov	r2, s17
 8022c2e:	932b      	str	r3, [sp, #172]	; 0xac
 8022c30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c32:	eef0 8a67 	vmov.f32	s17, s15
 8022c36:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c3a:	932c      	str	r3, [sp, #176]	; 0xb0
 8022c3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022c3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022c40:	3b01      	subs	r3, #1
 8022c42:	9312      	str	r3, [sp, #72]	; 0x48
 8022c44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c46:	bf08      	it	eq
 8022c48:	4613      	moveq	r3, r2
 8022c4a:	9306      	str	r3, [sp, #24]
 8022c4c:	e62d      	b.n	80228aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8022c4e:	b150      	cbz	r0, 8022c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8022c50:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022c52:	5871      	ldr	r1, [r6, r1]
 8022c54:	26ff      	movs	r6, #255	; 0xff
 8022c56:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022c5a:	9108      	str	r1, [sp, #32]
 8022c5c:	46b6      	mov	lr, r6
 8022c5e:	e6ac      	b.n	80229ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022c60:	26ff      	movs	r6, #255	; 0xff
 8022c62:	46b1      	mov	r9, r6
 8022c64:	e6a9      	b.n	80229ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022c66:	26ff      	movs	r6, #255	; 0xff
 8022c68:	46b1      	mov	r9, r6
 8022c6a:	e7f7      	b.n	8022c5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8022c6c:	7028      	strb	r0, [r5, #0]
 8022c6e:	7069      	strb	r1, [r5, #1]
 8022c70:	e793      	b.n	8022b9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8022c72:	1c4f      	adds	r7, r1, #1
 8022c74:	d192      	bne.n	8022b9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022c76:	9e07      	ldr	r6, [sp, #28]
 8022c78:	428e      	cmp	r6, r1
 8022c7a:	dd8f      	ble.n	8022b9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022c7c:	1c5e      	adds	r6, r3, #1
 8022c7e:	db8d      	blt.n	8022b9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022c80:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022c82:	429e      	cmp	r6, r3
 8022c84:	dd8a      	ble.n	8022b9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022c86:	9600      	str	r6, [sp, #0]
 8022c88:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8022c8c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8022c90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022c92:	4629      	mov	r1, r5
 8022c94:	9b07      	ldr	r3, [sp, #28]
 8022c96:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022c98:	f7ff fc8e 	bl	80225b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8022c9c:	e77e      	b.n	8022b9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022c9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022ca0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022ca4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022ca6:	9e07      	ldr	r6, [sp, #28]
 8022ca8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022cac:	1409      	asrs	r1, r1, #16
 8022cae:	1423      	asrs	r3, r4, #16
 8022cb0:	fb06 1303 	mla	r3, r6, r3, r1
 8022cb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022cb6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022cba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8022cbe:	0e1f      	lsrs	r7, r3, #24
 8022cc0:	2a00      	cmp	r2, #0
 8022cc2:	f000 8113 	beq.w	8022eec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8022cc6:	6871      	ldr	r1, [r6, #4]
 8022cc8:	910d      	str	r1, [sp, #52]	; 0x34
 8022cca:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022cce:	2800      	cmp	r0, #0
 8022cd0:	f000 8115 	beq.w	8022efe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8022cd4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022cd6:	eb06 0c01 	add.w	ip, r6, r1
 8022cda:	5876      	ldr	r6, [r6, r1]
 8022cdc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022ce0:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022ce4:	9609      	str	r6, [sp, #36]	; 0x24
 8022ce6:	0e0e      	lsrs	r6, r1, #24
 8022ce8:	910f      	str	r1, [sp, #60]	; 0x3c
 8022cea:	b292      	uxth	r2, r2
 8022cec:	b280      	uxth	r0, r0
 8022cee:	fb02 fa00 	mul.w	sl, r2, r0
 8022cf2:	0112      	lsls	r2, r2, #4
 8022cf4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022cf8:	eba2 080a 	sub.w	r8, r2, sl
 8022cfc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022d00:	b280      	uxth	r0, r0
 8022d02:	fa1f f888 	uxth.w	r8, r8
 8022d06:	1a09      	subs	r1, r1, r0
 8022d08:	fb08 f20e 	mul.w	r2, r8, lr
 8022d0c:	b289      	uxth	r1, r1
 8022d0e:	fb01 2207 	mla	r2, r1, r7, r2
 8022d12:	fb00 2209 	mla	r2, r0, r9, r2
 8022d16:	fb0a 2206 	mla	r2, sl, r6, r2
 8022d1a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022d1e:	2a00      	cmp	r2, #0
 8022d20:	f000 80da 	beq.w	8022ed8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8022d24:	2fff      	cmp	r7, #255	; 0xff
 8022d26:	d01a      	beq.n	8022d5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8022d28:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022d2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022d30:	fb07 fc0c 	mul.w	ip, r7, ip
 8022d34:	435f      	muls	r7, r3
 8022d36:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022d3a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022d3e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022d42:	4463      	add	r3, ip
 8022d44:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8022d48:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8022d4c:	0a1b      	lsrs	r3, r3, #8
 8022d4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022d56:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022d5a:	ea43 030c 	orr.w	r3, r3, ip
 8022d5e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022d62:	d021      	beq.n	8022da8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8022d64:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022d66:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022d6a:	fb0e f707 	mul.w	r7, lr, r7
 8022d6e:	9713      	str	r7, [sp, #76]	; 0x4c
 8022d70:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022d72:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022d76:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8022d78:	fb0e fe0c 	mul.w	lr, lr, ip
 8022d7c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022d80:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022d84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022d88:	44bc      	add	ip, r7
 8022d8a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022d8e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022d92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022d9e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022da2:	ea4c 070e 	orr.w	r7, ip, lr
 8022da6:	970d      	str	r7, [sp, #52]	; 0x34
 8022da8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022dac:	d01e      	beq.n	8022dec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8022dae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022db0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022db4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022db8:	fb09 fe0e 	mul.w	lr, r9, lr
 8022dbc:	fb09 f907 	mul.w	r9, r9, r7
 8022dc0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022dc4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022dc8:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022dcc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022dd0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022dd4:	44f4      	add	ip, lr
 8022dd6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022dda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022dde:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022de2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022de6:	ea4c 0709 	orr.w	r7, ip, r9
 8022dea:	9709      	str	r7, [sp, #36]	; 0x24
 8022dec:	2eff      	cmp	r6, #255	; 0xff
 8022dee:	d01c      	beq.n	8022e2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8022df0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022df2:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022df6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022dfa:	fb06 fe0e 	mul.w	lr, r6, lr
 8022dfe:	437e      	muls	r6, r7
 8022e00:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022e04:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022e08:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022e0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e10:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022e14:	44f4      	add	ip, lr
 8022e16:	0a36      	lsrs	r6, r6, #8
 8022e18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e1c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022e20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e24:	ea4c 0606 	orr.w	r6, ip, r6
 8022e28:	960f      	str	r6, [sp, #60]	; 0x3c
 8022e2a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022e2c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022e30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e34:	2aff      	cmp	r2, #255	; 0xff
 8022e36:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022e3a:	fb08 f606 	mul.w	r6, r8, r6
 8022e3e:	fb01 6607 	mla	r6, r1, r7, r6
 8022e42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022e44:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022e48:	fb00 6607 	mla	r6, r0, r7, r6
 8022e4c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022e4e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022e52:	fb0a 6607 	mla	r6, sl, r7, r6
 8022e56:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022e58:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022e5c:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022e60:	fb08 f807 	mul.w	r8, r8, r7
 8022e64:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022e68:	fb01 8303 	mla	r3, r1, r3, r8
 8022e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022e6e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022e72:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022e74:	fb00 330c 	mla	r3, r0, ip, r3
 8022e78:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022e7c:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8022e80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e84:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022e88:	ea46 060e 	orr.w	r6, r6, lr
 8022e8c:	b2f0      	uxtb	r0, r6
 8022e8e:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022e92:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022e96:	d038      	beq.n	8022f0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8022e98:	43d2      	mvns	r2, r2
 8022e9a:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8022e9e:	b2d2      	uxtb	r2, r2
 8022ea0:	4357      	muls	r7, r2
 8022ea2:	1c7b      	adds	r3, r7, #1
 8022ea4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022ea8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022eac:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8022eb0:	4350      	muls	r0, r2
 8022eb2:	f805 3c03 	strb.w	r3, [r5, #-3]
 8022eb6:	1c43      	adds	r3, r0, #1
 8022eb8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022ebc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022ec0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8022ec4:	4353      	muls	r3, r2
 8022ec6:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022eca:	1c5a      	adds	r2, r3, #1
 8022ecc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022ed0:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022ed4:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022ed8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022eda:	3503      	adds	r5, #3
 8022edc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022ede:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022ee2:	4413      	add	r3, r2
 8022ee4:	9329      	str	r3, [sp, #164]	; 0xa4
 8022ee6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022ee8:	441c      	add	r4, r3
 8022eea:	e510      	b.n	802290e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8022eec:	b150      	cbz	r0, 8022f04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8022eee:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022ef0:	5871      	ldr	r1, [r6, r1]
 8022ef2:	26ff      	movs	r6, #255	; 0xff
 8022ef4:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022ef8:	9109      	str	r1, [sp, #36]	; 0x24
 8022efa:	46b6      	mov	lr, r6
 8022efc:	e6f5      	b.n	8022cea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022efe:	26ff      	movs	r6, #255	; 0xff
 8022f00:	46b1      	mov	r9, r6
 8022f02:	e6f2      	b.n	8022cea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022f04:	26ff      	movs	r6, #255	; 0xff
 8022f06:	46b1      	mov	r9, r6
 8022f08:	e7f7      	b.n	8022efa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8022f0a:	f805 0c03 	strb.w	r0, [r5, #-3]
 8022f0e:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022f12:	e7df      	b.n	8022ed4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8022f14:	b017      	add	sp, #92	; 0x5c
 8022f16:	ecbd 8b08 	vpop	{d8-d11}
 8022f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022f20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8022f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f24:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022f28:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022f2c:	2800      	cmp	r0, #0
 8022f2e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022f32:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022f36:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022f3a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022f3e:	db6b      	blt.n	8023018 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022f40:	4580      	cmp	r8, r0
 8022f42:	dd69      	ble.n	8023018 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022f44:	f1bc 0f00 	cmp.w	ip, #0
 8022f48:	db66      	blt.n	8023018 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022f4a:	45e1      	cmp	r9, ip
 8022f4c:	dd64      	ble.n	8023018 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022f4e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022f52:	f01e 0f01 	tst.w	lr, #1
 8022f56:	5d16      	ldrb	r6, [r2, r4]
 8022f58:	bf0c      	ite	eq
 8022f5a:	f006 060f 	andeq.w	r6, r6, #15
 8022f5e:	1136      	asrne	r6, r6, #4
 8022f60:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022f64:	b2f6      	uxtb	r6, r6
 8022f66:	f110 0a01 	adds.w	sl, r0, #1
 8022f6a:	d457      	bmi.n	802301c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022f6c:	45d0      	cmp	r8, sl
 8022f6e:	dd55      	ble.n	802301c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022f70:	f1bc 0f00 	cmp.w	ip, #0
 8022f74:	db52      	blt.n	802301c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022f76:	45e1      	cmp	r9, ip
 8022f78:	dd50      	ble.n	802301c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022f7a:	2f00      	cmp	r7, #0
 8022f7c:	f000 80ac 	beq.w	80230d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8022f80:	f10e 0b01 	add.w	fp, lr, #1
 8022f84:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022f88:	f01b 0f01 	tst.w	fp, #1
 8022f8c:	5d14      	ldrb	r4, [r2, r4]
 8022f8e:	bf0c      	ite	eq
 8022f90:	f004 040f 	andeq.w	r4, r4, #15
 8022f94:	1124      	asrne	r4, r4, #4
 8022f96:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022f9a:	b2e4      	uxtb	r4, r4
 8022f9c:	2d00      	cmp	r5, #0
 8022f9e:	f000 8096 	beq.w	80230ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8022fa2:	2800      	cmp	r0, #0
 8022fa4:	f10c 0c01 	add.w	ip, ip, #1
 8022fa8:	db3c      	blt.n	8023024 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022faa:	4580      	cmp	r8, r0
 8022fac:	dd3a      	ble.n	8023024 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022fae:	f1bc 0f00 	cmp.w	ip, #0
 8022fb2:	db37      	blt.n	8023024 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022fb4:	45e1      	cmp	r9, ip
 8022fb6:	dd35      	ble.n	8023024 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022fb8:	eb03 0b0e 	add.w	fp, r3, lr
 8022fbc:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022fc0:	f01b 0f01 	tst.w	fp, #1
 8022fc4:	5c10      	ldrb	r0, [r2, r0]
 8022fc6:	bf0c      	ite	eq
 8022fc8:	f000 000f 	andeq.w	r0, r0, #15
 8022fcc:	1100      	asrne	r0, r0, #4
 8022fce:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022fd2:	b2c0      	uxtb	r0, r0
 8022fd4:	f1ba 0f00 	cmp.w	sl, #0
 8022fd8:	db26      	blt.n	8023028 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022fda:	45d0      	cmp	r8, sl
 8022fdc:	dd24      	ble.n	8023028 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022fde:	f1bc 0f00 	cmp.w	ip, #0
 8022fe2:	db21      	blt.n	8023028 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022fe4:	45e1      	cmp	r9, ip
 8022fe6:	dd1f      	ble.n	8023028 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022fe8:	b307      	cbz	r7, 802302c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8022fea:	3301      	adds	r3, #1
 8022fec:	449e      	add	lr, r3
 8022fee:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022ff2:	f01e 0f01 	tst.w	lr, #1
 8022ff6:	5cd3      	ldrb	r3, [r2, r3]
 8022ff8:	bf0c      	ite	eq
 8022ffa:	f003 030f 	andeq.w	r3, r3, #15
 8022ffe:	111b      	asrne	r3, r3, #4
 8023000:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023004:	b2db      	uxtb	r3, r3
 8023006:	2f0f      	cmp	r7, #15
 8023008:	d911      	bls.n	802302e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 802300a:	4b35      	ldr	r3, [pc, #212]	; (80230e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 802300c:	f240 11a5 	movw	r1, #421	; 0x1a5
 8023010:	4a34      	ldr	r2, [pc, #208]	; (80230e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8023012:	4835      	ldr	r0, [pc, #212]	; (80230e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8023014:	f002 fb64 	bl	80256e0 <__assert_func>
 8023018:	2600      	movs	r6, #0
 802301a:	e7a4      	b.n	8022f66 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 802301c:	2400      	movs	r4, #0
 802301e:	e7bd      	b.n	8022f9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8023020:	463c      	mov	r4, r7
 8023022:	e7be      	b.n	8022fa2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8023024:	2000      	movs	r0, #0
 8023026:	e7d5      	b.n	8022fd4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8023028:	2300      	movs	r3, #0
 802302a:	e7ec      	b.n	8023006 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 802302c:	463b      	mov	r3, r7
 802302e:	2d0f      	cmp	r5, #15
 8023030:	d8eb      	bhi.n	802300a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023032:	b2bf      	uxth	r7, r7
 8023034:	b2ad      	uxth	r5, r5
 8023036:	fb07 f205 	mul.w	r2, r7, r5
 802303a:	013f      	lsls	r7, r7, #4
 802303c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023040:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023044:	1abf      	subs	r7, r7, r2
 8023046:	b2ad      	uxth	r5, r5
 8023048:	b2bf      	uxth	r7, r7
 802304a:	ebac 0c05 	sub.w	ip, ip, r5
 802304e:	437c      	muls	r4, r7
 8023050:	fa1f fc8c 	uxth.w	ip, ip
 8023054:	fb06 440c 	mla	r4, r6, ip, r4
 8023058:	fb05 4400 	mla	r4, r5, r0, r4
 802305c:	fb02 4203 	mla	r2, r2, r3, r4
 8023060:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023064:	b38a      	cbz	r2, 80230ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8023066:	4b21      	ldr	r3, [pc, #132]	; (80230ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8023068:	681c      	ldr	r4, [r3, #0]
 802306a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802306e:	b2e5      	uxtb	r5, r4
 8023070:	4353      	muls	r3, r2
 8023072:	1c5a      	adds	r2, r3, #1
 8023074:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023078:	1212      	asrs	r2, r2, #8
 802307a:	b290      	uxth	r0, r2
 802307c:	43d2      	mvns	r2, r2
 802307e:	fb15 f500 	smulbb	r5, r5, r0
 8023082:	b2d3      	uxtb	r3, r2
 8023084:	780a      	ldrb	r2, [r1, #0]
 8023086:	fb02 5203 	mla	r2, r2, r3, r5
 802308a:	b292      	uxth	r2, r2
 802308c:	1c55      	adds	r5, r2, #1
 802308e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023092:	784d      	ldrb	r5, [r1, #1]
 8023094:	fb15 f503 	smulbb	r5, r5, r3
 8023098:	1212      	asrs	r2, r2, #8
 802309a:	700a      	strb	r2, [r1, #0]
 802309c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80230a0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80230a4:	fb02 5200 	mla	r2, r2, r0, r5
 80230a8:	b292      	uxth	r2, r2
 80230aa:	1c55      	adds	r5, r2, #1
 80230ac:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80230b0:	1212      	asrs	r2, r2, #8
 80230b2:	704a      	strb	r2, [r1, #1]
 80230b4:	788a      	ldrb	r2, [r1, #2]
 80230b6:	fb12 f303 	smulbb	r3, r2, r3
 80230ba:	fb04 3300 	mla	r3, r4, r0, r3
 80230be:	b29b      	uxth	r3, r3
 80230c0:	1c5a      	adds	r2, r3, #1
 80230c2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80230c6:	121b      	asrs	r3, r3, #8
 80230c8:	708b      	strb	r3, [r1, #2]
 80230ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230ce:	2f0f      	cmp	r7, #15
 80230d0:	d89b      	bhi.n	802300a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80230d2:	462b      	mov	r3, r5
 80230d4:	4628      	mov	r0, r5
 80230d6:	e7ac      	b.n	8023032 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80230d8:	2d00      	cmp	r5, #0
 80230da:	d1a1      	bne.n	8023020 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80230dc:	462c      	mov	r4, r5
 80230de:	e7f8      	b.n	80230d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 80230e0:	0802aff1 	.word	0x0802aff1
 80230e4:	0802b4e6 	.word	0x0802b4e6
 80230e8:	0802b0ba 	.word	0x0802b0ba
 80230ec:	2000b394 	.word	0x2000b394

080230f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80230f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230f4:	ed2d 8b08 	vpush	{d8-d11}
 80230f8:	b097      	sub	sp, #92	; 0x5c
 80230fa:	eeb0 aa40 	vmov.f32	s20, s0
 80230fe:	eef0 9a60 	vmov.f32	s19, s1
 8023102:	9308      	str	r3, [sp, #32]
 8023104:	eeb0 9a41 	vmov.f32	s18, s2
 8023108:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802310c:	eeb0 8a62 	vmov.f32	s16, s5
 8023110:	9214      	str	r2, [sp, #80]	; 0x50
 8023112:	eef0 8a43 	vmov.f32	s17, s6
 8023116:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023118:	eef0 ba44 	vmov.f32	s23, s8
 802311c:	9309      	str	r3, [sp, #36]	; 0x24
 802311e:	eeb0 ba64 	vmov.f32	s22, s9
 8023122:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8023126:	eef0 aa45 	vmov.f32	s21, s10
 802312a:	9015      	str	r0, [sp, #84]	; 0x54
 802312c:	910c      	str	r1, [sp, #48]	; 0x30
 802312e:	930e      	str	r3, [sp, #56]	; 0x38
 8023130:	6850      	ldr	r0, [r2, #4]
 8023132:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8023136:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802313a:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802313e:	fb00 1803 	mla	r8, r0, r3, r1
 8023142:	6813      	ldr	r3, [r2, #0]
 8023144:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023148:	4498      	add	r8, r3
 802314a:	f10b 0301 	add.w	r3, fp, #1
 802314e:	f023 0301 	bic.w	r3, r3, #1
 8023152:	930f      	str	r3, [sp, #60]	; 0x3c
 8023154:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023156:	681f      	ldr	r7, [r3, #0]
 8023158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802315a:	2b00      	cmp	r3, #0
 802315c:	dc03      	bgt.n	8023166 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802315e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023160:	2b00      	cmp	r3, #0
 8023162:	f340 8238 	ble.w	80235d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023166:	9b08      	ldr	r3, [sp, #32]
 8023168:	2b00      	cmp	r3, #0
 802316a:	f340 810c 	ble.w	8023386 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802316e:	142a      	asrs	r2, r5, #16
 8023170:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023174:	d42c      	bmi.n	80231d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8023176:	1c51      	adds	r1, r2, #1
 8023178:	458b      	cmp	fp, r1
 802317a:	dd2c      	ble.n	80231d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802317c:	2b00      	cmp	r3, #0
 802317e:	db2a      	blt.n	80231d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023180:	1c59      	adds	r1, r3, #1
 8023182:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023184:	4288      	cmp	r0, r1
 8023186:	dd26      	ble.n	80231d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023188:	9b08      	ldr	r3, [sp, #32]
 802318a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802318c:	3b01      	subs	r3, #1
 802318e:	fb02 5203 	mla	r2, r2, r3, r5
 8023192:	1412      	asrs	r2, r2, #16
 8023194:	d429      	bmi.n	80231ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8023196:	3201      	adds	r2, #1
 8023198:	4593      	cmp	fp, r2
 802319a:	dd26      	ble.n	80231ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802319c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802319e:	fb02 6303 	mla	r3, r2, r3, r6
 80231a2:	141b      	asrs	r3, r3, #16
 80231a4:	d421      	bmi.n	80231ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80231a6:	3301      	adds	r3, #1
 80231a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80231aa:	429a      	cmp	r2, r3
 80231ac:	dd1d      	ble.n	80231ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80231ae:	f108 0e03 	add.w	lr, r8, #3
 80231b2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80231b6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80231ba:	f1b9 0f00 	cmp.w	r9, #0
 80231be:	f300 814f 	bgt.w	8023460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80231c2:	9b08      	ldr	r3, [sp, #32]
 80231c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80231c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80231cc:	44a0      	add	r8, r4
 80231ce:	e0dc      	b.n	802338a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80231d0:	1c51      	adds	r1, r2, #1
 80231d2:	f040 80ce 	bne.w	8023372 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80231d6:	4593      	cmp	fp, r2
 80231d8:	f340 80cb 	ble.w	8023372 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80231dc:	1c5a      	adds	r2, r3, #1
 80231de:	f2c0 80c8 	blt.w	8023372 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80231e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80231e4:	4293      	cmp	r3, r2
 80231e6:	f280 80c4 	bge.w	8023372 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80231ea:	9b08      	ldr	r3, [sp, #32]
 80231ec:	46c1      	mov	r9, r8
 80231ee:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80231f2:	930d      	str	r3, [sp, #52]	; 0x34
 80231f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80231f6:	2b00      	cmp	r3, #0
 80231f8:	dde3      	ble.n	80231c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80231fa:	1428      	asrs	r0, r5, #16
 80231fc:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023200:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023204:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023208:	f100 8111 	bmi.w	802342e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 802320c:	f100 0c01 	add.w	ip, r0, #1
 8023210:	45e3      	cmp	fp, ip
 8023212:	f340 810e 	ble.w	8023432 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023216:	2b00      	cmp	r3, #0
 8023218:	f2c0 810b 	blt.w	8023432 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802321c:	f103 0c01 	add.w	ip, r3, #1
 8023220:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023222:	4564      	cmp	r4, ip
 8023224:	f340 8105 	ble.w	8023432 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023228:	fb03 030a 	mla	r3, r3, sl, r0
 802322c:	0858      	lsrs	r0, r3, #1
 802322e:	07dc      	lsls	r4, r3, #31
 8023230:	5c38      	ldrb	r0, [r7, r0]
 8023232:	bf54      	ite	pl
 8023234:	f000 000f 	andpl.w	r0, r0, #15
 8023238:	1100      	asrmi	r0, r0, #4
 802323a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802323e:	b2c0      	uxtb	r0, r0
 8023240:	2a00      	cmp	r2, #0
 8023242:	f000 80e1 	beq.w	8023408 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8023246:	f103 0e01 	add.w	lr, r3, #1
 802324a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802324e:	f01e 0f01 	tst.w	lr, #1
 8023252:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023256:	bf0c      	ite	eq
 8023258:	f00c 0c0f 	andeq.w	ip, ip, #15
 802325c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023260:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023264:	fa5f f48c 	uxtb.w	r4, ip
 8023268:	9410      	str	r4, [sp, #64]	; 0x40
 802326a:	b1f9      	cbz	r1, 80232ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802326c:	4453      	add	r3, sl
 802326e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023272:	07dc      	lsls	r4, r3, #31
 8023274:	f103 0301 	add.w	r3, r3, #1
 8023278:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802327c:	bf54      	ite	pl
 802327e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023282:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023286:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802328a:	fa5f f48c 	uxtb.w	r4, ip
 802328e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023292:	940a      	str	r4, [sp, #40]	; 0x28
 8023294:	07dc      	lsls	r4, r3, #31
 8023296:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802329a:	bf54      	ite	pl
 802329c:	f00c 030f 	andpl.w	r3, ip, #15
 80232a0:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80232a4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80232a8:	b2db      	uxtb	r3, r3
 80232aa:	9311      	str	r3, [sp, #68]	; 0x44
 80232ac:	b292      	uxth	r2, r2
 80232ae:	b289      	uxth	r1, r1
 80232b0:	0113      	lsls	r3, r2, #4
 80232b2:	fb02 fc01 	mul.w	ip, r2, r1
 80232b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80232b8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80232bc:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80232c0:	eba3 030c 	sub.w	r3, r3, ip
 80232c4:	b289      	uxth	r1, r1
 80232c6:	b29b      	uxth	r3, r3
 80232c8:	ebae 0e01 	sub.w	lr, lr, r1
 80232cc:	4353      	muls	r3, r2
 80232ce:	fa1f fe8e 	uxth.w	lr, lr
 80232d2:	fb00 320e 	mla	r2, r0, lr, r3
 80232d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80232d8:	fb01 2203 	mla	r2, r1, r3, r2
 80232dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80232de:	fb0c 2203 	mla	r2, ip, r3, r2
 80232e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80232e6:	2a00      	cmp	r2, #0
 80232e8:	d039      	beq.n	802335e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80232ea:	4bbd      	ldr	r3, [pc, #756]	; (80235e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80232ec:	6819      	ldr	r1, [r3, #0]
 80232ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80232f0:	fa5f fc81 	uxtb.w	ip, r1
 80232f4:	435a      	muls	r2, r3
 80232f6:	1c53      	adds	r3, r2, #1
 80232f8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80232fc:	1212      	asrs	r2, r2, #8
 80232fe:	b290      	uxth	r0, r2
 8023300:	43d2      	mvns	r2, r2
 8023302:	fb1c fc00 	smulbb	ip, ip, r0
 8023306:	b2d3      	uxtb	r3, r2
 8023308:	f899 2000 	ldrb.w	r2, [r9]
 802330c:	fb02 c203 	mla	r2, r2, r3, ip
 8023310:	b292      	uxth	r2, r2
 8023312:	f102 0c01 	add.w	ip, r2, #1
 8023316:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802331a:	f899 c001 	ldrb.w	ip, [r9, #1]
 802331e:	fb1c fc03 	smulbb	ip, ip, r3
 8023322:	1212      	asrs	r2, r2, #8
 8023324:	f889 2000 	strb.w	r2, [r9]
 8023328:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802332c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8023330:	fb02 c200 	mla	r2, r2, r0, ip
 8023334:	b292      	uxth	r2, r2
 8023336:	f102 0c01 	add.w	ip, r2, #1
 802333a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802333e:	1212      	asrs	r2, r2, #8
 8023340:	f889 2001 	strb.w	r2, [r9, #1]
 8023344:	f899 2002 	ldrb.w	r2, [r9, #2]
 8023348:	fb12 f303 	smulbb	r3, r2, r3
 802334c:	fb01 3300 	mla	r3, r1, r0, r3
 8023350:	b29b      	uxth	r3, r3
 8023352:	1c5a      	adds	r2, r3, #1
 8023354:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023358:	121b      	asrs	r3, r3, #8
 802335a:	f889 3002 	strb.w	r3, [r9, #2]
 802335e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023360:	f109 0903 	add.w	r9, r9, #3
 8023364:	441d      	add	r5, r3
 8023366:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023368:	441e      	add	r6, r3
 802336a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802336c:	3b01      	subs	r3, #1
 802336e:	930d      	str	r3, [sp, #52]	; 0x34
 8023370:	e740      	b.n	80231f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8023372:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023374:	f108 0803 	add.w	r8, r8, #3
 8023378:	441d      	add	r5, r3
 802337a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802337c:	441e      	add	r6, r3
 802337e:	9b08      	ldr	r3, [sp, #32]
 8023380:	3b01      	subs	r3, #1
 8023382:	9308      	str	r3, [sp, #32]
 8023384:	e6ef      	b.n	8023166 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8023386:	f47f aeff 	bne.w	8023188 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802338a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802338c:	2b00      	cmp	r3, #0
 802338e:	f340 8122 	ble.w	80235d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023396:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023398:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802339c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80233a0:	eef0 6a48 	vmov.f32	s13, s16
 80233a4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80233a8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80233ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233b0:	ee16 5a90 	vmov	r5, s13
 80233b4:	eef0 6a68 	vmov.f32	s13, s17
 80233b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233bc:	ee16 6a90 	vmov	r6, s13
 80233c0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80233c4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80233c8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80233cc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80233d0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80233d4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80233d8:	ee18 2a10 	vmov	r2, s16
 80233dc:	eeb0 8a47 	vmov.f32	s16, s14
 80233e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80233e4:	ee18 2a90 	vmov	r2, s17
 80233e8:	932b      	str	r3, [sp, #172]	; 0xac
 80233ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80233ec:	eef0 8a67 	vmov.f32	s17, s15
 80233f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80233f4:	932c      	str	r3, [sp, #176]	; 0xb0
 80233f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80233fa:	3b01      	subs	r3, #1
 80233fc:	930c      	str	r3, [sp, #48]	; 0x30
 80233fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023400:	bf08      	it	eq
 8023402:	4613      	moveq	r3, r2
 8023404:	9308      	str	r3, [sp, #32]
 8023406:	e6a7      	b.n	8023158 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8023408:	2900      	cmp	r1, #0
 802340a:	f43f af4f 	beq.w	80232ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802340e:	4453      	add	r3, sl
 8023410:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023414:	07db      	lsls	r3, r3, #31
 8023416:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802341a:	bf54      	ite	pl
 802341c:	f00c 030f 	andpl.w	r3, ip, #15
 8023420:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023424:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023428:	b2db      	uxtb	r3, r3
 802342a:	930a      	str	r3, [sp, #40]	; 0x28
 802342c:	e73e      	b.n	80232ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802342e:	1c44      	adds	r4, r0, #1
 8023430:	d195      	bne.n	802335e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023432:	4583      	cmp	fp, r0
 8023434:	dd93      	ble.n	802335e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023436:	1c5c      	adds	r4, r3, #1
 8023438:	db91      	blt.n	802335e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802343a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802343c:	429c      	cmp	r4, r3
 802343e:	dd8e      	ble.n	802335e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023440:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023442:	9002      	str	r0, [sp, #8]
 8023444:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023446:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802344a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802344c:	463a      	mov	r2, r7
 802344e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023452:	e9cd b300 	strd	fp, r3, [sp]
 8023456:	4649      	mov	r1, r9
 8023458:	4653      	mov	r3, sl
 802345a:	f7ff fd61 	bl	8022f20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802345e:	e77e      	b.n	802335e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023460:	142a      	asrs	r2, r5, #16
 8023462:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023466:	1433      	asrs	r3, r6, #16
 8023468:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802346c:	fb0a 2303 	mla	r3, sl, r3, r2
 8023470:	085a      	lsrs	r2, r3, #1
 8023472:	07dc      	lsls	r4, r3, #31
 8023474:	5cba      	ldrb	r2, [r7, r2]
 8023476:	bf54      	ite	pl
 8023478:	f002 020f 	andpl.w	r2, r2, #15
 802347c:	1112      	asrmi	r2, r2, #4
 802347e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023482:	b2d2      	uxtb	r2, r2
 8023484:	2900      	cmp	r1, #0
 8023486:	f000 8093 	beq.w	80235b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 802348a:	1c5c      	adds	r4, r3, #1
 802348c:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8023490:	07e4      	lsls	r4, r4, #31
 8023492:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023496:	bf54      	ite	pl
 8023498:	f00c 0c0f 	andpl.w	ip, ip, #15
 802349c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80234a0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80234a4:	fa5f f48c 	uxtb.w	r4, ip
 80234a8:	9412      	str	r4, [sp, #72]	; 0x48
 80234aa:	b300      	cbz	r0, 80234ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80234ac:	4453      	add	r3, sl
 80234ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80234b2:	07dc      	lsls	r4, r3, #31
 80234b4:	f103 0301 	add.w	r3, r3, #1
 80234b8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80234bc:	bf54      	ite	pl
 80234be:	f00c 0c0f 	andpl.w	ip, ip, #15
 80234c2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80234c6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80234ca:	fa5f f48c 	uxtb.w	r4, ip
 80234ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80234d2:	940b      	str	r4, [sp, #44]	; 0x2c
 80234d4:	07dc      	lsls	r4, r3, #31
 80234d6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80234da:	bf54      	ite	pl
 80234dc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80234e0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80234e4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80234e8:	fa5f f38c 	uxtb.w	r3, ip
 80234ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80234ee:	b289      	uxth	r1, r1
 80234f0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80234f2:	b280      	uxth	r0, r0
 80234f4:	fb01 f300 	mul.w	r3, r1, r0
 80234f8:	0109      	lsls	r1, r1, #4
 80234fa:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80234fe:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8023502:	1ac9      	subs	r1, r1, r3
 8023504:	b280      	uxth	r0, r0
 8023506:	b289      	uxth	r1, r1
 8023508:	ebac 0c00 	sub.w	ip, ip, r0
 802350c:	4361      	muls	r1, r4
 802350e:	fa1f fc8c 	uxth.w	ip, ip
 8023512:	fb02 120c 	mla	r2, r2, ip, r1
 8023516:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023518:	fb00 2001 	mla	r0, r0, r1, r2
 802351c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802351e:	fb03 0302 	mla	r3, r3, r2, r0
 8023522:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023526:	2b00      	cmp	r3, #0
 8023528:	d039      	beq.n	802359e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 802352a:	4a2d      	ldr	r2, [pc, #180]	; (80235e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802352c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023530:	6810      	ldr	r0, [r2, #0]
 8023532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023534:	fa5f fc80 	uxtb.w	ip, r0
 8023538:	4353      	muls	r3, r2
 802353a:	1c5a      	adds	r2, r3, #1
 802353c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023540:	121b      	asrs	r3, r3, #8
 8023542:	b29a      	uxth	r2, r3
 8023544:	43db      	mvns	r3, r3
 8023546:	fb1c fc02 	smulbb	ip, ip, r2
 802354a:	b2db      	uxtb	r3, r3
 802354c:	fb01 c103 	mla	r1, r1, r3, ip
 8023550:	b289      	uxth	r1, r1
 8023552:	f101 0c01 	add.w	ip, r1, #1
 8023556:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802355a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802355e:	fb1c fc03 	smulbb	ip, ip, r3
 8023562:	1209      	asrs	r1, r1, #8
 8023564:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023568:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802356c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8023570:	fb01 c102 	mla	r1, r1, r2, ip
 8023574:	b289      	uxth	r1, r1
 8023576:	f101 0c01 	add.w	ip, r1, #1
 802357a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802357e:	1209      	asrs	r1, r1, #8
 8023580:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023584:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023588:	fb11 f303 	smulbb	r3, r1, r3
 802358c:	fb00 3002 	mla	r0, r0, r2, r3
 8023590:	b280      	uxth	r0, r0
 8023592:	1c42      	adds	r2, r0, #1
 8023594:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023598:	1200      	asrs	r0, r0, #8
 802359a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802359e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80235a0:	f10e 0e03 	add.w	lr, lr, #3
 80235a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80235a8:	441d      	add	r5, r3
 80235aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80235ac:	441e      	add	r6, r3
 80235ae:	e604      	b.n	80231ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80235b0:	2800      	cmp	r0, #0
 80235b2:	d09c      	beq.n	80234ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80235b4:	4453      	add	r3, sl
 80235b6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80235ba:	07db      	lsls	r3, r3, #31
 80235bc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80235c0:	bf54      	ite	pl
 80235c2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80235c6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80235ca:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80235ce:	fa5f f38c 	uxtb.w	r3, ip
 80235d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80235d4:	e78b      	b.n	80234ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80235d6:	b017      	add	sp, #92	; 0x5c
 80235d8:	ecbd 8b08 	vpop	{d8-d11}
 80235dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235e0:	2000b394 	.word	0x2000b394

080235e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80235e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235e8:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80235ec:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80235f0:	2800      	cmp	r0, #0
 80235f2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80235f6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80235fa:	fb0c 0e03 	mla	lr, ip, r3, r0
 80235fe:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023602:	db6b      	blt.n	80236dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023604:	4580      	cmp	r8, r0
 8023606:	dd69      	ble.n	80236dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023608:	f1bc 0f00 	cmp.w	ip, #0
 802360c:	db66      	blt.n	80236dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802360e:	45e1      	cmp	r9, ip
 8023610:	dd64      	ble.n	80236dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023612:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023616:	f01e 0f01 	tst.w	lr, #1
 802361a:	5d16      	ldrb	r6, [r2, r4]
 802361c:	bf0c      	ite	eq
 802361e:	f006 060f 	andeq.w	r6, r6, #15
 8023622:	1136      	asrne	r6, r6, #4
 8023624:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023628:	b2f6      	uxtb	r6, r6
 802362a:	f110 0a01 	adds.w	sl, r0, #1
 802362e:	d457      	bmi.n	80236e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023630:	45d0      	cmp	r8, sl
 8023632:	dd55      	ble.n	80236e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023634:	f1bc 0f00 	cmp.w	ip, #0
 8023638:	db52      	blt.n	80236e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802363a:	45e1      	cmp	r9, ip
 802363c:	dd50      	ble.n	80236e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802363e:	2f00      	cmp	r7, #0
 8023640:	f000 80a5 	beq.w	802378e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8023644:	f10e 0b01 	add.w	fp, lr, #1
 8023648:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802364c:	f01b 0f01 	tst.w	fp, #1
 8023650:	5d14      	ldrb	r4, [r2, r4]
 8023652:	bf0c      	ite	eq
 8023654:	f004 040f 	andeq.w	r4, r4, #15
 8023658:	1124      	asrne	r4, r4, #4
 802365a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802365e:	b2e4      	uxtb	r4, r4
 8023660:	2d00      	cmp	r5, #0
 8023662:	f000 808f 	beq.w	8023784 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8023666:	2800      	cmp	r0, #0
 8023668:	f10c 0c01 	add.w	ip, ip, #1
 802366c:	db3c      	blt.n	80236e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802366e:	4580      	cmp	r8, r0
 8023670:	dd3a      	ble.n	80236e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023672:	f1bc 0f00 	cmp.w	ip, #0
 8023676:	db37      	blt.n	80236e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023678:	45e1      	cmp	r9, ip
 802367a:	dd35      	ble.n	80236e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802367c:	eb03 0b0e 	add.w	fp, r3, lr
 8023680:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023684:	f01b 0f01 	tst.w	fp, #1
 8023688:	5c10      	ldrb	r0, [r2, r0]
 802368a:	bf0c      	ite	eq
 802368c:	f000 000f 	andeq.w	r0, r0, #15
 8023690:	1100      	asrne	r0, r0, #4
 8023692:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023696:	b2c0      	uxtb	r0, r0
 8023698:	f1ba 0f00 	cmp.w	sl, #0
 802369c:	db26      	blt.n	80236ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802369e:	45d0      	cmp	r8, sl
 80236a0:	dd24      	ble.n	80236ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80236a2:	f1bc 0f00 	cmp.w	ip, #0
 80236a6:	db21      	blt.n	80236ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80236a8:	45e1      	cmp	r9, ip
 80236aa:	dd1f      	ble.n	80236ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80236ac:	b307      	cbz	r7, 80236f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80236ae:	3301      	adds	r3, #1
 80236b0:	449e      	add	lr, r3
 80236b2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80236b6:	f01e 0f01 	tst.w	lr, #1
 80236ba:	5cd3      	ldrb	r3, [r2, r3]
 80236bc:	bf0c      	ite	eq
 80236be:	f003 030f 	andeq.w	r3, r3, #15
 80236c2:	111b      	asrne	r3, r3, #4
 80236c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80236c8:	b2db      	uxtb	r3, r3
 80236ca:	2f0f      	cmp	r7, #15
 80236cc:	d911      	bls.n	80236f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80236ce:	4b32      	ldr	r3, [pc, #200]	; (8023798 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80236d0:	f240 11a5 	movw	r1, #421	; 0x1a5
 80236d4:	4a31      	ldr	r2, [pc, #196]	; (802379c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80236d6:	4832      	ldr	r0, [pc, #200]	; (80237a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80236d8:	f002 f802 	bl	80256e0 <__assert_func>
 80236dc:	2600      	movs	r6, #0
 80236de:	e7a4      	b.n	802362a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80236e0:	2400      	movs	r4, #0
 80236e2:	e7bd      	b.n	8023660 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80236e4:	463c      	mov	r4, r7
 80236e6:	e7be      	b.n	8023666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80236e8:	2000      	movs	r0, #0
 80236ea:	e7d5      	b.n	8023698 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80236ec:	2300      	movs	r3, #0
 80236ee:	e7ec      	b.n	80236ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80236f0:	463b      	mov	r3, r7
 80236f2:	2d0f      	cmp	r5, #15
 80236f4:	d8eb      	bhi.n	80236ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80236f6:	b2bf      	uxth	r7, r7
 80236f8:	b2ad      	uxth	r5, r5
 80236fa:	fb07 f205 	mul.w	r2, r7, r5
 80236fe:	013f      	lsls	r7, r7, #4
 8023700:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023704:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023708:	1abf      	subs	r7, r7, r2
 802370a:	b2ad      	uxth	r5, r5
 802370c:	b2bf      	uxth	r7, r7
 802370e:	ebac 0c05 	sub.w	ip, ip, r5
 8023712:	437c      	muls	r4, r7
 8023714:	fa1f fc8c 	uxth.w	ip, ip
 8023718:	fb06 440c 	mla	r4, r6, ip, r4
 802371c:	fb05 4400 	mla	r4, r5, r0, r4
 8023720:	fb02 4303 	mla	r3, r2, r3, r4
 8023724:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023728:	b353      	cbz	r3, 8023780 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802372a:	4a1e      	ldr	r2, [pc, #120]	; (80237a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 802372c:	7808      	ldrb	r0, [r1, #0]
 802372e:	6814      	ldr	r4, [r2, #0]
 8023730:	b29a      	uxth	r2, r3
 8023732:	43db      	mvns	r3, r3
 8023734:	b2e5      	uxtb	r5, r4
 8023736:	b2db      	uxtb	r3, r3
 8023738:	fb15 f502 	smulbb	r5, r5, r2
 802373c:	fb00 5003 	mla	r0, r0, r3, r5
 8023740:	b280      	uxth	r0, r0
 8023742:	1c45      	adds	r5, r0, #1
 8023744:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023748:	784d      	ldrb	r5, [r1, #1]
 802374a:	fb15 f503 	smulbb	r5, r5, r3
 802374e:	1200      	asrs	r0, r0, #8
 8023750:	7008      	strb	r0, [r1, #0]
 8023752:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8023756:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802375a:	fb00 5002 	mla	r0, r0, r2, r5
 802375e:	b280      	uxth	r0, r0
 8023760:	1c45      	adds	r5, r0, #1
 8023762:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023766:	1200      	asrs	r0, r0, #8
 8023768:	7048      	strb	r0, [r1, #1]
 802376a:	7888      	ldrb	r0, [r1, #2]
 802376c:	fb10 f303 	smulbb	r3, r0, r3
 8023770:	fb04 3202 	mla	r2, r4, r2, r3
 8023774:	b292      	uxth	r2, r2
 8023776:	1c53      	adds	r3, r2, #1
 8023778:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802377c:	1212      	asrs	r2, r2, #8
 802377e:	708a      	strb	r2, [r1, #2]
 8023780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023784:	2f0f      	cmp	r7, #15
 8023786:	d8a2      	bhi.n	80236ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023788:	462b      	mov	r3, r5
 802378a:	4628      	mov	r0, r5
 802378c:	e7b3      	b.n	80236f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 802378e:	2d00      	cmp	r5, #0
 8023790:	d1a8      	bne.n	80236e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8023792:	462c      	mov	r4, r5
 8023794:	e7f8      	b.n	8023788 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8023796:	bf00      	nop
 8023798:	0802aff1 	.word	0x0802aff1
 802379c:	0802b4e6 	.word	0x0802b4e6
 80237a0:	0802b0ba 	.word	0x0802b0ba
 80237a4:	2000b394 	.word	0x2000b394

080237a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80237a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237ac:	ed2d 8b08 	vpush	{d8-d11}
 80237b0:	b095      	sub	sp, #84	; 0x54
 80237b2:	461c      	mov	r4, r3
 80237b4:	eeb0 aa40 	vmov.f32	s20, s0
 80237b8:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80237bc:	eef0 9a60 	vmov.f32	s19, s1
 80237c0:	920e      	str	r2, [sp, #56]	; 0x38
 80237c2:	eeb0 9a41 	vmov.f32	s18, s2
 80237c6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80237c8:	eeb0 8a62 	vmov.f32	s16, s5
 80237cc:	9307      	str	r3, [sp, #28]
 80237ce:	eef0 8a43 	vmov.f32	s17, s6
 80237d2:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80237d6:	eef0 ba44 	vmov.f32	s23, s8
 80237da:	9013      	str	r0, [sp, #76]	; 0x4c
 80237dc:	eeb0 ba64 	vmov.f32	s22, s9
 80237e0:	9109      	str	r1, [sp, #36]	; 0x24
 80237e2:	eef0 aa45 	vmov.f32	s21, s10
 80237e6:	9308      	str	r3, [sp, #32]
 80237e8:	6850      	ldr	r0, [r2, #4]
 80237ea:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80237ee:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80237f2:	fb00 1803 	mla	r8, r0, r3, r1
 80237f6:	6813      	ldr	r3, [r2, #0]
 80237f8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80237fc:	4498      	add	r8, r3
 80237fe:	9b07      	ldr	r3, [sp, #28]
 8023800:	3301      	adds	r3, #1
 8023802:	f023 0301 	bic.w	r3, r3, #1
 8023806:	930b      	str	r3, [sp, #44]	; 0x2c
 8023808:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802380a:	681f      	ldr	r7, [r3, #0]
 802380c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802380e:	2b00      	cmp	r3, #0
 8023810:	dc03      	bgt.n	802381a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023814:	2b00      	cmp	r3, #0
 8023816:	f340 8238 	ble.w	8023c8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802381a:	2c00      	cmp	r4, #0
 802381c:	f340 8109 	ble.w	8023a32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8023820:	142a      	asrs	r2, r5, #16
 8023822:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023826:	d42b      	bmi.n	8023880 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8023828:	1c51      	adds	r1, r2, #1
 802382a:	9807      	ldr	r0, [sp, #28]
 802382c:	4288      	cmp	r0, r1
 802382e:	dd2a      	ble.n	8023886 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023830:	2b00      	cmp	r3, #0
 8023832:	db28      	blt.n	8023886 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023834:	1c59      	adds	r1, r3, #1
 8023836:	9808      	ldr	r0, [sp, #32]
 8023838:	4288      	cmp	r0, r1
 802383a:	dd24      	ble.n	8023886 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802383c:	1e63      	subs	r3, r4, #1
 802383e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023840:	fb02 5203 	mla	r2, r2, r3, r5
 8023844:	1412      	asrs	r2, r2, #16
 8023846:	d429      	bmi.n	802389c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023848:	3201      	adds	r2, #1
 802384a:	9907      	ldr	r1, [sp, #28]
 802384c:	4291      	cmp	r1, r2
 802384e:	dd25      	ble.n	802389c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023850:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023852:	fb02 6303 	mla	r3, r2, r3, r6
 8023856:	141b      	asrs	r3, r3, #16
 8023858:	d420      	bmi.n	802389c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802385a:	3301      	adds	r3, #1
 802385c:	9a08      	ldr	r2, [sp, #32]
 802385e:	429a      	cmp	r2, r3
 8023860:	dd1c      	ble.n	802389c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023862:	f108 0e03 	add.w	lr, r8, #3
 8023866:	46a1      	mov	r9, r4
 8023868:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 802386c:	f1b9 0f00 	cmp.w	r9, #0
 8023870:	f300 8155 	bgt.w	8023b1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8023874:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023878:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802387c:	44a0      	add	r8, r4
 802387e:	e0da      	b.n	8023a36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8023880:	1c50      	adds	r0, r2, #1
 8023882:	f040 80ce 	bne.w	8023a22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8023886:	9907      	ldr	r1, [sp, #28]
 8023888:	4291      	cmp	r1, r2
 802388a:	f340 80ca 	ble.w	8023a22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802388e:	1c59      	adds	r1, r3, #1
 8023890:	f2c0 80c7 	blt.w	8023a22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8023894:	9a08      	ldr	r2, [sp, #32]
 8023896:	4293      	cmp	r3, r2
 8023898:	f280 80c3 	bge.w	8023a22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802389c:	46a3      	mov	fp, r4
 802389e:	46c1      	mov	r9, r8
 80238a0:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80238a4:	f1bb 0f00 	cmp.w	fp, #0
 80238a8:	dde4      	ble.n	8023874 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80238aa:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80238ae:	1428      	asrs	r0, r5, #16
 80238b0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80238b4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80238b8:	920a      	str	r2, [sp, #40]	; 0x28
 80238ba:	f100 8116 	bmi.w	8023aea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80238be:	f100 0c01 	add.w	ip, r0, #1
 80238c2:	9a07      	ldr	r2, [sp, #28]
 80238c4:	4562      	cmp	r2, ip
 80238c6:	f340 8112 	ble.w	8023aee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80238ca:	2b00      	cmp	r3, #0
 80238cc:	f2c0 810f 	blt.w	8023aee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80238d0:	f103 0c01 	add.w	ip, r3, #1
 80238d4:	9a08      	ldr	r2, [sp, #32]
 80238d6:	4562      	cmp	r2, ip
 80238d8:	f340 8109 	ble.w	8023aee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80238dc:	fb03 030a 	mla	r3, r3, sl, r0
 80238e0:	0858      	lsrs	r0, r3, #1
 80238e2:	07da      	lsls	r2, r3, #31
 80238e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80238e6:	5c38      	ldrb	r0, [r7, r0]
 80238e8:	bf54      	ite	pl
 80238ea:	f000 000f 	andpl.w	r0, r0, #15
 80238ee:	1100      	asrmi	r0, r0, #4
 80238f0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80238f4:	b2c0      	uxtb	r0, r0
 80238f6:	2a00      	cmp	r2, #0
 80238f8:	f000 80dd 	beq.w	8023ab6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 80238fc:	f103 0e01 	add.w	lr, r3, #1
 8023900:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8023904:	f01e 0f01 	tst.w	lr, #1
 8023908:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802390c:	bf0c      	ite	eq
 802390e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023912:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023916:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802391a:	fa5f fc8c 	uxtb.w	ip, ip
 802391e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8023922:	b301      	cbz	r1, 8023966 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023924:	4453      	add	r3, sl
 8023926:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802392a:	07da      	lsls	r2, r3, #31
 802392c:	f103 0301 	add.w	r3, r3, #1
 8023930:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023934:	bf54      	ite	pl
 8023936:	f00c 0c0f 	andpl.w	ip, ip, #15
 802393a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802393e:	07da      	lsls	r2, r3, #31
 8023940:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023944:	fa5f fc8c 	uxtb.w	ip, ip
 8023948:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 802394c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023950:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023954:	bf54      	ite	pl
 8023956:	f00c 030f 	andpl.w	r3, ip, #15
 802395a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802395e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023962:	b2db      	uxtb	r3, r3
 8023964:	9310      	str	r3, [sp, #64]	; 0x40
 8023966:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802396a:	b289      	uxth	r1, r1
 802396c:	fb02 f301 	mul.w	r3, r2, r1
 8023970:	0112      	lsls	r2, r2, #4
 8023972:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023976:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802397a:	1ad2      	subs	r2, r2, r3
 802397c:	fa1f fe81 	uxth.w	lr, r1
 8023980:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023982:	b292      	uxth	r2, r2
 8023984:	ebac 0c0e 	sub.w	ip, ip, lr
 8023988:	434a      	muls	r2, r1
 802398a:	fa1f fc8c 	uxth.w	ip, ip
 802398e:	fb00 200c 	mla	r0, r0, ip, r2
 8023992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023994:	fb0e 0002 	mla	r0, lr, r2, r0
 8023998:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802399a:	fb03 0002 	mla	r0, r3, r2, r0
 802399e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80239a2:	b3a8      	cbz	r0, 8023a10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80239a4:	4bbb      	ldr	r3, [pc, #748]	; (8023c94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80239a6:	28ff      	cmp	r0, #255	; 0xff
 80239a8:	681b      	ldr	r3, [r3, #0]
 80239aa:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 80239ae:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80239b2:	b2db      	uxtb	r3, r3
 80239b4:	f000 8092 	beq.w	8023adc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 80239b8:	b282      	uxth	r2, r0
 80239ba:	43c0      	mvns	r0, r0
 80239bc:	f899 e000 	ldrb.w	lr, [r9]
 80239c0:	fb13 f302 	smulbb	r3, r3, r2
 80239c4:	b2c0      	uxtb	r0, r0
 80239c6:	fb11 f102 	smulbb	r1, r1, r2
 80239ca:	fb0e 3300 	mla	r3, lr, r0, r3
 80239ce:	fb1c f202 	smulbb	r2, ip, r2
 80239d2:	b29b      	uxth	r3, r3
 80239d4:	f103 0e01 	add.w	lr, r3, #1
 80239d8:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80239dc:	121b      	asrs	r3, r3, #8
 80239de:	f889 3000 	strb.w	r3, [r9]
 80239e2:	f899 3001 	ldrb.w	r3, [r9, #1]
 80239e6:	fb03 1100 	mla	r1, r3, r0, r1
 80239ea:	b289      	uxth	r1, r1
 80239ec:	1c4b      	adds	r3, r1, #1
 80239ee:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80239f2:	f899 3002 	ldrb.w	r3, [r9, #2]
 80239f6:	fb03 2000 	mla	r0, r3, r0, r2
 80239fa:	1209      	asrs	r1, r1, #8
 80239fc:	b280      	uxth	r0, r0
 80239fe:	f889 1001 	strb.w	r1, [r9, #1]
 8023a02:	f100 0c01 	add.w	ip, r0, #1
 8023a06:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8023a0a:	1200      	asrs	r0, r0, #8
 8023a0c:	f889 0002 	strb.w	r0, [r9, #2]
 8023a10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023a12:	f109 0903 	add.w	r9, r9, #3
 8023a16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023a1a:	441d      	add	r5, r3
 8023a1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023a1e:	441e      	add	r6, r3
 8023a20:	e740      	b.n	80238a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023a22:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023a24:	3c01      	subs	r4, #1
 8023a26:	f108 0803 	add.w	r8, r8, #3
 8023a2a:	441d      	add	r5, r3
 8023a2c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023a2e:	441e      	add	r6, r3
 8023a30:	e6f3      	b.n	802381a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023a32:	f47f af03 	bne.w	802383c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a38:	2b00      	cmp	r3, #0
 8023a3a:	f340 8126 	ble.w	8023c8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8023a3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a44:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023a48:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023a4c:	eef0 6a48 	vmov.f32	s13, s16
 8023a50:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023a54:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023a58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a5c:	ee16 5a90 	vmov	r5, s13
 8023a60:	eef0 6a68 	vmov.f32	s13, s17
 8023a64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a68:	ee16 6a90 	vmov	r6, s13
 8023a6c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023a70:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023a74:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023a78:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023a7c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023a80:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023a84:	ee18 2a10 	vmov	r2, s16
 8023a88:	eeb0 8a47 	vmov.f32	s16, s14
 8023a8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a90:	ee18 2a90 	vmov	r2, s17
 8023a94:	9329      	str	r3, [sp, #164]	; 0xa4
 8023a96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a98:	eef0 8a67 	vmov.f32	s17, s15
 8023a9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023aa0:	932a      	str	r3, [sp, #168]	; 0xa8
 8023aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023aa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023aa6:	3b01      	subs	r3, #1
 8023aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8023aaa:	bf08      	it	eq
 8023aac:	4614      	moveq	r4, r2
 8023aae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023ab0:	bf18      	it	ne
 8023ab2:	461c      	movne	r4, r3
 8023ab4:	e6aa      	b.n	802380c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8023ab6:	2900      	cmp	r1, #0
 8023ab8:	f43f af55 	beq.w	8023966 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023abc:	4453      	add	r3, sl
 8023abe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023ac2:	07db      	lsls	r3, r3, #31
 8023ac4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023ac8:	bf54      	ite	pl
 8023aca:	f00c 030f 	andpl.w	r3, ip, #15
 8023ace:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023ad2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023ad6:	b2db      	uxtb	r3, r3
 8023ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8023ada:	e744      	b.n	8023966 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023adc:	f889 3000 	strb.w	r3, [r9]
 8023ae0:	f889 1001 	strb.w	r1, [r9, #1]
 8023ae4:	f889 c002 	strb.w	ip, [r9, #2]
 8023ae8:	e792      	b.n	8023a10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023aea:	1c42      	adds	r2, r0, #1
 8023aec:	d190      	bne.n	8023a10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023aee:	9a07      	ldr	r2, [sp, #28]
 8023af0:	4282      	cmp	r2, r0
 8023af2:	dd8d      	ble.n	8023a10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023af4:	1c5a      	adds	r2, r3, #1
 8023af6:	db8b      	blt.n	8023a10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023af8:	9a08      	ldr	r2, [sp, #32]
 8023afa:	429a      	cmp	r2, r3
 8023afc:	dd88      	ble.n	8023a10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023b00:	9105      	str	r1, [sp, #20]
 8023b02:	4649      	mov	r1, r9
 8023b04:	9002      	str	r0, [sp, #8]
 8023b06:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023b08:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023b0c:	9b08      	ldr	r3, [sp, #32]
 8023b0e:	463a      	mov	r2, r7
 8023b10:	9301      	str	r3, [sp, #4]
 8023b12:	9b07      	ldr	r3, [sp, #28]
 8023b14:	9300      	str	r3, [sp, #0]
 8023b16:	4653      	mov	r3, sl
 8023b18:	f7ff fd64 	bl	80235e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023b1c:	e778      	b.n	8023a10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023b1e:	142a      	asrs	r2, r5, #16
 8023b20:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023b24:	1433      	asrs	r3, r6, #16
 8023b26:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023b2a:	fb0a 2303 	mla	r3, sl, r3, r2
 8023b2e:	085a      	lsrs	r2, r3, #1
 8023b30:	07d9      	lsls	r1, r3, #31
 8023b32:	5cba      	ldrb	r2, [r7, r2]
 8023b34:	bf54      	ite	pl
 8023b36:	f002 020f 	andpl.w	r2, r2, #15
 8023b3a:	1112      	asrmi	r2, r2, #4
 8023b3c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023b40:	b2d2      	uxtb	r2, r2
 8023b42:	2800      	cmp	r0, #0
 8023b44:	f000 808a 	beq.w	8023c5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8023b48:	f103 0b01 	add.w	fp, r3, #1
 8023b4c:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8023b50:	f01b 0f01 	tst.w	fp, #1
 8023b54:	5c79      	ldrb	r1, [r7, r1]
 8023b56:	bf0c      	ite	eq
 8023b58:	f001 010f 	andeq.w	r1, r1, #15
 8023b5c:	1109      	asrne	r1, r1, #4
 8023b5e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023b62:	b2c9      	uxtb	r1, r1
 8023b64:	9111      	str	r1, [sp, #68]	; 0x44
 8023b66:	f1bc 0f00 	cmp.w	ip, #0
 8023b6a:	d019      	beq.n	8023ba0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023b6c:	4453      	add	r3, sl
 8023b6e:	0859      	lsrs	r1, r3, #1
 8023b70:	f013 0f01 	tst.w	r3, #1
 8023b74:	f103 0301 	add.w	r3, r3, #1
 8023b78:	5c79      	ldrb	r1, [r7, r1]
 8023b7a:	bf0c      	ite	eq
 8023b7c:	f001 010f 	andeq.w	r1, r1, #15
 8023b80:	1109      	asrne	r1, r1, #4
 8023b82:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023b86:	b2c9      	uxtb	r1, r1
 8023b88:	910d      	str	r1, [sp, #52]	; 0x34
 8023b8a:	0859      	lsrs	r1, r3, #1
 8023b8c:	07db      	lsls	r3, r3, #31
 8023b8e:	5c79      	ldrb	r1, [r7, r1]
 8023b90:	bf54      	ite	pl
 8023b92:	f001 010f 	andpl.w	r1, r1, #15
 8023b96:	1109      	asrmi	r1, r1, #4
 8023b98:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023b9c:	b2c9      	uxtb	r1, r1
 8023b9e:	9112      	str	r1, [sp, #72]	; 0x48
 8023ba0:	b280      	uxth	r0, r0
 8023ba2:	fa1f fc8c 	uxth.w	ip, ip
 8023ba6:	fb00 f30c 	mul.w	r3, r0, ip
 8023baa:	0100      	lsls	r0, r0, #4
 8023bac:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8023bb0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023bb4:	1ac0      	subs	r0, r0, r3
 8023bb6:	fa1f fc8c 	uxth.w	ip, ip
 8023bba:	b280      	uxth	r0, r0
 8023bbc:	eba1 010c 	sub.w	r1, r1, ip
 8023bc0:	fa1f fb81 	uxth.w	fp, r1
 8023bc4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023bc6:	4348      	muls	r0, r1
 8023bc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023bca:	fb02 020b 	mla	r2, r2, fp, r0
 8023bce:	fb0c 2c01 	mla	ip, ip, r1, r2
 8023bd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023bd4:	fb03 c302 	mla	r3, r3, r2, ip
 8023bd8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023bdc:	b3ab      	cbz	r3, 8023c4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023bde:	4a2d      	ldr	r2, [pc, #180]	; (8023c94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023be0:	2bff      	cmp	r3, #255	; 0xff
 8023be2:	6811      	ldr	r1, [r2, #0]
 8023be4:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8023be8:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8023bec:	b2c9      	uxtb	r1, r1
 8023bee:	d045      	beq.n	8023c7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8023bf0:	b298      	uxth	r0, r3
 8023bf2:	43db      	mvns	r3, r3
 8023bf4:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8023bf8:	fb11 f100 	smulbb	r1, r1, r0
 8023bfc:	b2db      	uxtb	r3, r3
 8023bfe:	fb1c fc00 	smulbb	ip, ip, r0
 8023c02:	fb02 1103 	mla	r1, r2, r3, r1
 8023c06:	fb1b f000 	smulbb	r0, fp, r0
 8023c0a:	b289      	uxth	r1, r1
 8023c0c:	1c4a      	adds	r2, r1, #1
 8023c0e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023c12:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023c16:	fb02 cc03 	mla	ip, r2, r3, ip
 8023c1a:	1209      	asrs	r1, r1, #8
 8023c1c:	fa1f fc8c 	uxth.w	ip, ip
 8023c20:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023c24:	f10c 0201 	add.w	r2, ip, #1
 8023c28:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023c2c:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8023c30:	fb02 0303 	mla	r3, r2, r3, r0
 8023c34:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023c38:	b29b      	uxth	r3, r3
 8023c3a:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023c3e:	1c5a      	adds	r2, r3, #1
 8023c40:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023c44:	121b      	asrs	r3, r3, #8
 8023c46:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8023c4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023c4c:	f10e 0e03 	add.w	lr, lr, #3
 8023c50:	f109 39ff 	add.w	r9, r9, #4294967295
 8023c54:	441d      	add	r5, r3
 8023c56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023c58:	441e      	add	r6, r3
 8023c5a:	e607      	b.n	802386c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8023c5c:	f1bc 0f00 	cmp.w	ip, #0
 8023c60:	d09e      	beq.n	8023ba0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023c62:	4453      	add	r3, sl
 8023c64:	0859      	lsrs	r1, r3, #1
 8023c66:	07db      	lsls	r3, r3, #31
 8023c68:	5c79      	ldrb	r1, [r7, r1]
 8023c6a:	bf54      	ite	pl
 8023c6c:	f001 010f 	andpl.w	r1, r1, #15
 8023c70:	1109      	asrmi	r1, r1, #4
 8023c72:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023c76:	b2c9      	uxtb	r1, r1
 8023c78:	910d      	str	r1, [sp, #52]	; 0x34
 8023c7a:	e791      	b.n	8023ba0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023c7c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023c80:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023c84:	f80e bc01 	strb.w	fp, [lr, #-1]
 8023c88:	e7df      	b.n	8023c4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023c8a:	b015      	add	sp, #84	; 0x54
 8023c8c:	ecbd 8b08 	vpop	{d8-d11}
 8023c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c94:	2000b394 	.word	0x2000b394

08023c98 <CRC_Lock>:
 8023c98:	4a1d      	ldr	r2, [pc, #116]	; (8023d10 <CRC_Lock+0x78>)
 8023c9a:	b530      	push	{r4, r5, lr}
 8023c9c:	6813      	ldr	r3, [r2, #0]
 8023c9e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8023ca2:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023ca6:	f023 0301 	bic.w	r3, r3, #1
 8023caa:	6013      	str	r3, [r2, #0]
 8023cac:	4b19      	ldr	r3, [pc, #100]	; (8023d14 <CRC_Lock+0x7c>)
 8023cae:	681a      	ldr	r2, [r3, #0]
 8023cb0:	4022      	ands	r2, r4
 8023cb2:	42aa      	cmp	r2, r5
 8023cb4:	d005      	beq.n	8023cc2 <CRC_Lock+0x2a>
 8023cb6:	681b      	ldr	r3, [r3, #0]
 8023cb8:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023cbc:	4023      	ands	r3, r4
 8023cbe:	4293      	cmp	r3, r2
 8023cc0:	d11d      	bne.n	8023cfe <CRC_Lock+0x66>
 8023cc2:	4b15      	ldr	r3, [pc, #84]	; (8023d18 <CRC_Lock+0x80>)
 8023cc4:	681b      	ldr	r3, [r3, #0]
 8023cc6:	b9d3      	cbnz	r3, 8023cfe <CRC_Lock+0x66>
 8023cc8:	4a14      	ldr	r2, [pc, #80]	; (8023d1c <CRC_Lock+0x84>)
 8023cca:	6813      	ldr	r3, [r2, #0]
 8023ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023cd0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8023cd4:	d006      	beq.n	8023ce4 <CRC_Lock+0x4c>
 8023cd6:	6813      	ldr	r3, [r2, #0]
 8023cd8:	f240 4283 	movw	r2, #1155	; 0x483
 8023cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023ce0:	4293      	cmp	r3, r2
 8023ce2:	d10c      	bne.n	8023cfe <CRC_Lock+0x66>
 8023ce4:	4b0e      	ldr	r3, [pc, #56]	; (8023d20 <CRC_Lock+0x88>)
 8023ce6:	2201      	movs	r2, #1
 8023ce8:	601a      	str	r2, [r3, #0]
 8023cea:	681a      	ldr	r2, [r3, #0]
 8023cec:	2a00      	cmp	r2, #0
 8023cee:	d1fc      	bne.n	8023cea <CRC_Lock+0x52>
 8023cf0:	4b0c      	ldr	r3, [pc, #48]	; (8023d24 <CRC_Lock+0x8c>)
 8023cf2:	6018      	str	r0, [r3, #0]
 8023cf4:	6818      	ldr	r0, [r3, #0]
 8023cf6:	1a43      	subs	r3, r0, r1
 8023cf8:	4258      	negs	r0, r3
 8023cfa:	4158      	adcs	r0, r3
 8023cfc:	bd30      	pop	{r4, r5, pc}
 8023cfe:	4b0a      	ldr	r3, [pc, #40]	; (8023d28 <CRC_Lock+0x90>)
 8023d00:	2201      	movs	r2, #1
 8023d02:	601a      	str	r2, [r3, #0]
 8023d04:	681a      	ldr	r2, [r3, #0]
 8023d06:	2a00      	cmp	r2, #0
 8023d08:	d1fc      	bne.n	8023d04 <CRC_Lock+0x6c>
 8023d0a:	4b08      	ldr	r3, [pc, #32]	; (8023d2c <CRC_Lock+0x94>)
 8023d0c:	e7f1      	b.n	8023cf2 <CRC_Lock+0x5a>
 8023d0e:	bf00      	nop
 8023d10:	e0002000 	.word	0xe0002000
 8023d14:	e000ed00 	.word	0xe000ed00
 8023d18:	e0042000 	.word	0xe0042000
 8023d1c:	5c001000 	.word	0x5c001000
 8023d20:	58024c08 	.word	0x58024c08
 8023d24:	58024c00 	.word	0x58024c00
 8023d28:	40023008 	.word	0x40023008
 8023d2c:	40023000 	.word	0x40023000

08023d30 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023d30:	6101      	str	r1, [r0, #16]
 8023d32:	4770      	bx	lr

08023d34 <_ZN8touchgfx8Gestures4tickEv>:
 8023d34:	7b83      	ldrb	r3, [r0, #14]
 8023d36:	b14b      	cbz	r3, 8023d4c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023d38:	8903      	ldrh	r3, [r0, #8]
 8023d3a:	3301      	adds	r3, #1
 8023d3c:	b29b      	uxth	r3, r3
 8023d3e:	2b07      	cmp	r3, #7
 8023d40:	8103      	strh	r3, [r0, #8]
 8023d42:	bf81      	itttt	hi
 8023d44:	2300      	movhi	r3, #0
 8023d46:	8143      	strhhi	r3, [r0, #10]
 8023d48:	8183      	strhhi	r3, [r0, #12]
 8023d4a:	7383      	strbhi	r3, [r0, #14]
 8023d4c:	4770      	bx	lr
	...

08023d50 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023d50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023d54:	4604      	mov	r4, r0
 8023d56:	4698      	mov	r8, r3
 8023d58:	8880      	ldrh	r0, [r0, #4]
 8023d5a:	4617      	mov	r7, r2
 8023d5c:	4b1d      	ldr	r3, [pc, #116]	; (8023dd4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8023d5e:	460e      	mov	r6, r1
 8023d60:	f8ad 0006 	strh.w	r0, [sp, #6]
 8023d64:	eba8 0000 	sub.w	r0, r8, r0
 8023d68:	9300      	str	r3, [sp, #0]
 8023d6a:	2300      	movs	r3, #0
 8023d6c:	b280      	uxth	r0, r0
 8023d6e:	8aa2      	ldrh	r2, [r4, #20]
 8023d70:	f88d 3004 	strb.w	r3, [sp, #4]
 8023d74:	b203      	sxth	r3, r0
 8023d76:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023d7a:	88e1      	ldrh	r1, [r4, #6]
 8023d7c:	2b00      	cmp	r3, #0
 8023d7e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023d82:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023d86:	bfb8      	it	lt
 8023d88:	4240      	neglt	r0, r0
 8023d8a:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023d8e:	bfb8      	it	lt
 8023d90:	b203      	sxthlt	r3, r0
 8023d92:	4293      	cmp	r3, r2
 8023d94:	dc08      	bgt.n	8023da8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8023d96:	1a69      	subs	r1, r5, r1
 8023d98:	b289      	uxth	r1, r1
 8023d9a:	b20b      	sxth	r3, r1
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	bfbc      	itt	lt
 8023da0:	4249      	neglt	r1, r1
 8023da2:	b20b      	sxthlt	r3, r1
 8023da4:	429a      	cmp	r2, r3
 8023da6:	da13      	bge.n	8023dd0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8023da8:	6920      	ldr	r0, [r4, #16]
 8023daa:	4669      	mov	r1, sp
 8023dac:	eba8 0606 	sub.w	r6, r8, r6
 8023db0:	1bef      	subs	r7, r5, r7
 8023db2:	6803      	ldr	r3, [r0, #0]
 8023db4:	685b      	ldr	r3, [r3, #4]
 8023db6:	4798      	blx	r3
 8023db8:	2300      	movs	r3, #0
 8023dba:	2001      	movs	r0, #1
 8023dbc:	8166      	strh	r6, [r4, #10]
 8023dbe:	8123      	strh	r3, [r4, #8]
 8023dc0:	81a7      	strh	r7, [r4, #12]
 8023dc2:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023dc6:	80e5      	strh	r5, [r4, #6]
 8023dc8:	73a0      	strb	r0, [r4, #14]
 8023dca:	b004      	add	sp, #16
 8023dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023dd0:	2000      	movs	r0, #0
 8023dd2:	e7fa      	b.n	8023dca <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8023dd4:	0802a44c 	.word	0x0802a44c

08023dd8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023dda:	461e      	mov	r6, r3
 8023ddc:	1e4b      	subs	r3, r1, #1
 8023dde:	b085      	sub	sp, #20
 8023de0:	4604      	mov	r4, r0
 8023de2:	2b01      	cmp	r3, #1
 8023de4:	460d      	mov	r5, r1
 8023de6:	4617      	mov	r7, r2
 8023de8:	d84b      	bhi.n	8023e82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023dea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023dee:	1cd3      	adds	r3, r2, #3
 8023df0:	b29b      	uxth	r3, r3
 8023df2:	2b06      	cmp	r3, #6
 8023df4:	d916      	bls.n	8023e24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023df6:	f8df c098 	ldr.w	ip, [pc, #152]	; 8023e90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023dfa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023dfe:	f8cd c004 	str.w	ip, [sp, #4]
 8023e02:	f04f 0c00 	mov.w	ip, #0
 8023e06:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023e0a:	6900      	ldr	r0, [r0, #16]
 8023e0c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023e10:	a901      	add	r1, sp, #4
 8023e12:	f88d c008 	strb.w	ip, [sp, #8]
 8023e16:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023e1a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023e1e:	6803      	ldr	r3, [r0, #0]
 8023e20:	689b      	ldr	r3, [r3, #8]
 8023e22:	4798      	blx	r3
 8023e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023e28:	1cd3      	adds	r3, r2, #3
 8023e2a:	b29b      	uxth	r3, r3
 8023e2c:	2b06      	cmp	r3, #6
 8023e2e:	d916      	bls.n	8023e5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023e30:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8023e90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023e34:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023e38:	f8cd c004 	str.w	ip, [sp, #4]
 8023e3c:	f04f 0c01 	mov.w	ip, #1
 8023e40:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023e44:	6920      	ldr	r0, [r4, #16]
 8023e46:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023e4a:	a901      	add	r1, sp, #4
 8023e4c:	f88d c008 	strb.w	ip, [sp, #8]
 8023e50:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023e54:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023e58:	6803      	ldr	r3, [r0, #0]
 8023e5a:	689b      	ldr	r3, [r3, #8]
 8023e5c:	4798      	blx	r3
 8023e5e:	4b0b      	ldr	r3, [pc, #44]	; (8023e8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8023e60:	a901      	add	r1, sp, #4
 8023e62:	6920      	ldr	r0, [r4, #16]
 8023e64:	9301      	str	r3, [sp, #4]
 8023e66:	2300      	movs	r3, #0
 8023e68:	f88d 5008 	strb.w	r5, [sp, #8]
 8023e6c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023e70:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023e74:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023e78:	6803      	ldr	r3, [r0, #0]
 8023e7a:	681b      	ldr	r3, [r3, #0]
 8023e7c:	4798      	blx	r3
 8023e7e:	b005      	add	sp, #20
 8023e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023e82:	2900      	cmp	r1, #0
 8023e84:	d1eb      	bne.n	8023e5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023e86:	80a2      	strh	r2, [r4, #4]
 8023e88:	80c6      	strh	r6, [r0, #6]
 8023e8a:	e7e8      	b.n	8023e5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023e8c:	0802a438 	.word	0x0802a438
 8023e90:	0802a460 	.word	0x0802a460

08023e94 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>:
 8023e94:	10c9      	asrs	r1, r1, #3
 8023e96:	2900      	cmp	r1, #0
 8023e98:	bfb8      	it	lt
 8023e9a:	4249      	neglt	r1, r1
 8023e9c:	2801      	cmp	r0, #1
 8023e9e:	d108      	bne.n	8023eb2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8023ea0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8023ea4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023ea8:	4601      	mov	r1, r0
 8023eaa:	dd02      	ble.n	8023eb2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8023eac:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8023eb0:	4770      	bx	lr
 8023eb2:	29ff      	cmp	r1, #255	; 0xff
 8023eb4:	bfa8      	it	ge
 8023eb6:	21ff      	movge	r1, #255	; 0xff
 8023eb8:	4608      	mov	r0, r1
 8023eba:	4770      	bx	lr

08023ebc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8023ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ec0:	688c      	ldr	r4, [r1, #8]
 8023ec2:	b087      	sub	sp, #28
 8023ec4:	4607      	mov	r7, r0
 8023ec6:	2c00      	cmp	r4, #0
 8023ec8:	db2b      	blt.n	8023f22 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023eca:	6803      	ldr	r3, [r0, #0]
 8023ecc:	691a      	ldr	r2, [r3, #16]
 8023ece:	42a2      	cmp	r2, r4
 8023ed0:	dd27      	ble.n	8023f22 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023ed2:	685a      	ldr	r2, [r3, #4]
 8023ed4:	695e      	ldr	r6, [r3, #20]
 8023ed6:	68cd      	ldr	r5, [r1, #12]
 8023ed8:	fb06 2604 	mla	r6, r6, r4, r2
 8023edc:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8023ee0:	698a      	ldr	r2, [r1, #24]
 8023ee2:	f893 a008 	ldrb.w	sl, [r3, #8]
 8023ee6:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8023eea:	9205      	str	r2, [sp, #20]
 8023eec:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8023ef0:	9b05      	ldr	r3, [sp, #20]
 8023ef2:	6839      	ldr	r1, [r7, #0]
 8023ef4:	eb03 0c02 	add.w	ip, r3, r2
 8023ef8:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8023efc:	68c9      	ldr	r1, [r1, #12]
 8023efe:	1898      	adds	r0, r3, r2
 8023f00:	4288      	cmp	r0, r1
 8023f02:	db02      	blt.n	8023f0a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8023f04:	1a8b      	subs	r3, r1, r2
 8023f06:	2b00      	cmp	r3, #0
 8023f08:	dd09      	ble.n	8023f1e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8023f0a:	6878      	ldr	r0, [r7, #4]
 8023f0c:	6801      	ldr	r1, [r0, #0]
 8023f0e:	9400      	str	r4, [sp, #0]
 8023f10:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8023f14:	4653      	mov	r3, sl
 8023f16:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8023f1a:	4631      	mov	r1, r6
 8023f1c:	47d8      	blx	fp
 8023f1e:	3d01      	subs	r5, #1
 8023f20:	d1e4      	bne.n	8023eec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8023f22:	b007      	add	sp, #28
 8023f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023f28 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8023f28:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8023f2c:	b90b      	cbnz	r3, 8023f32 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8023f2e:	f001 b970 	b.w	8025212 <_ZN8touchgfx7Outline6lineToEii>
 8023f32:	4770      	bx	lr

08023f34 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8023f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023f38:	4604      	mov	r4, r0
 8023f3a:	2600      	movs	r6, #0
 8023f3c:	4b8e      	ldr	r3, [pc, #568]	; (8024178 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8023f3e:	f100 0518 	add.w	r5, r0, #24
 8023f42:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8023f46:	b086      	sub	sp, #24
 8023f48:	4690      	mov	r8, r2
 8023f4a:	e9c0 3100 	strd	r3, r1, [r0]
 8023f4e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8023f52:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8023f56:	4628      	mov	r0, r5
 8023f58:	f001 fb7a 	bl	8025650 <_ZN8touchgfx15RenderingBufferC1Ev>
 8023f5c:	4638      	mov	r0, r7
 8023f5e:	f000 fb41 	bl	80245e4 <_ZN8touchgfx7OutlineC1Ev>
 8023f62:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8023f66:	f001 fb1f 	bl	80255a8 <_ZN8touchgfx8ScanlineC1Ev>
 8023f6a:	2301      	movs	r3, #1
 8023f6c:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8023f70:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8023f74:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023f78:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8023f7c:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8023f80:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8023f84:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8023f88:	f7f4 fa1c 	bl	80183c4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8023f8c:	b928      	cbnz	r0, 8023f9a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8023f8e:	4b7b      	ldr	r3, [pc, #492]	; (802417c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8023f90:	2118      	movs	r1, #24
 8023f92:	4a7b      	ldr	r2, [pc, #492]	; (8024180 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023f94:	487b      	ldr	r0, [pc, #492]	; (8024184 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8023f96:	f001 fba3 	bl	80256e0 <__assert_func>
 8023f9a:	f9b8 2000 	ldrsh.w	r2, [r8]
 8023f9e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8023fa2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8023fa6:	4410      	add	r0, r2
 8023fa8:	9602      	str	r6, [sp, #8]
 8023faa:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8023fae:	b280      	uxth	r0, r0
 8023fb0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8023fb4:	fa0f fa80 	sxth.w	sl, r0
 8023fb8:	f1ba 0f00 	cmp.w	sl, #0
 8023fbc:	dd70      	ble.n	80240a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023fbe:	4591      	cmp	r9, r2
 8023fc0:	dd6e      	ble.n	80240a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023fc2:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8023fc6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8023fca:	440b      	add	r3, r1
 8023fcc:	b29b      	uxth	r3, r3
 8023fce:	b21e      	sxth	r6, r3
 8023fd0:	2e00      	cmp	r6, #0
 8023fd2:	dd65      	ble.n	80240a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023fd4:	458e      	cmp	lr, r1
 8023fd6:	dd63      	ble.n	80240a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023fd8:	45d1      	cmp	r9, sl
 8023fda:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8023fde:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8023fe2:	bfb8      	it	lt
 8023fe4:	fa1f f089 	uxthlt.w	r0, r9
 8023fe8:	45b6      	cmp	lr, r6
 8023fea:	f8ad 2008 	strh.w	r2, [sp, #8]
 8023fee:	bfb8      	it	lt
 8023ff0:	fa1f f38e 	uxthlt.w	r3, lr
 8023ff4:	1a80      	subs	r0, r0, r2
 8023ff6:	f8ad 100a 	strh.w	r1, [sp, #10]
 8023ffa:	1a5b      	subs	r3, r3, r1
 8023ffc:	f8ad 000c 	strh.w	r0, [sp, #12]
 8024000:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024004:	f10d 0808 	add.w	r8, sp, #8
 8024008:	ae04      	add	r6, sp, #16
 802400a:	e898 0003 	ldmia.w	r8, {r0, r1}
 802400e:	e886 0003 	stmia.w	r6, {r0, r1}
 8024012:	f8dc 3000 	ldr.w	r3, [ip]
 8024016:	4660      	mov	r0, ip
 8024018:	4631      	mov	r1, r6
 802401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802401c:	4798      	blx	r3
 802401e:	6861      	ldr	r1, [r4, #4]
 8024020:	4640      	mov	r0, r8
 8024022:	3104      	adds	r1, #4
 8024024:	f7f5 f83a 	bl	801909c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024028:	4630      	mov	r0, r6
 802402a:	f7f5 f84f 	bl	80190cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802402e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8024032:	f7f4 f957 	bl	80182e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8024036:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 802403a:	4638      	mov	r0, r7
 802403c:	f000 faae 	bl	802459c <_ZN8touchgfx7Outline5resetEv>
 8024040:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8024044:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8024048:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 802404c:	015b      	lsls	r3, r3, #5
 802404e:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 8024052:	0152      	lsls	r2, r2, #5
 8024054:	60e3      	str	r3, [r4, #12]
 8024056:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802405a:	60a2      	str	r2, [r4, #8]
 802405c:	015b      	lsls	r3, r3, #5
 802405e:	6123      	str	r3, [r4, #16]
 8024060:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8024064:	015b      	lsls	r3, r3, #5
 8024066:	6163      	str	r3, [r4, #20]
 8024068:	4b47      	ldr	r3, [pc, #284]	; (8024188 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802406a:	6818      	ldr	r0, [r3, #0]
 802406c:	6803      	ldr	r3, [r0, #0]
 802406e:	6a1b      	ldr	r3, [r3, #32]
 8024070:	4798      	blx	r3
 8024072:	4606      	mov	r6, r0
 8024074:	f7e8 fb5c 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 8024078:	6803      	ldr	r3, [r0, #0]
 802407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802407c:	4798      	blx	r3
 802407e:	4607      	mov	r7, r0
 8024080:	f7e8 fb56 	bl	800c730 <_ZN8touchgfx3HAL3lcdEv>
 8024084:	6803      	ldr	r3, [r0, #0]
 8024086:	6a1b      	ldr	r3, [r3, #32]
 8024088:	4798      	blx	r3
 802408a:	280c      	cmp	r0, #12
 802408c:	d854      	bhi.n	8024138 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 802408e:	e8df f000 	tbb	[pc, r0]
 8024092:	554b      	.short	0x554b
 8024094:	2b6e0a66 	.word	0x2b6e0a66
 8024098:	5f5f5f3b 	.word	0x5f5f5f3b
 802409c:	5f5f      	.short	0x5f5f
 802409e:	6e          	.byte	0x6e
 802409f:	00          	.byte	0x00
 80240a0:	2300      	movs	r3, #0
 80240a2:	9303      	str	r3, [sp, #12]
 80240a4:	e7ae      	b.n	8024004 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 80240a6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80240aa:	2108      	movs	r1, #8
 80240ac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80240b0:	fb92 f1f1 	sdiv	r1, r2, r1
 80240b4:	fb07 1303 	mla	r3, r7, r3, r1
 80240b8:	441e      	add	r6, r3
 80240ba:	4253      	negs	r3, r2
 80240bc:	f002 0207 	and.w	r2, r2, #7
 80240c0:	f003 0307 	and.w	r3, r3, #7
 80240c4:	bf58      	it	pl
 80240c6:	425a      	negpl	r2, r3
 80240c8:	b2d2      	uxtb	r2, r2
 80240ca:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80240ce:	4628      	mov	r0, r5
 80240d0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80240d4:	6721      	str	r1, [r4, #112]	; 0x70
 80240d6:	e9cd 1700 	strd	r1, r7, [sp]
 80240da:	4631      	mov	r1, r6
 80240dc:	f001 fac4 	bl	8025668 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 80240e0:	4620      	mov	r0, r4
 80240e2:	b006      	add	sp, #24
 80240e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80240e8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80240ec:	2104      	movs	r1, #4
 80240ee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80240f2:	fb92 f1f1 	sdiv	r1, r2, r1
 80240f6:	fb07 1303 	mla	r3, r7, r3, r1
 80240fa:	441e      	add	r6, r3
 80240fc:	4253      	negs	r3, r2
 80240fe:	f002 0203 	and.w	r2, r2, #3
 8024102:	f003 0303 	and.w	r3, r3, #3
 8024106:	e7dd      	b.n	80240c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8024108:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802410c:	2102      	movs	r1, #2
 802410e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024112:	2a00      	cmp	r2, #0
 8024114:	fb92 f1f1 	sdiv	r1, r2, r1
 8024118:	f002 0201 	and.w	r2, r2, #1
 802411c:	fb07 1303 	mla	r3, r7, r3, r1
 8024120:	bfb8      	it	lt
 8024122:	4252      	neglt	r2, r2
 8024124:	441e      	add	r6, r3
 8024126:	e7cf      	b.n	80240c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8024128:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802412c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024130:	437b      	muls	r3, r7
 8024132:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8024136:	441e      	add	r6, r3
 8024138:	2200      	movs	r2, #0
 802413a:	e7c6      	b.n	80240ca <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 802413c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024140:	2103      	movs	r1, #3
 8024142:	fb07 f203 	mul.w	r2, r7, r3
 8024146:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802414a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802414e:	e7f2      	b.n	8024136 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8024150:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024154:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024158:	fb07 2303 	mla	r3, r7, r3, r2
 802415c:	e7eb      	b.n	8024136 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802415e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024162:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024166:	437b      	muls	r3, r7
 8024168:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802416c:	e7e3      	b.n	8024136 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802416e:	4b07      	ldr	r3, [pc, #28]	; (802418c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8024170:	2156      	movs	r1, #86	; 0x56
 8024172:	4a03      	ldr	r2, [pc, #12]	; (8024180 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8024174:	e70e      	b.n	8023f94 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8024176:	bf00      	nop
 8024178:	0802b80c 	.word	0x0802b80c
 802417c:	0802b756 	.word	0x0802b756
 8024180:	0802b814 	.word	0x0802b814
 8024184:	0802b7b2 	.word	0x0802b7b2
 8024188:	2000b36c 	.word	0x2000b36c
 802418c:	0802b7e6 	.word	0x0802b7e6

08024190 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8024190:	6812      	ldr	r2, [r2, #0]
 8024192:	2a00      	cmp	r2, #0
 8024194:	db0b      	blt.n	80241ae <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8024196:	9800      	ldr	r0, [sp, #0]
 8024198:	6800      	ldr	r0, [r0, #0]
 802419a:	4290      	cmp	r0, r2
 802419c:	bfd4      	ite	le
 802419e:	2002      	movle	r0, #2
 80241a0:	2000      	movgt	r0, #0
 80241a2:	680a      	ldr	r2, [r1, #0]
 80241a4:	2a00      	cmp	r2, #0
 80241a6:	da04      	bge.n	80241b2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80241a8:	f040 0004 	orr.w	r0, r0, #4
 80241ac:	4770      	bx	lr
 80241ae:	2001      	movs	r0, #1
 80241b0:	e7f7      	b.n	80241a2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80241b2:	681b      	ldr	r3, [r3, #0]
 80241b4:	4293      	cmp	r3, r2
 80241b6:	bfd8      	it	le
 80241b8:	f040 0008 	orrle.w	r0, r0, #8
 80241bc:	4770      	bx	lr
	...

080241c0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80241c0:	4b07      	ldr	r3, [pc, #28]	; (80241e0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80241c2:	b510      	push	{r4, lr}
 80241c4:	781b      	ldrb	r3, [r3, #0]
 80241c6:	2b01      	cmp	r3, #1
 80241c8:	d108      	bne.n	80241dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80241ca:	6843      	ldr	r3, [r0, #4]
 80241cc:	6814      	ldr	r4, [r2, #0]
 80241ce:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80241d2:	680b      	ldr	r3, [r1, #0]
 80241d4:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80241d8:	6013      	str	r3, [r2, #0]
 80241da:	600c      	str	r4, [r1, #0]
 80241dc:	bd10      	pop	{r4, pc}
 80241de:	bf00      	nop
 80241e0:	2000b364 	.word	0x2000b364

080241e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80241e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80241e6:	b085      	sub	sp, #20
 80241e8:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 80241ec:	4604      	mov	r4, r0
 80241ee:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80241f2:	b33b      	cbz	r3, 8024244 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80241f4:	aa02      	add	r2, sp, #8
 80241f6:	a903      	add	r1, sp, #12
 80241f8:	f7ff ffe2 	bl	80241c0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80241fc:	68a3      	ldr	r3, [r4, #8]
 80241fe:	9e03      	ldr	r6, [sp, #12]
 8024200:	aa02      	add	r2, sp, #8
 8024202:	9f02      	ldr	r7, [sp, #8]
 8024204:	a903      	add	r1, sp, #12
 8024206:	1af6      	subs	r6, r6, r3
 8024208:	68e3      	ldr	r3, [r4, #12]
 802420a:	4620      	mov	r0, r4
 802420c:	1aff      	subs	r7, r7, r3
 802420e:	f104 0314 	add.w	r3, r4, #20
 8024212:	9603      	str	r6, [sp, #12]
 8024214:	9300      	str	r3, [sp, #0]
 8024216:	f104 0310 	add.w	r3, r4, #16
 802421a:	9702      	str	r7, [sp, #8]
 802421c:	f7ff ffb8 	bl	8024190 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8024220:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8024224:	4605      	mov	r5, r0
 8024226:	b97b      	cbnz	r3, 8024248 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8024228:	463a      	mov	r2, r7
 802422a:	4631      	mov	r1, r6
 802422c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8024230:	f7ff fe7a 	bl	8023f28 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024234:	9b03      	ldr	r3, [sp, #12]
 8024236:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 802423a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802423e:	9b02      	ldr	r3, [sp, #8]
 8024240:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8024244:	b005      	add	sp, #20
 8024246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024248:	b110      	cbz	r0, 8024250 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802424a:	ea13 0200 	ands.w	r2, r3, r0
 802424e:	d11c      	bne.n	802428a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8024250:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8024254:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8024258:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 802425c:	b188      	cbz	r0, 8024282 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802425e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 8024262:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8024266:	b913      	cbnz	r3, 802426e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8024268:	4630      	mov	r0, r6
 802426a:	f001 f802 	bl	8025272 <_ZN8touchgfx7Outline6moveToEii>
 802426e:	2300      	movs	r3, #0
 8024270:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024274:	2301      	movs	r3, #1
 8024276:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802427a:	4630      	mov	r0, r6
 802427c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8024280:	e7d6      	b.n	8024230 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8024282:	4630      	mov	r0, r6
 8024284:	f7ff fe50 	bl	8023f28 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024288:	e7f7      	b.n	802427a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802428a:	4615      	mov	r5, r2
 802428c:	e7d2      	b.n	8024234 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802428e <_ZN8touchgfx6Canvas5closeEv>:
 802428e:	b538      	push	{r3, r4, r5, lr}
 8024290:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8024294:	4604      	mov	r4, r0
 8024296:	b993      	cbnz	r3, 80242be <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024298:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 802429c:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 80242a0:	4213      	tst	r3, r2
 80242a2:	d10c      	bne.n	80242be <_ZN8touchgfx6Canvas5closeEv+0x30>
 80242a4:	f100 0530 	add.w	r5, r0, #48	; 0x30
 80242a8:	b123      	cbz	r3, 80242b4 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80242aa:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 80242ae:	4628      	mov	r0, r5
 80242b0:	f7ff fe3a 	bl	8023f28 <_ZN8touchgfx10Rasterizer6lineToEii>
 80242b4:	4628      	mov	r0, r5
 80242b6:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 80242ba:	f7ff fe35 	bl	8023f28 <_ZN8touchgfx10Rasterizer6lineToEii>
 80242be:	2300      	movs	r3, #0
 80242c0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80242c4:	bd38      	pop	{r3, r4, r5, pc}

080242c6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80242c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80242c8:	b085      	sub	sp, #20
 80242ca:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 80242ce:	4604      	mov	r4, r0
 80242d0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80242d4:	b353      	cbz	r3, 802432c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80242d6:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 80242da:	b90b      	cbnz	r3, 80242e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80242dc:	f7ff ffd7 	bl	802428e <_ZN8touchgfx6Canvas5closeEv>
 80242e0:	aa02      	add	r2, sp, #8
 80242e2:	a903      	add	r1, sp, #12
 80242e4:	4620      	mov	r0, r4
 80242e6:	f7ff ff6b 	bl	80241c0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80242ea:	68a3      	ldr	r3, [r4, #8]
 80242ec:	9d03      	ldr	r5, [sp, #12]
 80242ee:	aa02      	add	r2, sp, #8
 80242f0:	9e02      	ldr	r6, [sp, #8]
 80242f2:	a903      	add	r1, sp, #12
 80242f4:	1aed      	subs	r5, r5, r3
 80242f6:	68e3      	ldr	r3, [r4, #12]
 80242f8:	4620      	mov	r0, r4
 80242fa:	1af6      	subs	r6, r6, r3
 80242fc:	f104 0314 	add.w	r3, r4, #20
 8024300:	9503      	str	r5, [sp, #12]
 8024302:	9300      	str	r3, [sp, #0]
 8024304:	f104 0310 	add.w	r3, r4, #16
 8024308:	9602      	str	r6, [sp, #8]
 802430a:	f7ff ff41 	bl	8024190 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802430e:	4607      	mov	r7, r0
 8024310:	b170      	cbz	r0, 8024330 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8024312:	2301      	movs	r3, #1
 8024314:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024318:	9a03      	ldr	r2, [sp, #12]
 802431a:	9b02      	ldr	r3, [sp, #8]
 802431c:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8024320:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8024324:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 8024328:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 802432c:	b005      	add	sp, #20
 802432e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024330:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8024334:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 8024338:	b92b      	cbnz	r3, 8024346 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802433a:	4632      	mov	r2, r6
 802433c:	4629      	mov	r1, r5
 802433e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8024342:	f000 ff96 	bl	8025272 <_ZN8touchgfx7Outline6moveToEii>
 8024346:	2300      	movs	r3, #0
 8024348:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802434c:	2301      	movs	r3, #1
 802434e:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8024352:	e7e1      	b.n	8024318 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08024354 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8024354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024358:	4604      	mov	r4, r0
 802435a:	b087      	sub	sp, #28
 802435c:	9105      	str	r1, [sp, #20]
 802435e:	f001 f8cc 	bl	80254fa <_ZN8touchgfx7Outline8getCellsEv>
 8024362:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8024366:	4605      	mov	r5, r0
 8024368:	f1b9 0f00 	cmp.w	r9, #0
 802436c:	d103      	bne.n	8024376 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802436e:	2001      	movs	r0, #1
 8024370:	b007      	add	sp, #28
 8024372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024376:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802437a:	2e00      	cmp	r6, #0
 802437c:	d139      	bne.n	80243f2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802437e:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8024382:	f105 0708 	add.w	r7, r5, #8
 8024386:	4640      	mov	r0, r8
 8024388:	f001 f8f9 	bl	802557e <_ZN8touchgfx8Scanline5resetEv>
 802438c:	f109 33ff 	add.w	r3, r9, #4294967295
 8024390:	9303      	str	r3, [sp, #12]
 8024392:	f9b5 b000 	ldrsh.w	fp, [r5]
 8024396:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802439a:	46da      	mov	sl, fp
 802439c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80243a0:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80243a4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80243a8:	9b03      	ldr	r3, [sp, #12]
 80243aa:	4416      	add	r6, r2
 80243ac:	9504      	str	r5, [sp, #16]
 80243ae:	463d      	mov	r5, r7
 80243b0:	3b01      	subs	r3, #1
 80243b2:	9303      	str	r3, [sp, #12]
 80243b4:	3301      	adds	r3, #1
 80243b6:	d01e      	beq.n	80243f6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80243b8:	3708      	adds	r7, #8
 80243ba:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80243be:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80243c2:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80243c6:	4290      	cmp	r0, r2
 80243c8:	d11e      	bne.n	8024408 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80243ca:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80243ce:	4411      	add	r1, r2
 80243d0:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80243d4:	e7e8      	b.n	80243a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80243d6:	1c91      	adds	r1, r2, #2
 80243d8:	f04f 0301 	mov.w	r3, #1
 80243dc:	65e1      	str	r1, [r4, #92]	; 0x5c
 80243de:	8053      	strh	r3, [r2, #2]
 80243e0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80243e2:	1c91      	adds	r1, r2, #2
 80243e4:	65a1      	str	r1, [r4, #88]	; 0x58
 80243e6:	f8a2 b002 	strh.w	fp, [r2, #2]
 80243ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80243ec:	3201      	adds	r2, #1
 80243ee:	6562      	str	r2, [r4, #84]	; 0x54
 80243f0:	e03a      	b.n	8024468 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80243f2:	2000      	movs	r0, #0
 80243f4:	e7bc      	b.n	8024370 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80243f6:	b951      	cbnz	r1, 802440e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80243f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80243fa:	2b00      	cmp	r3, #0
 80243fc:	d0b7      	beq.n	802436e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80243fe:	4641      	mov	r1, r8
 8024400:	9805      	ldr	r0, [sp, #20]
 8024402:	f7ff fd5b 	bl	8023ebc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024406:	e7b2      	b.n	802436e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024408:	2900      	cmp	r1, #0
 802440a:	d035      	beq.n	8024478 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802440c:	9504      	str	r5, [sp, #16]
 802440e:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8024412:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024416:	f7ff fd3d 	bl	8023e94 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 802441a:	4605      	mov	r5, r0
 802441c:	b330      	cbz	r0, 802446c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802441e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024420:	b182      	cbz	r2, 8024444 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024422:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8024424:	454a      	cmp	r2, r9
 8024426:	d00d      	beq.n	8024444 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024428:	4641      	mov	r1, r8
 802442a:	9805      	ldr	r0, [sp, #20]
 802442c:	f7ff fd46 	bl	8023ebc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024430:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024434:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8024436:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802443a:	65e2      	str	r2, [r4, #92]	; 0x5c
 802443c:	2300      	movs	r3, #0
 802443e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024440:	6563      	str	r3, [r4, #84]	; 0x54
 8024442:	65a2      	str	r2, [r4, #88]	; 0x58
 8024444:	f1bb 0f00 	cmp.w	fp, #0
 8024448:	db10      	blt.n	802446c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802444a:	f7f3 ffc9 	bl	80183e0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802444e:	4583      	cmp	fp, r0
 8024450:	d20c      	bcs.n	802446c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024452:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024454:	f802 500b 	strb.w	r5, [r2, fp]
 8024458:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802445a:	3201      	adds	r2, #1
 802445c:	455a      	cmp	r2, fp
 802445e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8024460:	d1b9      	bne.n	80243d6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8024462:	8811      	ldrh	r1, [r2, #0]
 8024464:	3101      	adds	r1, #1
 8024466:	8011      	strh	r1, [r2, #0]
 8024468:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802446c:	9b03      	ldr	r3, [sp, #12]
 802446e:	3301      	adds	r3, #1
 8024470:	d0c2      	beq.n	80243f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8024472:	f10b 0a01 	add.w	sl, fp, #1
 8024476:	9d04      	ldr	r5, [sp, #16]
 8024478:	f9b5 3000 	ldrsh.w	r3, [r5]
 802447c:	4553      	cmp	r3, sl
 802447e:	dd88      	ble.n	8024392 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024480:	01b1      	lsls	r1, r6, #6
 8024482:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024486:	f7ff fd05 	bl	8023e94 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 802448a:	4683      	mov	fp, r0
 802448c:	2800      	cmp	r0, #0
 802448e:	d080      	beq.n	8024392 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024490:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8024492:	b183      	cbz	r3, 80244b6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8024494:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8024496:	454b      	cmp	r3, r9
 8024498:	d00d      	beq.n	80244b6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802449a:	4641      	mov	r1, r8
 802449c:	9805      	ldr	r0, [sp, #20]
 802449e:	f7ff fd0d 	bl	8023ebc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80244a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80244a6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80244aa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80244ac:	65e3      	str	r3, [r4, #92]	; 0x5c
 80244ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80244b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80244b2:	2300      	movs	r3, #0
 80244b4:	6563      	str	r3, [r4, #84]	; 0x54
 80244b6:	f9b5 3000 	ldrsh.w	r3, [r5]
 80244ba:	464a      	mov	r2, r9
 80244bc:	f8cd b000 	str.w	fp, [sp]
 80244c0:	4651      	mov	r1, sl
 80244c2:	eba3 030a 	sub.w	r3, r3, sl
 80244c6:	4640      	mov	r0, r8
 80244c8:	f001 f880 	bl	80255cc <_ZN8touchgfx8Scanline7addSpanEiijj>
 80244cc:	e761      	b.n	8024392 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080244ce <_ZN8touchgfx6Canvas6renderEv>:
 80244ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80244d0:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 80244d4:	4604      	mov	r4, r0
 80244d6:	b913      	cbnz	r3, 80244de <_ZN8touchgfx6Canvas6renderEv+0x10>
 80244d8:	2001      	movs	r0, #1
 80244da:	b003      	add	sp, #12
 80244dc:	bd30      	pop	{r4, r5, pc}
 80244de:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80244e2:	2b00      	cmp	r3, #0
 80244e4:	d12e      	bne.n	8024544 <_ZN8touchgfx6Canvas6renderEv+0x76>
 80244e6:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 80244ea:	2b00      	cmp	r3, #0
 80244ec:	d0f4      	beq.n	80244d8 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80244ee:	6840      	ldr	r0, [r0, #4]
 80244f0:	6803      	ldr	r3, [r0, #0]
 80244f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80244f4:	4798      	blx	r3
 80244f6:	2800      	cmp	r0, #0
 80244f8:	d0ee      	beq.n	80244d8 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80244fa:	4620      	mov	r0, r4
 80244fc:	f7ff fec7 	bl	802428e <_ZN8touchgfx6Canvas5closeEv>
 8024500:	6860      	ldr	r0, [r4, #4]
 8024502:	6803      	ldr	r3, [r0, #0]
 8024504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024506:	4798      	blx	r3
 8024508:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 802450c:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 8024510:	8082      	strh	r2, [r0, #4]
 8024512:	80c3      	strh	r3, [r0, #6]
 8024514:	6860      	ldr	r0, [r4, #4]
 8024516:	6803      	ldr	r3, [r0, #0]
 8024518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802451a:	4798      	blx	r3
 802451c:	4605      	mov	r5, r0
 802451e:	6860      	ldr	r0, [r4, #4]
 8024520:	6803      	ldr	r3, [r0, #0]
 8024522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024524:	4798      	blx	r3
 8024526:	7228      	strb	r0, [r5, #8]
 8024528:	6860      	ldr	r0, [r4, #4]
 802452a:	6803      	ldr	r3, [r0, #0]
 802452c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802452e:	4798      	blx	r3
 8024530:	f104 0318 	add.w	r3, r4, #24
 8024534:	4669      	mov	r1, sp
 8024536:	e9cd 3000 	strd	r3, r0, [sp]
 802453a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802453e:	f7ff ff09 	bl	8024354 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8024542:	e7ca      	b.n	80244da <_ZN8touchgfx6Canvas6renderEv+0xc>
 8024544:	2000      	movs	r0, #0
 8024546:	e7c8      	b.n	80244da <_ZN8touchgfx6Canvas6renderEv+0xc>

08024548 <_ZN8touchgfx6CanvasD1Ev>:
 8024548:	b538      	push	{r3, r4, r5, lr}
 802454a:	4605      	mov	r5, r0
 802454c:	4b08      	ldr	r3, [pc, #32]	; (8024570 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802454e:	4604      	mov	r4, r0
 8024550:	f845 3b30 	str.w	r3, [r5], #48
 8024554:	4b07      	ldr	r3, [pc, #28]	; (8024574 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8024556:	6818      	ldr	r0, [r3, #0]
 8024558:	6803      	ldr	r3, [r0, #0]
 802455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802455c:	4798      	blx	r3
 802455e:	4628      	mov	r0, r5
 8024560:	f000 f814 	bl	802458c <_ZN8touchgfx7OutlineD1Ev>
 8024564:	f104 0018 	add.w	r0, r4, #24
 8024568:	f001 f869 	bl	802563e <_ZN8touchgfx15RenderingBufferD1Ev>
 802456c:	4620      	mov	r0, r4
 802456e:	bd38      	pop	{r3, r4, r5, pc}
 8024570:	0802b80c 	.word	0x0802b80c
 8024574:	2000b36c 	.word	0x2000b36c

08024578 <_ZN8touchgfx6CanvasD0Ev>:
 8024578:	b510      	push	{r4, lr}
 802457a:	4604      	mov	r4, r0
 802457c:	f7ff ffe4 	bl	8024548 <_ZN8touchgfx6CanvasD1Ev>
 8024580:	21bc      	movs	r1, #188	; 0xbc
 8024582:	4620      	mov	r0, r4
 8024584:	f001 f880 	bl	8025688 <_ZdlPvj>
 8024588:	4620      	mov	r0, r4
 802458a:	bd10      	pop	{r4, pc}

0802458c <_ZN8touchgfx7OutlineD1Ev>:
 802458c:	4770      	bx	lr

0802458e <_ZN8touchgfx7OutlineD0Ev>:
 802458e:	b510      	push	{r4, lr}
 8024590:	4604      	mov	r4, r0
 8024592:	2148      	movs	r1, #72	; 0x48
 8024594:	f001 f878 	bl	8025688 <_ZdlPvj>
 8024598:	4620      	mov	r0, r4
 802459a:	bd10      	pop	{r4, pc}

0802459c <_ZN8touchgfx7Outline5resetEv>:
 802459c:	b510      	push	{r4, lr}
 802459e:	4604      	mov	r4, r0
 80245a0:	f7f3 ff36 	bl	8018410 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80245a4:	60e0      	str	r0, [r4, #12]
 80245a6:	f7f3 ff39 	bl	801841c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80245aa:	68e3      	ldr	r3, [r4, #12]
 80245ac:	2200      	movs	r2, #0
 80245ae:	08c0      	lsrs	r0, r0, #3
 80245b0:	6123      	str	r3, [r4, #16]
 80245b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80245b6:	6060      	str	r0, [r4, #4]
 80245b8:	82a3      	strh	r3, [r4, #20]
 80245ba:	82e3      	strh	r3, [r4, #22]
 80245bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80245be:	60a2      	str	r2, [r4, #8]
 80245c0:	f023 0301 	bic.w	r3, r3, #1
 80245c4:	8322      	strh	r2, [r4, #24]
 80245c6:	8362      	strh	r2, [r4, #26]
 80245c8:	f043 0302 	orr.w	r3, r3, #2
 80245cc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80245d0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80245d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80245d6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80245da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80245de:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80245e2:	bd10      	pop	{r4, pc}

080245e4 <_ZN8touchgfx7OutlineC1Ev>:
 80245e4:	4b0f      	ldr	r3, [pc, #60]	; (8024624 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80245e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80245ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80245ee:	b510      	push	{r4, lr}
 80245f0:	6003      	str	r3, [r0, #0]
 80245f2:	2300      	movs	r3, #0
 80245f4:	4604      	mov	r4, r0
 80245f6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80245fa:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80245fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024602:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8024606:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802460a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802460e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8024612:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8024616:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802461a:	f7ff ffbf 	bl	802459c <_ZN8touchgfx7Outline5resetEv>
 802461e:	4620      	mov	r0, r4
 8024620:	bd10      	pop	{r4, pc}
 8024622:	bf00      	nop
 8024624:	0802b86c 	.word	0x0802b86c

08024628 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8024628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802462c:	b093      	sub	sp, #76	; 0x4c
 802462e:	4604      	mov	r4, r0
 8024630:	1156      	asrs	r6, r2, #5
 8024632:	f002 0e1f 	and.w	lr, r2, #31
 8024636:	981c      	ldr	r0, [sp, #112]	; 0x70
 8024638:	9305      	str	r3, [sp, #20]
 802463a:	1143      	asrs	r3, r0, #5
 802463c:	1145      	asrs	r5, r0, #5
 802463e:	930c      	str	r3, [sp, #48]	; 0x30
 8024640:	f000 031f 	and.w	r3, r0, #31
 8024644:	9303      	str	r3, [sp, #12]
 8024646:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024648:	42b3      	cmp	r3, r6
 802464a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802464c:	bfc8      	it	gt
 802464e:	6326      	strgt	r6, [r4, #48]	; 0x30
 8024650:	42b3      	cmp	r3, r6
 8024652:	bfdc      	itt	le
 8024654:	1c73      	addle	r3, r6, #1
 8024656:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024658:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802465a:	42ab      	cmp	r3, r5
 802465c:	bfc8      	it	gt
 802465e:	462b      	movgt	r3, r5
 8024660:	ea4f 1560 	mov.w	r5, r0, asr #5
 8024664:	bfc8      	it	gt
 8024666:	6323      	strgt	r3, [r4, #48]	; 0x30
 8024668:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802466a:	42ab      	cmp	r3, r5
 802466c:	bfd8      	it	le
 802466e:	462b      	movle	r3, r5
 8024670:	ea4f 1561 	mov.w	r5, r1, asr #5
 8024674:	bfdc      	itt	le
 8024676:	3301      	addle	r3, #1
 8024678:	63a3      	strle	r3, [r4, #56]	; 0x38
 802467a:	9b05      	ldr	r3, [sp, #20]
 802467c:	eba3 0a01 	sub.w	sl, r3, r1
 8024680:	1143      	asrs	r3, r0, #5
 8024682:	429e      	cmp	r6, r3
 8024684:	f040 8119 	bne.w	80248ba <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8024688:	9b05      	ldr	r3, [sp, #20]
 802468a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802468e:	9b03      	ldr	r3, [sp, #12]
 8024690:	459e      	cmp	lr, r3
 8024692:	d12c      	bne.n	80246ee <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8024694:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024698:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 802469c:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80246a0:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80246a4:	4291      	cmp	r1, r2
 80246a6:	d037      	beq.n	8024718 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80246a8:	8b61      	ldrh	r1, [r4, #26]
 80246aa:	8b22      	ldrh	r2, [r4, #24]
 80246ac:	430a      	orrs	r2, r1
 80246ae:	d00b      	beq.n	80246c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80246b0:	2b00      	cmp	r3, #0
 80246b2:	db09      	blt.n	80246c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80246b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80246b6:	429a      	cmp	r2, r3
 80246b8:	dd06      	ble.n	80246c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80246ba:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80246be:	429a      	cmp	r2, r3
 80246c0:	d308      	bcc.n	80246d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80246c2:	2301      	movs	r3, #1
 80246c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80246c8:	f8a4 c014 	strh.w	ip, [r4, #20]
 80246cc:	82e6      	strh	r6, [r4, #22]
 80246ce:	2300      	movs	r3, #0
 80246d0:	8323      	strh	r3, [r4, #24]
 80246d2:	e0c6      	b.n	8024862 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80246d4:	f104 0314 	add.w	r3, r4, #20
 80246d8:	6922      	ldr	r2, [r4, #16]
 80246da:	cb03      	ldmia	r3!, {r0, r1}
 80246dc:	6010      	str	r0, [r2, #0]
 80246de:	6051      	str	r1, [r2, #4]
 80246e0:	6923      	ldr	r3, [r4, #16]
 80246e2:	3308      	adds	r3, #8
 80246e4:	6123      	str	r3, [r4, #16]
 80246e6:	68a3      	ldr	r3, [r4, #8]
 80246e8:	3301      	adds	r3, #1
 80246ea:	60a3      	str	r3, [r4, #8]
 80246ec:	e7ec      	b.n	80246c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80246ee:	9b05      	ldr	r3, [sp, #20]
 80246f0:	45ac      	cmp	ip, r5
 80246f2:	f001 011f 	and.w	r1, r1, #31
 80246f6:	8b20      	ldrh	r0, [r4, #24]
 80246f8:	f003 031f 	and.w	r3, r3, #31
 80246fc:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8024700:	9304      	str	r3, [sp, #16]
 8024702:	9b03      	ldr	r3, [sp, #12]
 8024704:	eba3 020e 	sub.w	r2, r3, lr
 8024708:	d109      	bne.n	802471e <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 802470a:	9b04      	ldr	r3, [sp, #16]
 802470c:	4410      	add	r0, r2
 802470e:	4419      	add	r1, r3
 8024710:	8320      	strh	r0, [r4, #24]
 8024712:	fb02 8201 	mla	r2, r2, r1, r8
 8024716:	8362      	strh	r2, [r4, #26]
 8024718:	b013      	add	sp, #76	; 0x4c
 802471a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802471e:	f1ba 0f00 	cmp.w	sl, #0
 8024722:	f2c0 80a0 	blt.w	8024866 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8024726:	f1c1 0320 	rsb	r3, r1, #32
 802472a:	f04f 0b20 	mov.w	fp, #32
 802472e:	435a      	muls	r2, r3
 8024730:	2301      	movs	r3, #1
 8024732:	9302      	str	r3, [sp, #8]
 8024734:	4459      	add	r1, fp
 8024736:	fb92 f7fa 	sdiv	r7, r2, sl
 802473a:	fb0a 2217 	mls	r2, sl, r7, r2
 802473e:	2a00      	cmp	r2, #0
 8024740:	bfbc      	itt	lt
 8024742:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024746:	4452      	addlt	r2, sl
 8024748:	fb07 8101 	mla	r1, r7, r1, r8
 802474c:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024750:	4438      	add	r0, r7
 8024752:	b20b      	sxth	r3, r1
 8024754:	9902      	ldr	r1, [sp, #8]
 8024756:	b200      	sxth	r0, r0
 8024758:	9301      	str	r3, [sp, #4]
 802475a:	8363      	strh	r3, [r4, #26]
 802475c:	186b      	adds	r3, r5, r1
 802475e:	0435      	lsls	r5, r6, #16
 8024760:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024764:	8320      	strh	r0, [r4, #24]
 8024766:	eb03 0905 	add.w	r9, r3, r5
 802476a:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 802476e:	9300      	str	r3, [sp, #0]
 8024770:	45c1      	cmp	r9, r8
 8024772:	9505      	str	r5, [sp, #20]
 8024774:	d014      	beq.n	80247a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8024776:	9b01      	ldr	r3, [sp, #4]
 8024778:	4303      	orrs	r3, r0
 802477a:	d00b      	beq.n	8024794 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802477c:	2900      	cmp	r1, #0
 802477e:	db09      	blt.n	8024794 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024780:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024782:	428b      	cmp	r3, r1
 8024784:	dd06      	ble.n	8024794 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024786:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802478a:	4299      	cmp	r1, r3
 802478c:	d374      	bcc.n	8024878 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 802478e:	2301      	movs	r3, #1
 8024790:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024794:	9b00      	ldr	r3, [sp, #0]
 8024796:	82e6      	strh	r6, [r4, #22]
 8024798:	82a3      	strh	r3, [r4, #20]
 802479a:	2300      	movs	r3, #0
 802479c:	8323      	strh	r3, [r4, #24]
 802479e:	8363      	strh	r3, [r4, #26]
 80247a0:	9900      	ldr	r1, [sp, #0]
 80247a2:	eb0e 0307 	add.w	r3, lr, r7
 80247a6:	458c      	cmp	ip, r1
 80247a8:	d04e      	beq.n	8024848 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 80247aa:	9903      	ldr	r1, [sp, #12]
 80247ac:	eba2 020a 	sub.w	r2, r2, sl
 80247b0:	1ac9      	subs	r1, r1, r3
 80247b2:	9201      	str	r2, [sp, #4]
 80247b4:	440f      	add	r7, r1
 80247b6:	017f      	lsls	r7, r7, #5
 80247b8:	fb97 fefa 	sdiv	lr, r7, sl
 80247bc:	fb0a 771e 	mls	r7, sl, lr, r7
 80247c0:	2f00      	cmp	r7, #0
 80247c2:	bfbc      	itt	lt
 80247c4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80247c8:	4457      	addlt	r7, sl
 80247ca:	f10e 0101 	add.w	r1, lr, #1
 80247ce:	9106      	str	r1, [sp, #24]
 80247d0:	9a01      	ldr	r2, [sp, #4]
 80247d2:	8b20      	ldrh	r0, [r4, #24]
 80247d4:	19d2      	adds	r2, r2, r7
 80247d6:	8b61      	ldrh	r1, [r4, #26]
 80247d8:	9d02      	ldr	r5, [sp, #8]
 80247da:	9201      	str	r2, [sp, #4]
 80247dc:	bf5b      	ittet	pl
 80247de:	eba2 020a 	subpl.w	r2, r2, sl
 80247e2:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 80247e6:	46f0      	movmi	r8, lr
 80247e8:	9201      	strpl	r2, [sp, #4]
 80247ea:	9a00      	ldr	r2, [sp, #0]
 80247ec:	4440      	add	r0, r8
 80247ee:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80247f2:	4443      	add	r3, r8
 80247f4:	442a      	add	r2, r5
 80247f6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80247fa:	9d05      	ldr	r5, [sp, #20]
 80247fc:	b200      	sxth	r0, r0
 80247fe:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024802:	b209      	sxth	r1, r1
 8024804:	4415      	add	r5, r2
 8024806:	8320      	strh	r0, [r4, #24]
 8024808:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802480c:	8361      	strh	r1, [r4, #26]
 802480e:	9200      	str	r2, [sp, #0]
 8024810:	454d      	cmp	r5, r9
 8024812:	d016      	beq.n	8024842 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8024814:	4301      	orrs	r1, r0
 8024816:	d00d      	beq.n	8024834 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024818:	f1b8 0f00 	cmp.w	r8, #0
 802481c:	db0a      	blt.n	8024834 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802481e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024820:	4541      	cmp	r1, r8
 8024822:	dd07      	ble.n	8024834 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024824:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024828:	4288      	cmp	r0, r1
 802482a:	d335      	bcc.n	8024898 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 802482c:	f04f 0101 	mov.w	r1, #1
 8024830:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024834:	9900      	ldr	r1, [sp, #0]
 8024836:	82e6      	strh	r6, [r4, #22]
 8024838:	82a1      	strh	r1, [r4, #20]
 802483a:	f04f 0100 	mov.w	r1, #0
 802483e:	8321      	strh	r1, [r4, #24]
 8024840:	8361      	strh	r1, [r4, #26]
 8024842:	9a00      	ldr	r2, [sp, #0]
 8024844:	4594      	cmp	ip, r2
 8024846:	d1c3      	bne.n	80247d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8024848:	9a03      	ldr	r2, [sp, #12]
 802484a:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 802484e:	1ad3      	subs	r3, r2, r3
 8024850:	8b22      	ldrh	r2, [r4, #24]
 8024852:	441a      	add	r2, r3
 8024854:	8322      	strh	r2, [r4, #24]
 8024856:	9a04      	ldr	r2, [sp, #16]
 8024858:	3220      	adds	r2, #32
 802485a:	eba2 020b 	sub.w	r2, r2, fp
 802485e:	fb03 c302 	mla	r3, r3, r2, ip
 8024862:	8363      	strh	r3, [r4, #26]
 8024864:	e758      	b.n	8024718 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024866:	f04f 33ff 	mov.w	r3, #4294967295
 802486a:	434a      	muls	r2, r1
 802486c:	f1ca 0a00 	rsb	sl, sl, #0
 8024870:	f04f 0b00 	mov.w	fp, #0
 8024874:	9302      	str	r3, [sp, #8]
 8024876:	e75d      	b.n	8024734 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8024878:	f104 0314 	add.w	r3, r4, #20
 802487c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024880:	cb03      	ldmia	r3!, {r0, r1}
 8024882:	f8c8 0000 	str.w	r0, [r8]
 8024886:	f8c8 1004 	str.w	r1, [r8, #4]
 802488a:	6923      	ldr	r3, [r4, #16]
 802488c:	3308      	adds	r3, #8
 802488e:	6123      	str	r3, [r4, #16]
 8024890:	68a3      	ldr	r3, [r4, #8]
 8024892:	3301      	adds	r3, #1
 8024894:	60a3      	str	r3, [r4, #8]
 8024896:	e77d      	b.n	8024794 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024898:	f104 0814 	add.w	r8, r4, #20
 802489c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80248a0:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80248a4:	f8c9 0000 	str.w	r0, [r9]
 80248a8:	f8c9 1004 	str.w	r1, [r9, #4]
 80248ac:	6921      	ldr	r1, [r4, #16]
 80248ae:	3108      	adds	r1, #8
 80248b0:	6121      	str	r1, [r4, #16]
 80248b2:	68a1      	ldr	r1, [r4, #8]
 80248b4:	3101      	adds	r1, #1
 80248b6:	60a1      	str	r1, [r4, #8]
 80248b8:	e7bc      	b.n	8024834 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80248ba:	1a83      	subs	r3, r0, r2
 80248bc:	9301      	str	r3, [sp, #4]
 80248be:	f1ba 0f00 	cmp.w	sl, #0
 80248c2:	f040 8094 	bne.w	80249ee <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 80248c6:	9a01      	ldr	r2, [sp, #4]
 80248c8:	0049      	lsls	r1, r1, #1
 80248ca:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80248ce:	2a00      	cmp	r2, #0
 80248d0:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 80248d4:	8b62      	ldrh	r2, [r4, #26]
 80248d6:	bfaa      	itet	ge
 80248d8:	f04f 0a20 	movge.w	sl, #32
 80248dc:	f04f 38ff 	movlt.w	r8, #4294967295
 80248e0:	f04f 0801 	movge.w	r8, #1
 80248e4:	8b21      	ldrh	r1, [r4, #24]
 80248e6:	ebaa 0e0e 	sub.w	lr, sl, lr
 80248ea:	4471      	add	r1, lr
 80248ec:	fb0e 2e03 	mla	lr, lr, r3, r2
 80248f0:	eb08 0206 	add.w	r2, r8, r6
 80248f4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80248f8:	b209      	sxth	r1, r1
 80248fa:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 80248fe:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8024902:	8321      	strh	r1, [r4, #24]
 8024904:	fa0f fe8e 	sxth.w	lr, lr
 8024908:	42b7      	cmp	r7, r6
 802490a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802490e:	d013      	beq.n	8024938 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8024910:	ea51 010e 	orrs.w	r1, r1, lr
 8024914:	d00b      	beq.n	802492e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024916:	2800      	cmp	r0, #0
 8024918:	db09      	blt.n	802492e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802491a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802491c:	4281      	cmp	r1, r0
 802491e:	dd06      	ble.n	802492e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024920:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024924:	4288      	cmp	r0, r1
 8024926:	d339      	bcc.n	802499c <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8024928:	2101      	movs	r1, #1
 802492a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802492e:	2100      	movs	r1, #0
 8024930:	82a5      	strh	r5, [r4, #20]
 8024932:	82e2      	strh	r2, [r4, #22]
 8024934:	8321      	strh	r1, [r4, #24]
 8024936:	8361      	strh	r1, [r4, #26]
 8024938:	f1aa 0610 	sub.w	r6, sl, #16
 802493c:	f04f 0e00 	mov.w	lr, #0
 8024940:	f04f 0b01 	mov.w	fp, #1
 8024944:	0076      	lsls	r6, r6, #1
 8024946:	fb06 f703 	mul.w	r7, r6, r3
 802494a:	b236      	sxth	r6, r6
 802494c:	b23f      	sxth	r7, r7
 802494e:	ea46 0107 	orr.w	r1, r6, r7
 8024952:	9100      	str	r1, [sp, #0]
 8024954:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024956:	428a      	cmp	r2, r1
 8024958:	d03e      	beq.n	80249d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 802495a:	4442      	add	r2, r8
 802495c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024960:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024964:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8024968:	8326      	strh	r6, [r4, #24]
 802496a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802496e:	8367      	strh	r7, [r4, #26]
 8024970:	4584      	cmp	ip, r0
 8024972:	d0ef      	beq.n	8024954 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024974:	9800      	ldr	r0, [sp, #0]
 8024976:	b150      	cbz	r0, 802498e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024978:	2900      	cmp	r1, #0
 802497a:	db08      	blt.n	802498e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802497c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802497e:	4288      	cmp	r0, r1
 8024980:	dd05      	ble.n	802498e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024982:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024986:	4288      	cmp	r0, r1
 8024988:	d315      	bcc.n	80249b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802498a:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 802498e:	82a5      	strh	r5, [r4, #20]
 8024990:	82e2      	strh	r2, [r4, #22]
 8024992:	f8a4 e018 	strh.w	lr, [r4, #24]
 8024996:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802499a:	e7db      	b.n	8024954 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 802499c:	f104 0614 	add.w	r6, r4, #20
 80249a0:	6927      	ldr	r7, [r4, #16]
 80249a2:	ce03      	ldmia	r6!, {r0, r1}
 80249a4:	6038      	str	r0, [r7, #0]
 80249a6:	6079      	str	r1, [r7, #4]
 80249a8:	6921      	ldr	r1, [r4, #16]
 80249aa:	3108      	adds	r1, #8
 80249ac:	6121      	str	r1, [r4, #16]
 80249ae:	68a1      	ldr	r1, [r4, #8]
 80249b0:	3101      	adds	r1, #1
 80249b2:	60a1      	str	r1, [r4, #8]
 80249b4:	e7bb      	b.n	802492e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80249b6:	f104 0c14 	add.w	ip, r4, #20
 80249ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80249be:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80249c2:	f8c9 0000 	str.w	r0, [r9]
 80249c6:	f8c9 1004 	str.w	r1, [r9, #4]
 80249ca:	6921      	ldr	r1, [r4, #16]
 80249cc:	3108      	adds	r1, #8
 80249ce:	6121      	str	r1, [r4, #16]
 80249d0:	68a1      	ldr	r1, [r4, #8]
 80249d2:	3101      	adds	r1, #1
 80249d4:	60a1      	str	r1, [r4, #8]
 80249d6:	e7da      	b.n	802498e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80249d8:	9a03      	ldr	r2, [sp, #12]
 80249da:	8b61      	ldrh	r1, [r4, #26]
 80249dc:	f1a2 0c20 	sub.w	ip, r2, #32
 80249e0:	8b22      	ldrh	r2, [r4, #24]
 80249e2:	44d4      	add	ip, sl
 80249e4:	4462      	add	r2, ip
 80249e6:	fb0c 1303 	mla	r3, ip, r3, r1
 80249ea:	8322      	strh	r2, [r4, #24]
 80249ec:	e739      	b.n	8024862 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80249ee:	9b01      	ldr	r3, [sp, #4]
 80249f0:	2b00      	cmp	r3, #0
 80249f2:	db3f      	blt.n	8024a74 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 80249f4:	2201      	movs	r2, #1
 80249f6:	f1ce 0320 	rsb	r3, lr, #32
 80249fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80249fc:	2220      	movs	r2, #32
 80249fe:	fb0a f303 	mul.w	r3, sl, r3
 8024a02:	9202      	str	r2, [sp, #8]
 8024a04:	9a01      	ldr	r2, [sp, #4]
 8024a06:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024a0a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024a0e:	fb93 f7f2 	sdiv	r7, r3, r2
 8024a12:	fb02 3317 	mls	r3, r2, r7, r3
 8024a16:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024a1a:	2b00      	cmp	r3, #0
 8024a1c:	9308      	str	r3, [sp, #32]
 8024a1e:	bfbc      	itt	lt
 8024a20:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024a24:	189b      	addlt	r3, r3, r2
 8024a26:	eb07 0b01 	add.w	fp, r7, r1
 8024a2a:	bfb8      	it	lt
 8024a2c:	9308      	strlt	r3, [sp, #32]
 8024a2e:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024a32:	9304      	str	r3, [sp, #16]
 8024a34:	9b02      	ldr	r3, [sp, #8]
 8024a36:	4573      	cmp	r3, lr
 8024a38:	d133      	bne.n	8024aa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8024a3a:	9b04      	ldr	r3, [sp, #16]
 8024a3c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8024a40:	454b      	cmp	r3, r9
 8024a42:	d045      	beq.n	8024ad0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024a44:	8b62      	ldrh	r2, [r4, #26]
 8024a46:	8b23      	ldrh	r3, [r4, #24]
 8024a48:	4313      	orrs	r3, r2
 8024a4a:	d00c      	beq.n	8024a66 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024a4c:	f1b8 0f00 	cmp.w	r8, #0
 8024a50:	db09      	blt.n	8024a66 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024a54:	4543      	cmp	r3, r8
 8024a56:	dd06      	ble.n	8024a66 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024a58:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024a5c:	429a      	cmp	r2, r3
 8024a5e:	d313      	bcc.n	8024a88 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8024a60:	2301      	movs	r3, #1
 8024a62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024a66:	9b04      	ldr	r3, [sp, #16]
 8024a68:	82e6      	strh	r6, [r4, #22]
 8024a6a:	82a3      	strh	r3, [r4, #20]
 8024a6c:	2300      	movs	r3, #0
 8024a6e:	8323      	strh	r3, [r4, #24]
 8024a70:	8363      	strh	r3, [r4, #26]
 8024a72:	e02d      	b.n	8024ad0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024a74:	9a01      	ldr	r2, [sp, #4]
 8024a76:	fb0a f30e 	mul.w	r3, sl, lr
 8024a7a:	4252      	negs	r2, r2
 8024a7c:	9201      	str	r2, [sp, #4]
 8024a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8024a82:	920b      	str	r2, [sp, #44]	; 0x2c
 8024a84:	2200      	movs	r2, #0
 8024a86:	e7bc      	b.n	8024a02 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8024a88:	f104 0314 	add.w	r3, r4, #20
 8024a8c:	6922      	ldr	r2, [r4, #16]
 8024a8e:	cb03      	ldmia	r3!, {r0, r1}
 8024a90:	6010      	str	r0, [r2, #0]
 8024a92:	6051      	str	r1, [r2, #4]
 8024a94:	6923      	ldr	r3, [r4, #16]
 8024a96:	3308      	adds	r3, #8
 8024a98:	6123      	str	r3, [r4, #16]
 8024a9a:	68a3      	ldr	r3, [r4, #8]
 8024a9c:	3301      	adds	r3, #1
 8024a9e:	60a3      	str	r3, [r4, #8]
 8024aa0:	e7e1      	b.n	8024a66 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024aa2:	f00b 031f 	and.w	r3, fp, #31
 8024aa6:	f001 011f 	and.w	r1, r1, #31
 8024aaa:	8b20      	ldrh	r0, [r4, #24]
 8024aac:	9309      	str	r3, [sp, #36]	; 0x24
 8024aae:	9b02      	ldr	r3, [sp, #8]
 8024ab0:	eba3 020e 	sub.w	r2, r3, lr
 8024ab4:	8b63      	ldrh	r3, [r4, #26]
 8024ab6:	9300      	str	r3, [sp, #0]
 8024ab8:	9b04      	ldr	r3, [sp, #16]
 8024aba:	42ab      	cmp	r3, r5
 8024abc:	f040 80ef 	bne.w	8024c9e <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8024ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ac2:	4410      	add	r0, r2
 8024ac4:	4419      	add	r1, r3
 8024ac6:	9b00      	ldr	r3, [sp, #0]
 8024ac8:	8320      	strh	r0, [r4, #24]
 8024aca:	fb02 3101 	mla	r1, r2, r1, r3
 8024ace:	8361      	strh	r1, [r4, #26]
 8024ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ad2:	9904      	ldr	r1, [sp, #16]
 8024ad4:	4433      	add	r3, r6
 8024ad6:	9300      	str	r3, [sp, #0]
 8024ad8:	9a00      	ldr	r2, [sp, #0]
 8024ada:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024ade:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8024ae2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024ae6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024aea:	4288      	cmp	r0, r1
 8024aec:	d018      	beq.n	8024b20 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8024aee:	8b60      	ldrh	r0, [r4, #26]
 8024af0:	8b21      	ldrh	r1, [r4, #24]
 8024af2:	ea50 0201 	orrs.w	r2, r0, r1
 8024af6:	d00c      	beq.n	8024b12 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024af8:	2b00      	cmp	r3, #0
 8024afa:	db0a      	blt.n	8024b12 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024afc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024afe:	4299      	cmp	r1, r3
 8024b00:	dd07      	ble.n	8024b12 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024b02:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024b06:	4299      	cmp	r1, r3
 8024b08:	f0c0 818b 	bcc.w	8024e22 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8024b0c:	2301      	movs	r3, #1
 8024b0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024b12:	9b04      	ldr	r3, [sp, #16]
 8024b14:	82a3      	strh	r3, [r4, #20]
 8024b16:	9b00      	ldr	r3, [sp, #0]
 8024b18:	82e3      	strh	r3, [r4, #22]
 8024b1a:	2300      	movs	r3, #0
 8024b1c:	8323      	strh	r3, [r4, #24]
 8024b1e:	8363      	strh	r3, [r4, #26]
 8024b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024b22:	9a00      	ldr	r2, [sp, #0]
 8024b24:	4293      	cmp	r3, r2
 8024b26:	f000 808d 	beq.w	8024c44 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8024b2a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8024b2e:	9901      	ldr	r1, [sp, #4]
 8024b30:	9801      	ldr	r0, [sp, #4]
 8024b32:	fb93 f1f1 	sdiv	r1, r3, r1
 8024b36:	fb00 3311 	mls	r3, r0, r1, r3
 8024b3a:	9106      	str	r1, [sp, #24]
 8024b3c:	2b00      	cmp	r3, #0
 8024b3e:	9307      	str	r3, [sp, #28]
 8024b40:	da04      	bge.n	8024b4c <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8024b42:	1e4b      	subs	r3, r1, #1
 8024b44:	9306      	str	r3, [sp, #24]
 8024b46:	9b07      	ldr	r3, [sp, #28]
 8024b48:	4403      	add	r3, r0
 8024b4a:	9307      	str	r3, [sp, #28]
 8024b4c:	9b08      	ldr	r3, [sp, #32]
 8024b4e:	f04f 0c00 	mov.w	ip, #0
 8024b52:	9901      	ldr	r1, [sp, #4]
 8024b54:	1a5b      	subs	r3, r3, r1
 8024b56:	4659      	mov	r1, fp
 8024b58:	9308      	str	r3, [sp, #32]
 8024b5a:	9b02      	ldr	r3, [sp, #8]
 8024b5c:	f1c3 0320 	rsb	r3, r3, #32
 8024b60:	930a      	str	r3, [sp, #40]	; 0x28
 8024b62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024b64:	9b02      	ldr	r3, [sp, #8]
 8024b66:	1a1b      	subs	r3, r3, r0
 8024b68:	9309      	str	r3, [sp, #36]	; 0x24
 8024b6a:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8024b6e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024b72:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8024b76:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8024b7a:	181b      	adds	r3, r3, r0
 8024b7c:	bf58      	it	pl
 8024b7e:	9801      	ldrpl	r0, [sp, #4]
 8024b80:	9308      	str	r3, [sp, #32]
 8024b82:	bf54      	ite	pl
 8024b84:	1a1b      	subpl	r3, r3, r0
 8024b86:	9d06      	ldrmi	r5, [sp, #24]
 8024b88:	9802      	ldr	r0, [sp, #8]
 8024b8a:	bf5e      	ittt	pl
 8024b8c:	9308      	strpl	r3, [sp, #32]
 8024b8e:	9b06      	ldrpl	r3, [sp, #24]
 8024b90:	1c5d      	addpl	r5, r3, #1
 8024b92:	44ab      	add	fp, r5
 8024b94:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024b98:	9304      	str	r3, [sp, #16]
 8024b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024b9c:	4283      	cmp	r3, r0
 8024b9e:	f040 815a 	bne.w	8024e56 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8024ba2:	9b04      	ldr	r3, [sp, #16]
 8024ba4:	9a00      	ldr	r2, [sp, #0]
 8024ba6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8024baa:	4543      	cmp	r3, r8
 8024bac:	d01a      	beq.n	8024be4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024bae:	8b61      	ldrh	r1, [r4, #26]
 8024bb0:	8b23      	ldrh	r3, [r4, #24]
 8024bb2:	430b      	orrs	r3, r1
 8024bb4:	d00e      	beq.n	8024bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024bb6:	f1be 0f00 	cmp.w	lr, #0
 8024bba:	db0b      	blt.n	8024bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024bbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024bbe:	4573      	cmp	r3, lr
 8024bc0:	dd08      	ble.n	8024bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024bc2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024bc6:	4299      	cmp	r1, r3
 8024bc8:	f0c0 8138 	bcc.w	8024e3c <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8024bcc:	f04f 0301 	mov.w	r3, #1
 8024bd0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024bd4:	9b04      	ldr	r3, [sp, #16]
 8024bd6:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024bda:	82a3      	strh	r3, [r4, #20]
 8024bdc:	9b00      	ldr	r3, [sp, #0]
 8024bde:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024be2:	82e3      	strh	r3, [r4, #22]
 8024be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024be6:	9a00      	ldr	r2, [sp, #0]
 8024be8:	441a      	add	r2, r3
 8024bea:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024bee:	9200      	str	r2, [sp, #0]
 8024bf0:	9900      	ldr	r1, [sp, #0]
 8024bf2:	9a04      	ldr	r2, [sp, #16]
 8024bf4:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8024bf8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024bfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024c00:	4288      	cmp	r0, r1
 8024c02:	d01a      	beq.n	8024c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8024c04:	8b60      	ldrh	r0, [r4, #26]
 8024c06:	8b21      	ldrh	r1, [r4, #24]
 8024c08:	ea50 0201 	orrs.w	r2, r0, r1
 8024c0c:	d00d      	beq.n	8024c2a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024c0e:	2b00      	cmp	r3, #0
 8024c10:	db0b      	blt.n	8024c2a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024c12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024c14:	4299      	cmp	r1, r3
 8024c16:	dd08      	ble.n	8024c2a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024c18:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024c1c:	4299      	cmp	r1, r3
 8024c1e:	f0c0 81f9 	bcc.w	8025014 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8024c22:	f04f 0301 	mov.w	r3, #1
 8024c26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024c2a:	9b04      	ldr	r3, [sp, #16]
 8024c2c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024c30:	82a3      	strh	r3, [r4, #20]
 8024c32:	9b00      	ldr	r3, [sp, #0]
 8024c34:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024c38:	82e3      	strh	r3, [r4, #22]
 8024c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c3c:	4659      	mov	r1, fp
 8024c3e:	9a00      	ldr	r2, [sp, #0]
 8024c40:	4293      	cmp	r3, r2
 8024c42:	d192      	bne.n	8024b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8024c44:	9b02      	ldr	r3, [sp, #8]
 8024c46:	f1c3 0c20 	rsb	ip, r3, #32
 8024c4a:	9b05      	ldr	r3, [sp, #20]
 8024c4c:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8024c50:	9b03      	ldr	r3, [sp, #12]
 8024c52:	459c      	cmp	ip, r3
 8024c54:	f040 81f8 	bne.w	8025048 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8024c58:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024c5c:	9a00      	ldr	r2, [sp, #0]
 8024c5e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024c62:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8024c66:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024c6a:	4288      	cmp	r0, r1
 8024c6c:	f43f ad54 	beq.w	8024718 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024c70:	8b60      	ldrh	r0, [r4, #26]
 8024c72:	8b21      	ldrh	r1, [r4, #24]
 8024c74:	ea50 0201 	orrs.w	r2, r0, r1
 8024c78:	d00c      	beq.n	8024c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024c7a:	2b00      	cmp	r3, #0
 8024c7c:	db0a      	blt.n	8024c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024c7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024c80:	4299      	cmp	r1, r3
 8024c82:	dd07      	ble.n	8024c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024c84:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024c88:	4299      	cmp	r1, r3
 8024c8a:	f0c0 81d0 	bcc.w	802502e <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8024c8e:	2301      	movs	r3, #1
 8024c90:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024c94:	9b00      	ldr	r3, [sp, #0]
 8024c96:	f8a4 e014 	strh.w	lr, [r4, #20]
 8024c9a:	82e3      	strh	r3, [r4, #22]
 8024c9c:	e517      	b.n	80246ce <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8024c9e:	2f00      	cmp	r7, #0
 8024ca0:	f2c0 8097 	blt.w	8024dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8024ca4:	2301      	movs	r3, #1
 8024ca6:	f1c1 0c20 	rsb	ip, r1, #32
 8024caa:	9307      	str	r3, [sp, #28]
 8024cac:	2320      	movs	r3, #32
 8024cae:	fb02 f20c 	mul.w	r2, r2, ip
 8024cb2:	9306      	str	r3, [sp, #24]
 8024cb4:	9b06      	ldr	r3, [sp, #24]
 8024cb6:	fb92 fcf7 	sdiv	ip, r2, r7
 8024cba:	fb07 221c 	mls	r2, r7, ip, r2
 8024cbe:	4419      	add	r1, r3
 8024cc0:	9b00      	ldr	r3, [sp, #0]
 8024cc2:	2a00      	cmp	r2, #0
 8024cc4:	bfbc      	itt	lt
 8024cc6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8024cca:	19d2      	addlt	r2, r2, r7
 8024ccc:	fb0c 3101 	mla	r1, ip, r1, r3
 8024cd0:	9b07      	ldr	r3, [sp, #28]
 8024cd2:	4460      	add	r0, ip
 8024cd4:	441d      	add	r5, r3
 8024cd6:	0433      	lsls	r3, r6, #16
 8024cd8:	b200      	sxth	r0, r0
 8024cda:	930a      	str	r3, [sp, #40]	; 0x28
 8024cdc:	18eb      	adds	r3, r5, r3
 8024cde:	b209      	sxth	r1, r1
 8024ce0:	8320      	strh	r0, [r4, #24]
 8024ce2:	454b      	cmp	r3, r9
 8024ce4:	8361      	strh	r1, [r4, #26]
 8024ce6:	d014      	beq.n	8024d12 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8024ce8:	ea50 0301 	orrs.w	r3, r0, r1
 8024cec:	d00c      	beq.n	8024d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024cee:	f1b8 0f00 	cmp.w	r8, #0
 8024cf2:	db09      	blt.n	8024d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024cf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024cf6:	4543      	cmp	r3, r8
 8024cf8:	dd06      	ble.n	8024d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024cfa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024cfe:	4299      	cmp	r1, r3
 8024d00:	d36e      	bcc.n	8024de0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8024d02:	2301      	movs	r3, #1
 8024d04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024d08:	2300      	movs	r3, #0
 8024d0a:	82a5      	strh	r5, [r4, #20]
 8024d0c:	82e6      	strh	r6, [r4, #22]
 8024d0e:	8323      	strh	r3, [r4, #24]
 8024d10:	8363      	strh	r3, [r4, #26]
 8024d12:	9904      	ldr	r1, [sp, #16]
 8024d14:	eb0e 030c 	add.w	r3, lr, ip
 8024d18:	42a9      	cmp	r1, r5
 8024d1a:	d04d      	beq.n	8024db8 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8024d1c:	9902      	ldr	r1, [sp, #8]
 8024d1e:	1bd2      	subs	r2, r2, r7
 8024d20:	1ac9      	subs	r1, r1, r3
 8024d22:	9200      	str	r2, [sp, #0]
 8024d24:	448c      	add	ip, r1
 8024d26:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8024d2a:	fb9c fef7 	sdiv	lr, ip, r7
 8024d2e:	fb07 cc1e 	mls	ip, r7, lr, ip
 8024d32:	f1bc 0f00 	cmp.w	ip, #0
 8024d36:	bfbc      	itt	lt
 8024d38:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024d3c:	44bc      	addlt	ip, r7
 8024d3e:	f10e 0101 	add.w	r1, lr, #1
 8024d42:	910d      	str	r1, [sp, #52]	; 0x34
 8024d44:	9a00      	ldr	r2, [sp, #0]
 8024d46:	8b20      	ldrh	r0, [r4, #24]
 8024d48:	eb12 020c 	adds.w	r2, r2, ip
 8024d4c:	8b61      	ldrh	r1, [r4, #26]
 8024d4e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024d52:	9200      	str	r2, [sp, #0]
 8024d54:	bf5b      	ittet	pl
 8024d56:	1bd2      	subpl	r2, r2, r7
 8024d58:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8024d5c:	46f0      	movmi	r8, lr
 8024d5e:	9200      	strpl	r2, [sp, #0]
 8024d60:	9a07      	ldr	r2, [sp, #28]
 8024d62:	4440      	add	r0, r8
 8024d64:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024d68:	4443      	add	r3, r8
 8024d6a:	4415      	add	r5, r2
 8024d6c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024d72:	b200      	sxth	r0, r0
 8024d74:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024d78:	442a      	add	r2, r5
 8024d7a:	b209      	sxth	r1, r1
 8024d7c:	8320      	strh	r0, [r4, #24]
 8024d7e:	454a      	cmp	r2, r9
 8024d80:	8361      	strh	r1, [r4, #26]
 8024d82:	d016      	beq.n	8024db2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8024d84:	ea50 0201 	orrs.w	r2, r0, r1
 8024d88:	d00d      	beq.n	8024da6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024d8a:	f1b8 0f00 	cmp.w	r8, #0
 8024d8e:	db0a      	blt.n	8024da6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024d90:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024d92:	4541      	cmp	r1, r8
 8024d94:	dd07      	ble.n	8024da6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024d96:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024d9a:	4288      	cmp	r0, r1
 8024d9c:	d330      	bcc.n	8024e00 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8024d9e:	f04f 0201 	mov.w	r2, #1
 8024da2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024da6:	f04f 0200 	mov.w	r2, #0
 8024daa:	82a5      	strh	r5, [r4, #20]
 8024dac:	82e6      	strh	r6, [r4, #22]
 8024dae:	8322      	strh	r2, [r4, #24]
 8024db0:	8362      	strh	r2, [r4, #26]
 8024db2:	9904      	ldr	r1, [sp, #16]
 8024db4:	42a9      	cmp	r1, r5
 8024db6:	d1c5      	bne.n	8024d44 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8024db8:	9a02      	ldr	r2, [sp, #8]
 8024dba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024dbc:	1ad3      	subs	r3, r2, r3
 8024dbe:	8b22      	ldrh	r2, [r4, #24]
 8024dc0:	3120      	adds	r1, #32
 8024dc2:	441a      	add	r2, r3
 8024dc4:	8322      	strh	r2, [r4, #24]
 8024dc6:	9a06      	ldr	r2, [sp, #24]
 8024dc8:	1a89      	subs	r1, r1, r2
 8024dca:	8b62      	ldrh	r2, [r4, #26]
 8024dcc:	fb03 2301 	mla	r3, r3, r1, r2
 8024dd0:	e64e      	b.n	8024a70 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8024dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8024dd6:	434a      	muls	r2, r1
 8024dd8:	427f      	negs	r7, r7
 8024dda:	9307      	str	r3, [sp, #28]
 8024ddc:	2300      	movs	r3, #0
 8024dde:	e768      	b.n	8024cb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8024de0:	f104 0314 	add.w	r3, r4, #20
 8024de4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024de8:	cb03      	ldmia	r3!, {r0, r1}
 8024dea:	f8c8 0000 	str.w	r0, [r8]
 8024dee:	f8c8 1004 	str.w	r1, [r8, #4]
 8024df2:	6923      	ldr	r3, [r4, #16]
 8024df4:	3308      	adds	r3, #8
 8024df6:	6123      	str	r3, [r4, #16]
 8024df8:	68a3      	ldr	r3, [r4, #8]
 8024dfa:	3301      	adds	r3, #1
 8024dfc:	60a3      	str	r3, [r4, #8]
 8024dfe:	e783      	b.n	8024d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024e00:	f104 0814 	add.w	r8, r4, #20
 8024e04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024e08:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024e0c:	f8c9 0000 	str.w	r0, [r9]
 8024e10:	f8c9 1004 	str.w	r1, [r9, #4]
 8024e14:	6921      	ldr	r1, [r4, #16]
 8024e16:	3108      	adds	r1, #8
 8024e18:	6121      	str	r1, [r4, #16]
 8024e1a:	68a1      	ldr	r1, [r4, #8]
 8024e1c:	3101      	adds	r1, #1
 8024e1e:	60a1      	str	r1, [r4, #8]
 8024e20:	e7c1      	b.n	8024da6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024e22:	f104 0314 	add.w	r3, r4, #20
 8024e26:	6925      	ldr	r5, [r4, #16]
 8024e28:	cb03      	ldmia	r3!, {r0, r1}
 8024e2a:	6028      	str	r0, [r5, #0]
 8024e2c:	6069      	str	r1, [r5, #4]
 8024e2e:	6923      	ldr	r3, [r4, #16]
 8024e30:	3308      	adds	r3, #8
 8024e32:	6123      	str	r3, [r4, #16]
 8024e34:	68a3      	ldr	r3, [r4, #8]
 8024e36:	3301      	adds	r3, #1
 8024e38:	60a3      	str	r3, [r4, #8]
 8024e3a:	e66a      	b.n	8024b12 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024e3c:	f104 0314 	add.w	r3, r4, #20
 8024e40:	6925      	ldr	r5, [r4, #16]
 8024e42:	cb03      	ldmia	r3!, {r0, r1}
 8024e44:	6028      	str	r0, [r5, #0]
 8024e46:	6069      	str	r1, [r5, #4]
 8024e48:	6923      	ldr	r3, [r4, #16]
 8024e4a:	3308      	adds	r3, #8
 8024e4c:	6123      	str	r3, [r4, #16]
 8024e4e:	68a3      	ldr	r3, [r4, #8]
 8024e50:	3301      	adds	r3, #1
 8024e52:	60a3      	str	r3, [r4, #8]
 8024e54:	e6be      	b.n	8024bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024e56:	f00b 031f 	and.w	r3, fp, #31
 8024e5a:	114f      	asrs	r7, r1, #5
 8024e5c:	8b20      	ldrh	r0, [r4, #24]
 8024e5e:	f001 011f 	and.w	r1, r1, #31
 8024e62:	930f      	str	r3, [sp, #60]	; 0x3c
 8024e64:	9b04      	ldr	r3, [sp, #16]
 8024e66:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024e6a:	429f      	cmp	r7, r3
 8024e6c:	d10a      	bne.n	8024e84 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8024e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e70:	4418      	add	r0, r3
 8024e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024e74:	4419      	add	r1, r3
 8024e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e78:	8320      	strh	r0, [r4, #24]
 8024e7a:	fb03 9901 	mla	r9, r3, r1, r9
 8024e7e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8024e82:	e6af      	b.n	8024be4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024e84:	2d00      	cmp	r5, #0
 8024e86:	f2c0 809b 	blt.w	8024fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8024e8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024e8c:	f1c1 0320 	rsb	r3, r1, #32
 8024e90:	4373      	muls	r3, r6
 8024e92:	2601      	movs	r6, #1
 8024e94:	960e      	str	r6, [sp, #56]	; 0x38
 8024e96:	2620      	movs	r6, #32
 8024e98:	960d      	str	r6, [sp, #52]	; 0x34
 8024e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024e9c:	fb93 f6f5 	sdiv	r6, r3, r5
 8024ea0:	4411      	add	r1, r2
 8024ea2:	fb05 3316 	mls	r3, r5, r6, r3
 8024ea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024ea8:	2b00      	cmp	r3, #0
 8024eaa:	4417      	add	r7, r2
 8024eac:	9a00      	ldr	r2, [sp, #0]
 8024eae:	bfbc      	itt	lt
 8024eb0:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024eb4:	195b      	addlt	r3, r3, r5
 8024eb6:	0412      	lsls	r2, r2, #16
 8024eb8:	fb06 9101 	mla	r1, r6, r1, r9
 8024ebc:	4430      	add	r0, r6
 8024ebe:	eb07 0902 	add.w	r9, r7, r2
 8024ec2:	9210      	str	r2, [sp, #64]	; 0x40
 8024ec4:	b200      	sxth	r0, r0
 8024ec6:	b209      	sxth	r1, r1
 8024ec8:	45c1      	cmp	r9, r8
 8024eca:	8320      	strh	r0, [r4, #24]
 8024ecc:	8361      	strh	r1, [r4, #26]
 8024ece:	d017      	beq.n	8024f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8024ed0:	ea50 0201 	orrs.w	r2, r0, r1
 8024ed4:	d00d      	beq.n	8024ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024ed6:	f1be 0f00 	cmp.w	lr, #0
 8024eda:	db0a      	blt.n	8024ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024edc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024ede:	4571      	cmp	r1, lr
 8024ee0:	dd07      	ble.n	8024ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024ee2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024ee6:	4288      	cmp	r0, r1
 8024ee8:	d372      	bcc.n	8024fd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8024eea:	f04f 0201 	mov.w	r2, #1
 8024eee:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024ef2:	9a00      	ldr	r2, [sp, #0]
 8024ef4:	82a7      	strh	r7, [r4, #20]
 8024ef6:	82e2      	strh	r2, [r4, #22]
 8024ef8:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024efc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f02:	eb02 0e06 	add.w	lr, r2, r6
 8024f06:	9a04      	ldr	r2, [sp, #16]
 8024f08:	42ba      	cmp	r2, r7
 8024f0a:	d049      	beq.n	8024fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8024f0c:	9a02      	ldr	r2, [sp, #8]
 8024f0e:	1b5b      	subs	r3, r3, r5
 8024f10:	eba2 010e 	sub.w	r1, r2, lr
 8024f14:	440e      	add	r6, r1
 8024f16:	0176      	lsls	r6, r6, #5
 8024f18:	fb96 f8f5 	sdiv	r8, r6, r5
 8024f1c:	fb05 6618 	mls	r6, r5, r8, r6
 8024f20:	2e00      	cmp	r6, #0
 8024f22:	bfbc      	itt	lt
 8024f24:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024f28:	1976      	addlt	r6, r6, r5
 8024f2a:	f108 0201 	add.w	r2, r8, #1
 8024f2e:	9211      	str	r2, [sp, #68]	; 0x44
 8024f30:	199b      	adds	r3, r3, r6
 8024f32:	8b20      	ldrh	r0, [r4, #24]
 8024f34:	8b61      	ldrh	r1, [r4, #26]
 8024f36:	bf54      	ite	pl
 8024f38:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8024f3c:	46c1      	movmi	r9, r8
 8024f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024f40:	bf58      	it	pl
 8024f42:	1b5b      	subpl	r3, r3, r5
 8024f44:	4448      	add	r0, r9
 8024f46:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8024f4a:	4417      	add	r7, r2
 8024f4c:	44ce      	add	lr, r9
 8024f4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024f50:	b200      	sxth	r0, r0
 8024f52:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8024f56:	b209      	sxth	r1, r1
 8024f58:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8024f5c:	443a      	add	r2, r7
 8024f5e:	8320      	strh	r0, [r4, #24]
 8024f60:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8024f64:	8361      	strh	r1, [r4, #26]
 8024f66:	4552      	cmp	r2, sl
 8024f68:	d017      	beq.n	8024f9a <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8024f6a:	ea50 0201 	orrs.w	r2, r0, r1
 8024f6e:	d00d      	beq.n	8024f8c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024f70:	f1b9 0f00 	cmp.w	r9, #0
 8024f74:	db0a      	blt.n	8024f8c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024f76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024f78:	4549      	cmp	r1, r9
 8024f7a:	dd07      	ble.n	8024f8c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024f7c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024f80:	4288      	cmp	r0, r1
 8024f82:	d336      	bcc.n	8024ff2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8024f84:	f04f 0201 	mov.w	r2, #1
 8024f88:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024f8c:	9a00      	ldr	r2, [sp, #0]
 8024f8e:	82a7      	strh	r7, [r4, #20]
 8024f90:	82e2      	strh	r2, [r4, #22]
 8024f92:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024f96:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024f9a:	9a04      	ldr	r2, [sp, #16]
 8024f9c:	42ba      	cmp	r2, r7
 8024f9e:	d1c7      	bne.n	8024f30 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024fa0:	9b02      	ldr	r3, [sp, #8]
 8024fa2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024fa4:	eba3 0e0e 	sub.w	lr, r3, lr
 8024fa8:	8b23      	ldrh	r3, [r4, #24]
 8024faa:	3120      	adds	r1, #32
 8024fac:	4473      	add	r3, lr
 8024fae:	8323      	strh	r3, [r4, #24]
 8024fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024fb2:	1ac9      	subs	r1, r1, r3
 8024fb4:	8b63      	ldrh	r3, [r4, #26]
 8024fb6:	fb0e 3e01 	mla	lr, lr, r1, r3
 8024fba:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024fbe:	e611      	b.n	8024be4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024fc0:	f04f 36ff 	mov.w	r6, #4294967295
 8024fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fc6:	426d      	negs	r5, r5
 8024fc8:	960e      	str	r6, [sp, #56]	; 0x38
 8024fca:	2600      	movs	r6, #0
 8024fcc:	434b      	muls	r3, r1
 8024fce:	e763      	b.n	8024e98 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8024fd0:	f104 0e14 	add.w	lr, r4, #20
 8024fd4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024fd8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024fdc:	f8c8 0000 	str.w	r0, [r8]
 8024fe0:	f8c8 1004 	str.w	r1, [r8, #4]
 8024fe4:	6921      	ldr	r1, [r4, #16]
 8024fe6:	3108      	adds	r1, #8
 8024fe8:	6121      	str	r1, [r4, #16]
 8024fea:	68a1      	ldr	r1, [r4, #8]
 8024fec:	3101      	adds	r1, #1
 8024fee:	60a1      	str	r1, [r4, #8]
 8024ff0:	e77f      	b.n	8024ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024ff2:	f104 0914 	add.w	r9, r4, #20
 8024ff6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8024ffa:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024ffe:	f8ca 0000 	str.w	r0, [sl]
 8025002:	f8ca 1004 	str.w	r1, [sl, #4]
 8025006:	6921      	ldr	r1, [r4, #16]
 8025008:	3108      	adds	r1, #8
 802500a:	6121      	str	r1, [r4, #16]
 802500c:	68a1      	ldr	r1, [r4, #8]
 802500e:	3101      	adds	r1, #1
 8025010:	60a1      	str	r1, [r4, #8]
 8025012:	e7bb      	b.n	8024f8c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025014:	f104 0314 	add.w	r3, r4, #20
 8025018:	6925      	ldr	r5, [r4, #16]
 802501a:	cb03      	ldmia	r3!, {r0, r1}
 802501c:	6028      	str	r0, [r5, #0]
 802501e:	6069      	str	r1, [r5, #4]
 8025020:	6923      	ldr	r3, [r4, #16]
 8025022:	3308      	adds	r3, #8
 8025024:	6123      	str	r3, [r4, #16]
 8025026:	68a3      	ldr	r3, [r4, #8]
 8025028:	3301      	adds	r3, #1
 802502a:	60a3      	str	r3, [r4, #8]
 802502c:	e5fd      	b.n	8024c2a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802502e:	f104 0314 	add.w	r3, r4, #20
 8025032:	6925      	ldr	r5, [r4, #16]
 8025034:	cb03      	ldmia	r3!, {r0, r1}
 8025036:	6028      	str	r0, [r5, #0]
 8025038:	6069      	str	r1, [r5, #4]
 802503a:	6923      	ldr	r3, [r4, #16]
 802503c:	3308      	adds	r3, #8
 802503e:	6123      	str	r3, [r4, #16]
 8025040:	68a3      	ldr	r3, [r4, #8]
 8025042:	3301      	adds	r3, #1
 8025044:	60a3      	str	r3, [r4, #8]
 8025046:	e625      	b.n	8024c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025048:	9b05      	ldr	r3, [sp, #20]
 802504a:	ea4f 176b 	mov.w	r7, fp, asr #5
 802504e:	f00b 081f 	and.w	r8, fp, #31
 8025052:	8b20      	ldrh	r0, [r4, #24]
 8025054:	f003 031f 	and.w	r3, r3, #31
 8025058:	4577      	cmp	r7, lr
 802505a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802505e:	9302      	str	r3, [sp, #8]
 8025060:	9b03      	ldr	r3, [sp, #12]
 8025062:	eba3 050c 	sub.w	r5, r3, ip
 8025066:	d108      	bne.n	802507a <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8025068:	9b02      	ldr	r3, [sp, #8]
 802506a:	4428      	add	r0, r5
 802506c:	4498      	add	r8, r3
 802506e:	8320      	strh	r0, [r4, #24]
 8025070:	fb05 9508 	mla	r5, r5, r8, r9
 8025074:	8365      	strh	r5, [r4, #26]
 8025076:	f7ff bb4f 	b.w	8024718 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802507a:	9b05      	ldr	r3, [sp, #20]
 802507c:	ebb3 030b 	subs.w	r3, r3, fp
 8025080:	f100 809c 	bmi.w	80251bc <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8025084:	f1c8 0120 	rsb	r1, r8, #32
 8025088:	2201      	movs	r2, #1
 802508a:	f04f 0b20 	mov.w	fp, #32
 802508e:	434d      	muls	r5, r1
 8025090:	9201      	str	r2, [sp, #4]
 8025092:	9a01      	ldr	r2, [sp, #4]
 8025094:	44d8      	add	r8, fp
 8025096:	fb95 f6f3 	sdiv	r6, r5, r3
 802509a:	fb03 5516 	mls	r5, r3, r6, r5
 802509e:	4417      	add	r7, r2
 80250a0:	9a00      	ldr	r2, [sp, #0]
 80250a2:	2d00      	cmp	r5, #0
 80250a4:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80250a8:	bfbc      	itt	lt
 80250aa:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80250ae:	18ed      	addlt	r5, r5, r3
 80250b0:	eb07 0a02 	add.w	sl, r7, r2
 80250b4:	9204      	str	r2, [sp, #16]
 80250b6:	fb06 9808 	mla	r8, r6, r8, r9
 80250ba:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80250be:	4430      	add	r0, r6
 80250c0:	fa0f f188 	sxth.w	r1, r8
 80250c4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80250c8:	b200      	sxth	r0, r0
 80250ca:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80250ce:	8361      	strh	r1, [r4, #26]
 80250d0:	8320      	strh	r0, [r4, #24]
 80250d2:	45ca      	cmp	sl, r9
 80250d4:	d015      	beq.n	8025102 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 80250d6:	ea50 0201 	orrs.w	r2, r0, r1
 80250da:	d00c      	beq.n	80250f6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80250dc:	f1b8 0f00 	cmp.w	r8, #0
 80250e0:	db09      	blt.n	80250f6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80250e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80250e4:	4541      	cmp	r1, r8
 80250e6:	dd06      	ble.n	80250f6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80250e8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80250ec:	4288      	cmp	r0, r1
 80250ee:	d36e      	bcc.n	80251ce <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 80250f0:	2101      	movs	r1, #1
 80250f2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80250f6:	2100      	movs	r1, #0
 80250f8:	9a00      	ldr	r2, [sp, #0]
 80250fa:	82a7      	strh	r7, [r4, #20]
 80250fc:	82e2      	strh	r2, [r4, #22]
 80250fe:	8321      	strh	r1, [r4, #24]
 8025100:	8361      	strh	r1, [r4, #26]
 8025102:	45be      	cmp	lr, r7
 8025104:	44b4      	add	ip, r6
 8025106:	d048      	beq.n	802519a <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8025108:	9a03      	ldr	r2, [sp, #12]
 802510a:	1aed      	subs	r5, r5, r3
 802510c:	eba2 010c 	sub.w	r1, r2, ip
 8025110:	440e      	add	r6, r1
 8025112:	0176      	lsls	r6, r6, #5
 8025114:	fb96 f8f3 	sdiv	r8, r6, r3
 8025118:	fb03 6618 	mls	r6, r3, r8, r6
 802511c:	2e00      	cmp	r6, #0
 802511e:	bfbc      	itt	lt
 8025120:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025124:	18f6      	addlt	r6, r6, r3
 8025126:	f108 0201 	add.w	r2, r8, #1
 802512a:	9205      	str	r2, [sp, #20]
 802512c:	19ad      	adds	r5, r5, r6
 802512e:	8b20      	ldrh	r0, [r4, #24]
 8025130:	8b61      	ldrh	r1, [r4, #26]
 8025132:	bf54      	ite	pl
 8025134:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8025138:	46c1      	movmi	r9, r8
 802513a:	9a01      	ldr	r2, [sp, #4]
 802513c:	bf58      	it	pl
 802513e:	1aed      	subpl	r5, r5, r3
 8025140:	4448      	add	r0, r9
 8025142:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8025146:	4417      	add	r7, r2
 8025148:	44cc      	add	ip, r9
 802514a:	9a04      	ldr	r2, [sp, #16]
 802514c:	b200      	sxth	r0, r0
 802514e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8025152:	b209      	sxth	r1, r1
 8025154:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8025158:	443a      	add	r2, r7
 802515a:	8320      	strh	r0, [r4, #24]
 802515c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8025160:	8361      	strh	r1, [r4, #26]
 8025162:	4552      	cmp	r2, sl
 8025164:	d017      	beq.n	8025196 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8025166:	ea50 0201 	orrs.w	r2, r0, r1
 802516a:	d00d      	beq.n	8025188 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802516c:	f1b9 0f00 	cmp.w	r9, #0
 8025170:	db0a      	blt.n	8025188 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025172:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025174:	4549      	cmp	r1, r9
 8025176:	dd07      	ble.n	8025188 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025178:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802517c:	4288      	cmp	r0, r1
 802517e:	d337      	bcc.n	80251f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8025180:	f04f 0201 	mov.w	r2, #1
 8025184:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025188:	9a00      	ldr	r2, [sp, #0]
 802518a:	82a7      	strh	r7, [r4, #20]
 802518c:	82e2      	strh	r2, [r4, #22]
 802518e:	f04f 0200 	mov.w	r2, #0
 8025192:	8322      	strh	r2, [r4, #24]
 8025194:	8362      	strh	r2, [r4, #26]
 8025196:	45be      	cmp	lr, r7
 8025198:	d1c8      	bne.n	802512c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 802519a:	9b03      	ldr	r3, [sp, #12]
 802519c:	8b62      	ldrh	r2, [r4, #26]
 802519e:	eba3 0c0c 	sub.w	ip, r3, ip
 80251a2:	8b23      	ldrh	r3, [r4, #24]
 80251a4:	4463      	add	r3, ip
 80251a6:	8323      	strh	r3, [r4, #24]
 80251a8:	9b02      	ldr	r3, [sp, #8]
 80251aa:	3320      	adds	r3, #32
 80251ac:	eba3 030b 	sub.w	r3, r3, fp
 80251b0:	fb0c 2c03 	mla	ip, ip, r3, r2
 80251b4:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80251b8:	f7ff baae 	b.w	8024718 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80251bc:	f04f 32ff 	mov.w	r2, #4294967295
 80251c0:	fb05 f508 	mul.w	r5, r5, r8
 80251c4:	425b      	negs	r3, r3
 80251c6:	f04f 0b00 	mov.w	fp, #0
 80251ca:	9201      	str	r2, [sp, #4]
 80251cc:	e761      	b.n	8025092 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80251ce:	f104 0814 	add.w	r8, r4, #20
 80251d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80251d6:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80251da:	f8c9 0000 	str.w	r0, [r9]
 80251de:	f8c9 1004 	str.w	r1, [r9, #4]
 80251e2:	6921      	ldr	r1, [r4, #16]
 80251e4:	3108      	adds	r1, #8
 80251e6:	6121      	str	r1, [r4, #16]
 80251e8:	68a1      	ldr	r1, [r4, #8]
 80251ea:	3101      	adds	r1, #1
 80251ec:	60a1      	str	r1, [r4, #8]
 80251ee:	e782      	b.n	80250f6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80251f0:	f104 0914 	add.w	r9, r4, #20
 80251f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80251f8:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80251fc:	f8ca 0000 	str.w	r0, [sl]
 8025200:	f8ca 1004 	str.w	r1, [sl, #4]
 8025204:	6921      	ldr	r1, [r4, #16]
 8025206:	3108      	adds	r1, #8
 8025208:	6121      	str	r1, [r4, #16]
 802520a:	68a1      	ldr	r1, [r4, #8]
 802520c:	3101      	adds	r1, #1
 802520e:	60a1      	str	r1, [r4, #8]
 8025210:	e7ba      	b.n	8025188 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08025212 <_ZN8touchgfx7Outline6lineToEii>:
 8025212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025214:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025216:	4604      	mov	r4, r0
 8025218:	460d      	mov	r5, r1
 802521a:	4616      	mov	r6, r2
 802521c:	079b      	lsls	r3, r3, #30
 802521e:	d526      	bpl.n	802526e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8025220:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8025224:	ea85 0001 	eor.w	r0, r5, r1
 8025228:	ea86 0302 	eor.w	r3, r6, r2
 802522c:	4303      	orrs	r3, r0
 802522e:	d01e      	beq.n	802526e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8025230:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8025232:	114b      	asrs	r3, r1, #5
 8025234:	9600      	str	r6, [sp, #0]
 8025236:	4283      	cmp	r3, r0
 8025238:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802523a:	bfb8      	it	lt
 802523c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802523e:	3301      	adds	r3, #1
 8025240:	4283      	cmp	r3, r0
 8025242:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8025244:	bfc8      	it	gt
 8025246:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025248:	116b      	asrs	r3, r5, #5
 802524a:	4283      	cmp	r3, r0
 802524c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802524e:	bfb8      	it	lt
 8025250:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8025252:	3301      	adds	r3, #1
 8025254:	4283      	cmp	r3, r0
 8025256:	4620      	mov	r0, r4
 8025258:	bfc8      	it	gt
 802525a:	6363      	strgt	r3, [r4, #52]	; 0x34
 802525c:	462b      	mov	r3, r5
 802525e:	f7ff f9e3 	bl	8024628 <_ZN8touchgfx7Outline10renderLineEiiii>
 8025262:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025264:	f043 0301 	orr.w	r3, r3, #1
 8025268:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802526c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802526e:	b002      	add	sp, #8
 8025270:	bd70      	pop	{r4, r5, r6, pc}

08025272 <_ZN8touchgfx7Outline6moveToEii>:
 8025272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025274:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025276:	4615      	mov	r5, r2
 8025278:	4604      	mov	r4, r0
 802527a:	460e      	mov	r6, r1
 802527c:	079a      	lsls	r2, r3, #30
 802527e:	d401      	bmi.n	8025284 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8025280:	f7ff f98c 	bl	802459c <_ZN8touchgfx7Outline5resetEv>
 8025284:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025286:	07db      	lsls	r3, r3, #31
 8025288:	d504      	bpl.n	8025294 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802528a:	4620      	mov	r0, r4
 802528c:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8025290:	f7ff ffbf 	bl	8025212 <_ZN8touchgfx7Outline6lineToEii>
 8025294:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8025298:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802529c:	116f      	asrs	r7, r5, #5
 802529e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80252a2:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80252a6:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80252aa:	4291      	cmp	r1, r2
 80252ac:	d015      	beq.n	80252da <_ZN8touchgfx7Outline6moveToEii+0x68>
 80252ae:	8b61      	ldrh	r1, [r4, #26]
 80252b0:	8b22      	ldrh	r2, [r4, #24]
 80252b2:	430a      	orrs	r2, r1
 80252b4:	d00b      	beq.n	80252ce <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80252b6:	2b00      	cmp	r3, #0
 80252b8:	db09      	blt.n	80252ce <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80252ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80252bc:	429a      	cmp	r2, r3
 80252be:	dd06      	ble.n	80252ce <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80252c0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80252c4:	429a      	cmp	r2, r3
 80252c6:	d30d      	bcc.n	80252e4 <_ZN8touchgfx7Outline6moveToEii+0x72>
 80252c8:	2301      	movs	r3, #1
 80252ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80252ce:	2300      	movs	r3, #0
 80252d0:	f8a4 c014 	strh.w	ip, [r4, #20]
 80252d4:	82e7      	strh	r7, [r4, #22]
 80252d6:	8323      	strh	r3, [r4, #24]
 80252d8:	8363      	strh	r3, [r4, #26]
 80252da:	61e6      	str	r6, [r4, #28]
 80252dc:	62a5      	str	r5, [r4, #40]	; 0x28
 80252de:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80252e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80252e4:	f104 0314 	add.w	r3, r4, #20
 80252e8:	6922      	ldr	r2, [r4, #16]
 80252ea:	cb03      	ldmia	r3!, {r0, r1}
 80252ec:	6010      	str	r0, [r2, #0]
 80252ee:	6051      	str	r1, [r2, #4]
 80252f0:	6923      	ldr	r3, [r4, #16]
 80252f2:	3308      	adds	r3, #8
 80252f4:	6123      	str	r3, [r4, #16]
 80252f6:	68a3      	ldr	r3, [r4, #8]
 80252f8:	3301      	adds	r3, #1
 80252fa:	60a3      	str	r3, [r4, #8]
 80252fc:	e7e7      	b.n	80252ce <_ZN8touchgfx7Outline6moveToEii+0x5c>

080252fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80252fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025302:	b0d1      	sub	sp, #324	; 0x144
 8025304:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8025308:	466c      	mov	r4, sp
 802530a:	1a0d      	subs	r5, r1, r0
 802530c:	f100 0208 	add.w	r2, r0, #8
 8025310:	2d48      	cmp	r5, #72	; 0x48
 8025312:	f340 80ba 	ble.w	802548a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025316:	112d      	asrs	r5, r5, #4
 8025318:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802531c:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8025320:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8025324:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8025328:	f9b0 8000 	ldrsh.w	r8, [r0]
 802532c:	681e      	ldr	r6, [r3, #0]
 802532e:	6006      	str	r6, [r0, #0]
 8025330:	685e      	ldr	r6, [r3, #4]
 8025332:	6046      	str	r6, [r0, #4]
 8025334:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8025338:	f8a3 c004 	strh.w	ip, [r3, #4]
 802533c:	f8a3 e002 	strh.w	lr, [r3, #2]
 8025340:	80df      	strh	r7, [r3, #6]
 8025342:	f1a1 0308 	sub.w	r3, r1, #8
 8025346:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802534a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802534e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8025352:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025356:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802535a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802535e:	45ac      	cmp	ip, r5
 8025360:	dd0f      	ble.n	8025382 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8025362:	681d      	ldr	r5, [r3, #0]
 8025364:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8025368:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802536c:	6015      	str	r5, [r2, #0]
 802536e:	685d      	ldr	r5, [r3, #4]
 8025370:	6055      	str	r5, [r2, #4]
 8025372:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025376:	f821 6c06 	strh.w	r6, [r1, #-6]
 802537a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802537e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025382:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8025386:	f9b0 7000 	ldrsh.w	r7, [r0]
 802538a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802538e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8025392:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8025396:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802539a:	4565      	cmp	r5, ip
 802539c:	dd0d      	ble.n	80253ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802539e:	6815      	ldr	r5, [r2, #0]
 80253a0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80253a4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80253a8:	6005      	str	r5, [r0, #0]
 80253aa:	6855      	ldr	r5, [r2, #4]
 80253ac:	8107      	strh	r7, [r0, #8]
 80253ae:	6045      	str	r5, [r0, #4]
 80253b0:	8146      	strh	r6, [r0, #10]
 80253b2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80253b6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80253ba:	f9b0 7000 	ldrsh.w	r7, [r0]
 80253be:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80253c2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80253c6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80253ca:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80253ce:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80253d2:	45ac      	cmp	ip, r5
 80253d4:	dd0f      	ble.n	80253f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80253d6:	681d      	ldr	r5, [r3, #0]
 80253d8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80253dc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80253e0:	6005      	str	r5, [r0, #0]
 80253e2:	685d      	ldr	r5, [r3, #4]
 80253e4:	6045      	str	r5, [r0, #4]
 80253e6:	f821 7c08 	strh.w	r7, [r1, #-8]
 80253ea:	f821 6c06 	strh.w	r6, [r1, #-6]
 80253ee:	f821 ec04 	strh.w	lr, [r1, #-4]
 80253f2:	f821 cc02 	strh.w	ip, [r1, #-2]
 80253f6:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80253fa:	f102 0508 	add.w	r5, r2, #8
 80253fe:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8025402:	f9b0 e000 	ldrsh.w	lr, [r0]
 8025406:	462f      	mov	r7, r5
 8025408:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802540c:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8025410:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8025414:	45b2      	cmp	sl, r6
 8025416:	dc18      	bgt.n	802544a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8025418:	3b08      	subs	r3, #8
 802541a:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802541e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8025422:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8025426:	45b2      	cmp	sl, r6
 8025428:	dbf6      	blt.n	8025418 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802542a:	42ab      	cmp	r3, r5
 802542c:	681e      	ldr	r6, [r3, #0]
 802542e:	d30e      	bcc.n	802544e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8025430:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8025434:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8025438:	602e      	str	r6, [r5, #0]
 802543a:	685e      	ldr	r6, [r3, #4]
 802543c:	606e      	str	r6, [r5, #4]
 802543e:	f8a3 9000 	strh.w	r9, [r3]
 8025442:	f8a3 8002 	strh.w	r8, [r3, #2]
 8025446:	809f      	strh	r7, [r3, #4]
 8025448:	80da      	strh	r2, [r3, #6]
 802544a:	462a      	mov	r2, r5
 802544c:	e7d3      	b.n	80253f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802544e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8025452:	6006      	str	r6, [r0, #0]
 8025454:	685e      	ldr	r6, [r3, #4]
 8025456:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802545a:	6046      	str	r6, [r0, #4]
 802545c:	1a1e      	subs	r6, r3, r0
 802545e:	80da      	strh	r2, [r3, #6]
 8025460:	1b4a      	subs	r2, r1, r5
 8025462:	f8a3 e000 	strh.w	lr, [r3]
 8025466:	10d2      	asrs	r2, r2, #3
 8025468:	f8a3 c002 	strh.w	ip, [r3, #2]
 802546c:	f8a3 8004 	strh.w	r8, [r3, #4]
 8025470:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8025474:	bfb5      	itete	lt
 8025476:	e9c4 0300 	strdlt	r0, r3, [r4]
 802547a:	4607      	movge	r7, r0
 802547c:	460b      	movlt	r3, r1
 802547e:	e9c4 5100 	strdge	r5, r1, [r4]
 8025482:	4638      	mov	r0, r7
 8025484:	3408      	adds	r4, #8
 8025486:	4619      	mov	r1, r3
 8025488:	e73f      	b.n	802530a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802548a:	4291      	cmp	r1, r2
 802548c:	d925      	bls.n	80254da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802548e:	f1a2 0310 	sub.w	r3, r2, #16
 8025492:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8025496:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802549a:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802549e:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80254a2:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80254a6:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80254aa:	42b5      	cmp	r5, r6
 80254ac:	dd13      	ble.n	80254d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80254ae:	461d      	mov	r5, r3
 80254b0:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80254b4:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80254b8:	3b08      	subs	r3, #8
 80254ba:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80254be:	619e      	str	r6, [r3, #24]
 80254c0:	42a8      	cmp	r0, r5
 80254c2:	686e      	ldr	r6, [r5, #4]
 80254c4:	f8a3 c010 	strh.w	ip, [r3, #16]
 80254c8:	61de      	str	r6, [r3, #28]
 80254ca:	825f      	strh	r7, [r3, #18]
 80254cc:	f8a3 8014 	strh.w	r8, [r3, #20]
 80254d0:	f8a3 e016 	strh.w	lr, [r3, #22]
 80254d4:	d1dd      	bne.n	8025492 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80254d6:	3208      	adds	r2, #8
 80254d8:	e7d7      	b.n	802548a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80254da:	466b      	mov	r3, sp
 80254dc:	429c      	cmp	r4, r3
 80254de:	d903      	bls.n	80254e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80254e0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80254e4:	3c08      	subs	r4, #8
 80254e6:	e710      	b.n	802530a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80254e8:	b051      	add	sp, #324	; 0x144
 80254ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080254ee <_ZN8touchgfx7Outline9sortCellsEv>:
 80254ee:	6881      	ldr	r1, [r0, #8]
 80254f0:	b111      	cbz	r1, 80254f8 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 80254f2:	68c0      	ldr	r0, [r0, #12]
 80254f4:	f7ff bf03 	b.w	80252fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80254f8:	4770      	bx	lr

080254fa <_ZN8touchgfx7Outline8getCellsEv>:
 80254fa:	b510      	push	{r4, lr}
 80254fc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80254fe:	4604      	mov	r4, r0
 8025500:	07da      	lsls	r2, r3, #31
 8025502:	d507      	bpl.n	8025514 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8025504:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8025508:	f7ff fe83 	bl	8025212 <_ZN8touchgfx7Outline6lineToEii>
 802550c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802550e:	f023 0301 	bic.w	r3, r3, #1
 8025512:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025514:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025516:	079b      	lsls	r3, r3, #30
 8025518:	d51a      	bpl.n	8025550 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802551a:	8b62      	ldrh	r2, [r4, #26]
 802551c:	8b23      	ldrh	r3, [r4, #24]
 802551e:	4313      	orrs	r3, r2
 8025520:	d00d      	beq.n	802553e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025522:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025526:	2b00      	cmp	r3, #0
 8025528:	db09      	blt.n	802553e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802552a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802552c:	4293      	cmp	r3, r2
 802552e:	da06      	bge.n	802553e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025530:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8025534:	429a      	cmp	r2, r3
 8025536:	d80d      	bhi.n	8025554 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8025538:	2301      	movs	r3, #1
 802553a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802553e:	68a0      	ldr	r0, [r4, #8]
 8025540:	b138      	cbz	r0, 8025552 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8025542:	4620      	mov	r0, r4
 8025544:	f7ff ffd3 	bl	80254ee <_ZN8touchgfx7Outline9sortCellsEv>
 8025548:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802554a:	f023 0302 	bic.w	r3, r3, #2
 802554e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025550:	68e0      	ldr	r0, [r4, #12]
 8025552:	bd10      	pop	{r4, pc}
 8025554:	f104 0314 	add.w	r3, r4, #20
 8025558:	6922      	ldr	r2, [r4, #16]
 802555a:	cb03      	ldmia	r3!, {r0, r1}
 802555c:	6010      	str	r0, [r2, #0]
 802555e:	6051      	str	r1, [r2, #4]
 8025560:	6923      	ldr	r3, [r4, #16]
 8025562:	3308      	adds	r3, #8
 8025564:	6123      	str	r3, [r4, #16]
 8025566:	68a3      	ldr	r3, [r4, #8]
 8025568:	3301      	adds	r3, #1
 802556a:	60a3      	str	r3, [r4, #8]
 802556c:	e7e7      	b.n	802553e <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802556e <_ZN8touchgfx8ScanlineD1Ev>:
 802556e:	4770      	bx	lr

08025570 <_ZN8touchgfx8ScanlineD0Ev>:
 8025570:	b510      	push	{r4, lr}
 8025572:	4604      	mov	r4, r0
 8025574:	2124      	movs	r1, #36	; 0x24
 8025576:	f000 f887 	bl	8025688 <_ZdlPvj>
 802557a:	4620      	mov	r0, r4
 802557c:	bd10      	pop	{r4, pc}

0802557e <_ZN8touchgfx8Scanline5resetEv>:
 802557e:	b510      	push	{r4, lr}
 8025580:	4604      	mov	r4, r0
 8025582:	f7f2 ff33 	bl	80183ec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8025586:	61a0      	str	r0, [r4, #24]
 8025588:	f7f2 ff36 	bl	80183f8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802558c:	61e0      	str	r0, [r4, #28]
 802558e:	f7f2 ff39 	bl	8018404 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8025592:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025596:	6220      	str	r0, [r4, #32]
 8025598:	6160      	str	r0, [r4, #20]
 802559a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802559e:	69e3      	ldr	r3, [r4, #28]
 80255a0:	6123      	str	r3, [r4, #16]
 80255a2:	2300      	movs	r3, #0
 80255a4:	60e3      	str	r3, [r4, #12]
 80255a6:	bd10      	pop	{r4, pc}

080255a8 <_ZN8touchgfx8ScanlineC1Ev>:
 80255a8:	4b07      	ldr	r3, [pc, #28]	; (80255c8 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80255aa:	b510      	push	{r4, lr}
 80255ac:	6003      	str	r3, [r0, #0]
 80255ae:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80255b2:	4604      	mov	r4, r0
 80255b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80255b8:	2300      	movs	r3, #0
 80255ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80255be:	6143      	str	r3, [r0, #20]
 80255c0:	f7ff ffdd 	bl	802557e <_ZN8touchgfx8Scanline5resetEv>
 80255c4:	4620      	mov	r0, r4
 80255c6:	bd10      	pop	{r4, pc}
 80255c8:	0802b87c 	.word	0x0802b87c

080255cc <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80255cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255d0:	1e0c      	subs	r4, r1, #0
 80255d2:	4605      	mov	r5, r0
 80255d4:	4617      	mov	r7, r2
 80255d6:	461e      	mov	r6, r3
 80255d8:	da03      	bge.n	80255e2 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80255da:	4426      	add	r6, r4
 80255dc:	2e01      	cmp	r6, #1
 80255de:	d421      	bmi.n	8025624 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80255e0:	2400      	movs	r4, #0
 80255e2:	f7f2 fefd 	bl	80183e0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80255e6:	42a0      	cmp	r0, r4
 80255e8:	d91c      	bls.n	8025624 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80255ea:	eb04 0806 	add.w	r8, r4, r6
 80255ee:	f7f2 fef7 	bl	80183e0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80255f2:	4580      	cmp	r8, r0
 80255f4:	d902      	bls.n	80255fc <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 80255f6:	f7f2 fef3 	bl	80183e0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80255fa:	1b06      	subs	r6, r0, r4
 80255fc:	69a8      	ldr	r0, [r5, #24]
 80255fe:	4632      	mov	r2, r6
 8025600:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8025604:	4420      	add	r0, r4
 8025606:	f7f4 fc53 	bl	8019eb0 <_ZN8touchgfx6memsetEPvhm>
 802560a:	686b      	ldr	r3, [r5, #4]
 802560c:	b2b2      	uxth	r2, r6
 802560e:	3301      	adds	r3, #1
 8025610:	42a3      	cmp	r3, r4
 8025612:	696b      	ldr	r3, [r5, #20]
 8025614:	d108      	bne.n	8025628 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8025616:	8819      	ldrh	r1, [r3, #0]
 8025618:	440a      	add	r2, r1
 802561a:	801a      	strh	r2, [r3, #0]
 802561c:	3c01      	subs	r4, #1
 802561e:	4434      	add	r4, r6
 8025620:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8025624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025628:	1c99      	adds	r1, r3, #2
 802562a:	6169      	str	r1, [r5, #20]
 802562c:	805a      	strh	r2, [r3, #2]
 802562e:	692b      	ldr	r3, [r5, #16]
 8025630:	1c9a      	adds	r2, r3, #2
 8025632:	612a      	str	r2, [r5, #16]
 8025634:	805c      	strh	r4, [r3, #2]
 8025636:	68eb      	ldr	r3, [r5, #12]
 8025638:	3301      	adds	r3, #1
 802563a:	60eb      	str	r3, [r5, #12]
 802563c:	e7ee      	b.n	802561c <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802563e <_ZN8touchgfx15RenderingBufferD1Ev>:
 802563e:	4770      	bx	lr

08025640 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8025640:	b510      	push	{r4, lr}
 8025642:	4604      	mov	r4, r0
 8025644:	2118      	movs	r1, #24
 8025646:	f000 f81f 	bl	8025688 <_ZdlPvj>
 802564a:	4620      	mov	r0, r4
 802564c:	bd10      	pop	{r4, pc}
	...

08025650 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8025650:	4a04      	ldr	r2, [pc, #16]	; (8025664 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8025652:	6002      	str	r2, [r0, #0]
 8025654:	2200      	movs	r2, #0
 8025656:	6042      	str	r2, [r0, #4]
 8025658:	7202      	strb	r2, [r0, #8]
 802565a:	6142      	str	r2, [r0, #20]
 802565c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8025660:	4770      	bx	lr
 8025662:	bf00      	nop
 8025664:	0802b88c 	.word	0x0802b88c

08025668 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8025668:	60c3      	str	r3, [r0, #12]
 802566a:	9b00      	ldr	r3, [sp, #0]
 802566c:	6041      	str	r1, [r0, #4]
 802566e:	6103      	str	r3, [r0, #16]
 8025670:	9b01      	ldr	r3, [sp, #4]
 8025672:	7202      	strb	r2, [r0, #8]
 8025674:	6143      	str	r3, [r0, #20]
 8025676:	4770      	bx	lr

08025678 <__aeabi_atexit>:
 8025678:	460b      	mov	r3, r1
 802567a:	4601      	mov	r1, r0
 802567c:	4618      	mov	r0, r3
 802567e:	f000 b853 	b.w	8025728 <__cxa_atexit>

08025682 <__cxa_pure_virtual>:
 8025682:	b508      	push	{r3, lr}
 8025684:	f000 f820 	bl	80256c8 <_ZSt9terminatev>

08025688 <_ZdlPvj>:
 8025688:	f000 b80f 	b.w	80256aa <_ZdlPv>

0802568c <__cxa_guard_acquire>:
 802568c:	6803      	ldr	r3, [r0, #0]
 802568e:	07db      	lsls	r3, r3, #31
 8025690:	d406      	bmi.n	80256a0 <__cxa_guard_acquire+0x14>
 8025692:	7843      	ldrb	r3, [r0, #1]
 8025694:	b103      	cbz	r3, 8025698 <__cxa_guard_acquire+0xc>
 8025696:	deff      	udf	#255	; 0xff
 8025698:	2301      	movs	r3, #1
 802569a:	7043      	strb	r3, [r0, #1]
 802569c:	4618      	mov	r0, r3
 802569e:	4770      	bx	lr
 80256a0:	2000      	movs	r0, #0
 80256a2:	4770      	bx	lr

080256a4 <__cxa_guard_release>:
 80256a4:	2301      	movs	r3, #1
 80256a6:	6003      	str	r3, [r0, #0]
 80256a8:	4770      	bx	lr

080256aa <_ZdlPv>:
 80256aa:	f000 b88f 	b.w	80257cc <free>

080256ae <_ZN10__cxxabiv111__terminateEPFvvE>:
 80256ae:	b508      	push	{r3, lr}
 80256b0:	4780      	blx	r0
 80256b2:	f000 f80e 	bl	80256d2 <abort>
	...

080256b8 <_ZSt13get_terminatev>:
 80256b8:	4b02      	ldr	r3, [pc, #8]	; (80256c4 <_ZSt13get_terminatev+0xc>)
 80256ba:	6818      	ldr	r0, [r3, #0]
 80256bc:	f3bf 8f5b 	dmb	ish
 80256c0:	4770      	bx	lr
 80256c2:	bf00      	nop
 80256c4:	20000094 	.word	0x20000094

080256c8 <_ZSt9terminatev>:
 80256c8:	b508      	push	{r3, lr}
 80256ca:	f7ff fff5 	bl	80256b8 <_ZSt13get_terminatev>
 80256ce:	f7ff ffee 	bl	80256ae <_ZN10__cxxabiv111__terminateEPFvvE>

080256d2 <abort>:
 80256d2:	b508      	push	{r3, lr}
 80256d4:	2006      	movs	r0, #6
 80256d6:	f000 fc71 	bl	8025fbc <raise>
 80256da:	2001      	movs	r0, #1
 80256dc:	f7dd f8b0 	bl	8002840 <_exit>

080256e0 <__assert_func>:
 80256e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80256e2:	461c      	mov	r4, r3
 80256e4:	4b09      	ldr	r3, [pc, #36]	; (802570c <__assert_func+0x2c>)
 80256e6:	681b      	ldr	r3, [r3, #0]
 80256e8:	4605      	mov	r5, r0
 80256ea:	68d8      	ldr	r0, [r3, #12]
 80256ec:	b152      	cbz	r2, 8025704 <__assert_func+0x24>
 80256ee:	4b08      	ldr	r3, [pc, #32]	; (8025710 <__assert_func+0x30>)
 80256f0:	9100      	str	r1, [sp, #0]
 80256f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80256f6:	4907      	ldr	r1, [pc, #28]	; (8025714 <__assert_func+0x34>)
 80256f8:	462b      	mov	r3, r5
 80256fa:	4622      	mov	r2, r4
 80256fc:	f000 f828 	bl	8025750 <fiprintf>
 8025700:	f7ff ffe7 	bl	80256d2 <abort>
 8025704:	4b04      	ldr	r3, [pc, #16]	; (8025718 <__assert_func+0x38>)
 8025706:	461a      	mov	r2, r3
 8025708:	e7f2      	b.n	80256f0 <__assert_func+0x10>
 802570a:	bf00      	nop
 802570c:	20000098 	.word	0x20000098
 8025710:	0802b894 	.word	0x0802b894
 8025714:	0802b8a1 	.word	0x0802b8a1
 8025718:	0802b8cf 	.word	0x0802b8cf

0802571c <atexit>:
 802571c:	2300      	movs	r3, #0
 802571e:	4601      	mov	r1, r0
 8025720:	461a      	mov	r2, r3
 8025722:	4618      	mov	r0, r3
 8025724:	f000 bd26 	b.w	8026174 <__register_exitproc>

08025728 <__cxa_atexit>:
 8025728:	b510      	push	{r4, lr}
 802572a:	4c05      	ldr	r4, [pc, #20]	; (8025740 <__cxa_atexit+0x18>)
 802572c:	4613      	mov	r3, r2
 802572e:	b12c      	cbz	r4, 802573c <__cxa_atexit+0x14>
 8025730:	460a      	mov	r2, r1
 8025732:	4601      	mov	r1, r0
 8025734:	2002      	movs	r0, #2
 8025736:	f000 fd1d 	bl	8026174 <__register_exitproc>
 802573a:	bd10      	pop	{r4, pc}
 802573c:	4620      	mov	r0, r4
 802573e:	e7fc      	b.n	802573a <__cxa_atexit+0x12>
 8025740:	08026175 	.word	0x08026175

08025744 <__errno>:
 8025744:	4b01      	ldr	r3, [pc, #4]	; (802574c <__errno+0x8>)
 8025746:	6818      	ldr	r0, [r3, #0]
 8025748:	4770      	bx	lr
 802574a:	bf00      	nop
 802574c:	20000098 	.word	0x20000098

08025750 <fiprintf>:
 8025750:	b40e      	push	{r1, r2, r3}
 8025752:	b503      	push	{r0, r1, lr}
 8025754:	4601      	mov	r1, r0
 8025756:	ab03      	add	r3, sp, #12
 8025758:	4805      	ldr	r0, [pc, #20]	; (8025770 <fiprintf+0x20>)
 802575a:	f853 2b04 	ldr.w	r2, [r3], #4
 802575e:	6800      	ldr	r0, [r0, #0]
 8025760:	9301      	str	r3, [sp, #4]
 8025762:	f000 f921 	bl	80259a8 <_vfiprintf_r>
 8025766:	b002      	add	sp, #8
 8025768:	f85d eb04 	ldr.w	lr, [sp], #4
 802576c:	b003      	add	sp, #12
 802576e:	4770      	bx	lr
 8025770:	20000098 	.word	0x20000098

08025774 <__libc_init_array>:
 8025774:	b570      	push	{r4, r5, r6, lr}
 8025776:	4e0d      	ldr	r6, [pc, #52]	; (80257ac <__libc_init_array+0x38>)
 8025778:	4c0d      	ldr	r4, [pc, #52]	; (80257b0 <__libc_init_array+0x3c>)
 802577a:	1ba4      	subs	r4, r4, r6
 802577c:	10a4      	asrs	r4, r4, #2
 802577e:	2500      	movs	r5, #0
 8025780:	42a5      	cmp	r5, r4
 8025782:	d109      	bne.n	8025798 <__libc_init_array+0x24>
 8025784:	4e0b      	ldr	r6, [pc, #44]	; (80257b4 <__libc_init_array+0x40>)
 8025786:	4c0c      	ldr	r4, [pc, #48]	; (80257b8 <__libc_init_array+0x44>)
 8025788:	f000 ffe4 	bl	8026754 <_init>
 802578c:	1ba4      	subs	r4, r4, r6
 802578e:	10a4      	asrs	r4, r4, #2
 8025790:	2500      	movs	r5, #0
 8025792:	42a5      	cmp	r5, r4
 8025794:	d105      	bne.n	80257a2 <__libc_init_array+0x2e>
 8025796:	bd70      	pop	{r4, r5, r6, pc}
 8025798:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802579c:	4798      	blx	r3
 802579e:	3501      	adds	r5, #1
 80257a0:	e7ee      	b.n	8025780 <__libc_init_array+0xc>
 80257a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80257a6:	4798      	blx	r3
 80257a8:	3501      	adds	r5, #1
 80257aa:	e7f2      	b.n	8025792 <__libc_init_array+0x1e>
 80257ac:	080e038c 	.word	0x080e038c
 80257b0:	080e038c 	.word	0x080e038c
 80257b4:	080e038c 	.word	0x080e038c
 80257b8:	080e03a0 	.word	0x080e03a0

080257bc <malloc>:
 80257bc:	4b02      	ldr	r3, [pc, #8]	; (80257c8 <malloc+0xc>)
 80257be:	4601      	mov	r1, r0
 80257c0:	6818      	ldr	r0, [r3, #0]
 80257c2:	f000 b86d 	b.w	80258a0 <_malloc_r>
 80257c6:	bf00      	nop
 80257c8:	20000098 	.word	0x20000098

080257cc <free>:
 80257cc:	4b02      	ldr	r3, [pc, #8]	; (80257d8 <free+0xc>)
 80257ce:	4601      	mov	r1, r0
 80257d0:	6818      	ldr	r0, [r3, #0]
 80257d2:	f000 b817 	b.w	8025804 <_free_r>
 80257d6:	bf00      	nop
 80257d8:	20000098 	.word	0x20000098

080257dc <memcpy>:
 80257dc:	b510      	push	{r4, lr}
 80257de:	1e43      	subs	r3, r0, #1
 80257e0:	440a      	add	r2, r1
 80257e2:	4291      	cmp	r1, r2
 80257e4:	d100      	bne.n	80257e8 <memcpy+0xc>
 80257e6:	bd10      	pop	{r4, pc}
 80257e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80257ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80257f0:	e7f7      	b.n	80257e2 <memcpy+0x6>

080257f2 <memset>:
 80257f2:	4402      	add	r2, r0
 80257f4:	4603      	mov	r3, r0
 80257f6:	4293      	cmp	r3, r2
 80257f8:	d100      	bne.n	80257fc <memset+0xa>
 80257fa:	4770      	bx	lr
 80257fc:	f803 1b01 	strb.w	r1, [r3], #1
 8025800:	e7f9      	b.n	80257f6 <memset+0x4>
	...

08025804 <_free_r>:
 8025804:	b538      	push	{r3, r4, r5, lr}
 8025806:	4605      	mov	r5, r0
 8025808:	2900      	cmp	r1, #0
 802580a:	d045      	beq.n	8025898 <_free_r+0x94>
 802580c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025810:	1f0c      	subs	r4, r1, #4
 8025812:	2b00      	cmp	r3, #0
 8025814:	bfb8      	it	lt
 8025816:	18e4      	addlt	r4, r4, r3
 8025818:	f000 feee 	bl	80265f8 <__malloc_lock>
 802581c:	4a1f      	ldr	r2, [pc, #124]	; (802589c <_free_r+0x98>)
 802581e:	6813      	ldr	r3, [r2, #0]
 8025820:	4610      	mov	r0, r2
 8025822:	b933      	cbnz	r3, 8025832 <_free_r+0x2e>
 8025824:	6063      	str	r3, [r4, #4]
 8025826:	6014      	str	r4, [r2, #0]
 8025828:	4628      	mov	r0, r5
 802582a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802582e:	f000 bee4 	b.w	80265fa <__malloc_unlock>
 8025832:	42a3      	cmp	r3, r4
 8025834:	d90c      	bls.n	8025850 <_free_r+0x4c>
 8025836:	6821      	ldr	r1, [r4, #0]
 8025838:	1862      	adds	r2, r4, r1
 802583a:	4293      	cmp	r3, r2
 802583c:	bf04      	itt	eq
 802583e:	681a      	ldreq	r2, [r3, #0]
 8025840:	685b      	ldreq	r3, [r3, #4]
 8025842:	6063      	str	r3, [r4, #4]
 8025844:	bf04      	itt	eq
 8025846:	1852      	addeq	r2, r2, r1
 8025848:	6022      	streq	r2, [r4, #0]
 802584a:	6004      	str	r4, [r0, #0]
 802584c:	e7ec      	b.n	8025828 <_free_r+0x24>
 802584e:	4613      	mov	r3, r2
 8025850:	685a      	ldr	r2, [r3, #4]
 8025852:	b10a      	cbz	r2, 8025858 <_free_r+0x54>
 8025854:	42a2      	cmp	r2, r4
 8025856:	d9fa      	bls.n	802584e <_free_r+0x4a>
 8025858:	6819      	ldr	r1, [r3, #0]
 802585a:	1858      	adds	r0, r3, r1
 802585c:	42a0      	cmp	r0, r4
 802585e:	d10b      	bne.n	8025878 <_free_r+0x74>
 8025860:	6820      	ldr	r0, [r4, #0]
 8025862:	4401      	add	r1, r0
 8025864:	1858      	adds	r0, r3, r1
 8025866:	4282      	cmp	r2, r0
 8025868:	6019      	str	r1, [r3, #0]
 802586a:	d1dd      	bne.n	8025828 <_free_r+0x24>
 802586c:	6810      	ldr	r0, [r2, #0]
 802586e:	6852      	ldr	r2, [r2, #4]
 8025870:	605a      	str	r2, [r3, #4]
 8025872:	4401      	add	r1, r0
 8025874:	6019      	str	r1, [r3, #0]
 8025876:	e7d7      	b.n	8025828 <_free_r+0x24>
 8025878:	d902      	bls.n	8025880 <_free_r+0x7c>
 802587a:	230c      	movs	r3, #12
 802587c:	602b      	str	r3, [r5, #0]
 802587e:	e7d3      	b.n	8025828 <_free_r+0x24>
 8025880:	6820      	ldr	r0, [r4, #0]
 8025882:	1821      	adds	r1, r4, r0
 8025884:	428a      	cmp	r2, r1
 8025886:	bf04      	itt	eq
 8025888:	6811      	ldreq	r1, [r2, #0]
 802588a:	6852      	ldreq	r2, [r2, #4]
 802588c:	6062      	str	r2, [r4, #4]
 802588e:	bf04      	itt	eq
 8025890:	1809      	addeq	r1, r1, r0
 8025892:	6021      	streq	r1, [r4, #0]
 8025894:	605c      	str	r4, [r3, #4]
 8025896:	e7c7      	b.n	8025828 <_free_r+0x24>
 8025898:	bd38      	pop	{r3, r4, r5, pc}
 802589a:	bf00      	nop
 802589c:	2000b488 	.word	0x2000b488

080258a0 <_malloc_r>:
 80258a0:	b570      	push	{r4, r5, r6, lr}
 80258a2:	1ccd      	adds	r5, r1, #3
 80258a4:	f025 0503 	bic.w	r5, r5, #3
 80258a8:	3508      	adds	r5, #8
 80258aa:	2d0c      	cmp	r5, #12
 80258ac:	bf38      	it	cc
 80258ae:	250c      	movcc	r5, #12
 80258b0:	2d00      	cmp	r5, #0
 80258b2:	4606      	mov	r6, r0
 80258b4:	db01      	blt.n	80258ba <_malloc_r+0x1a>
 80258b6:	42a9      	cmp	r1, r5
 80258b8:	d903      	bls.n	80258c2 <_malloc_r+0x22>
 80258ba:	230c      	movs	r3, #12
 80258bc:	6033      	str	r3, [r6, #0]
 80258be:	2000      	movs	r0, #0
 80258c0:	bd70      	pop	{r4, r5, r6, pc}
 80258c2:	f000 fe99 	bl	80265f8 <__malloc_lock>
 80258c6:	4a21      	ldr	r2, [pc, #132]	; (802594c <_malloc_r+0xac>)
 80258c8:	6814      	ldr	r4, [r2, #0]
 80258ca:	4621      	mov	r1, r4
 80258cc:	b991      	cbnz	r1, 80258f4 <_malloc_r+0x54>
 80258ce:	4c20      	ldr	r4, [pc, #128]	; (8025950 <_malloc_r+0xb0>)
 80258d0:	6823      	ldr	r3, [r4, #0]
 80258d2:	b91b      	cbnz	r3, 80258dc <_malloc_r+0x3c>
 80258d4:	4630      	mov	r0, r6
 80258d6:	f000 fb39 	bl	8025f4c <_sbrk_r>
 80258da:	6020      	str	r0, [r4, #0]
 80258dc:	4629      	mov	r1, r5
 80258de:	4630      	mov	r0, r6
 80258e0:	f000 fb34 	bl	8025f4c <_sbrk_r>
 80258e4:	1c43      	adds	r3, r0, #1
 80258e6:	d124      	bne.n	8025932 <_malloc_r+0x92>
 80258e8:	230c      	movs	r3, #12
 80258ea:	6033      	str	r3, [r6, #0]
 80258ec:	4630      	mov	r0, r6
 80258ee:	f000 fe84 	bl	80265fa <__malloc_unlock>
 80258f2:	e7e4      	b.n	80258be <_malloc_r+0x1e>
 80258f4:	680b      	ldr	r3, [r1, #0]
 80258f6:	1b5b      	subs	r3, r3, r5
 80258f8:	d418      	bmi.n	802592c <_malloc_r+0x8c>
 80258fa:	2b0b      	cmp	r3, #11
 80258fc:	d90f      	bls.n	802591e <_malloc_r+0x7e>
 80258fe:	600b      	str	r3, [r1, #0]
 8025900:	50cd      	str	r5, [r1, r3]
 8025902:	18cc      	adds	r4, r1, r3
 8025904:	4630      	mov	r0, r6
 8025906:	f000 fe78 	bl	80265fa <__malloc_unlock>
 802590a:	f104 000b 	add.w	r0, r4, #11
 802590e:	1d23      	adds	r3, r4, #4
 8025910:	f020 0007 	bic.w	r0, r0, #7
 8025914:	1ac3      	subs	r3, r0, r3
 8025916:	d0d3      	beq.n	80258c0 <_malloc_r+0x20>
 8025918:	425a      	negs	r2, r3
 802591a:	50e2      	str	r2, [r4, r3]
 802591c:	e7d0      	b.n	80258c0 <_malloc_r+0x20>
 802591e:	428c      	cmp	r4, r1
 8025920:	684b      	ldr	r3, [r1, #4]
 8025922:	bf16      	itet	ne
 8025924:	6063      	strne	r3, [r4, #4]
 8025926:	6013      	streq	r3, [r2, #0]
 8025928:	460c      	movne	r4, r1
 802592a:	e7eb      	b.n	8025904 <_malloc_r+0x64>
 802592c:	460c      	mov	r4, r1
 802592e:	6849      	ldr	r1, [r1, #4]
 8025930:	e7cc      	b.n	80258cc <_malloc_r+0x2c>
 8025932:	1cc4      	adds	r4, r0, #3
 8025934:	f024 0403 	bic.w	r4, r4, #3
 8025938:	42a0      	cmp	r0, r4
 802593a:	d005      	beq.n	8025948 <_malloc_r+0xa8>
 802593c:	1a21      	subs	r1, r4, r0
 802593e:	4630      	mov	r0, r6
 8025940:	f000 fb04 	bl	8025f4c <_sbrk_r>
 8025944:	3001      	adds	r0, #1
 8025946:	d0cf      	beq.n	80258e8 <_malloc_r+0x48>
 8025948:	6025      	str	r5, [r4, #0]
 802594a:	e7db      	b.n	8025904 <_malloc_r+0x64>
 802594c:	2000b488 	.word	0x2000b488
 8025950:	2000b48c 	.word	0x2000b48c

08025954 <__sfputc_r>:
 8025954:	6893      	ldr	r3, [r2, #8]
 8025956:	3b01      	subs	r3, #1
 8025958:	2b00      	cmp	r3, #0
 802595a:	b410      	push	{r4}
 802595c:	6093      	str	r3, [r2, #8]
 802595e:	da08      	bge.n	8025972 <__sfputc_r+0x1e>
 8025960:	6994      	ldr	r4, [r2, #24]
 8025962:	42a3      	cmp	r3, r4
 8025964:	db01      	blt.n	802596a <__sfputc_r+0x16>
 8025966:	290a      	cmp	r1, #10
 8025968:	d103      	bne.n	8025972 <__sfputc_r+0x1e>
 802596a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802596e:	f000 bb41 	b.w	8025ff4 <__swbuf_r>
 8025972:	6813      	ldr	r3, [r2, #0]
 8025974:	1c58      	adds	r0, r3, #1
 8025976:	6010      	str	r0, [r2, #0]
 8025978:	7019      	strb	r1, [r3, #0]
 802597a:	4608      	mov	r0, r1
 802597c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025980:	4770      	bx	lr

08025982 <__sfputs_r>:
 8025982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025984:	4606      	mov	r6, r0
 8025986:	460f      	mov	r7, r1
 8025988:	4614      	mov	r4, r2
 802598a:	18d5      	adds	r5, r2, r3
 802598c:	42ac      	cmp	r4, r5
 802598e:	d101      	bne.n	8025994 <__sfputs_r+0x12>
 8025990:	2000      	movs	r0, #0
 8025992:	e007      	b.n	80259a4 <__sfputs_r+0x22>
 8025994:	463a      	mov	r2, r7
 8025996:	f814 1b01 	ldrb.w	r1, [r4], #1
 802599a:	4630      	mov	r0, r6
 802599c:	f7ff ffda 	bl	8025954 <__sfputc_r>
 80259a0:	1c43      	adds	r3, r0, #1
 80259a2:	d1f3      	bne.n	802598c <__sfputs_r+0xa>
 80259a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080259a8 <_vfiprintf_r>:
 80259a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259ac:	460c      	mov	r4, r1
 80259ae:	b09d      	sub	sp, #116	; 0x74
 80259b0:	4617      	mov	r7, r2
 80259b2:	461d      	mov	r5, r3
 80259b4:	4606      	mov	r6, r0
 80259b6:	b118      	cbz	r0, 80259c0 <_vfiprintf_r+0x18>
 80259b8:	6983      	ldr	r3, [r0, #24]
 80259ba:	b90b      	cbnz	r3, 80259c0 <_vfiprintf_r+0x18>
 80259bc:	f000 fd2e 	bl	802641c <__sinit>
 80259c0:	4b7c      	ldr	r3, [pc, #496]	; (8025bb4 <_vfiprintf_r+0x20c>)
 80259c2:	429c      	cmp	r4, r3
 80259c4:	d158      	bne.n	8025a78 <_vfiprintf_r+0xd0>
 80259c6:	6874      	ldr	r4, [r6, #4]
 80259c8:	89a3      	ldrh	r3, [r4, #12]
 80259ca:	0718      	lsls	r0, r3, #28
 80259cc:	d55e      	bpl.n	8025a8c <_vfiprintf_r+0xe4>
 80259ce:	6923      	ldr	r3, [r4, #16]
 80259d0:	2b00      	cmp	r3, #0
 80259d2:	d05b      	beq.n	8025a8c <_vfiprintf_r+0xe4>
 80259d4:	2300      	movs	r3, #0
 80259d6:	9309      	str	r3, [sp, #36]	; 0x24
 80259d8:	2320      	movs	r3, #32
 80259da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80259de:	2330      	movs	r3, #48	; 0x30
 80259e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80259e4:	9503      	str	r5, [sp, #12]
 80259e6:	f04f 0b01 	mov.w	fp, #1
 80259ea:	46b8      	mov	r8, r7
 80259ec:	4645      	mov	r5, r8
 80259ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80259f2:	b10b      	cbz	r3, 80259f8 <_vfiprintf_r+0x50>
 80259f4:	2b25      	cmp	r3, #37	; 0x25
 80259f6:	d154      	bne.n	8025aa2 <_vfiprintf_r+0xfa>
 80259f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80259fc:	d00b      	beq.n	8025a16 <_vfiprintf_r+0x6e>
 80259fe:	4653      	mov	r3, sl
 8025a00:	463a      	mov	r2, r7
 8025a02:	4621      	mov	r1, r4
 8025a04:	4630      	mov	r0, r6
 8025a06:	f7ff ffbc 	bl	8025982 <__sfputs_r>
 8025a0a:	3001      	adds	r0, #1
 8025a0c:	f000 80c2 	beq.w	8025b94 <_vfiprintf_r+0x1ec>
 8025a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a12:	4453      	add	r3, sl
 8025a14:	9309      	str	r3, [sp, #36]	; 0x24
 8025a16:	f898 3000 	ldrb.w	r3, [r8]
 8025a1a:	2b00      	cmp	r3, #0
 8025a1c:	f000 80ba 	beq.w	8025b94 <_vfiprintf_r+0x1ec>
 8025a20:	2300      	movs	r3, #0
 8025a22:	f04f 32ff 	mov.w	r2, #4294967295
 8025a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025a2a:	9304      	str	r3, [sp, #16]
 8025a2c:	9307      	str	r3, [sp, #28]
 8025a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025a32:	931a      	str	r3, [sp, #104]	; 0x68
 8025a34:	46a8      	mov	r8, r5
 8025a36:	2205      	movs	r2, #5
 8025a38:	f818 1b01 	ldrb.w	r1, [r8], #1
 8025a3c:	485e      	ldr	r0, [pc, #376]	; (8025bb8 <_vfiprintf_r+0x210>)
 8025a3e:	f7da fbe7 	bl	8000210 <memchr>
 8025a42:	9b04      	ldr	r3, [sp, #16]
 8025a44:	bb78      	cbnz	r0, 8025aa6 <_vfiprintf_r+0xfe>
 8025a46:	06d9      	lsls	r1, r3, #27
 8025a48:	bf44      	itt	mi
 8025a4a:	2220      	movmi	r2, #32
 8025a4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025a50:	071a      	lsls	r2, r3, #28
 8025a52:	bf44      	itt	mi
 8025a54:	222b      	movmi	r2, #43	; 0x2b
 8025a56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025a5a:	782a      	ldrb	r2, [r5, #0]
 8025a5c:	2a2a      	cmp	r2, #42	; 0x2a
 8025a5e:	d02a      	beq.n	8025ab6 <_vfiprintf_r+0x10e>
 8025a60:	9a07      	ldr	r2, [sp, #28]
 8025a62:	46a8      	mov	r8, r5
 8025a64:	2000      	movs	r0, #0
 8025a66:	250a      	movs	r5, #10
 8025a68:	4641      	mov	r1, r8
 8025a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025a6e:	3b30      	subs	r3, #48	; 0x30
 8025a70:	2b09      	cmp	r3, #9
 8025a72:	d969      	bls.n	8025b48 <_vfiprintf_r+0x1a0>
 8025a74:	b360      	cbz	r0, 8025ad0 <_vfiprintf_r+0x128>
 8025a76:	e024      	b.n	8025ac2 <_vfiprintf_r+0x11a>
 8025a78:	4b50      	ldr	r3, [pc, #320]	; (8025bbc <_vfiprintf_r+0x214>)
 8025a7a:	429c      	cmp	r4, r3
 8025a7c:	d101      	bne.n	8025a82 <_vfiprintf_r+0xda>
 8025a7e:	68b4      	ldr	r4, [r6, #8]
 8025a80:	e7a2      	b.n	80259c8 <_vfiprintf_r+0x20>
 8025a82:	4b4f      	ldr	r3, [pc, #316]	; (8025bc0 <_vfiprintf_r+0x218>)
 8025a84:	429c      	cmp	r4, r3
 8025a86:	bf08      	it	eq
 8025a88:	68f4      	ldreq	r4, [r6, #12]
 8025a8a:	e79d      	b.n	80259c8 <_vfiprintf_r+0x20>
 8025a8c:	4621      	mov	r1, r4
 8025a8e:	4630      	mov	r0, r6
 8025a90:	f000 fb02 	bl	8026098 <__swsetup_r>
 8025a94:	2800      	cmp	r0, #0
 8025a96:	d09d      	beq.n	80259d4 <_vfiprintf_r+0x2c>
 8025a98:	f04f 30ff 	mov.w	r0, #4294967295
 8025a9c:	b01d      	add	sp, #116	; 0x74
 8025a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025aa2:	46a8      	mov	r8, r5
 8025aa4:	e7a2      	b.n	80259ec <_vfiprintf_r+0x44>
 8025aa6:	4a44      	ldr	r2, [pc, #272]	; (8025bb8 <_vfiprintf_r+0x210>)
 8025aa8:	1a80      	subs	r0, r0, r2
 8025aaa:	fa0b f000 	lsl.w	r0, fp, r0
 8025aae:	4318      	orrs	r0, r3
 8025ab0:	9004      	str	r0, [sp, #16]
 8025ab2:	4645      	mov	r5, r8
 8025ab4:	e7be      	b.n	8025a34 <_vfiprintf_r+0x8c>
 8025ab6:	9a03      	ldr	r2, [sp, #12]
 8025ab8:	1d11      	adds	r1, r2, #4
 8025aba:	6812      	ldr	r2, [r2, #0]
 8025abc:	9103      	str	r1, [sp, #12]
 8025abe:	2a00      	cmp	r2, #0
 8025ac0:	db01      	blt.n	8025ac6 <_vfiprintf_r+0x11e>
 8025ac2:	9207      	str	r2, [sp, #28]
 8025ac4:	e004      	b.n	8025ad0 <_vfiprintf_r+0x128>
 8025ac6:	4252      	negs	r2, r2
 8025ac8:	f043 0302 	orr.w	r3, r3, #2
 8025acc:	9207      	str	r2, [sp, #28]
 8025ace:	9304      	str	r3, [sp, #16]
 8025ad0:	f898 3000 	ldrb.w	r3, [r8]
 8025ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8025ad6:	d10e      	bne.n	8025af6 <_vfiprintf_r+0x14e>
 8025ad8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025adc:	2b2a      	cmp	r3, #42	; 0x2a
 8025ade:	d138      	bne.n	8025b52 <_vfiprintf_r+0x1aa>
 8025ae0:	9b03      	ldr	r3, [sp, #12]
 8025ae2:	1d1a      	adds	r2, r3, #4
 8025ae4:	681b      	ldr	r3, [r3, #0]
 8025ae6:	9203      	str	r2, [sp, #12]
 8025ae8:	2b00      	cmp	r3, #0
 8025aea:	bfb8      	it	lt
 8025aec:	f04f 33ff 	movlt.w	r3, #4294967295
 8025af0:	f108 0802 	add.w	r8, r8, #2
 8025af4:	9305      	str	r3, [sp, #20]
 8025af6:	4d33      	ldr	r5, [pc, #204]	; (8025bc4 <_vfiprintf_r+0x21c>)
 8025af8:	f898 1000 	ldrb.w	r1, [r8]
 8025afc:	2203      	movs	r2, #3
 8025afe:	4628      	mov	r0, r5
 8025b00:	f7da fb86 	bl	8000210 <memchr>
 8025b04:	b140      	cbz	r0, 8025b18 <_vfiprintf_r+0x170>
 8025b06:	2340      	movs	r3, #64	; 0x40
 8025b08:	1b40      	subs	r0, r0, r5
 8025b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8025b0e:	9b04      	ldr	r3, [sp, #16]
 8025b10:	4303      	orrs	r3, r0
 8025b12:	f108 0801 	add.w	r8, r8, #1
 8025b16:	9304      	str	r3, [sp, #16]
 8025b18:	f898 1000 	ldrb.w	r1, [r8]
 8025b1c:	482a      	ldr	r0, [pc, #168]	; (8025bc8 <_vfiprintf_r+0x220>)
 8025b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025b22:	2206      	movs	r2, #6
 8025b24:	f108 0701 	add.w	r7, r8, #1
 8025b28:	f7da fb72 	bl	8000210 <memchr>
 8025b2c:	2800      	cmp	r0, #0
 8025b2e:	d037      	beq.n	8025ba0 <_vfiprintf_r+0x1f8>
 8025b30:	4b26      	ldr	r3, [pc, #152]	; (8025bcc <_vfiprintf_r+0x224>)
 8025b32:	bb1b      	cbnz	r3, 8025b7c <_vfiprintf_r+0x1d4>
 8025b34:	9b03      	ldr	r3, [sp, #12]
 8025b36:	3307      	adds	r3, #7
 8025b38:	f023 0307 	bic.w	r3, r3, #7
 8025b3c:	3308      	adds	r3, #8
 8025b3e:	9303      	str	r3, [sp, #12]
 8025b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b42:	444b      	add	r3, r9
 8025b44:	9309      	str	r3, [sp, #36]	; 0x24
 8025b46:	e750      	b.n	80259ea <_vfiprintf_r+0x42>
 8025b48:	fb05 3202 	mla	r2, r5, r2, r3
 8025b4c:	2001      	movs	r0, #1
 8025b4e:	4688      	mov	r8, r1
 8025b50:	e78a      	b.n	8025a68 <_vfiprintf_r+0xc0>
 8025b52:	2300      	movs	r3, #0
 8025b54:	f108 0801 	add.w	r8, r8, #1
 8025b58:	9305      	str	r3, [sp, #20]
 8025b5a:	4619      	mov	r1, r3
 8025b5c:	250a      	movs	r5, #10
 8025b5e:	4640      	mov	r0, r8
 8025b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025b64:	3a30      	subs	r2, #48	; 0x30
 8025b66:	2a09      	cmp	r2, #9
 8025b68:	d903      	bls.n	8025b72 <_vfiprintf_r+0x1ca>
 8025b6a:	2b00      	cmp	r3, #0
 8025b6c:	d0c3      	beq.n	8025af6 <_vfiprintf_r+0x14e>
 8025b6e:	9105      	str	r1, [sp, #20]
 8025b70:	e7c1      	b.n	8025af6 <_vfiprintf_r+0x14e>
 8025b72:	fb05 2101 	mla	r1, r5, r1, r2
 8025b76:	2301      	movs	r3, #1
 8025b78:	4680      	mov	r8, r0
 8025b7a:	e7f0      	b.n	8025b5e <_vfiprintf_r+0x1b6>
 8025b7c:	ab03      	add	r3, sp, #12
 8025b7e:	9300      	str	r3, [sp, #0]
 8025b80:	4622      	mov	r2, r4
 8025b82:	4b13      	ldr	r3, [pc, #76]	; (8025bd0 <_vfiprintf_r+0x228>)
 8025b84:	a904      	add	r1, sp, #16
 8025b86:	4630      	mov	r0, r6
 8025b88:	f3af 8000 	nop.w
 8025b8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8025b90:	4681      	mov	r9, r0
 8025b92:	d1d5      	bne.n	8025b40 <_vfiprintf_r+0x198>
 8025b94:	89a3      	ldrh	r3, [r4, #12]
 8025b96:	065b      	lsls	r3, r3, #25
 8025b98:	f53f af7e 	bmi.w	8025a98 <_vfiprintf_r+0xf0>
 8025b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025b9e:	e77d      	b.n	8025a9c <_vfiprintf_r+0xf4>
 8025ba0:	ab03      	add	r3, sp, #12
 8025ba2:	9300      	str	r3, [sp, #0]
 8025ba4:	4622      	mov	r2, r4
 8025ba6:	4b0a      	ldr	r3, [pc, #40]	; (8025bd0 <_vfiprintf_r+0x228>)
 8025ba8:	a904      	add	r1, sp, #16
 8025baa:	4630      	mov	r0, r6
 8025bac:	f000 f888 	bl	8025cc0 <_printf_i>
 8025bb0:	e7ec      	b.n	8025b8c <_vfiprintf_r+0x1e4>
 8025bb2:	bf00      	nop
 8025bb4:	0802b92c 	.word	0x0802b92c
 8025bb8:	0802b8d4 	.word	0x0802b8d4
 8025bbc:	0802b94c 	.word	0x0802b94c
 8025bc0:	0802b90c 	.word	0x0802b90c
 8025bc4:	0802b8da 	.word	0x0802b8da
 8025bc8:	0802b8de 	.word	0x0802b8de
 8025bcc:	00000000 	.word	0x00000000
 8025bd0:	08025983 	.word	0x08025983

08025bd4 <_printf_common>:
 8025bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025bd8:	4691      	mov	r9, r2
 8025bda:	461f      	mov	r7, r3
 8025bdc:	688a      	ldr	r2, [r1, #8]
 8025bde:	690b      	ldr	r3, [r1, #16]
 8025be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025be4:	4293      	cmp	r3, r2
 8025be6:	bfb8      	it	lt
 8025be8:	4613      	movlt	r3, r2
 8025bea:	f8c9 3000 	str.w	r3, [r9]
 8025bee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025bf2:	4606      	mov	r6, r0
 8025bf4:	460c      	mov	r4, r1
 8025bf6:	b112      	cbz	r2, 8025bfe <_printf_common+0x2a>
 8025bf8:	3301      	adds	r3, #1
 8025bfa:	f8c9 3000 	str.w	r3, [r9]
 8025bfe:	6823      	ldr	r3, [r4, #0]
 8025c00:	0699      	lsls	r1, r3, #26
 8025c02:	bf42      	ittt	mi
 8025c04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025c08:	3302      	addmi	r3, #2
 8025c0a:	f8c9 3000 	strmi.w	r3, [r9]
 8025c0e:	6825      	ldr	r5, [r4, #0]
 8025c10:	f015 0506 	ands.w	r5, r5, #6
 8025c14:	d107      	bne.n	8025c26 <_printf_common+0x52>
 8025c16:	f104 0a19 	add.w	sl, r4, #25
 8025c1a:	68e3      	ldr	r3, [r4, #12]
 8025c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8025c20:	1a9b      	subs	r3, r3, r2
 8025c22:	42ab      	cmp	r3, r5
 8025c24:	dc28      	bgt.n	8025c78 <_printf_common+0xa4>
 8025c26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025c2a:	6822      	ldr	r2, [r4, #0]
 8025c2c:	3300      	adds	r3, #0
 8025c2e:	bf18      	it	ne
 8025c30:	2301      	movne	r3, #1
 8025c32:	0692      	lsls	r2, r2, #26
 8025c34:	d42d      	bmi.n	8025c92 <_printf_common+0xbe>
 8025c36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025c3a:	4639      	mov	r1, r7
 8025c3c:	4630      	mov	r0, r6
 8025c3e:	47c0      	blx	r8
 8025c40:	3001      	adds	r0, #1
 8025c42:	d020      	beq.n	8025c86 <_printf_common+0xb2>
 8025c44:	6823      	ldr	r3, [r4, #0]
 8025c46:	68e5      	ldr	r5, [r4, #12]
 8025c48:	f8d9 2000 	ldr.w	r2, [r9]
 8025c4c:	f003 0306 	and.w	r3, r3, #6
 8025c50:	2b04      	cmp	r3, #4
 8025c52:	bf08      	it	eq
 8025c54:	1aad      	subeq	r5, r5, r2
 8025c56:	68a3      	ldr	r3, [r4, #8]
 8025c58:	6922      	ldr	r2, [r4, #16]
 8025c5a:	bf0c      	ite	eq
 8025c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025c60:	2500      	movne	r5, #0
 8025c62:	4293      	cmp	r3, r2
 8025c64:	bfc4      	itt	gt
 8025c66:	1a9b      	subgt	r3, r3, r2
 8025c68:	18ed      	addgt	r5, r5, r3
 8025c6a:	f04f 0900 	mov.w	r9, #0
 8025c6e:	341a      	adds	r4, #26
 8025c70:	454d      	cmp	r5, r9
 8025c72:	d11a      	bne.n	8025caa <_printf_common+0xd6>
 8025c74:	2000      	movs	r0, #0
 8025c76:	e008      	b.n	8025c8a <_printf_common+0xb6>
 8025c78:	2301      	movs	r3, #1
 8025c7a:	4652      	mov	r2, sl
 8025c7c:	4639      	mov	r1, r7
 8025c7e:	4630      	mov	r0, r6
 8025c80:	47c0      	blx	r8
 8025c82:	3001      	adds	r0, #1
 8025c84:	d103      	bne.n	8025c8e <_printf_common+0xba>
 8025c86:	f04f 30ff 	mov.w	r0, #4294967295
 8025c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025c8e:	3501      	adds	r5, #1
 8025c90:	e7c3      	b.n	8025c1a <_printf_common+0x46>
 8025c92:	18e1      	adds	r1, r4, r3
 8025c94:	1c5a      	adds	r2, r3, #1
 8025c96:	2030      	movs	r0, #48	; 0x30
 8025c98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025c9c:	4422      	add	r2, r4
 8025c9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025ca2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025ca6:	3302      	adds	r3, #2
 8025ca8:	e7c5      	b.n	8025c36 <_printf_common+0x62>
 8025caa:	2301      	movs	r3, #1
 8025cac:	4622      	mov	r2, r4
 8025cae:	4639      	mov	r1, r7
 8025cb0:	4630      	mov	r0, r6
 8025cb2:	47c0      	blx	r8
 8025cb4:	3001      	adds	r0, #1
 8025cb6:	d0e6      	beq.n	8025c86 <_printf_common+0xb2>
 8025cb8:	f109 0901 	add.w	r9, r9, #1
 8025cbc:	e7d8      	b.n	8025c70 <_printf_common+0x9c>
	...

08025cc0 <_printf_i>:
 8025cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025cc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8025cc8:	460c      	mov	r4, r1
 8025cca:	7e09      	ldrb	r1, [r1, #24]
 8025ccc:	b085      	sub	sp, #20
 8025cce:	296e      	cmp	r1, #110	; 0x6e
 8025cd0:	4617      	mov	r7, r2
 8025cd2:	4606      	mov	r6, r0
 8025cd4:	4698      	mov	r8, r3
 8025cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025cd8:	f000 80b3 	beq.w	8025e42 <_printf_i+0x182>
 8025cdc:	d822      	bhi.n	8025d24 <_printf_i+0x64>
 8025cde:	2963      	cmp	r1, #99	; 0x63
 8025ce0:	d036      	beq.n	8025d50 <_printf_i+0x90>
 8025ce2:	d80a      	bhi.n	8025cfa <_printf_i+0x3a>
 8025ce4:	2900      	cmp	r1, #0
 8025ce6:	f000 80b9 	beq.w	8025e5c <_printf_i+0x19c>
 8025cea:	2958      	cmp	r1, #88	; 0x58
 8025cec:	f000 8083 	beq.w	8025df6 <_printf_i+0x136>
 8025cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025cf4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025cf8:	e032      	b.n	8025d60 <_printf_i+0xa0>
 8025cfa:	2964      	cmp	r1, #100	; 0x64
 8025cfc:	d001      	beq.n	8025d02 <_printf_i+0x42>
 8025cfe:	2969      	cmp	r1, #105	; 0x69
 8025d00:	d1f6      	bne.n	8025cf0 <_printf_i+0x30>
 8025d02:	6820      	ldr	r0, [r4, #0]
 8025d04:	6813      	ldr	r3, [r2, #0]
 8025d06:	0605      	lsls	r5, r0, #24
 8025d08:	f103 0104 	add.w	r1, r3, #4
 8025d0c:	d52a      	bpl.n	8025d64 <_printf_i+0xa4>
 8025d0e:	681b      	ldr	r3, [r3, #0]
 8025d10:	6011      	str	r1, [r2, #0]
 8025d12:	2b00      	cmp	r3, #0
 8025d14:	da03      	bge.n	8025d1e <_printf_i+0x5e>
 8025d16:	222d      	movs	r2, #45	; 0x2d
 8025d18:	425b      	negs	r3, r3
 8025d1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8025d1e:	486f      	ldr	r0, [pc, #444]	; (8025edc <_printf_i+0x21c>)
 8025d20:	220a      	movs	r2, #10
 8025d22:	e039      	b.n	8025d98 <_printf_i+0xd8>
 8025d24:	2973      	cmp	r1, #115	; 0x73
 8025d26:	f000 809d 	beq.w	8025e64 <_printf_i+0x1a4>
 8025d2a:	d808      	bhi.n	8025d3e <_printf_i+0x7e>
 8025d2c:	296f      	cmp	r1, #111	; 0x6f
 8025d2e:	d020      	beq.n	8025d72 <_printf_i+0xb2>
 8025d30:	2970      	cmp	r1, #112	; 0x70
 8025d32:	d1dd      	bne.n	8025cf0 <_printf_i+0x30>
 8025d34:	6823      	ldr	r3, [r4, #0]
 8025d36:	f043 0320 	orr.w	r3, r3, #32
 8025d3a:	6023      	str	r3, [r4, #0]
 8025d3c:	e003      	b.n	8025d46 <_printf_i+0x86>
 8025d3e:	2975      	cmp	r1, #117	; 0x75
 8025d40:	d017      	beq.n	8025d72 <_printf_i+0xb2>
 8025d42:	2978      	cmp	r1, #120	; 0x78
 8025d44:	d1d4      	bne.n	8025cf0 <_printf_i+0x30>
 8025d46:	2378      	movs	r3, #120	; 0x78
 8025d48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025d4c:	4864      	ldr	r0, [pc, #400]	; (8025ee0 <_printf_i+0x220>)
 8025d4e:	e055      	b.n	8025dfc <_printf_i+0x13c>
 8025d50:	6813      	ldr	r3, [r2, #0]
 8025d52:	1d19      	adds	r1, r3, #4
 8025d54:	681b      	ldr	r3, [r3, #0]
 8025d56:	6011      	str	r1, [r2, #0]
 8025d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025d60:	2301      	movs	r3, #1
 8025d62:	e08c      	b.n	8025e7e <_printf_i+0x1be>
 8025d64:	681b      	ldr	r3, [r3, #0]
 8025d66:	6011      	str	r1, [r2, #0]
 8025d68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025d6c:	bf18      	it	ne
 8025d6e:	b21b      	sxthne	r3, r3
 8025d70:	e7cf      	b.n	8025d12 <_printf_i+0x52>
 8025d72:	6813      	ldr	r3, [r2, #0]
 8025d74:	6825      	ldr	r5, [r4, #0]
 8025d76:	1d18      	adds	r0, r3, #4
 8025d78:	6010      	str	r0, [r2, #0]
 8025d7a:	0628      	lsls	r0, r5, #24
 8025d7c:	d501      	bpl.n	8025d82 <_printf_i+0xc2>
 8025d7e:	681b      	ldr	r3, [r3, #0]
 8025d80:	e002      	b.n	8025d88 <_printf_i+0xc8>
 8025d82:	0668      	lsls	r0, r5, #25
 8025d84:	d5fb      	bpl.n	8025d7e <_printf_i+0xbe>
 8025d86:	881b      	ldrh	r3, [r3, #0]
 8025d88:	4854      	ldr	r0, [pc, #336]	; (8025edc <_printf_i+0x21c>)
 8025d8a:	296f      	cmp	r1, #111	; 0x6f
 8025d8c:	bf14      	ite	ne
 8025d8e:	220a      	movne	r2, #10
 8025d90:	2208      	moveq	r2, #8
 8025d92:	2100      	movs	r1, #0
 8025d94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025d98:	6865      	ldr	r5, [r4, #4]
 8025d9a:	60a5      	str	r5, [r4, #8]
 8025d9c:	2d00      	cmp	r5, #0
 8025d9e:	f2c0 8095 	blt.w	8025ecc <_printf_i+0x20c>
 8025da2:	6821      	ldr	r1, [r4, #0]
 8025da4:	f021 0104 	bic.w	r1, r1, #4
 8025da8:	6021      	str	r1, [r4, #0]
 8025daa:	2b00      	cmp	r3, #0
 8025dac:	d13d      	bne.n	8025e2a <_printf_i+0x16a>
 8025dae:	2d00      	cmp	r5, #0
 8025db0:	f040 808e 	bne.w	8025ed0 <_printf_i+0x210>
 8025db4:	4665      	mov	r5, ip
 8025db6:	2a08      	cmp	r2, #8
 8025db8:	d10b      	bne.n	8025dd2 <_printf_i+0x112>
 8025dba:	6823      	ldr	r3, [r4, #0]
 8025dbc:	07db      	lsls	r3, r3, #31
 8025dbe:	d508      	bpl.n	8025dd2 <_printf_i+0x112>
 8025dc0:	6923      	ldr	r3, [r4, #16]
 8025dc2:	6862      	ldr	r2, [r4, #4]
 8025dc4:	429a      	cmp	r2, r3
 8025dc6:	bfde      	ittt	le
 8025dc8:	2330      	movle	r3, #48	; 0x30
 8025dca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025dce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025dd2:	ebac 0305 	sub.w	r3, ip, r5
 8025dd6:	6123      	str	r3, [r4, #16]
 8025dd8:	f8cd 8000 	str.w	r8, [sp]
 8025ddc:	463b      	mov	r3, r7
 8025dde:	aa03      	add	r2, sp, #12
 8025de0:	4621      	mov	r1, r4
 8025de2:	4630      	mov	r0, r6
 8025de4:	f7ff fef6 	bl	8025bd4 <_printf_common>
 8025de8:	3001      	adds	r0, #1
 8025dea:	d14d      	bne.n	8025e88 <_printf_i+0x1c8>
 8025dec:	f04f 30ff 	mov.w	r0, #4294967295
 8025df0:	b005      	add	sp, #20
 8025df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025df6:	4839      	ldr	r0, [pc, #228]	; (8025edc <_printf_i+0x21c>)
 8025df8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8025dfc:	6813      	ldr	r3, [r2, #0]
 8025dfe:	6821      	ldr	r1, [r4, #0]
 8025e00:	1d1d      	adds	r5, r3, #4
 8025e02:	681b      	ldr	r3, [r3, #0]
 8025e04:	6015      	str	r5, [r2, #0]
 8025e06:	060a      	lsls	r2, r1, #24
 8025e08:	d50b      	bpl.n	8025e22 <_printf_i+0x162>
 8025e0a:	07ca      	lsls	r2, r1, #31
 8025e0c:	bf44      	itt	mi
 8025e0e:	f041 0120 	orrmi.w	r1, r1, #32
 8025e12:	6021      	strmi	r1, [r4, #0]
 8025e14:	b91b      	cbnz	r3, 8025e1e <_printf_i+0x15e>
 8025e16:	6822      	ldr	r2, [r4, #0]
 8025e18:	f022 0220 	bic.w	r2, r2, #32
 8025e1c:	6022      	str	r2, [r4, #0]
 8025e1e:	2210      	movs	r2, #16
 8025e20:	e7b7      	b.n	8025d92 <_printf_i+0xd2>
 8025e22:	064d      	lsls	r5, r1, #25
 8025e24:	bf48      	it	mi
 8025e26:	b29b      	uxthmi	r3, r3
 8025e28:	e7ef      	b.n	8025e0a <_printf_i+0x14a>
 8025e2a:	4665      	mov	r5, ip
 8025e2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8025e30:	fb02 3311 	mls	r3, r2, r1, r3
 8025e34:	5cc3      	ldrb	r3, [r0, r3]
 8025e36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025e3a:	460b      	mov	r3, r1
 8025e3c:	2900      	cmp	r1, #0
 8025e3e:	d1f5      	bne.n	8025e2c <_printf_i+0x16c>
 8025e40:	e7b9      	b.n	8025db6 <_printf_i+0xf6>
 8025e42:	6813      	ldr	r3, [r2, #0]
 8025e44:	6825      	ldr	r5, [r4, #0]
 8025e46:	6961      	ldr	r1, [r4, #20]
 8025e48:	1d18      	adds	r0, r3, #4
 8025e4a:	6010      	str	r0, [r2, #0]
 8025e4c:	0628      	lsls	r0, r5, #24
 8025e4e:	681b      	ldr	r3, [r3, #0]
 8025e50:	d501      	bpl.n	8025e56 <_printf_i+0x196>
 8025e52:	6019      	str	r1, [r3, #0]
 8025e54:	e002      	b.n	8025e5c <_printf_i+0x19c>
 8025e56:	066a      	lsls	r2, r5, #25
 8025e58:	d5fb      	bpl.n	8025e52 <_printf_i+0x192>
 8025e5a:	8019      	strh	r1, [r3, #0]
 8025e5c:	2300      	movs	r3, #0
 8025e5e:	6123      	str	r3, [r4, #16]
 8025e60:	4665      	mov	r5, ip
 8025e62:	e7b9      	b.n	8025dd8 <_printf_i+0x118>
 8025e64:	6813      	ldr	r3, [r2, #0]
 8025e66:	1d19      	adds	r1, r3, #4
 8025e68:	6011      	str	r1, [r2, #0]
 8025e6a:	681d      	ldr	r5, [r3, #0]
 8025e6c:	6862      	ldr	r2, [r4, #4]
 8025e6e:	2100      	movs	r1, #0
 8025e70:	4628      	mov	r0, r5
 8025e72:	f7da f9cd 	bl	8000210 <memchr>
 8025e76:	b108      	cbz	r0, 8025e7c <_printf_i+0x1bc>
 8025e78:	1b40      	subs	r0, r0, r5
 8025e7a:	6060      	str	r0, [r4, #4]
 8025e7c:	6863      	ldr	r3, [r4, #4]
 8025e7e:	6123      	str	r3, [r4, #16]
 8025e80:	2300      	movs	r3, #0
 8025e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025e86:	e7a7      	b.n	8025dd8 <_printf_i+0x118>
 8025e88:	6923      	ldr	r3, [r4, #16]
 8025e8a:	462a      	mov	r2, r5
 8025e8c:	4639      	mov	r1, r7
 8025e8e:	4630      	mov	r0, r6
 8025e90:	47c0      	blx	r8
 8025e92:	3001      	adds	r0, #1
 8025e94:	d0aa      	beq.n	8025dec <_printf_i+0x12c>
 8025e96:	6823      	ldr	r3, [r4, #0]
 8025e98:	079b      	lsls	r3, r3, #30
 8025e9a:	d413      	bmi.n	8025ec4 <_printf_i+0x204>
 8025e9c:	68e0      	ldr	r0, [r4, #12]
 8025e9e:	9b03      	ldr	r3, [sp, #12]
 8025ea0:	4298      	cmp	r0, r3
 8025ea2:	bfb8      	it	lt
 8025ea4:	4618      	movlt	r0, r3
 8025ea6:	e7a3      	b.n	8025df0 <_printf_i+0x130>
 8025ea8:	2301      	movs	r3, #1
 8025eaa:	464a      	mov	r2, r9
 8025eac:	4639      	mov	r1, r7
 8025eae:	4630      	mov	r0, r6
 8025eb0:	47c0      	blx	r8
 8025eb2:	3001      	adds	r0, #1
 8025eb4:	d09a      	beq.n	8025dec <_printf_i+0x12c>
 8025eb6:	3501      	adds	r5, #1
 8025eb8:	68e3      	ldr	r3, [r4, #12]
 8025eba:	9a03      	ldr	r2, [sp, #12]
 8025ebc:	1a9b      	subs	r3, r3, r2
 8025ebe:	42ab      	cmp	r3, r5
 8025ec0:	dcf2      	bgt.n	8025ea8 <_printf_i+0x1e8>
 8025ec2:	e7eb      	b.n	8025e9c <_printf_i+0x1dc>
 8025ec4:	2500      	movs	r5, #0
 8025ec6:	f104 0919 	add.w	r9, r4, #25
 8025eca:	e7f5      	b.n	8025eb8 <_printf_i+0x1f8>
 8025ecc:	2b00      	cmp	r3, #0
 8025ece:	d1ac      	bne.n	8025e2a <_printf_i+0x16a>
 8025ed0:	7803      	ldrb	r3, [r0, #0]
 8025ed2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025ed6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025eda:	e76c      	b.n	8025db6 <_printf_i+0xf6>
 8025edc:	0802b8e5 	.word	0x0802b8e5
 8025ee0:	0802b8f6 	.word	0x0802b8f6

08025ee4 <rand>:
 8025ee4:	b538      	push	{r3, r4, r5, lr}
 8025ee6:	4b13      	ldr	r3, [pc, #76]	; (8025f34 <rand+0x50>)
 8025ee8:	681c      	ldr	r4, [r3, #0]
 8025eea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8025eec:	b97b      	cbnz	r3, 8025f0e <rand+0x2a>
 8025eee:	2018      	movs	r0, #24
 8025ef0:	f7ff fc64 	bl	80257bc <malloc>
 8025ef4:	4a10      	ldr	r2, [pc, #64]	; (8025f38 <rand+0x54>)
 8025ef6:	4b11      	ldr	r3, [pc, #68]	; (8025f3c <rand+0x58>)
 8025ef8:	63a0      	str	r0, [r4, #56]	; 0x38
 8025efa:	e9c0 2300 	strd	r2, r3, [r0]
 8025efe:	4b10      	ldr	r3, [pc, #64]	; (8025f40 <rand+0x5c>)
 8025f00:	6083      	str	r3, [r0, #8]
 8025f02:	230b      	movs	r3, #11
 8025f04:	8183      	strh	r3, [r0, #12]
 8025f06:	2201      	movs	r2, #1
 8025f08:	2300      	movs	r3, #0
 8025f0a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8025f0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8025f10:	480c      	ldr	r0, [pc, #48]	; (8025f44 <rand+0x60>)
 8025f12:	690a      	ldr	r2, [r1, #16]
 8025f14:	694b      	ldr	r3, [r1, #20]
 8025f16:	4c0c      	ldr	r4, [pc, #48]	; (8025f48 <rand+0x64>)
 8025f18:	4350      	muls	r0, r2
 8025f1a:	fb04 0003 	mla	r0, r4, r3, r0
 8025f1e:	fba2 2304 	umull	r2, r3, r2, r4
 8025f22:	4403      	add	r3, r0
 8025f24:	1c54      	adds	r4, r2, #1
 8025f26:	f143 0500 	adc.w	r5, r3, #0
 8025f2a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8025f2e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8025f32:	bd38      	pop	{r3, r4, r5, pc}
 8025f34:	20000098 	.word	0x20000098
 8025f38:	abcd330e 	.word	0xabcd330e
 8025f3c:	e66d1234 	.word	0xe66d1234
 8025f40:	0005deec 	.word	0x0005deec
 8025f44:	5851f42d 	.word	0x5851f42d
 8025f48:	4c957f2d 	.word	0x4c957f2d

08025f4c <_sbrk_r>:
 8025f4c:	b538      	push	{r3, r4, r5, lr}
 8025f4e:	4c06      	ldr	r4, [pc, #24]	; (8025f68 <_sbrk_r+0x1c>)
 8025f50:	2300      	movs	r3, #0
 8025f52:	4605      	mov	r5, r0
 8025f54:	4608      	mov	r0, r1
 8025f56:	6023      	str	r3, [r4, #0]
 8025f58:	f7dc fcea 	bl	8002930 <_sbrk>
 8025f5c:	1c43      	adds	r3, r0, #1
 8025f5e:	d102      	bne.n	8025f66 <_sbrk_r+0x1a>
 8025f60:	6823      	ldr	r3, [r4, #0]
 8025f62:	b103      	cbz	r3, 8025f66 <_sbrk_r+0x1a>
 8025f64:	602b      	str	r3, [r5, #0]
 8025f66:	bd38      	pop	{r3, r4, r5, pc}
 8025f68:	2000bb4c 	.word	0x2000bb4c

08025f6c <_raise_r>:
 8025f6c:	291f      	cmp	r1, #31
 8025f6e:	b538      	push	{r3, r4, r5, lr}
 8025f70:	4604      	mov	r4, r0
 8025f72:	460d      	mov	r5, r1
 8025f74:	d904      	bls.n	8025f80 <_raise_r+0x14>
 8025f76:	2316      	movs	r3, #22
 8025f78:	6003      	str	r3, [r0, #0]
 8025f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8025f7e:	bd38      	pop	{r3, r4, r5, pc}
 8025f80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025f82:	b112      	cbz	r2, 8025f8a <_raise_r+0x1e>
 8025f84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025f88:	b94b      	cbnz	r3, 8025f9e <_raise_r+0x32>
 8025f8a:	4620      	mov	r0, r4
 8025f8c:	f000 f830 	bl	8025ff0 <_getpid_r>
 8025f90:	462a      	mov	r2, r5
 8025f92:	4601      	mov	r1, r0
 8025f94:	4620      	mov	r0, r4
 8025f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025f9a:	f000 b817 	b.w	8025fcc <_kill_r>
 8025f9e:	2b01      	cmp	r3, #1
 8025fa0:	d00a      	beq.n	8025fb8 <_raise_r+0x4c>
 8025fa2:	1c59      	adds	r1, r3, #1
 8025fa4:	d103      	bne.n	8025fae <_raise_r+0x42>
 8025fa6:	2316      	movs	r3, #22
 8025fa8:	6003      	str	r3, [r0, #0]
 8025faa:	2001      	movs	r0, #1
 8025fac:	e7e7      	b.n	8025f7e <_raise_r+0x12>
 8025fae:	2400      	movs	r4, #0
 8025fb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025fb4:	4628      	mov	r0, r5
 8025fb6:	4798      	blx	r3
 8025fb8:	2000      	movs	r0, #0
 8025fba:	e7e0      	b.n	8025f7e <_raise_r+0x12>

08025fbc <raise>:
 8025fbc:	4b02      	ldr	r3, [pc, #8]	; (8025fc8 <raise+0xc>)
 8025fbe:	4601      	mov	r1, r0
 8025fc0:	6818      	ldr	r0, [r3, #0]
 8025fc2:	f7ff bfd3 	b.w	8025f6c <_raise_r>
 8025fc6:	bf00      	nop
 8025fc8:	20000098 	.word	0x20000098

08025fcc <_kill_r>:
 8025fcc:	b538      	push	{r3, r4, r5, lr}
 8025fce:	4c07      	ldr	r4, [pc, #28]	; (8025fec <_kill_r+0x20>)
 8025fd0:	2300      	movs	r3, #0
 8025fd2:	4605      	mov	r5, r0
 8025fd4:	4608      	mov	r0, r1
 8025fd6:	4611      	mov	r1, r2
 8025fd8:	6023      	str	r3, [r4, #0]
 8025fda:	f7dc fc21 	bl	8002820 <_kill>
 8025fde:	1c43      	adds	r3, r0, #1
 8025fe0:	d102      	bne.n	8025fe8 <_kill_r+0x1c>
 8025fe2:	6823      	ldr	r3, [r4, #0]
 8025fe4:	b103      	cbz	r3, 8025fe8 <_kill_r+0x1c>
 8025fe6:	602b      	str	r3, [r5, #0]
 8025fe8:	bd38      	pop	{r3, r4, r5, pc}
 8025fea:	bf00      	nop
 8025fec:	2000bb4c 	.word	0x2000bb4c

08025ff0 <_getpid_r>:
 8025ff0:	f7dc bc0e 	b.w	8002810 <_getpid>

08025ff4 <__swbuf_r>:
 8025ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ff6:	460e      	mov	r6, r1
 8025ff8:	4614      	mov	r4, r2
 8025ffa:	4605      	mov	r5, r0
 8025ffc:	b118      	cbz	r0, 8026006 <__swbuf_r+0x12>
 8025ffe:	6983      	ldr	r3, [r0, #24]
 8026000:	b90b      	cbnz	r3, 8026006 <__swbuf_r+0x12>
 8026002:	f000 fa0b 	bl	802641c <__sinit>
 8026006:	4b21      	ldr	r3, [pc, #132]	; (802608c <__swbuf_r+0x98>)
 8026008:	429c      	cmp	r4, r3
 802600a:	d12a      	bne.n	8026062 <__swbuf_r+0x6e>
 802600c:	686c      	ldr	r4, [r5, #4]
 802600e:	69a3      	ldr	r3, [r4, #24]
 8026010:	60a3      	str	r3, [r4, #8]
 8026012:	89a3      	ldrh	r3, [r4, #12]
 8026014:	071a      	lsls	r2, r3, #28
 8026016:	d52e      	bpl.n	8026076 <__swbuf_r+0x82>
 8026018:	6923      	ldr	r3, [r4, #16]
 802601a:	b363      	cbz	r3, 8026076 <__swbuf_r+0x82>
 802601c:	6923      	ldr	r3, [r4, #16]
 802601e:	6820      	ldr	r0, [r4, #0]
 8026020:	1ac0      	subs	r0, r0, r3
 8026022:	6963      	ldr	r3, [r4, #20]
 8026024:	b2f6      	uxtb	r6, r6
 8026026:	4283      	cmp	r3, r0
 8026028:	4637      	mov	r7, r6
 802602a:	dc04      	bgt.n	8026036 <__swbuf_r+0x42>
 802602c:	4621      	mov	r1, r4
 802602e:	4628      	mov	r0, r5
 8026030:	f000 f98a 	bl	8026348 <_fflush_r>
 8026034:	bb28      	cbnz	r0, 8026082 <__swbuf_r+0x8e>
 8026036:	68a3      	ldr	r3, [r4, #8]
 8026038:	3b01      	subs	r3, #1
 802603a:	60a3      	str	r3, [r4, #8]
 802603c:	6823      	ldr	r3, [r4, #0]
 802603e:	1c5a      	adds	r2, r3, #1
 8026040:	6022      	str	r2, [r4, #0]
 8026042:	701e      	strb	r6, [r3, #0]
 8026044:	6963      	ldr	r3, [r4, #20]
 8026046:	3001      	adds	r0, #1
 8026048:	4283      	cmp	r3, r0
 802604a:	d004      	beq.n	8026056 <__swbuf_r+0x62>
 802604c:	89a3      	ldrh	r3, [r4, #12]
 802604e:	07db      	lsls	r3, r3, #31
 8026050:	d519      	bpl.n	8026086 <__swbuf_r+0x92>
 8026052:	2e0a      	cmp	r6, #10
 8026054:	d117      	bne.n	8026086 <__swbuf_r+0x92>
 8026056:	4621      	mov	r1, r4
 8026058:	4628      	mov	r0, r5
 802605a:	f000 f975 	bl	8026348 <_fflush_r>
 802605e:	b190      	cbz	r0, 8026086 <__swbuf_r+0x92>
 8026060:	e00f      	b.n	8026082 <__swbuf_r+0x8e>
 8026062:	4b0b      	ldr	r3, [pc, #44]	; (8026090 <__swbuf_r+0x9c>)
 8026064:	429c      	cmp	r4, r3
 8026066:	d101      	bne.n	802606c <__swbuf_r+0x78>
 8026068:	68ac      	ldr	r4, [r5, #8]
 802606a:	e7d0      	b.n	802600e <__swbuf_r+0x1a>
 802606c:	4b09      	ldr	r3, [pc, #36]	; (8026094 <__swbuf_r+0xa0>)
 802606e:	429c      	cmp	r4, r3
 8026070:	bf08      	it	eq
 8026072:	68ec      	ldreq	r4, [r5, #12]
 8026074:	e7cb      	b.n	802600e <__swbuf_r+0x1a>
 8026076:	4621      	mov	r1, r4
 8026078:	4628      	mov	r0, r5
 802607a:	f000 f80d 	bl	8026098 <__swsetup_r>
 802607e:	2800      	cmp	r0, #0
 8026080:	d0cc      	beq.n	802601c <__swbuf_r+0x28>
 8026082:	f04f 37ff 	mov.w	r7, #4294967295
 8026086:	4638      	mov	r0, r7
 8026088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802608a:	bf00      	nop
 802608c:	0802b92c 	.word	0x0802b92c
 8026090:	0802b94c 	.word	0x0802b94c
 8026094:	0802b90c 	.word	0x0802b90c

08026098 <__swsetup_r>:
 8026098:	4b32      	ldr	r3, [pc, #200]	; (8026164 <__swsetup_r+0xcc>)
 802609a:	b570      	push	{r4, r5, r6, lr}
 802609c:	681d      	ldr	r5, [r3, #0]
 802609e:	4606      	mov	r6, r0
 80260a0:	460c      	mov	r4, r1
 80260a2:	b125      	cbz	r5, 80260ae <__swsetup_r+0x16>
 80260a4:	69ab      	ldr	r3, [r5, #24]
 80260a6:	b913      	cbnz	r3, 80260ae <__swsetup_r+0x16>
 80260a8:	4628      	mov	r0, r5
 80260aa:	f000 f9b7 	bl	802641c <__sinit>
 80260ae:	4b2e      	ldr	r3, [pc, #184]	; (8026168 <__swsetup_r+0xd0>)
 80260b0:	429c      	cmp	r4, r3
 80260b2:	d10f      	bne.n	80260d4 <__swsetup_r+0x3c>
 80260b4:	686c      	ldr	r4, [r5, #4]
 80260b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80260ba:	b29a      	uxth	r2, r3
 80260bc:	0715      	lsls	r5, r2, #28
 80260be:	d42c      	bmi.n	802611a <__swsetup_r+0x82>
 80260c0:	06d0      	lsls	r0, r2, #27
 80260c2:	d411      	bmi.n	80260e8 <__swsetup_r+0x50>
 80260c4:	2209      	movs	r2, #9
 80260c6:	6032      	str	r2, [r6, #0]
 80260c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80260cc:	81a3      	strh	r3, [r4, #12]
 80260ce:	f04f 30ff 	mov.w	r0, #4294967295
 80260d2:	e03e      	b.n	8026152 <__swsetup_r+0xba>
 80260d4:	4b25      	ldr	r3, [pc, #148]	; (802616c <__swsetup_r+0xd4>)
 80260d6:	429c      	cmp	r4, r3
 80260d8:	d101      	bne.n	80260de <__swsetup_r+0x46>
 80260da:	68ac      	ldr	r4, [r5, #8]
 80260dc:	e7eb      	b.n	80260b6 <__swsetup_r+0x1e>
 80260de:	4b24      	ldr	r3, [pc, #144]	; (8026170 <__swsetup_r+0xd8>)
 80260e0:	429c      	cmp	r4, r3
 80260e2:	bf08      	it	eq
 80260e4:	68ec      	ldreq	r4, [r5, #12]
 80260e6:	e7e6      	b.n	80260b6 <__swsetup_r+0x1e>
 80260e8:	0751      	lsls	r1, r2, #29
 80260ea:	d512      	bpl.n	8026112 <__swsetup_r+0x7a>
 80260ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80260ee:	b141      	cbz	r1, 8026102 <__swsetup_r+0x6a>
 80260f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80260f4:	4299      	cmp	r1, r3
 80260f6:	d002      	beq.n	80260fe <__swsetup_r+0x66>
 80260f8:	4630      	mov	r0, r6
 80260fa:	f7ff fb83 	bl	8025804 <_free_r>
 80260fe:	2300      	movs	r3, #0
 8026100:	6363      	str	r3, [r4, #52]	; 0x34
 8026102:	89a3      	ldrh	r3, [r4, #12]
 8026104:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026108:	81a3      	strh	r3, [r4, #12]
 802610a:	2300      	movs	r3, #0
 802610c:	6063      	str	r3, [r4, #4]
 802610e:	6923      	ldr	r3, [r4, #16]
 8026110:	6023      	str	r3, [r4, #0]
 8026112:	89a3      	ldrh	r3, [r4, #12]
 8026114:	f043 0308 	orr.w	r3, r3, #8
 8026118:	81a3      	strh	r3, [r4, #12]
 802611a:	6923      	ldr	r3, [r4, #16]
 802611c:	b94b      	cbnz	r3, 8026132 <__swsetup_r+0x9a>
 802611e:	89a3      	ldrh	r3, [r4, #12]
 8026120:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026128:	d003      	beq.n	8026132 <__swsetup_r+0x9a>
 802612a:	4621      	mov	r1, r4
 802612c:	4630      	mov	r0, r6
 802612e:	f000 fa23 	bl	8026578 <__smakebuf_r>
 8026132:	89a2      	ldrh	r2, [r4, #12]
 8026134:	f012 0301 	ands.w	r3, r2, #1
 8026138:	d00c      	beq.n	8026154 <__swsetup_r+0xbc>
 802613a:	2300      	movs	r3, #0
 802613c:	60a3      	str	r3, [r4, #8]
 802613e:	6963      	ldr	r3, [r4, #20]
 8026140:	425b      	negs	r3, r3
 8026142:	61a3      	str	r3, [r4, #24]
 8026144:	6923      	ldr	r3, [r4, #16]
 8026146:	b953      	cbnz	r3, 802615e <__swsetup_r+0xc6>
 8026148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802614c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8026150:	d1ba      	bne.n	80260c8 <__swsetup_r+0x30>
 8026152:	bd70      	pop	{r4, r5, r6, pc}
 8026154:	0792      	lsls	r2, r2, #30
 8026156:	bf58      	it	pl
 8026158:	6963      	ldrpl	r3, [r4, #20]
 802615a:	60a3      	str	r3, [r4, #8]
 802615c:	e7f2      	b.n	8026144 <__swsetup_r+0xac>
 802615e:	2000      	movs	r0, #0
 8026160:	e7f7      	b.n	8026152 <__swsetup_r+0xba>
 8026162:	bf00      	nop
 8026164:	20000098 	.word	0x20000098
 8026168:	0802b92c 	.word	0x0802b92c
 802616c:	0802b94c 	.word	0x0802b94c
 8026170:	0802b90c 	.word	0x0802b90c

08026174 <__register_exitproc>:
 8026174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026178:	4d2c      	ldr	r5, [pc, #176]	; (802622c <__register_exitproc+0xb8>)
 802617a:	682c      	ldr	r4, [r5, #0]
 802617c:	4607      	mov	r7, r0
 802617e:	460e      	mov	r6, r1
 8026180:	4691      	mov	r9, r2
 8026182:	4698      	mov	r8, r3
 8026184:	b934      	cbnz	r4, 8026194 <__register_exitproc+0x20>
 8026186:	4b2a      	ldr	r3, [pc, #168]	; (8026230 <__register_exitproc+0xbc>)
 8026188:	4c2a      	ldr	r4, [pc, #168]	; (8026234 <__register_exitproc+0xc0>)
 802618a:	602c      	str	r4, [r5, #0]
 802618c:	b113      	cbz	r3, 8026194 <__register_exitproc+0x20>
 802618e:	681b      	ldr	r3, [r3, #0]
 8026190:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026194:	6863      	ldr	r3, [r4, #4]
 8026196:	2b1f      	cmp	r3, #31
 8026198:	dd3d      	ble.n	8026216 <__register_exitproc+0xa2>
 802619a:	4b27      	ldr	r3, [pc, #156]	; (8026238 <__register_exitproc+0xc4>)
 802619c:	b91b      	cbnz	r3, 80261a6 <__register_exitproc+0x32>
 802619e:	f04f 30ff 	mov.w	r0, #4294967295
 80261a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80261a6:	208c      	movs	r0, #140	; 0x8c
 80261a8:	f7ff fb08 	bl	80257bc <malloc>
 80261ac:	4604      	mov	r4, r0
 80261ae:	2800      	cmp	r0, #0
 80261b0:	d0f5      	beq.n	802619e <__register_exitproc+0x2a>
 80261b2:	2300      	movs	r3, #0
 80261b4:	682a      	ldr	r2, [r5, #0]
 80261b6:	6002      	str	r2, [r0, #0]
 80261b8:	6043      	str	r3, [r0, #4]
 80261ba:	6028      	str	r0, [r5, #0]
 80261bc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80261c0:	b30f      	cbz	r7, 8026206 <__register_exitproc+0x92>
 80261c2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80261c6:	f7ff faf9 	bl	80257bc <malloc>
 80261ca:	2800      	cmp	r0, #0
 80261cc:	d0e7      	beq.n	802619e <__register_exitproc+0x2a>
 80261ce:	2300      	movs	r3, #0
 80261d0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80261d4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80261d8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80261dc:	6862      	ldr	r2, [r4, #4]
 80261de:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80261e2:	2301      	movs	r3, #1
 80261e4:	4093      	lsls	r3, r2
 80261e6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80261ea:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80261ee:	431a      	orrs	r2, r3
 80261f0:	2f02      	cmp	r7, #2
 80261f2:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80261f6:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80261fa:	bf02      	ittt	eq
 80261fc:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8026200:	4313      	orreq	r3, r2
 8026202:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026206:	6863      	ldr	r3, [r4, #4]
 8026208:	1c5a      	adds	r2, r3, #1
 802620a:	3302      	adds	r3, #2
 802620c:	6062      	str	r2, [r4, #4]
 802620e:	2000      	movs	r0, #0
 8026210:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8026214:	e7c5      	b.n	80261a2 <__register_exitproc+0x2e>
 8026216:	2f00      	cmp	r7, #0
 8026218:	d0f5      	beq.n	8026206 <__register_exitproc+0x92>
 802621a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802621e:	2800      	cmp	r0, #0
 8026220:	d1dc      	bne.n	80261dc <__register_exitproc+0x68>
 8026222:	4b05      	ldr	r3, [pc, #20]	; (8026238 <__register_exitproc+0xc4>)
 8026224:	2b00      	cmp	r3, #0
 8026226:	d0ba      	beq.n	802619e <__register_exitproc+0x2a>
 8026228:	e7cb      	b.n	80261c2 <__register_exitproc+0x4e>
 802622a:	bf00      	nop
 802622c:	2000b624 	.word	0x2000b624
 8026230:	0802b908 	.word	0x0802b908
 8026234:	2000b598 	.word	0x2000b598
 8026238:	080257bd 	.word	0x080257bd

0802623c <__sflush_r>:
 802623c:	898a      	ldrh	r2, [r1, #12]
 802623e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026242:	4605      	mov	r5, r0
 8026244:	0710      	lsls	r0, r2, #28
 8026246:	460c      	mov	r4, r1
 8026248:	d458      	bmi.n	80262fc <__sflush_r+0xc0>
 802624a:	684b      	ldr	r3, [r1, #4]
 802624c:	2b00      	cmp	r3, #0
 802624e:	dc05      	bgt.n	802625c <__sflush_r+0x20>
 8026250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026252:	2b00      	cmp	r3, #0
 8026254:	dc02      	bgt.n	802625c <__sflush_r+0x20>
 8026256:	2000      	movs	r0, #0
 8026258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802625c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802625e:	2e00      	cmp	r6, #0
 8026260:	d0f9      	beq.n	8026256 <__sflush_r+0x1a>
 8026262:	2300      	movs	r3, #0
 8026264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026268:	682f      	ldr	r7, [r5, #0]
 802626a:	6a21      	ldr	r1, [r4, #32]
 802626c:	602b      	str	r3, [r5, #0]
 802626e:	d032      	beq.n	80262d6 <__sflush_r+0x9a>
 8026270:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026272:	89a3      	ldrh	r3, [r4, #12]
 8026274:	075a      	lsls	r2, r3, #29
 8026276:	d505      	bpl.n	8026284 <__sflush_r+0x48>
 8026278:	6863      	ldr	r3, [r4, #4]
 802627a:	1ac0      	subs	r0, r0, r3
 802627c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802627e:	b10b      	cbz	r3, 8026284 <__sflush_r+0x48>
 8026280:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026282:	1ac0      	subs	r0, r0, r3
 8026284:	2300      	movs	r3, #0
 8026286:	4602      	mov	r2, r0
 8026288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802628a:	6a21      	ldr	r1, [r4, #32]
 802628c:	4628      	mov	r0, r5
 802628e:	47b0      	blx	r6
 8026290:	1c43      	adds	r3, r0, #1
 8026292:	89a3      	ldrh	r3, [r4, #12]
 8026294:	d106      	bne.n	80262a4 <__sflush_r+0x68>
 8026296:	6829      	ldr	r1, [r5, #0]
 8026298:	291d      	cmp	r1, #29
 802629a:	d848      	bhi.n	802632e <__sflush_r+0xf2>
 802629c:	4a29      	ldr	r2, [pc, #164]	; (8026344 <__sflush_r+0x108>)
 802629e:	40ca      	lsrs	r2, r1
 80262a0:	07d6      	lsls	r6, r2, #31
 80262a2:	d544      	bpl.n	802632e <__sflush_r+0xf2>
 80262a4:	2200      	movs	r2, #0
 80262a6:	6062      	str	r2, [r4, #4]
 80262a8:	04d9      	lsls	r1, r3, #19
 80262aa:	6922      	ldr	r2, [r4, #16]
 80262ac:	6022      	str	r2, [r4, #0]
 80262ae:	d504      	bpl.n	80262ba <__sflush_r+0x7e>
 80262b0:	1c42      	adds	r2, r0, #1
 80262b2:	d101      	bne.n	80262b8 <__sflush_r+0x7c>
 80262b4:	682b      	ldr	r3, [r5, #0]
 80262b6:	b903      	cbnz	r3, 80262ba <__sflush_r+0x7e>
 80262b8:	6560      	str	r0, [r4, #84]	; 0x54
 80262ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80262bc:	602f      	str	r7, [r5, #0]
 80262be:	2900      	cmp	r1, #0
 80262c0:	d0c9      	beq.n	8026256 <__sflush_r+0x1a>
 80262c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80262c6:	4299      	cmp	r1, r3
 80262c8:	d002      	beq.n	80262d0 <__sflush_r+0x94>
 80262ca:	4628      	mov	r0, r5
 80262cc:	f7ff fa9a 	bl	8025804 <_free_r>
 80262d0:	2000      	movs	r0, #0
 80262d2:	6360      	str	r0, [r4, #52]	; 0x34
 80262d4:	e7c0      	b.n	8026258 <__sflush_r+0x1c>
 80262d6:	2301      	movs	r3, #1
 80262d8:	4628      	mov	r0, r5
 80262da:	47b0      	blx	r6
 80262dc:	1c41      	adds	r1, r0, #1
 80262de:	d1c8      	bne.n	8026272 <__sflush_r+0x36>
 80262e0:	682b      	ldr	r3, [r5, #0]
 80262e2:	2b00      	cmp	r3, #0
 80262e4:	d0c5      	beq.n	8026272 <__sflush_r+0x36>
 80262e6:	2b1d      	cmp	r3, #29
 80262e8:	d001      	beq.n	80262ee <__sflush_r+0xb2>
 80262ea:	2b16      	cmp	r3, #22
 80262ec:	d101      	bne.n	80262f2 <__sflush_r+0xb6>
 80262ee:	602f      	str	r7, [r5, #0]
 80262f0:	e7b1      	b.n	8026256 <__sflush_r+0x1a>
 80262f2:	89a3      	ldrh	r3, [r4, #12]
 80262f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80262f8:	81a3      	strh	r3, [r4, #12]
 80262fa:	e7ad      	b.n	8026258 <__sflush_r+0x1c>
 80262fc:	690f      	ldr	r7, [r1, #16]
 80262fe:	2f00      	cmp	r7, #0
 8026300:	d0a9      	beq.n	8026256 <__sflush_r+0x1a>
 8026302:	0793      	lsls	r3, r2, #30
 8026304:	680e      	ldr	r6, [r1, #0]
 8026306:	bf08      	it	eq
 8026308:	694b      	ldreq	r3, [r1, #20]
 802630a:	600f      	str	r7, [r1, #0]
 802630c:	bf18      	it	ne
 802630e:	2300      	movne	r3, #0
 8026310:	eba6 0807 	sub.w	r8, r6, r7
 8026314:	608b      	str	r3, [r1, #8]
 8026316:	f1b8 0f00 	cmp.w	r8, #0
 802631a:	dd9c      	ble.n	8026256 <__sflush_r+0x1a>
 802631c:	4643      	mov	r3, r8
 802631e:	463a      	mov	r2, r7
 8026320:	6a21      	ldr	r1, [r4, #32]
 8026322:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026324:	4628      	mov	r0, r5
 8026326:	47b0      	blx	r6
 8026328:	2800      	cmp	r0, #0
 802632a:	dc06      	bgt.n	802633a <__sflush_r+0xfe>
 802632c:	89a3      	ldrh	r3, [r4, #12]
 802632e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026332:	81a3      	strh	r3, [r4, #12]
 8026334:	f04f 30ff 	mov.w	r0, #4294967295
 8026338:	e78e      	b.n	8026258 <__sflush_r+0x1c>
 802633a:	4407      	add	r7, r0
 802633c:	eba8 0800 	sub.w	r8, r8, r0
 8026340:	e7e9      	b.n	8026316 <__sflush_r+0xda>
 8026342:	bf00      	nop
 8026344:	20400001 	.word	0x20400001

08026348 <_fflush_r>:
 8026348:	b538      	push	{r3, r4, r5, lr}
 802634a:	690b      	ldr	r3, [r1, #16]
 802634c:	4605      	mov	r5, r0
 802634e:	460c      	mov	r4, r1
 8026350:	b1db      	cbz	r3, 802638a <_fflush_r+0x42>
 8026352:	b118      	cbz	r0, 802635c <_fflush_r+0x14>
 8026354:	6983      	ldr	r3, [r0, #24]
 8026356:	b90b      	cbnz	r3, 802635c <_fflush_r+0x14>
 8026358:	f000 f860 	bl	802641c <__sinit>
 802635c:	4b0c      	ldr	r3, [pc, #48]	; (8026390 <_fflush_r+0x48>)
 802635e:	429c      	cmp	r4, r3
 8026360:	d109      	bne.n	8026376 <_fflush_r+0x2e>
 8026362:	686c      	ldr	r4, [r5, #4]
 8026364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026368:	b17b      	cbz	r3, 802638a <_fflush_r+0x42>
 802636a:	4621      	mov	r1, r4
 802636c:	4628      	mov	r0, r5
 802636e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026372:	f7ff bf63 	b.w	802623c <__sflush_r>
 8026376:	4b07      	ldr	r3, [pc, #28]	; (8026394 <_fflush_r+0x4c>)
 8026378:	429c      	cmp	r4, r3
 802637a:	d101      	bne.n	8026380 <_fflush_r+0x38>
 802637c:	68ac      	ldr	r4, [r5, #8]
 802637e:	e7f1      	b.n	8026364 <_fflush_r+0x1c>
 8026380:	4b05      	ldr	r3, [pc, #20]	; (8026398 <_fflush_r+0x50>)
 8026382:	429c      	cmp	r4, r3
 8026384:	bf08      	it	eq
 8026386:	68ec      	ldreq	r4, [r5, #12]
 8026388:	e7ec      	b.n	8026364 <_fflush_r+0x1c>
 802638a:	2000      	movs	r0, #0
 802638c:	bd38      	pop	{r3, r4, r5, pc}
 802638e:	bf00      	nop
 8026390:	0802b92c 	.word	0x0802b92c
 8026394:	0802b94c 	.word	0x0802b94c
 8026398:	0802b90c 	.word	0x0802b90c

0802639c <std>:
 802639c:	2300      	movs	r3, #0
 802639e:	b510      	push	{r4, lr}
 80263a0:	4604      	mov	r4, r0
 80263a2:	e9c0 3300 	strd	r3, r3, [r0]
 80263a6:	6083      	str	r3, [r0, #8]
 80263a8:	8181      	strh	r1, [r0, #12]
 80263aa:	6643      	str	r3, [r0, #100]	; 0x64
 80263ac:	81c2      	strh	r2, [r0, #14]
 80263ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80263b2:	6183      	str	r3, [r0, #24]
 80263b4:	4619      	mov	r1, r3
 80263b6:	2208      	movs	r2, #8
 80263b8:	305c      	adds	r0, #92	; 0x5c
 80263ba:	f7ff fa1a 	bl	80257f2 <memset>
 80263be:	4b05      	ldr	r3, [pc, #20]	; (80263d4 <std+0x38>)
 80263c0:	6263      	str	r3, [r4, #36]	; 0x24
 80263c2:	4b05      	ldr	r3, [pc, #20]	; (80263d8 <std+0x3c>)
 80263c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80263c6:	4b05      	ldr	r3, [pc, #20]	; (80263dc <std+0x40>)
 80263c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80263ca:	4b05      	ldr	r3, [pc, #20]	; (80263e0 <std+0x44>)
 80263cc:	6224      	str	r4, [r4, #32]
 80263ce:	6323      	str	r3, [r4, #48]	; 0x30
 80263d0:	bd10      	pop	{r4, pc}
 80263d2:	bf00      	nop
 80263d4:	080265fd 	.word	0x080265fd
 80263d8:	0802661f 	.word	0x0802661f
 80263dc:	08026657 	.word	0x08026657
 80263e0:	0802667b 	.word	0x0802667b

080263e4 <_cleanup_r>:
 80263e4:	4901      	ldr	r1, [pc, #4]	; (80263ec <_cleanup_r+0x8>)
 80263e6:	f000 b885 	b.w	80264f4 <_fwalk_reent>
 80263ea:	bf00      	nop
 80263ec:	08026349 	.word	0x08026349

080263f0 <__sfmoreglue>:
 80263f0:	b570      	push	{r4, r5, r6, lr}
 80263f2:	1e4a      	subs	r2, r1, #1
 80263f4:	2568      	movs	r5, #104	; 0x68
 80263f6:	4355      	muls	r5, r2
 80263f8:	460e      	mov	r6, r1
 80263fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80263fe:	f7ff fa4f 	bl	80258a0 <_malloc_r>
 8026402:	4604      	mov	r4, r0
 8026404:	b140      	cbz	r0, 8026418 <__sfmoreglue+0x28>
 8026406:	2100      	movs	r1, #0
 8026408:	e9c0 1600 	strd	r1, r6, [r0]
 802640c:	300c      	adds	r0, #12
 802640e:	60a0      	str	r0, [r4, #8]
 8026410:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026414:	f7ff f9ed 	bl	80257f2 <memset>
 8026418:	4620      	mov	r0, r4
 802641a:	bd70      	pop	{r4, r5, r6, pc}

0802641c <__sinit>:
 802641c:	6983      	ldr	r3, [r0, #24]
 802641e:	b510      	push	{r4, lr}
 8026420:	4604      	mov	r4, r0
 8026422:	bb33      	cbnz	r3, 8026472 <__sinit+0x56>
 8026424:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8026428:	6503      	str	r3, [r0, #80]	; 0x50
 802642a:	4b12      	ldr	r3, [pc, #72]	; (8026474 <__sinit+0x58>)
 802642c:	4a12      	ldr	r2, [pc, #72]	; (8026478 <__sinit+0x5c>)
 802642e:	681b      	ldr	r3, [r3, #0]
 8026430:	6282      	str	r2, [r0, #40]	; 0x28
 8026432:	4298      	cmp	r0, r3
 8026434:	bf04      	itt	eq
 8026436:	2301      	moveq	r3, #1
 8026438:	6183      	streq	r3, [r0, #24]
 802643a:	f000 f81f 	bl	802647c <__sfp>
 802643e:	6060      	str	r0, [r4, #4]
 8026440:	4620      	mov	r0, r4
 8026442:	f000 f81b 	bl	802647c <__sfp>
 8026446:	60a0      	str	r0, [r4, #8]
 8026448:	4620      	mov	r0, r4
 802644a:	f000 f817 	bl	802647c <__sfp>
 802644e:	2200      	movs	r2, #0
 8026450:	60e0      	str	r0, [r4, #12]
 8026452:	2104      	movs	r1, #4
 8026454:	6860      	ldr	r0, [r4, #4]
 8026456:	f7ff ffa1 	bl	802639c <std>
 802645a:	2201      	movs	r2, #1
 802645c:	2109      	movs	r1, #9
 802645e:	68a0      	ldr	r0, [r4, #8]
 8026460:	f7ff ff9c 	bl	802639c <std>
 8026464:	2202      	movs	r2, #2
 8026466:	2112      	movs	r1, #18
 8026468:	68e0      	ldr	r0, [r4, #12]
 802646a:	f7ff ff97 	bl	802639c <std>
 802646e:	2301      	movs	r3, #1
 8026470:	61a3      	str	r3, [r4, #24]
 8026472:	bd10      	pop	{r4, pc}
 8026474:	0802b8d0 	.word	0x0802b8d0
 8026478:	080263e5 	.word	0x080263e5

0802647c <__sfp>:
 802647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802647e:	4b1b      	ldr	r3, [pc, #108]	; (80264ec <__sfp+0x70>)
 8026480:	681e      	ldr	r6, [r3, #0]
 8026482:	69b3      	ldr	r3, [r6, #24]
 8026484:	4607      	mov	r7, r0
 8026486:	b913      	cbnz	r3, 802648e <__sfp+0x12>
 8026488:	4630      	mov	r0, r6
 802648a:	f7ff ffc7 	bl	802641c <__sinit>
 802648e:	3648      	adds	r6, #72	; 0x48
 8026490:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026494:	3b01      	subs	r3, #1
 8026496:	d503      	bpl.n	80264a0 <__sfp+0x24>
 8026498:	6833      	ldr	r3, [r6, #0]
 802649a:	b133      	cbz	r3, 80264aa <__sfp+0x2e>
 802649c:	6836      	ldr	r6, [r6, #0]
 802649e:	e7f7      	b.n	8026490 <__sfp+0x14>
 80264a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80264a4:	b16d      	cbz	r5, 80264c2 <__sfp+0x46>
 80264a6:	3468      	adds	r4, #104	; 0x68
 80264a8:	e7f4      	b.n	8026494 <__sfp+0x18>
 80264aa:	2104      	movs	r1, #4
 80264ac:	4638      	mov	r0, r7
 80264ae:	f7ff ff9f 	bl	80263f0 <__sfmoreglue>
 80264b2:	6030      	str	r0, [r6, #0]
 80264b4:	2800      	cmp	r0, #0
 80264b6:	d1f1      	bne.n	802649c <__sfp+0x20>
 80264b8:	230c      	movs	r3, #12
 80264ba:	603b      	str	r3, [r7, #0]
 80264bc:	4604      	mov	r4, r0
 80264be:	4620      	mov	r0, r4
 80264c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80264c2:	4b0b      	ldr	r3, [pc, #44]	; (80264f0 <__sfp+0x74>)
 80264c4:	6665      	str	r5, [r4, #100]	; 0x64
 80264c6:	e9c4 5500 	strd	r5, r5, [r4]
 80264ca:	60a5      	str	r5, [r4, #8]
 80264cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80264d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80264d4:	2208      	movs	r2, #8
 80264d6:	4629      	mov	r1, r5
 80264d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80264dc:	f7ff f989 	bl	80257f2 <memset>
 80264e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80264e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80264e8:	e7e9      	b.n	80264be <__sfp+0x42>
 80264ea:	bf00      	nop
 80264ec:	0802b8d0 	.word	0x0802b8d0
 80264f0:	ffff0001 	.word	0xffff0001

080264f4 <_fwalk_reent>:
 80264f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80264f8:	4680      	mov	r8, r0
 80264fa:	4689      	mov	r9, r1
 80264fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026500:	2600      	movs	r6, #0
 8026502:	b914      	cbnz	r4, 802650a <_fwalk_reent+0x16>
 8026504:	4630      	mov	r0, r6
 8026506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802650a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802650e:	3f01      	subs	r7, #1
 8026510:	d501      	bpl.n	8026516 <_fwalk_reent+0x22>
 8026512:	6824      	ldr	r4, [r4, #0]
 8026514:	e7f5      	b.n	8026502 <_fwalk_reent+0xe>
 8026516:	89ab      	ldrh	r3, [r5, #12]
 8026518:	2b01      	cmp	r3, #1
 802651a:	d907      	bls.n	802652c <_fwalk_reent+0x38>
 802651c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026520:	3301      	adds	r3, #1
 8026522:	d003      	beq.n	802652c <_fwalk_reent+0x38>
 8026524:	4629      	mov	r1, r5
 8026526:	4640      	mov	r0, r8
 8026528:	47c8      	blx	r9
 802652a:	4306      	orrs	r6, r0
 802652c:	3568      	adds	r5, #104	; 0x68
 802652e:	e7ee      	b.n	802650e <_fwalk_reent+0x1a>

08026530 <__swhatbuf_r>:
 8026530:	b570      	push	{r4, r5, r6, lr}
 8026532:	460e      	mov	r6, r1
 8026534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026538:	2900      	cmp	r1, #0
 802653a:	b096      	sub	sp, #88	; 0x58
 802653c:	4614      	mov	r4, r2
 802653e:	461d      	mov	r5, r3
 8026540:	da07      	bge.n	8026552 <__swhatbuf_r+0x22>
 8026542:	2300      	movs	r3, #0
 8026544:	602b      	str	r3, [r5, #0]
 8026546:	89b3      	ldrh	r3, [r6, #12]
 8026548:	061a      	lsls	r2, r3, #24
 802654a:	d410      	bmi.n	802656e <__swhatbuf_r+0x3e>
 802654c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026550:	e00e      	b.n	8026570 <__swhatbuf_r+0x40>
 8026552:	466a      	mov	r2, sp
 8026554:	f000 f8b8 	bl	80266c8 <_fstat_r>
 8026558:	2800      	cmp	r0, #0
 802655a:	dbf2      	blt.n	8026542 <__swhatbuf_r+0x12>
 802655c:	9a01      	ldr	r2, [sp, #4]
 802655e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026562:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026566:	425a      	negs	r2, r3
 8026568:	415a      	adcs	r2, r3
 802656a:	602a      	str	r2, [r5, #0]
 802656c:	e7ee      	b.n	802654c <__swhatbuf_r+0x1c>
 802656e:	2340      	movs	r3, #64	; 0x40
 8026570:	2000      	movs	r0, #0
 8026572:	6023      	str	r3, [r4, #0]
 8026574:	b016      	add	sp, #88	; 0x58
 8026576:	bd70      	pop	{r4, r5, r6, pc}

08026578 <__smakebuf_r>:
 8026578:	898b      	ldrh	r3, [r1, #12]
 802657a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802657c:	079d      	lsls	r5, r3, #30
 802657e:	4606      	mov	r6, r0
 8026580:	460c      	mov	r4, r1
 8026582:	d507      	bpl.n	8026594 <__smakebuf_r+0x1c>
 8026584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026588:	6023      	str	r3, [r4, #0]
 802658a:	6123      	str	r3, [r4, #16]
 802658c:	2301      	movs	r3, #1
 802658e:	6163      	str	r3, [r4, #20]
 8026590:	b002      	add	sp, #8
 8026592:	bd70      	pop	{r4, r5, r6, pc}
 8026594:	ab01      	add	r3, sp, #4
 8026596:	466a      	mov	r2, sp
 8026598:	f7ff ffca 	bl	8026530 <__swhatbuf_r>
 802659c:	9900      	ldr	r1, [sp, #0]
 802659e:	4605      	mov	r5, r0
 80265a0:	4630      	mov	r0, r6
 80265a2:	f7ff f97d 	bl	80258a0 <_malloc_r>
 80265a6:	b948      	cbnz	r0, 80265bc <__smakebuf_r+0x44>
 80265a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80265ac:	059a      	lsls	r2, r3, #22
 80265ae:	d4ef      	bmi.n	8026590 <__smakebuf_r+0x18>
 80265b0:	f023 0303 	bic.w	r3, r3, #3
 80265b4:	f043 0302 	orr.w	r3, r3, #2
 80265b8:	81a3      	strh	r3, [r4, #12]
 80265ba:	e7e3      	b.n	8026584 <__smakebuf_r+0xc>
 80265bc:	4b0d      	ldr	r3, [pc, #52]	; (80265f4 <__smakebuf_r+0x7c>)
 80265be:	62b3      	str	r3, [r6, #40]	; 0x28
 80265c0:	89a3      	ldrh	r3, [r4, #12]
 80265c2:	6020      	str	r0, [r4, #0]
 80265c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80265c8:	81a3      	strh	r3, [r4, #12]
 80265ca:	9b00      	ldr	r3, [sp, #0]
 80265cc:	6163      	str	r3, [r4, #20]
 80265ce:	9b01      	ldr	r3, [sp, #4]
 80265d0:	6120      	str	r0, [r4, #16]
 80265d2:	b15b      	cbz	r3, 80265ec <__smakebuf_r+0x74>
 80265d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80265d8:	4630      	mov	r0, r6
 80265da:	f000 f887 	bl	80266ec <_isatty_r>
 80265de:	b128      	cbz	r0, 80265ec <__smakebuf_r+0x74>
 80265e0:	89a3      	ldrh	r3, [r4, #12]
 80265e2:	f023 0303 	bic.w	r3, r3, #3
 80265e6:	f043 0301 	orr.w	r3, r3, #1
 80265ea:	81a3      	strh	r3, [r4, #12]
 80265ec:	89a3      	ldrh	r3, [r4, #12]
 80265ee:	431d      	orrs	r5, r3
 80265f0:	81a5      	strh	r5, [r4, #12]
 80265f2:	e7cd      	b.n	8026590 <__smakebuf_r+0x18>
 80265f4:	080263e5 	.word	0x080263e5

080265f8 <__malloc_lock>:
 80265f8:	4770      	bx	lr

080265fa <__malloc_unlock>:
 80265fa:	4770      	bx	lr

080265fc <__sread>:
 80265fc:	b510      	push	{r4, lr}
 80265fe:	460c      	mov	r4, r1
 8026600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026604:	f000 f894 	bl	8026730 <_read_r>
 8026608:	2800      	cmp	r0, #0
 802660a:	bfab      	itete	ge
 802660c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802660e:	89a3      	ldrhlt	r3, [r4, #12]
 8026610:	181b      	addge	r3, r3, r0
 8026612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026616:	bfac      	ite	ge
 8026618:	6563      	strge	r3, [r4, #84]	; 0x54
 802661a:	81a3      	strhlt	r3, [r4, #12]
 802661c:	bd10      	pop	{r4, pc}

0802661e <__swrite>:
 802661e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026622:	461f      	mov	r7, r3
 8026624:	898b      	ldrh	r3, [r1, #12]
 8026626:	05db      	lsls	r3, r3, #23
 8026628:	4605      	mov	r5, r0
 802662a:	460c      	mov	r4, r1
 802662c:	4616      	mov	r6, r2
 802662e:	d505      	bpl.n	802663c <__swrite+0x1e>
 8026630:	2302      	movs	r3, #2
 8026632:	2200      	movs	r2, #0
 8026634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026638:	f000 f868 	bl	802670c <_lseek_r>
 802663c:	89a3      	ldrh	r3, [r4, #12]
 802663e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026646:	81a3      	strh	r3, [r4, #12]
 8026648:	4632      	mov	r2, r6
 802664a:	463b      	mov	r3, r7
 802664c:	4628      	mov	r0, r5
 802664e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026652:	f000 b817 	b.w	8026684 <_write_r>

08026656 <__sseek>:
 8026656:	b510      	push	{r4, lr}
 8026658:	460c      	mov	r4, r1
 802665a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802665e:	f000 f855 	bl	802670c <_lseek_r>
 8026662:	1c43      	adds	r3, r0, #1
 8026664:	89a3      	ldrh	r3, [r4, #12]
 8026666:	bf15      	itete	ne
 8026668:	6560      	strne	r0, [r4, #84]	; 0x54
 802666a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802666e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026672:	81a3      	strheq	r3, [r4, #12]
 8026674:	bf18      	it	ne
 8026676:	81a3      	strhne	r3, [r4, #12]
 8026678:	bd10      	pop	{r4, pc}

0802667a <__sclose>:
 802667a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802667e:	f000 b813 	b.w	80266a8 <_close_r>
	...

08026684 <_write_r>:
 8026684:	b538      	push	{r3, r4, r5, lr}
 8026686:	4c07      	ldr	r4, [pc, #28]	; (80266a4 <_write_r+0x20>)
 8026688:	4605      	mov	r5, r0
 802668a:	4608      	mov	r0, r1
 802668c:	4611      	mov	r1, r2
 802668e:	2200      	movs	r2, #0
 8026690:	6022      	str	r2, [r4, #0]
 8026692:	461a      	mov	r2, r3
 8026694:	f7dc f8fb 	bl	800288e <_write>
 8026698:	1c43      	adds	r3, r0, #1
 802669a:	d102      	bne.n	80266a2 <_write_r+0x1e>
 802669c:	6823      	ldr	r3, [r4, #0]
 802669e:	b103      	cbz	r3, 80266a2 <_write_r+0x1e>
 80266a0:	602b      	str	r3, [r5, #0]
 80266a2:	bd38      	pop	{r3, r4, r5, pc}
 80266a4:	2000bb4c 	.word	0x2000bb4c

080266a8 <_close_r>:
 80266a8:	b538      	push	{r3, r4, r5, lr}
 80266aa:	4c06      	ldr	r4, [pc, #24]	; (80266c4 <_close_r+0x1c>)
 80266ac:	2300      	movs	r3, #0
 80266ae:	4605      	mov	r5, r0
 80266b0:	4608      	mov	r0, r1
 80266b2:	6023      	str	r3, [r4, #0]
 80266b4:	f7dc f907 	bl	80028c6 <_close>
 80266b8:	1c43      	adds	r3, r0, #1
 80266ba:	d102      	bne.n	80266c2 <_close_r+0x1a>
 80266bc:	6823      	ldr	r3, [r4, #0]
 80266be:	b103      	cbz	r3, 80266c2 <_close_r+0x1a>
 80266c0:	602b      	str	r3, [r5, #0]
 80266c2:	bd38      	pop	{r3, r4, r5, pc}
 80266c4:	2000bb4c 	.word	0x2000bb4c

080266c8 <_fstat_r>:
 80266c8:	b538      	push	{r3, r4, r5, lr}
 80266ca:	4c07      	ldr	r4, [pc, #28]	; (80266e8 <_fstat_r+0x20>)
 80266cc:	2300      	movs	r3, #0
 80266ce:	4605      	mov	r5, r0
 80266d0:	4608      	mov	r0, r1
 80266d2:	4611      	mov	r1, r2
 80266d4:	6023      	str	r3, [r4, #0]
 80266d6:	f7dc f902 	bl	80028de <_fstat>
 80266da:	1c43      	adds	r3, r0, #1
 80266dc:	d102      	bne.n	80266e4 <_fstat_r+0x1c>
 80266de:	6823      	ldr	r3, [r4, #0]
 80266e0:	b103      	cbz	r3, 80266e4 <_fstat_r+0x1c>
 80266e2:	602b      	str	r3, [r5, #0]
 80266e4:	bd38      	pop	{r3, r4, r5, pc}
 80266e6:	bf00      	nop
 80266e8:	2000bb4c 	.word	0x2000bb4c

080266ec <_isatty_r>:
 80266ec:	b538      	push	{r3, r4, r5, lr}
 80266ee:	4c06      	ldr	r4, [pc, #24]	; (8026708 <_isatty_r+0x1c>)
 80266f0:	2300      	movs	r3, #0
 80266f2:	4605      	mov	r5, r0
 80266f4:	4608      	mov	r0, r1
 80266f6:	6023      	str	r3, [r4, #0]
 80266f8:	f7dc f901 	bl	80028fe <_isatty>
 80266fc:	1c43      	adds	r3, r0, #1
 80266fe:	d102      	bne.n	8026706 <_isatty_r+0x1a>
 8026700:	6823      	ldr	r3, [r4, #0]
 8026702:	b103      	cbz	r3, 8026706 <_isatty_r+0x1a>
 8026704:	602b      	str	r3, [r5, #0]
 8026706:	bd38      	pop	{r3, r4, r5, pc}
 8026708:	2000bb4c 	.word	0x2000bb4c

0802670c <_lseek_r>:
 802670c:	b538      	push	{r3, r4, r5, lr}
 802670e:	4c07      	ldr	r4, [pc, #28]	; (802672c <_lseek_r+0x20>)
 8026710:	4605      	mov	r5, r0
 8026712:	4608      	mov	r0, r1
 8026714:	4611      	mov	r1, r2
 8026716:	2200      	movs	r2, #0
 8026718:	6022      	str	r2, [r4, #0]
 802671a:	461a      	mov	r2, r3
 802671c:	f7dc f8fa 	bl	8002914 <_lseek>
 8026720:	1c43      	adds	r3, r0, #1
 8026722:	d102      	bne.n	802672a <_lseek_r+0x1e>
 8026724:	6823      	ldr	r3, [r4, #0]
 8026726:	b103      	cbz	r3, 802672a <_lseek_r+0x1e>
 8026728:	602b      	str	r3, [r5, #0]
 802672a:	bd38      	pop	{r3, r4, r5, pc}
 802672c:	2000bb4c 	.word	0x2000bb4c

08026730 <_read_r>:
 8026730:	b538      	push	{r3, r4, r5, lr}
 8026732:	4c07      	ldr	r4, [pc, #28]	; (8026750 <_read_r+0x20>)
 8026734:	4605      	mov	r5, r0
 8026736:	4608      	mov	r0, r1
 8026738:	4611      	mov	r1, r2
 802673a:	2200      	movs	r2, #0
 802673c:	6022      	str	r2, [r4, #0]
 802673e:	461a      	mov	r2, r3
 8026740:	f7dc f888 	bl	8002854 <_read>
 8026744:	1c43      	adds	r3, r0, #1
 8026746:	d102      	bne.n	802674e <_read_r+0x1e>
 8026748:	6823      	ldr	r3, [r4, #0]
 802674a:	b103      	cbz	r3, 802674e <_read_r+0x1e>
 802674c:	602b      	str	r3, [r5, #0]
 802674e:	bd38      	pop	{r3, r4, r5, pc}
 8026750:	2000bb4c 	.word	0x2000bb4c

08026754 <_init>:
 8026754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026756:	bf00      	nop
 8026758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802675a:	bc08      	pop	{r3}
 802675c:	469e      	mov	lr, r3
 802675e:	4770      	bx	lr

08026760 <_fini>:
 8026760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026762:	bf00      	nop
 8026764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026766:	bc08      	pop	{r3}
 8026768:	469e      	mov	lr, r3
 802676a:	4770      	bx	lr
