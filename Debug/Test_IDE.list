
Test_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028400  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ac0  080285d0  080285d0  000385d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00002260  0802d090  0802d090  0003d090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00026dd0  0802f2f0  0802f2f0  0003f2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000104  080560c0  080560c0  000660c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080561c4  080561c4  000700fc  2**0
                  CONTENTS
  7 .ARM          00000008  080561c4  080561c4  000661c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080561cc  080561cc  000700fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080561cc  080561cc  000661cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080561e0  080561e0  000661e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  080561e8  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c064  200000fc  080562e4  000700fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000c160  080562e4  0007c160  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000700fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   000d9ce3  00000000  00000000  0007012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00016f3d  00000000  00000000  00149e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005730  00000000  00000000  00160d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005038  00000000  00000000  00166480  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003d976  00000000  00000000  0016b4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0004f010  00000000  00000000  001a8e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013cb29  00000000  00000000  001f7e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  00334967  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000178a8  00000000  00000000  00334a64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080285b8 	.word	0x080285b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	080285b8 	.word	0x080285b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f00e fd22 	bl	800f004 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 f9b4 	bl	800092c <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 f998 	bl	800092c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f00e fcdd 	bl	800efc8 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f97e 	bl	800094c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f00e fca7 	bl	800efc8 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000118 	.word	0x20000118

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f00e fbf4 	bl	800efc8 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00e fbe6 	bl	800efc8 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f00e fbcb 	bl	800efc8 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f00e fbbd 	bl	800efc8 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000118 	.word	0x20000118
 8000890:	2000011c 	.word	0x2000011c

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00e fb70 	bl	800ef94 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00e fb5c 	bl	800ef94 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800091a:	781b      	ldrb	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000118 	.word	0x20000118

0800092c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000930:	f7ff fff0 	bl	8000914 <ft5336_Get_I2C_InitializedStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d104      	bne.n	8000944 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800093a:	f00e fb21 	bl	800ef80 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800093e:	4b02      	ldr	r3, [pc, #8]	; (8000948 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
  }
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000118 	.word	0x20000118

0800094c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80009ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <vApplicationGetIdleTaskMemory+0x30>)
 80009b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000120 	.word	0x20000120
 80009cc:	20000178 	.word	0x20000178

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f002 fb40 	bl	800305a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f849 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f001 f801 	bl	80019e4 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009e2:	f000 f903 	bl	8000bec <MX_ADC3_Init>
  MX_CRC_Init();
 80009e6:	f000 f953 	bl	8000c90 <MX_CRC_Init>
  MX_DCMI_Init();
 80009ea:	f000 f973 	bl	8000cd4 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80009ee:	f000 f9a5 	bl	8000d3c <MX_DMA2D_Init>
  MX_FMC_Init();
 80009f2:	f000 ff4b 	bl	800188c <MX_FMC_Init>
  MX_I2C1_Init();
 80009f6:	f000 f9d3 	bl	8000da0 <MX_I2C1_Init>
  MX_I2C3_Init();
 80009fa:	f000 fa11 	bl	8000e20 <MX_I2C3_Init>
  MX_LTDC_Init();
 80009fe:	f000 fa4f 	bl	8000ea0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000a02:	f000 fb03 	bl	800100c <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000a06:	f000 fb2d 	bl	8001064 <MX_RTC_Init>
  MX_SAI2_Init();
 8000a0a:	f000 fbd1 	bl	80011b0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000a0e:	f000 fc77 	bl	8001300 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000a12:	f000 fc95 	bl	8001340 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000a16:	f000 fcc3 	bl	80013a0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000a1a:	f000 fcff 	bl	800141c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a1e:	f000 fd73 	bl	8001508 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a22:	f000 fde9 	bl	80015f8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a26:	f000 fe5f 	bl	80016e8 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000a2a:	f000 feb1 	bl	8001790 <MX_TIM12_Init>
  MX_USART6_UART_Init();
 8000a2e:	f000 fef5 	bl	800181c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000a32:	f00a ffa5 	bl	800b980 <MX_FATFS_Init>
  MX_USB_OTG_FS_USB_Init();
 8000a36:	f000 ff21 	bl	800187c <MX_USB_OTG_FS_USB_Init>
  MX_TouchGFX_Init();
 8000a3a:	f00e faee 	bl	800f01a <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <main+0x98>)
 8000a40:	1d3c      	adds	r4, r7, #4
 8000a42:	461d      	mov	r5, r3
 8000a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00b fa8b 	bl	800bf70 <osThreadCreate>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <main+0x9c>)
 8000a5e:	601a      	str	r2, [r3, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a60:	f00b fa63 	bl	800bf2a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <main+0x94>
 8000a66:	bf00      	nop
 8000a68:	080285dc 	.word	0x080285dc
 8000a6c:	2000b654 	.word	0x2000b654

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0b4      	sub	sp, #208	; 0xd0
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f026 fe1d 	bl	80276be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	2284      	movs	r2, #132	; 0x84
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f026 fe0e 	bl	80276be <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa2:	f005 f909 	bl	8005cb8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <SystemClock_Config+0x170>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a4d      	ldr	r2, [pc, #308]	; (8000be0 <SystemClock_Config+0x170>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <SystemClock_Config+0x170>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abe:	4b49      	ldr	r3, [pc, #292]	; (8000be4 <SystemClock_Config+0x174>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a48      	ldr	r2, [pc, #288]	; (8000be4 <SystemClock_Config+0x174>)
 8000ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	4b46      	ldr	r3, [pc, #280]	; (8000be4 <SystemClock_Config+0x174>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ad6:	2309      	movs	r3, #9
 8000ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000af8:	2319      	movs	r3, #25
 8000afa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000afe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b0c:	2309      	movs	r3, #9
 8000b0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 f9f0 	bl	8005efc <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b22:	f001 f9b5 	bl	8001e90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b26:	f005 f8d7 	bl	8005cd8 <HAL_PWREx_EnableOverDrive>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b30:	f001 f9ae 	bl	8001e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b5a:	2106      	movs	r1, #6
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f005 fc71 	bl	8006444 <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000b68:	f001 f992 	bl	8001e90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <SystemClock_Config+0x178>)
 8000b6e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000b80:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b84:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000b86:	2305      	movs	r3, #5
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000baa:	2300      	movs	r3, #0
 8000bac:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000bb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc4:	f107 0308 	add.w	r3, r7, #8
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f005 fe3f 	bl	800684c <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x168>
  {
    Error_Handler();
 8000bd4:	f001 f95c 	bl	8001e90 <Error_Handler>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	37d0      	adds	r7, #208	; 0xd0
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40007000 	.word	0x40007000
 8000be8:	01b14828 	.word	0x01b14828

08000bec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <MX_ADC3_Init+0x9c>)
 8000c02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c0a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <MX_ADC3_Init+0xa0>)
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c4e:	f002 fa53 	bl	80030f8 <HAL_ADC_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c58:	f001 f91a 	bl	8001e90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c6e:	f002 fa87 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c78:	f001 f90a 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000ba34 	.word	0x2000ba34
 8000c88:	40012200 	.word	0x40012200
 8000c8c:	0f000001 	.word	0x0f000001

08000c90 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <MX_CRC_Init+0x40>)
 8000c98:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000cba:	f002 fdb7 	bl	800382c <HAL_CRC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000cc4:	f001 f8e4 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2000b864 	.word	0x2000b864
 8000cd0:	40023000 	.word	0x40023000

08000cd4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cda:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <MX_DCMI_Init+0x64>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d22:	f002 fe6d 	bl	8003a00 <HAL_DCMI_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000d2c:	f001 f8b0 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000ba7c 	.word	0x2000ba7c
 8000d38:	50050000 	.word	0x50050000

08000d3c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <MX_DMA2D_Init+0x60>)
 8000d44:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d72:	f002 ff7b 	bl	8003c6c <HAL_DMA2D_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d7c:	f001 f888 	bl	8001e90 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d80:	2101      	movs	r1, #1
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d84:	f003 fa3c 	bl	8004200 <HAL_DMA2D_ConfigLayer>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d8e:	f001 f87f 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000bb6c 	.word	0x2000bb6c
 8000d9c:	4002b000 	.word	0x4002b000

08000da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <MX_I2C1_Init+0x78>)
 8000da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dac:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <MX_I2C1_Init+0x7c>)
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dda:	480e      	ldr	r0, [pc, #56]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000ddc:	f003 fe24 	bl	8004a28 <HAL_I2C_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000de6:	f001 f853 	bl	8001e90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dee:	f004 fb33 	bl	8005458 <HAL_I2CEx_ConfigAnalogFilter>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000df8:	f001 f84a 	bl	8001e90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000e00:	f004 fb75 	bl	80054ee <HAL_I2CEx_ConfigDigitalFilter>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f001 f841 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000b818 	.word	0x2000b818
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	00c0eaff 	.word	0x00c0eaff

08000e20 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e26:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <MX_I2C3_Init+0x78>)
 8000e28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <MX_I2C3_Init+0x7c>)
 8000e2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e5a:	480e      	ldr	r0, [pc, #56]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e5c:	f003 fde4 	bl	8004a28 <HAL_I2C_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e66:	f001 f813 	bl	8001e90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e6e:	f004 faf3 	bl	8005458 <HAL_I2CEx_ConfigAnalogFilter>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e78:	f001 f80a 	bl	8001e90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e80:	f004 fb35 	bl	80054ee <HAL_I2CEx_ConfigDigitalFilter>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e8a:	f001 f801 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000b658 	.word	0x2000b658
 8000e98:	40005c00 	.word	0x40005c00
 8000e9c:	00c0eaff 	.word	0x00c0eaff

08000ea0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b09a      	sub	sp, #104	; 0x68
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ea6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eaa:	2234      	movs	r2, #52	; 0x34
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f026 fc05 	bl	80276be <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2234      	movs	r2, #52	; 0x34
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f026 fbff 	bl	80276be <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ec0:	4b50      	ldr	r3, [pc, #320]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ec2:	4a51      	ldr	r2, [pc, #324]	; (8001008 <MX_LTDC_Init+0x168>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ec6:	4b4f      	ldr	r3, [pc, #316]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ecc:	4b4d      	ldr	r3, [pc, #308]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ed2:	4b4c      	ldr	r3, [pc, #304]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ed8:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <MX_LTDC_Init+0x164>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000ede:	4b49      	ldr	r3, [pc, #292]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ee0:	2228      	movs	r2, #40	; 0x28
 8000ee2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000ee4:	4b47      	ldr	r3, [pc, #284]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ee6:	2209      	movs	r2, #9
 8000ee8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000eea:	4b46      	ldr	r3, [pc, #280]	; (8001004 <MX_LTDC_Init+0x164>)
 8000eec:	2235      	movs	r2, #53	; 0x35
 8000eee:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ef0:	4b44      	ldr	r3, [pc, #272]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ef2:	220b      	movs	r2, #11
 8000ef4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ef6:	4b43      	ldr	r3, [pc, #268]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ef8:	f240 2215 	movw	r2, #533	; 0x215
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f00:	f240 121b 	movw	r2, #283	; 0x11b
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000f06:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f08:	f240 2235 	movw	r2, #565	; 0x235
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f10:	f240 121d 	movw	r2, #285	; 0x11d
 8000f14:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f16:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f2e:	4835      	ldr	r0, [pc, #212]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f30:	f004 fb2a 	bl	8005588 <HAL_LTDC_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000f3a:	f000 ffa9 	bl	8001e90 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000f42:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000f4c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f50:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000f52:	2301      	movs	r3, #1
 8000f54:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000f56:	23ff      	movs	r3, #255	; 0xff
 8000f58:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f62:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000f64:	2305      	movs	r3, #5
 8000f66:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f68:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000f6c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000f6e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f72:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000f74:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f78:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f90:	2200      	movs	r2, #0
 8000f92:	4619      	mov	r1, r3
 8000f94:	481b      	ldr	r0, [pc, #108]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f96:	f004 fc7f 	bl	8005898 <HAL_LTDC_ConfigLayer>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000fa0:	f000 ff76 	bl	8001e90 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc0:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_LTDC_Init+0x164>)
 8000fec:	f004 fc54 	bl	8005898 <HAL_LTDC_ConfigLayer>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000ff6:	f000 ff4b 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3768      	adds	r7, #104	; 0x68
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000b98c 	.word	0x2000b98c
 8001008:	40016800 	.word	0x40016800

0800100c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001012:	4a13      	ldr	r2, [pc, #76]	; (8001060 <MX_QUADSPI_Init+0x54>)
 8001014:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001018:	22ff      	movs	r2, #255	; 0xff
 800101a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_QUADSPI_Init+0x50>)
 800101e:	2201      	movs	r2, #1
 8001020:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_QUADSPI_Init+0x50>)
 800102a:	2201      	movs	r2, #1
 800102c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_QUADSPI_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001048:	f004 fe96 	bl	8005d78 <HAL_QSPI_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001052:	f000 ff1d 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000bc60 	.word	0x2000bc60
 8001060:	a0001000 	.word	0xa0001000

08001064 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b092      	sub	sp, #72	; 0x48
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800106a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	222c      	movs	r2, #44	; 0x2c
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f026 fb19 	bl	80276be <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <MX_RTC_Init+0x144>)
 800108e:	4a47      	ldr	r2, [pc, #284]	; (80011ac <MX_RTC_Init+0x148>)
 8001090:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001092:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <MX_RTC_Init+0x144>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001098:	4b43      	ldr	r3, [pc, #268]	; (80011a8 <MX_RTC_Init+0x144>)
 800109a:	227f      	movs	r2, #127	; 0x7f
 800109c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800109e:	4b42      	ldr	r3, [pc, #264]	; (80011a8 <MX_RTC_Init+0x144>)
 80010a0:	22ff      	movs	r2, #255	; 0xff
 80010a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010a4:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <MX_RTC_Init+0x144>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010aa:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <MX_RTC_Init+0x144>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010b0:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <MX_RTC_Init+0x144>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010b6:	483c      	ldr	r0, [pc, #240]	; (80011a8 <MX_RTC_Init+0x144>)
 80010b8:	f006 f8ea 	bl	8007290 <HAL_RTC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80010c2:	f000 fee5 	bl	8001e90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010d8:	2300      	movs	r3, #0
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e4:	2201      	movs	r2, #1
 80010e6:	4619      	mov	r1, r3
 80010e8:	482f      	ldr	r0, [pc, #188]	; (80011a8 <MX_RTC_Init+0x144>)
 80010ea:	f006 f94d 	bl	8007388 <HAL_RTC_SetTime>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80010f4:	f000 fecc 	bl	8001e90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80010fe:	2301      	movs	r3, #1
 8001100:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800110a:	2300      	movs	r3, #0
 800110c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	4823      	ldr	r0, [pc, #140]	; (80011a8 <MX_RTC_Init+0x144>)
 800111a:	f006 f9f3 	bl	8007504 <HAL_RTC_SetDate>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001124:	f000 feb4 	bl	8001e90 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001128:	2300      	movs	r3, #0
 800112a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800112c:	2300      	movs	r3, #0
 800112e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001130:	2300      	movs	r3, #0
 8001132:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800114c:	2301      	movs	r3, #1
 800114e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	2201      	movs	r2, #1
 800115c:	4619      	mov	r1, r3
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <MX_RTC_Init+0x144>)
 8001160:	f006 fa78 	bl	8007654 <HAL_RTC_SetAlarm>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800116a:	f000 fe91 	bl	8001e90 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800116e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <MX_RTC_Init+0x144>)
 800117c:	f006 fa6a 	bl	8007654 <HAL_RTC_SetAlarm>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001186:	f000 fe83 	bl	8001e90 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800118a:	2202      	movs	r2, #2
 800118c:	2100      	movs	r1, #0
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_RTC_Init+0x144>)
 8001190:	f006 fbea 	bl	8007968 <HAL_RTCEx_SetTimeStamp>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800119a:	f000 fe79 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3748      	adds	r7, #72	; 0x48
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000bacc 	.word	0x2000bacc
 80011ac:	40002800 	.word	0x40002800

080011b0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80011b4:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011b6:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <MX_SAI2_Init+0x140>)
 80011b8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80011c0:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80011c6:	4b49      	ldr	r3, [pc, #292]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011c8:	2240      	movs	r2, #64	; 0x40
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011cc:	4b47      	ldr	r3, [pc, #284]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011d2:	4b46      	ldr	r3, [pc, #280]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80011d8:	4b44      	ldr	r3, [pc, #272]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011de:	4b43      	ldr	r3, [pc, #268]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80011e4:	4b41      	ldr	r3, [pc, #260]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011ea:	4b40      	ldr	r3, [pc, #256]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80011f0:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011f2:	4a40      	ldr	r2, [pc, #256]	; (80012f4 <MX_SAI2_Init+0x144>)
 80011f4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011fc:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001208:	4b38      	ldr	r3, [pc, #224]	; (80012ec <MX_SAI2_Init+0x13c>)
 800120a:	2200      	movs	r2, #0
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001210:	2208      	movs	r2, #8
 8001212:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001214:	4b35      	ldr	r3, [pc, #212]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001216:	2201      	movs	r2, #1
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <MX_SAI2_Init+0x13c>)
 800121c:	2200      	movs	r2, #0
 800121e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001220:	4b32      	ldr	r3, [pc, #200]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001222:	2200      	movs	r2, #0
 8001224:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001228:	2200      	movs	r2, #0
 800122a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <MX_SAI2_Init+0x13c>)
 800122e:	2200      	movs	r2, #0
 8001230:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001232:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001234:	2200      	movs	r2, #0
 8001236:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <MX_SAI2_Init+0x13c>)
 800123a:	2201      	movs	r2, #1
 800123c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001240:	2200      	movs	r2, #0
 8001242:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001244:	4829      	ldr	r0, [pc, #164]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001246:	f006 fbe5 	bl	8007a14 <HAL_SAI_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001250:	f000 fe1e 	bl	8001e90 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001256:	4a29      	ldr	r2, [pc, #164]	; (80012fc <MX_SAI2_Init+0x14c>)
 8001258:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <MX_SAI2_Init+0x148>)
 800125c:	2200      	movs	r2, #0
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001262:	2203      	movs	r2, #3
 8001264:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_SAI2_Init+0x148>)
 800126e:	2200      	movs	r2, #0
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001274:	2200      	movs	r2, #0
 8001276:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_SAI2_Init+0x148>)
 800127a:	2201      	movs	r2, #1
 800127c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_SAI2_Init+0x148>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001298:	2200      	movs	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_SAI2_Init+0x148>)
 800129e:	2200      	movs	r2, #0
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012a4:	2208      	movs	r2, #8
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012bc:	2200      	movs	r2, #0
 80012be:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012da:	f006 fb9b 	bl	8007a14 <HAL_SAI_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80012e4:	f000 fdd4 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000b794 	.word	0x2000b794
 80012f0:	40015c04 	.word	0x40015c04
 80012f4:	0002ee00 	.word	0x0002ee00
 80012f8:	2000b5d0 	.word	0x2000b5d0
 80012fc:	40015c24 	.word	0x40015c24

08001300 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 8001306:	4a0d      	ldr	r2, [pc, #52]	; (800133c <MX_SDMMC1_SD_Init+0x3c>)
 8001308:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	2000b888 	.word	0x2000b888
 800133c:	40012c00 	.word	0x40012c00

08001340 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001346:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800134a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800138a:	f007 fdd7 	bl	8008f3c <HAL_SPDIFRX_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001394:	f000 fd7c 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000b748 	.word	0x2000b748

080013a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_SPI2_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <MX_SPI2_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_SPI2_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_SPI2_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_SPI2_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_SPI2_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_SPI2_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_SPI2_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_SPI2_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ee:	2207      	movs	r2, #7
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_SPI2_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_SPI2_Init+0x74>)
 80013fa:	2208      	movs	r2, #8
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_SPI2_Init+0x74>)
 8001400:	f007 fdf8 	bl	8008ff4 <HAL_SPI_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800140a:	f000 fd41 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000b6a4 	.word	0x2000b6a4
 8001418:	40003800 	.word	0x40003800

0800141c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	; 0x38
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001454:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <MX_TIM2_Init+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001464:	f04f 32ff 	mov.w	r2, #4294967295
 8001468:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <MX_TIM2_Init+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001476:	4823      	ldr	r0, [pc, #140]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001478:	f007 fe4e 	bl	8009118 <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001482:	f000 fd05 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800148c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001490:	4619      	mov	r1, r3
 8001492:	481c      	ldr	r0, [pc, #112]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001494:	f008 f8f8 	bl	8009688 <HAL_TIM_ConfigClockSource>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800149e:	f000 fcf7 	bl	8001e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014a2:	4818      	ldr	r0, [pc, #96]	; (8001504 <MX_TIM2_Init+0xe8>)
 80014a4:	f007 fe8e 	bl	80091c4 <HAL_TIM_PWM_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014ae:	f000 fcef 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4810      	ldr	r0, [pc, #64]	; (8001504 <MX_TIM2_Init+0xe8>)
 80014c2:	f008 fd5b 	bl	8009f7c <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014cc:	f000 fce0 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d0:	2360      	movs	r3, #96	; 0x60
 80014d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	2200      	movs	r2, #0
 80014e4:	4619      	mov	r1, r3
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <MX_TIM2_Init+0xe8>)
 80014e8:	f007 ffb6 	bl	8009458 <HAL_TIM_PWM_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014f2:	f000 fccd 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <MX_TIM2_Init+0xe8>)
 80014f8:	f001 fa18 	bl	800292c <HAL_TIM_MspPostInit>

}
 80014fc:	bf00      	nop
 80014fe:	3738      	adds	r7, #56	; 0x38
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000bbac 	.word	0x2000bbac

08001508 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800153c:	4a2d      	ldr	r2, [pc, #180]	; (80015f4 <MX_TIM3_Init+0xec>)
 800153e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800154e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001552:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001560:	4823      	ldr	r0, [pc, #140]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001562:	f007 fdd9 	bl	8009118 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800156c:	f000 fc90 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	4619      	mov	r1, r3
 800157c:	481c      	ldr	r0, [pc, #112]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800157e:	f008 f883 	bl	8009688 <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001588:	f000 fc82 	bl	8001e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800158c:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800158e:	f007 fe19 	bl	80091c4 <HAL_TIM_PWM_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001598:	f000 fc7a 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4811      	ldr	r0, [pc, #68]	; (80015f0 <MX_TIM3_Init+0xe8>)
 80015ac:	f008 fce6 	bl	8009f7c <HAL_TIMEx_MasterConfigSynchronization>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015b6:	f000 fc6b 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ba:	2360      	movs	r3, #96	; 0x60
 80015bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ca:	463b      	mov	r3, r7
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM3_Init+0xe8>)
 80015d2:	f007 ff41 	bl	8009458 <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80015dc:	f000 fc58 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM3_Init+0xe8>)
 80015e2:	f001 f9a3 	bl	800292c <HAL_TIM_MspPostInit>

}
 80015e6:	bf00      	nop
 80015e8:	3738      	adds	r7, #56	; 0x38
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000b94c 	.word	0x2000b94c
 80015f4:	40000400 	.word	0x40000400

080015f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800162c:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <MX_TIM5_Init+0xec>)
 800162e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <MX_TIM5_Init+0xe8>)
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <MX_TIM5_Init+0xe8>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800163e:	f04f 32ff 	mov.w	r2, #4294967295
 8001642:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <MX_TIM5_Init+0xe8>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001650:	4823      	ldr	r0, [pc, #140]	; (80016e0 <MX_TIM5_Init+0xe8>)
 8001652:	f007 fd61 	bl	8009118 <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800165c:	f000 fc18 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166a:	4619      	mov	r1, r3
 800166c:	481c      	ldr	r0, [pc, #112]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800166e:	f008 f80b 	bl	8009688 <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001678:	f000 fc0a 	bl	8001e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800167c:	4818      	ldr	r0, [pc, #96]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800167e:	f007 fda1 	bl	80091c4 <HAL_TIM_PWM_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001688:	f000 fc02 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800169c:	f008 fc6e 	bl	8009f7c <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80016a6:	f000 fbf3 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016aa:	2360      	movs	r3, #96	; 0x60
 80016ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	220c      	movs	r2, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM5_Init+0xe8>)
 80016c2:	f007 fec9 	bl	8009458 <HAL_TIM_PWM_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80016cc:	f000 fbe0 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MX_TIM5_Init+0xe8>)
 80016d2:	f001 f92b 	bl	800292c <HAL_TIM_MspPostInit>

}
 80016d6:	bf00      	nop
 80016d8:	3738      	adds	r7, #56	; 0x38
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000b90c 	.word	0x2000b90c
 80016e4:	40000c00 	.word	0x40000c00

080016e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001708:	4a20      	ldr	r2, [pc, #128]	; (800178c <MX_TIM8_Init+0xa4>)
 800170a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <MX_TIM8_Init+0xa0>)
 800170e:	2200      	movs	r2, #0
 8001710:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <MX_TIM8_Init+0xa0>)
 800171a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_TIM8_Init+0xa0>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001732:	4815      	ldr	r0, [pc, #84]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001734:	f007 fcf0 	bl	8009118 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800173e:	f000 fba7 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4619      	mov	r1, r3
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001750:	f007 ff9a 	bl	8009688 <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800175a:	f000 fb99 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001770:	f008 fc04 	bl	8009f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800177a:	f000 fb89 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000b708 	.word	0x2000b708
 800178c:	40010400 	.word	0x40010400

08001790 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_TIM12_Init+0x84>)
 80017aa:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <MX_TIM12_Init+0x88>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_TIM12_Init+0x84>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_TIM12_Init+0x84>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_TIM12_Init+0x84>)
 80017bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_TIM12_Init+0x84>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_TIM12_Init+0x84>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80017ce:	4811      	ldr	r0, [pc, #68]	; (8001814 <MX_TIM12_Init+0x84>)
 80017d0:	f007 fcf8 	bl	80091c4 <HAL_TIM_PWM_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80017da:	f000 fb59 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017de:	2360      	movs	r3, #96	; 0x60
 80017e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	4619      	mov	r1, r3
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <MX_TIM12_Init+0x84>)
 80017f6:	f007 fe2f 	bl	8009458 <HAL_TIM_PWM_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001800:	f000 fb46 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001804:	4803      	ldr	r0, [pc, #12]	; (8001814 <MX_TIM12_Init+0x84>)
 8001806:	f001 f891 	bl	800292c <HAL_TIM_MspPostInit>

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000bbec 	.word	0x2000bbec
 8001818:	40001800 	.word	0x40001800

0800181c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <MX_USART6_UART_Init+0x5c>)
 8001824:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_USART6_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_USART6_UART_Init+0x58>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_USART6_UART_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001860:	f008 fc38 	bl	800a0d4 <HAL_UART_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800186a:	f000 fb11 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000baec 	.word	0x2000baec
 8001878:	40011400 	.word	0x40011400

0800187c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	615a      	str	r2, [r3, #20]
 80018a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80018a4:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018a6:	4a4d      	ldr	r2, [pc, #308]	; (80019dc <MX_FMC_Init+0x150>)
 80018a8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80018aa:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80018b0:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80018b6:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018b8:	2204      	movs	r2, #4
 80018ba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80018bc:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018be:	2210      	movs	r2, #16
 80018c0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80018c2:	4b45      	ldr	r3, [pc, #276]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018c4:	2240      	movs	r2, #64	; 0x40
 80018c6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80018c8:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018ca:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80018ce:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80018d0:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018dc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80018de:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80018e6:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80018ec:	2302      	movs	r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80018f0:	2307      	movs	r3, #7
 80018f2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80018f4:	2304      	movs	r3, #4
 80018f6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80018f8:	2307      	movs	r3, #7
 80018fa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80018fc:	2303      	movs	r3, #3
 80018fe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001900:	2302      	movs	r3, #2
 8001902:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001904:	2302      	movs	r3, #2
 8001906:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4832      	ldr	r0, [pc, #200]	; (80019d8 <MX_FMC_Init+0x14c>)
 800190e:	f007 fa95 	bl	8008e3c <HAL_SDRAM_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001918:	f000 faba 	bl	8001e90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  __IO uint32_t tmpmrd = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	603b      	str	r3, [r7, #0]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001920:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <MX_FMC_Init+0x154>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001926:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <MX_FMC_Init+0x154>)
 8001928:	2210      	movs	r2, #16
 800192a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800192c:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <MX_FMC_Init+0x154>)
 800192e:	2201      	movs	r2, #1
 8001930:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <MX_FMC_Init+0x154>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193c:	4928      	ldr	r1, [pc, #160]	; (80019e0 <MX_FMC_Init+0x154>)
 800193e:	4826      	ldr	r0, [pc, #152]	; (80019d8 <MX_FMC_Init+0x14c>)
 8001940:	f007 fab0 	bl	8008ea4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001944:	2001      	movs	r0, #1
 8001946:	f001 fbb5 	bl	80030b4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <MX_FMC_Init+0x154>)
 800194c:	2202      	movs	r2, #2
 800194e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001950:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <MX_FMC_Init+0x154>)
 8001952:	2210      	movs	r2, #16
 8001954:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <MX_FMC_Init+0x154>)
 8001958:	2201      	movs	r2, #1
 800195a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800195c:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <MX_FMC_Init+0x154>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001966:	491e      	ldr	r1, [pc, #120]	; (80019e0 <MX_FMC_Init+0x154>)
 8001968:	481b      	ldr	r0, [pc, #108]	; (80019d8 <MX_FMC_Init+0x14c>)
 800196a:	f007 fa9b 	bl	8008ea4 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <MX_FMC_Init+0x154>)
 8001970:	2203      	movs	r2, #3
 8001972:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <MX_FMC_Init+0x154>)
 8001976:	2210      	movs	r2, #16
 8001978:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <MX_FMC_Init+0x154>)
 800197c:	2208      	movs	r2, #8
 800197e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <MX_FMC_Init+0x154>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800198a:	4915      	ldr	r1, [pc, #84]	; (80019e0 <MX_FMC_Init+0x154>)
 800198c:	4812      	ldr	r0, [pc, #72]	; (80019d8 <MX_FMC_Init+0x14c>)
 800198e:	f007 fa89 	bl	8008ea4 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001992:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001996:	603b      	str	r3, [r7, #0]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
           SDRAM_MODEREG_CAS_LATENCY_3            | \
           SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_FMC_Init+0x154>)
 800199a:	2204      	movs	r2, #4
 800199c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_FMC_Init+0x154>)
 80019a0:	2210      	movs	r2, #16
 80019a2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_FMC_Init+0x154>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <MX_FMC_Init+0x154>)
 80019ae:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80019b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b4:	490a      	ldr	r1, [pc, #40]	; (80019e0 <MX_FMC_Init+0x154>)
 80019b6:	4808      	ldr	r0, [pc, #32]	; (80019d8 <MX_FMC_Init+0x14c>)
 80019b8:	f007 fa74 	bl	8008ea4 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80019bc:	f240 712b 	movw	r1, #1835	; 0x72b
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_FMC_Init+0x14c>)
 80019c2:	f007 fa9a 	bl	8008efa <HAL_SDRAM_ProgramRefreshRate>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 80019c6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80019ca:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019ce:	601a      	str	r2, [r3, #0]

  /* USER CODE END FMC_Init 2 */
}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000bc2c 	.word	0x2000bc2c
 80019dc:	a0000140 	.word	0xa0000140
 80019e0:	20000378 	.word	0x20000378

080019e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b090      	sub	sp, #64	; 0x40
 80019e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019fa:	4baf      	ldr	r3, [pc, #700]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4aae      	ldr	r2, [pc, #696]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a00:	f043 0310 	orr.w	r3, r3, #16
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4bac      	ldr	r3, [pc, #688]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a12:	4ba9      	ldr	r3, [pc, #676]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4aa8      	ldr	r2, [pc, #672]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4ba6      	ldr	r3, [pc, #664]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4ba3      	ldr	r3, [pc, #652]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4aa2      	ldr	r2, [pc, #648]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4ba0      	ldr	r3, [pc, #640]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a42:	4b9d      	ldr	r3, [pc, #628]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a9c      	ldr	r2, [pc, #624]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b9a      	ldr	r3, [pc, #616]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	4b97      	ldr	r3, [pc, #604]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a96      	ldr	r2, [pc, #600]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b94      	ldr	r3, [pc, #592]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	4b91      	ldr	r3, [pc, #580]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a90      	ldr	r2, [pc, #576]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b8e      	ldr	r3, [pc, #568]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a8a      	ldr	r2, [pc, #552]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001aa2:	4b85      	ldr	r3, [pc, #532]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a84      	ldr	r2, [pc, #528]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001aba:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a7e      	ldr	r2, [pc, #504]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b7c      	ldr	r3, [pc, #496]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ad2:	4b79      	ldr	r3, [pc, #484]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a78      	ldr	r2, [pc, #480]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ad8:	f043 0320 	orr.w	r3, r3, #32
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a72      	ldr	r2, [pc, #456]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	2120      	movs	r1, #32
 8001b06:	486d      	ldr	r0, [pc, #436]	; (8001cbc <MX_GPIO_Init+0x2d8>)
 8001b08:	f002 ff74 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	210c      	movs	r1, #12
 8001b10:	486b      	ldr	r0, [pc, #428]	; (8001cc0 <MX_GPIO_Init+0x2dc>)
 8001b12:	f002 ff6f 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	2108      	movs	r1, #8
 8001b1a:	486a      	ldr	r0, [pc, #424]	; (8001cc4 <MX_GPIO_Init+0x2e0>)
 8001b1c:	f002 ff6a 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b26:	4866      	ldr	r0, [pc, #408]	; (8001cc0 <MX_GPIO_Init+0x2dc>)
 8001b28:	f002 ff64 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b32:	4865      	ldr	r0, [pc, #404]	; (8001cc8 <MX_GPIO_Init+0x2e4>)
 8001b34:	f002 ff5e 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	21c8      	movs	r1, #200	; 0xc8
 8001b3c:	4863      	ldr	r0, [pc, #396]	; (8001ccc <MX_GPIO_Init+0x2e8>)
 8001b3e:	f002 ff59 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001b42:	2308      	movs	r3, #8
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b46:	2300      	movs	r3, #0
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b52:	4619      	mov	r1, r3
 8001b54:	485e      	ldr	r0, [pc, #376]	; (8001cd0 <MX_GPIO_Init+0x2ec>)
 8001b56:	f002 fc81 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001b5a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b6c:	230b      	movs	r3, #11
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4855      	ldr	r0, [pc, #340]	; (8001ccc <MX_GPIO_Init+0x2e8>)
 8001b78:	f002 fc70 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001b7c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b8e:	230a      	movs	r3, #10
 8001b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b96:	4619      	mov	r1, r3
 8001b98:	484e      	ldr	r0, [pc, #312]	; (8001cd4 <MX_GPIO_Init+0x2f0>)
 8001b9a:	f002 fc5f 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bae:	2307      	movs	r3, #7
 8001bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4846      	ldr	r0, [pc, #280]	; (8001cd4 <MX_GPIO_Init+0x2f0>)
 8001bba:	f002 fc4f 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4841      	ldr	r0, [pc, #260]	; (8001cd8 <MX_GPIO_Init+0x2f4>)
 8001bd4:	f002 fc42 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001bd8:	2340      	movs	r3, #64	; 0x40
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bdc:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <MX_GPIO_Init+0x2f8>)
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be8:	4619      	mov	r1, r3
 8001bea:	4834      	ldr	r0, [pc, #208]	; (8001cbc <MX_GPIO_Init+0x2d8>)
 8001bec:	f002 fc36 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001bf0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c02:	230a      	movs	r3, #10
 8001c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4834      	ldr	r0, [pc, #208]	; (8001ce0 <MX_GPIO_Init+0x2fc>)
 8001c0e:	f002 fc25 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c12:	2320      	movs	r3, #32
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	4824      	ldr	r0, [pc, #144]	; (8001cbc <MX_GPIO_Init+0x2d8>)
 8001c2a:	f002 fc17 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001c2e:	f241 030c 	movw	r3, #4108	; 0x100c
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c44:	4619      	mov	r1, r3
 8001c46:	481e      	ldr	r0, [pc, #120]	; (8001cc0 <MX_GPIO_Init+0x2dc>)
 8001c48:	f002 fc08 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4820      	ldr	r0, [pc, #128]	; (8001ce4 <MX_GPIO_Init+0x300>)
 8001c62:	f002 fbfb 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001c66:	2308      	movs	r3, #8
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <MX_GPIO_Init+0x2e0>)
 8001c7e:	f002 fbed 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c82:	2310      	movs	r3, #16
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c92:	4619      	mov	r1, r3
 8001c94:	4809      	ldr	r0, [pc, #36]	; (8001cbc <MX_GPIO_Init+0x2d8>)
 8001c96:	f002 fbe1 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001c9a:	f248 0304 	movw	r3, #32772	; 0x8004
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <MX_GPIO_Init+0x2e4>)
 8001cb0:	f002 fbd4 	bl	800445c <HAL_GPIO_Init>
 8001cb4:	e018      	b.n	8001ce8 <MX_GPIO_Init+0x304>
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40022800 	.word	0x40022800
 8001cc8:	40021c00 	.word	0x40021c00
 8001ccc:	40021800 	.word	0x40021800
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40022400 	.word	0x40022400
 8001cdc:	10120000 	.word	0x10120000
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020800 	.word	0x40020800

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfe:	4619      	mov	r1, r3
 8001d00:	484f      	ldr	r0, [pc, #316]	; (8001e40 <MX_GPIO_Init+0x45c>)
 8001d02:	f002 fbab 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d20:	4619      	mov	r1, r3
 8001d22:	4848      	ldr	r0, [pc, #288]	; (8001e44 <MX_GPIO_Init+0x460>)
 8001d24:	f002 fb9a 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d42:	4619      	mov	r1, r3
 8001d44:	483f      	ldr	r0, [pc, #252]	; (8001e44 <MX_GPIO_Init+0x460>)
 8001d46:	f002 fb89 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d50:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <MX_GPIO_Init+0x464>)
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	483b      	ldr	r0, [pc, #236]	; (8001e4c <MX_GPIO_Init+0x468>)
 8001d60:	f002 fb7c 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d64:	2310      	movs	r3, #16
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d74:	230a      	movs	r3, #10
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4830      	ldr	r0, [pc, #192]	; (8001e40 <MX_GPIO_Init+0x45c>)
 8001d80:	f002 fb6c 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001d84:	23c8      	movs	r3, #200	; 0xc8
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	482d      	ldr	r0, [pc, #180]	; (8001e50 <MX_GPIO_Init+0x46c>)
 8001d9c:	f002 fb5e 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001da0:	2305      	movs	r3, #5
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001db0:	230a      	movs	r3, #10
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db8:	4619      	mov	r1, r3
 8001dba:	4826      	ldr	r0, [pc, #152]	; (8001e54 <MX_GPIO_Init+0x470>)
 8001dbc:	f002 fb4e 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001dc0:	2332      	movs	r3, #50	; 0x32
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dd0:	230b      	movs	r3, #11
 8001dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd8:	4619      	mov	r1, r3
 8001dda:	481e      	ldr	r0, [pc, #120]	; (8001e54 <MX_GPIO_Init+0x470>)
 8001ddc:	f002 fb3e 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001de0:	2304      	movs	r3, #4
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df0:	4619      	mov	r1, r3
 8001df2:	4817      	ldr	r0, [pc, #92]	; (8001e50 <MX_GPIO_Init+0x46c>)
 8001df4:	f002 fb32 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001df8:	2386      	movs	r3, #134	; 0x86
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e08:	230b      	movs	r3, #11
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e10:	4619      	mov	r1, r3
 8001e12:	480c      	ldr	r0, [pc, #48]	; (8001e44 <MX_GPIO_Init+0x460>)
 8001e14:	f002 fb22 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001e18:	2328      	movs	r3, #40	; 0x28
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e28:	230a      	movs	r3, #10
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e30:	4619      	mov	r1, r3
 8001e32:	4804      	ldr	r0, [pc, #16]	; (8001e44 <MX_GPIO_Init+0x460>)
 8001e34:	f002 fb12 	bl	800445c <HAL_GPIO_Init>

}
 8001e38:	bf00      	nop
 8001e3a:	3740      	adds	r7, #64	; 0x40
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021c00 	.word	0x40021c00
 8001e44:	40020000 	.word	0x40020000
 8001e48:	10120000 	.word	0x10120000
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	40021800 	.word	0x40021800
 8001e54:	40020800 	.word	0x40020800

08001e58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001e60:	f00d f8e1 	bl	800f026 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f00a f8cf 	bl	800c008 <osDelay>
 8001e6a:	e7fb      	b.n	8001e64 <StartDefaultTask+0xc>

08001e6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e7e:	f001 f8f9 	bl	8003074 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40001000 	.word	0x40001000

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_MspInit+0x4c>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <HAL_MspInit+0x4c>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_MspInit+0x4c>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_MspInit+0x4c>)
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_MspInit+0x4c>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	210f      	movs	r1, #15
 8001eda:	f06f 0001 	mvn.w	r0, #1
 8001ede:	f001 fc6d 	bl	80037bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <HAL_ADC_MspInit+0xa4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d13c      	bne.n	8001f8c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f12:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a20      	ldr	r2, [pc, #128]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f30:	f043 0320 	orr.w	r3, r3, #32
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001f5a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001f5e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f60:	2303      	movs	r3, #3
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	480b      	ldr	r0, [pc, #44]	; (8001f9c <HAL_ADC_MspInit+0xac>)
 8001f70:	f002 fa74 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001f74:	2301      	movs	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <HAL_ADC_MspInit+0xb0>)
 8001f88:	f002 fa68 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40012200 	.word	0x40012200
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40021400 	.word	0x40021400
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_CRC_MspInit+0x38>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10b      	bne.n	8001fce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_CRC_MspInit+0x3c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_CRC_MspInit+0x3c>)
 8001fbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_CRC_MspInit+0x3c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023000 	.word	0x40023000
 8001fe0:	40023800 	.word	0x40023800

08001fe4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	; 0x38
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a50      	ldr	r2, [pc, #320]	; (8002144 <HAL_DCMI_MspInit+0x160>)
 8002002:	4293      	cmp	r3, r2
 8002004:	f040 809a 	bne.w	800213c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002008:	4b4f      	ldr	r3, [pc, #316]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	4a4e      	ldr	r2, [pc, #312]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6353      	str	r3, [r2, #52]	; 0x34
 8002014:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	623b      	str	r3, [r7, #32]
 800201e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002020:	4b49      	ldr	r3, [pc, #292]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6313      	str	r3, [r2, #48]	; 0x30
 800202c:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002038:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800203e:	f043 0308 	orr.w	r3, r3, #8
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b40      	ldr	r3, [pc, #256]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002050:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	4a3c      	ldr	r2, [pc, #240]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205a:	6313      	str	r3, [r2, #48]	; 0x30
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002068:	4b37      	ldr	r3, [pc, #220]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	4a36      	ldr	r2, [pc, #216]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800206e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002072:	6313      	str	r3, [r2, #48]	; 0x30
 8002074:	4b34      	ldr	r3, [pc, #208]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	4b31      	ldr	r3, [pc, #196]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	4a30      	ldr	r2, [pc, #192]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6313      	str	r3, [r2, #48]	; 0x30
 800208c:	4b2e      	ldr	r3, [pc, #184]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002098:	2360      	movs	r3, #96	; 0x60
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020a8:	230d      	movs	r3, #13
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	4826      	ldr	r0, [pc, #152]	; (800214c <HAL_DCMI_MspInit+0x168>)
 80020b4:	f002 f9d2 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80020b8:	2308      	movs	r3, #8
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020c8:	230d      	movs	r3, #13
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d0:	4619      	mov	r1, r3
 80020d2:	481f      	ldr	r0, [pc, #124]	; (8002150 <HAL_DCMI_MspInit+0x16c>)
 80020d4:	f002 f9c2 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80020d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020ea:	230d      	movs	r3, #13
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80020ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f2:	4619      	mov	r1, r3
 80020f4:	4817      	ldr	r0, [pc, #92]	; (8002154 <HAL_DCMI_MspInit+0x170>)
 80020f6:	f002 f9b1 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80020fa:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800210c:	230d      	movs	r3, #13
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	4619      	mov	r1, r3
 8002116:	4810      	ldr	r0, [pc, #64]	; (8002158 <HAL_DCMI_MspInit+0x174>)
 8002118:	f002 f9a0 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800211c:	2350      	movs	r3, #80	; 0x50
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800212c:	230d      	movs	r3, #13
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	4619      	mov	r1, r3
 8002136:	4809      	ldr	r0, [pc, #36]	; (800215c <HAL_DCMI_MspInit+0x178>)
 8002138:	f002 f990 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800213c:	bf00      	nop
 800213e:	3738      	adds	r7, #56	; 0x38
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	50050000 	.word	0x50050000
 8002148:	40023800 	.word	0x40023800
 800214c:	40021000 	.word	0x40021000
 8002150:	40020c00 	.word	0x40020c00
 8002154:	40021800 	.word	0x40021800
 8002158:	40021c00 	.word	0x40021c00
 800215c:	40020000 	.word	0x40020000

08002160 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_DMA2D_MspInit+0x44>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d113      	bne.n	800219a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_DMA2D_MspInit+0x48>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <HAL_DMA2D_MspInit+0x48>)
 8002178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_DMA2D_MspInit+0x48>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	205a      	movs	r0, #90	; 0x5a
 8002190:	f001 fb14 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002194:	205a      	movs	r0, #90	; 0x5a
 8002196:	f001 fb2d 	bl	80037f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	4002b000 	.word	0x4002b000
 80021a8:	40023800 	.word	0x40023800

080021ac <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <HAL_DMA2D_MspDeInit+0x2c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d108      	bne.n	80021d0 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <HAL_DMA2D_MspDeInit+0x30>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a06      	ldr	r2, [pc, #24]	; (80021dc <HAL_DMA2D_MspDeInit+0x30>)
 80021c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80021ca:	205a      	movs	r0, #90	; 0x5a
 80021cc:	f001 fb20 	bl	8003810 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	4002b000 	.word	0x4002b000
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	; 0x30
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2f      	ldr	r2, [pc, #188]	; (80022bc <HAL_I2C_MspInit+0xdc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d129      	bne.n	8002256 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a2e      	ldr	r2, [pc, #184]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800221a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800221e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002220:	2312      	movs	r3, #18
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002224:	2301      	movs	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222c:	2304      	movs	r3, #4
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	4823      	ldr	r0, [pc, #140]	; (80022c4 <HAL_I2C_MspInit+0xe4>)
 8002238:	f002 f910 	bl	800445c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002242:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002246:	6413      	str	r3, [r2, #64]	; 0x40
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002254:	e02d      	b.n	80022b2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <HAL_I2C_MspInit+0xe8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d128      	bne.n	80022b2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226a:	6313      	str	r3, [r2, #48]	; 0x30
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002278:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800227e:	2312      	movs	r3, #18
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002282:	2301      	movs	r3, #1
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800228a:	2304      	movs	r3, #4
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	480d      	ldr	r0, [pc, #52]	; (80022cc <HAL_I2C_MspInit+0xec>)
 8002296:	f002 f8e1 	bl	800445c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 80022a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
}
 80022b2:	bf00      	nop
 80022b4:	3730      	adds	r7, #48	; 0x30
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40005400 	.word	0x40005400
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40005c00 	.word	0x40005c00
 80022cc:	40021c00 	.word	0x40021c00

080022d0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_I2C_MspDeInit+0x64>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d110      	bne.n	8002304 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_I2C_MspDeInit+0x68>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_I2C_MspDeInit+0x68>)
 80022e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80022ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f2:	4812      	ldr	r0, [pc, #72]	; (800233c <HAL_I2C_MspDeInit+0x6c>)
 80022f4:	f002 fa5c 	bl	80047b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80022f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022fc:	480f      	ldr	r0, [pc, #60]	; (800233c <HAL_I2C_MspDeInit+0x6c>)
 80022fe:	f002 fa57 	bl	80047b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002302:	e013      	b.n	800232c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_I2C_MspDeInit+0x70>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10e      	bne.n	800232c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_I2C_MspDeInit+0x68>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_I2C_MspDeInit+0x68>)
 8002314:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	4809      	ldr	r0, [pc, #36]	; (8002344 <HAL_I2C_MspDeInit+0x74>)
 800231e:	f002 fa47 	bl	80047b0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002326:	4807      	ldr	r0, [pc, #28]	; (8002344 <HAL_I2C_MspDeInit+0x74>)
 8002328:	f002 fa42 	bl	80047b0 <HAL_GPIO_DeInit>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40005400 	.word	0x40005400
 8002338:	40023800 	.word	0x40023800
 800233c:	40020400 	.word	0x40020400
 8002340:	40005c00 	.word	0x40005c00
 8002344:	40021c00 	.word	0x40021c00

08002348 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08e      	sub	sp, #56	; 0x38
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a55      	ldr	r2, [pc, #340]	; (80024bc <HAL_LTDC_MspInit+0x174>)
 8002366:	4293      	cmp	r3, r2
 8002368:	f040 80a3 	bne.w	80024b2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800236c:	4b54      	ldr	r3, [pc, #336]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	4a53      	ldr	r2, [pc, #332]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 8002372:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002376:	6453      	str	r3, [r2, #68]	; 0x44
 8002378:	4b51      	ldr	r3, [pc, #324]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002380:	623b      	str	r3, [r7, #32]
 8002382:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002384:	4b4e      	ldr	r3, [pc, #312]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	4a4d      	ldr	r2, [pc, #308]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 800238a:	f043 0310 	orr.w	r3, r3, #16
 800238e:	6313      	str	r3, [r2, #48]	; 0x30
 8002390:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800239c:	4b48      	ldr	r3, [pc, #288]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	4a47      	ldr	r2, [pc, #284]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a6:	6313      	str	r3, [r2, #48]	; 0x30
 80023a8:	4b45      	ldr	r3, [pc, #276]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80023b4:	4b42      	ldr	r3, [pc, #264]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	4a41      	ldr	r2, [pc, #260]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023be:	6313      	str	r3, [r2, #48]	; 0x30
 80023c0:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023cc:	4b3c      	ldr	r3, [pc, #240]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4a3b      	ldr	r2, [pc, #236]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d6:	6313      	str	r3, [r2, #48]	; 0x30
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	4a35      	ldr	r2, [pc, #212]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ee:	6313      	str	r3, [r2, #48]	; 0x30
 80023f0:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80023fc:	2310      	movs	r3, #16
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800240c:	230e      	movs	r3, #14
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	4619      	mov	r1, r3
 8002416:	482b      	ldr	r0, [pc, #172]	; (80024c4 <HAL_LTDC_MspInit+0x17c>)
 8002418:	f002 f820 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800241c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800242e:	230e      	movs	r3, #14
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002436:	4619      	mov	r1, r3
 8002438:	4823      	ldr	r0, [pc, #140]	; (80024c8 <HAL_LTDC_MspInit+0x180>)
 800243a:	f002 f80f 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800243e:	23f7      	movs	r3, #247	; 0xf7
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800244e:	230e      	movs	r3, #14
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002456:	4619      	mov	r1, r3
 8002458:	481c      	ldr	r0, [pc, #112]	; (80024cc <HAL_LTDC_MspInit+0x184>)
 800245a:	f001 ffff 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800245e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002470:	2309      	movs	r3, #9
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002478:	4619      	mov	r1, r3
 800247a:	4815      	ldr	r0, [pc, #84]	; (80024d0 <HAL_LTDC_MspInit+0x188>)
 800247c:	f001 ffee 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002480:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002492:	230e      	movs	r3, #14
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249a:	4619      	mov	r1, r3
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <HAL_LTDC_MspInit+0x18c>)
 800249e:	f001 ffdd 	bl	800445c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	2058      	movs	r0, #88	; 0x58
 80024a8:	f001 f988 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80024ac:	2058      	movs	r0, #88	; 0x58
 80024ae:	f001 f9a1 	bl	80037f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80024b2:	bf00      	nop
 80024b4:	3738      	adds	r7, #56	; 0x38
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40016800 	.word	0x40016800
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40022400 	.word	0x40022400
 80024cc:	40022800 	.word	0x40022800
 80024d0:	40021800 	.word	0x40021800
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08c      	sub	sp, #48	; 0x30
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3b      	ldr	r2, [pc, #236]	; (80025e4 <HAL_QSPI_MspInit+0x10c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d170      	bne.n	80025dc <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	4a3a      	ldr	r2, [pc, #232]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	6393      	str	r3, [r2, #56]	; 0x38
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002512:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002518:	f043 0310 	orr.w	r3, r3, #16
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252a:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a2e      	ldr	r2, [pc, #184]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a28      	ldr	r2, [pc, #160]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002548:	f043 0308 	orr.w	r3, r3, #8
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800255a:	2304      	movs	r3, #4
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800256a:	2309      	movs	r3, #9
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	481d      	ldr	r0, [pc, #116]	; (80025ec <HAL_QSPI_MspInit+0x114>)
 8002576:	f001 ff71 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800257a:	2340      	movs	r3, #64	; 0x40
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800258a:	230a      	movs	r3, #10
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	4816      	ldr	r0, [pc, #88]	; (80025f0 <HAL_QSPI_MspInit+0x118>)
 8002596:	f001 ff61 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800259a:	2304      	movs	r3, #4
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025aa:	2309      	movs	r3, #9
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	480e      	ldr	r0, [pc, #56]	; (80025f0 <HAL_QSPI_MspInit+0x118>)
 80025b6:	f001 ff51 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80025ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025cc:	2309      	movs	r3, #9
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	4807      	ldr	r0, [pc, #28]	; (80025f4 <HAL_QSPI_MspInit+0x11c>)
 80025d8:	f001 ff40 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80025dc:	bf00      	nop
 80025de:	3730      	adds	r7, #48	; 0x30
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	a0001000 	.word	0xa0001000
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40020c00 	.word	0x40020c00

080025f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_RTC_MspInit+0x2c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d105      	bne.n	8002616 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_RTC_MspInit+0x30>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a06      	ldr	r2, [pc, #24]	; (8002628 <HAL_RTC_MspInit+0x30>)
 8002610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40002800 	.word	0x40002800
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <HAL_SD_MspInit+0xb4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d144      	bne.n	80026d8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a24      	ldr	r2, [pc, #144]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800267e:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002696:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800269a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80026a8:	230c      	movs	r3, #12
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4619      	mov	r1, r3
 80026b2:	480d      	ldr	r0, [pc, #52]	; (80026e8 <HAL_SD_MspInit+0xbc>)
 80026b4:	f001 fed2 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80026b8:	2304      	movs	r3, #4
 80026ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80026c8:	230c      	movs	r3, #12
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4619      	mov	r1, r3
 80026d2:	4806      	ldr	r0, [pc, #24]	; (80026ec <HAL_SD_MspInit+0xc0>)
 80026d4:	f001 fec2 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80026d8:	bf00      	nop
 80026da:	3728      	adds	r7, #40	; 0x28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40020800 	.word	0x40020800
 80026ec:	40020c00 	.word	0x40020c00

080026f0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002710:	d127      	bne.n	8002762 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a15      	ldr	r2, [pc, #84]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002730:	f043 0308 	orr.w	r3, r3, #8
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002752:	2308      	movs	r3, #8
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <HAL_SPDIFRX_MspInit+0x80>)
 800275e:	f001 fe7d 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002762:	bf00      	nop
 8002764:	3728      	adds	r7, #40	; 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40020c00 	.word	0x40020c00

08002774 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a25      	ldr	r2, [pc, #148]	; (8002828 <HAL_SPI_MspInit+0xb4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d144      	bne.n	8002820 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_SPI_MspInit+0xb8>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a24      	ldr	r2, [pc, #144]	; (800282c <HAL_SPI_MspInit+0xb8>)
 800279c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80027ae:	4b1f      	ldr	r3, [pc, #124]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a1e      	ldr	r2, [pc, #120]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a18      	ldr	r2, [pc, #96]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80027de:	2302      	movs	r3, #2
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ea:	2300      	movs	r3, #0
 80027ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ee:	2305      	movs	r3, #5
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <HAL_SPI_MspInit+0xbc>)
 80027fa:	f001 fe2f 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80027fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002810:	2305      	movs	r3, #5
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	4806      	ldr	r0, [pc, #24]	; (8002834 <HAL_SPI_MspInit+0xc0>)
 800281c:	f001 fe1e 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002820:	bf00      	nop
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40003800 	.word	0x40003800
 800282c:	40023800 	.word	0x40023800
 8002830:	40022000 	.word	0x40022000
 8002834:	40020400 	.word	0x40020400

08002838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d10c      	bne.n	8002864 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a23      	ldr	r2, [pc, #140]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002862:	e034      	b.n	80028ce <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <HAL_TIM_Base_MspInit+0xa8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10c      	bne.n	8002888 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800286e:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
}
 8002886:	e022      	b.n	80028ce <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <HAL_TIM_Base_MspInit+0xac>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10c      	bne.n	80028ac <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a11      	ldr	r2, [pc, #68]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002898:	f043 0308 	orr.w	r3, r3, #8
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
}
 80028aa:	e010      	b.n	80028ce <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <HAL_TIM_Base_MspInit+0xb0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d10b      	bne.n	80028ce <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	4a08      	ldr	r2, [pc, #32]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	6453      	str	r3, [r2, #68]	; 0x44
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000c00 	.word	0x40000c00
 80028e8:	40010400 	.word	0x40010400

080028ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_TIM_PWM_MspInit+0x38>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10b      	bne.n	8002916 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_TIM_PWM_MspInit+0x3c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_TIM_PWM_MspInit+0x3c>)
 8002904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_TIM_PWM_MspInit+0x3c>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40001800 	.word	0x40001800
 8002928:	40023800 	.word	0x40023800

0800292c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	; 0x30
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d11d      	bne.n	800298a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a42      	ldr	r2, [pc, #264]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b40      	ldr	r3, [pc, #256]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800296a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002978:	2301      	movs	r3, #1
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	4619      	mov	r1, r3
 8002982:	4837      	ldr	r0, [pc, #220]	; (8002a60 <HAL_TIM_MspPostInit+0x134>)
 8002984:	f001 fd6a 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002988:	e064      	b.n	8002a54 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a35      	ldr	r2, [pc, #212]	; (8002a64 <HAL_TIM_MspPostInit+0x138>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d11c      	bne.n	80029ce <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002994:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	6313      	str	r3, [r2, #48]	; 0x30
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80029ac:	2310      	movs	r3, #16
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029bc:	2302      	movs	r3, #2
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	4619      	mov	r1, r3
 80029c6:	4828      	ldr	r0, [pc, #160]	; (8002a68 <HAL_TIM_MspPostInit+0x13c>)
 80029c8:	f001 fd48 	bl	800445c <HAL_GPIO_Init>
}
 80029cc:	e042      	b.n	8002a54 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <HAL_TIM_MspPostInit+0x140>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d11c      	bne.n	8002a12 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80029d8:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 80029de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e2:	6313      	str	r3, [r2, #48]	; 0x30
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80029f0:	2301      	movs	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4819      	ldr	r0, [pc, #100]	; (8002a70 <HAL_TIM_MspPostInit+0x144>)
 8002a0c:	f001 fd26 	bl	800445c <HAL_GPIO_Init>
}
 8002a10:	e020      	b.n	8002a54 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <HAL_TIM_MspPostInit+0x148>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d11b      	bne.n	8002a54 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	6313      	str	r3, [r2, #48]	; 0x30
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002a34:	2340      	movs	r3, #64	; 0x40
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002a44:	2309      	movs	r3, #9
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	480a      	ldr	r0, [pc, #40]	; (8002a78 <HAL_TIM_MspPostInit+0x14c>)
 8002a50:	f001 fd04 	bl	800445c <HAL_GPIO_Init>
}
 8002a54:	bf00      	nop
 8002a56:	3730      	adds	r7, #48	; 0x30
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40000400 	.word	0x40000400
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40000c00 	.word	0x40000c00
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40001800 	.word	0x40001800
 8002a78:	40021c00 	.word	0x40021c00

08002a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_UART_MspInit+0x8c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d12f      	bne.n	8002afe <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002aa4:	f043 0320 	orr.w	r3, r3, #32
 8002aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002ace:	23c0      	movs	r3, #192	; 0xc0
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4809      	ldr	r0, [pc, #36]	; (8002b10 <HAL_UART_MspInit+0x94>)
 8002aea:	f001 fcb7 	bl	800445c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	2047      	movs	r0, #71	; 0x47
 8002af4:	f000 fe62 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002af8:	2047      	movs	r0, #71	; 0x47
 8002afa:	f000 fe7b 	bl	80037f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002afe:	bf00      	nop
 8002b00:	3728      	adds	r7, #40	; 0x28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40011400 	.word	0x40011400
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020800 	.word	0x40020800

08002b14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002b28:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_FMC_MspInit+0x100>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d16d      	bne.n	8002c0c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002b30:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <HAL_FMC_MspInit+0x100>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b36:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <HAL_FMC_MspInit+0x104>)
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	4a37      	ldr	r2, [pc, #220]	; (8002c18 <HAL_FMC_MspInit+0x104>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6393      	str	r3, [r2, #56]	; 0x38
 8002b42:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <HAL_FMC_MspInit+0x104>)
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002b4e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b52:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b60:	230c      	movs	r3, #12
 8002b62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	4619      	mov	r1, r3
 8002b68:	482c      	ldr	r0, [pc, #176]	; (8002c1c <HAL_FMC_MspInit+0x108>)
 8002b6a:	f001 fc77 	bl	800445c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002b6e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002b72:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b80:	230c      	movs	r3, #12
 8002b82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	4825      	ldr	r0, [pc, #148]	; (8002c20 <HAL_FMC_MspInit+0x10c>)
 8002b8a:	f001 fc67 	bl	800445c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002b8e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002b92:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ba0:	230c      	movs	r3, #12
 8002ba2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	481e      	ldr	r0, [pc, #120]	; (8002c24 <HAL_FMC_MspInit+0x110>)
 8002baa:	f001 fc57 	bl	800445c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002bae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002bb2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4817      	ldr	r0, [pc, #92]	; (8002c28 <HAL_FMC_MspInit+0x114>)
 8002bca:	f001 fc47 	bl	800445c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002bce:	2328      	movs	r3, #40	; 0x28
 8002bd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bde:	230c      	movs	r3, #12
 8002be0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	4619      	mov	r1, r3
 8002be6:	4811      	ldr	r0, [pc, #68]	; (8002c2c <HAL_FMC_MspInit+0x118>)
 8002be8:	f001 fc38 	bl	800445c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002bec:	2308      	movs	r3, #8
 8002bee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	480a      	ldr	r0, [pc, #40]	; (8002c30 <HAL_FMC_MspInit+0x11c>)
 8002c06:	f001 fc29 	bl	800445c <HAL_GPIO_Init>
 8002c0a:	e000      	b.n	8002c0e <HAL_FMC_MspInit+0xfa>
    return;
 8002c0c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000388 	.word	0x20000388
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40020c00 	.word	0x40020c00
 8002c28:	40021400 	.word	0x40021400
 8002c2c:	40021c00 	.word	0x40021c00
 8002c30:	40020800 	.word	0x40020800

08002c34 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002c3c:	f7ff ff6a 	bl	8002b14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <HAL_SAI_MspInit+0xbc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d124      	bne.n	8002ca4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_SAI_MspInit+0xc0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10b      	bne.n	8002c7a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002c62:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <HAL_SAI_MspInit+0xc4>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a29      	ldr	r2, [pc, #164]	; (8002d0c <HAL_SAI_MspInit+0xc4>)
 8002c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_SAI_MspInit+0xc4>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002c7a:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <HAL_SAI_MspInit+0xc0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	4a21      	ldr	r2, [pc, #132]	; (8002d08 <HAL_SAI_MspInit+0xc0>)
 8002c82:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002c84:	23f0      	movs	r3, #240	; 0xf0
 8002c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002c94:	230a      	movs	r3, #10
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	481c      	ldr	r0, [pc, #112]	; (8002d10 <HAL_SAI_MspInit+0xc8>)
 8002ca0:	f001 fbdc 	bl	800445c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <HAL_SAI_MspInit+0xcc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d125      	bne.n	8002cfa <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <HAL_SAI_MspInit+0xc0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10b      	bne.n	8002cce <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <HAL_SAI_MspInit+0xc4>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <HAL_SAI_MspInit+0xc4>)
 8002cbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_SAI_MspInit+0xc4>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_SAI_MspInit+0xc0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	4a0c      	ldr	r2, [pc, #48]	; (8002d08 <HAL_SAI_MspInit+0xc0>)
 8002cd6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002cea:	230a      	movs	r3, #10
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4808      	ldr	r0, [pc, #32]	; (8002d18 <HAL_SAI_MspInit+0xd0>)
 8002cf6:	f001 fbb1 	bl	800445c <HAL_GPIO_Init>

    }
}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40015c04 	.word	0x40015c04
 8002d08:	2000038c 	.word	0x2000038c
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40022000 	.word	0x40022000
 8002d14:	40015c24 	.word	0x40015c24
 8002d18:	40021800 	.word	0x40021800

08002d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08c      	sub	sp, #48	; 0x30
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	2036      	movs	r0, #54	; 0x36
 8002d32:	f000 fd43 	bl	80037bc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d36:	2036      	movs	r0, #54	; 0x36
 8002d38:	f000 fd5c 	bl	80037f4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_InitTick+0xa0>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <HAL_InitTick+0xa0>)
 8002d42:	f043 0310 	orr.w	r3, r3, #16
 8002d46:	6413      	str	r3, [r2, #64]	; 0x40
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_InitTick+0xa0>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d54:	f107 0210 	add.w	r2, r7, #16
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f003 fd42 	bl	80067e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002d64:	f003 fd18 	bl	8006798 <HAL_RCC_GetPCLK1Freq>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <HAL_InitTick+0xa4>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0c9b      	lsrs	r3, r3, #18
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <HAL_InitTick+0xac>)
 8002d80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d8a:	4a0e      	ldr	r2, [pc, #56]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d9c:	4809      	ldr	r0, [pc, #36]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002d9e:	f006 f9bb 	bl	8009118 <HAL_TIM_Base_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d104      	bne.n	8002db2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002da8:	4806      	ldr	r0, [pc, #24]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002daa:	f006 f9e1 	bl	8009170 <HAL_TIM_Base_Start_IT>
 8002dae:	4603      	mov	r3, r0
 8002db0:	e000      	b.n	8002db4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3730      	adds	r7, #48	; 0x30
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	431bde83 	.word	0x431bde83
 8002dc4:	2000bcac 	.word	0x2000bcac
 8002dc8:	40001000 	.word	0x40001000

08002dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <HardFault_Handler+0x4>

08002de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <MemManage_Handler+0x4>

08002de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dea:	e7fe      	b.n	8002dea <BusFault_Handler+0x4>

08002dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <UsageFault_Handler+0x4>

08002df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <TIM6_DAC_IRQHandler+0x10>)
 8002e06:	f006 fa08 	bl	800921a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	2000bcac 	.word	0x2000bcac

08002e14 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <USART6_IRQHandler+0x10>)
 8002e1a:	f007 f9a9 	bl	800a170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	2000baec 	.word	0x2000baec

08002e28 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <LTDC_IRQHandler+0x10>)
 8002e2e:	f002 fc7b 	bl	8005728 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2000b98c 	.word	0x2000b98c

08002e3c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <DMA2D_IRQHandler+0x10>)
 8002e42:	f001 f8cc 	bl	8003fde <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000bb6c 	.word	0x2000bb6c

08002e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
	return 1;
 8002e54:	2301      	movs	r3, #1
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <_kill>:

int _kill(int pid, int sig)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e6a:	f024 fbd1 	bl	8027610 <__errno>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	2316      	movs	r3, #22
 8002e72:	6013      	str	r3, [r2, #0]
	return -1;
 8002e74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_exit>:

void _exit (int status)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ffe7 	bl	8002e60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e92:	e7fe      	b.n	8002e92 <_exit+0x12>

08002e94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	e00a      	b.n	8002ebc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ea6:	f3af 8000 	nop.w
 8002eaa:	4601      	mov	r1, r0
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	60ba      	str	r2, [r7, #8]
 8002eb2:	b2ca      	uxtb	r2, r1
 8002eb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	dbf0      	blt.n	8002ea6 <_read+0x12>
	}

return len;
 8002ec4:	687b      	ldr	r3, [r7, #4]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e009      	b.n	8002ef4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	60ba      	str	r2, [r7, #8]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	dbf1      	blt.n	8002ee0 <_write+0x12>
	}
	return len;
 8002efc:	687b      	ldr	r3, [r7, #4]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <_close>:

int _close(int file)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
	return -1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f2e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_isatty>:

int _isatty(int file)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
	return 1;
 8002f46:	2301      	movs	r3, #1
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <_sbrk+0x5c>)
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <_sbrk+0x60>)
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <_sbrk+0x64>)
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <_sbrk+0x68>)
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d207      	bcs.n	8002fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa0:	f024 fb36 	bl	8027610 <__errno>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	230c      	movs	r3, #12
 8002fa8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	e009      	b.n	8002fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <_sbrk+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <_sbrk+0x64>)
 8002fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20050000 	.word	0x20050000
 8002fd0:	00000400 	.word	0x00000400
 8002fd4:	20000390 	.word	0x20000390
 8002fd8:	2000c160 	.word	0x2000c160

08002fdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <SystemInit+0x28>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	4a07      	ldr	r2, [pc, #28]	; (8003004 <SystemInit+0x28>)
 8002fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <SystemInit+0x28>)
 8002ff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ff6:	609a      	str	r2, [r3, #8]
#endif
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003040 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800300c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800300e:	e003      	b.n	8003018 <LoopCopyDataInit>

08003010 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003012:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003014:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003016:	3104      	adds	r1, #4

08003018 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003018:	480b      	ldr	r0, [pc, #44]	; (8003048 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800301c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800301e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003020:	d3f6      	bcc.n	8003010 <CopyDataInit>
  ldr  r2, =_sbss
 8003022:	4a0b      	ldr	r2, [pc, #44]	; (8003050 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003024:	e002      	b.n	800302c <LoopFillZerobss>

08003026 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003026:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003028:	f842 3b04 	str.w	r3, [r2], #4

0800302c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800302e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003030:	d3f9      	bcc.n	8003026 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003032:	f7ff ffd3 	bl	8002fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003036:	f024 fb03 	bl	8027640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800303a:	f7fd fcc9 	bl	80009d0 <main>
  bx  lr    
 800303e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003040:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003044:	080561e8 	.word	0x080561e8
  ldr  r0, =_sdata
 8003048:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800304c:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8003050:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8003054:	2000c160 	.word	0x2000c160

08003058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003058:	e7fe      	b.n	8003058 <ADC_IRQHandler>

0800305a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800305e:	2003      	movs	r0, #3
 8003060:	f000 fba1 	bl	80037a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003064:	2000      	movs	r0, #0
 8003066:	f7ff fe59 	bl	8002d1c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800306a:	f7fe ff19 	bl	8001ea0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_IncTick+0x20>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_IncTick+0x24>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4413      	add	r3, r2
 8003084:	4a04      	ldr	r2, [pc, #16]	; (8003098 <HAL_IncTick+0x24>)
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000034 	.word	0x20000034
 8003098:	2000bcec 	.word	0x2000bcec

0800309c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return uwTick;
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <HAL_GetTick+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	2000bcec 	.word	0x2000bcec

080030b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030bc:	f7ff ffee 	bl	800309c <HAL_GetTick>
 80030c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d005      	beq.n	80030da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_Delay+0x40>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030da:	bf00      	nop
 80030dc:	f7ff ffde 	bl	800309c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d8f7      	bhi.n	80030dc <HAL_Delay+0x28>
  {
  }
}
 80030ec:	bf00      	nop
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000034 	.word	0x20000034

080030f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e031      	b.n	8003172 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe feea 	bl	8001ef0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	d116      	bne.n	8003164 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_ADC_Init+0x84>)
 800313c:	4013      	ands	r3, r2
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f964 	bl	8003414 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f023 0303 	bic.w	r3, r3, #3
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
 8003162:	e001      	b.n	8003168 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	ffffeefd 	.word	0xffffeefd

08003180 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_ADC_ConfigChannel+0x1c>
 8003198:	2302      	movs	r3, #2
 800319a:	e12a      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x272>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b09      	cmp	r3, #9
 80031aa:	d93a      	bls.n	8003222 <HAL_ADC_ConfigChannel+0xa2>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031b4:	d035      	beq.n	8003222 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68d9      	ldr	r1, [r3, #12]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	3b1e      	subs	r3, #30
 80031cc:	2207      	movs	r2, #7
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	400a      	ands	r2, r1
 80031da:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a87      	ldr	r2, [pc, #540]	; (8003400 <HAL_ADC_ConfigChannel+0x280>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10a      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68d9      	ldr	r1, [r3, #12]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	061a      	lsls	r2, r3, #24
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031fa:	e035      	b.n	8003268 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68d9      	ldr	r1, [r3, #12]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	4618      	mov	r0, r3
 800320e:	4603      	mov	r3, r0
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4403      	add	r3, r0
 8003214:	3b1e      	subs	r3, #30
 8003216:	409a      	lsls	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003220:	e022      	b.n	8003268 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6919      	ldr	r1, [r3, #16]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	2207      	movs	r2, #7
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43da      	mvns	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	400a      	ands	r2, r1
 8003244:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6919      	ldr	r1, [r3, #16]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	4618      	mov	r0, r3
 8003258:	4603      	mov	r3, r0
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4403      	add	r3, r0
 800325e:	409a      	lsls	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b06      	cmp	r3, #6
 800326e:	d824      	bhi.n	80032ba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	3b05      	subs	r3, #5
 8003282:	221f      	movs	r2, #31
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43da      	mvns	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	400a      	ands	r2, r1
 8003290:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	4618      	mov	r0, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	3b05      	subs	r3, #5
 80032ac:	fa00 f203 	lsl.w	r2, r0, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	635a      	str	r2, [r3, #52]	; 0x34
 80032b8:	e04c      	b.n	8003354 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b0c      	cmp	r3, #12
 80032c0:	d824      	bhi.n	800330c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	3b23      	subs	r3, #35	; 0x23
 80032d4:	221f      	movs	r2, #31
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43da      	mvns	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	400a      	ands	r2, r1
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	4618      	mov	r0, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	3b23      	subs	r3, #35	; 0x23
 80032fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
 800330a:	e023      	b.n	8003354 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	3b41      	subs	r3, #65	; 0x41
 800331e:	221f      	movs	r2, #31
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43da      	mvns	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	400a      	ands	r2, r1
 800332c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	b29b      	uxth	r3, r3
 800333a:	4618      	mov	r0, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	3b41      	subs	r3, #65	; 0x41
 8003348:	fa00 f203 	lsl.w	r2, r0, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2a      	ldr	r2, [pc, #168]	; (8003404 <HAL_ADC_ConfigChannel+0x284>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10a      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1f4>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003366:	d105      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_ADC_ConfigChannel+0x288>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a26      	ldr	r2, [pc, #152]	; (8003408 <HAL_ADC_ConfigChannel+0x288>)
 800336e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003372:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a22      	ldr	r2, [pc, #136]	; (8003404 <HAL_ADC_ConfigChannel+0x284>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d109      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x212>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b12      	cmp	r3, #18
 8003384:	d105      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <HAL_ADC_ConfigChannel+0x288>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <HAL_ADC_ConfigChannel+0x288>)
 800338c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003390:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <HAL_ADC_ConfigChannel+0x284>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d125      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x268>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a17      	ldr	r2, [pc, #92]	; (8003400 <HAL_ADC_ConfigChannel+0x280>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d003      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x22e>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b11      	cmp	r3, #17
 80033ac:	d11c      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_ADC_ConfigChannel+0x288>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_ADC_ConfigChannel+0x288>)
 80033b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033b8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a10      	ldr	r2, [pc, #64]	; (8003400 <HAL_ADC_ConfigChannel+0x280>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d111      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80033c4:	4b11      	ldr	r3, [pc, #68]	; (800340c <HAL_ADC_ConfigChannel+0x28c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a11      	ldr	r2, [pc, #68]	; (8003410 <HAL_ADC_ConfigChannel+0x290>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0c9a      	lsrs	r2, r3, #18
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033da:	e002      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3b01      	subs	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f9      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	10000012 	.word	0x10000012
 8003404:	40012000 	.word	0x40012000
 8003408:	40012300 	.word	0x40012300
 800340c:	2000002c 	.word	0x2000002c
 8003410:	431bde83 	.word	0x431bde83

08003414 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800341c:	4b78      	ldr	r3, [pc, #480]	; (8003600 <ADC_Init+0x1ec>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a77      	ldr	r2, [pc, #476]	; (8003600 <ADC_Init+0x1ec>)
 8003422:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003426:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003428:	4b75      	ldr	r3, [pc, #468]	; (8003600 <ADC_Init+0x1ec>)
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4973      	ldr	r1, [pc, #460]	; (8003600 <ADC_Init+0x1ec>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	021a      	lsls	r2, r3, #8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800348a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6899      	ldr	r1, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	4a58      	ldr	r2, [pc, #352]	; (8003604 <ADC_Init+0x1f0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	e00f      	b.n	800350e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800350c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0202 	bic.w	r2, r2, #2
 800351c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	005a      	lsls	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01b      	beq.n	8003574 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800355a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	3b01      	subs	r3, #1
 8003568:	035a      	lsls	r2, r3, #13
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	e007      	b.n	8003584 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003582:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	3b01      	subs	r3, #1
 80035a0:	051a      	lsls	r2, r3, #20
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6899      	ldr	r1, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035c6:	025a      	lsls	r2, r3, #9
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6899      	ldr	r1, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	029a      	lsls	r2, r3, #10
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	40012300 	.word	0x40012300
 8003604:	0f000001 	.word	0x0f000001

08003608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <__NVIC_SetPriorityGrouping+0x40>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003624:	4013      	ands	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <__NVIC_SetPriorityGrouping+0x44>)
 8003632:	4313      	orrs	r3, r2
 8003634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <__NVIC_SetPriorityGrouping+0x40>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	60d3      	str	r3, [r2, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00
 800364c:	05fa0000 	.word	0x05fa0000

08003650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <__NVIC_GetPriorityGrouping+0x18>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	f003 0307 	and.w	r3, r3, #7
}
 800365e:	4618      	mov	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	2b00      	cmp	r3, #0
 800367c:	db0b      	blt.n	8003696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	4907      	ldr	r1, [pc, #28]	; (80036a4 <__NVIC_EnableIRQ+0x38>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	2001      	movs	r0, #1
 800368e:	fa00 f202 	lsl.w	r2, r0, r2
 8003692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000e100 	.word	0xe000e100

080036a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	db10      	blt.n	80036dc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	4909      	ldr	r1, [pc, #36]	; (80036e8 <__NVIC_DisableIRQ+0x40>)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2001      	movs	r0, #1
 80036ca:	fa00 f202 	lsl.w	r2, r0, r2
 80036ce:	3320      	adds	r3, #32
 80036d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036d8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000e100 	.word	0xe000e100

080036ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	db0a      	blt.n	8003716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	490c      	ldr	r1, [pc, #48]	; (8003738 <__NVIC_SetPriority+0x4c>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	0112      	lsls	r2, r2, #4
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	440b      	add	r3, r1
 8003710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003714:	e00a      	b.n	800372c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4908      	ldr	r1, [pc, #32]	; (800373c <__NVIC_SetPriority+0x50>)
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	3b04      	subs	r3, #4
 8003724:	0112      	lsls	r2, r2, #4
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	440b      	add	r3, r1
 800372a:	761a      	strb	r2, [r3, #24]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000e100 	.word	0xe000e100
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f1c3 0307 	rsb	r3, r3, #7
 800375a:	2b04      	cmp	r3, #4
 800375c:	bf28      	it	cs
 800375e:	2304      	movcs	r3, #4
 8003760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3304      	adds	r3, #4
 8003766:	2b06      	cmp	r3, #6
 8003768:	d902      	bls.n	8003770 <NVIC_EncodePriority+0x30>
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3b03      	subs	r3, #3
 800376e:	e000      	b.n	8003772 <NVIC_EncodePriority+0x32>
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	f04f 32ff 	mov.w	r2, #4294967295
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	401a      	ands	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003788:	f04f 31ff 	mov.w	r1, #4294967295
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43d9      	mvns	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	4313      	orrs	r3, r2
         );
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ff2a 	bl	8003608 <__NVIC_SetPriorityGrouping>
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037ce:	f7ff ff3f 	bl	8003650 <__NVIC_GetPriorityGrouping>
 80037d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	6978      	ldr	r0, [r7, #20]
 80037da:	f7ff ffb1 	bl	8003740 <NVIC_EncodePriority>
 80037de:	4602      	mov	r2, r0
 80037e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff80 	bl	80036ec <__NVIC_SetPriority>
}
 80037ec:	bf00      	nop
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ff32 	bl	800366c <__NVIC_EnableIRQ>
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff ff42 	bl	80036a8 <__NVIC_DisableIRQ>
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e054      	b.n	80038e8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	7f5b      	ldrb	r3, [r3, #29]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fe fba8 	bl	8001fa4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	791b      	ldrb	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10c      	bne.n	800387c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <HAL_CRC_Init+0xc4>)
 8003868:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0218 	bic.w	r2, r2, #24
 8003878:	609a      	str	r2, [r3, #8]
 800387a:	e00c      	b.n	8003896 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6899      	ldr	r1, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	461a      	mov	r2, r3
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f834 	bl	80038f4 <HAL_CRCEx_Polynomial_Set>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e028      	b.n	80038e8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	795b      	ldrb	r3, [r3, #5]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d105      	bne.n	80038aa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f04f 32ff 	mov.w	r2, #4294967295
 80038a6:	611a      	str	r2, [r3, #16]
 80038a8:	e004      	b.n	80038b4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6912      	ldr	r2, [r2, #16]
 80038b2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	04c11db7 	.word	0x04c11db7

080038f4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003904:	231f      	movs	r3, #31
 8003906:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003908:	bf00      	nop
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	613a      	str	r2, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HAL_CRCEx_Polynomial_Set+0x34>
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b18      	cmp	r3, #24
 800392c:	d846      	bhi.n	80039bc <HAL_CRCEx_Polynomial_Set+0xc8>
 800392e:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	080039c3 	.word	0x080039c3
 8003938:	080039bd 	.word	0x080039bd
 800393c:	080039bd 	.word	0x080039bd
 8003940:	080039bd 	.word	0x080039bd
 8003944:	080039bd 	.word	0x080039bd
 8003948:	080039bd 	.word	0x080039bd
 800394c:	080039bd 	.word	0x080039bd
 8003950:	080039bd 	.word	0x080039bd
 8003954:	080039b1 	.word	0x080039b1
 8003958:	080039bd 	.word	0x080039bd
 800395c:	080039bd 	.word	0x080039bd
 8003960:	080039bd 	.word	0x080039bd
 8003964:	080039bd 	.word	0x080039bd
 8003968:	080039bd 	.word	0x080039bd
 800396c:	080039bd 	.word	0x080039bd
 8003970:	080039bd 	.word	0x080039bd
 8003974:	080039a5 	.word	0x080039a5
 8003978:	080039bd 	.word	0x080039bd
 800397c:	080039bd 	.word	0x080039bd
 8003980:	080039bd 	.word	0x080039bd
 8003984:	080039bd 	.word	0x080039bd
 8003988:	080039bd 	.word	0x080039bd
 800398c:	080039bd 	.word	0x080039bd
 8003990:	080039bd 	.word	0x080039bd
 8003994:	08003999 	.word	0x08003999
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b06      	cmp	r3, #6
 800399c:	d913      	bls.n	80039c6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80039a2:	e010      	b.n	80039c6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b07      	cmp	r3, #7
 80039a8:	d90f      	bls.n	80039ca <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80039ae:	e00c      	b.n	80039ca <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b0f      	cmp	r3, #15
 80039b4:	d90b      	bls.n	80039ce <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80039ba:	e008      	b.n	80039ce <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	75fb      	strb	r3, [r7, #23]
      break;
 80039c0:	e006      	b.n	80039d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039c2:	bf00      	nop
 80039c4:	e004      	b.n	80039d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039c6:	bf00      	nop
 80039c8:	e002      	b.n	80039d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039ca:	bf00      	nop
 80039cc:	e000      	b.n	80039d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039ce:	bf00      	nop
  }
  if (status == HAL_OK)
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10d      	bne.n	80039f2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 0118 	bic.w	r1, r3, #24
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e069      	b.n	8003ae6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fe fae0 	bl	8001fe4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <HAL_DCMI_Init+0xf0>)
 8003a46:	400b      	ands	r3, r1
 8003a48:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6819      	ldr	r1, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003a5e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003a6a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003a76:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003a82:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003a8e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d112      	bne.n	8003ac6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	7f1b      	ldrb	r3, [r3, #28]
 8003aa4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	7f5b      	ldrb	r3, [r3, #29]
 8003aaa:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003aac:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7f9b      	ldrb	r3, [r3, #30]
 8003ab2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003ab4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	7fdb      	ldrb	r3, [r3, #31]
 8003abc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003ac2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003ac4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 021e 	orr.w	r2, r2, #30
 8003ad4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	ffe0f007 	.word	0xffe0f007

08003af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_DMA_Start_IT+0x26>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e048      	b.n	8003bac <HAL_DMA_Start_IT+0xb8>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d137      	bne.n	8003b9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f864 	bl	8003c10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	223f      	movs	r2, #63	; 0x3f
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0216 	orr.w	r2, r2, #22
 8003b62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b72:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0208 	orr.w	r2, r2, #8
 8003b8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e005      	b.n	8003baa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2280      	movs	r2, #128	; 0x80
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e00c      	b.n	8003bec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2205      	movs	r2, #5
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d108      	bne.n	8003c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c4e:	e007      	b.n	8003c60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	60da      	str	r2, [r3, #12]
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e039      	b.n	8003cf2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fe fa64 	bl	8002160 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbc:	f023 0107 	bic.w	r1, r3, #7
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <HAL_DMA2D_Init+0x90>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68d1      	ldr	r1, [r2, #12]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	ffffc000 	.word	0xffffc000

08003d00 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e05f      	b.n	8003dd2 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8003d12:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <HAL_DMA2D_DeInit+0xdc>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d02e      	beq.n	8003d7c <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f8c1 	bl	8003eb4 <HAL_DMA2D_Abort>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d021      	beq.n	8003d7c <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e04a      	b.n	8003dd2 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d108      	bne.n	8003d5c <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8f7 	bl	8003f40 <HAL_DMA2D_CLUTLoading_Abort>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d011      	beq.n	8003d7c <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e03a      	b.n	8003dd2 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d108      	bne.n	8003d7c <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f8e7 	bl	8003f40 <HAL_DMA2D_CLUTLoading_Abort>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e02a      	b.n	8003dd2 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	223f      	movs	r2, #63	; 0x3f
 8003d8a:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2200      	movs	r2, #0
 8003d92:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2200      	movs	r2, #0
 8003da2:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2200      	movs	r2, #0
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2200      	movs	r2, #0
 8003db2:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fe f9f9 	bl	80021ac <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800

08003de0 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_DMA2D_Start_IT+0x1c>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e020      	b.n	8003e3e <HAL_DMA2D_Start_IT+0x5e>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fa84 	bl	8004324 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b086      	sub	sp, #24
 8003e4a:	af02      	add	r7, sp, #8
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e024      	b.n	8003eac <HAL_DMA2D_BlendingStart_IT+0x66>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fa4d 	bl	8004324 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003e98:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 0205 	bic.w	r2, r3, #5
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0204 	orr.w	r2, r2, #4
 8003ece:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ed0:	f7ff f8e4 	bl	800309c <HAL_GetTick>
 8003ed4:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003ed6:	e017      	b.n	8003f08 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003ed8:	f7ff f8e0 	bl	800309c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ee6:	d90f      	bls.n	8003f08 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e017      	b.n	8003f38 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e0      	bne.n	8003ed8 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8003f24:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3324      	adds	r3, #36	; 0x24
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0204 	orr.w	r2, r2, #4
 8003f60:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d103      	bne.n	8003f70 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	331c      	adds	r3, #28
 8003f6e:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8003f70:	f7ff f894 	bl	800309c <HAL_GetTick>
 8003f74:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003f76:	e017      	b.n	8003fa8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003f78:	f7ff f890 	bl	800309c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f86:	d90f      	bls.n	8003fa8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	f043 0220 	orr.w	r2, r3, #32
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2203      	movs	r2, #3
 8003f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e016      	b.n	8003fd6 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0320 	and.w	r3, r3, #32
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e1      	bne.n	8003f78 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d026      	beq.n	800404e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d021      	beq.n	800404e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004018:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2201      	movs	r2, #1
 800402c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2204      	movs	r2, #4
 8004032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d026      	beq.n	80040a6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d021      	beq.n	80040a6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004070:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2220      	movs	r2, #32
 8004078:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	f043 0202 	orr.w	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2204      	movs	r2, #4
 800408a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d026      	beq.n	80040fe <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d021      	beq.n	80040fe <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040c8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2208      	movs	r2, #8
 80040d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	f043 0204 	orr.w	r2, r3, #4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2204      	movs	r2, #4
 80040e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d013      	beq.n	8004130 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00e      	beq.n	8004130 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004120:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2204      	movs	r2, #4
 8004128:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f853 	bl	80041d6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d024      	beq.n	8004184 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01f      	beq.n	8004184 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004152:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2202      	movs	r2, #2
 800415a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01f      	beq.n	80041ce <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01a      	beq.n	80041ce <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041a6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2210      	movs	r2, #16
 80041ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f80e 	bl	80041ea <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_DMA2D_ConfigLayer+0x20>
 800421c:	2302      	movs	r3, #2
 800421e:	e079      	b.n	8004314 <HAL_DMA2D_ConfigLayer+0x114>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	3318      	adds	r3, #24
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800424a:	4b35      	ldr	r3, [pc, #212]	; (8004320 <HAL_DMA2D_ConfigLayer+0x120>)
 800424c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b0a      	cmp	r3, #10
 8004254:	d003      	beq.n	800425e <HAL_DMA2D_ConfigLayer+0x5e>
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b09      	cmp	r3, #9
 800425c:	d107      	bne.n	800426e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e005      	b.n	800427a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	061b      	lsls	r3, r3, #24
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d120      	bne.n	80042c2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	43db      	mvns	r3, r3
 800428a:	ea02 0103 	and.w	r1, r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	430a      	orrs	r2, r1
 8004296:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b0a      	cmp	r3, #10
 80042a8:	d003      	beq.n	80042b2 <HAL_DMA2D_ConfigLayer+0xb2>
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b09      	cmp	r3, #9
 80042b0:	d127      	bne.n	8004302 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
 80042c0:	e01f      	b.n	8004302 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	ea02 0103 	and.w	r1, r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b0a      	cmp	r3, #10
 80042ea:	d003      	beq.n	80042f4 <HAL_DMA2D_ConfigLayer+0xf4>
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b09      	cmp	r3, #9
 80042f2:	d106      	bne.n	8004302 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004300:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	ff03000f 	.word	0xff03000f

08004324 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004324:	b480      	push	{r7}
 8004326:	b08b      	sub	sp, #44	; 0x2c
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	041a      	lsls	r2, r3, #16
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	431a      	orrs	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800435c:	d174      	bne.n	8004448 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004364:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800436c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004374:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d108      	bne.n	8004396 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	431a      	orrs	r2, r3
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	4313      	orrs	r3, r2
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
 8004394:	e053      	b.n	800443e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d106      	bne.n	80043ac <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	e048      	b.n	800443e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d111      	bne.n	80043d8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	0cdb      	lsrs	r3, r3, #19
 80043b8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	0a9b      	lsrs	r3, r3, #10
 80043be:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	08db      	lsrs	r3, r3, #3
 80043c4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	02db      	lsls	r3, r3, #11
 80043ce:	4313      	orrs	r3, r2
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
 80043d6:	e032      	b.n	800443e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d117      	bne.n	8004410 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	0fdb      	lsrs	r3, r3, #31
 80043e4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	0cdb      	lsrs	r3, r3, #19
 80043ea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	0adb      	lsrs	r3, r3, #11
 80043f0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	08db      	lsrs	r3, r3, #3
 80043f6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	029b      	lsls	r3, r3, #10
 8004400:	431a      	orrs	r2, r3
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	03db      	lsls	r3, r3, #15
 8004406:	4313      	orrs	r3, r2
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
 800440e:	e016      	b.n	800443e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	0f1b      	lsrs	r3, r3, #28
 8004414:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	0d1b      	lsrs	r3, r3, #20
 800441a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	0b1b      	lsrs	r3, r3, #12
 8004420:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	091b      	lsrs	r3, r3, #4
 8004426:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	011a      	lsls	r2, r3, #4
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	431a      	orrs	r2, r3
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	031b      	lsls	r3, r3, #12
 8004436:	4313      	orrs	r3, r2
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004446:	e003      	b.n	8004450 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	60da      	str	r2, [r3, #12]
}
 8004450:	bf00      	nop
 8004452:	372c      	adds	r7, #44	; 0x2c
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800445c:	b480      	push	{r7}
 800445e:	b089      	sub	sp, #36	; 0x24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	e175      	b.n	8004768 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800447c:	2201      	movs	r2, #1
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4013      	ands	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	429a      	cmp	r2, r3
 8004496:	f040 8164 	bne.w	8004762 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d00b      	beq.n	80044ba <HAL_GPIO_Init+0x5e>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d007      	beq.n	80044ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044ae:	2b11      	cmp	r3, #17
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b12      	cmp	r3, #18
 80044b8:	d130      	bne.n	800451c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	2203      	movs	r2, #3
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044f0:	2201      	movs	r2, #1
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 0201 	and.w	r2, r3, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	2203      	movs	r2, #3
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4013      	ands	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x100>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b12      	cmp	r3, #18
 800455a:	d123      	bne.n	80045a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	08da      	lsrs	r2, r3, #3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3208      	adds	r2, #8
 8004564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	220f      	movs	r2, #15
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	08da      	lsrs	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3208      	adds	r2, #8
 800459e:	69b9      	ldr	r1, [r7, #24]
 80045a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	2203      	movs	r2, #3
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 0203 	and.w	r2, r3, #3
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80be 	beq.w	8004762 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045e6:	4b65      	ldr	r3, [pc, #404]	; (800477c <HAL_GPIO_Init+0x320>)
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	4a64      	ldr	r2, [pc, #400]	; (800477c <HAL_GPIO_Init+0x320>)
 80045ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045f0:	6453      	str	r3, [r2, #68]	; 0x44
 80045f2:	4b62      	ldr	r3, [pc, #392]	; (800477c <HAL_GPIO_Init+0x320>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80045fe:	4a60      	ldr	r2, [pc, #384]	; (8004780 <HAL_GPIO_Init+0x324>)
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	3302      	adds	r3, #2
 8004606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	220f      	movs	r2, #15
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a57      	ldr	r2, [pc, #348]	; (8004784 <HAL_GPIO_Init+0x328>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d037      	beq.n	800469a <HAL_GPIO_Init+0x23e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a56      	ldr	r2, [pc, #344]	; (8004788 <HAL_GPIO_Init+0x32c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d031      	beq.n	8004696 <HAL_GPIO_Init+0x23a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a55      	ldr	r2, [pc, #340]	; (800478c <HAL_GPIO_Init+0x330>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d02b      	beq.n	8004692 <HAL_GPIO_Init+0x236>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a54      	ldr	r2, [pc, #336]	; (8004790 <HAL_GPIO_Init+0x334>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d025      	beq.n	800468e <HAL_GPIO_Init+0x232>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a53      	ldr	r2, [pc, #332]	; (8004794 <HAL_GPIO_Init+0x338>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01f      	beq.n	800468a <HAL_GPIO_Init+0x22e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a52      	ldr	r2, [pc, #328]	; (8004798 <HAL_GPIO_Init+0x33c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d019      	beq.n	8004686 <HAL_GPIO_Init+0x22a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a51      	ldr	r2, [pc, #324]	; (800479c <HAL_GPIO_Init+0x340>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <HAL_GPIO_Init+0x226>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a50      	ldr	r2, [pc, #320]	; (80047a0 <HAL_GPIO_Init+0x344>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00d      	beq.n	800467e <HAL_GPIO_Init+0x222>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4f      	ldr	r2, [pc, #316]	; (80047a4 <HAL_GPIO_Init+0x348>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d007      	beq.n	800467a <HAL_GPIO_Init+0x21e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a4e      	ldr	r2, [pc, #312]	; (80047a8 <HAL_GPIO_Init+0x34c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d101      	bne.n	8004676 <HAL_GPIO_Init+0x21a>
 8004672:	2309      	movs	r3, #9
 8004674:	e012      	b.n	800469c <HAL_GPIO_Init+0x240>
 8004676:	230a      	movs	r3, #10
 8004678:	e010      	b.n	800469c <HAL_GPIO_Init+0x240>
 800467a:	2308      	movs	r3, #8
 800467c:	e00e      	b.n	800469c <HAL_GPIO_Init+0x240>
 800467e:	2307      	movs	r3, #7
 8004680:	e00c      	b.n	800469c <HAL_GPIO_Init+0x240>
 8004682:	2306      	movs	r3, #6
 8004684:	e00a      	b.n	800469c <HAL_GPIO_Init+0x240>
 8004686:	2305      	movs	r3, #5
 8004688:	e008      	b.n	800469c <HAL_GPIO_Init+0x240>
 800468a:	2304      	movs	r3, #4
 800468c:	e006      	b.n	800469c <HAL_GPIO_Init+0x240>
 800468e:	2303      	movs	r3, #3
 8004690:	e004      	b.n	800469c <HAL_GPIO_Init+0x240>
 8004692:	2302      	movs	r3, #2
 8004694:	e002      	b.n	800469c <HAL_GPIO_Init+0x240>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_GPIO_Init+0x240>
 800469a:	2300      	movs	r3, #0
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	f002 0203 	and.w	r2, r2, #3
 80046a2:	0092      	lsls	r2, r2, #2
 80046a4:	4093      	lsls	r3, r2
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80046ac:	4934      	ldr	r1, [pc, #208]	; (8004780 <HAL_GPIO_Init+0x324>)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	3302      	adds	r3, #2
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046ba:	4b3c      	ldr	r3, [pc, #240]	; (80047ac <HAL_GPIO_Init+0x350>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046de:	4a33      	ldr	r2, [pc, #204]	; (80047ac <HAL_GPIO_Init+0x350>)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046e4:	4b31      	ldr	r3, [pc, #196]	; (80047ac <HAL_GPIO_Init+0x350>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004708:	4a28      	ldr	r2, [pc, #160]	; (80047ac <HAL_GPIO_Init+0x350>)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800470e:	4b27      	ldr	r3, [pc, #156]	; (80047ac <HAL_GPIO_Init+0x350>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004732:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <HAL_GPIO_Init+0x350>)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004738:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <HAL_GPIO_Init+0x350>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800475c:	4a13      	ldr	r2, [pc, #76]	; (80047ac <HAL_GPIO_Init+0x350>)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3301      	adds	r3, #1
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b0f      	cmp	r3, #15
 800476c:	f67f ae86 	bls.w	800447c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004770:	bf00      	nop
 8004772:	3724      	adds	r7, #36	; 0x24
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40023800 	.word	0x40023800
 8004780:	40013800 	.word	0x40013800
 8004784:	40020000 	.word	0x40020000
 8004788:	40020400 	.word	0x40020400
 800478c:	40020800 	.word	0x40020800
 8004790:	40020c00 	.word	0x40020c00
 8004794:	40021000 	.word	0x40021000
 8004798:	40021400 	.word	0x40021400
 800479c:	40021800 	.word	0x40021800
 80047a0:	40021c00 	.word	0x40021c00
 80047a4:	40022000 	.word	0x40022000
 80047a8:	40022400 	.word	0x40022400
 80047ac:	40013c00 	.word	0x40013c00

080047b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e0d9      	b.n	8004980 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80047cc:	2201      	movs	r2, #1
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	f040 80c9 	bne.w	800497a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80047e8:	4a6a      	ldr	r2, [pc, #424]	; (8004994 <HAL_GPIO_DeInit+0x1e4>)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	089b      	lsrs	r3, r3, #2
 80047ee:	3302      	adds	r3, #2
 80047f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	220f      	movs	r2, #15
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	4013      	ands	r3, r2
 8004808:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a62      	ldr	r2, [pc, #392]	; (8004998 <HAL_GPIO_DeInit+0x1e8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d037      	beq.n	8004882 <HAL_GPIO_DeInit+0xd2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a61      	ldr	r2, [pc, #388]	; (800499c <HAL_GPIO_DeInit+0x1ec>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d031      	beq.n	800487e <HAL_GPIO_DeInit+0xce>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a60      	ldr	r2, [pc, #384]	; (80049a0 <HAL_GPIO_DeInit+0x1f0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d02b      	beq.n	800487a <HAL_GPIO_DeInit+0xca>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a5f      	ldr	r2, [pc, #380]	; (80049a4 <HAL_GPIO_DeInit+0x1f4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d025      	beq.n	8004876 <HAL_GPIO_DeInit+0xc6>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a5e      	ldr	r2, [pc, #376]	; (80049a8 <HAL_GPIO_DeInit+0x1f8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01f      	beq.n	8004872 <HAL_GPIO_DeInit+0xc2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a5d      	ldr	r2, [pc, #372]	; (80049ac <HAL_GPIO_DeInit+0x1fc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d019      	beq.n	800486e <HAL_GPIO_DeInit+0xbe>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a5c      	ldr	r2, [pc, #368]	; (80049b0 <HAL_GPIO_DeInit+0x200>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <HAL_GPIO_DeInit+0xba>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a5b      	ldr	r2, [pc, #364]	; (80049b4 <HAL_GPIO_DeInit+0x204>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00d      	beq.n	8004866 <HAL_GPIO_DeInit+0xb6>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a5a      	ldr	r2, [pc, #360]	; (80049b8 <HAL_GPIO_DeInit+0x208>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <HAL_GPIO_DeInit+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a59      	ldr	r2, [pc, #356]	; (80049bc <HAL_GPIO_DeInit+0x20c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <HAL_GPIO_DeInit+0xae>
 800485a:	2309      	movs	r3, #9
 800485c:	e012      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 800485e:	230a      	movs	r3, #10
 8004860:	e010      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 8004862:	2308      	movs	r3, #8
 8004864:	e00e      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 8004866:	2307      	movs	r3, #7
 8004868:	e00c      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 800486a:	2306      	movs	r3, #6
 800486c:	e00a      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 800486e:	2305      	movs	r3, #5
 8004870:	e008      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 8004872:	2304      	movs	r3, #4
 8004874:	e006      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 8004876:	2303      	movs	r3, #3
 8004878:	e004      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 800487a:	2302      	movs	r3, #2
 800487c:	e002      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 8004882:	2300      	movs	r3, #0
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	f002 0203 	and.w	r2, r2, #3
 800488a:	0092      	lsls	r2, r2, #2
 800488c:	4093      	lsls	r3, r2
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	429a      	cmp	r2, r3
 8004892:	d132      	bne.n	80048fa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004894:	4b4a      	ldr	r3, [pc, #296]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	43db      	mvns	r3, r3
 800489c:	4948      	ldr	r1, [pc, #288]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 800489e:	4013      	ands	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	4945      	ldr	r1, [pc, #276]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80048b0:	4b43      	ldr	r3, [pc, #268]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	4941      	ldr	r1, [pc, #260]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80048be:	4b40      	ldr	r3, [pc, #256]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	493e      	ldr	r1, [pc, #248]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	220f      	movs	r2, #15
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80048dc:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <HAL_GPIO_DeInit+0x1e4>)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	089b      	lsrs	r3, r3, #2
 80048e2:	3302      	adds	r3, #2
 80048e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	43da      	mvns	r2, r3
 80048ec:	4829      	ldr	r0, [pc, #164]	; (8004994 <HAL_GPIO_DeInit+0x1e4>)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	089b      	lsrs	r3, r3, #2
 80048f2:	400a      	ands	r2, r1
 80048f4:	3302      	adds	r3, #2
 80048f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2103      	movs	r1, #3
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	401a      	ands	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	08da      	lsrs	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3208      	adds	r2, #8
 8004918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	220f      	movs	r2, #15
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	08d2      	lsrs	r2, r2, #3
 8004930:	4019      	ands	r1, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3208      	adds	r2, #8
 8004936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	2103      	movs	r1, #3
 8004944:	fa01 f303 	lsl.w	r3, r1, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	401a      	ands	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	2101      	movs	r1, #1
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	fa01 f303 	lsl.w	r3, r1, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	401a      	ands	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	2103      	movs	r1, #3
 800496e:	fa01 f303 	lsl.w	r3, r1, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	401a      	ands	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	3301      	adds	r3, #1
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b0f      	cmp	r3, #15
 8004984:	f67f af22 	bls.w	80047cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40013800 	.word	0x40013800
 8004998:	40020000 	.word	0x40020000
 800499c:	40020400 	.word	0x40020400
 80049a0:	40020800 	.word	0x40020800
 80049a4:	40020c00 	.word	0x40020c00
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40021400 	.word	0x40021400
 80049b0:	40021800 	.word	0x40021800
 80049b4:	40021c00 	.word	0x40021c00
 80049b8:	40022000 	.word	0x40022000
 80049bc:	40022400 	.word	0x40022400
 80049c0:	40013c00 	.word	0x40013c00

080049c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	4013      	ands	r3, r2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	e001      	b.n	80049e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	807b      	strh	r3, [r7, #2]
 8004a00:	4613      	mov	r3, r2
 8004a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a04:	787b      	ldrb	r3, [r7, #1]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0a:	887a      	ldrh	r2, [r7, #2]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a10:	e003      	b.n	8004a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	041a      	lsls	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	619a      	str	r2, [r3, #24]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e07f      	b.n	8004b3a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fd fbc6 	bl	80021e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2224      	movs	r2, #36	; 0x24
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d107      	bne.n	8004aa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	e006      	b.n	8004ab0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004aae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d104      	bne.n	8004ac2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ac0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <HAL_I2C_Init+0x11c>)
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ae0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	ea42 0103 	orr.w	r1, r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	021a      	lsls	r2, r3, #8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69d9      	ldr	r1, [r3, #28]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1a      	ldr	r2, [r3, #32]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	02008000 	.word	0x02008000

08004b48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e021      	b.n	8004b9e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2224      	movs	r2, #36	; 0x24
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0201 	bic.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fd fbac 	bl	80022d0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	817b      	strh	r3, [r7, #10]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	813b      	strh	r3, [r7, #8]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	f040 80f9 	bne.w	8004dc2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_I2C_Mem_Write+0x34>
 8004bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0ed      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2C_Mem_Write+0x4e>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e0e6      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bfe:	f7fe fa4d 	bl	800309c <HAL_GetTick>
 8004c02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	2319      	movs	r3, #25
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fad1 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0d1      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2221      	movs	r2, #33	; 0x21
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2240      	movs	r2, #64	; 0x40
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c48:	88f8      	ldrh	r0, [r7, #6]
 8004c4a:	893a      	ldrh	r2, [r7, #8]
 8004c4c:	8979      	ldrh	r1, [r7, #10]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	4603      	mov	r3, r0
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f9e1 	bl	8005020 <I2C_RequestMemoryWrite>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0a9      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2bff      	cmp	r3, #255	; 0xff
 8004c78:	d90e      	bls.n	8004c98 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	22ff      	movs	r2, #255	; 0xff
 8004c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	8979      	ldrh	r1, [r7, #10]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fbb3 	bl	80053fc <I2C_TransferConfig>
 8004c96:	e00f      	b.n	8004cb8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	8979      	ldrh	r1, [r7, #10]
 8004caa:	2300      	movs	r3, #0
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fba2 	bl	80053fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fabb 	bl	8005238 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e07b      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	781a      	ldrb	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d034      	beq.n	8004d70 <HAL_I2C_Mem_Write+0x1c8>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d130      	bne.n	8004d70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	2200      	movs	r2, #0
 8004d16:	2180      	movs	r1, #128	; 0x80
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fa4d 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e04d      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2bff      	cmp	r3, #255	; 0xff
 8004d30:	d90e      	bls.n	8004d50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	22ff      	movs	r2, #255	; 0xff
 8004d36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	8979      	ldrh	r1, [r7, #10]
 8004d40:	2300      	movs	r3, #0
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 fb57 	bl	80053fc <I2C_TransferConfig>
 8004d4e:	e00f      	b.n	8004d70 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	8979      	ldrh	r1, [r7, #10]
 8004d62:	2300      	movs	r3, #0
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fb46 	bl	80053fc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d19e      	bne.n	8004cb8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fa9a 	bl	80052b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e01a      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2220      	movs	r2, #32
 8004d94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <HAL_I2C_Mem_Write+0x224>)
 8004da2:	400b      	ands	r3, r1
 8004da4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e000      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
  }
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	fe00e800 	.word	0xfe00e800

08004dd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	817b      	strh	r3, [r7, #10]
 8004de2:	460b      	mov	r3, r1
 8004de4:	813b      	strh	r3, [r7, #8]
 8004de6:	4613      	mov	r3, r2
 8004de8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	f040 80fd 	bne.w	8004ff2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_I2C_Mem_Read+0x34>
 8004dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0f1      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_I2C_Mem_Read+0x4e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e0ea      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e26:	f7fe f939 	bl	800309c <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2319      	movs	r3, #25
 8004e32:	2201      	movs	r2, #1
 8004e34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f9bd 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0d5      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2222      	movs	r2, #34	; 0x22
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2240      	movs	r2, #64	; 0x40
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a3a      	ldr	r2, [r7, #32]
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e70:	88f8      	ldrh	r0, [r7, #6]
 8004e72:	893a      	ldrh	r2, [r7, #8]
 8004e74:	8979      	ldrh	r1, [r7, #10]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	4603      	mov	r3, r0
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f921 	bl	80050c8 <I2C_RequestMemoryRead>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0ad      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2bff      	cmp	r3, #255	; 0xff
 8004ea0:	d90e      	bls.n	8004ec0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	22ff      	movs	r2, #255	; 0xff
 8004ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	8979      	ldrh	r1, [r7, #10]
 8004eb0:	4b52      	ldr	r3, [pc, #328]	; (8004ffc <HAL_I2C_Mem_Read+0x22c>)
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fa9f 	bl	80053fc <I2C_TransferConfig>
 8004ebe:	e00f      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	8979      	ldrh	r1, [r7, #10]
 8004ed2:	4b4a      	ldr	r3, [pc, #296]	; (8004ffc <HAL_I2C_Mem_Read+0x22c>)
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fa8e 	bl	80053fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2104      	movs	r1, #4
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f964 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e07c      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d034      	beq.n	8004fa0 <HAL_I2C_Mem_Read+0x1d0>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d130      	bne.n	8004fa0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	2200      	movs	r2, #0
 8004f46:	2180      	movs	r1, #128	; 0x80
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f935 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e04d      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2bff      	cmp	r3, #255	; 0xff
 8004f60:	d90e      	bls.n	8004f80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	22ff      	movs	r2, #255	; 0xff
 8004f66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	8979      	ldrh	r1, [r7, #10]
 8004f70:	2300      	movs	r3, #0
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fa3f 	bl	80053fc <I2C_TransferConfig>
 8004f7e:	e00f      	b.n	8004fa0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	8979      	ldrh	r1, [r7, #10]
 8004f92:	2300      	movs	r3, #0
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fa2e 	bl	80053fc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d19a      	bne.n	8004ee0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f982 	bl	80052b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e01a      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6859      	ldr	r1, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_I2C_Mem_Read+0x230>)
 8004fd2:	400b      	ands	r3, r1
 8004fd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
  }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	80002400 	.word	0x80002400
 8005000:	fe00e800 	.word	0xfe00e800

08005004 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005012:	b2db      	uxtb	r3, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	4608      	mov	r0, r1
 800502a:	4611      	mov	r1, r2
 800502c:	461a      	mov	r2, r3
 800502e:	4603      	mov	r3, r0
 8005030:	817b      	strh	r3, [r7, #10]
 8005032:	460b      	mov	r3, r1
 8005034:	813b      	strh	r3, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	b2da      	uxtb	r2, r3
 800503e:	8979      	ldrh	r1, [r7, #10]
 8005040:	4b20      	ldr	r3, [pc, #128]	; (80050c4 <I2C_RequestMemoryWrite+0xa4>)
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f9d7 	bl	80053fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	69b9      	ldr	r1, [r7, #24]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f8f0 	bl	8005238 <I2C_WaitOnTXISFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e02c      	b.n	80050bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005068:	893b      	ldrh	r3, [r7, #8]
 800506a:	b2da      	uxtb	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	629a      	str	r2, [r3, #40]	; 0x28
 8005072:	e015      	b.n	80050a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005074:	893b      	ldrh	r3, [r7, #8]
 8005076:	0a1b      	lsrs	r3, r3, #8
 8005078:	b29b      	uxth	r3, r3
 800507a:	b2da      	uxtb	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	69b9      	ldr	r1, [r7, #24]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f8d6 	bl	8005238 <I2C_WaitOnTXISFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e012      	b.n	80050bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005096:	893b      	ldrh	r3, [r7, #8]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2200      	movs	r2, #0
 80050a8:	2180      	movs	r1, #128	; 0x80
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f884 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	80002000 	.word	0x80002000

080050c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	4608      	mov	r0, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	461a      	mov	r2, r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	817b      	strh	r3, [r7, #10]
 80050da:	460b      	mov	r3, r1
 80050dc:	813b      	strh	r3, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	8979      	ldrh	r1, [r7, #10]
 80050e8:	4b20      	ldr	r3, [pc, #128]	; (800516c <I2C_RequestMemoryRead+0xa4>)
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	2300      	movs	r3, #0
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f984 	bl	80053fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	69b9      	ldr	r1, [r7, #24]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f89d 	bl	8005238 <I2C_WaitOnTXISFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e02c      	b.n	8005162 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d105      	bne.n	800511a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800510e:	893b      	ldrh	r3, [r7, #8]
 8005110:	b2da      	uxtb	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	629a      	str	r2, [r3, #40]	; 0x28
 8005118:	e015      	b.n	8005146 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800511a:	893b      	ldrh	r3, [r7, #8]
 800511c:	0a1b      	lsrs	r3, r3, #8
 800511e:	b29b      	uxth	r3, r3
 8005120:	b2da      	uxtb	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	69b9      	ldr	r1, [r7, #24]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f883 	bl	8005238 <I2C_WaitOnTXISFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e012      	b.n	8005162 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800513c:	893b      	ldrh	r3, [r7, #8]
 800513e:	b2da      	uxtb	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2200      	movs	r2, #0
 800514e:	2140      	movs	r1, #64	; 0x40
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f831 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	80002000 	.word	0x80002000

08005170 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d103      	bne.n	800518e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2200      	movs	r2, #0
 800518c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b01      	cmp	r3, #1
 800519a:	d007      	beq.n	80051ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	619a      	str	r2, [r3, #24]
  }
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c8:	e022      	b.n	8005210 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d01e      	beq.n	8005210 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d2:	f7fd ff63 	bl	800309c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d113      	bne.n	8005210 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e00f      	b.n	8005230 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4013      	ands	r3, r2
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	429a      	cmp	r2, r3
 800521e:	bf0c      	ite	eq
 8005220:	2301      	moveq	r3, #1
 8005222:	2300      	movne	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	429a      	cmp	r2, r3
 800522c:	d0cd      	beq.n	80051ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005244:	e02c      	b.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f870 	bl	8005330 <I2C_IsAcknowledgeFailed>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e02a      	b.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d01e      	beq.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fd ff1b 	bl	800309c <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d113      	bne.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	f043 0220 	orr.w	r2, r3, #32
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e007      	b.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d1cb      	bne.n	8005246 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c4:	e028      	b.n	8005318 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f830 	bl	8005330 <I2C_IsAcknowledgeFailed>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e026      	b.n	8005328 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fd fedf 	bl	800309c <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d113      	bne.n	8005318 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e007      	b.n	8005328 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b20      	cmp	r3, #32
 8005324:	d1cf      	bne.n	80052c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b10      	cmp	r3, #16
 8005348:	d151      	bne.n	80053ee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800534a:	e022      	b.n	8005392 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d01e      	beq.n	8005392 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005354:	f7fd fea2 	bl	800309c <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	429a      	cmp	r2, r3
 8005362:	d302      	bcc.n	800536a <I2C_IsAcknowledgeFailed+0x3a>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d113      	bne.n	8005392 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	f043 0220 	orr.w	r2, r3, #32
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e02e      	b.n	80053f0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b20      	cmp	r3, #32
 800539e:	d1d5      	bne.n	800534c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2210      	movs	r2, #16
 80053a6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2220      	movs	r2, #32
 80053ae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f7ff fedd 	bl	8005170 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6859      	ldr	r1, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <I2C_IsAcknowledgeFailed+0xc8>)
 80053c2:	400b      	ands	r3, r1
 80053c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	f043 0204 	orr.w	r2, r3, #4
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	fe00e800 	.word	0xfe00e800

080053fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	607b      	str	r3, [r7, #4]
 8005406:	460b      	mov	r3, r1
 8005408:	817b      	strh	r3, [r7, #10]
 800540a:	4613      	mov	r3, r2
 800540c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	0d5b      	lsrs	r3, r3, #21
 8005418:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800541c:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <I2C_TransferConfig+0x58>)
 800541e:	430b      	orrs	r3, r1
 8005420:	43db      	mvns	r3, r3
 8005422:	ea02 0103 	and.w	r1, r2, r3
 8005426:	897b      	ldrh	r3, [r7, #10]
 8005428:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800542c:	7a7b      	ldrb	r3, [r7, #9]
 800542e:	041b      	lsls	r3, r3, #16
 8005430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	431a      	orrs	r2, r3
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	03ff63ff 	.word	0x03ff63ff

08005458 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b20      	cmp	r3, #32
 800546c:	d138      	bne.n	80054e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005478:	2302      	movs	r3, #2
 800547a:	e032      	b.n	80054e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2224      	movs	r2, #36	; 0x24
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6819      	ldr	r1, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054e0:	2302      	movs	r3, #2
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b20      	cmp	r3, #32
 8005502:	d139      	bne.n	8005578 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800550e:	2302      	movs	r3, #2
 8005510:	e033      	b.n	800557a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2224      	movs	r2, #36	; 0x24
 800551e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0201 	bic.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005540:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	e000      	b.n	800557a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005578:	2302      	movs	r3, #2
  }
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e0bf      	b.n	800571a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fc feca 	bl	8002348 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80055ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6999      	ldr	r1, [r3, #24]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80055e0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6899      	ldr	r1, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b4a      	ldr	r3, [pc, #296]	; (8005724 <HAL_LTDC_Init+0x19c>)
 80055fc:	400b      	ands	r3, r1
 80055fe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	041b      	lsls	r3, r3, #16
 8005606:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6899      	ldr	r1, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68d9      	ldr	r1, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <HAL_LTDC_Init+0x19c>)
 800562a:	400b      	ands	r3, r1
 800562c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	041b      	lsls	r3, r3, #16
 8005634:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68d9      	ldr	r1, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1a      	ldr	r2, [r3, #32]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6919      	ldr	r1, [r3, #16]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4b33      	ldr	r3, [pc, #204]	; (8005724 <HAL_LTDC_Init+0x19c>)
 8005658:	400b      	ands	r3, r1
 800565a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6919      	ldr	r1, [r3, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6959      	ldr	r1, [r3, #20]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4b27      	ldr	r3, [pc, #156]	; (8005724 <HAL_LTDC_Init+0x19c>)
 8005686:	400b      	ands	r3, r1
 8005688:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	041b      	lsls	r3, r3, #16
 8005690:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6959      	ldr	r1, [r3, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056ae:	021b      	lsls	r3, r3, #8
 80056b0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80056b8:	041b      	lsls	r3, r3, #16
 80056ba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80056ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0206 	orr.w	r2, r2, #6
 80056f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	f000f800 	.word	0xf000f800

08005728 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d023      	beq.n	8005792 <HAL_LTDC_IRQHandler+0x6a>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01e      	beq.n	8005792 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0204 	bic.w	r2, r2, #4
 8005762:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2204      	movs	r2, #4
 800576a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005772:	f043 0201 	orr.w	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2204      	movs	r2, #4
 8005780:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f86f 	bl	8005870 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d023      	beq.n	80057e4 <HAL_LTDC_IRQHandler+0xbc>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01e      	beq.n	80057e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0202 	bic.w	r2, r2, #2
 80057b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2202      	movs	r2, #2
 80057bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057c4:	f043 0202 	orr.w	r2, r3, #2
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2204      	movs	r2, #4
 80057d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f846 	bl	8005870 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01b      	beq.n	8005826 <HAL_LTDC_IRQHandler+0xfe>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d016      	beq.n	8005826 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2201      	movs	r2, #1
 800580e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f011 ff2b 	bl	801767c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01b      	beq.n	8005868 <HAL_LTDC_IRQHandler+0x140>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0208 	bic.w	r2, r2, #8
 8005848:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2208      	movs	r2, #8
 8005850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f80e 	bl	8005884 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005868:	bf00      	nop
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005898:	b5b0      	push	{r4, r5, r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_LTDC_ConfigLayer+0x1a>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e02c      	b.n	800590c <HAL_LTDC_ConfigLayer+0x74>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2134      	movs	r1, #52	; 0x34
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	4413      	add	r3, r2
 80058ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4614      	mov	r4, r2
 80058d6:	461d      	mov	r5, r3
 80058d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f849 	bl	8005984 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2201      	movs	r2, #1
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bdb0      	pop	{r4, r5, r7, pc}

08005914 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_LTDC_ProgramLineEvent+0x18>
 8005928:	2302      	movs	r3, #2
 800592a:	e023      	b.n	8005974 <HAL_LTDC_ProgramLineEvent+0x60>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800594c:	4a0c      	ldr	r2, [pc, #48]	; (8005980 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40016800 	.word	0x40016800

08005984 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005984:	b480      	push	{r7}
 8005986:	b089      	sub	sp, #36	; 0x24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	0c1b      	lsrs	r3, r3, #16
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	4413      	add	r3, r2
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	01db      	lsls	r3, r3, #7
 80059b0:	4413      	add	r3, r2
 80059b2:	3384      	adds	r3, #132	; 0x84
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	4611      	mov	r1, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	01d2      	lsls	r2, r2, #7
 80059c0:	440a      	add	r2, r1
 80059c2:	3284      	adds	r2, #132	; 0x84
 80059c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80059c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	0c1b      	lsrs	r3, r3, #16
 80059d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059da:	4413      	add	r3, r2
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4619      	mov	r1, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	01db      	lsls	r3, r3, #7
 80059e8:	440b      	add	r3, r1
 80059ea:	3384      	adds	r3, #132	; 0x84
 80059ec:	4619      	mov	r1, r3
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a02:	4413      	add	r3, r2
 8005a04:	041b      	lsls	r3, r3, #16
 8005a06:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	01db      	lsls	r3, r3, #7
 8005a12:	4413      	add	r3, r2
 8005a14:	3384      	adds	r3, #132	; 0x84
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	01d2      	lsls	r2, r2, #7
 8005a22:	440a      	add	r2, r1
 8005a24:	3284      	adds	r2, #132	; 0x84
 8005a26:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a2a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a3a:	4413      	add	r3, r2
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4619      	mov	r1, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	01db      	lsls	r3, r3, #7
 8005a48:	440b      	add	r3, r1
 8005a4a:	3384      	adds	r3, #132	; 0x84
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	01db      	lsls	r3, r3, #7
 8005a5e:	4413      	add	r3, r2
 8005a60:	3384      	adds	r3, #132	; 0x84
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	6812      	ldr	r2, [r2, #0]
 8005a68:	4611      	mov	r1, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	01d2      	lsls	r2, r2, #7
 8005a6e:	440a      	add	r2, r1
 8005a70:	3284      	adds	r2, #132	; 0x84
 8005a72:	f023 0307 	bic.w	r3, r3, #7
 8005a76:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	01db      	lsls	r3, r3, #7
 8005a82:	4413      	add	r3, r2
 8005a84:	3384      	adds	r3, #132	; 0x84
 8005a86:	461a      	mov	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005a9e:	041b      	lsls	r3, r3, #16
 8005aa0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	01db      	lsls	r3, r3, #7
 8005ab4:	4413      	add	r3, r2
 8005ab6:	3384      	adds	r3, #132	; 0x84
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	01db      	lsls	r3, r3, #7
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3384      	adds	r3, #132	; 0x84
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2300      	movs	r3, #0
 8005acc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	01db      	lsls	r3, r3, #7
 8005ae8:	440b      	add	r3, r1
 8005aea:	3384      	adds	r3, #132	; 0x84
 8005aec:	4619      	mov	r1, r3
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	01db      	lsls	r3, r3, #7
 8005afe:	4413      	add	r3, r2
 8005b00:	3384      	adds	r3, #132	; 0x84
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	6812      	ldr	r2, [r2, #0]
 8005b08:	4611      	mov	r1, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	01d2      	lsls	r2, r2, #7
 8005b0e:	440a      	add	r2, r1
 8005b10:	3284      	adds	r2, #132	; 0x84
 8005b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b16:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	01db      	lsls	r3, r3, #7
 8005b22:	4413      	add	r3, r2
 8005b24:	3384      	adds	r3, #132	; 0x84
 8005b26:	461a      	mov	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	01db      	lsls	r3, r3, #7
 8005b38:	4413      	add	r3, r2
 8005b3a:	3384      	adds	r3, #132	; 0x84
 8005b3c:	69da      	ldr	r2, [r3, #28]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4619      	mov	r1, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	01db      	lsls	r3, r3, #7
 8005b48:	440b      	add	r3, r1
 8005b4a:	3384      	adds	r3, #132	; 0x84
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4b58      	ldr	r3, [pc, #352]	; (8005cb0 <LTDC_SetConfig+0x32c>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	68f9      	ldr	r1, [r7, #12]
 8005b5e:	6809      	ldr	r1, [r1, #0]
 8005b60:	4608      	mov	r0, r1
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	01c9      	lsls	r1, r1, #7
 8005b66:	4401      	add	r1, r0
 8005b68:	3184      	adds	r1, #132	; 0x84
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	01db      	lsls	r3, r3, #7
 8005b78:	4413      	add	r3, r2
 8005b7a:	3384      	adds	r3, #132	; 0x84
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	01db      	lsls	r3, r3, #7
 8005b88:	4413      	add	r3, r2
 8005b8a:	3384      	adds	r3, #132	; 0x84
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	01db      	lsls	r3, r3, #7
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3384      	adds	r3, #132	; 0x84
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	61fb      	str	r3, [r7, #28]
 8005bb4:	e01b      	b.n	8005bee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d102      	bne.n	8005bc4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	e014      	b.n	8005bee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d00b      	beq.n	8005be4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d007      	beq.n	8005be4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d003      	beq.n	8005be4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005be0:	2b07      	cmp	r3, #7
 8005be2:	d102      	bne.n	8005bea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005be4:	2302      	movs	r3, #2
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	e001      	b.n	8005bee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005bea:	2301      	movs	r3, #1
 8005bec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	01db      	lsls	r3, r3, #7
 8005bf8:	4413      	add	r3, r2
 8005bfa:	3384      	adds	r3, #132	; 0x84
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	4611      	mov	r1, r2
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	01d2      	lsls	r2, r2, #7
 8005c08:	440a      	add	r2, r1
 8005c0a:	3284      	adds	r2, #132	; 0x84
 8005c0c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005c10:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	fb02 f303 	mul.w	r3, r2, r3
 8005c1c:	041a      	lsls	r2, r3, #16
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6859      	ldr	r1, [r3, #4]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	1acb      	subs	r3, r1, r3
 8005c28:	69f9      	ldr	r1, [r7, #28]
 8005c2a:	fb01 f303 	mul.w	r3, r1, r3
 8005c2e:	3303      	adds	r3, #3
 8005c30:	68f9      	ldr	r1, [r7, #12]
 8005c32:	6809      	ldr	r1, [r1, #0]
 8005c34:	4608      	mov	r0, r1
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	01c9      	lsls	r1, r1, #7
 8005c3a:	4401      	add	r1, r0
 8005c3c:	3184      	adds	r1, #132	; 0x84
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	01db      	lsls	r3, r3, #7
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3384      	adds	r3, #132	; 0x84
 8005c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4619      	mov	r1, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	01db      	lsls	r3, r3, #7
 8005c5c:	440b      	add	r3, r1
 8005c5e:	3384      	adds	r3, #132	; 0x84
 8005c60:	4619      	mov	r1, r3
 8005c62:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <LTDC_SetConfig+0x330>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	01db      	lsls	r3, r3, #7
 8005c72:	4413      	add	r3, r2
 8005c74:	3384      	adds	r3, #132	; 0x84
 8005c76:	461a      	mov	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	01db      	lsls	r3, r3, #7
 8005c88:	4413      	add	r3, r2
 8005c8a:	3384      	adds	r3, #132	; 0x84
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	6812      	ldr	r2, [r2, #0]
 8005c92:	4611      	mov	r1, r2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	01d2      	lsls	r2, r2, #7
 8005c98:	440a      	add	r2, r1
 8005c9a:	3284      	adds	r2, #132	; 0x84
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	6013      	str	r3, [r2, #0]
}
 8005ca2:	bf00      	nop
 8005ca4:	3724      	adds	r7, #36	; 0x24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	fffff8f8 	.word	0xfffff8f8
 8005cb4:	fffff800 	.word	0xfffff800

08005cb8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a04      	ldr	r2, [pc, #16]	; (8005cd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc6:	6013      	str	r3, [r2, #0]
}
 8005cc8:	bf00      	nop
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40007000 	.word	0x40007000

08005cd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ce2:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	4a22      	ldr	r2, [pc, #136]	; (8005d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cec:	6413      	str	r3, [r2, #64]	; 0x40
 8005cee:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005cfa:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d06:	f7fd f9c9 	bl	800309c <HAL_GetTick>
 8005d0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d0c:	e009      	b.n	8005d22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d0e:	f7fd f9c5 	bl	800309c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d1c:	d901      	bls.n	8005d22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e022      	b.n	8005d68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d22:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2e:	d1ee      	bne.n	8005d0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d30:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a0f      	ldr	r2, [pc, #60]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d3c:	f7fd f9ae 	bl	800309c <HAL_GetTick>
 8005d40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d42:	e009      	b.n	8005d58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d44:	f7fd f9aa 	bl	800309c <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d52:	d901      	bls.n	8005d58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e007      	b.n	8005d68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d64:	d1ee      	bne.n	8005d44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40023800 	.word	0x40023800
 8005d74:	40007000 	.word	0x40007000

08005d78 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005d80:	f7fd f98c 	bl	800309c <HAL_GetTick>
 8005d84:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e067      	b.n	8005e60 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10b      	bne.n	8005db4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fc fb97 	bl	80024d8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005daa:	f241 3188 	movw	r1, #5000	; 0x1388
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f85e 	bl	8005e70 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	021a      	lsls	r2, r3, #8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2120      	movs	r1, #32
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f856 	bl	8005e8c <QSPI_WaitFlagStateUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005de4:	7afb      	ldrb	r3, [r7, #11]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d135      	bne.n	8005e56 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <HAL_QSPI_Init+0xf0>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6852      	ldr	r2, [r2, #4]
 8005df8:	0611      	lsls	r1, r2, #24
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	68d2      	ldr	r2, [r2, #12]
 8005dfe:	4311      	orrs	r1, r2
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	69d2      	ldr	r2, [r2, #28]
 8005e04:	4311      	orrs	r1, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6a12      	ldr	r2, [r2, #32]
 8005e0a:	4311      	orrs	r1, r2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	430b      	orrs	r3, r1
 8005e12:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	4b14      	ldr	r3, [pc, #80]	; (8005e6c <HAL_QSPI_Init+0xf4>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6912      	ldr	r2, [r2, #16]
 8005e22:	0411      	lsls	r1, r2, #16
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6952      	ldr	r2, [r2, #20]
 8005e28:	4311      	orrs	r1, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6992      	ldr	r2, [r2, #24]
 8005e2e:	4311      	orrs	r1, r2
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	430b      	orrs	r3, r1
 8005e36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	00ffff2f 	.word	0x00ffff2f
 8005e6c:	ffe0f8fe 	.word	0xffe0f8fe

08005e70 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005e9c:	e01a      	b.n	8005ed4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea4:	d016      	beq.n	8005ed4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea6:	f7fd f8f9 	bl	800309c <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d302      	bcc.n	8005ebc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10b      	bne.n	8005ed4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec8:	f043 0201 	orr.w	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e00e      	b.n	8005ef2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4013      	ands	r3, r2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bf14      	ite	ne
 8005ee2:	2301      	movne	r3, #1
 8005ee4:	2300      	moveq	r3, #0
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d1d6      	bne.n	8005e9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005f04:	2300      	movs	r3, #0
 8005f06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e291      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 8087 	beq.w	800602e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f20:	4b96      	ldr	r3, [pc, #600]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 030c 	and.w	r3, r3, #12
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d00c      	beq.n	8005f46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f2c:	4b93      	ldr	r3, [pc, #588]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 030c 	and.w	r3, r3, #12
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d112      	bne.n	8005f5e <HAL_RCC_OscConfig+0x62>
 8005f38:	4b90      	ldr	r3, [pc, #576]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f44:	d10b      	bne.n	8005f5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f46:	4b8d      	ldr	r3, [pc, #564]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d06c      	beq.n	800602c <HAL_RCC_OscConfig+0x130>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d168      	bne.n	800602c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e26b      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f66:	d106      	bne.n	8005f76 <HAL_RCC_OscConfig+0x7a>
 8005f68:	4b84      	ldr	r3, [pc, #528]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a83      	ldr	r2, [pc, #524]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	e02e      	b.n	8005fd4 <HAL_RCC_OscConfig+0xd8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10c      	bne.n	8005f98 <HAL_RCC_OscConfig+0x9c>
 8005f7e:	4b7f      	ldr	r3, [pc, #508]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a7e      	ldr	r2, [pc, #504]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	4b7c      	ldr	r3, [pc, #496]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a7b      	ldr	r2, [pc, #492]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	e01d      	b.n	8005fd4 <HAL_RCC_OscConfig+0xd8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fa0:	d10c      	bne.n	8005fbc <HAL_RCC_OscConfig+0xc0>
 8005fa2:	4b76      	ldr	r3, [pc, #472]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a75      	ldr	r2, [pc, #468]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4b73      	ldr	r3, [pc, #460]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a72      	ldr	r2, [pc, #456]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	e00b      	b.n	8005fd4 <HAL_RCC_OscConfig+0xd8>
 8005fbc:	4b6f      	ldr	r3, [pc, #444]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a6e      	ldr	r2, [pc, #440]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	4b6c      	ldr	r3, [pc, #432]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a6b      	ldr	r2, [pc, #428]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d013      	beq.n	8006004 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fdc:	f7fd f85e 	bl	800309c <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fe4:	f7fd f85a 	bl	800309c <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b64      	cmp	r3, #100	; 0x64
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e21f      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ff6:	4b61      	ldr	r3, [pc, #388]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0f0      	beq.n	8005fe4 <HAL_RCC_OscConfig+0xe8>
 8006002:	e014      	b.n	800602e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fd f84a 	bl	800309c <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800600c:	f7fd f846 	bl	800309c <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b64      	cmp	r3, #100	; 0x64
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e20b      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800601e:	4b57      	ldr	r3, [pc, #348]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f0      	bne.n	800600c <HAL_RCC_OscConfig+0x110>
 800602a:	e000      	b.n	800602e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800602c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d069      	beq.n	800610e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800603a:	4b50      	ldr	r3, [pc, #320]	; (800617c <HAL_RCC_OscConfig+0x280>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 030c 	and.w	r3, r3, #12
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006046:	4b4d      	ldr	r3, [pc, #308]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 030c 	and.w	r3, r3, #12
 800604e:	2b08      	cmp	r3, #8
 8006050:	d11c      	bne.n	800608c <HAL_RCC_OscConfig+0x190>
 8006052:	4b4a      	ldr	r3, [pc, #296]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d116      	bne.n	800608c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800605e:	4b47      	ldr	r3, [pc, #284]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d005      	beq.n	8006076 <HAL_RCC_OscConfig+0x17a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d001      	beq.n	8006076 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e1df      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006076:	4b41      	ldr	r3, [pc, #260]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	493d      	ldr	r1, [pc, #244]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006086:	4313      	orrs	r3, r2
 8006088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800608a:	e040      	b.n	800610e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d023      	beq.n	80060dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006094:	4b39      	ldr	r3, [pc, #228]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a38      	ldr	r2, [pc, #224]	; (800617c <HAL_RCC_OscConfig+0x280>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a0:	f7fc fffc 	bl	800309c <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a8:	f7fc fff8 	bl	800309c <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e1bd      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ba:	4b30      	ldr	r3, [pc, #192]	; (800617c <HAL_RCC_OscConfig+0x280>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c6:	4b2d      	ldr	r3, [pc, #180]	; (800617c <HAL_RCC_OscConfig+0x280>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4929      	ldr	r1, [pc, #164]	; (800617c <HAL_RCC_OscConfig+0x280>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]
 80060da:	e018      	b.n	800610e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060dc:	4b27      	ldr	r3, [pc, #156]	; (800617c <HAL_RCC_OscConfig+0x280>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a26      	ldr	r2, [pc, #152]	; (800617c <HAL_RCC_OscConfig+0x280>)
 80060e2:	f023 0301 	bic.w	r3, r3, #1
 80060e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e8:	f7fc ffd8 	bl	800309c <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f0:	f7fc ffd4 	bl	800309c <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e199      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006102:	4b1e      	ldr	r3, [pc, #120]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f0      	bne.n	80060f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d038      	beq.n	800618c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d019      	beq.n	8006156 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006122:	4b16      	ldr	r3, [pc, #88]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006126:	4a15      	ldr	r2, [pc, #84]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612e:	f7fc ffb5 	bl	800309c <HAL_GetTick>
 8006132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006134:	e008      	b.n	8006148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006136:	f7fc ffb1 	bl	800309c <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e176      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <HAL_RCC_OscConfig+0x280>)
 800614a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0f0      	beq.n	8006136 <HAL_RCC_OscConfig+0x23a>
 8006154:	e01a      	b.n	800618c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006156:	4b09      	ldr	r3, [pc, #36]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615a:	4a08      	ldr	r2, [pc, #32]	; (800617c <HAL_RCC_OscConfig+0x280>)
 800615c:	f023 0301 	bic.w	r3, r3, #1
 8006160:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006162:	f7fc ff9b 	bl	800309c <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006168:	e00a      	b.n	8006180 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800616a:	f7fc ff97 	bl	800309c <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d903      	bls.n	8006180 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e15c      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
 800617c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006180:	4b91      	ldr	r3, [pc, #580]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1ee      	bne.n	800616a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80a4 	beq.w	80062e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800619a:	4b8b      	ldr	r3, [pc, #556]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10d      	bne.n	80061c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80061a6:	4b88      	ldr	r3, [pc, #544]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	4a87      	ldr	r2, [pc, #540]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80061ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b0:	6413      	str	r3, [r2, #64]	; 0x40
 80061b2:	4b85      	ldr	r3, [pc, #532]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ba:	60bb      	str	r3, [r7, #8]
 80061bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061be:	2301      	movs	r3, #1
 80061c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061c2:	4b82      	ldr	r3, [pc, #520]	; (80063cc <HAL_RCC_OscConfig+0x4d0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d118      	bne.n	8006200 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80061ce:	4b7f      	ldr	r3, [pc, #508]	; (80063cc <HAL_RCC_OscConfig+0x4d0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a7e      	ldr	r2, [pc, #504]	; (80063cc <HAL_RCC_OscConfig+0x4d0>)
 80061d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061da:	f7fc ff5f 	bl	800309c <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061e2:	f7fc ff5b 	bl	800309c <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b64      	cmp	r3, #100	; 0x64
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e120      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061f4:	4b75      	ldr	r3, [pc, #468]	; (80063cc <HAL_RCC_OscConfig+0x4d0>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0f0      	beq.n	80061e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d106      	bne.n	8006216 <HAL_RCC_OscConfig+0x31a>
 8006208:	4b6f      	ldr	r3, [pc, #444]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800620a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620c:	4a6e      	ldr	r2, [pc, #440]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	6713      	str	r3, [r2, #112]	; 0x70
 8006214:	e02d      	b.n	8006272 <HAL_RCC_OscConfig+0x376>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10c      	bne.n	8006238 <HAL_RCC_OscConfig+0x33c>
 800621e:	4b6a      	ldr	r3, [pc, #424]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006222:	4a69      	ldr	r2, [pc, #420]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006224:	f023 0301 	bic.w	r3, r3, #1
 8006228:	6713      	str	r3, [r2, #112]	; 0x70
 800622a:	4b67      	ldr	r3, [pc, #412]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	4a66      	ldr	r2, [pc, #408]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006230:	f023 0304 	bic.w	r3, r3, #4
 8006234:	6713      	str	r3, [r2, #112]	; 0x70
 8006236:	e01c      	b.n	8006272 <HAL_RCC_OscConfig+0x376>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	2b05      	cmp	r3, #5
 800623e:	d10c      	bne.n	800625a <HAL_RCC_OscConfig+0x35e>
 8006240:	4b61      	ldr	r3, [pc, #388]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006244:	4a60      	ldr	r2, [pc, #384]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006246:	f043 0304 	orr.w	r3, r3, #4
 800624a:	6713      	str	r3, [r2, #112]	; 0x70
 800624c:	4b5e      	ldr	r3, [pc, #376]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	4a5d      	ldr	r2, [pc, #372]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	6713      	str	r3, [r2, #112]	; 0x70
 8006258:	e00b      	b.n	8006272 <HAL_RCC_OscConfig+0x376>
 800625a:	4b5b      	ldr	r3, [pc, #364]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625e:	4a5a      	ldr	r2, [pc, #360]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006260:	f023 0301 	bic.w	r3, r3, #1
 8006264:	6713      	str	r3, [r2, #112]	; 0x70
 8006266:	4b58      	ldr	r3, [pc, #352]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626a:	4a57      	ldr	r2, [pc, #348]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800626c:	f023 0304 	bic.w	r3, r3, #4
 8006270:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d015      	beq.n	80062a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627a:	f7fc ff0f 	bl	800309c <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006280:	e00a      	b.n	8006298 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006282:	f7fc ff0b 	bl	800309c <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006290:	4293      	cmp	r3, r2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e0ce      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006298:	4b4b      	ldr	r3, [pc, #300]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800629a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0ee      	beq.n	8006282 <HAL_RCC_OscConfig+0x386>
 80062a4:	e014      	b.n	80062d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a6:	f7fc fef9 	bl	800309c <HAL_GetTick>
 80062aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ac:	e00a      	b.n	80062c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ae:	f7fc fef5 	bl	800309c <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062bc:	4293      	cmp	r3, r2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e0b8      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062c4:	4b40      	ldr	r3, [pc, #256]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80062c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1ee      	bne.n	80062ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d105      	bne.n	80062e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062d6:	4b3c      	ldr	r3, [pc, #240]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	4a3b      	ldr	r2, [pc, #236]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80062dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 80a4 	beq.w	8006434 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062ec:	4b36      	ldr	r3, [pc, #216]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 030c 	and.w	r3, r3, #12
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d06b      	beq.n	80063d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d149      	bne.n	8006394 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006300:	4b31      	ldr	r3, [pc, #196]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a30      	ldr	r2, [pc, #192]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800630a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630c:	f7fc fec6 	bl	800309c <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006314:	f7fc fec2 	bl	800309c <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e087      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006326:	4b28      	ldr	r3, [pc, #160]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1f0      	bne.n	8006314 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69da      	ldr	r2, [r3, #28]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	019b      	lsls	r3, r3, #6
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	085b      	lsrs	r3, r3, #1
 800634a:	3b01      	subs	r3, #1
 800634c:	041b      	lsls	r3, r3, #16
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	061b      	lsls	r3, r3, #24
 8006356:	4313      	orrs	r3, r2
 8006358:	4a1b      	ldr	r2, [pc, #108]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800635a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800635e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006360:	4b19      	ldr	r3, [pc, #100]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a18      	ldr	r2, [pc, #96]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800636a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636c:	f7fc fe96 	bl	800309c <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006374:	f7fc fe92 	bl	800309c <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e057      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006386:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0f0      	beq.n	8006374 <HAL_RCC_OscConfig+0x478>
 8006392:	e04f      	b.n	8006434 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006394:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a0b      	ldr	r2, [pc, #44]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800639a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800639e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a0:	f7fc fe7c 	bl	800309c <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a8:	f7fc fe78 	bl	800309c <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e03d      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ba:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f0      	bne.n	80063a8 <HAL_RCC_OscConfig+0x4ac>
 80063c6:	e035      	b.n	8006434 <HAL_RCC_OscConfig+0x538>
 80063c8:	40023800 	.word	0x40023800
 80063cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80063d0:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <HAL_RCC_OscConfig+0x544>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d028      	beq.n	8006430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d121      	bne.n	8006430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d11a      	bne.n	8006430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006400:	4013      	ands	r3, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006406:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006408:	4293      	cmp	r3, r2
 800640a:	d111      	bne.n	8006430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	3b01      	subs	r3, #1
 800641a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800641c:	429a      	cmp	r2, r3
 800641e:	d107      	bne.n	8006430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40023800 	.word	0x40023800

08006444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e0d0      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800645c:	4b6a      	ldr	r3, [pc, #424]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d910      	bls.n	800648c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800646a:	4b67      	ldr	r3, [pc, #412]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f023 020f 	bic.w	r2, r3, #15
 8006472:	4965      	ldr	r1, [pc, #404]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	4313      	orrs	r3, r2
 8006478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800647a:	4b63      	ldr	r3, [pc, #396]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d001      	beq.n	800648c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e0b8      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d020      	beq.n	80064da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064a4:	4b59      	ldr	r3, [pc, #356]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	4a58      	ldr	r2, [pc, #352]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064bc:	4b53      	ldr	r3, [pc, #332]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4a52      	ldr	r2, [pc, #328]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064c8:	4b50      	ldr	r3, [pc, #320]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	494d      	ldr	r1, [pc, #308]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d040      	beq.n	8006568 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d107      	bne.n	80064fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ee:	4b47      	ldr	r3, [pc, #284]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d115      	bne.n	8006526 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e07f      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d107      	bne.n	8006516 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006506:	4b41      	ldr	r3, [pc, #260]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d109      	bne.n	8006526 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e073      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006516:	4b3d      	ldr	r3, [pc, #244]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e06b      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006526:	4b39      	ldr	r3, [pc, #228]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f023 0203 	bic.w	r2, r3, #3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4936      	ldr	r1, [pc, #216]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 8006534:	4313      	orrs	r3, r2
 8006536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006538:	f7fc fdb0 	bl	800309c <HAL_GetTick>
 800653c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653e:	e00a      	b.n	8006556 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006540:	f7fc fdac 	bl	800309c <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	f241 3288 	movw	r2, #5000	; 0x1388
 800654e:	4293      	cmp	r3, r2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e053      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006556:	4b2d      	ldr	r3, [pc, #180]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 020c 	and.w	r2, r3, #12
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	429a      	cmp	r2, r3
 8006566:	d1eb      	bne.n	8006540 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006568:	4b27      	ldr	r3, [pc, #156]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d210      	bcs.n	8006598 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006576:	4b24      	ldr	r3, [pc, #144]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f023 020f 	bic.w	r2, r3, #15
 800657e:	4922      	ldr	r1, [pc, #136]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	4313      	orrs	r3, r2
 8006584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006586:	4b20      	ldr	r3, [pc, #128]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d001      	beq.n	8006598 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e032      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065a4:	4b19      	ldr	r3, [pc, #100]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4916      	ldr	r1, [pc, #88]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80065c2:	4b12      	ldr	r3, [pc, #72]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	490e      	ldr	r1, [pc, #56]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065d6:	f000 f821 	bl	800661c <HAL_RCC_GetSysClockFreq>
 80065da:	4601      	mov	r1, r0
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	091b      	lsrs	r3, r3, #4
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	4a0a      	ldr	r2, [pc, #40]	; (8006610 <HAL_RCC_ClockConfig+0x1cc>)
 80065e8:	5cd3      	ldrb	r3, [r2, r3]
 80065ea:	fa21 f303 	lsr.w	r3, r1, r3
 80065ee:	4a09      	ldr	r2, [pc, #36]	; (8006614 <HAL_RCC_ClockConfig+0x1d0>)
 80065f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065f2:	4b09      	ldr	r3, [pc, #36]	; (8006618 <HAL_RCC_ClockConfig+0x1d4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fc fb90 	bl	8002d1c <HAL_InitTick>

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40023c00 	.word	0x40023c00
 800660c:	40023800 	.word	0x40023800
 8006610:	08028e90 	.word	0x08028e90
 8006614:	2000002c 	.word	0x2000002c
 8006618:	20000030 	.word	0x20000030

0800661c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800661c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	2300      	movs	r3, #0
 800662c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006632:	4b50      	ldr	r3, [pc, #320]	; (8006774 <HAL_RCC_GetSysClockFreq+0x158>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 030c 	and.w	r3, r3, #12
 800663a:	2b04      	cmp	r3, #4
 800663c:	d007      	beq.n	800664e <HAL_RCC_GetSysClockFreq+0x32>
 800663e:	2b08      	cmp	r3, #8
 8006640:	d008      	beq.n	8006654 <HAL_RCC_GetSysClockFreq+0x38>
 8006642:	2b00      	cmp	r3, #0
 8006644:	f040 808d 	bne.w	8006762 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006648:	4b4b      	ldr	r3, [pc, #300]	; (8006778 <HAL_RCC_GetSysClockFreq+0x15c>)
 800664a:	60bb      	str	r3, [r7, #8]
      break;
 800664c:	e08c      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800664e:	4b4b      	ldr	r3, [pc, #300]	; (800677c <HAL_RCC_GetSysClockFreq+0x160>)
 8006650:	60bb      	str	r3, [r7, #8]
      break;
 8006652:	e089      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006654:	4b47      	ldr	r3, [pc, #284]	; (8006774 <HAL_RCC_GetSysClockFreq+0x158>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800665c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800665e:	4b45      	ldr	r3, [pc, #276]	; (8006774 <HAL_RCC_GetSysClockFreq+0x158>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d023      	beq.n	80066b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800666a:	4b42      	ldr	r3, [pc, #264]	; (8006774 <HAL_RCC_GetSysClockFreq+0x158>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	099b      	lsrs	r3, r3, #6
 8006670:	f04f 0400 	mov.w	r4, #0
 8006674:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	ea03 0501 	and.w	r5, r3, r1
 8006680:	ea04 0602 	and.w	r6, r4, r2
 8006684:	4a3d      	ldr	r2, [pc, #244]	; (800677c <HAL_RCC_GetSysClockFreq+0x160>)
 8006686:	fb02 f106 	mul.w	r1, r2, r6
 800668a:	2200      	movs	r2, #0
 800668c:	fb02 f205 	mul.w	r2, r2, r5
 8006690:	440a      	add	r2, r1
 8006692:	493a      	ldr	r1, [pc, #232]	; (800677c <HAL_RCC_GetSysClockFreq+0x160>)
 8006694:	fba5 0101 	umull	r0, r1, r5, r1
 8006698:	1853      	adds	r3, r2, r1
 800669a:	4619      	mov	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f04f 0400 	mov.w	r4, #0
 80066a2:	461a      	mov	r2, r3
 80066a4:	4623      	mov	r3, r4
 80066a6:	f7f9 fe03 	bl	80002b0 <__aeabi_uldivmod>
 80066aa:	4603      	mov	r3, r0
 80066ac:	460c      	mov	r4, r1
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e049      	b.n	8006746 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066b2:	4b30      	ldr	r3, [pc, #192]	; (8006774 <HAL_RCC_GetSysClockFreq+0x158>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	099b      	lsrs	r3, r3, #6
 80066b8:	f04f 0400 	mov.w	r4, #0
 80066bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	ea03 0501 	and.w	r5, r3, r1
 80066c8:	ea04 0602 	and.w	r6, r4, r2
 80066cc:	4629      	mov	r1, r5
 80066ce:	4632      	mov	r2, r6
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	f04f 0400 	mov.w	r4, #0
 80066d8:	0154      	lsls	r4, r2, #5
 80066da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066de:	014b      	lsls	r3, r1, #5
 80066e0:	4619      	mov	r1, r3
 80066e2:	4622      	mov	r2, r4
 80066e4:	1b49      	subs	r1, r1, r5
 80066e6:	eb62 0206 	sbc.w	r2, r2, r6
 80066ea:	f04f 0300 	mov.w	r3, #0
 80066ee:	f04f 0400 	mov.w	r4, #0
 80066f2:	0194      	lsls	r4, r2, #6
 80066f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80066f8:	018b      	lsls	r3, r1, #6
 80066fa:	1a5b      	subs	r3, r3, r1
 80066fc:	eb64 0402 	sbc.w	r4, r4, r2
 8006700:	f04f 0100 	mov.w	r1, #0
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	00e2      	lsls	r2, r4, #3
 800670a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800670e:	00d9      	lsls	r1, r3, #3
 8006710:	460b      	mov	r3, r1
 8006712:	4614      	mov	r4, r2
 8006714:	195b      	adds	r3, r3, r5
 8006716:	eb44 0406 	adc.w	r4, r4, r6
 800671a:	f04f 0100 	mov.w	r1, #0
 800671e:	f04f 0200 	mov.w	r2, #0
 8006722:	02a2      	lsls	r2, r4, #10
 8006724:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006728:	0299      	lsls	r1, r3, #10
 800672a:	460b      	mov	r3, r1
 800672c:	4614      	mov	r4, r2
 800672e:	4618      	mov	r0, r3
 8006730:	4621      	mov	r1, r4
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f04f 0400 	mov.w	r4, #0
 8006738:	461a      	mov	r2, r3
 800673a:	4623      	mov	r3, r4
 800673c:	f7f9 fdb8 	bl	80002b0 <__aeabi_uldivmod>
 8006740:	4603      	mov	r3, r0
 8006742:	460c      	mov	r4, r1
 8006744:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <HAL_RCC_GetSysClockFreq+0x158>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	0c1b      	lsrs	r3, r3, #16
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	3301      	adds	r3, #1
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	fbb2 f3f3 	udiv	r3, r2, r3
 800675e:	60bb      	str	r3, [r7, #8]
      break;
 8006760:	e002      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006764:	60bb      	str	r3, [r7, #8]
      break;
 8006766:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006768:	68bb      	ldr	r3, [r7, #8]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006772:	bf00      	nop
 8006774:	40023800 	.word	0x40023800
 8006778:	00f42400 	.word	0x00f42400
 800677c:	017d7840 	.word	0x017d7840

08006780 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006784:	4b03      	ldr	r3, [pc, #12]	; (8006794 <HAL_RCC_GetHCLKFreq+0x14>)
 8006786:	681b      	ldr	r3, [r3, #0]
}
 8006788:	4618      	mov	r0, r3
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	2000002c 	.word	0x2000002c

08006798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800679c:	f7ff fff0 	bl	8006780 <HAL_RCC_GetHCLKFreq>
 80067a0:	4601      	mov	r1, r0
 80067a2:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	0a9b      	lsrs	r3, r3, #10
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	4a03      	ldr	r2, [pc, #12]	; (80067bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80067ae:	5cd3      	ldrb	r3, [r2, r3]
 80067b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40023800 	.word	0x40023800
 80067bc:	08028ea0 	.word	0x08028ea0

080067c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067c4:	f7ff ffdc 	bl	8006780 <HAL_RCC_GetHCLKFreq>
 80067c8:	4601      	mov	r1, r0
 80067ca:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	0b5b      	lsrs	r3, r3, #13
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	4a03      	ldr	r2, [pc, #12]	; (80067e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067d6:	5cd3      	ldrb	r3, [r2, r3]
 80067d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067dc:	4618      	mov	r0, r3
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40023800 	.word	0x40023800
 80067e4:	08028ea0 	.word	0x08028ea0

080067e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	220f      	movs	r2, #15
 80067f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067f8:	4b12      	ldr	r3, [pc, #72]	; (8006844 <HAL_RCC_GetClockConfig+0x5c>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 0203 	and.w	r2, r3, #3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006804:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <HAL_RCC_GetClockConfig+0x5c>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006810:	4b0c      	ldr	r3, [pc, #48]	; (8006844 <HAL_RCC_GetClockConfig+0x5c>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800681c:	4b09      	ldr	r3, [pc, #36]	; (8006844 <HAL_RCC_GetClockConfig+0x5c>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	08db      	lsrs	r3, r3, #3
 8006822:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800682a:	4b07      	ldr	r3, [pc, #28]	; (8006848 <HAL_RCC_GetClockConfig+0x60>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 020f 	and.w	r2, r3, #15
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	601a      	str	r2, [r3, #0]
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	40023800 	.word	0x40023800
 8006848:	40023c00 	.word	0x40023c00

0800684c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006864:	2300      	movs	r3, #0
 8006866:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d012      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006874:	4b69      	ldr	r3, [pc, #420]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	4a68      	ldr	r2, [pc, #416]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800687a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800687e:	6093      	str	r3, [r2, #8]
 8006880:	4b66      	ldr	r3, [pc, #408]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006888:	4964      	ldr	r1, [pc, #400]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800688a:	4313      	orrs	r3, r2
 800688c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006896:	2301      	movs	r3, #1
 8006898:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d017      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068a6:	4b5d      	ldr	r3, [pc, #372]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b4:	4959      	ldr	r1, [pc, #356]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068c4:	d101      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80068c6:	2301      	movs	r3, #1
 80068c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80068d2:	2301      	movs	r3, #1
 80068d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d017      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80068e2:	4b4e      	ldr	r3, [pc, #312]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	494a      	ldr	r1, [pc, #296]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006900:	d101      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006902:	2301      	movs	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800690e:	2301      	movs	r3, #1
 8006910:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800691e:	2301      	movs	r3, #1
 8006920:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 808b 	beq.w	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006930:	4b3a      	ldr	r3, [pc, #232]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	4a39      	ldr	r2, [pc, #228]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693a:	6413      	str	r3, [r2, #64]	; 0x40
 800693c:	4b37      	ldr	r3, [pc, #220]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006944:	60bb      	str	r3, [r7, #8]
 8006946:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006948:	4b35      	ldr	r3, [pc, #212]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a34      	ldr	r2, [pc, #208]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800694e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006954:	f7fc fba2 	bl	800309c <HAL_GetTick>
 8006958:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800695a:	e008      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800695c:	f7fc fb9e 	bl	800309c <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b64      	cmp	r3, #100	; 0x64
 8006968:	d901      	bls.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e355      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800696e:	4b2c      	ldr	r3, [pc, #176]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f0      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800697a:	4b28      	ldr	r3, [pc, #160]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006982:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d035      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	429a      	cmp	r2, r3
 8006996:	d02e      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006998:	4b20      	ldr	r3, [pc, #128]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800699a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069a2:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	4a1d      	ldr	r2, [pc, #116]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069ae:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b2:	4a1a      	ldr	r2, [pc, #104]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80069ba:	4a18      	ldr	r2, [pc, #96]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069c0:	4b16      	ldr	r3, [pc, #88]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d114      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069cc:	f7fc fb66 	bl	800309c <HAL_GetTick>
 80069d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d2:	e00a      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069d4:	f7fc fb62 	bl	800309c <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d901      	bls.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e317      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ea:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0ee      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a02:	d111      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006a04:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a10:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a12:	400b      	ands	r3, r1
 8006a14:	4901      	ldr	r1, [pc, #4]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	608b      	str	r3, [r1, #8]
 8006a1a:	e00b      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	40007000 	.word	0x40007000
 8006a24:	0ffffcff 	.word	0x0ffffcff
 8006a28:	4bb0      	ldr	r3, [pc, #704]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	4aaf      	ldr	r2, [pc, #700]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a32:	6093      	str	r3, [r2, #8]
 8006a34:	4bad      	ldr	r3, [pc, #692]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a40:	49aa      	ldr	r1, [pc, #680]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0310 	and.w	r3, r3, #16
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d010      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a52:	4ba6      	ldr	r3, [pc, #664]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a58:	4aa4      	ldr	r2, [pc, #656]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a62:	4ba2      	ldr	r3, [pc, #648]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	499f      	ldr	r1, [pc, #636]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a80:	4b9a      	ldr	r3, [pc, #616]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a8e:	4997      	ldr	r1, [pc, #604]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006aa2:	4b92      	ldr	r3, [pc, #584]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ab0:	498e      	ldr	r1, [pc, #568]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ac4:	4b89      	ldr	r3, [pc, #548]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad2:	4986      	ldr	r1, [pc, #536]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ae6:	4b81      	ldr	r3, [pc, #516]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	497d      	ldr	r1, [pc, #500]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b08:	4b78      	ldr	r3, [pc, #480]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0e:	f023 0203 	bic.w	r2, r3, #3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b16:	4975      	ldr	r1, [pc, #468]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b2a:	4b70      	ldr	r3, [pc, #448]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b30:	f023 020c 	bic.w	r2, r3, #12
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b38:	496c      	ldr	r1, [pc, #432]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b4c:	4b67      	ldr	r3, [pc, #412]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5a:	4964      	ldr	r1, [pc, #400]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b6e:	4b5f      	ldr	r3, [pc, #380]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7c:	495b      	ldr	r1, [pc, #364]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b90:	4b56      	ldr	r3, [pc, #344]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9e:	4953      	ldr	r1, [pc, #332]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006bb2:	4b4e      	ldr	r3, [pc, #312]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc0:	494a      	ldr	r1, [pc, #296]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006bd4:	4b45      	ldr	r3, [pc, #276]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be2:	4942      	ldr	r1, [pc, #264]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006bf6:	4b3d      	ldr	r3, [pc, #244]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c04:	4939      	ldr	r1, [pc, #228]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c18:	4b34      	ldr	r3, [pc, #208]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c26:	4931      	ldr	r1, [pc, #196]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d011      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c3a:	4b2c      	ldr	r3, [pc, #176]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c48:	4928      	ldr	r1, [pc, #160]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c58:	d101      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0308 	and.w	r3, r3, #8
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c7a:	4b1c      	ldr	r3, [pc, #112]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c88:	4918      	ldr	r1, [pc, #96]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c9c:	4b13      	ldr	r3, [pc, #76]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cac:	490f      	ldr	r1, [pc, #60]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d005      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cc2:	f040 80d8 	bne.w	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a08      	ldr	r2, [pc, #32]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ccc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd2:	f7fc f9e3 	bl	800309c <HAL_GetTick>
 8006cd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cd8:	e00a      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006cda:	f7fc f9df 	bl	800309c <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b64      	cmp	r3, #100	; 0x64
 8006ce6:	d903      	bls.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e196      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006cec:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cf0:	4b6c      	ldr	r3, [pc, #432]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1ee      	bne.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d021      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d11d      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d10:	4b64      	ldr	r3, [pc, #400]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d16:	0c1b      	lsrs	r3, r3, #16
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d1e:	4b61      	ldr	r3, [pc, #388]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d24:	0e1b      	lsrs	r3, r3, #24
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	019a      	lsls	r2, r3, #6
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	431a      	orrs	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	061b      	lsls	r3, r3, #24
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	071b      	lsls	r3, r3, #28
 8006d44:	4957      	ldr	r1, [pc, #348]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d60:	d00a      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d02e      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d76:	d129      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d78:	4b4a      	ldr	r3, [pc, #296]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d7e:	0c1b      	lsrs	r3, r3, #16
 8006d80:	f003 0303 	and.w	r3, r3, #3
 8006d84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d86:	4b47      	ldr	r3, [pc, #284]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d8c:	0f1b      	lsrs	r3, r3, #28
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	019a      	lsls	r2, r3, #6
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	041b      	lsls	r3, r3, #16
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	061b      	lsls	r3, r3, #24
 8006da6:	431a      	orrs	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	071b      	lsls	r3, r3, #28
 8006dac:	493d      	ldr	r1, [pc, #244]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006db4:	4b3b      	ldr	r3, [pc, #236]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dba:	f023 021f 	bic.w	r2, r3, #31
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	4937      	ldr	r1, [pc, #220]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01d      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006dd8:	4b32      	ldr	r3, [pc, #200]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dde:	0e1b      	lsrs	r3, r3, #24
 8006de0:	f003 030f 	and.w	r3, r3, #15
 8006de4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006de6:	4b2f      	ldr	r3, [pc, #188]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dec:	0f1b      	lsrs	r3, r3, #28
 8006dee:	f003 0307 	and.w	r3, r3, #7
 8006df2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	019a      	lsls	r2, r3, #6
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	431a      	orrs	r2, r3
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	061b      	lsls	r3, r3, #24
 8006e06:	431a      	orrs	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	071b      	lsls	r3, r3, #28
 8006e0c:	4925      	ldr	r1, [pc, #148]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d011      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	019a      	lsls	r2, r3, #6
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	061b      	lsls	r3, r3, #24
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	071b      	lsls	r3, r3, #28
 8006e3c:	4919      	ldr	r1, [pc, #100]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e44:	4b17      	ldr	r3, [pc, #92]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a16      	ldr	r2, [pc, #88]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e50:	f7fc f924 	bl	800309c <HAL_GetTick>
 8006e54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e56:	e008      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e58:	f7fc f920 	bl	800309c <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b64      	cmp	r3, #100	; 0x64
 8006e64:	d901      	bls.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e0d7      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0f0      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	f040 80cd 	bne.w	8007018 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a08      	ldr	r2, [pc, #32]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e8a:	f7fc f907 	bl	800309c <HAL_GetTick>
 8006e8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e90:	e00a      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e92:	f7fc f903 	bl	800309c <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b64      	cmp	r3, #100	; 0x64
 8006e9e:	d903      	bls.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e0ba      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006ea4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ea8:	4b5e      	ldr	r3, [pc, #376]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb4:	d0ed      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d009      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d02e      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d12a      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006ede:	4b51      	ldr	r3, [pc, #324]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006eec:	4b4d      	ldr	r3, [pc, #308]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef2:	0f1b      	lsrs	r3, r3, #28
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	019a      	lsls	r2, r3, #6
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	041b      	lsls	r3, r3, #16
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	061b      	lsls	r3, r3, #24
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	071b      	lsls	r3, r3, #28
 8006f12:	4944      	ldr	r1, [pc, #272]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f1a:	4b42      	ldr	r3, [pc, #264]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	493d      	ldr	r1, [pc, #244]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d022      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f48:	d11d      	bne.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f4a:	4b36      	ldr	r3, [pc, #216]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f50:	0e1b      	lsrs	r3, r3, #24
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f58:	4b32      	ldr	r3, [pc, #200]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f5e:	0f1b      	lsrs	r3, r3, #28
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	019a      	lsls	r2, r3, #6
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	041b      	lsls	r3, r3, #16
 8006f72:	431a      	orrs	r2, r3
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	061b      	lsls	r3, r3, #24
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	071b      	lsls	r3, r3, #28
 8006f7e:	4929      	ldr	r1, [pc, #164]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0308 	and.w	r3, r3, #8
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d028      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f92:	4b24      	ldr	r3, [pc, #144]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f98:	0e1b      	lsrs	r3, r3, #24
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006fa0:	4b20      	ldr	r3, [pc, #128]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa6:	0c1b      	lsrs	r3, r3, #16
 8006fa8:	f003 0303 	and.w	r3, r3, #3
 8006fac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	019a      	lsls	r2, r3, #6
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	041b      	lsls	r3, r3, #16
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	061b      	lsls	r3, r3, #24
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	071b      	lsls	r3, r3, #28
 8006fc6:	4917      	ldr	r1, [pc, #92]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006fce:	4b15      	ldr	r3, [pc, #84]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	4911      	ldr	r1, [pc, #68]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006fe4:	4b0f      	ldr	r3, [pc, #60]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a0e      	ldr	r2, [pc, #56]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff0:	f7fc f854 	bl	800309c <HAL_GetTick>
 8006ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ff6:	e008      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ff8:	f7fc f850 	bl	800309c <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b64      	cmp	r3, #100	; 0x64
 8007004:	d901      	bls.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e007      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800700a:	4b06      	ldr	r3, [pc, #24]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007016:	d1ef      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800

08007028 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007046:	f040 8086 	bne.w	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800704a:	4b8d      	ldr	r3, [pc, #564]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800704c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007050:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007058:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007060:	d03e      	beq.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007066:	d073      	beq.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007068:	2b00      	cmp	r3, #0
 800706a:	d000      	beq.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800706c:	e074      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800706e:	4b84      	ldr	r3, [pc, #528]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d108      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800707a:	4b81      	ldr	r3, [pc, #516]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007082:	4a80      	ldr	r2, [pc, #512]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007084:	fbb2 f3f3 	udiv	r3, r2, r3
 8007088:	613b      	str	r3, [r7, #16]
 800708a:	e007      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800708c:	4b7c      	ldr	r3, [pc, #496]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007094:	4a7c      	ldr	r2, [pc, #496]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800709c:	4b78      	ldr	r3, [pc, #480]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a2:	0e1b      	lsrs	r3, r3, #24
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80070aa:	4b75      	ldr	r3, [pc, #468]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b0:	099b      	lsrs	r3, r3, #6
 80070b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	fb02 f203 	mul.w	r2, r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80070c4:	4b6e      	ldr	r3, [pc, #440]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	3301      	adds	r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	617b      	str	r3, [r7, #20]
        break;
 80070de:	e03b      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80070e0:	4b67      	ldr	r3, [pc, #412]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d108      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80070ec:	4b64      	ldr	r3, [pc, #400]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f4:	4a63      	ldr	r2, [pc, #396]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	e007      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80070fe:	4b60      	ldr	r3, [pc, #384]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007106:	4a60      	ldr	r2, [pc, #384]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007108:	fbb2 f3f3 	udiv	r3, r2, r3
 800710c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800710e:	4b5c      	ldr	r3, [pc, #368]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007114:	0e1b      	lsrs	r3, r3, #24
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800711c:	4b58      	ldr	r3, [pc, #352]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800711e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007122:	099b      	lsrs	r3, r3, #6
 8007124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	fb02 f203 	mul.w	r2, r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	fbb2 f3f3 	udiv	r3, r2, r3
 8007134:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007136:	4b52      	ldr	r3, [pc, #328]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800713c:	f003 031f 	and.w	r3, r3, #31
 8007140:	3301      	adds	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	fbb2 f3f3 	udiv	r3, r2, r3
 800714c:	617b      	str	r3, [r7, #20]
        break;
 800714e:	e003      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007150:	4b4e      	ldr	r3, [pc, #312]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007152:	617b      	str	r3, [r7, #20]
        break;
 8007154:	e000      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8007156:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800715e:	f040 8086 	bne.w	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007162:	4b47      	ldr	r3, [pc, #284]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007168:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007170:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007178:	d03e      	beq.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800717a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800717e:	d073      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d000      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007184:	e074      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007186:	4b3e      	ldr	r3, [pc, #248]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d108      	bne.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007192:	4b3b      	ldr	r3, [pc, #236]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800719a:	4a3a      	ldr	r2, [pc, #232]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800719c:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a0:	613b      	str	r3, [r7, #16]
 80071a2:	e007      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80071a4:	4b36      	ldr	r3, [pc, #216]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071ac:	4a36      	ldr	r2, [pc, #216]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80071ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80071b4:	4b32      	ldr	r3, [pc, #200]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ba:	0e1b      	lsrs	r3, r3, #24
 80071bc:	f003 030f 	and.w	r3, r3, #15
 80071c0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80071c2:	4b2f      	ldr	r3, [pc, #188]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c8:	099b      	lsrs	r3, r3, #6
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	fb02 f203 	mul.w	r2, r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071da:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80071dc:	4b28      	ldr	r3, [pc, #160]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071e2:	0a1b      	lsrs	r3, r3, #8
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f4:	617b      	str	r3, [r7, #20]
        break;
 80071f6:	e03b      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80071f8:	4b21      	ldr	r3, [pc, #132]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d108      	bne.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007204:	4b1e      	ldr	r3, [pc, #120]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800720c:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800720e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	e007      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007216:	4b1a      	ldr	r3, [pc, #104]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800721e:	4a1a      	ldr	r2, [pc, #104]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007220:	fbb2 f3f3 	udiv	r3, r2, r3
 8007224:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007226:	4b16      	ldr	r3, [pc, #88]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800722c:	0e1b      	lsrs	r3, r3, #24
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007234:	4b12      	ldr	r3, [pc, #72]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800723a:	099b      	lsrs	r3, r3, #6
 800723c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	fb02 f203 	mul.w	r2, r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	fbb2 f3f3 	udiv	r3, r2, r3
 800724c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800724e:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007254:	f003 031f 	and.w	r3, r3, #31
 8007258:	3301      	adds	r3, #1
 800725a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	fbb2 f3f3 	udiv	r3, r2, r3
 8007264:	617b      	str	r3, [r7, #20]
        break;
 8007266:	e003      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007268:	4b08      	ldr	r3, [pc, #32]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800726a:	617b      	str	r3, [r7, #20]
        break;
 800726c:	e000      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800726e:	bf00      	nop

  return frequency;
 8007270:	697b      	ldr	r3, [r7, #20]
}
 8007272:	4618      	mov	r0, r3
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	40023800 	.word	0x40023800
 8007284:	00f42400 	.word	0x00f42400
 8007288:	017d7840 	.word	0x017d7840
 800728c:	00bb8000 	.word	0x00bb8000

08007290 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e06b      	b.n	800737a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	7f5b      	ldrb	r3, [r3, #29]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d105      	bne.n	80072b8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7fb f9a0 	bl	80025f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	22ca      	movs	r2, #202	; 0xca
 80072c4:	625a      	str	r2, [r3, #36]	; 0x24
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2253      	movs	r2, #83	; 0x53
 80072cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fb00 	bl	80078d4 <RTC_EnterInitMode>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d008      	beq.n	80072ec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	22ff      	movs	r2, #255	; 0xff
 80072e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2204      	movs	r2, #4
 80072e6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e046      	b.n	800737a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6899      	ldr	r1, [r3, #8]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	4b23      	ldr	r3, [pc, #140]	; (8007384 <HAL_RTC_Init+0xf4>)
 80072f8:	400b      	ands	r3, r1
 80072fa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6899      	ldr	r1, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	431a      	orrs	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	68d2      	ldr	r2, [r2, #12]
 8007322:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6919      	ldr	r1, [r3, #16]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	041a      	lsls	r2, r3, #16
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007346:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0208 	bic.w	r2, r2, #8
 8007356:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	22ff      	movs	r2, #255	; 0xff
 8007370:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007378:	2300      	movs	r3, #0
  }
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	ff8fffbf 	.word	0xff8fffbf

08007388 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007388:	b590      	push	{r4, r7, lr}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	7f1b      	ldrb	r3, [r3, #28]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_RTC_SetTime+0x1c>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e0a8      	b.n	80074f6 <HAL_RTC_SetTime+0x16e>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2201      	movs	r2, #1
 80073a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2202      	movs	r2, #2
 80073ae:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d126      	bne.n	8007404 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d102      	bne.n	80073ca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2200      	movs	r2, #0
 80073c8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 faac 	bl	800792c <RTC_ByteToBcd2>
 80073d4:	4603      	mov	r3, r0
 80073d6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 faa5 	bl	800792c <RTC_ByteToBcd2>
 80073e2:	4603      	mov	r3, r0
 80073e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80073e6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	789b      	ldrb	r3, [r3, #2]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fa9d 	bl	800792c <RTC_ByteToBcd2>
 80073f2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80073f4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	7b1b      	ldrb	r3, [r3, #12]
 80073fc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]
 8007402:	e018      	b.n	8007436 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2200      	movs	r2, #0
 8007416:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	785b      	ldrb	r3, [r3, #1]
 8007422:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007424:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800742a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	7b1b      	ldrb	r3, [r3, #12]
 8007430:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	22ca      	movs	r2, #202	; 0xca
 800743c:	625a      	str	r2, [r3, #36]	; 0x24
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2253      	movs	r2, #83	; 0x53
 8007444:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fa44 	bl	80078d4 <RTC_EnterInitMode>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00b      	beq.n	800746a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	22ff      	movs	r2, #255	; 0xff
 8007458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2204      	movs	r2, #4
 800745e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e045      	b.n	80074f6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	6979      	ldr	r1, [r7, #20]
 8007470:	4b23      	ldr	r3, [pc, #140]	; (8007500 <HAL_RTC_SetTime+0x178>)
 8007472:	400b      	ands	r3, r1
 8007474:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007484:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6899      	ldr	r1, [r3, #8]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	431a      	orrs	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d111      	bne.n	80074e0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f9e1 	bl	8007884 <HAL_RTC_WaitForSynchro>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	22ff      	movs	r2, #255	; 0xff
 80074ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2204      	movs	r2, #4
 80074d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e00a      	b.n	80074f6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	22ff      	movs	r2, #255	; 0xff
 80074e6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2201      	movs	r2, #1
 80074ec:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80074f4:	2300      	movs	r3, #0
  }
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd90      	pop	{r4, r7, pc}
 80074fe:	bf00      	nop
 8007500:	007f7f7f 	.word	0x007f7f7f

08007504 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	7f1b      	ldrb	r3, [r3, #28]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d101      	bne.n	8007520 <HAL_RTC_SetDate+0x1c>
 800751c:	2302      	movs	r3, #2
 800751e:	e092      	b.n	8007646 <HAL_RTC_SetDate+0x142>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2202      	movs	r2, #2
 800752a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10e      	bne.n	8007550 <HAL_RTC_SetDate+0x4c>
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	785b      	ldrb	r3, [r3, #1]
 8007536:	f003 0310 	and.w	r3, r3, #16
 800753a:	2b00      	cmp	r3, #0
 800753c:	d008      	beq.n	8007550 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	f023 0310 	bic.w	r3, r3, #16
 8007546:	b2db      	uxtb	r3, r3
 8007548:	330a      	adds	r3, #10
 800754a:	b2da      	uxtb	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d11c      	bne.n	8007590 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	78db      	ldrb	r3, [r3, #3]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 f9e6 	bl	800792c <RTC_ByteToBcd2>
 8007560:	4603      	mov	r3, r0
 8007562:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f9df 	bl	800792c <RTC_ByteToBcd2>
 800756e:	4603      	mov	r3, r0
 8007570:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007572:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	789b      	ldrb	r3, [r3, #2]
 8007578:	4618      	mov	r0, r3
 800757a:	f000 f9d7 	bl	800792c <RTC_ByteToBcd2>
 800757e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007580:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e00e      	b.n	80075ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	78db      	ldrb	r3, [r3, #3]
 8007594:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800759c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80075a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	22ca      	movs	r2, #202	; 0xca
 80075b4:	625a      	str	r2, [r3, #36]	; 0x24
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2253      	movs	r2, #83	; 0x53
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f988 	bl	80078d4 <RTC_EnterInitMode>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00b      	beq.n	80075e2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	22ff      	movs	r2, #255	; 0xff
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2204      	movs	r2, #4
 80075d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e031      	b.n	8007646 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	6979      	ldr	r1, [r7, #20]
 80075e8:	4b19      	ldr	r3, [pc, #100]	; (8007650 <HAL_RTC_SetDate+0x14c>)
 80075ea:	400b      	ands	r3, r1
 80075ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075fc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b00      	cmp	r3, #0
 800760a:	d111      	bne.n	8007630 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 f939 	bl	8007884 <HAL_RTC_WaitForSynchro>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00b      	beq.n	8007630 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	22ff      	movs	r2, #255	; 0xff
 800761e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2204      	movs	r2, #4
 8007624:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e00a      	b.n	8007646 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	22ff      	movs	r2, #255	; 0xff
 8007636:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007644:	2300      	movs	r3, #0
  }
}
 8007646:	4618      	mov	r0, r3
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	bd90      	pop	{r4, r7, pc}
 800764e:	bf00      	nop
 8007650:	00ffff3f 	.word	0x00ffff3f

08007654 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007654:	b590      	push	{r4, r7, lr}
 8007656:	b089      	sub	sp, #36	; 0x24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007664:	2300      	movs	r3, #0
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	2300      	movs	r3, #0
 800766a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	7f1b      	ldrb	r3, [r3, #28]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d101      	bne.n	8007678 <HAL_RTC_SetAlarm+0x24>
 8007674:	2302      	movs	r3, #2
 8007676:	e101      	b.n	800787c <HAL_RTC_SetAlarm+0x228>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2201      	movs	r2, #1
 800767c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2202      	movs	r2, #2
 8007682:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d137      	bne.n	80076fa <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2200      	movs	r2, #0
 800769c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f942 	bl	800792c <RTC_ByteToBcd2>
 80076a8:	4603      	mov	r3, r0
 80076aa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	785b      	ldrb	r3, [r3, #1]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 f93b 	bl	800792c <RTC_ByteToBcd2>
 80076b6:	4603      	mov	r3, r0
 80076b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80076ba:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	789b      	ldrb	r3, [r3, #2]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 f933 	bl	800792c <RTC_ByteToBcd2>
 80076c6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80076c8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	7b1b      	ldrb	r3, [r3, #12]
 80076d0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80076d2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 f925 	bl	800792c <RTC_ByteToBcd2>
 80076e2:	4603      	mov	r3, r0
 80076e4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80076e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80076ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80076f4:	4313      	orrs	r3, r2
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	e023      	b.n	8007742 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2200      	movs	r2, #0
 800770c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800771a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007720:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	7b1b      	ldrb	r3, [r3, #12]
 8007726:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007728:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007730:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007732:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007738:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800773e:	4313      	orrs	r3, r2
 8007740:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	22ca      	movs	r2, #202	; 0xca
 8007754:	625a      	str	r2, [r3, #36]	; 0x24
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2253      	movs	r2, #83	; 0x53
 800775c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007766:	d13f      	bne.n	80077e8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689a      	ldr	r2, [r3, #8]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007776:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007786:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007788:	f7fb fc88 	bl	800309c <HAL_GetTick>
 800778c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800778e:	e013      	b.n	80077b8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007790:	f7fb fc84 	bl	800309c <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800779e:	d90b      	bls.n	80077b8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	22ff      	movs	r2, #255	; 0xff
 80077a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2203      	movs	r2, #3
 80077ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e061      	b.n	800787c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0e4      	beq.n	8007790 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077e4:	609a      	str	r2, [r3, #8]
 80077e6:	e03e      	b.n	8007866 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80077f6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007806:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007808:	f7fb fc48 	bl	800309c <HAL_GetTick>
 800780c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800780e:	e013      	b.n	8007838 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007810:	f7fb fc44 	bl	800309c <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800781e:	d90b      	bls.n	8007838 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	22ff      	movs	r2, #255	; 0xff
 8007826:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2203      	movs	r2, #3
 800782c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e021      	b.n	800787c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0e4      	beq.n	8007810 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007864:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	22ff      	movs	r2, #255	; 0xff
 800786c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3724      	adds	r7, #36	; 0x24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd90      	pop	{r4, r7, pc}

08007884 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800789e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078a0:	f7fb fbfc 	bl	800309c <HAL_GetTick>
 80078a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80078a6:	e009      	b.n	80078bc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80078a8:	f7fb fbf8 	bl	800309c <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078b6:	d901      	bls.n	80078bc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e007      	b.n	80078cc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0ee      	beq.n	80078a8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d119      	bne.n	8007922 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f04f 32ff 	mov.w	r2, #4294967295
 80078f6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078f8:	f7fb fbd0 	bl	800309c <HAL_GetTick>
 80078fc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80078fe:	e009      	b.n	8007914 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007900:	f7fb fbcc 	bl	800309c <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800790e:	d901      	bls.n	8007914 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e007      	b.n	8007924 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0ee      	beq.n	8007900 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800793a:	e005      	b.n	8007948 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3301      	adds	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	3b0a      	subs	r3, #10
 8007946:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	2b09      	cmp	r3, #9
 800794c:	d8f6      	bhi.n	800793c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	b2da      	uxtb	r2, r3
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	4313      	orrs	r3, r2
 800795a:	b2db      	uxtb	r3, r3
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	7f1b      	ldrb	r3, [r3, #28]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007980:	2302      	movs	r3, #2
 8007982:	e03e      	b.n	8007a02 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2201      	movs	r2, #1
 8007988:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2202      	movs	r2, #2
 800798e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689a      	ldr	r2, [r3, #8]
 8007996:	4b1e      	ldr	r3, [pc, #120]	; (8007a10 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007998:	4013      	ands	r3, r2
 800799a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	22ca      	movs	r2, #202	; 0xca
 80079aa:	625a      	str	r2, [r3, #36]	; 0x24
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2253      	movs	r2, #83	; 0x53
 80079b2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0206 	bic.w	r2, r2, #6
 80079c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079ea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	22ff      	movs	r2, #255	; 0xff
 80079f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	fffff7f7 	.word	0xfffff7f7

08007a14 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e149      	b.n	8007cc6 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d106      	bne.n	8007a4c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fb f8fe 	bl	8002c48 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f94f 	bl	8007cf8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d007      	beq.n	8007a72 <HAL_SAI_Init+0x5e>
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d302      	bcc.n	8007a6c <HAL_SAI_Init+0x58>
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d006      	beq.n	8007a78 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007a6a:	e008      	b.n	8007a7e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61fb      	str	r3, [r7, #28]
      break;
 8007a70:	e005      	b.n	8007a7e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007a72:	2310      	movs	r3, #16
 8007a74:	61fb      	str	r3, [r7, #28]
      break;
 8007a76:	e002      	b.n	8007a7e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007a78:	2320      	movs	r3, #32
 8007a7a:	61fb      	str	r3, [r7, #28]
      break;
 8007a7c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d81d      	bhi.n	8007ac2 <HAL_SAI_Init+0xae>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <HAL_SAI_Init+0x78>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007a9d 	.word	0x08007a9d
 8007a90:	08007aa3 	.word	0x08007aa3
 8007a94:	08007aab 	.word	0x08007aab
 8007a98:	08007ab3 	.word	0x08007ab3
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007aa0:	e010      	b.n	8007ac4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aa6:	617b      	str	r3, [r7, #20]
      }
      break;
 8007aa8:	e00c      	b.n	8007ac4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007aae:	617b      	str	r3, [r7, #20]
      }
      break;
 8007ab0:	e008      	b.n	8007ac4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ab6:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007ac0:	e000      	b.n	8007ac4 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007ac2:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a81      	ldr	r2, [pc, #516]	; (8007cd0 <HAL_SAI_Init+0x2bc>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d004      	beq.n	8007ad8 <HAL_SAI_Init+0xc4>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a80      	ldr	r2, [pc, #512]	; (8007cd4 <HAL_SAI_Init+0x2c0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d103      	bne.n	8007ae0 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007ad8:	4a7f      	ldr	r2, [pc, #508]	; (8007cd8 <HAL_SAI_Init+0x2c4>)
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	6013      	str	r3, [r2, #0]
 8007ade:	e002      	b.n	8007ae6 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007ae0:	4a7e      	ldr	r2, [pc, #504]	; (8007cdc <HAL_SAI_Init+0x2c8>)
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d043      	beq.n	8007b76 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a76      	ldr	r2, [pc, #472]	; (8007cd0 <HAL_SAI_Init+0x2bc>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d004      	beq.n	8007b06 <HAL_SAI_Init+0xf2>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a74      	ldr	r2, [pc, #464]	; (8007cd4 <HAL_SAI_Init+0x2c0>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d104      	bne.n	8007b10 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007b06:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007b0a:	f7ff fa8d 	bl	8007028 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b0e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a72      	ldr	r2, [pc, #456]	; (8007ce0 <HAL_SAI_Init+0x2cc>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d004      	beq.n	8007b24 <HAL_SAI_Init+0x110>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a71      	ldr	r2, [pc, #452]	; (8007ce4 <HAL_SAI_Init+0x2d0>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d104      	bne.n	8007b2e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007b24:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007b28:	f7ff fa7e 	bl	8007028 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b2c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4613      	mov	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	461a      	mov	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	025b      	lsls	r3, r3, #9
 8007b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b44:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4a67      	ldr	r2, [pc, #412]	; (8007ce8 <HAL_SAI_Init+0x2d4>)
 8007b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4e:	08da      	lsrs	r2, r3, #3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8007b54:	68f9      	ldr	r1, [r7, #12]
 8007b56:	4b64      	ldr	r3, [pc, #400]	; (8007ce8 <HAL_SAI_Init+0x2d4>)
 8007b58:	fba3 2301 	umull	r2, r3, r3, r1
 8007b5c:	08da      	lsrs	r2, r3, #3
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	1aca      	subs	r2, r1, r3
 8007b68:	2a08      	cmp	r2, #8
 8007b6a:	d904      	bls.n	8007b76 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <HAL_SAI_Init+0x172>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d109      	bne.n	8007b9a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <HAL_SAI_Init+0x17e>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e001      	b.n	8007b96 <HAL_SAI_Init+0x182>
 8007b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b96:	61bb      	str	r3, [r7, #24]
 8007b98:	e008      	b.n	8007bac <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d102      	bne.n	8007ba8 <HAL_SAI_Init+0x194>
 8007ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ba6:	e000      	b.n	8007baa <HAL_SAI_Init+0x196>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6819      	ldr	r1, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4b4d      	ldr	r3, [pc, #308]	; (8007cec <HAL_SAI_Init+0x2d8>)
 8007bb8:	400b      	ands	r3, r1
 8007bba:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6819      	ldr	r1, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007bd0:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007be4:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007bf0:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	051b      	lsls	r3, r3, #20
 8007bf8:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6859      	ldr	r1, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	4b38      	ldr	r3, [pc, #224]	; (8007cf0 <HAL_SAI_Init+0x2dc>)
 8007c0e:	400b      	ands	r3, r1
 8007c10:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6859      	ldr	r1, [r3, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699a      	ldr	r2, [r3, #24]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6899      	ldr	r1, [r3, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b2e      	ldr	r3, [pc, #184]	; (8007cf4 <HAL_SAI_Init+0x2e0>)
 8007c3c:	400b      	ands	r3, r1
 8007c3e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6899      	ldr	r1, [r3, #8]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007c50:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007c56:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007c5c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c62:	3b01      	subs	r3, #1
 8007c64:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8007c66:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68d9      	ldr	r1, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007c7e:	400b      	ands	r3, r1
 8007c80:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68d9      	ldr	r1, [r3, #12]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c90:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c96:	041b      	lsls	r3, r3, #16
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3720      	adds	r7, #32
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	40015804 	.word	0x40015804
 8007cd4:	40015824 	.word	0x40015824
 8007cd8:	40015800 	.word	0x40015800
 8007cdc:	40015c00 	.word	0x40015c00
 8007ce0:	40015c04 	.word	0x40015c04
 8007ce4:	40015c24 	.word	0x40015c24
 8007ce8:	cccccccd 	.word	0xcccccccd
 8007cec:	ff05c010 	.word	0xff05c010
 8007cf0:	ffff1ff0 	.word	0xffff1ff0
 8007cf4:	fff88000 	.word	0xfff88000

08007cf8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007cf8:	b490      	push	{r4, r7}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007d00:	4b16      	ldr	r3, [pc, #88]	; (8007d5c <SAI_Disable+0x64>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a16      	ldr	r2, [pc, #88]	; (8007d60 <SAI_Disable+0x68>)
 8007d06:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0a:	0b1b      	lsrs	r3, r3, #12
 8007d0c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d20:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007d22:	4623      	mov	r3, r4
 8007d24:	1e5c      	subs	r4, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d3e:	e006      	b.n	8007d4e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e9      	bne.n	8007d22 <SAI_Disable+0x2a>

  return status;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bc90      	pop	{r4, r7}
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	2000002c 	.word	0x2000002c
 8007d60:	95cbec1b 	.word	0x95cbec1b

08007d64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e022      	b.n	8007dbc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d105      	bne.n	8007d8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7fa fc4f 	bl	800262c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2203      	movs	r2, #3
 8007d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f814 	bl	8007dc4 <HAL_SD_InitCard>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e00a      	b.n	8007dbc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007dc4:	b5b0      	push	{r4, r5, r7, lr}
 8007dc6:	b08e      	sub	sp, #56	; 0x38
 8007dc8:	af04      	add	r7, sp, #16
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007de0:	2376      	movs	r3, #118	; 0x76
 8007de2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681d      	ldr	r5, [r3, #0]
 8007de8:	466c      	mov	r4, sp
 8007dea:	f107 0314 	add.w	r3, r7, #20
 8007dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007df6:	f107 0308 	add.w	r3, r7, #8
 8007dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f003 f869 	bl	800aed4 <SDMMC_Init>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e03b      	b.n	8007e8c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e22:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f003 f88c 	bl	800af46 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e3c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fde6 	bl	8008a10 <SD_PowerON>
 8007e44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e013      	b.n	8007e8c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fd05 	bl	8008874 <SD_InitCard>
 8007e6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00b      	beq.n	8007e8a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e000      	b.n	8007e8c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3728      	adds	r7, #40	; 0x28
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bdb0      	pop	{r4, r5, r7, pc}

08007e94 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08c      	sub	sp, #48	; 0x30
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d107      	bne.n	8007ebc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e0cc      	b.n	8008056 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	f040 80c5 	bne.w	8008054 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	441a      	add	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d907      	bls.n	8007eee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e0b3      	b.n	8008056 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2203      	movs	r2, #3
 8007ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2200      	movs	r2, #0
 8007efc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	4a53      	ldr	r2, [pc, #332]	; (8008060 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007f14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	4a52      	ldr	r2, [pc, #328]	; (8008064 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8007f1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	2200      	movs	r2, #0
 8007f24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3380      	adds	r3, #128	; 0x80
 8007f30:	4619      	mov	r1, r3
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	025b      	lsls	r3, r3, #9
 8007f38:	089b      	lsrs	r3, r3, #2
 8007f3a:	f7fb fddb 	bl	8003af4 <HAL_DMA_Start_IT>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d017      	beq.n	8007f74 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007f52:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a43      	ldr	r2, [pc, #268]	; (8008068 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e070      	b.n	8008056 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0208 	orr.w	r2, r2, #8
 8007f82:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d002      	beq.n	8007f92 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	025b      	lsls	r3, r3, #9
 8007f90:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f003 f866 	bl	800b06c <SDMMC_CmdBlockLength>
 8007fa0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00f      	beq.n	8007fc8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a2e      	ldr	r2, [pc, #184]	; (8008068 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007fae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e046      	b.n	8008056 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fcc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	025b      	lsls	r3, r3, #9
 8007fd2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007fd4:	2390      	movs	r3, #144	; 0x90
 8007fd6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f107 0210 	add.w	r2, r7, #16
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f003 f810 	bl	800b014 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d90a      	bls.n	8008010 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2282      	movs	r2, #130	; 0x82
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008006:	4618      	mov	r0, r3
 8008008:	f003 f874 	bl	800b0f4 <SDMMC_CmdReadMultiBlock>
 800800c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800800e:	e009      	b.n	8008024 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2281      	movs	r2, #129	; 0x81
 8008014:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800801c:	4618      	mov	r0, r3
 800801e:	f003 f847 	bl	800b0b0 <SDMMC_CmdReadSingleBlock>
 8008022:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008026:	2b00      	cmp	r3, #0
 8008028:	d012      	beq.n	8008050 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a0e      	ldr	r2, [pc, #56]	; (8008068 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008030:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008038:	431a      	orrs	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e002      	b.n	8008056 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	e000      	b.n	8008056 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008054:	2302      	movs	r3, #2
  }
}
 8008056:	4618      	mov	r0, r3
 8008058:	3730      	adds	r7, #48	; 0x30
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	0800875f 	.word	0x0800875f
 8008064:	080087d1 	.word	0x080087d1
 8008068:	004005ff 	.word	0x004005ff

0800806c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08c      	sub	sp, #48	; 0x30
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d107      	bne.n	8008094 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e0cf      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b01      	cmp	r3, #1
 800809e:	f040 80c8 	bne.w	8008232 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80080a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	441a      	add	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d907      	bls.n	80080c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e0b6      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2203      	movs	r2, #3
 80080ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 021a 	orr.w	r2, r2, #26
 80080e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ea:	4a54      	ldr	r2, [pc, #336]	; (800823c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80080ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f2:	4a53      	ldr	r2, [pc, #332]	; (8008240 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80080f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fa:	2200      	movs	r2, #0
 80080fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008102:	2b01      	cmp	r3, #1
 8008104:	d002      	beq.n	800810c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	025b      	lsls	r3, r3, #9
 800810a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008114:	4618      	mov	r0, r3
 8008116:	f002 ffa9 	bl	800b06c <SDMMC_CmdBlockLength>
 800811a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00f      	beq.n	8008142 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a47      	ldr	r2, [pc, #284]	; (8008244 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008128:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	431a      	orrs	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e078      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d90a      	bls.n	800815e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	22a0      	movs	r2, #160	; 0xa0
 800814c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008154:	4618      	mov	r0, r3
 8008156:	f003 f811 	bl	800b17c <SDMMC_CmdWriteMultiBlock>
 800815a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800815c:	e009      	b.n	8008172 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2290      	movs	r2, #144	; 0x90
 8008162:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800816a:	4618      	mov	r0, r3
 800816c:	f002 ffe4 	bl	800b138 <SDMMC_CmdWriteSingleBlock>
 8008170:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008174:	2b00      	cmp	r3, #0
 8008176:	d012      	beq.n	800819e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a31      	ldr	r2, [pc, #196]	; (8008244 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800817e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008186:	431a      	orrs	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e04a      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f042 0208 	orr.w	r2, r2, #8
 80081ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3380      	adds	r3, #128	; 0x80
 80081ba:	461a      	mov	r2, r3
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	025b      	lsls	r3, r3, #9
 80081c0:	089b      	lsrs	r3, r3, #2
 80081c2:	f7fb fc97 	bl	8003af4 <HAL_DMA_Start_IT>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d01a      	beq.n	8008202 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 021a 	bic.w	r2, r2, #26
 80081da:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a18      	ldr	r2, [pc, #96]	; (8008244 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80081e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e018      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008202:	f04f 33ff 	mov.w	r3, #4294967295
 8008206:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	025b      	lsls	r3, r3, #9
 800820c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800820e:	2390      	movs	r3, #144	; 0x90
 8008210:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008212:	2300      	movs	r3, #0
 8008214:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008216:	2300      	movs	r3, #0
 8008218:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800821a:	2301      	movs	r3, #1
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f107 0210 	add.w	r2, r7, #16
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f002 fef3 	bl	800b014 <SDMMC_ConfigData>

      return HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	e000      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008232:	2302      	movs	r3, #2
  }
}
 8008234:	4618      	mov	r0, r3
 8008236:	3730      	adds	r7, #48	; 0x30
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	08008735 	.word	0x08008735
 8008240:	080087d1 	.word	0x080087d1
 8008244:	004005ff 	.word	0x004005ff

08008248 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800826a:	0f9b      	lsrs	r3, r3, #30
 800826c:	b2da      	uxtb	r2, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008276:	0e9b      	lsrs	r3, r3, #26
 8008278:	b2db      	uxtb	r3, r3
 800827a:	f003 030f 	and.w	r3, r3, #15
 800827e:	b2da      	uxtb	r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008288:	0e1b      	lsrs	r3, r3, #24
 800828a:	b2db      	uxtb	r3, r3
 800828c:	f003 0303 	and.w	r3, r3, #3
 8008290:	b2da      	uxtb	r2, r3
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800829a:	0c1b      	lsrs	r3, r3, #16
 800829c:	b2da      	uxtb	r2, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082a6:	0a1b      	lsrs	r3, r3, #8
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082bc:	0d1b      	lsrs	r3, r3, #20
 80082be:	b29a      	uxth	r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082c8:	0c1b      	lsrs	r3, r3, #16
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082da:	0bdb      	lsrs	r3, r3, #15
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082ec:	0b9b      	lsrs	r3, r3, #14
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082fe:	0b5b      	lsrs	r3, r3, #13
 8008300:	b2db      	uxtb	r3, r3
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	b2da      	uxtb	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008310:	0b1b      	lsrs	r3, r3, #12
 8008312:	b2db      	uxtb	r3, r3
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	b2da      	uxtb	r2, r3
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2200      	movs	r2, #0
 8008322:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008328:	2b00      	cmp	r3, #0
 800832a:	d163      	bne.n	80083f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008330:	009a      	lsls	r2, r3, #2
 8008332:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008336:	4013      	ands	r3, r2
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800833c:	0f92      	lsrs	r2, r2, #30
 800833e:	431a      	orrs	r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008348:	0edb      	lsrs	r3, r3, #27
 800834a:	b2db      	uxtb	r3, r3
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	b2da      	uxtb	r2, r3
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800835a:	0e1b      	lsrs	r3, r3, #24
 800835c:	b2db      	uxtb	r3, r3
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	b2da      	uxtb	r2, r3
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800836c:	0d5b      	lsrs	r3, r3, #21
 800836e:	b2db      	uxtb	r3, r3
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	b2da      	uxtb	r2, r3
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800837e:	0c9b      	lsrs	r3, r3, #18
 8008380:	b2db      	uxtb	r3, r3
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	b2da      	uxtb	r2, r3
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008390:	0bdb      	lsrs	r3, r3, #15
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	b2da      	uxtb	r2, r3
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	7e1b      	ldrb	r3, [r3, #24]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	3302      	adds	r3, #2
 80083b4:	2201      	movs	r2, #1
 80083b6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80083be:	fb02 f203 	mul.w	r2, r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	7a1b      	ldrb	r3, [r3, #8]
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	2201      	movs	r2, #1
 80083d2:	409a      	lsls	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80083e0:	0a52      	lsrs	r2, r2, #9
 80083e2:	fb02 f203 	mul.w	r2, r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083f0:	661a      	str	r2, [r3, #96]	; 0x60
 80083f2:	e031      	b.n	8008458 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d11d      	bne.n	8008438 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008400:	041b      	lsls	r3, r3, #16
 8008402:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800840a:	0c1b      	lsrs	r3, r3, #16
 800840c:	431a      	orrs	r2, r3
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	3301      	adds	r3, #1
 8008418:	029a      	lsls	r2, r3, #10
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800842c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	661a      	str	r2, [r3, #96]	; 0x60
 8008436:	e00f      	b.n	8008458 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a58      	ldr	r2, [pc, #352]	; (80085a0 <HAL_SD_GetCardCSD+0x344>)
 800843e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e09d      	b.n	8008594 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800845c:	0b9b      	lsrs	r3, r3, #14
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	b2da      	uxtb	r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800846e:	09db      	lsrs	r3, r3, #7
 8008470:	b2db      	uxtb	r3, r3
 8008472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008476:	b2da      	uxtb	r2, r3
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008480:	b2db      	uxtb	r3, r3
 8008482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008486:	b2da      	uxtb	r2, r3
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008490:	0fdb      	lsrs	r3, r3, #31
 8008492:	b2da      	uxtb	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849c:	0f5b      	lsrs	r3, r3, #29
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f003 0303 	and.w	r3, r3, #3
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ae:	0e9b      	lsrs	r3, r3, #26
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c0:	0d9b      	lsrs	r3, r3, #22
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d2:	0d5b      	lsrs	r3, r3, #21
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ee:	0c1b      	lsrs	r3, r3, #16
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008502:	0bdb      	lsrs	r3, r3, #15
 8008504:	b2db      	uxtb	r3, r3
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	b2da      	uxtb	r2, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008516:	0b9b      	lsrs	r3, r3, #14
 8008518:	b2db      	uxtb	r3, r3
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	b2da      	uxtb	r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852a:	0b5b      	lsrs	r3, r3, #13
 800852c:	b2db      	uxtb	r3, r3
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	b2da      	uxtb	r2, r3
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800853e:	0b1b      	lsrs	r3, r3, #12
 8008540:	b2db      	uxtb	r3, r3
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	b2da      	uxtb	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008552:	0a9b      	lsrs	r3, r3, #10
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	b2da      	uxtb	r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008566:	0a1b      	lsrs	r3, r3, #8
 8008568:	b2db      	uxtb	r3, r3
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	b2da      	uxtb	r2, r3
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857a:	085b      	lsrs	r3, r3, #1
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008582:	b2da      	uxtb	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	004005ff 	.word	0x004005ff

080085a4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80085fc:	b5b0      	push	{r4, r5, r7, lr}
 80085fe:	b08e      	sub	sp, #56	; 0x38
 8008600:	af04      	add	r7, sp, #16
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2203      	movs	r2, #3
 800860a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008612:	2b03      	cmp	r3, #3
 8008614:	d02e      	beq.n	8008674 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800861c:	d106      	bne.n	800862c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	639a      	str	r2, [r3, #56]	; 0x38
 800862a:	e029      	b.n	8008680 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008632:	d10a      	bne.n	800864a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 faa1 	bl	8008b7c <SD_WideBus_Enable>
 800863a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	639a      	str	r2, [r3, #56]	; 0x38
 8008648:	e01a      	b.n	8008680 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fade 	bl	8008c12 <SD_WideBus_Disable>
 8008656:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	431a      	orrs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	639a      	str	r2, [r3, #56]	; 0x38
 8008664:	e00c      	b.n	8008680 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	639a      	str	r2, [r3, #56]	; 0x38
 8008672:	e005      	b.n	8008680 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	d009      	beq.n	800869c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a18      	ldr	r2, [pc, #96]	; (80086f0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800868e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e024      	b.n	80086e6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681d      	ldr	r5, [r3, #0]
 80086c2:	466c      	mov	r4, sp
 80086c4:	f107 0318 	add.w	r3, r7, #24
 80086c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086d6:	4628      	mov	r0, r5
 80086d8:	f002 fbfc 	bl	800aed4 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3728      	adds	r7, #40	; 0x28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bdb0      	pop	{r4, r5, r7, pc}
 80086ee:	bf00      	nop
 80086f0:	004005ff 	.word	0x004005ff

080086f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008700:	f107 030c 	add.w	r3, r7, #12
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fa10 	bl	8008b2c <SD_SendStatus>
 800870c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d005      	beq.n	8008720 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	0a5b      	lsrs	r3, r3, #9
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800872a:	693b      	ldr	r3, [r7, #16]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008740:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008750:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008752:	bf00      	nop
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008770:	2b82      	cmp	r3, #130	; 0x82
 8008772:	d111      	bne.n	8008798 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4618      	mov	r0, r3
 800877a:	f002 fd21 	bl	800b1c0 <SDMMC_CmdStopTransfer>
 800877e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d008      	beq.n	8008798 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	431a      	orrs	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7ff fd58 	bl	8008248 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 0208 	bic.w	r2, r2, #8
 80087a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f240 523a 	movw	r2, #1338	; 0x53a
 80087b0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f003 f967 	bl	800ba94 <HAL_SD_RxCpltCallback>
#endif
}
 80087c6:	bf00      	nop
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7fb fa0a 	bl	8003bf8 <HAL_DMA_GetError>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d03e      	beq.n	8008868 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d002      	beq.n	8008806 <SD_DMAError+0x36>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d12d      	bne.n	8008862 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a19      	ldr	r2, [pc, #100]	; (8008870 <SD_DMAError+0xa0>)
 800880c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800881c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800882a:	6978      	ldr	r0, [r7, #20]
 800882c:	f7ff ff62 	bl	80086f4 <HAL_SD_GetCardState>
 8008830:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b06      	cmp	r3, #6
 8008836:	d002      	beq.n	800883e <SD_DMAError+0x6e>
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b05      	cmp	r3, #5
 800883c:	d10a      	bne.n	8008854 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4618      	mov	r0, r3
 8008844:	f002 fcbc 	bl	800b1c0 <SDMMC_CmdStopTransfer>
 8008848:	4602      	mov	r2, r0
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884e:	431a      	orrs	r2, r3
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2200      	movs	r2, #0
 8008860:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008862:	6978      	ldr	r0, [r7, #20]
 8008864:	f7ff fcf0 	bl	8008248 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008868:	bf00      	nop
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	004005ff 	.word	0x004005ff

08008874 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008874:	b5b0      	push	{r4, r5, r7, lr}
 8008876:	b094      	sub	sp, #80	; 0x50
 8008878:	af04      	add	r7, sp, #16
 800887a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800887c:	2301      	movs	r3, #1
 800887e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4618      	mov	r0, r3
 8008886:	f002 fb6d 	bl	800af64 <SDMMC_GetPowerState>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008890:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008894:	e0b7      	b.n	8008a06 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889a:	2b03      	cmp	r3, #3
 800889c:	d02f      	beq.n	80088fe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f002 fd97 	bl	800b3d6 <SDMMC_CmdSendCID>
 80088a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <SD_InitCard+0x40>
    {
      return errorstate;
 80088b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b2:	e0a8      	b.n	8008a06 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2100      	movs	r1, #0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f002 fb97 	bl	800afee <SDMMC_GetResponse>
 80088c0:	4602      	mov	r2, r0
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2104      	movs	r1, #4
 80088cc:	4618      	mov	r0, r3
 80088ce:	f002 fb8e 	bl	800afee <SDMMC_GetResponse>
 80088d2:	4602      	mov	r2, r0
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2108      	movs	r1, #8
 80088de:	4618      	mov	r0, r3
 80088e0:	f002 fb85 	bl	800afee <SDMMC_GetResponse>
 80088e4:	4602      	mov	r2, r0
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	210c      	movs	r1, #12
 80088f0:	4618      	mov	r0, r3
 80088f2:	f002 fb7c 	bl	800afee <SDMMC_GetResponse>
 80088f6:	4602      	mov	r2, r0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008902:	2b03      	cmp	r3, #3
 8008904:	d00d      	beq.n	8008922 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f107 020e 	add.w	r2, r7, #14
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	f002 fd9d 	bl	800b450 <SDMMC_CmdSetRelAdd>
 8008916:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <SD_InitCard+0xae>
    {
      return errorstate;
 800891e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008920:	e071      	b.n	8008a06 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008926:	2b03      	cmp	r3, #3
 8008928:	d036      	beq.n	8008998 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800892a:	89fb      	ldrh	r3, [r7, #14]
 800892c:	461a      	mov	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800893a:	041b      	lsls	r3, r3, #16
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f002 fd67 	bl	800b412 <SDMMC_CmdSendCSD>
 8008944:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <SD_InitCard+0xdc>
    {
      return errorstate;
 800894c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800894e:	e05a      	b.n	8008a06 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2100      	movs	r1, #0
 8008956:	4618      	mov	r0, r3
 8008958:	f002 fb49 	bl	800afee <SDMMC_GetResponse>
 800895c:	4602      	mov	r2, r0
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2104      	movs	r1, #4
 8008968:	4618      	mov	r0, r3
 800896a:	f002 fb40 	bl	800afee <SDMMC_GetResponse>
 800896e:	4602      	mov	r2, r0
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2108      	movs	r1, #8
 800897a:	4618      	mov	r0, r3
 800897c:	f002 fb37 	bl	800afee <SDMMC_GetResponse>
 8008980:	4602      	mov	r2, r0
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	210c      	movs	r1, #12
 800898c:	4618      	mov	r0, r3
 800898e:	f002 fb2e 	bl	800afee <SDMMC_GetResponse>
 8008992:	4602      	mov	r2, r0
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2104      	movs	r1, #4
 800899e:	4618      	mov	r0, r3
 80089a0:	f002 fb25 	bl	800afee <SDMMC_GetResponse>
 80089a4:	4603      	mov	r3, r0
 80089a6:	0d1a      	lsrs	r2, r3, #20
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80089ac:	f107 0310 	add.w	r3, r7, #16
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7ff fc52 	bl	800825c <HAL_SD_GetCardCSD>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089c2:	e020      	b.n	8008a06 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6819      	ldr	r1, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089cc:	041b      	lsls	r3, r3, #16
 80089ce:	f04f 0400 	mov.w	r4, #0
 80089d2:	461a      	mov	r2, r3
 80089d4:	4623      	mov	r3, r4
 80089d6:	4608      	mov	r0, r1
 80089d8:	f002 fc14 	bl	800b204 <SDMMC_CmdSelDesel>
 80089dc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80089de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <SD_InitCard+0x174>
  {
    return errorstate;
 80089e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e6:	e00e      	b.n	8008a06 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681d      	ldr	r5, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	466c      	mov	r4, sp
 80089f0:	f103 0210 	add.w	r2, r3, #16
 80089f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80089f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80089fa:	3304      	adds	r3, #4
 80089fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089fe:	4628      	mov	r0, r5
 8008a00:	f002 fa68 	bl	800aed4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3740      	adds	r7, #64	; 0x40
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008a10 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	2300      	movs	r3, #0
 8008a22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f002 fc0e 	bl	800b24a <SDMMC_CmdGoIdleState>
 8008a2e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	e072      	b.n	8008b20 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f002 fc21 	bl	800b286 <SDMMC_CmdOperCond>
 8008a44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00d      	beq.n	8008a68 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f002 fbf7 	bl	800b24a <SDMMC_CmdGoIdleState>
 8008a5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	e05b      	b.n	8008b20 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d137      	bne.n	8008ae6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f002 fc21 	bl	800b2c4 <SDMMC_CmdAppCommand>
 8008a82:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d02d      	beq.n	8008ae6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a8e:	e047      	b.n	8008b20 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2100      	movs	r1, #0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f002 fc14 	bl	800b2c4 <SDMMC_CmdAppCommand>
 8008a9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <SD_PowerON+0x98>
    {
      return errorstate;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	e03b      	b.n	8008b20 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	491e      	ldr	r1, [pc, #120]	; (8008b28 <SD_PowerON+0x118>)
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f002 fc2a 	bl	800b308 <SDMMC_CmdAppOperCommand>
 8008ab4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008abc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ac0:	e02e      	b.n	8008b20 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f002 fa90 	bl	800afee <SDMMC_GetResponse>
 8008ace:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	0fdb      	lsrs	r3, r3, #31
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <SD_PowerON+0xcc>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e000      	b.n	8008ade <SD_PowerON+0xce>
 8008adc:	2300      	movs	r3, #0
 8008ade:	613b      	str	r3, [r7, #16]

    count++;
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d802      	bhi.n	8008af6 <SD_PowerON+0xe6>
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0cc      	beq.n	8008a90 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d902      	bls.n	8008b06 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b04:	e00c      	b.n	8008b20 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	645a      	str	r2, [r3, #68]	; 0x44
 8008b16:	e002      	b.n	8008b1e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	c1100000 	.word	0xc1100000

08008b2c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d102      	bne.n	8008b42 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008b3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b40:	e018      	b.n	8008b74 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b4a:	041b      	lsls	r3, r3, #16
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4610      	mov	r0, r2
 8008b50:	f002 fc9f 	bl	800b492 <SDMMC_CmdSendStatus>
 8008b54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	e009      	b.n	8008b74 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2100      	movs	r1, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f002 fa41 	bl	800afee <SDMMC_GetResponse>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008b84:	2300      	movs	r3, #0
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f002 fa2b 	bl	800afee <SDMMC_GetResponse>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ba2:	d102      	bne.n	8008baa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ba4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ba8:	e02f      	b.n	8008c0a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008baa:	f107 030c 	add.w	r3, r7, #12
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f879 	bl	8008ca8 <SD_FindSCR>
 8008bb6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	e023      	b.n	8008c0a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d01c      	beq.n	8008c06 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd4:	041b      	lsls	r3, r3, #16
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4610      	mov	r0, r2
 8008bda:	f002 fb73 	bl	800b2c4 <SDMMC_CmdAppCommand>
 8008bde:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	e00f      	b.n	8008c0a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2102      	movs	r1, #2
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f002 fbad 	bl	800b350 <SDMMC_CmdBusWidth>
 8008bf6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	e003      	b.n	8008c0a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c02:	2300      	movs	r3, #0
 8008c04:	e001      	b.n	8008c0a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b086      	sub	sp, #24
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2100      	movs	r1, #0
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f002 f9e0 	bl	800afee <SDMMC_GetResponse>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c38:	d102      	bne.n	8008c40 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c3e:	e02f      	b.n	8008ca0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c40:	f107 030c 	add.w	r3, r7, #12
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f82e 	bl	8008ca8 <SD_FindSCR>
 8008c4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	e023      	b.n	8008ca0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d01c      	beq.n	8008c9c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c6a:	041b      	lsls	r3, r3, #16
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	f002 fb28 	bl	800b2c4 <SDMMC_CmdAppCommand>
 8008c74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	e00f      	b.n	8008ca0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2100      	movs	r1, #0
 8008c86:	4618      	mov	r0, r3
 8008c88:	f002 fb62 	bl	800b350 <SDMMC_CmdBusWidth>
 8008c8c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d001      	beq.n	8008c98 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	e003      	b.n	8008ca0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e001      	b.n	8008ca0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008ca8:	b590      	push	{r4, r7, lr}
 8008caa:	b08f      	sub	sp, #60	; 0x3c
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008cb2:	f7fa f9f3 	bl	800309c <HAL_GetTick>
 8008cb6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60bb      	str	r3, [r7, #8]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2108      	movs	r1, #8
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f002 f9cc 	bl	800b06c <SDMMC_CmdBlockLength>
 8008cd4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	e0a9      	b.n	8008e34 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce8:	041b      	lsls	r3, r3, #16
 8008cea:	4619      	mov	r1, r3
 8008cec:	4610      	mov	r0, r2
 8008cee:	f002 fae9 	bl	800b2c4 <SDMMC_CmdAppCommand>
 8008cf2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <SD_FindSCR+0x56>
  {
    return errorstate;
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	e09a      	b.n	8008e34 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008d02:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008d04:	2308      	movs	r3, #8
 8008d06:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008d08:	2330      	movs	r3, #48	; 0x30
 8008d0a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d14:	2301      	movs	r3, #1
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f107 0210 	add.w	r2, r7, #16
 8008d20:	4611      	mov	r1, r2
 8008d22:	4618      	mov	r0, r3
 8008d24:	f002 f976 	bl	800b014 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f002 fb31 	bl	800b394 <SDMMC_CmdSendSCR>
 8008d32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d022      	beq.n	8008d80 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	e07a      	b.n	8008e34 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00e      	beq.n	8008d6a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6819      	ldr	r1, [r3, #0]
 8008d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	f107 0208 	add.w	r2, r7, #8
 8008d58:	18d4      	adds	r4, r2, r3
 8008d5a:	4608      	mov	r0, r1
 8008d5c:	f002 f8e6 	bl	800af2c <SDMMC_ReadFIFO>
 8008d60:	4603      	mov	r3, r0
 8008d62:	6023      	str	r3, [r4, #0]
      index++;
 8008d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d66:	3301      	adds	r3, #1
 8008d68:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d6a:	f7fa f997 	bl	800309c <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d78:	d102      	bne.n	8008d80 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d7e:	e059      	b.n	8008e34 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d86:	f240 432a 	movw	r3, #1066	; 0x42a
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0d6      	beq.n	8008d3e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d96:	f003 0308 	and.w	r3, r3, #8
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d005      	beq.n	8008daa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2208      	movs	r2, #8
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008da6:	2308      	movs	r3, #8
 8008da8:	e044      	b.n	8008e34 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d005      	beq.n	8008dc4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e037      	b.n	8008e34 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d005      	beq.n	8008dde <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008dda:	2320      	movs	r3, #32
 8008ddc:	e02a      	b.n	8008e34 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f240 523a 	movw	r2, #1338	; 0x53a
 8008de6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	061a      	lsls	r2, r3, #24
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	021b      	lsls	r3, r3, #8
 8008df0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008df4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	0a1b      	lsrs	r3, r3, #8
 8008dfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008dfe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	0e1b      	lsrs	r3, r3, #24
 8008e04:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	601a      	str	r2, [r3, #0]
    scr++;
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	061a      	lsls	r2, r3, #24
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e1c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	0a1b      	lsrs	r3, r3, #8
 8008e22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e26:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	0e1b      	lsrs	r3, r3, #24
 8008e2c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	373c      	adds	r7, #60	; 0x3c
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd90      	pop	{r4, r7, pc}

08008e3c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e025      	b.n	8008e9c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d106      	bne.n	8008e6a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7f9 fee5 	bl	8002c34 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f001 ff03 	bl	800ac88 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	f001 ff6d 	bl	800ad6c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d101      	bne.n	8008ec0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e018      	b.n	8008ef2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 ffcb 	bl	800ae6c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d104      	bne.n	8008ee8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2205      	movs	r2, #5
 8008ee2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008ee6:	e003      	b.n	8008ef0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d101      	bne.n	8008f14 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008f10:	2302      	movs	r3, #2
 8008f12:	e00e      	b.n	8008f32 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 ffc3 	bl	800aeae <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e04c      	b.n	8008fe8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d106      	bne.n	8008f68 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7f9 fbc4 	bl	80026f0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f022 0203 	bic.w	r2, r2, #3
 8008f7e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4b19      	ldr	r3, [pc, #100]	; (8008ff0 <HAL_SPDIFRX_Init+0xb4>)
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008f98:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008f9e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008fa4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008faa:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008fb0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008fb6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008fbc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008fc2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008fc8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	fff88407 	.word	0xfff88407

08008ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e084      	b.n	8009110 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	d106      	bne.n	8009026 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7f9 fba7 	bl	8002774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2202      	movs	r2, #2
 800902a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800903c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009046:	d902      	bls.n	800904e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009048:	2300      	movs	r3, #0
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	e002      	b.n	8009054 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800904e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009052:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800905c:	d007      	beq.n	800906e <HAL_SPI_Init+0x7a>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009066:	d002      	beq.n	800906e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10b      	bne.n	800908e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800907e:	d903      	bls.n	8009088 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	631a      	str	r2, [r3, #48]	; 0x30
 8009086:	e002      	b.n	800908e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	431a      	orrs	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090ac:	431a      	orrs	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	ea42 0103 	orr.w	r1, r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	430a      	orrs	r2, r1
 80090c6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	0c1b      	lsrs	r3, r3, #16
 80090ce:	f003 0204 	and.w	r2, r3, #4
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	431a      	orrs	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090dc:	431a      	orrs	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	ea42 0103 	orr.w	r1, r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	430a      	orrs	r2, r1
 80090ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	69da      	ldr	r2, [r3, #28]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e01d      	b.n	8009166 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7f9 fb7a 	bl	8002838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f000 fb78 	bl	800984c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68da      	ldr	r2, [r3, #12]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f042 0201 	orr.w	r2, r2, #1
 8009186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	4b0c      	ldr	r3, [pc, #48]	; (80091c0 <HAL_TIM_Base_Start_IT+0x50>)
 8009190:	4013      	ands	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b06      	cmp	r3, #6
 8009198:	d00b      	beq.n	80091b2 <HAL_TIM_Base_Start_IT+0x42>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091a0:	d007      	beq.n	80091b2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f042 0201 	orr.w	r2, r2, #1
 80091b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	00010007 	.word	0x00010007

080091c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e01d      	b.n	8009212 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d106      	bne.n	80091f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7f9 fb7e 	bl	80028ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	3304      	adds	r3, #4
 8009200:	4619      	mov	r1, r3
 8009202:	4610      	mov	r0, r2
 8009204:	f000 fb22 	bl	800984c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b082      	sub	sp, #8
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	f003 0302 	and.w	r3, r3, #2
 800922c:	2b02      	cmp	r3, #2
 800922e:	d122      	bne.n	8009276 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f003 0302 	and.w	r3, r3, #2
 800923a:	2b02      	cmp	r3, #2
 800923c:	d11b      	bne.n	8009276 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f06f 0202 	mvn.w	r2, #2
 8009246:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	f003 0303 	and.w	r3, r3, #3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fad7 	bl	8009810 <HAL_TIM_IC_CaptureCallback>
 8009262:	e005      	b.n	8009270 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fac9 	bl	80097fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fada 	bl	8009824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	f003 0304 	and.w	r3, r3, #4
 8009280:	2b04      	cmp	r3, #4
 8009282:	d122      	bne.n	80092ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	f003 0304 	and.w	r3, r3, #4
 800928e:	2b04      	cmp	r3, #4
 8009290:	d11b      	bne.n	80092ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f06f 0204 	mvn.w	r2, #4
 800929a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2202      	movs	r2, #2
 80092a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 faad 	bl	8009810 <HAL_TIM_IC_CaptureCallback>
 80092b6:	e005      	b.n	80092c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fa9f 	bl	80097fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fab0 	bl	8009824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	f003 0308 	and.w	r3, r3, #8
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d122      	bne.n	800931e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b08      	cmp	r3, #8
 80092e4:	d11b      	bne.n	800931e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f06f 0208 	mvn.w	r2, #8
 80092ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2204      	movs	r2, #4
 80092f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	f003 0303 	and.w	r3, r3, #3
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fa83 	bl	8009810 <HAL_TIM_IC_CaptureCallback>
 800930a:	e005      	b.n	8009318 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fa75 	bl	80097fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fa86 	bl	8009824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	f003 0310 	and.w	r3, r3, #16
 8009328:	2b10      	cmp	r3, #16
 800932a:	d122      	bne.n	8009372 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f003 0310 	and.w	r3, r3, #16
 8009336:	2b10      	cmp	r3, #16
 8009338:	d11b      	bne.n	8009372 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f06f 0210 	mvn.w	r2, #16
 8009342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2208      	movs	r2, #8
 8009348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009354:	2b00      	cmp	r3, #0
 8009356:	d003      	beq.n	8009360 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fa59 	bl	8009810 <HAL_TIM_IC_CaptureCallback>
 800935e:	e005      	b.n	800936c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fa4b 	bl	80097fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa5c 	bl	8009824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b01      	cmp	r3, #1
 800937e:	d10e      	bne.n	800939e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b01      	cmp	r3, #1
 800938c:	d107      	bne.n	800939e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f06f 0201 	mvn.w	r2, #1
 8009396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7f8 fd67 	bl	8001e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a8:	2b80      	cmp	r3, #128	; 0x80
 80093aa:	d10e      	bne.n	80093ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b6:	2b80      	cmp	r3, #128	; 0x80
 80093b8:	d107      	bne.n	80093ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fe71 	bl	800a0ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d8:	d10e      	bne.n	80093f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e4:	2b80      	cmp	r3, #128	; 0x80
 80093e6:	d107      	bne.n	80093f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80093f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fe64 	bl	800a0c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009402:	2b40      	cmp	r3, #64	; 0x40
 8009404:	d10e      	bne.n	8009424 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009410:	2b40      	cmp	r3, #64	; 0x40
 8009412:	d107      	bne.n	8009424 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800941c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa0a 	bl	8009838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	f003 0320 	and.w	r3, r3, #32
 800942e:	2b20      	cmp	r3, #32
 8009430:	d10e      	bne.n	8009450 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	f003 0320 	and.w	r3, r3, #32
 800943c:	2b20      	cmp	r3, #32
 800943e:	d107      	bne.n	8009450 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f06f 0220 	mvn.w	r2, #32
 8009448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fe24 	bl	800a098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800946a:	2b01      	cmp	r3, #1
 800946c:	d101      	bne.n	8009472 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800946e:	2302      	movs	r3, #2
 8009470:	e105      	b.n	800967e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2202      	movs	r2, #2
 800947e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b14      	cmp	r3, #20
 8009486:	f200 80f0 	bhi.w	800966a <HAL_TIM_PWM_ConfigChannel+0x212>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094e5 	.word	0x080094e5
 8009494:	0800966b 	.word	0x0800966b
 8009498:	0800966b 	.word	0x0800966b
 800949c:	0800966b 	.word	0x0800966b
 80094a0:	08009525 	.word	0x08009525
 80094a4:	0800966b 	.word	0x0800966b
 80094a8:	0800966b 	.word	0x0800966b
 80094ac:	0800966b 	.word	0x0800966b
 80094b0:	08009567 	.word	0x08009567
 80094b4:	0800966b 	.word	0x0800966b
 80094b8:	0800966b 	.word	0x0800966b
 80094bc:	0800966b 	.word	0x0800966b
 80094c0:	080095a7 	.word	0x080095a7
 80094c4:	0800966b 	.word	0x0800966b
 80094c8:	0800966b 	.word	0x0800966b
 80094cc:	0800966b 	.word	0x0800966b
 80094d0:	080095e9 	.word	0x080095e9
 80094d4:	0800966b 	.word	0x0800966b
 80094d8:	0800966b 	.word	0x0800966b
 80094dc:	0800966b 	.word	0x0800966b
 80094e0:	08009629 	.word	0x08009629
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68b9      	ldr	r1, [r7, #8]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fa4e 	bl	800998c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699a      	ldr	r2, [r3, #24]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f042 0208 	orr.w	r2, r2, #8
 80094fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699a      	ldr	r2, [r3, #24]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0204 	bic.w	r2, r2, #4
 800950e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6999      	ldr	r1, [r3, #24]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	691a      	ldr	r2, [r3, #16]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	430a      	orrs	r2, r1
 8009520:	619a      	str	r2, [r3, #24]
      break;
 8009522:	e0a3      	b.n	800966c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 faa0 	bl	8009a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	699a      	ldr	r2, [r3, #24]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800953e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	699a      	ldr	r2, [r3, #24]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800954e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6999      	ldr	r1, [r3, #24]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	021a      	lsls	r2, r3, #8
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	619a      	str	r2, [r3, #24]
      break;
 8009564:	e082      	b.n	800966c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68b9      	ldr	r1, [r7, #8]
 800956c:	4618      	mov	r0, r3
 800956e:	f000 faf7 	bl	8009b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69da      	ldr	r2, [r3, #28]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f042 0208 	orr.w	r2, r2, #8
 8009580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69da      	ldr	r2, [r3, #28]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0204 	bic.w	r2, r2, #4
 8009590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69d9      	ldr	r1, [r3, #28]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	691a      	ldr	r2, [r3, #16]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	430a      	orrs	r2, r1
 80095a2:	61da      	str	r2, [r3, #28]
      break;
 80095a4:	e062      	b.n	800966c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68b9      	ldr	r1, [r7, #8]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 fb4d 	bl	8009c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	69da      	ldr	r2, [r3, #28]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	69da      	ldr	r2, [r3, #28]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	69d9      	ldr	r1, [r3, #28]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	021a      	lsls	r2, r3, #8
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	61da      	str	r2, [r3, #28]
      break;
 80095e6:	e041      	b.n	800966c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fb84 	bl	8009cfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f042 0208 	orr.w	r2, r2, #8
 8009602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f022 0204 	bic.w	r2, r2, #4
 8009612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	691a      	ldr	r2, [r3, #16]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	430a      	orrs	r2, r1
 8009624:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009626:	e021      	b.n	800966c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	4618      	mov	r0, r3
 8009630:	f000 fbb6 	bl	8009da0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009642:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009652:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	021a      	lsls	r2, r3, #8
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009668:	e000      	b.n	800966c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800966a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop

08009688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009698:	2b01      	cmp	r3, #1
 800969a:	d101      	bne.n	80096a0 <HAL_TIM_ConfigClockSource+0x18>
 800969c:	2302      	movs	r3, #2
 800969e:	e0a6      	b.n	80097ee <HAL_TIM_ConfigClockSource+0x166>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4b4f      	ldr	r3, [pc, #316]	; (80097f8 <HAL_TIM_ConfigClockSource+0x170>)
 80096bc:	4013      	ands	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b40      	cmp	r3, #64	; 0x40
 80096d6:	d067      	beq.n	80097a8 <HAL_TIM_ConfigClockSource+0x120>
 80096d8:	2b40      	cmp	r3, #64	; 0x40
 80096da:	d80b      	bhi.n	80096f4 <HAL_TIM_ConfigClockSource+0x6c>
 80096dc:	2b10      	cmp	r3, #16
 80096de:	d073      	beq.n	80097c8 <HAL_TIM_ConfigClockSource+0x140>
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d802      	bhi.n	80096ea <HAL_TIM_ConfigClockSource+0x62>
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d06f      	beq.n	80097c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80096e8:	e078      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80096ea:	2b20      	cmp	r3, #32
 80096ec:	d06c      	beq.n	80097c8 <HAL_TIM_ConfigClockSource+0x140>
 80096ee:	2b30      	cmp	r3, #48	; 0x30
 80096f0:	d06a      	beq.n	80097c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80096f2:	e073      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80096f4:	2b70      	cmp	r3, #112	; 0x70
 80096f6:	d00d      	beq.n	8009714 <HAL_TIM_ConfigClockSource+0x8c>
 80096f8:	2b70      	cmp	r3, #112	; 0x70
 80096fa:	d804      	bhi.n	8009706 <HAL_TIM_ConfigClockSource+0x7e>
 80096fc:	2b50      	cmp	r3, #80	; 0x50
 80096fe:	d033      	beq.n	8009768 <HAL_TIM_ConfigClockSource+0xe0>
 8009700:	2b60      	cmp	r3, #96	; 0x60
 8009702:	d041      	beq.n	8009788 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009704:	e06a      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800970a:	d066      	beq.n	80097da <HAL_TIM_ConfigClockSource+0x152>
 800970c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009710:	d017      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009712:	e063      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6818      	ldr	r0, [r3, #0]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	6899      	ldr	r1, [r3, #8]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f000 fc0a 	bl	8009f3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009736:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	609a      	str	r2, [r3, #8]
      break;
 8009740:	e04c      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6818      	ldr	r0, [r3, #0]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	6899      	ldr	r1, [r3, #8]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f000 fbf3 	bl	8009f3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009764:	609a      	str	r2, [r3, #8]
      break;
 8009766:	e039      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	6859      	ldr	r1, [r3, #4]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	461a      	mov	r2, r3
 8009776:	f000 fb67 	bl	8009e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2150      	movs	r1, #80	; 0x50
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fbc0 	bl	8009f06 <TIM_ITRx_SetConfig>
      break;
 8009786:	e029      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	6859      	ldr	r1, [r3, #4]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	461a      	mov	r2, r3
 8009796:	f000 fb86 	bl	8009ea6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2160      	movs	r1, #96	; 0x60
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fbb0 	bl	8009f06 <TIM_ITRx_SetConfig>
      break;
 80097a6:	e019      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6818      	ldr	r0, [r3, #0]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	6859      	ldr	r1, [r3, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	461a      	mov	r2, r3
 80097b6:	f000 fb47 	bl	8009e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2140      	movs	r1, #64	; 0x40
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 fba0 	bl	8009f06 <TIM_ITRx_SetConfig>
      break;
 80097c6:	e009      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f000 fb97 	bl	8009f06 <TIM_ITRx_SetConfig>
      break;
 80097d8:	e000      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80097da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	fffeff88 	.word	0xfffeff88

080097fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a40      	ldr	r2, [pc, #256]	; (8009960 <TIM_Base_SetConfig+0x114>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d013      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800986a:	d00f      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a3d      	ldr	r2, [pc, #244]	; (8009964 <TIM_Base_SetConfig+0x118>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00b      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a3c      	ldr	r2, [pc, #240]	; (8009968 <TIM_Base_SetConfig+0x11c>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d007      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a3b      	ldr	r2, [pc, #236]	; (800996c <TIM_Base_SetConfig+0x120>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d003      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a3a      	ldr	r2, [pc, #232]	; (8009970 <TIM_Base_SetConfig+0x124>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d108      	bne.n	800989e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	4313      	orrs	r3, r2
 800989c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a2f      	ldr	r2, [pc, #188]	; (8009960 <TIM_Base_SetConfig+0x114>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d02b      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ac:	d027      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a2c      	ldr	r2, [pc, #176]	; (8009964 <TIM_Base_SetConfig+0x118>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d023      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a2b      	ldr	r2, [pc, #172]	; (8009968 <TIM_Base_SetConfig+0x11c>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d01f      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a2a      	ldr	r2, [pc, #168]	; (800996c <TIM_Base_SetConfig+0x120>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d01b      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a29      	ldr	r2, [pc, #164]	; (8009970 <TIM_Base_SetConfig+0x124>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d017      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a28      	ldr	r2, [pc, #160]	; (8009974 <TIM_Base_SetConfig+0x128>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d013      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a27      	ldr	r2, [pc, #156]	; (8009978 <TIM_Base_SetConfig+0x12c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d00f      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a26      	ldr	r2, [pc, #152]	; (800997c <TIM_Base_SetConfig+0x130>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d00b      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a25      	ldr	r2, [pc, #148]	; (8009980 <TIM_Base_SetConfig+0x134>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d007      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a24      	ldr	r2, [pc, #144]	; (8009984 <TIM_Base_SetConfig+0x138>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d003      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a23      	ldr	r2, [pc, #140]	; (8009988 <TIM_Base_SetConfig+0x13c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d108      	bne.n	8009910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4313      	orrs	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	689a      	ldr	r2, [r3, #8]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a0a      	ldr	r2, [pc, #40]	; (8009960 <TIM_Base_SetConfig+0x114>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d003      	beq.n	8009944 <TIM_Base_SetConfig+0xf8>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a0c      	ldr	r2, [pc, #48]	; (8009970 <TIM_Base_SetConfig+0x124>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d103      	bne.n	800994c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	691a      	ldr	r2, [r3, #16]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	615a      	str	r2, [r3, #20]
}
 8009952:	bf00      	nop
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	40010000 	.word	0x40010000
 8009964:	40000400 	.word	0x40000400
 8009968:	40000800 	.word	0x40000800
 800996c:	40000c00 	.word	0x40000c00
 8009970:	40010400 	.word	0x40010400
 8009974:	40014000 	.word	0x40014000
 8009978:	40014400 	.word	0x40014400
 800997c:	40014800 	.word	0x40014800
 8009980:	40001800 	.word	0x40001800
 8009984:	40001c00 	.word	0x40001c00
 8009988:	40002000 	.word	0x40002000

0800998c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	f023 0201 	bic.w	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	4b2b      	ldr	r3, [pc, #172]	; (8009a64 <TIM_OC1_SetConfig+0xd8>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f023 0303 	bic.w	r3, r3, #3
 80099c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f023 0302 	bic.w	r3, r3, #2
 80099d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	4313      	orrs	r3, r2
 80099de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a21      	ldr	r2, [pc, #132]	; (8009a68 <TIM_OC1_SetConfig+0xdc>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d003      	beq.n	80099f0 <TIM_OC1_SetConfig+0x64>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a20      	ldr	r2, [pc, #128]	; (8009a6c <TIM_OC1_SetConfig+0xe0>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d10c      	bne.n	8009a0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f023 0308 	bic.w	r3, r3, #8
 80099f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f023 0304 	bic.w	r3, r3, #4
 8009a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a16      	ldr	r2, [pc, #88]	; (8009a68 <TIM_OC1_SetConfig+0xdc>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d003      	beq.n	8009a1a <TIM_OC1_SetConfig+0x8e>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a15      	ldr	r2, [pc, #84]	; (8009a6c <TIM_OC1_SetConfig+0xe0>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d111      	bne.n	8009a3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	621a      	str	r2, [r3, #32]
}
 8009a58:	bf00      	nop
 8009a5a:	371c      	adds	r7, #28
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	fffeff8f 	.word	0xfffeff8f
 8009a68:	40010000 	.word	0x40010000
 8009a6c:	40010400 	.word	0x40010400

08009a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b087      	sub	sp, #28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	f023 0210 	bic.w	r2, r3, #16
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	4b2e      	ldr	r3, [pc, #184]	; (8009b54 <TIM_OC2_SetConfig+0xe4>)
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	021b      	lsls	r3, r3, #8
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	f023 0320 	bic.w	r3, r3, #32
 8009aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	011b      	lsls	r3, r3, #4
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a23      	ldr	r2, [pc, #140]	; (8009b58 <TIM_OC2_SetConfig+0xe8>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d003      	beq.n	8009ad8 <TIM_OC2_SetConfig+0x68>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a22      	ldr	r2, [pc, #136]	; (8009b5c <TIM_OC2_SetConfig+0xec>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d10d      	bne.n	8009af4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	011b      	lsls	r3, r3, #4
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009af2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a18      	ldr	r2, [pc, #96]	; (8009b58 <TIM_OC2_SetConfig+0xe8>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d003      	beq.n	8009b04 <TIM_OC2_SetConfig+0x94>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a17      	ldr	r2, [pc, #92]	; (8009b5c <TIM_OC2_SetConfig+0xec>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d113      	bne.n	8009b2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	621a      	str	r2, [r3, #32]
}
 8009b46:	bf00      	nop
 8009b48:	371c      	adds	r7, #28
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	feff8fff 	.word	0xfeff8fff
 8009b58:	40010000 	.word	0x40010000
 8009b5c:	40010400 	.word	0x40010400

08009b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	69db      	ldr	r3, [r3, #28]
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	4b2d      	ldr	r3, [pc, #180]	; (8009c40 <TIM_OC3_SetConfig+0xe0>)
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	021b      	lsls	r3, r3, #8
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a22      	ldr	r2, [pc, #136]	; (8009c44 <TIM_OC3_SetConfig+0xe4>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d003      	beq.n	8009bc6 <TIM_OC3_SetConfig+0x66>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a21      	ldr	r2, [pc, #132]	; (8009c48 <TIM_OC3_SetConfig+0xe8>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d10d      	bne.n	8009be2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	021b      	lsls	r3, r3, #8
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a17      	ldr	r2, [pc, #92]	; (8009c44 <TIM_OC3_SetConfig+0xe4>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d003      	beq.n	8009bf2 <TIM_OC3_SetConfig+0x92>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a16      	ldr	r2, [pc, #88]	; (8009c48 <TIM_OC3_SetConfig+0xe8>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d113      	bne.n	8009c1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	621a      	str	r2, [r3, #32]
}
 8009c34:	bf00      	nop
 8009c36:	371c      	adds	r7, #28
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	fffeff8f 	.word	0xfffeff8f
 8009c44:	40010000 	.word	0x40010000
 8009c48:	40010400 	.word	0x40010400

08009c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	69db      	ldr	r3, [r3, #28]
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	4b1e      	ldr	r3, [pc, #120]	; (8009cf0 <TIM_OC4_SetConfig+0xa4>)
 8009c78:	4013      	ands	r3, r2
 8009c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	021b      	lsls	r3, r3, #8
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	031b      	lsls	r3, r3, #12
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a13      	ldr	r2, [pc, #76]	; (8009cf4 <TIM_OC4_SetConfig+0xa8>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d003      	beq.n	8009cb4 <TIM_OC4_SetConfig+0x68>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a12      	ldr	r2, [pc, #72]	; (8009cf8 <TIM_OC4_SetConfig+0xac>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d109      	bne.n	8009cc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	019b      	lsls	r3, r3, #6
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	621a      	str	r2, [r3, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	feff8fff 	.word	0xfeff8fff
 8009cf4:	40010000 	.word	0x40010000
 8009cf8:	40010400 	.word	0x40010400

08009cfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	4b1b      	ldr	r3, [pc, #108]	; (8009d94 <TIM_OC5_SetConfig+0x98>)
 8009d28:	4013      	ands	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	041b      	lsls	r3, r3, #16
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a12      	ldr	r2, [pc, #72]	; (8009d98 <TIM_OC5_SetConfig+0x9c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d003      	beq.n	8009d5a <TIM_OC5_SetConfig+0x5e>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a11      	ldr	r2, [pc, #68]	; (8009d9c <TIM_OC5_SetConfig+0xa0>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d109      	bne.n	8009d6e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	021b      	lsls	r3, r3, #8
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	621a      	str	r2, [r3, #32]
}
 8009d88:	bf00      	nop
 8009d8a:	371c      	adds	r7, #28
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	fffeff8f 	.word	0xfffeff8f
 8009d98:	40010000 	.word	0x40010000
 8009d9c:	40010400 	.word	0x40010400

08009da0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4b1c      	ldr	r3, [pc, #112]	; (8009e3c <TIM_OC6_SetConfig+0x9c>)
 8009dcc:	4013      	ands	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	051b      	lsls	r3, r3, #20
 8009dea:	693a      	ldr	r2, [r7, #16]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a13      	ldr	r2, [pc, #76]	; (8009e40 <TIM_OC6_SetConfig+0xa0>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d003      	beq.n	8009e00 <TIM_OC6_SetConfig+0x60>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a12      	ldr	r2, [pc, #72]	; (8009e44 <TIM_OC6_SetConfig+0xa4>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d109      	bne.n	8009e14 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	695b      	ldr	r3, [r3, #20]
 8009e0c:	029b      	lsls	r3, r3, #10
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	621a      	str	r2, [r3, #32]
}
 8009e2e:	bf00      	nop
 8009e30:	371c      	adds	r7, #28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	feff8fff 	.word	0xfeff8fff
 8009e40:	40010000 	.word	0x40010000
 8009e44:	40010400 	.word	0x40010400

08009e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b087      	sub	sp, #28
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6a1b      	ldr	r3, [r3, #32]
 8009e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	f023 0201 	bic.w	r2, r3, #1
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	011b      	lsls	r3, r3, #4
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f023 030a 	bic.w	r3, r3, #10
 8009e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	621a      	str	r2, [r3, #32]
}
 8009e9a:	bf00      	nop
 8009e9c:	371c      	adds	r7, #28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b087      	sub	sp, #28
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	60f8      	str	r0, [r7, #12]
 8009eae:	60b9      	str	r1, [r7, #8]
 8009eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	f023 0210 	bic.w	r2, r3, #16
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6a1b      	ldr	r3, [r3, #32]
 8009ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	031b      	lsls	r3, r3, #12
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	011b      	lsls	r3, r3, #4
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	621a      	str	r2, [r3, #32]
}
 8009efa:	bf00      	nop
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b085      	sub	sp, #20
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	f043 0307 	orr.w	r3, r3, #7
 8009f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	609a      	str	r2, [r3, #8]
}
 8009f30:	bf00      	nop
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	021a      	lsls	r2, r3, #8
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	609a      	str	r2, [r3, #8]
}
 8009f70:	bf00      	nop
 8009f72:	371c      	adds	r7, #28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d101      	bne.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f90:	2302      	movs	r3, #2
 8009f92:	e06d      	b.n	800a070 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a30      	ldr	r2, [pc, #192]	; (800a07c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d004      	beq.n	8009fc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a2f      	ldr	r2, [pc, #188]	; (800a080 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d108      	bne.n	8009fda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009fce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a20      	ldr	r2, [pc, #128]	; (800a07c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d022      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a006:	d01d      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a1d      	ldr	r2, [pc, #116]	; (800a084 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d018      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a1c      	ldr	r2, [pc, #112]	; (800a088 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d013      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a1a      	ldr	r2, [pc, #104]	; (800a08c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d00e      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a15      	ldr	r2, [pc, #84]	; (800a080 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d009      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a16      	ldr	r2, [pc, #88]	; (800a090 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d004      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a15      	ldr	r2, [pc, #84]	; (800a094 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d10c      	bne.n	800a05e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a04a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	4313      	orrs	r3, r2
 800a054:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	40010000 	.word	0x40010000
 800a080:	40010400 	.word	0x40010400
 800a084:	40000400 	.word	0x40000400
 800a088:	40000800 	.word	0x40000800
 800a08c:	40000c00 	.word	0x40000c00
 800a090:	40014000 	.word	0x40014000
 800a094:	40001800 	.word	0x40001800

0800a098 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e040      	b.n	800a168 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d106      	bne.n	800a0fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7f8 fcc0 	bl	8002a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2224      	movs	r2, #36	; 0x24
 800a100:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f022 0201 	bic.w	r2, r2, #1
 800a110:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f972 	bl	800a3fc <UART_SetConfig>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d101      	bne.n	800a122 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e022      	b.n	800a168 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fc10 	bl	800a950 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a13e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689a      	ldr	r2, [r3, #8]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a14e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f042 0201 	orr.w	r2, r2, #1
 800a15e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fc97 	bl	800aa94 <UART_CheckIdleState>
 800a166:	4603      	mov	r3, r0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	f640 030f 	movw	r3, #2063	; 0x80f
 800a196:	4013      	ands	r3, r2
 800a198:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d113      	bne.n	800a1c8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	f003 0320 	and.w	r3, r3, #32
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00e      	beq.n	800a1c8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	f003 0320 	and.w	r3, r3, #32
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d009      	beq.n	800a1c8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 8100 	beq.w	800a3be <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
      }
      return;
 800a1c6:	e0fa      	b.n	800a3be <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f000 80d5 	beq.w	800a37a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d105      	bne.n	800a1e6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 80ca 	beq.w	800a37a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00e      	beq.n	800a20e <HAL_UART_IRQHandler+0x9e>
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d009      	beq.n	800a20e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2201      	movs	r2, #1
 800a200:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a206:	f043 0201 	orr.w	r2, r3, #1
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00e      	beq.n	800a236 <HAL_UART_IRQHandler+0xc6>
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d009      	beq.n	800a236 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2202      	movs	r2, #2
 800a228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a22e:	f043 0204 	orr.w	r2, r3, #4
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00e      	beq.n	800a25e <HAL_UART_IRQHandler+0xee>
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	2b00      	cmp	r3, #0
 800a248:	d009      	beq.n	800a25e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2204      	movs	r2, #4
 800a250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a256:	f043 0202 	orr.w	r2, r3, #2
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	f003 0308 	and.w	r3, r3, #8
 800a264:	2b00      	cmp	r3, #0
 800a266:	d013      	beq.n	800a290 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	f003 0320 	and.w	r3, r3, #32
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d104      	bne.n	800a27c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d009      	beq.n	800a290 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2208      	movs	r2, #8
 800a282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a288:	f043 0208 	orr.w	r2, r3, #8
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00f      	beq.n	800a2ba <HAL_UART_IRQHandler+0x14a>
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00a      	beq.n	800a2ba <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2b2:	f043 0220 	orr.w	r2, r3, #32
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d07f      	beq.n	800a3c2 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	f003 0320 	and.w	r3, r3, #32
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00c      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	f003 0320 	and.w	r3, r3, #32
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d007      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2ea:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f6:	2b40      	cmp	r3, #64	; 0x40
 800a2f8:	d004      	beq.n	800a304 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a300:	2b00      	cmp	r3, #0
 800a302:	d031      	beq.n	800a368 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fc6f 	bl	800abe8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a314:	2b40      	cmp	r3, #64	; 0x40
 800a316:	d123      	bne.n	800a360 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	689a      	ldr	r2, [r3, #8]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a326:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d013      	beq.n	800a358 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a334:	4a26      	ldr	r2, [pc, #152]	; (800a3d0 <HAL_UART_IRQHandler+0x260>)
 800a336:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7f9 fc39 	bl	8003bb4 <HAL_DMA_Abort_IT>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d016      	beq.n	800a376 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a352:	4610      	mov	r0, r2
 800a354:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a356:	e00e      	b.n	800a376 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f845 	bl	800a3e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a35e:	e00a      	b.n	800a376 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f841 	bl	800a3e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a366:	e006      	b.n	800a376 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f83d 	bl	800a3e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a374:	e025      	b.n	800a3c2 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a376:	bf00      	nop
    return;
 800a378:	e023      	b.n	800a3c2 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00d      	beq.n	800a3a0 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d008      	beq.n	800a3a0 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a392:	2b00      	cmp	r3, #0
 800a394:	d017      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	4798      	blx	r3
    }
    return;
 800a39e:	e012      	b.n	800a3c6 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00e      	beq.n	800a3c8 <HAL_UART_IRQHandler+0x258>
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d009      	beq.n	800a3c8 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fc4d 	bl	800ac54 <UART_EndTransmit_IT>
    return;
 800a3ba:	bf00      	nop
 800a3bc:	e004      	b.n	800a3c8 <HAL_UART_IRQHandler+0x258>
      return;
 800a3be:	bf00      	nop
 800a3c0:	e002      	b.n	800a3c8 <HAL_UART_IRQHandler+0x258>
    return;
 800a3c2:	bf00      	nop
 800a3c4:	e000      	b.n	800a3c8 <HAL_UART_IRQHandler+0x258>
    return;
 800a3c6:	bf00      	nop
  }

}
 800a3c8:	3720      	adds	r7, #32
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	0800ac29 	.word	0x0800ac29

0800a3d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b088      	sub	sp, #32
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a404:	2300      	movs	r3, #0
 800a406:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	431a      	orrs	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	431a      	orrs	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	4313      	orrs	r3, r2
 800a422:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	4bb1      	ldr	r3, [pc, #708]	; (800a6f0 <UART_SetConfig+0x2f4>)
 800a42c:	4013      	ands	r3, r2
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	6812      	ldr	r2, [r2, #0]
 800a432:	6939      	ldr	r1, [r7, #16]
 800a434:	430b      	orrs	r3, r1
 800a436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a1b      	ldr	r3, [r3, #32]
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	430a      	orrs	r2, r1
 800a470:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a9f      	ldr	r2, [pc, #636]	; (800a6f4 <UART_SetConfig+0x2f8>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d121      	bne.n	800a4c0 <UART_SetConfig+0xc4>
 800a47c:	4b9e      	ldr	r3, [pc, #632]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a482:	f003 0303 	and.w	r3, r3, #3
 800a486:	2b03      	cmp	r3, #3
 800a488:	d816      	bhi.n	800a4b8 <UART_SetConfig+0xbc>
 800a48a:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <UART_SetConfig+0x94>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a4a1 	.word	0x0800a4a1
 800a494:	0800a4ad 	.word	0x0800a4ad
 800a498:	0800a4a7 	.word	0x0800a4a7
 800a49c:	0800a4b3 	.word	0x0800a4b3
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	77fb      	strb	r3, [r7, #31]
 800a4a4:	e151      	b.n	800a74a <UART_SetConfig+0x34e>
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	77fb      	strb	r3, [r7, #31]
 800a4aa:	e14e      	b.n	800a74a <UART_SetConfig+0x34e>
 800a4ac:	2304      	movs	r3, #4
 800a4ae:	77fb      	strb	r3, [r7, #31]
 800a4b0:	e14b      	b.n	800a74a <UART_SetConfig+0x34e>
 800a4b2:	2308      	movs	r3, #8
 800a4b4:	77fb      	strb	r3, [r7, #31]
 800a4b6:	e148      	b.n	800a74a <UART_SetConfig+0x34e>
 800a4b8:	2310      	movs	r3, #16
 800a4ba:	77fb      	strb	r3, [r7, #31]
 800a4bc:	bf00      	nop
 800a4be:	e144      	b.n	800a74a <UART_SetConfig+0x34e>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a8d      	ldr	r2, [pc, #564]	; (800a6fc <UART_SetConfig+0x300>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d134      	bne.n	800a534 <UART_SetConfig+0x138>
 800a4ca:	4b8b      	ldr	r3, [pc, #556]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d0:	f003 030c 	and.w	r3, r3, #12
 800a4d4:	2b0c      	cmp	r3, #12
 800a4d6:	d829      	bhi.n	800a52c <UART_SetConfig+0x130>
 800a4d8:	a201      	add	r2, pc, #4	; (adr r2, 800a4e0 <UART_SetConfig+0xe4>)
 800a4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4de:	bf00      	nop
 800a4e0:	0800a515 	.word	0x0800a515
 800a4e4:	0800a52d 	.word	0x0800a52d
 800a4e8:	0800a52d 	.word	0x0800a52d
 800a4ec:	0800a52d 	.word	0x0800a52d
 800a4f0:	0800a521 	.word	0x0800a521
 800a4f4:	0800a52d 	.word	0x0800a52d
 800a4f8:	0800a52d 	.word	0x0800a52d
 800a4fc:	0800a52d 	.word	0x0800a52d
 800a500:	0800a51b 	.word	0x0800a51b
 800a504:	0800a52d 	.word	0x0800a52d
 800a508:	0800a52d 	.word	0x0800a52d
 800a50c:	0800a52d 	.word	0x0800a52d
 800a510:	0800a527 	.word	0x0800a527
 800a514:	2300      	movs	r3, #0
 800a516:	77fb      	strb	r3, [r7, #31]
 800a518:	e117      	b.n	800a74a <UART_SetConfig+0x34e>
 800a51a:	2302      	movs	r3, #2
 800a51c:	77fb      	strb	r3, [r7, #31]
 800a51e:	e114      	b.n	800a74a <UART_SetConfig+0x34e>
 800a520:	2304      	movs	r3, #4
 800a522:	77fb      	strb	r3, [r7, #31]
 800a524:	e111      	b.n	800a74a <UART_SetConfig+0x34e>
 800a526:	2308      	movs	r3, #8
 800a528:	77fb      	strb	r3, [r7, #31]
 800a52a:	e10e      	b.n	800a74a <UART_SetConfig+0x34e>
 800a52c:	2310      	movs	r3, #16
 800a52e:	77fb      	strb	r3, [r7, #31]
 800a530:	bf00      	nop
 800a532:	e10a      	b.n	800a74a <UART_SetConfig+0x34e>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a71      	ldr	r2, [pc, #452]	; (800a700 <UART_SetConfig+0x304>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d120      	bne.n	800a580 <UART_SetConfig+0x184>
 800a53e:	4b6e      	ldr	r3, [pc, #440]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a544:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a548:	2b10      	cmp	r3, #16
 800a54a:	d00f      	beq.n	800a56c <UART_SetConfig+0x170>
 800a54c:	2b10      	cmp	r3, #16
 800a54e:	d802      	bhi.n	800a556 <UART_SetConfig+0x15a>
 800a550:	2b00      	cmp	r3, #0
 800a552:	d005      	beq.n	800a560 <UART_SetConfig+0x164>
 800a554:	e010      	b.n	800a578 <UART_SetConfig+0x17c>
 800a556:	2b20      	cmp	r3, #32
 800a558:	d005      	beq.n	800a566 <UART_SetConfig+0x16a>
 800a55a:	2b30      	cmp	r3, #48	; 0x30
 800a55c:	d009      	beq.n	800a572 <UART_SetConfig+0x176>
 800a55e:	e00b      	b.n	800a578 <UART_SetConfig+0x17c>
 800a560:	2300      	movs	r3, #0
 800a562:	77fb      	strb	r3, [r7, #31]
 800a564:	e0f1      	b.n	800a74a <UART_SetConfig+0x34e>
 800a566:	2302      	movs	r3, #2
 800a568:	77fb      	strb	r3, [r7, #31]
 800a56a:	e0ee      	b.n	800a74a <UART_SetConfig+0x34e>
 800a56c:	2304      	movs	r3, #4
 800a56e:	77fb      	strb	r3, [r7, #31]
 800a570:	e0eb      	b.n	800a74a <UART_SetConfig+0x34e>
 800a572:	2308      	movs	r3, #8
 800a574:	77fb      	strb	r3, [r7, #31]
 800a576:	e0e8      	b.n	800a74a <UART_SetConfig+0x34e>
 800a578:	2310      	movs	r3, #16
 800a57a:	77fb      	strb	r3, [r7, #31]
 800a57c:	bf00      	nop
 800a57e:	e0e4      	b.n	800a74a <UART_SetConfig+0x34e>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a5f      	ldr	r2, [pc, #380]	; (800a704 <UART_SetConfig+0x308>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d120      	bne.n	800a5cc <UART_SetConfig+0x1d0>
 800a58a:	4b5b      	ldr	r3, [pc, #364]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a590:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a594:	2b40      	cmp	r3, #64	; 0x40
 800a596:	d00f      	beq.n	800a5b8 <UART_SetConfig+0x1bc>
 800a598:	2b40      	cmp	r3, #64	; 0x40
 800a59a:	d802      	bhi.n	800a5a2 <UART_SetConfig+0x1a6>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d005      	beq.n	800a5ac <UART_SetConfig+0x1b0>
 800a5a0:	e010      	b.n	800a5c4 <UART_SetConfig+0x1c8>
 800a5a2:	2b80      	cmp	r3, #128	; 0x80
 800a5a4:	d005      	beq.n	800a5b2 <UART_SetConfig+0x1b6>
 800a5a6:	2bc0      	cmp	r3, #192	; 0xc0
 800a5a8:	d009      	beq.n	800a5be <UART_SetConfig+0x1c2>
 800a5aa:	e00b      	b.n	800a5c4 <UART_SetConfig+0x1c8>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	77fb      	strb	r3, [r7, #31]
 800a5b0:	e0cb      	b.n	800a74a <UART_SetConfig+0x34e>
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	77fb      	strb	r3, [r7, #31]
 800a5b6:	e0c8      	b.n	800a74a <UART_SetConfig+0x34e>
 800a5b8:	2304      	movs	r3, #4
 800a5ba:	77fb      	strb	r3, [r7, #31]
 800a5bc:	e0c5      	b.n	800a74a <UART_SetConfig+0x34e>
 800a5be:	2308      	movs	r3, #8
 800a5c0:	77fb      	strb	r3, [r7, #31]
 800a5c2:	e0c2      	b.n	800a74a <UART_SetConfig+0x34e>
 800a5c4:	2310      	movs	r3, #16
 800a5c6:	77fb      	strb	r3, [r7, #31]
 800a5c8:	bf00      	nop
 800a5ca:	e0be      	b.n	800a74a <UART_SetConfig+0x34e>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a4d      	ldr	r2, [pc, #308]	; (800a708 <UART_SetConfig+0x30c>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d124      	bne.n	800a620 <UART_SetConfig+0x224>
 800a5d6:	4b48      	ldr	r3, [pc, #288]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5e4:	d012      	beq.n	800a60c <UART_SetConfig+0x210>
 800a5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ea:	d802      	bhi.n	800a5f2 <UART_SetConfig+0x1f6>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d007      	beq.n	800a600 <UART_SetConfig+0x204>
 800a5f0:	e012      	b.n	800a618 <UART_SetConfig+0x21c>
 800a5f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5f6:	d006      	beq.n	800a606 <UART_SetConfig+0x20a>
 800a5f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5fc:	d009      	beq.n	800a612 <UART_SetConfig+0x216>
 800a5fe:	e00b      	b.n	800a618 <UART_SetConfig+0x21c>
 800a600:	2300      	movs	r3, #0
 800a602:	77fb      	strb	r3, [r7, #31]
 800a604:	e0a1      	b.n	800a74a <UART_SetConfig+0x34e>
 800a606:	2302      	movs	r3, #2
 800a608:	77fb      	strb	r3, [r7, #31]
 800a60a:	e09e      	b.n	800a74a <UART_SetConfig+0x34e>
 800a60c:	2304      	movs	r3, #4
 800a60e:	77fb      	strb	r3, [r7, #31]
 800a610:	e09b      	b.n	800a74a <UART_SetConfig+0x34e>
 800a612:	2308      	movs	r3, #8
 800a614:	77fb      	strb	r3, [r7, #31]
 800a616:	e098      	b.n	800a74a <UART_SetConfig+0x34e>
 800a618:	2310      	movs	r3, #16
 800a61a:	77fb      	strb	r3, [r7, #31]
 800a61c:	bf00      	nop
 800a61e:	e094      	b.n	800a74a <UART_SetConfig+0x34e>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a39      	ldr	r2, [pc, #228]	; (800a70c <UART_SetConfig+0x310>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d124      	bne.n	800a674 <UART_SetConfig+0x278>
 800a62a:	4b33      	ldr	r3, [pc, #204]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a630:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a638:	d012      	beq.n	800a660 <UART_SetConfig+0x264>
 800a63a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a63e:	d802      	bhi.n	800a646 <UART_SetConfig+0x24a>
 800a640:	2b00      	cmp	r3, #0
 800a642:	d007      	beq.n	800a654 <UART_SetConfig+0x258>
 800a644:	e012      	b.n	800a66c <UART_SetConfig+0x270>
 800a646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a64a:	d006      	beq.n	800a65a <UART_SetConfig+0x25e>
 800a64c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a650:	d009      	beq.n	800a666 <UART_SetConfig+0x26a>
 800a652:	e00b      	b.n	800a66c <UART_SetConfig+0x270>
 800a654:	2301      	movs	r3, #1
 800a656:	77fb      	strb	r3, [r7, #31]
 800a658:	e077      	b.n	800a74a <UART_SetConfig+0x34e>
 800a65a:	2302      	movs	r3, #2
 800a65c:	77fb      	strb	r3, [r7, #31]
 800a65e:	e074      	b.n	800a74a <UART_SetConfig+0x34e>
 800a660:	2304      	movs	r3, #4
 800a662:	77fb      	strb	r3, [r7, #31]
 800a664:	e071      	b.n	800a74a <UART_SetConfig+0x34e>
 800a666:	2308      	movs	r3, #8
 800a668:	77fb      	strb	r3, [r7, #31]
 800a66a:	e06e      	b.n	800a74a <UART_SetConfig+0x34e>
 800a66c:	2310      	movs	r3, #16
 800a66e:	77fb      	strb	r3, [r7, #31]
 800a670:	bf00      	nop
 800a672:	e06a      	b.n	800a74a <UART_SetConfig+0x34e>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a25      	ldr	r2, [pc, #148]	; (800a710 <UART_SetConfig+0x314>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d124      	bne.n	800a6c8 <UART_SetConfig+0x2cc>
 800a67e:	4b1e      	ldr	r3, [pc, #120]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a684:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a68c:	d012      	beq.n	800a6b4 <UART_SetConfig+0x2b8>
 800a68e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a692:	d802      	bhi.n	800a69a <UART_SetConfig+0x29e>
 800a694:	2b00      	cmp	r3, #0
 800a696:	d007      	beq.n	800a6a8 <UART_SetConfig+0x2ac>
 800a698:	e012      	b.n	800a6c0 <UART_SetConfig+0x2c4>
 800a69a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a69e:	d006      	beq.n	800a6ae <UART_SetConfig+0x2b2>
 800a6a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6a4:	d009      	beq.n	800a6ba <UART_SetConfig+0x2be>
 800a6a6:	e00b      	b.n	800a6c0 <UART_SetConfig+0x2c4>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	77fb      	strb	r3, [r7, #31]
 800a6ac:	e04d      	b.n	800a74a <UART_SetConfig+0x34e>
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	77fb      	strb	r3, [r7, #31]
 800a6b2:	e04a      	b.n	800a74a <UART_SetConfig+0x34e>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	77fb      	strb	r3, [r7, #31]
 800a6b8:	e047      	b.n	800a74a <UART_SetConfig+0x34e>
 800a6ba:	2308      	movs	r3, #8
 800a6bc:	77fb      	strb	r3, [r7, #31]
 800a6be:	e044      	b.n	800a74a <UART_SetConfig+0x34e>
 800a6c0:	2310      	movs	r3, #16
 800a6c2:	77fb      	strb	r3, [r7, #31]
 800a6c4:	bf00      	nop
 800a6c6:	e040      	b.n	800a74a <UART_SetConfig+0x34e>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a11      	ldr	r2, [pc, #68]	; (800a714 <UART_SetConfig+0x318>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d139      	bne.n	800a746 <UART_SetConfig+0x34a>
 800a6d2:	4b09      	ldr	r3, [pc, #36]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a6dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6e0:	d027      	beq.n	800a732 <UART_SetConfig+0x336>
 800a6e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6e6:	d817      	bhi.n	800a718 <UART_SetConfig+0x31c>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d01c      	beq.n	800a726 <UART_SetConfig+0x32a>
 800a6ec:	e027      	b.n	800a73e <UART_SetConfig+0x342>
 800a6ee:	bf00      	nop
 800a6f0:	efff69f3 	.word	0xefff69f3
 800a6f4:	40011000 	.word	0x40011000
 800a6f8:	40023800 	.word	0x40023800
 800a6fc:	40004400 	.word	0x40004400
 800a700:	40004800 	.word	0x40004800
 800a704:	40004c00 	.word	0x40004c00
 800a708:	40005000 	.word	0x40005000
 800a70c:	40011400 	.word	0x40011400
 800a710:	40007800 	.word	0x40007800
 800a714:	40007c00 	.word	0x40007c00
 800a718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a71c:	d006      	beq.n	800a72c <UART_SetConfig+0x330>
 800a71e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a722:	d009      	beq.n	800a738 <UART_SetConfig+0x33c>
 800a724:	e00b      	b.n	800a73e <UART_SetConfig+0x342>
 800a726:	2300      	movs	r3, #0
 800a728:	77fb      	strb	r3, [r7, #31]
 800a72a:	e00e      	b.n	800a74a <UART_SetConfig+0x34e>
 800a72c:	2302      	movs	r3, #2
 800a72e:	77fb      	strb	r3, [r7, #31]
 800a730:	e00b      	b.n	800a74a <UART_SetConfig+0x34e>
 800a732:	2304      	movs	r3, #4
 800a734:	77fb      	strb	r3, [r7, #31]
 800a736:	e008      	b.n	800a74a <UART_SetConfig+0x34e>
 800a738:	2308      	movs	r3, #8
 800a73a:	77fb      	strb	r3, [r7, #31]
 800a73c:	e005      	b.n	800a74a <UART_SetConfig+0x34e>
 800a73e:	2310      	movs	r3, #16
 800a740:	77fb      	strb	r3, [r7, #31]
 800a742:	bf00      	nop
 800a744:	e001      	b.n	800a74a <UART_SetConfig+0x34e>
 800a746:	2310      	movs	r3, #16
 800a748:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a752:	d17f      	bne.n	800a854 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a754:	7ffb      	ldrb	r3, [r7, #31]
 800a756:	2b08      	cmp	r3, #8
 800a758:	d85c      	bhi.n	800a814 <UART_SetConfig+0x418>
 800a75a:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <UART_SetConfig+0x364>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a785 	.word	0x0800a785
 800a764:	0800a7a5 	.word	0x0800a7a5
 800a768:	0800a7c5 	.word	0x0800a7c5
 800a76c:	0800a815 	.word	0x0800a815
 800a770:	0800a7dd 	.word	0x0800a7dd
 800a774:	0800a815 	.word	0x0800a815
 800a778:	0800a815 	.word	0x0800a815
 800a77c:	0800a815 	.word	0x0800a815
 800a780:	0800a7fd 	.word	0x0800a7fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a784:	f7fc f808 	bl	8006798 <HAL_RCC_GetPCLK1Freq>
 800a788:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	005a      	lsls	r2, r3, #1
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	085b      	lsrs	r3, r3, #1
 800a794:	441a      	add	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	61bb      	str	r3, [r7, #24]
        break;
 800a7a2:	e03a      	b.n	800a81a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7a4:	f7fc f80c 	bl	80067c0 <HAL_RCC_GetPCLK2Freq>
 800a7a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	005a      	lsls	r2, r3, #1
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	085b      	lsrs	r3, r3, #1
 800a7b4:	441a      	add	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	61bb      	str	r3, [r7, #24]
        break;
 800a7c2:	e02a      	b.n	800a81a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	085a      	lsrs	r2, r3, #1
 800a7ca:	4b5f      	ldr	r3, [pc, #380]	; (800a948 <UART_SetConfig+0x54c>)
 800a7cc:	4413      	add	r3, r2
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	6852      	ldr	r2, [r2, #4]
 800a7d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	61bb      	str	r3, [r7, #24]
        break;
 800a7da:	e01e      	b.n	800a81a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7dc:	f7fb ff1e 	bl	800661c <HAL_RCC_GetSysClockFreq>
 800a7e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	005a      	lsls	r2, r3, #1
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	441a      	add	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	61bb      	str	r3, [r7, #24]
        break;
 800a7fa:	e00e      	b.n	800a81a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	085b      	lsrs	r3, r3, #1
 800a802:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a80e:	b29b      	uxth	r3, r3
 800a810:	61bb      	str	r3, [r7, #24]
        break;
 800a812:	e002      	b.n	800a81a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	75fb      	strb	r3, [r7, #23]
        break;
 800a818:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	2b0f      	cmp	r3, #15
 800a81e:	d916      	bls.n	800a84e <UART_SetConfig+0x452>
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a826:	d212      	bcs.n	800a84e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	f023 030f 	bic.w	r3, r3, #15
 800a830:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	085b      	lsrs	r3, r3, #1
 800a836:	b29b      	uxth	r3, r3
 800a838:	f003 0307 	and.w	r3, r3, #7
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	897b      	ldrh	r3, [r7, #10]
 800a840:	4313      	orrs	r3, r2
 800a842:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	897a      	ldrh	r2, [r7, #10]
 800a84a:	60da      	str	r2, [r3, #12]
 800a84c:	e070      	b.n	800a930 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	75fb      	strb	r3, [r7, #23]
 800a852:	e06d      	b.n	800a930 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a854:	7ffb      	ldrb	r3, [r7, #31]
 800a856:	2b08      	cmp	r3, #8
 800a858:	d859      	bhi.n	800a90e <UART_SetConfig+0x512>
 800a85a:	a201      	add	r2, pc, #4	; (adr r2, 800a860 <UART_SetConfig+0x464>)
 800a85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a860:	0800a885 	.word	0x0800a885
 800a864:	0800a8a3 	.word	0x0800a8a3
 800a868:	0800a8c1 	.word	0x0800a8c1
 800a86c:	0800a90f 	.word	0x0800a90f
 800a870:	0800a8d9 	.word	0x0800a8d9
 800a874:	0800a90f 	.word	0x0800a90f
 800a878:	0800a90f 	.word	0x0800a90f
 800a87c:	0800a90f 	.word	0x0800a90f
 800a880:	0800a8f7 	.word	0x0800a8f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a884:	f7fb ff88 	bl	8006798 <HAL_RCC_GetPCLK1Freq>
 800a888:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	085a      	lsrs	r2, r3, #1
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	441a      	add	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	fbb2 f3f3 	udiv	r3, r2, r3
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	61bb      	str	r3, [r7, #24]
        break;
 800a8a0:	e038      	b.n	800a914 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8a2:	f7fb ff8d 	bl	80067c0 <HAL_RCC_GetPCLK2Freq>
 800a8a6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	085a      	lsrs	r2, r3, #1
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	441a      	add	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	61bb      	str	r3, [r7, #24]
        break;
 800a8be:	e029      	b.n	800a914 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	085a      	lsrs	r2, r3, #1
 800a8c6:	4b21      	ldr	r3, [pc, #132]	; (800a94c <UART_SetConfig+0x550>)
 800a8c8:	4413      	add	r3, r2
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	6852      	ldr	r2, [r2, #4]
 800a8ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	61bb      	str	r3, [r7, #24]
        break;
 800a8d6:	e01d      	b.n	800a914 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8d8:	f7fb fea0 	bl	800661c <HAL_RCC_GetSysClockFreq>
 800a8dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	085a      	lsrs	r2, r3, #1
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	441a      	add	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	61bb      	str	r3, [r7, #24]
        break;
 800a8f4:	e00e      	b.n	800a914 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	085b      	lsrs	r3, r3, #1
 800a8fc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	fbb2 f3f3 	udiv	r3, r2, r3
 800a908:	b29b      	uxth	r3, r3
 800a90a:	61bb      	str	r3, [r7, #24]
        break;
 800a90c:	e002      	b.n	800a914 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	75fb      	strb	r3, [r7, #23]
        break;
 800a912:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	2b0f      	cmp	r3, #15
 800a918:	d908      	bls.n	800a92c <UART_SetConfig+0x530>
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a920:	d204      	bcs.n	800a92c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	69ba      	ldr	r2, [r7, #24]
 800a928:	60da      	str	r2, [r3, #12]
 800a92a:	e001      	b.n	800a930 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3720      	adds	r7, #32
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	01e84800 	.word	0x01e84800
 800a94c:	00f42400 	.word	0x00f42400

0800a950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00a      	beq.n	800a97a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	430a      	orrs	r2, r1
 800a978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00a      	beq.n	800a99c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	430a      	orrs	r2, r1
 800a99a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	f003 0304 	and.w	r3, r3, #4
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00a      	beq.n	800a9be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	430a      	orrs	r2, r1
 800a9bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c2:	f003 0308 	and.w	r3, r3, #8
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00a      	beq.n	800a9e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	430a      	orrs	r2, r1
 800a9de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e4:	f003 0310 	and.w	r3, r3, #16
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00a      	beq.n	800aa02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	430a      	orrs	r2, r1
 800aa00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa06:	f003 0320 	and.w	r3, r3, #32
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00a      	beq.n	800aa24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	430a      	orrs	r2, r1
 800aa22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d01a      	beq.n	800aa66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa4e:	d10a      	bne.n	800aa66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	430a      	orrs	r2, r1
 800aa64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00a      	beq.n	800aa88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	430a      	orrs	r2, r1
 800aa86:	605a      	str	r2, [r3, #4]
  }
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aaa2:	f7f8 fafb 	bl	800309c <HAL_GetTick>
 800aaa6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 0308 	and.w	r3, r3, #8
 800aab2:	2b08      	cmp	r3, #8
 800aab4:	d10e      	bne.n	800aad4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aab6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f814 	bl	800aaf2 <UART_WaitOnFlagUntilTimeout>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aad0:	2303      	movs	r3, #3
 800aad2:	e00a      	b.n	800aaea <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2220      	movs	r2, #32
 800aad8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2220      	movs	r2, #32
 800aade:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	603b      	str	r3, [r7, #0]
 800aafe:	4613      	mov	r3, r2
 800ab00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab02:	e05d      	b.n	800abc0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0a:	d059      	beq.n	800abc0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab0c:	f7f8 fac6 	bl	800309c <HAL_GetTick>
 800ab10:	4602      	mov	r2, r0
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	69ba      	ldr	r2, [r7, #24]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d302      	bcc.n	800ab22 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d11b      	bne.n	800ab5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	689a      	ldr	r2, [r3, #8]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f022 0201 	bic.w	r2, r2, #1
 800ab40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2220      	movs	r2, #32
 800ab46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2220      	movs	r2, #32
 800ab4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e042      	b.n	800abe0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 0304 	and.w	r3, r3, #4
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d02b      	beq.n	800abc0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab76:	d123      	bne.n	800abc0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab80:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	689a      	ldr	r2, [r3, #8]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f022 0201 	bic.w	r2, r2, #1
 800aba0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2220      	movs	r2, #32
 800aba6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2220      	movs	r2, #32
 800abac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2220      	movs	r2, #32
 800abb2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e00f      	b.n	800abe0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	69da      	ldr	r2, [r3, #28]
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	4013      	ands	r3, r2
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	429a      	cmp	r2, r3
 800abce:	bf0c      	ite	eq
 800abd0:	2301      	moveq	r3, #1
 800abd2:	2300      	movne	r3, #0
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	461a      	mov	r2, r3
 800abd8:	79fb      	ldrb	r3, [r7, #7]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d092      	beq.n	800ab04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800abfe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689a      	ldr	r2, [r3, #8]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f022 0201 	bic.w	r2, r2, #1
 800ac0e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2220      	movs	r2, #32
 800ac14:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f7ff fbce 	bl	800a3e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac4c:	bf00      	nop
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac6a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2220      	movs	r2, #32
 800ac70:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff fbab 	bl	800a3d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d027      	beq.n	800acf2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	4b2f      	ldr	r3, [pc, #188]	; (800ad68 <FMC_SDRAM_Init+0xe0>)
 800acac:	4013      	ands	r3, r2
 800acae:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800acb8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800acbe:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800acc4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800acca:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800acd0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800acd6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800acdc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ace2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	e032      	b.n	800ad58 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800acfe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ad08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ad0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	4b12      	ldr	r3, [pc, #72]	; (800ad68 <FMC_SDRAM_Init+0xe0>)
 800ad20:	4013      	ands	r3, r2
 800ad22:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad2c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ad32:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ad38:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ad3e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ad44:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	ffff8000 	.word	0xffff8000

0800ad6c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d02e      	beq.n	800ade4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ad92:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ada2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800adac:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	3b01      	subs	r3, #1
 800adb4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800adb6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800adc0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800adca:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	3b01      	subs	r3, #1
 800add2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800add4:	4313      	orrs	r3, r2
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	4313      	orrs	r3, r2
 800adda:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	609a      	str	r2, [r3, #8]
 800ade2:	e039      	b.n	800ae58 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	4b1e      	ldr	r3, [pc, #120]	; (800ae68 <FMC_SDRAM_Timing_Init+0xfc>)
 800adee:	4013      	ands	r3, r2
 800adf0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ae02:	4313      	orrs	r3, r2
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ae16:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae26:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ae30:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	3b01      	subs	r3, #1
 800ae38:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ae3a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	3b01      	subs	r3, #1
 800ae42:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae44:	4313      	orrs	r3, r2
 800ae46:	693a      	ldr	r2, [r7, #16]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	371c      	adds	r7, #28
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	ff0f0fff 	.word	0xff0f0fff

0800ae6c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ae84:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800ae8e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ae96:	4313      	orrs	r3, r2
 800ae98:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	371c      	adds	r7, #28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	695a      	ldr	r2, [r3, #20]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	431a      	orrs	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aed4:	b084      	sub	sp, #16
 800aed6:	b480      	push	{r7}
 800aed8:	b085      	sub	sp, #20
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	f107 001c 	add.w	r0, r7, #28
 800aee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aeea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aeec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aeee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aef2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aef6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aefa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aefe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	4313      	orrs	r3, r2
 800af04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685a      	ldr	r2, [r3, #4]
 800af0a:	4b07      	ldr	r3, [pc, #28]	; (800af28 <SDMMC_Init+0x54>)
 800af0c:	4013      	ands	r3, r2
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	431a      	orrs	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	b004      	add	sp, #16
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	ffff8100 	.word	0xffff8100

0800af2c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2203      	movs	r2, #3
 800af52:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800af54:	2002      	movs	r0, #2
 800af56:	f7f8 f8ad 	bl	80030b4 <HAL_Delay>
  
  return HAL_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 0303 	and.w	r3, r3, #3
}
 800af74:	4618      	mov	r0, r3
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af9e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800afa4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800afaa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4313      	orrs	r3, r2
 800afb0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	68da      	ldr	r2, [r3, #12]
 800afb6:	4b06      	ldr	r3, [pc, #24]	; (800afd0 <SDMMC_SendCommand+0x50>)
 800afb8:	4013      	ands	r3, r2
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	431a      	orrs	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	fffff000 	.word	0xfffff000

0800afd4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	b2db      	uxtb	r3, r3
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800afee:	b480      	push	{r7}
 800aff0:	b085      	sub	sp, #20
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	3314      	adds	r3, #20
 800affc:	461a      	mov	r2, r3
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	4413      	add	r3, r2
 800b002:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
}  
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b03a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b040:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b046:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	431a      	orrs	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0

}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b07a:	2310      	movs	r3, #16
 800b07c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b07e:	2340      	movs	r3, #64	; 0x40
 800b080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b082:	2300      	movs	r3, #0
 800b084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b08a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b08c:	f107 0308 	add.w	r3, r7, #8
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7ff ff74 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b098:	f241 3288 	movw	r2, #5000	; 0x1388
 800b09c:	2110      	movs	r1, #16
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fa42 	bl	800b528 <SDMMC_GetCmdResp1>
 800b0a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0a6:	69fb      	ldr	r3, [r7, #28]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3720      	adds	r7, #32
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b088      	sub	sp, #32
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b0be:	2311      	movs	r3, #17
 800b0c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0c2:	2340      	movs	r3, #64	; 0x40
 800b0c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0d0:	f107 0308 	add.w	r3, r7, #8
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7ff ff52 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b0dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e0:	2111      	movs	r1, #17
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 fa20 	bl	800b528 <SDMMC_GetCmdResp1>
 800b0e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0ea:	69fb      	ldr	r3, [r7, #28]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3720      	adds	r7, #32
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b102:	2312      	movs	r3, #18
 800b104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b106:	2340      	movs	r3, #64	; 0x40
 800b108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b10a:	2300      	movs	r3, #0
 800b10c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b10e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b114:	f107 0308 	add.w	r3, r7, #8
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff ff30 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b120:	f241 3288 	movw	r2, #5000	; 0x1388
 800b124:	2112      	movs	r1, #18
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f9fe 	bl	800b528 <SDMMC_GetCmdResp1>
 800b12c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b12e:	69fb      	ldr	r3, [r7, #28]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3720      	adds	r7, #32
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b088      	sub	sp, #32
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b146:	2318      	movs	r3, #24
 800b148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b14a:	2340      	movs	r3, #64	; 0x40
 800b14c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b14e:	2300      	movs	r3, #0
 800b150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b156:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b158:	f107 0308 	add.w	r3, r7, #8
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7ff ff0e 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b164:	f241 3288 	movw	r2, #5000	; 0x1388
 800b168:	2118      	movs	r1, #24
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f9dc 	bl	800b528 <SDMMC_GetCmdResp1>
 800b170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b172:	69fb      	ldr	r3, [r7, #28]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3720      	adds	r7, #32
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b088      	sub	sp, #32
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b18a:	2319      	movs	r3, #25
 800b18c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b18e:	2340      	movs	r3, #64	; 0x40
 800b190:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b192:	2300      	movs	r3, #0
 800b194:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b19a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b19c:	f107 0308 	add.w	r3, r7, #8
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7ff feec 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b1a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ac:	2119      	movs	r1, #25
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f9ba 	bl	800b528 <SDMMC_GetCmdResp1>
 800b1b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1b6:	69fb      	ldr	r3, [r7, #28]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3720      	adds	r7, #32
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b088      	sub	sp, #32
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b1cc:	230c      	movs	r3, #12
 800b1ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1d0:	2340      	movs	r3, #64	; 0x40
 800b1d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1de:	f107 0308 	add.w	r3, r7, #8
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff fecb 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b1ea:	4a05      	ldr	r2, [pc, #20]	; (800b200 <SDMMC_CmdStopTransfer+0x40>)
 800b1ec:	210c      	movs	r1, #12
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f99a 	bl	800b528 <SDMMC_GetCmdResp1>
 800b1f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1f6:	69fb      	ldr	r3, [r7, #28]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3720      	adds	r7, #32
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	05f5e100 	.word	0x05f5e100

0800b204 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b08a      	sub	sp, #40	; 0x28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b214:	2307      	movs	r3, #7
 800b216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b218:	2340      	movs	r3, #64	; 0x40
 800b21a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b21c:	2300      	movs	r3, #0
 800b21e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b224:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b226:	f107 0310 	add.w	r3, r7, #16
 800b22a:	4619      	mov	r1, r3
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f7ff fea7 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b232:	f241 3288 	movw	r2, #5000	; 0x1388
 800b236:	2107      	movs	r1, #7
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 f975 	bl	800b528 <SDMMC_GetCmdResp1>
 800b23e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b242:	4618      	mov	r0, r3
 800b244:	3728      	adds	r7, #40	; 0x28
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b088      	sub	sp, #32
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b252:	2300      	movs	r3, #0
 800b254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b256:	2300      	movs	r3, #0
 800b258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b25a:	2300      	movs	r3, #0
 800b25c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b25e:	2300      	movs	r3, #0
 800b260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b266:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b268:	f107 0308 	add.w	r3, r7, #8
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7ff fe86 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f92f 	bl	800b4d8 <SDMMC_GetCmdError>
 800b27a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b27c:	69fb      	ldr	r3, [r7, #28]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3720      	adds	r7, #32
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b088      	sub	sp, #32
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b28e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b294:	2308      	movs	r3, #8
 800b296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b298:	2340      	movs	r3, #64	; 0x40
 800b29a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b29c:	2300      	movs	r3, #0
 800b29e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2a6:	f107 0308 	add.w	r3, r7, #8
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7ff fe67 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fb18 	bl	800b8e8 <SDMMC_GetCmdResp7>
 800b2b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ba:	69fb      	ldr	r3, [r7, #28]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3720      	adds	r7, #32
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b088      	sub	sp, #32
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b2d2:	2337      	movs	r3, #55	; 0x37
 800b2d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2d6:	2340      	movs	r3, #64	; 0x40
 800b2d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2e4:	f107 0308 	add.w	r3, r7, #8
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7ff fe48 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b2f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2f4:	2137      	movs	r1, #55	; 0x37
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f916 	bl	800b528 <SDMMC_GetCmdResp1>
 800b2fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2fe:	69fb      	ldr	r3, [r7, #28]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3720      	adds	r7, #32
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b088      	sub	sp, #32
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	4b0d      	ldr	r3, [pc, #52]	; (800b34c <SDMMC_CmdAppOperCommand+0x44>)
 800b316:	4313      	orrs	r3, r2
 800b318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b31a:	2329      	movs	r3, #41	; 0x29
 800b31c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b31e:	2340      	movs	r3, #64	; 0x40
 800b320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b322:	2300      	movs	r3, #0
 800b324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b32a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b32c:	f107 0308 	add.w	r3, r7, #8
 800b330:	4619      	mov	r1, r3
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7ff fe24 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fa27 	bl	800b78c <SDMMC_GetCmdResp3>
 800b33e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b340:	69fb      	ldr	r3, [r7, #28]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3720      	adds	r7, #32
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	80100000 	.word	0x80100000

0800b350 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b088      	sub	sp, #32
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b35e:	2306      	movs	r3, #6
 800b360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b362:	2340      	movs	r3, #64	; 0x40
 800b364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b366:	2300      	movs	r3, #0
 800b368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b36e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b370:	f107 0308 	add.w	r3, r7, #8
 800b374:	4619      	mov	r1, r3
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7ff fe02 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b37c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b380:	2106      	movs	r1, #6
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f8d0 	bl	800b528 <SDMMC_GetCmdResp1>
 800b388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b38a:	69fb      	ldr	r3, [r7, #28]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3720      	adds	r7, #32
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b088      	sub	sp, #32
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b39c:	2300      	movs	r3, #0
 800b39e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b3a0:	2333      	movs	r3, #51	; 0x33
 800b3a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3a4:	2340      	movs	r3, #64	; 0x40
 800b3a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3b2:	f107 0308 	add.w	r3, r7, #8
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f7ff fde1 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b3be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3c2:	2133      	movs	r1, #51	; 0x33
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f8af 	bl	800b528 <SDMMC_GetCmdResp1>
 800b3ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3cc:	69fb      	ldr	r3, [r7, #28]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3720      	adds	r7, #32
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b088      	sub	sp, #32
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b3e2:	2302      	movs	r3, #2
 800b3e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b3e6:	23c0      	movs	r3, #192	; 0xc0
 800b3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3f4:	f107 0308 	add.w	r3, r7, #8
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff fdc0 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f97d 	bl	800b700 <SDMMC_GetCmdResp2>
 800b406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b408:	69fb      	ldr	r3, [r7, #28]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3720      	adds	r7, #32
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b088      	sub	sp, #32
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b420:	2309      	movs	r3, #9
 800b422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b424:	23c0      	movs	r3, #192	; 0xc0
 800b426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b428:	2300      	movs	r3, #0
 800b42a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b42c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b430:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b432:	f107 0308 	add.w	r3, r7, #8
 800b436:	4619      	mov	r1, r3
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff fda1 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f95e 	bl	800b700 <SDMMC_GetCmdResp2>
 800b444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b446:	69fb      	ldr	r3, [r7, #28]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3720      	adds	r7, #32
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b45a:	2300      	movs	r3, #0
 800b45c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b45e:	2303      	movs	r3, #3
 800b460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b462:	2340      	movs	r3, #64	; 0x40
 800b464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b466:	2300      	movs	r3, #0
 800b468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b46a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b46e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b470:	f107 0308 	add.w	r3, r7, #8
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7ff fd82 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b47c:	683a      	ldr	r2, [r7, #0]
 800b47e:	2103      	movs	r1, #3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f9bd 	bl	800b800 <SDMMC_GetCmdResp6>
 800b486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b488:	69fb      	ldr	r3, [r7, #28]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3720      	adds	r7, #32
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b088      	sub	sp, #32
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b4a0:	230d      	movs	r3, #13
 800b4a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4a4:	2340      	movs	r3, #64	; 0x40
 800b4a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4b2:	f107 0308 	add.w	r3, r7, #8
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff fd61 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b4be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c2:	210d      	movs	r1, #13
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f82f 	bl	800b528 <SDMMC_GetCmdResp1>
 800b4ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3720      	adds	r7, #32
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
	...

0800b4d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b4d8:	b490      	push	{r4, r7}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4e0:	4b0f      	ldr	r3, [pc, #60]	; (800b520 <SDMMC_GetCmdError+0x48>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a0f      	ldr	r2, [pc, #60]	; (800b524 <SDMMC_GetCmdError+0x4c>)
 800b4e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ea:	0a5b      	lsrs	r3, r3, #9
 800b4ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b4f4:	4623      	mov	r3, r4
 800b4f6:	1e5c      	subs	r4, r3, #1
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d102      	bne.n	800b502 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b500:	e009      	b.n	800b516 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0f2      	beq.n	800b4f4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	22c5      	movs	r2, #197	; 0xc5
 800b512:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bc90      	pop	{r4, r7}
 800b51e:	4770      	bx	lr
 800b520:	2000002c 	.word	0x2000002c
 800b524:	10624dd3 	.word	0x10624dd3

0800b528 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b528:	b590      	push	{r4, r7, lr}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	460b      	mov	r3, r1
 800b532:	607a      	str	r2, [r7, #4]
 800b534:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b536:	4b6f      	ldr	r3, [pc, #444]	; (800b6f4 <SDMMC_GetCmdResp1+0x1cc>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a6f      	ldr	r2, [pc, #444]	; (800b6f8 <SDMMC_GetCmdResp1+0x1d0>)
 800b53c:	fba2 2303 	umull	r2, r3, r2, r3
 800b540:	0a5b      	lsrs	r3, r3, #9
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b548:	4623      	mov	r3, r4
 800b54a:	1e5c      	subs	r4, r3, #1
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d102      	bne.n	800b556 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b550:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b554:	e0c9      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b55a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0f0      	beq.n	800b548 <SDMMC_GetCmdResp1+0x20>
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1eb      	bne.n	800b548 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d004      	beq.n	800b586 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2204      	movs	r2, #4
 800b580:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b582:	2304      	movs	r3, #4
 800b584:	e0b1      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d004      	beq.n	800b59c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2201      	movs	r2, #1
 800b596:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b598:	2301      	movs	r3, #1
 800b59a:	e0a6      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	22c5      	movs	r2, #197	; 0xc5
 800b5a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7ff fd16 	bl	800afd4 <SDMMC_GetCommandResponse>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	7afb      	ldrb	r3, [r7, #11]
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d001      	beq.n	800b5b6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e099      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff fd18 	bl	800afee <SDMMC_GetResponse>
 800b5be:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	4b4e      	ldr	r3, [pc, #312]	; (800b6fc <SDMMC_GetCmdResp1+0x1d4>)
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e08d      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	da02      	bge.n	800b5da <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b5d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5d8:	e087      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d001      	beq.n	800b5e8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b5e4:	2340      	movs	r3, #64	; 0x40
 800b5e6:	e080      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b5f2:	2380      	movs	r3, #128	; 0x80
 800b5f4:	e079      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b600:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b604:	e071      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d002      	beq.n	800b616 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b610:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b614:	e069      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b624:	e061      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b634:	e059      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b644:	e051      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b654:	e049      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b664:	e041      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b674:	e039      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b684:	e031      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b690:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b694:	e029      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b6a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b6a4:	e021      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b6b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6b4:	e019      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b6c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b6c4:	e011      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b6d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b6d4:	e009      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	f003 0308 	and.w	r3, r3, #8
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d002      	beq.n	800b6e6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b6e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b6e4:	e001      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b6e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	371c      	adds	r7, #28
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd90      	pop	{r4, r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	2000002c 	.word	0x2000002c
 800b6f8:	10624dd3 	.word	0x10624dd3
 800b6fc:	fdffe008 	.word	0xfdffe008

0800b700 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b700:	b490      	push	{r4, r7}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b708:	4b1e      	ldr	r3, [pc, #120]	; (800b784 <SDMMC_GetCmdResp2+0x84>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a1e      	ldr	r2, [pc, #120]	; (800b788 <SDMMC_GetCmdResp2+0x88>)
 800b70e:	fba2 2303 	umull	r2, r3, r2, r3
 800b712:	0a5b      	lsrs	r3, r3, #9
 800b714:	f241 3288 	movw	r2, #5000	; 0x1388
 800b718:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b71c:	4623      	mov	r3, r4
 800b71e:	1e5c      	subs	r4, r3, #1
 800b720:	2b00      	cmp	r3, #0
 800b722:	d102      	bne.n	800b72a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b728:	e026      	b.n	800b778 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b736:	2b00      	cmp	r3, #0
 800b738:	d0f0      	beq.n	800b71c <SDMMC_GetCmdResp2+0x1c>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1eb      	bne.n	800b71c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b748:	f003 0304 	and.w	r3, r3, #4
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d004      	beq.n	800b75a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2204      	movs	r2, #4
 800b754:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b756:	2304      	movs	r3, #4
 800b758:	e00e      	b.n	800b778 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	d004      	beq.n	800b770 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e003      	b.n	800b778 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	22c5      	movs	r2, #197	; 0xc5
 800b774:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bc90      	pop	{r4, r7}
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop
 800b784:	2000002c 	.word	0x2000002c
 800b788:	10624dd3 	.word	0x10624dd3

0800b78c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b78c:	b490      	push	{r4, r7}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b794:	4b18      	ldr	r3, [pc, #96]	; (800b7f8 <SDMMC_GetCmdResp3+0x6c>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a18      	ldr	r2, [pc, #96]	; (800b7fc <SDMMC_GetCmdResp3+0x70>)
 800b79a:	fba2 2303 	umull	r2, r3, r2, r3
 800b79e:	0a5b      	lsrs	r3, r3, #9
 800b7a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b7a8:	4623      	mov	r3, r4
 800b7aa:	1e5c      	subs	r4, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d102      	bne.n	800b7b6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7b4:	e01b      	b.n	800b7ee <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0f0      	beq.n	800b7a8 <SDMMC_GetCmdResp3+0x1c>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1eb      	bne.n	800b7a8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d4:	f003 0304 	and.w	r3, r3, #4
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d004      	beq.n	800b7e6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2204      	movs	r2, #4
 800b7e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7e2:	2304      	movs	r3, #4
 800b7e4:	e003      	b.n	800b7ee <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	22c5      	movs	r2, #197	; 0xc5
 800b7ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bc90      	pop	{r4, r7}
 800b7f6:	4770      	bx	lr
 800b7f8:	2000002c 	.word	0x2000002c
 800b7fc:	10624dd3 	.word	0x10624dd3

0800b800 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b800:	b590      	push	{r4, r7, lr}
 800b802:	b087      	sub	sp, #28
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	460b      	mov	r3, r1
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b80e:	4b34      	ldr	r3, [pc, #208]	; (800b8e0 <SDMMC_GetCmdResp6+0xe0>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a34      	ldr	r2, [pc, #208]	; (800b8e4 <SDMMC_GetCmdResp6+0xe4>)
 800b814:	fba2 2303 	umull	r2, r3, r2, r3
 800b818:	0a5b      	lsrs	r3, r3, #9
 800b81a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b81e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b822:	4623      	mov	r3, r4
 800b824:	1e5c      	subs	r4, r3, #1
 800b826:	2b00      	cmp	r3, #0
 800b828:	d102      	bne.n	800b830 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b82a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b82e:	e052      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b834:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d0f0      	beq.n	800b822 <SDMMC_GetCmdResp6+0x22>
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1eb      	bne.n	800b822 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84e:	f003 0304 	and.w	r3, r3, #4
 800b852:	2b00      	cmp	r3, #0
 800b854:	d004      	beq.n	800b860 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2204      	movs	r2, #4
 800b85a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b85c:	2304      	movs	r3, #4
 800b85e:	e03a      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b864:	f003 0301 	and.w	r3, r3, #1
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d004      	beq.n	800b876 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2201      	movs	r2, #1
 800b870:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b872:	2301      	movs	r3, #1
 800b874:	e02f      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f7ff fbac 	bl	800afd4 <SDMMC_GetCommandResponse>
 800b87c:	4603      	mov	r3, r0
 800b87e:	461a      	mov	r2, r3
 800b880:	7afb      	ldrb	r3, [r7, #11]
 800b882:	4293      	cmp	r3, r2
 800b884:	d001      	beq.n	800b88a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b886:	2301      	movs	r3, #1
 800b888:	e025      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	22c5      	movs	r2, #197	; 0xc5
 800b88e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b890:	2100      	movs	r1, #0
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f7ff fbab 	bl	800afee <SDMMC_GetResponse>
 800b898:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d106      	bne.n	800b8b2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	0c1b      	lsrs	r3, r3, #16
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e011      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b8bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8c0:	e009      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d002      	beq.n	800b8d2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8d0:	e001      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b8d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	371c      	adds	r7, #28
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd90      	pop	{r4, r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	2000002c 	.word	0x2000002c
 800b8e4:	10624dd3 	.word	0x10624dd3

0800b8e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b8e8:	b490      	push	{r4, r7}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8f0:	4b21      	ldr	r3, [pc, #132]	; (800b978 <SDMMC_GetCmdResp7+0x90>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a21      	ldr	r2, [pc, #132]	; (800b97c <SDMMC_GetCmdResp7+0x94>)
 800b8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b8fa:	0a5b      	lsrs	r3, r3, #9
 800b8fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b900:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b904:	4623      	mov	r3, r4
 800b906:	1e5c      	subs	r4, r3, #1
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d102      	bne.n	800b912 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b90c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b910:	e02c      	b.n	800b96c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b916:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d0f0      	beq.n	800b904 <SDMMC_GetCmdResp7+0x1c>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1eb      	bne.n	800b904 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b930:	f003 0304 	and.w	r3, r3, #4
 800b934:	2b00      	cmp	r3, #0
 800b936:	d004      	beq.n	800b942 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2204      	movs	r2, #4
 800b93c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b93e:	2304      	movs	r3, #4
 800b940:	e014      	b.n	800b96c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b946:	f003 0301 	and.w	r3, r3, #1
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d004      	beq.n	800b958 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b954:	2301      	movs	r3, #1
 800b956:	e009      	b.n	800b96c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2240      	movs	r2, #64	; 0x40
 800b968:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b96a:	2300      	movs	r3, #0
  
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bc90      	pop	{r4, r7}
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	2000002c 	.word	0x2000002c
 800b97c:	10624dd3 	.word	0x10624dd3

0800b980 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b984:	4904      	ldr	r1, [pc, #16]	; (800b998 <MX_FATFS_Init+0x18>)
 800b986:	4805      	ldr	r0, [pc, #20]	; (800b99c <MX_FATFS_Init+0x1c>)
 800b988:	f000 fa96 	bl	800beb8 <FATFS_LinkDriver>
 800b98c:	4603      	mov	r3, r0
 800b98e:	461a      	mov	r2, r3
 800b990:	4b03      	ldr	r3, [pc, #12]	; (800b9a0 <MX_FATFS_Init+0x20>)
 800b992:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b994:	bf00      	nop
 800b996:	bd80      	pop	{r7, pc}
 800b998:	2000bcf4 	.word	0x2000bcf4
 800b99c:	08028ea8 	.word	0x08028ea8
 800b9a0:	2000bcf0 	.word	0x2000bcf0

0800b9a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b9ae:	f000 f87b 	bl	800baa8 <BSP_SD_IsDetected>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d001      	beq.n	800b9bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e012      	b.n	800b9e2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b9bc:	480b      	ldr	r0, [pc, #44]	; (800b9ec <BSP_SD_Init+0x48>)
 800b9be:	f7fc f9d1 	bl	8007d64 <HAL_SD_Init>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b9c6:	79fb      	ldrb	r3, [r7, #7]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d109      	bne.n	800b9e0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b9cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b9d0:	4806      	ldr	r0, [pc, #24]	; (800b9ec <BSP_SD_Init+0x48>)
 800b9d2:	f7fc fe13 	bl	80085fc <HAL_SD_ConfigWideBusOperation>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b9e0:	79fb      	ldrb	r3, [r7, #7]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	2000b888 	.word	0x2000b888

0800b9f0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	68f9      	ldr	r1, [r7, #12]
 800ba06:	4806      	ldr	r0, [pc, #24]	; (800ba20 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ba08:	f7fc fa44 	bl	8007e94 <HAL_SD_ReadBlocks_DMA>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	2000b888 	.word	0x2000b888

0800ba24 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	68f9      	ldr	r1, [r7, #12]
 800ba3a:	4806      	ldr	r0, [pc, #24]	; (800ba54 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ba3c:	f7fc fb16 	bl	800806c <HAL_SD_WriteBlocks_DMA>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	2000b888 	.word	0x2000b888

0800ba58 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ba5c:	4805      	ldr	r0, [pc, #20]	; (800ba74 <BSP_SD_GetCardState+0x1c>)
 800ba5e:	f7fc fe49 	bl	80086f4 <HAL_SD_GetCardState>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b04      	cmp	r3, #4
 800ba66:	bf14      	ite	ne
 800ba68:	2301      	movne	r3, #1
 800ba6a:	2300      	moveq	r3, #0
 800ba6c:	b2db      	uxtb	r3, r3
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	2000b888 	.word	0x2000b888

0800ba78 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	4803      	ldr	r0, [pc, #12]	; (800ba90 <BSP_SD_GetCardInfo+0x18>)
 800ba84:	f7fc fd8e 	bl	80085a4 <HAL_SD_GetCardInfo>
}
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	2000b888 	.word	0x2000b888

0800ba94 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ba9c:	f000 f9b2 	bl	800be04 <BSP_SD_ReadCpltCallback>
}
 800baa0:	bf00      	nop
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800baae:	2301      	movs	r3, #1
 800bab0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bab2:	f000 f80b 	bl	800bacc <BSP_PlatformIsDetected>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d101      	bne.n	800bac0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800babc:	2300      	movs	r3, #0
 800babe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bac0:	79fb      	ldrb	r3, [r7, #7]
 800bac2:	b2db      	uxtb	r3, r3
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bad2:	2301      	movs	r3, #1
 800bad4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bad6:	2110      	movs	r1, #16
 800bad8:	4806      	ldr	r0, [pc, #24]	; (800baf4 <BSP_PlatformIsDetected+0x28>)
 800bada:	f7f8 ff73 	bl	80049c4 <HAL_GPIO_ReadPin>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800bae4:	2300      	movs	r3, #0
 800bae6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bae8:	79fb      	ldrb	r3, [r7, #7]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	40020c00 	.word	0x40020c00

0800baf8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800bb00:	f000 fa26 	bl	800bf50 <osKernelSysTick>
 800bb04:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800bb06:	e006      	b.n	800bb16 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb08:	f7ff ffa6 	bl	800ba58 <BSP_SD_GetCardState>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d101      	bne.n	800bb16 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	e009      	b.n	800bb2a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800bb16:	f000 fa1b 	bl	800bf50 <osKernelSysTick>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d8f0      	bhi.n	800bb08 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bb26:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bb3e:	4b0b      	ldr	r3, [pc, #44]	; (800bb6c <SD_CheckStatus+0x38>)
 800bb40:	2201      	movs	r2, #1
 800bb42:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb44:	f7ff ff88 	bl	800ba58 <BSP_SD_GetCardState>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d107      	bne.n	800bb5e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bb4e:	4b07      	ldr	r3, [pc, #28]	; (800bb6c <SD_CheckStatus+0x38>)
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	f023 0301 	bic.w	r3, r3, #1
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	4b04      	ldr	r3, [pc, #16]	; (800bb6c <SD_CheckStatus+0x38>)
 800bb5c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bb5e:	4b03      	ldr	r3, [pc, #12]	; (800bb6c <SD_CheckStatus+0x38>)
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	b2db      	uxtb	r3, r3
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	20000035 	.word	0x20000035

0800bb70 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bb70:	b590      	push	{r4, r7, lr}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bb7a:	4b20      	ldr	r3, [pc, #128]	; (800bbfc <SD_initialize+0x8c>)
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800bb80:	f000 f9da 	bl	800bf38 <osKernelRunning>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d030      	beq.n	800bbec <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800bb8a:	f7ff ff0b 	bl	800b9a4 <BSP_SD_Init>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d107      	bne.n	800bba4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7ff ffcc 	bl	800bb34 <SD_CheckStatus>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	461a      	mov	r2, r3
 800bba0:	4b16      	ldr	r3, [pc, #88]	; (800bbfc <SD_initialize+0x8c>)
 800bba2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800bba4:	4b15      	ldr	r3, [pc, #84]	; (800bbfc <SD_initialize+0x8c>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d01e      	beq.n	800bbec <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800bbae:	4b14      	ldr	r3, [pc, #80]	; (800bc00 <SD_initialize+0x90>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10e      	bne.n	800bbd4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800bbb6:	4b13      	ldr	r3, [pc, #76]	; (800bc04 <SD_initialize+0x94>)
 800bbb8:	f107 0408 	add.w	r4, r7, #8
 800bbbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bbbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800bbc2:	f107 0308 	add.w	r3, r7, #8
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f000 faf5 	bl	800c1b8 <osMessageCreate>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	4b0b      	ldr	r3, [pc, #44]	; (800bc00 <SD_initialize+0x90>)
 800bbd2:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800bbd4:	4b0a      	ldr	r3, [pc, #40]	; (800bc00 <SD_initialize+0x90>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d107      	bne.n	800bbec <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800bbdc:	4b07      	ldr	r3, [pc, #28]	; (800bbfc <SD_initialize+0x8c>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	f043 0301 	orr.w	r3, r3, #1
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	4b04      	ldr	r3, [pc, #16]	; (800bbfc <SD_initialize+0x8c>)
 800bbea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bbec:	4b03      	ldr	r3, [pc, #12]	; (800bbfc <SD_initialize+0x8c>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	b2db      	uxtb	r3, r3
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	371c      	adds	r7, #28
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd90      	pop	{r4, r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20000035 	.word	0x20000035
 800bc00:	20000394 	.word	0x20000394
 800bc04:	080285f8 	.word	0x080285f8

0800bc08 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bc12:	79fb      	ldrb	r3, [r7, #7]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7ff ff8d 	bl	800bb34 <SD_CheckStatus>
 800bc1a:	4603      	mov	r3, r0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08a      	sub	sp, #40	; 0x28
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60b9      	str	r1, [r7, #8]
 800bc2c:	607a      	str	r2, [r7, #4]
 800bc2e:	603b      	str	r3, [r7, #0]
 800bc30:	4603      	mov	r3, r0
 800bc32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bc3a:	f247 5030 	movw	r0, #30000	; 0x7530
 800bc3e:	f7ff ff5b 	bl	800baf8 <SD_CheckStatusWithTimeout>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	da02      	bge.n	800bc4e <SD_read+0x2a>
  {
    return res;
 800bc48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc4c:	e032      	b.n	800bcb4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	6879      	ldr	r1, [r7, #4]
 800bc52:	68b8      	ldr	r0, [r7, #8]
 800bc54:	f7ff fecc 	bl	800b9f0 <BSP_SD_ReadBlocks_DMA>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800bc5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d124      	bne.n	800bcb0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bc66:	4b15      	ldr	r3, [pc, #84]	; (800bcbc <SD_read+0x98>)
 800bc68:	6819      	ldr	r1, [r3, #0]
 800bc6a:	f107 0314 	add.w	r3, r7, #20
 800bc6e:	f247 5230 	movw	r2, #30000	; 0x7530
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 fb0a 	bl	800c28c <osMessageGet>

    if (event.status == osEventMessage)
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	2b10      	cmp	r3, #16
 800bc7c:	d118      	bne.n	800bcb0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d115      	bne.n	800bcb0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800bc84:	f000 f964 	bl	800bf50 <osKernelSysTick>
 800bc88:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bc8a:	e008      	b.n	800bc9e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc8c:	f7ff fee4 	bl	800ba58 <BSP_SD_GetCardState>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d103      	bne.n	800bc9e <SD_read+0x7a>
              {
                res = RES_OK;
 800bc96:	2300      	movs	r3, #0
 800bc98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bc9c:	e008      	b.n	800bcb0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bc9e:	f000 f957 	bl	800bf50 <osKernelSysTick>
 800bca2:	4602      	mov	r2, r0
 800bca4:	6a3b      	ldr	r3, [r7, #32]
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	f247 522f 	movw	r2, #29999	; 0x752f
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d9ed      	bls.n	800bc8c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bcb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3728      	adds	r7, #40	; 0x28
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	20000394 	.word	0x20000394

0800bcc0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b08a      	sub	sp, #40	; 0x28
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60b9      	str	r1, [r7, #8]
 800bcc8:	607a      	str	r2, [r7, #4]
 800bcca:	603b      	str	r3, [r7, #0]
 800bccc:	4603      	mov	r3, r0
 800bcce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bcd6:	f247 5030 	movw	r0, #30000	; 0x7530
 800bcda:	f7ff ff0d 	bl	800baf8 <SD_CheckStatusWithTimeout>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	da02      	bge.n	800bcea <SD_write+0x2a>
  {
    return res;
 800bce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bce8:	e02e      	b.n	800bd48 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bcea:	683a      	ldr	r2, [r7, #0]
 800bcec:	6879      	ldr	r1, [r7, #4]
 800bcee:	68b8      	ldr	r0, [r7, #8]
 800bcf0:	f7ff fe98 	bl	800ba24 <BSP_SD_WriteBlocks_DMA>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d124      	bne.n	800bd44 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bcfa:	4b15      	ldr	r3, [pc, #84]	; (800bd50 <SD_write+0x90>)
 800bcfc:	6819      	ldr	r1, [r3, #0]
 800bcfe:	f107 0314 	add.w	r3, r7, #20
 800bd02:	f247 5230 	movw	r2, #30000	; 0x7530
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 fac0 	bl	800c28c <osMessageGet>

    if (event.status == osEventMessage)
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	2b10      	cmp	r3, #16
 800bd10:	d118      	bne.n	800bd44 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d115      	bne.n	800bd44 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800bd18:	f000 f91a 	bl	800bf50 <osKernelSysTick>
 800bd1c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bd1e:	e008      	b.n	800bd32 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bd20:	f7ff fe9a 	bl	800ba58 <BSP_SD_GetCardState>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d103      	bne.n	800bd32 <SD_write+0x72>
          {
            res = RES_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800bd30:	e008      	b.n	800bd44 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bd32:	f000 f90d 	bl	800bf50 <osKernelSysTick>
 800bd36:	4602      	mov	r2, r0
 800bd38:	6a3b      	ldr	r3, [r7, #32]
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d9ed      	bls.n	800bd20 <SD_write+0x60>
    }

  }
#endif

  return res;
 800bd44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3728      	adds	r7, #40	; 0x28
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	20000394 	.word	0x20000394

0800bd54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b08c      	sub	sp, #48	; 0x30
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	603a      	str	r2, [r7, #0]
 800bd5e:	71fb      	strb	r3, [r7, #7]
 800bd60:	460b      	mov	r3, r1
 800bd62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bd6a:	4b25      	ldr	r3, [pc, #148]	; (800be00 <SD_ioctl+0xac>)
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d001      	beq.n	800bd7c <SD_ioctl+0x28>
 800bd78:	2303      	movs	r3, #3
 800bd7a:	e03c      	b.n	800bdf6 <SD_ioctl+0xa2>

  switch (cmd)
 800bd7c:	79bb      	ldrb	r3, [r7, #6]
 800bd7e:	2b03      	cmp	r3, #3
 800bd80:	d834      	bhi.n	800bdec <SD_ioctl+0x98>
 800bd82:	a201      	add	r2, pc, #4	; (adr r2, 800bd88 <SD_ioctl+0x34>)
 800bd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd88:	0800bd99 	.word	0x0800bd99
 800bd8c:	0800bda1 	.word	0x0800bda1
 800bd90:	0800bdb9 	.word	0x0800bdb9
 800bd94:	0800bdd3 	.word	0x0800bdd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd9e:	e028      	b.n	800bdf2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bda0:	f107 030c 	add.w	r3, r7, #12
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7ff fe67 	bl	800ba78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bdaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdb6:	e01c      	b.n	800bdf2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bdb8:	f107 030c 	add.w	r3, r7, #12
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7ff fe5b 	bl	800ba78 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdd0:	e00f      	b.n	800bdf2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bdd2:	f107 030c 	add.w	r3, r7, #12
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff fe4e 	bl	800ba78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	0a5a      	lsrs	r2, r3, #9
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdea:	e002      	b.n	800bdf2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bdec:	2304      	movs	r3, #4
 800bdee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bdf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3730      	adds	r7, #48	; 0x30
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	20000035 	.word	0x20000035

0800be04 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800be08:	4b04      	ldr	r3, [pc, #16]	; (800be1c <BSP_SD_ReadCpltCallback+0x18>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2200      	movs	r2, #0
 800be0e:	2101      	movs	r1, #1
 800be10:	4618      	mov	r0, r3
 800be12:	f000 f9fb 	bl	800c20c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800be16:	bf00      	nop
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20000394 	.word	0x20000394

0800be20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800be20:	b480      	push	{r7}
 800be22:	b087      	sub	sp, #28
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	4613      	mov	r3, r2
 800be2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800be2e:	2301      	movs	r3, #1
 800be30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800be36:	4b1f      	ldr	r3, [pc, #124]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be38:	7a5b      	ldrb	r3, [r3, #9]
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d131      	bne.n	800bea4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800be40:	4b1c      	ldr	r3, [pc, #112]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be42:	7a5b      	ldrb	r3, [r3, #9]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	461a      	mov	r2, r3
 800be48:	4b1a      	ldr	r3, [pc, #104]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be4a:	2100      	movs	r1, #0
 800be4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800be4e:	4b19      	ldr	r3, [pc, #100]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be50:	7a5b      	ldrb	r3, [r3, #9]
 800be52:	b2db      	uxtb	r3, r3
 800be54:	4a17      	ldr	r2, [pc, #92]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800be5e:	4b15      	ldr	r3, [pc, #84]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be60:	7a5b      	ldrb	r3, [r3, #9]
 800be62:	b2db      	uxtb	r3, r3
 800be64:	461a      	mov	r2, r3
 800be66:	4b13      	ldr	r3, [pc, #76]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be68:	4413      	add	r3, r2
 800be6a:	79fa      	ldrb	r2, [r7, #7]
 800be6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800be6e:	4b11      	ldr	r3, [pc, #68]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be70:	7a5b      	ldrb	r3, [r3, #9]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	1c5a      	adds	r2, r3, #1
 800be76:	b2d1      	uxtb	r1, r2
 800be78:	4a0e      	ldr	r2, [pc, #56]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be7a:	7251      	strb	r1, [r2, #9]
 800be7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800be7e:	7dbb      	ldrb	r3, [r7, #22]
 800be80:	3330      	adds	r3, #48	; 0x30
 800be82:	b2da      	uxtb	r2, r3
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	3301      	adds	r3, #1
 800be8c:	223a      	movs	r2, #58	; 0x3a
 800be8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	3302      	adds	r3, #2
 800be94:	222f      	movs	r2, #47	; 0x2f
 800be96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	3303      	adds	r3, #3
 800be9c:	2200      	movs	r2, #0
 800be9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	371c      	adds	r7, #28
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	20000398 	.word	0x20000398

0800beb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bec2:	2200      	movs	r2, #0
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff ffaa 	bl	800be20 <FATFS_LinkDriverEx>
 800becc:	4603      	mov	r3, r0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3708      	adds	r7, #8
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bed6:	b480      	push	{r7}
 800bed8:	b085      	sub	sp, #20
 800beda:	af00      	add	r7, sp, #0
 800bedc:	4603      	mov	r3, r0
 800bede:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bee0:	2300      	movs	r3, #0
 800bee2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bee8:	2b84      	cmp	r3, #132	; 0x84
 800beea:	d005      	beq.n	800bef8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800beec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4413      	add	r3, r2
 800bef4:	3303      	adds	r3, #3
 800bef6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bef8:	68fb      	ldr	r3, [r7, #12]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b083      	sub	sp, #12
 800bf0a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf0c:	f3ef 8305 	mrs	r3, IPSR
 800bf10:	607b      	str	r3, [r7, #4]
  return(result);
 800bf12:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	bf14      	ite	ne
 800bf18:	2301      	movne	r3, #1
 800bf1a:	2300      	moveq	r3, #0
 800bf1c:	b2db      	uxtb	r3, r3
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr

0800bf2a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bf2e:	f001 fc31 	bl	800d794 <vTaskStartScheduler>
  
  return osOK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800bf3c:	f002 f87c 	bl	800e038 <xTaskGetSchedulerState>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d101      	bne.n	800bf4a <osKernelRunning+0x12>
    return 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	e000      	b.n	800bf4c <osKernelRunning+0x14>
  else
    return 1;
 800bf4a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bf54:	f7ff ffd7 	bl	800bf06 <inHandlerMode>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bf5e:	f001 fd37 	bl	800d9d0 <xTaskGetTickCountFromISR>
 800bf62:	4603      	mov	r3, r0
 800bf64:	e002      	b.n	800bf6c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bf66:	f001 fd23 	bl	800d9b0 <xTaskGetTickCount>
 800bf6a:	4603      	mov	r3, r0
  }
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bf70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf72:	b089      	sub	sp, #36	; 0x24
 800bf74:	af04      	add	r7, sp, #16
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d020      	beq.n	800bfc4 <osThreadCreate+0x54>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d01c      	beq.n	800bfc4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685c      	ldr	r4, [r3, #4]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681d      	ldr	r5, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	691e      	ldr	r6, [r3, #16]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7ff ff9a 	bl	800bed6 <makeFreeRtosPriority>
 800bfa2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	695b      	ldr	r3, [r3, #20]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bfac:	9202      	str	r2, [sp, #8]
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	9100      	str	r1, [sp, #0]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f001 fa12 	bl	800d3e2 <xTaskCreateStatic>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	60fb      	str	r3, [r7, #12]
 800bfc2:	e01c      	b.n	800bffe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	685c      	ldr	r4, [r3, #4]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bfd0:	b29e      	uxth	r6, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7ff ff7c 	bl	800bed6 <makeFreeRtosPriority>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	f107 030c 	add.w	r3, r7, #12
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	9200      	str	r2, [sp, #0]
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	4632      	mov	r2, r6
 800bfec:	4629      	mov	r1, r5
 800bfee:	4620      	mov	r0, r4
 800bff0:	f001 fa57 	bl	800d4a2 <xTaskCreate>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d001      	beq.n	800bffe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	e000      	b.n	800c000 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bffe:	68fb      	ldr	r3, [r7, #12]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3714      	adds	r7, #20
 800c004:	46bd      	mov	sp, r7
 800c006:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c008 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d001      	beq.n	800c01e <osDelay+0x16>
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	e000      	b.n	800c020 <osDelay+0x18>
 800c01e:	2301      	movs	r3, #1
 800c020:	4618      	mov	r0, r3
 800c022:	f001 fb81 	bl	800d728 <vTaskDelay>
  
  return osOK;
 800c026:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c030:	b580      	push	{r7, lr}
 800c032:	b086      	sub	sp, #24
 800c034:	af02      	add	r7, sp, #8
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d017      	beq.n	800c072 <osSemaphoreCreate+0x42>
    if (count == 1) {
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d10b      	bne.n	800c060 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	2303      	movs	r3, #3
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	4613      	mov	r3, r2
 800c052:	2200      	movs	r2, #0
 800c054:	2100      	movs	r1, #0
 800c056:	2001      	movs	r0, #1
 800c058:	f000 faaa 	bl	800c5b0 <xQueueGenericCreateStatic>
 800c05c:	4603      	mov	r3, r0
 800c05e:	e023      	b.n	800c0a8 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800c060:	6838      	ldr	r0, [r7, #0]
 800c062:	6839      	ldr	r1, [r7, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	461a      	mov	r2, r3
 800c06a:	f000 fb7e 	bl	800c76a <xQueueCreateCountingSemaphoreStatic>
 800c06e:	4603      	mov	r3, r0
 800c070:	e01a      	b.n	800c0a8 <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d110      	bne.n	800c09a <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 800c078:	2203      	movs	r2, #3
 800c07a:	2100      	movs	r1, #0
 800c07c:	2001      	movs	r0, #1
 800c07e:	f000 fb14 	bl	800c6aa <xQueueGenericCreate>
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d005      	beq.n	800c096 <osSemaphoreCreate+0x66>
 800c08a:	2300      	movs	r3, #0
 800c08c:	2200      	movs	r2, #0
 800c08e:	2100      	movs	r1, #0
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f000 fbd9 	bl	800c848 <xQueueGenericSend>
      return sema;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	e006      	b.n	800c0a8 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	4611      	mov	r1, r2
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f000 fb9b 	bl	800c7dc <xQueueCreateCountingSemaphore>
 800c0a6:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d101      	bne.n	800c0c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c0c4:	2380      	movs	r3, #128	; 0x80
 800c0c6:	e03a      	b.n	800c13e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d2:	d103      	bne.n	800c0dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d8:	60fb      	str	r3, [r7, #12]
 800c0da:	e009      	b.n	800c0f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d006      	beq.n	800c0f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d101      	bne.n	800c0f0 <osSemaphoreWait+0x40>
      ticks = 1;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c0f0:	f7ff ff09 	bl	800bf06 <inHandlerMode>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d017      	beq.n	800c12a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c0fa:	f107 0308 	add.w	r3, r7, #8
 800c0fe:	461a      	mov	r2, r3
 800c100:	2100      	movs	r1, #0
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 ffc2 	bl	800d08c <xQueueReceiveFromISR>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d001      	beq.n	800c112 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c10e:	23ff      	movs	r3, #255	; 0xff
 800c110:	e015      	b.n	800c13e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d011      	beq.n	800c13c <osSemaphoreWait+0x8c>
 800c118:	4b0b      	ldr	r3, [pc, #44]	; (800c148 <osSemaphoreWait+0x98>)
 800c11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	e008      	b.n	800c13c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c12a:	68f9      	ldr	r1, [r7, #12]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fe9d 	bl	800ce6c <xQueueSemaphoreTake>
 800c132:	4603      	mov	r3, r0
 800c134:	2b01      	cmp	r3, #1
 800c136:	d001      	beq.n	800c13c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c138:	23ff      	movs	r3, #255	; 0xff
 800c13a:	e000      	b.n	800c13e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	e000ed04 	.word	0xe000ed04

0800c14c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c154:	2300      	movs	r3, #0
 800c156:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c158:	2300      	movs	r3, #0
 800c15a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c15c:	f7ff fed3 	bl	800bf06 <inHandlerMode>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d016      	beq.n	800c194 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c166:	f107 0308 	add.w	r3, r7, #8
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fd09 	bl	800cb84 <xQueueGiveFromISR>
 800c172:	4603      	mov	r3, r0
 800c174:	2b01      	cmp	r3, #1
 800c176:	d001      	beq.n	800c17c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c178:	23ff      	movs	r3, #255	; 0xff
 800c17a:	e017      	b.n	800c1ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d013      	beq.n	800c1aa <osSemaphoreRelease+0x5e>
 800c182:	4b0c      	ldr	r3, [pc, #48]	; (800c1b4 <osSemaphoreRelease+0x68>)
 800c184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	e00a      	b.n	800c1aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c194:	2300      	movs	r3, #0
 800c196:	2200      	movs	r2, #0
 800c198:	2100      	movs	r1, #0
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fb54 	bl	800c848 <xQueueGenericSend>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d001      	beq.n	800c1aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c1a6:	23ff      	movs	r3, #255	; 0xff
 800c1a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	e000ed04 	.word	0xe000ed04

0800c1b8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c1b8:	b590      	push	{r4, r7, lr}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af02      	add	r7, sp, #8
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d012      	beq.n	800c1f0 <osMessageCreate+0x38>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00e      	beq.n	800c1f0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6818      	ldr	r0, [r3, #0]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6859      	ldr	r1, [r3, #4]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	689a      	ldr	r2, [r3, #8]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	68dc      	ldr	r4, [r3, #12]
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	4623      	mov	r3, r4
 800c1e8:	f000 f9e2 	bl	800c5b0 <xQueueGenericCreateStatic>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	e008      	b.n	800c202 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	f000 fa55 	bl	800c6aa <xQueueGenericCreate>
 800c200:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c202:	4618      	mov	r0, r3
 800c204:	370c      	adds	r7, #12
 800c206:	46bd      	mov	sp, r7
 800c208:	bd90      	pop	{r4, r7, pc}
	...

0800c20c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b086      	sub	sp, #24
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c218:	2300      	movs	r3, #0
 800c21a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d101      	bne.n	800c22a <osMessagePut+0x1e>
    ticks = 1;
 800c226:	2301      	movs	r3, #1
 800c228:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c22a:	f7ff fe6c 	bl	800bf06 <inHandlerMode>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d018      	beq.n	800c266 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c234:	f107 0210 	add.w	r2, r7, #16
 800c238:	f107 0108 	add.w	r1, r7, #8
 800c23c:	2300      	movs	r3, #0
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f000 fc04 	bl	800ca4c <xQueueGenericSendFromISR>
 800c244:	4603      	mov	r3, r0
 800c246:	2b01      	cmp	r3, #1
 800c248:	d001      	beq.n	800c24e <osMessagePut+0x42>
      return osErrorOS;
 800c24a:	23ff      	movs	r3, #255	; 0xff
 800c24c:	e018      	b.n	800c280 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d014      	beq.n	800c27e <osMessagePut+0x72>
 800c254:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <osMessagePut+0x7c>)
 800c256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c25a:	601a      	str	r2, [r3, #0]
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	e00b      	b.n	800c27e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c266:	f107 0108 	add.w	r1, r7, #8
 800c26a:	2300      	movs	r3, #0
 800c26c:	697a      	ldr	r2, [r7, #20]
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f000 faea 	bl	800c848 <xQueueGenericSend>
 800c274:	4603      	mov	r3, r0
 800c276:	2b01      	cmp	r3, #1
 800c278:	d001      	beq.n	800c27e <osMessagePut+0x72>
      return osErrorOS;
 800c27a:	23ff      	movs	r3, #255	; 0xff
 800c27c:	e000      	b.n	800c280 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3718      	adds	r7, #24
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	e000ed04 	.word	0xe000ed04

0800c28c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c28c:	b590      	push	{r4, r7, lr}
 800c28e:	b08b      	sub	sp, #44	; 0x2c
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10a      	bne.n	800c2bc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c2a6:	2380      	movs	r3, #128	; 0x80
 800c2a8:	617b      	str	r3, [r7, #20]
    return event;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	461c      	mov	r4, r3
 800c2ae:	f107 0314 	add.w	r3, r7, #20
 800c2b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c2b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c2ba:	e054      	b.n	800c366 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ca:	d103      	bne.n	800c2d4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c2d2:	e009      	b.n	800c2e8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d006      	beq.n	800c2e8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d101      	bne.n	800c2e8 <osMessageGet+0x5c>
      ticks = 1;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c2e8:	f7ff fe0d 	bl	800bf06 <inHandlerMode>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d01c      	beq.n	800c32c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c2f2:	f107 0220 	add.w	r2, r7, #32
 800c2f6:	f107 0314 	add.w	r3, r7, #20
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	68b8      	ldr	r0, [r7, #8]
 800c300:	f000 fec4 	bl	800d08c <xQueueReceiveFromISR>
 800c304:	4603      	mov	r3, r0
 800c306:	2b01      	cmp	r3, #1
 800c308:	d102      	bne.n	800c310 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c30a:	2310      	movs	r3, #16
 800c30c:	617b      	str	r3, [r7, #20]
 800c30e:	e001      	b.n	800c314 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c310:	2300      	movs	r3, #0
 800c312:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c314:	6a3b      	ldr	r3, [r7, #32]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d01d      	beq.n	800c356 <osMessageGet+0xca>
 800c31a:	4b15      	ldr	r3, [pc, #84]	; (800c370 <osMessageGet+0xe4>)
 800c31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c320:	601a      	str	r2, [r3, #0]
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	e014      	b.n	800c356 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c32c:	f107 0314 	add.w	r3, r7, #20
 800c330:	3304      	adds	r3, #4
 800c332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c334:	4619      	mov	r1, r3
 800c336:	68b8      	ldr	r0, [r7, #8]
 800c338:	f000 fcb6 	bl	800cca8 <xQueueReceive>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d102      	bne.n	800c348 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c342:	2310      	movs	r3, #16
 800c344:	617b      	str	r3, [r7, #20]
 800c346:	e006      	b.n	800c356 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d101      	bne.n	800c352 <osMessageGet+0xc6>
 800c34e:	2300      	movs	r3, #0
 800c350:	e000      	b.n	800c354 <osMessageGet+0xc8>
 800c352:	2340      	movs	r3, #64	; 0x40
 800c354:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	461c      	mov	r4, r3
 800c35a:	f107 0314 	add.w	r3, r7, #20
 800c35e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	372c      	adds	r7, #44	; 0x2c
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd90      	pop	{r4, r7, pc}
 800c36e:	bf00      	nop
 800c370:	e000ed04 	.word	0xe000ed04

0800c374 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f103 0208 	add.w	r2, r3, #8
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f04f 32ff 	mov.w	r2, #4294967295
 800c38c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f103 0208 	add.w	r2, r3, #8
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f103 0208 	add.w	r2, r3, #8
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c3c2:	bf00      	nop
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	689a      	ldr	r2, [r3, #8]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	683a      	ldr	r2, [r7, #0]
 800c3f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
}
 800c40a:	bf00      	nop
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c416:	b480      	push	{r7}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
 800c41e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42c:	d103      	bne.n	800c436 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	e00c      	b.n	800c450 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	3308      	adds	r3, #8
 800c43a:	60fb      	str	r3, [r7, #12]
 800c43c:	e002      	b.n	800c444 <vListInsert+0x2e>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d2f6      	bcs.n	800c43e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	601a      	str	r2, [r3, #0]
}
 800c47c:	bf00      	nop
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	6892      	ldr	r2, [r2, #8]
 800c49e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	6852      	ldr	r2, [r2, #4]
 800c4a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d103      	bne.n	800c4bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	689a      	ldr	r2, [r3, #8]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	1e5a      	subs	r2, r3, #1
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10b      	bne.n	800c508 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	b672      	cpsid	i
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	b662      	cpsie	i
 800c504:	60bb      	str	r3, [r7, #8]
 800c506:	e7fe      	b.n	800c506 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c508:	f002 f8de 	bl	800e6c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c514:	68f9      	ldr	r1, [r7, #12]
 800c516:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c518:	fb01 f303 	mul.w	r3, r1, r3
 800c51c:	441a      	add	r2, r3
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2200      	movs	r2, #0
 800c526:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c538:	3b01      	subs	r3, #1
 800c53a:	68f9      	ldr	r1, [r7, #12]
 800c53c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c53e:	fb01 f303 	mul.w	r3, r1, r3
 800c542:	441a      	add	r2, r3
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	22ff      	movs	r2, #255	; 0xff
 800c54c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	22ff      	movs	r2, #255	; 0xff
 800c554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d114      	bne.n	800c588 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d01a      	beq.n	800c59c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3310      	adds	r3, #16
 800c56a:	4618      	mov	r0, r3
 800c56c:	f001 fba4 	bl	800dcb8 <xTaskRemoveFromEventList>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d012      	beq.n	800c59c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c576:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <xQueueGenericReset+0xd0>)
 800c578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c57c:	601a      	str	r2, [r3, #0]
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	f3bf 8f6f 	isb	sy
 800c586:	e009      	b.n	800c59c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	3310      	adds	r3, #16
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff fef1 	bl	800c374 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	3324      	adds	r3, #36	; 0x24
 800c596:	4618      	mov	r0, r3
 800c598:	f7ff feec 	bl	800c374 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c59c:	f002 f8c6 	bl	800e72c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c5a0:	2301      	movs	r3, #1
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	e000ed04 	.word	0xe000ed04

0800c5b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08e      	sub	sp, #56	; 0x38
 800c5b4:	af02      	add	r7, sp, #8
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10b      	bne.n	800c5dc <xQueueGenericCreateStatic+0x2c>
 800c5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c8:	b672      	cpsid	i
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	b662      	cpsie	i
 800c5d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5da:	e7fe      	b.n	800c5da <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d10b      	bne.n	800c5fa <xQueueGenericCreateStatic+0x4a>
 800c5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e6:	b672      	cpsid	i
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	b662      	cpsie	i
 800c5f6:	627b      	str	r3, [r7, #36]	; 0x24
 800c5f8:	e7fe      	b.n	800c5f8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d002      	beq.n	800c606 <xQueueGenericCreateStatic+0x56>
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <xQueueGenericCreateStatic+0x5a>
 800c606:	2301      	movs	r3, #1
 800c608:	e000      	b.n	800c60c <xQueueGenericCreateStatic+0x5c>
 800c60a:	2300      	movs	r3, #0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10b      	bne.n	800c628 <xQueueGenericCreateStatic+0x78>
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	b672      	cpsid	i
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	b662      	cpsie	i
 800c624:	623b      	str	r3, [r7, #32]
 800c626:	e7fe      	b.n	800c626 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d102      	bne.n	800c634 <xQueueGenericCreateStatic+0x84>
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <xQueueGenericCreateStatic+0x88>
 800c634:	2301      	movs	r3, #1
 800c636:	e000      	b.n	800c63a <xQueueGenericCreateStatic+0x8a>
 800c638:	2300      	movs	r3, #0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10b      	bne.n	800c656 <xQueueGenericCreateStatic+0xa6>
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	b672      	cpsid	i
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	b662      	cpsie	i
 800c652:	61fb      	str	r3, [r7, #28]
 800c654:	e7fe      	b.n	800c654 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c656:	2348      	movs	r3, #72	; 0x48
 800c658:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	2b48      	cmp	r3, #72	; 0x48
 800c65e:	d00b      	beq.n	800c678 <xQueueGenericCreateStatic+0xc8>
 800c660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c664:	b672      	cpsid	i
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	b662      	cpsie	i
 800c674:	61bb      	str	r3, [r7, #24]
 800c676:	e7fe      	b.n	800c676 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c678:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00d      	beq.n	800c6a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c686:	2201      	movs	r2, #1
 800c688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c68c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c692:	9300      	str	r3, [sp, #0]
 800c694:	4613      	mov	r3, r2
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	68b9      	ldr	r1, [r7, #8]
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f000 f846 	bl	800c72c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3730      	adds	r7, #48	; 0x30
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b08a      	sub	sp, #40	; 0x28
 800c6ae:	af02      	add	r7, sp, #8
 800c6b0:	60f8      	str	r0, [r7, #12]
 800c6b2:	60b9      	str	r1, [r7, #8]
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10b      	bne.n	800c6d6 <xQueueGenericCreate+0x2c>
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	b672      	cpsid	i
 800c6c4:	f383 8811 	msr	BASEPRI, r3
 800c6c8:	f3bf 8f6f 	isb	sy
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	b662      	cpsie	i
 800c6d2:	613b      	str	r3, [r7, #16]
 800c6d4:	e7fe      	b.n	800c6d4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d102      	bne.n	800c6e2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	61fb      	str	r3, [r7, #28]
 800c6e0:	e004      	b.n	800c6ec <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	3348      	adds	r3, #72	; 0x48
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f002 f90b 	bl	800e90c <pvPortMalloc>
 800c6f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d011      	beq.n	800c722 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	3348      	adds	r3, #72	; 0x48
 800c706:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c710:	79fa      	ldrb	r2, [r7, #7]
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	4613      	mov	r3, r2
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	68b9      	ldr	r1, [r7, #8]
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f000 f805 	bl	800c72c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c722:	69bb      	ldr	r3, [r7, #24]
	}
 800c724:	4618      	mov	r0, r3
 800c726:	3720      	adds	r7, #32
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
 800c738:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d103      	bne.n	800c748 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	69ba      	ldr	r2, [r7, #24]
 800c744:	601a      	str	r2, [r3, #0]
 800c746:	e002      	b.n	800c74e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c75a:	2101      	movs	r1, #1
 800c75c:	69b8      	ldr	r0, [r7, #24]
 800c75e:	f7ff febd 	bl	800c4dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c762:	bf00      	nop
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b08a      	sub	sp, #40	; 0x28
 800c76e:	af02      	add	r7, sp, #8
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	60b9      	str	r1, [r7, #8]
 800c774:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10b      	bne.n	800c794 <xQueueCreateCountingSemaphoreStatic+0x2a>
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	b672      	cpsid	i
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	b662      	cpsie	i
 800c790:	61bb      	str	r3, [r7, #24]
 800c792:	e7fe      	b.n	800c792 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c794:	68ba      	ldr	r2, [r7, #8]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d90b      	bls.n	800c7b4 <xQueueCreateCountingSemaphoreStatic+0x4a>
 800c79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a0:	b672      	cpsid	i
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	b662      	cpsie	i
 800c7b0:	617b      	str	r3, [r7, #20]
 800c7b2:	e7fe      	b.n	800c7b2 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	9300      	str	r3, [sp, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	2100      	movs	r1, #0
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f7ff fef6 	bl	800c5b0 <xQueueGenericCreateStatic>
 800c7c4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c7d2:	69fb      	ldr	r3, [r7, #28]
	}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3720      	adds	r7, #32
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10b      	bne.n	800c804 <xQueueCreateCountingSemaphore+0x28>
 800c7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f0:	b672      	cpsid	i
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	b662      	cpsie	i
 800c800:	613b      	str	r3, [r7, #16]
 800c802:	e7fe      	b.n	800c802 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c804:	683a      	ldr	r2, [r7, #0]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d90b      	bls.n	800c824 <xQueueCreateCountingSemaphore+0x48>
 800c80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c810:	b672      	cpsid	i
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	b662      	cpsie	i
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	e7fe      	b.n	800c822 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c824:	2202      	movs	r2, #2
 800c826:	2100      	movs	r1, #0
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff ff3e 	bl	800c6aa <xQueueGenericCreate>
 800c82e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d002      	beq.n	800c83c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	683a      	ldr	r2, [r7, #0]
 800c83a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c83c:	697b      	ldr	r3, [r7, #20]
	}
 800c83e:	4618      	mov	r0, r3
 800c840:	3718      	adds	r7, #24
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
	...

0800c848 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08e      	sub	sp, #56	; 0x38
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	607a      	str	r2, [r7, #4]
 800c854:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c856:	2300      	movs	r3, #0
 800c858:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10b      	bne.n	800c87c <xQueueGenericSend+0x34>
 800c864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c868:	b672      	cpsid	i
 800c86a:	f383 8811 	msr	BASEPRI, r3
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	f3bf 8f4f 	dsb	sy
 800c876:	b662      	cpsie	i
 800c878:	62bb      	str	r3, [r7, #40]	; 0x28
 800c87a:	e7fe      	b.n	800c87a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d103      	bne.n	800c88a <xQueueGenericSend+0x42>
 800c882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c886:	2b00      	cmp	r3, #0
 800c888:	d101      	bne.n	800c88e <xQueueGenericSend+0x46>
 800c88a:	2301      	movs	r3, #1
 800c88c:	e000      	b.n	800c890 <xQueueGenericSend+0x48>
 800c88e:	2300      	movs	r3, #0
 800c890:	2b00      	cmp	r3, #0
 800c892:	d10b      	bne.n	800c8ac <xQueueGenericSend+0x64>
 800c894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c898:	b672      	cpsid	i
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	b662      	cpsie	i
 800c8a8:	627b      	str	r3, [r7, #36]	; 0x24
 800c8aa:	e7fe      	b.n	800c8aa <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d103      	bne.n	800c8ba <xQueueGenericSend+0x72>
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d101      	bne.n	800c8be <xQueueGenericSend+0x76>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e000      	b.n	800c8c0 <xQueueGenericSend+0x78>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10b      	bne.n	800c8dc <xQueueGenericSend+0x94>
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	b672      	cpsid	i
 800c8ca:	f383 8811 	msr	BASEPRI, r3
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	b662      	cpsie	i
 800c8d8:	623b      	str	r3, [r7, #32]
 800c8da:	e7fe      	b.n	800c8da <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8dc:	f001 fbac 	bl	800e038 <xTaskGetSchedulerState>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d102      	bne.n	800c8ec <xQueueGenericSend+0xa4>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d101      	bne.n	800c8f0 <xQueueGenericSend+0xa8>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e000      	b.n	800c8f2 <xQueueGenericSend+0xaa>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10b      	bne.n	800c90e <xQueueGenericSend+0xc6>
 800c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fa:	b672      	cpsid	i
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	b662      	cpsie	i
 800c90a:	61fb      	str	r3, [r7, #28]
 800c90c:	e7fe      	b.n	800c90c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c90e:	f001 fedb 	bl	800e6c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d302      	bcc.n	800c924 <xQueueGenericSend+0xdc>
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	2b02      	cmp	r3, #2
 800c922:	d129      	bne.n	800c978 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c924:	683a      	ldr	r2, [r7, #0]
 800c926:	68b9      	ldr	r1, [r7, #8]
 800c928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c92a:	f000 fc4a 	bl	800d1c2 <prvCopyDataToQueue>
 800c92e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c934:	2b00      	cmp	r3, #0
 800c936:	d010      	beq.n	800c95a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93a:	3324      	adds	r3, #36	; 0x24
 800c93c:	4618      	mov	r0, r3
 800c93e:	f001 f9bb 	bl	800dcb8 <xTaskRemoveFromEventList>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d013      	beq.n	800c970 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c948:	4b3f      	ldr	r3, [pc, #252]	; (800ca48 <xQueueGenericSend+0x200>)
 800c94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c94e:	601a      	str	r2, [r3, #0]
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	e00a      	b.n	800c970 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d007      	beq.n	800c970 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c960:	4b39      	ldr	r3, [pc, #228]	; (800ca48 <xQueueGenericSend+0x200>)
 800c962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c966:	601a      	str	r2, [r3, #0]
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c970:	f001 fedc 	bl	800e72c <vPortExitCritical>
				return pdPASS;
 800c974:	2301      	movs	r3, #1
 800c976:	e063      	b.n	800ca40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d103      	bne.n	800c986 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c97e:	f001 fed5 	bl	800e72c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c982:	2300      	movs	r3, #0
 800c984:	e05c      	b.n	800ca40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d106      	bne.n	800c99a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c98c:	f107 0314 	add.w	r3, r7, #20
 800c990:	4618      	mov	r0, r3
 800c992:	f001 f9f5 	bl	800dd80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c996:	2301      	movs	r3, #1
 800c998:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c99a:	f001 fec7 	bl	800e72c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c99e:	f000 ff5b 	bl	800d858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9a2:	f001 fe91 	bl	800e6c8 <vPortEnterCritical>
 800c9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9ac:	b25b      	sxtb	r3, r3
 800c9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b2:	d103      	bne.n	800c9bc <xQueueGenericSend+0x174>
 800c9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9c2:	b25b      	sxtb	r3, r3
 800c9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c8:	d103      	bne.n	800c9d2 <xQueueGenericSend+0x18a>
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9d2:	f001 feab 	bl	800e72c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9d6:	1d3a      	adds	r2, r7, #4
 800c9d8:	f107 0314 	add.w	r3, r7, #20
 800c9dc:	4611      	mov	r1, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f001 f9e4 	bl	800ddac <xTaskCheckForTimeOut>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d124      	bne.n	800ca34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c9ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9ec:	f000 fce1 	bl	800d3b2 <prvIsQueueFull>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d018      	beq.n	800ca28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f8:	3310      	adds	r3, #16
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f001 f934 	bl	800dc6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ca04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca06:	f000 fc6c 	bl	800d2e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ca0a:	f000 ff33 	bl	800d874 <xTaskResumeAll>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f47f af7c 	bne.w	800c90e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ca16:	4b0c      	ldr	r3, [pc, #48]	; (800ca48 <xQueueGenericSend+0x200>)
 800ca18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca1c:	601a      	str	r2, [r3, #0]
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	e772      	b.n	800c90e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ca28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca2a:	f000 fc5a 	bl	800d2e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca2e:	f000 ff21 	bl	800d874 <xTaskResumeAll>
 800ca32:	e76c      	b.n	800c90e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ca34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca36:	f000 fc54 	bl	800d2e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca3a:	f000 ff1b 	bl	800d874 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ca3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3738      	adds	r7, #56	; 0x38
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	e000ed04 	.word	0xe000ed04

0800ca4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08e      	sub	sp, #56	; 0x38
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
 800ca58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10b      	bne.n	800ca7c <xQueueGenericSendFromISR+0x30>
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	b672      	cpsid	i
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	b662      	cpsie	i
 800ca78:	627b      	str	r3, [r7, #36]	; 0x24
 800ca7a:	e7fe      	b.n	800ca7a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d103      	bne.n	800ca8a <xQueueGenericSendFromISR+0x3e>
 800ca82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <xQueueGenericSendFromISR+0x42>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e000      	b.n	800ca90 <xQueueGenericSendFromISR+0x44>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10b      	bne.n	800caac <xQueueGenericSendFromISR+0x60>
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	b672      	cpsid	i
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	b662      	cpsie	i
 800caa8:	623b      	str	r3, [r7, #32]
 800caaa:	e7fe      	b.n	800caaa <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d103      	bne.n	800caba <xQueueGenericSendFromISR+0x6e>
 800cab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d101      	bne.n	800cabe <xQueueGenericSendFromISR+0x72>
 800caba:	2301      	movs	r3, #1
 800cabc:	e000      	b.n	800cac0 <xQueueGenericSendFromISR+0x74>
 800cabe:	2300      	movs	r3, #0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10b      	bne.n	800cadc <xQueueGenericSendFromISR+0x90>
 800cac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac8:	b672      	cpsid	i
 800caca:	f383 8811 	msr	BASEPRI, r3
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f3bf 8f4f 	dsb	sy
 800cad6:	b662      	cpsie	i
 800cad8:	61fb      	str	r3, [r7, #28]
 800cada:	e7fe      	b.n	800cada <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cadc:	f001 fed4 	bl	800e888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cae0:	f3ef 8211 	mrs	r2, BASEPRI
 800cae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae8:	b672      	cpsid	i
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	b662      	cpsie	i
 800caf8:	61ba      	str	r2, [r7, #24]
 800cafa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cafc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cafe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d302      	bcc.n	800cb12 <xQueueGenericSendFromISR+0xc6>
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d12c      	bne.n	800cb6c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	68b9      	ldr	r1, [r7, #8]
 800cb20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb22:	f000 fb4e 	bl	800d1c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb26:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2e:	d112      	bne.n	800cb56 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d016      	beq.n	800cb66 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	3324      	adds	r3, #36	; 0x24
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f001 f8bb 	bl	800dcb8 <xTaskRemoveFromEventList>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00e      	beq.n	800cb66 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00b      	beq.n	800cb66 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2201      	movs	r2, #1
 800cb52:	601a      	str	r2, [r3, #0]
 800cb54:	e007      	b.n	800cb66 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	b25a      	sxtb	r2, r3
 800cb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cb66:	2301      	movs	r3, #1
 800cb68:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cb6a:	e001      	b.n	800cb70 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	637b      	str	r3, [r7, #52]	; 0x34
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3738      	adds	r7, #56	; 0x38
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08e      	sub	sp, #56	; 0x38
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10b      	bne.n	800cbb0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	b672      	cpsid	i
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	b662      	cpsie	i
 800cbac:	623b      	str	r3, [r7, #32]
 800cbae:	e7fe      	b.n	800cbae <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00b      	beq.n	800cbd0 <xQueueGiveFromISR+0x4c>
 800cbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbc:	b672      	cpsid	i
 800cbbe:	f383 8811 	msr	BASEPRI, r3
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	f3bf 8f4f 	dsb	sy
 800cbca:	b662      	cpsie	i
 800cbcc:	61fb      	str	r3, [r7, #28]
 800cbce:	e7fe      	b.n	800cbce <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d103      	bne.n	800cbe0 <xQueueGiveFromISR+0x5c>
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d101      	bne.n	800cbe4 <xQueueGiveFromISR+0x60>
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	e000      	b.n	800cbe6 <xQueueGiveFromISR+0x62>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d10b      	bne.n	800cc02 <xQueueGiveFromISR+0x7e>
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	b672      	cpsid	i
 800cbf0:	f383 8811 	msr	BASEPRI, r3
 800cbf4:	f3bf 8f6f 	isb	sy
 800cbf8:	f3bf 8f4f 	dsb	sy
 800cbfc:	b662      	cpsie	i
 800cbfe:	61bb      	str	r3, [r7, #24]
 800cc00:	e7fe      	b.n	800cc00 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc02:	f001 fe41 	bl	800e888 <vPortValidateInterruptPriority>
	__asm volatile
 800cc06:	f3ef 8211 	mrs	r2, BASEPRI
 800cc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0e:	b672      	cpsid	i
 800cc10:	f383 8811 	msr	BASEPRI, r3
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	b662      	cpsie	i
 800cc1e:	617a      	str	r2, [r7, #20]
 800cc20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cc22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d22b      	bcs.n	800cc8e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc42:	1c5a      	adds	r2, r3, #1
 800cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc46:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc50:	d112      	bne.n	800cc78 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d016      	beq.n	800cc88 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5c:	3324      	adds	r3, #36	; 0x24
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f001 f82a 	bl	800dcb8 <xTaskRemoveFromEventList>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00e      	beq.n	800cc88 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00b      	beq.n	800cc88 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2201      	movs	r2, #1
 800cc74:	601a      	str	r2, [r3, #0]
 800cc76:	e007      	b.n	800cc88 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	b25a      	sxtb	r2, r3
 800cc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	637b      	str	r3, [r7, #52]	; 0x34
 800cc8c:	e001      	b.n	800cc92 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	637b      	str	r3, [r7, #52]	; 0x34
 800cc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc94:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3738      	adds	r7, #56	; 0x38
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
	...

0800cca8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b08c      	sub	sp, #48	; 0x30
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ccbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10b      	bne.n	800ccda <xQueueReceive+0x32>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc6:	b672      	cpsid	i
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	b662      	cpsie	i
 800ccd6:	623b      	str	r3, [r7, #32]
 800ccd8:	e7fe      	b.n	800ccd8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d103      	bne.n	800cce8 <xQueueReceive+0x40>
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <xQueueReceive+0x44>
 800cce8:	2301      	movs	r3, #1
 800ccea:	e000      	b.n	800ccee <xQueueReceive+0x46>
 800ccec:	2300      	movs	r3, #0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10b      	bne.n	800cd0a <xQueueReceive+0x62>
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	b672      	cpsid	i
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	b662      	cpsie	i
 800cd06:	61fb      	str	r3, [r7, #28]
 800cd08:	e7fe      	b.n	800cd08 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd0a:	f001 f995 	bl	800e038 <xTaskGetSchedulerState>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d102      	bne.n	800cd1a <xQueueReceive+0x72>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d101      	bne.n	800cd1e <xQueueReceive+0x76>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e000      	b.n	800cd20 <xQueueReceive+0x78>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10b      	bne.n	800cd3c <xQueueReceive+0x94>
 800cd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd28:	b672      	cpsid	i
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	b662      	cpsie	i
 800cd38:	61bb      	str	r3, [r7, #24]
 800cd3a:	e7fe      	b.n	800cd3a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd3c:	f001 fcc4 	bl	800e6c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd44:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d01f      	beq.n	800cd8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd4c:	68b9      	ldr	r1, [r7, #8]
 800cd4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd50:	f000 faa1 	bl	800d296 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	1e5a      	subs	r2, r3, #1
 800cd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00f      	beq.n	800cd84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd66:	3310      	adds	r3, #16
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f000 ffa5 	bl	800dcb8 <xTaskRemoveFromEventList>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d007      	beq.n	800cd84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd74:	4b3c      	ldr	r3, [pc, #240]	; (800ce68 <xQueueReceive+0x1c0>)
 800cd76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd84:	f001 fcd2 	bl	800e72c <vPortExitCritical>
				return pdPASS;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e069      	b.n	800ce60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d103      	bne.n	800cd9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd92:	f001 fccb 	bl	800e72c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd96:	2300      	movs	r3, #0
 800cd98:	e062      	b.n	800ce60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d106      	bne.n	800cdae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cda0:	f107 0310 	add.w	r3, r7, #16
 800cda4:	4618      	mov	r0, r3
 800cda6:	f000 ffeb 	bl	800dd80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdae:	f001 fcbd 	bl	800e72c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdb2:	f000 fd51 	bl	800d858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdb6:	f001 fc87 	bl	800e6c8 <vPortEnterCritical>
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdc0:	b25b      	sxtb	r3, r3
 800cdc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc6:	d103      	bne.n	800cdd0 <xQueueReceive+0x128>
 800cdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdd6:	b25b      	sxtb	r3, r3
 800cdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cddc:	d103      	bne.n	800cde6 <xQueueReceive+0x13e>
 800cdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde0:	2200      	movs	r2, #0
 800cde2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cde6:	f001 fca1 	bl	800e72c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdea:	1d3a      	adds	r2, r7, #4
 800cdec:	f107 0310 	add.w	r3, r7, #16
 800cdf0:	4611      	mov	r1, r2
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f000 ffda 	bl	800ddac <xTaskCheckForTimeOut>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d123      	bne.n	800ce46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce00:	f000 fac1 	bl	800d386 <prvIsQueueEmpty>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d017      	beq.n	800ce3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0c:	3324      	adds	r3, #36	; 0x24
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	4611      	mov	r1, r2
 800ce12:	4618      	mov	r0, r3
 800ce14:	f000 ff2a 	bl	800dc6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce1a:	f000 fa62 	bl	800d2e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce1e:	f000 fd29 	bl	800d874 <xTaskResumeAll>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d189      	bne.n	800cd3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ce28:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <xQueueReceive+0x1c0>)
 800ce2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce2e:	601a      	str	r2, [r3, #0]
 800ce30:	f3bf 8f4f 	dsb	sy
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	e780      	b.n	800cd3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce3c:	f000 fa51 	bl	800d2e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce40:	f000 fd18 	bl	800d874 <xTaskResumeAll>
 800ce44:	e77a      	b.n	800cd3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce48:	f000 fa4b 	bl	800d2e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce4c:	f000 fd12 	bl	800d874 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce52:	f000 fa98 	bl	800d386 <prvIsQueueEmpty>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f43f af6f 	beq.w	800cd3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3730      	adds	r7, #48	; 0x30
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	e000ed04 	.word	0xe000ed04

0800ce6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b08e      	sub	sp, #56	; 0x38
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce76:	2300      	movs	r3, #0
 800ce78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10b      	bne.n	800cea0 <xQueueSemaphoreTake+0x34>
 800ce88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8c:	b672      	cpsid	i
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	b662      	cpsie	i
 800ce9c:	623b      	str	r3, [r7, #32]
 800ce9e:	e7fe      	b.n	800ce9e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00b      	beq.n	800cec0 <xQueueSemaphoreTake+0x54>
 800cea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceac:	b672      	cpsid	i
 800ceae:	f383 8811 	msr	BASEPRI, r3
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	b662      	cpsie	i
 800cebc:	61fb      	str	r3, [r7, #28]
 800cebe:	e7fe      	b.n	800cebe <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cec0:	f001 f8ba 	bl	800e038 <xTaskGetSchedulerState>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d102      	bne.n	800ced0 <xQueueSemaphoreTake+0x64>
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <xQueueSemaphoreTake+0x68>
 800ced0:	2301      	movs	r3, #1
 800ced2:	e000      	b.n	800ced6 <xQueueSemaphoreTake+0x6a>
 800ced4:	2300      	movs	r3, #0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d10b      	bne.n	800cef2 <xQueueSemaphoreTake+0x86>
 800ceda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cede:	b672      	cpsid	i
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	b662      	cpsie	i
 800ceee:	61bb      	str	r3, [r7, #24]
 800cef0:	e7fe      	b.n	800cef0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cef2:	f001 fbe9 	bl	800e6c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d024      	beq.n	800cf4c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf04:	1e5a      	subs	r2, r3, #1
 800cf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf08:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d104      	bne.n	800cf1c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cf12:	f001 fa53 	bl	800e3bc <pvTaskIncrementMutexHeldCount>
 800cf16:	4602      	mov	r2, r0
 800cf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d00f      	beq.n	800cf44 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	3310      	adds	r3, #16
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 fec5 	bl	800dcb8 <xTaskRemoveFromEventList>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d007      	beq.n	800cf44 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf34:	4b54      	ldr	r3, [pc, #336]	; (800d088 <xQueueSemaphoreTake+0x21c>)
 800cf36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf3a:	601a      	str	r2, [r3, #0]
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf44:	f001 fbf2 	bl	800e72c <vPortExitCritical>
				return pdPASS;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e098      	b.n	800d07e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d112      	bne.n	800cf78 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00b      	beq.n	800cf70 <xQueueSemaphoreTake+0x104>
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	b672      	cpsid	i
 800cf5e:	f383 8811 	msr	BASEPRI, r3
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	b662      	cpsie	i
 800cf6c:	617b      	str	r3, [r7, #20]
 800cf6e:	e7fe      	b.n	800cf6e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cf70:	f001 fbdc 	bl	800e72c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf74:	2300      	movs	r3, #0
 800cf76:	e082      	b.n	800d07e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d106      	bne.n	800cf8c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf7e:	f107 030c 	add.w	r3, r7, #12
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 fefc 	bl	800dd80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf8c:	f001 fbce 	bl	800e72c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf90:	f000 fc62 	bl	800d858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf94:	f001 fb98 	bl	800e6c8 <vPortEnterCritical>
 800cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf9e:	b25b      	sxtb	r3, r3
 800cfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa4:	d103      	bne.n	800cfae <xQueueSemaphoreTake+0x142>
 800cfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfb4:	b25b      	sxtb	r3, r3
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfba:	d103      	bne.n	800cfc4 <xQueueSemaphoreTake+0x158>
 800cfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfc4:	f001 fbb2 	bl	800e72c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfc8:	463a      	mov	r2, r7
 800cfca:	f107 030c 	add.w	r3, r7, #12
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 feeb 	bl	800ddac <xTaskCheckForTimeOut>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d132      	bne.n	800d042 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfde:	f000 f9d2 	bl	800d386 <prvIsQueueEmpty>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d026      	beq.n	800d036 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d109      	bne.n	800d004 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cff0:	f001 fb6a 	bl	800e6c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f001 f83b 	bl	800e074 <xTaskPriorityInherit>
 800cffe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d000:	f001 fb94 	bl	800e72c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d006:	3324      	adds	r3, #36	; 0x24
 800d008:	683a      	ldr	r2, [r7, #0]
 800d00a:	4611      	mov	r1, r2
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 fe2d 	bl	800dc6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d014:	f000 f965 	bl	800d2e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d018:	f000 fc2c 	bl	800d874 <xTaskResumeAll>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f47f af67 	bne.w	800cef2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d024:	4b18      	ldr	r3, [pc, #96]	; (800d088 <xQueueSemaphoreTake+0x21c>)
 800d026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	e75d      	b.n	800cef2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d038:	f000 f953 	bl	800d2e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d03c:	f000 fc1a 	bl	800d874 <xTaskResumeAll>
 800d040:	e757      	b.n	800cef2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d044:	f000 f94d 	bl	800d2e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d048:	f000 fc14 	bl	800d874 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d04c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d04e:	f000 f99a 	bl	800d386 <prvIsQueueEmpty>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	f43f af4c 	beq.w	800cef2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00d      	beq.n	800d07c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d060:	f001 fb32 	bl	800e6c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d066:	f000 f894 	bl	800d192 <prvGetDisinheritPriorityAfterTimeout>
 800d06a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d072:	4618      	mov	r0, r3
 800d074:	f001 f906 	bl	800e284 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d078:	f001 fb58 	bl	800e72c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d07c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3738      	adds	r7, #56	; 0x38
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	e000ed04 	.word	0xe000ed04

0800d08c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08e      	sub	sp, #56	; 0x38
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10b      	bne.n	800d0ba <xQueueReceiveFromISR+0x2e>
 800d0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a6:	b672      	cpsid	i
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	b662      	cpsie	i
 800d0b6:	623b      	str	r3, [r7, #32]
 800d0b8:	e7fe      	b.n	800d0b8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d103      	bne.n	800d0c8 <xQueueReceiveFromISR+0x3c>
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d101      	bne.n	800d0cc <xQueueReceiveFromISR+0x40>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e000      	b.n	800d0ce <xQueueReceiveFromISR+0x42>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10b      	bne.n	800d0ea <xQueueReceiveFromISR+0x5e>
 800d0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d6:	b672      	cpsid	i
 800d0d8:	f383 8811 	msr	BASEPRI, r3
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	b662      	cpsie	i
 800d0e6:	61fb      	str	r3, [r7, #28]
 800d0e8:	e7fe      	b.n	800d0e8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0ea:	f001 fbcd 	bl	800e888 <vPortValidateInterruptPriority>
	__asm volatile
 800d0ee:	f3ef 8211 	mrs	r2, BASEPRI
 800d0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f6:	b672      	cpsid	i
 800d0f8:	f383 8811 	msr	BASEPRI, r3
 800d0fc:	f3bf 8f6f 	isb	sy
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	b662      	cpsie	i
 800d106:	61ba      	str	r2, [r7, #24]
 800d108:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d10a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d10c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d112:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d116:	2b00      	cmp	r3, #0
 800d118:	d02f      	beq.n	800d17a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d124:	68b9      	ldr	r1, [r7, #8]
 800d126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d128:	f000 f8b5 	bl	800d296 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12e:	1e5a      	subs	r2, r3, #1
 800d130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d132:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d134:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d13c:	d112      	bne.n	800d164 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d140:	691b      	ldr	r3, [r3, #16]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d016      	beq.n	800d174 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d148:	3310      	adds	r3, #16
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 fdb4 	bl	800dcb8 <xTaskRemoveFromEventList>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d00e      	beq.n	800d174 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00b      	beq.n	800d174 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	601a      	str	r2, [r3, #0]
 800d162:	e007      	b.n	800d174 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d168:	3301      	adds	r3, #1
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	b25a      	sxtb	r2, r3
 800d16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d174:	2301      	movs	r3, #1
 800d176:	637b      	str	r3, [r7, #52]	; 0x34
 800d178:	e001      	b.n	800d17e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d17a:	2300      	movs	r3, #0
 800d17c:	637b      	str	r3, [r7, #52]	; 0x34
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3738      	adds	r7, #56	; 0x38
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d192:	b480      	push	{r7}
 800d194:	b085      	sub	sp, #20
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d006      	beq.n	800d1b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f1c3 0307 	rsb	r3, r3, #7
 800d1ac:	60fb      	str	r3, [r7, #12]
 800d1ae:	e001      	b.n	800d1b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
	}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3714      	adds	r7, #20
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr

0800d1c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b086      	sub	sp, #24
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	60f8      	str	r0, [r7, #12]
 800d1ca:	60b9      	str	r1, [r7, #8]
 800d1cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d10d      	bne.n	800d1fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d14d      	bne.n	800d284 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f000 ffc1 	bl	800e174 <xTaskPriorityDisinherit>
 800d1f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	609a      	str	r2, [r3, #8]
 800d1fa:	e043      	b.n	800d284 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d119      	bne.n	800d236 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6858      	ldr	r0, [r3, #4]
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20a:	461a      	mov	r2, r3
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	f01a fa4b 	bl	80276a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d21a:	441a      	add	r2, r3
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	685a      	ldr	r2, [r3, #4]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d32b      	bcc.n	800d284 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	605a      	str	r2, [r3, #4]
 800d234:	e026      	b.n	800d284 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	68d8      	ldr	r0, [r3, #12]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23e:	461a      	mov	r2, r3
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	f01a fa31 	bl	80276a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	68da      	ldr	r2, [r3, #12]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d24e:	425b      	negs	r3, r3
 800d250:	441a      	add	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	68da      	ldr	r2, [r3, #12]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d207      	bcs.n	800d272 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	689a      	ldr	r2, [r3, #8]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26a:	425b      	negs	r3, r3
 800d26c:	441a      	add	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2b02      	cmp	r3, #2
 800d276:	d105      	bne.n	800d284 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d002      	beq.n	800d284 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	3b01      	subs	r3, #1
 800d282:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	1c5a      	adds	r2, r3, #1
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d28c:	697b      	ldr	r3, [r7, #20]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b082      	sub	sp, #8
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d018      	beq.n	800d2da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	68da      	ldr	r2, [r3, #12]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b0:	441a      	add	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	68da      	ldr	r2, [r3, #12]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d303      	bcc.n	800d2ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	68d9      	ldr	r1, [r3, #12]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	6838      	ldr	r0, [r7, #0]
 800d2d6:	f01a f9e7 	bl	80276a8 <memcpy>
	}
}
 800d2da:	bf00      	nop
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d2ea:	f001 f9ed 	bl	800e6c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2f6:	e011      	b.n	800d31c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d012      	beq.n	800d326 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3324      	adds	r3, #36	; 0x24
 800d304:	4618      	mov	r0, r3
 800d306:	f000 fcd7 	bl	800dcb8 <xTaskRemoveFromEventList>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d001      	beq.n	800d314 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d310:	f000 fdb0 	bl	800de74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d314:	7bfb      	ldrb	r3, [r7, #15]
 800d316:	3b01      	subs	r3, #1
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d31c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d320:	2b00      	cmp	r3, #0
 800d322:	dce9      	bgt.n	800d2f8 <prvUnlockQueue+0x16>
 800d324:	e000      	b.n	800d328 <prvUnlockQueue+0x46>
					break;
 800d326:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	22ff      	movs	r2, #255	; 0xff
 800d32c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d330:	f001 f9fc 	bl	800e72c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d334:	f001 f9c8 	bl	800e6c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d33e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d340:	e011      	b.n	800d366 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d012      	beq.n	800d370 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	3310      	adds	r3, #16
 800d34e:	4618      	mov	r0, r3
 800d350:	f000 fcb2 	bl	800dcb8 <xTaskRemoveFromEventList>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d001      	beq.n	800d35e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d35a:	f000 fd8b 	bl	800de74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d35e:	7bbb      	ldrb	r3, [r7, #14]
 800d360:	3b01      	subs	r3, #1
 800d362:	b2db      	uxtb	r3, r3
 800d364:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d366:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	dce9      	bgt.n	800d342 <prvUnlockQueue+0x60>
 800d36e:	e000      	b.n	800d372 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d370:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	22ff      	movs	r2, #255	; 0xff
 800d376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d37a:	f001 f9d7 	bl	800e72c <vPortExitCritical>
}
 800d37e:	bf00      	nop
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b084      	sub	sp, #16
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d38e:	f001 f99b 	bl	800e6c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d396:	2b00      	cmp	r3, #0
 800d398:	d102      	bne.n	800d3a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d39a:	2301      	movs	r3, #1
 800d39c:	60fb      	str	r3, [r7, #12]
 800d39e:	e001      	b.n	800d3a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3a4:	f001 f9c2 	bl	800e72c <vPortExitCritical>

	return xReturn;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b084      	sub	sp, #16
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3ba:	f001 f985 	bl	800e6c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d102      	bne.n	800d3d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	60fb      	str	r3, [r7, #12]
 800d3ce:	e001      	b.n	800d3d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3d4:	f001 f9aa 	bl	800e72c <vPortExitCritical>

	return xReturn;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b08e      	sub	sp, #56	; 0x38
 800d3e6:	af04      	add	r7, sp, #16
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	60b9      	str	r1, [r7, #8]
 800d3ec:	607a      	str	r2, [r7, #4]
 800d3ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d10b      	bne.n	800d40e <xTaskCreateStatic+0x2c>
	__asm volatile
 800d3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fa:	b672      	cpsid	i
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	b662      	cpsie	i
 800d40a:	623b      	str	r3, [r7, #32]
 800d40c:	e7fe      	b.n	800d40c <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10b      	bne.n	800d42c <xTaskCreateStatic+0x4a>
 800d414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d418:	b672      	cpsid	i
 800d41a:	f383 8811 	msr	BASEPRI, r3
 800d41e:	f3bf 8f6f 	isb	sy
 800d422:	f3bf 8f4f 	dsb	sy
 800d426:	b662      	cpsie	i
 800d428:	61fb      	str	r3, [r7, #28]
 800d42a:	e7fe      	b.n	800d42a <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d42c:	2358      	movs	r3, #88	; 0x58
 800d42e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	2b58      	cmp	r3, #88	; 0x58
 800d434:	d00b      	beq.n	800d44e <xTaskCreateStatic+0x6c>
 800d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43a:	b672      	cpsid	i
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	b662      	cpsie	i
 800d44a:	61bb      	str	r3, [r7, #24]
 800d44c:	e7fe      	b.n	800d44c <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d44e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d452:	2b00      	cmp	r3, #0
 800d454:	d01e      	beq.n	800d494 <xTaskCreateStatic+0xb2>
 800d456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d01b      	beq.n	800d494 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d464:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d468:	2202      	movs	r2, #2
 800d46a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d46e:	2300      	movs	r3, #0
 800d470:	9303      	str	r3, [sp, #12]
 800d472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d474:	9302      	str	r3, [sp, #8]
 800d476:	f107 0314 	add.w	r3, r7, #20
 800d47a:	9301      	str	r3, [sp, #4]
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	68b9      	ldr	r1, [r7, #8]
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f000 f850 	bl	800d52c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d48c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d48e:	f000 f8e1 	bl	800d654 <prvAddNewTaskToReadyList>
 800d492:	e001      	b.n	800d498 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d494:	2300      	movs	r3, #0
 800d496:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d498:	697b      	ldr	r3, [r7, #20]
	}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3728      	adds	r7, #40	; 0x28
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b08c      	sub	sp, #48	; 0x30
 800d4a6:	af04      	add	r7, sp, #16
 800d4a8:	60f8      	str	r0, [r7, #12]
 800d4aa:	60b9      	str	r1, [r7, #8]
 800d4ac:	603b      	str	r3, [r7, #0]
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d4b2:	88fb      	ldrh	r3, [r7, #6]
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f001 fa28 	bl	800e90c <pvPortMalloc>
 800d4bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00e      	beq.n	800d4e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d4c4:	2058      	movs	r0, #88	; 0x58
 800d4c6:	f001 fa21 	bl	800e90c <pvPortMalloc>
 800d4ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d003      	beq.n	800d4da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	697a      	ldr	r2, [r7, #20]
 800d4d6:	631a      	str	r2, [r3, #48]	; 0x30
 800d4d8:	e005      	b.n	800d4e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d4da:	6978      	ldr	r0, [r7, #20]
 800d4dc:	f001 fae2 	bl	800eaa4 <vPortFree>
 800d4e0:	e001      	b.n	800d4e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d017      	beq.n	800d51c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d4f4:	88fa      	ldrh	r2, [r7, #6]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	9303      	str	r3, [sp, #12]
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	9302      	str	r3, [sp, #8]
 800d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d500:	9301      	str	r3, [sp, #4]
 800d502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	68b9      	ldr	r1, [r7, #8]
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f000 f80e 	bl	800d52c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d510:	69f8      	ldr	r0, [r7, #28]
 800d512:	f000 f89f 	bl	800d654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d516:	2301      	movs	r3, #1
 800d518:	61bb      	str	r3, [r7, #24]
 800d51a:	e002      	b.n	800d522 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d51c:	f04f 33ff 	mov.w	r3, #4294967295
 800d520:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d522:	69bb      	ldr	r3, [r7, #24]
	}
 800d524:	4618      	mov	r0, r3
 800d526:	3720      	adds	r7, #32
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b088      	sub	sp, #32
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	461a      	mov	r2, r3
 800d544:	21a5      	movs	r1, #165	; 0xa5
 800d546:	f01a f8ba 	bl	80276be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d54e:	6879      	ldr	r1, [r7, #4]
 800d550:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d554:	440b      	add	r3, r1
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	f023 0307 	bic.w	r3, r3, #7
 800d562:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	f003 0307 	and.w	r3, r3, #7
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00b      	beq.n	800d586 <prvInitialiseNewTask+0x5a>
 800d56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d572:	b672      	cpsid	i
 800d574:	f383 8811 	msr	BASEPRI, r3
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	f3bf 8f4f 	dsb	sy
 800d580:	b662      	cpsie	i
 800d582:	617b      	str	r3, [r7, #20]
 800d584:	e7fe      	b.n	800d584 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d01f      	beq.n	800d5cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d58c:	2300      	movs	r3, #0
 800d58e:	61fb      	str	r3, [r7, #28]
 800d590:	e012      	b.n	800d5b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d592:	68ba      	ldr	r2, [r7, #8]
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	4413      	add	r3, r2
 800d598:	7819      	ldrb	r1, [r3, #0]
 800d59a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	4413      	add	r3, r2
 800d5a0:	3334      	adds	r3, #52	; 0x34
 800d5a2:	460a      	mov	r2, r1
 800d5a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d006      	beq.n	800d5c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	61fb      	str	r3, [r7, #28]
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	2b0f      	cmp	r3, #15
 800d5bc:	d9e9      	bls.n	800d592 <prvInitialiseNewTask+0x66>
 800d5be:	e000      	b.n	800d5c2 <prvInitialiseNewTask+0x96>
			{
				break;
 800d5c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d5ca:	e003      	b.n	800d5d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d6:	2b06      	cmp	r3, #6
 800d5d8:	d901      	bls.n	800d5de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d5da:	2306      	movs	r3, #6
 800d5dc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5e8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f2:	3304      	adds	r3, #4
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fe fedd 	bl	800c3b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fc:	3318      	adds	r3, #24
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7fe fed8 	bl	800c3b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d608:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60c:	f1c3 0207 	rsb	r2, r3, #7
 800d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d612:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d618:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61c:	2200      	movs	r2, #0
 800d61e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d622:	2200      	movs	r2, #0
 800d624:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d62e:	683a      	ldr	r2, [r7, #0]
 800d630:	68f9      	ldr	r1, [r7, #12]
 800d632:	69b8      	ldr	r0, [r7, #24]
 800d634:	f000 ff3c 	bl	800e4b0 <pxPortInitialiseStack>
 800d638:	4602      	mov	r2, r0
 800d63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d640:	2b00      	cmp	r3, #0
 800d642:	d002      	beq.n	800d64a <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d64a:	bf00      	nop
 800d64c:	3720      	adds	r7, #32
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
	...

0800d654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d65c:	f001 f834 	bl	800e6c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d660:	4b2a      	ldr	r3, [pc, #168]	; (800d70c <prvAddNewTaskToReadyList+0xb8>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3301      	adds	r3, #1
 800d666:	4a29      	ldr	r2, [pc, #164]	; (800d70c <prvAddNewTaskToReadyList+0xb8>)
 800d668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d66a:	4b29      	ldr	r3, [pc, #164]	; (800d710 <prvAddNewTaskToReadyList+0xbc>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d109      	bne.n	800d686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d672:	4a27      	ldr	r2, [pc, #156]	; (800d710 <prvAddNewTaskToReadyList+0xbc>)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d678:	4b24      	ldr	r3, [pc, #144]	; (800d70c <prvAddNewTaskToReadyList+0xb8>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d110      	bne.n	800d6a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d680:	f000 fc1e 	bl	800dec0 <prvInitialiseTaskLists>
 800d684:	e00d      	b.n	800d6a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d686:	4b23      	ldr	r3, [pc, #140]	; (800d714 <prvAddNewTaskToReadyList+0xc0>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d109      	bne.n	800d6a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d68e:	4b20      	ldr	r3, [pc, #128]	; (800d710 <prvAddNewTaskToReadyList+0xbc>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d698:	429a      	cmp	r2, r3
 800d69a:	d802      	bhi.n	800d6a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d69c:	4a1c      	ldr	r2, [pc, #112]	; (800d710 <prvAddNewTaskToReadyList+0xbc>)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d6a2:	4b1d      	ldr	r3, [pc, #116]	; (800d718 <prvAddNewTaskToReadyList+0xc4>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	4a1b      	ldr	r2, [pc, #108]	; (800d718 <prvAddNewTaskToReadyList+0xc4>)
 800d6aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	409a      	lsls	r2, r3
 800d6b4:	4b19      	ldr	r3, [pc, #100]	; (800d71c <prvAddNewTaskToReadyList+0xc8>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	4a18      	ldr	r2, [pc, #96]	; (800d71c <prvAddNewTaskToReadyList+0xc8>)
 800d6bc:	6013      	str	r3, [r2, #0]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4a15      	ldr	r2, [pc, #84]	; (800d720 <prvAddNewTaskToReadyList+0xcc>)
 800d6cc:	441a      	add	r2, r3
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	f7fe fe7a 	bl	800c3ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d6da:	f001 f827 	bl	800e72c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d6de:	4b0d      	ldr	r3, [pc, #52]	; (800d714 <prvAddNewTaskToReadyList+0xc0>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00e      	beq.n	800d704 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d6e6:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <prvAddNewTaskToReadyList+0xbc>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d207      	bcs.n	800d704 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d6f4:	4b0b      	ldr	r3, [pc, #44]	; (800d724 <prvAddNewTaskToReadyList+0xd0>)
 800d6f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6fa:	601a      	str	r2, [r3, #0]
 800d6fc:	f3bf 8f4f 	dsb	sy
 800d700:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d704:	bf00      	nop
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	200004a4 	.word	0x200004a4
 800d710:	200003a4 	.word	0x200003a4
 800d714:	200004b0 	.word	0x200004b0
 800d718:	200004c0 	.word	0x200004c0
 800d71c:	200004ac 	.word	0x200004ac
 800d720:	200003a8 	.word	0x200003a8
 800d724:	e000ed04 	.word	0xe000ed04

0800d728 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d730:	2300      	movs	r3, #0
 800d732:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d018      	beq.n	800d76c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d73a:	4b14      	ldr	r3, [pc, #80]	; (800d78c <vTaskDelay+0x64>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00b      	beq.n	800d75a <vTaskDelay+0x32>
 800d742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d746:	b672      	cpsid	i
 800d748:	f383 8811 	msr	BASEPRI, r3
 800d74c:	f3bf 8f6f 	isb	sy
 800d750:	f3bf 8f4f 	dsb	sy
 800d754:	b662      	cpsie	i
 800d756:	60bb      	str	r3, [r7, #8]
 800d758:	e7fe      	b.n	800d758 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d75a:	f000 f87d 	bl	800d858 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d75e:	2100      	movs	r1, #0
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fe3f 	bl	800e3e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d766:	f000 f885 	bl	800d874 <xTaskResumeAll>
 800d76a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d107      	bne.n	800d782 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d772:	4b07      	ldr	r3, [pc, #28]	; (800d790 <vTaskDelay+0x68>)
 800d774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d782:	bf00      	nop
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	200004cc 	.word	0x200004cc
 800d790:	e000ed04 	.word	0xe000ed04

0800d794 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b08a      	sub	sp, #40	; 0x28
 800d798:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d79a:	2300      	movs	r3, #0
 800d79c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d7a2:	463a      	mov	r2, r7
 800d7a4:	1d39      	adds	r1, r7, #4
 800d7a6:	f107 0308 	add.w	r3, r7, #8
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7f3 f8f6 	bl	800099c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d7b0:	6839      	ldr	r1, [r7, #0]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	68ba      	ldr	r2, [r7, #8]
 800d7b6:	9202      	str	r2, [sp, #8]
 800d7b8:	9301      	str	r3, [sp, #4]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	2300      	movs	r3, #0
 800d7c0:	460a      	mov	r2, r1
 800d7c2:	491f      	ldr	r1, [pc, #124]	; (800d840 <vTaskStartScheduler+0xac>)
 800d7c4:	481f      	ldr	r0, [pc, #124]	; (800d844 <vTaskStartScheduler+0xb0>)
 800d7c6:	f7ff fe0c 	bl	800d3e2 <xTaskCreateStatic>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	4b1e      	ldr	r3, [pc, #120]	; (800d848 <vTaskStartScheduler+0xb4>)
 800d7ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d7d0:	4b1d      	ldr	r3, [pc, #116]	; (800d848 <vTaskStartScheduler+0xb4>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	617b      	str	r3, [r7, #20]
 800d7dc:	e001      	b.n	800d7e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d117      	bne.n	800d818 <vTaskStartScheduler+0x84>
 800d7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ec:	b672      	cpsid	i
 800d7ee:	f383 8811 	msr	BASEPRI, r3
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	b662      	cpsie	i
 800d7fc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d7fe:	4b13      	ldr	r3, [pc, #76]	; (800d84c <vTaskStartScheduler+0xb8>)
 800d800:	f04f 32ff 	mov.w	r2, #4294967295
 800d804:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d806:	4b12      	ldr	r3, [pc, #72]	; (800d850 <vTaskStartScheduler+0xbc>)
 800d808:	2201      	movs	r2, #1
 800d80a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d80c:	4b11      	ldr	r3, [pc, #68]	; (800d854 <vTaskStartScheduler+0xc0>)
 800d80e:	2200      	movs	r2, #0
 800d810:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d812:	f000 fedd 	bl	800e5d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d816:	e00f      	b.n	800d838 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81e:	d10b      	bne.n	800d838 <vTaskStartScheduler+0xa4>
 800d820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d824:	b672      	cpsid	i
 800d826:	f383 8811 	msr	BASEPRI, r3
 800d82a:	f3bf 8f6f 	isb	sy
 800d82e:	f3bf 8f4f 	dsb	sy
 800d832:	b662      	cpsie	i
 800d834:	60fb      	str	r3, [r7, #12]
 800d836:	e7fe      	b.n	800d836 <vTaskStartScheduler+0xa2>
}
 800d838:	bf00      	nop
 800d83a:	3718      	adds	r7, #24
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	08028608 	.word	0x08028608
 800d844:	0800de8d 	.word	0x0800de8d
 800d848:	200004c8 	.word	0x200004c8
 800d84c:	200004c4 	.word	0x200004c4
 800d850:	200004b0 	.word	0x200004b0
 800d854:	200004a8 	.word	0x200004a8

0800d858 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d858:	b480      	push	{r7}
 800d85a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d85c:	4b04      	ldr	r3, [pc, #16]	; (800d870 <vTaskSuspendAll+0x18>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	3301      	adds	r3, #1
 800d862:	4a03      	ldr	r2, [pc, #12]	; (800d870 <vTaskSuspendAll+0x18>)
 800d864:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d866:	bf00      	nop
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr
 800d870:	200004cc 	.word	0x200004cc

0800d874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d87a:	2300      	movs	r3, #0
 800d87c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d87e:	2300      	movs	r3, #0
 800d880:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d882:	4b42      	ldr	r3, [pc, #264]	; (800d98c <xTaskResumeAll+0x118>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d10b      	bne.n	800d8a2 <xTaskResumeAll+0x2e>
 800d88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88e:	b672      	cpsid	i
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	b662      	cpsie	i
 800d89e:	603b      	str	r3, [r7, #0]
 800d8a0:	e7fe      	b.n	800d8a0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d8a2:	f000 ff11 	bl	800e6c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d8a6:	4b39      	ldr	r3, [pc, #228]	; (800d98c <xTaskResumeAll+0x118>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	4a37      	ldr	r2, [pc, #220]	; (800d98c <xTaskResumeAll+0x118>)
 800d8ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8b0:	4b36      	ldr	r3, [pc, #216]	; (800d98c <xTaskResumeAll+0x118>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d161      	bne.n	800d97c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d8b8:	4b35      	ldr	r3, [pc, #212]	; (800d990 <xTaskResumeAll+0x11c>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d05d      	beq.n	800d97c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8c0:	e02e      	b.n	800d920 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8c2:	4b34      	ldr	r3, [pc, #208]	; (800d994 <xTaskResumeAll+0x120>)
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	3318      	adds	r3, #24
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7fe fdda 	bl	800c488 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	3304      	adds	r3, #4
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7fe fdd5 	bl	800c488 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	409a      	lsls	r2, r3
 800d8e6:	4b2c      	ldr	r3, [pc, #176]	; (800d998 <xTaskResumeAll+0x124>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	4a2a      	ldr	r2, [pc, #168]	; (800d998 <xTaskResumeAll+0x124>)
 800d8ee:	6013      	str	r3, [r2, #0]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4413      	add	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	4a27      	ldr	r2, [pc, #156]	; (800d99c <xTaskResumeAll+0x128>)
 800d8fe:	441a      	add	r2, r3
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	3304      	adds	r3, #4
 800d904:	4619      	mov	r1, r3
 800d906:	4610      	mov	r0, r2
 800d908:	f7fe fd61 	bl	800c3ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d910:	4b23      	ldr	r3, [pc, #140]	; (800d9a0 <xTaskResumeAll+0x12c>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d916:	429a      	cmp	r2, r3
 800d918:	d302      	bcc.n	800d920 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d91a:	4b22      	ldr	r3, [pc, #136]	; (800d9a4 <xTaskResumeAll+0x130>)
 800d91c:	2201      	movs	r2, #1
 800d91e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d920:	4b1c      	ldr	r3, [pc, #112]	; (800d994 <xTaskResumeAll+0x120>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1cc      	bne.n	800d8c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d92e:	f000 fb63 	bl	800dff8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d932:	4b1d      	ldr	r3, [pc, #116]	; (800d9a8 <xTaskResumeAll+0x134>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d010      	beq.n	800d960 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d93e:	f000 f859 	bl	800d9f4 <xTaskIncrementTick>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d948:	4b16      	ldr	r3, [pc, #88]	; (800d9a4 <xTaskResumeAll+0x130>)
 800d94a:	2201      	movs	r2, #1
 800d94c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	3b01      	subs	r3, #1
 800d952:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1f1      	bne.n	800d93e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d95a:	4b13      	ldr	r3, [pc, #76]	; (800d9a8 <xTaskResumeAll+0x134>)
 800d95c:	2200      	movs	r2, #0
 800d95e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d960:	4b10      	ldr	r3, [pc, #64]	; (800d9a4 <xTaskResumeAll+0x130>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d009      	beq.n	800d97c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d968:	2301      	movs	r3, #1
 800d96a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d96c:	4b0f      	ldr	r3, [pc, #60]	; (800d9ac <xTaskResumeAll+0x138>)
 800d96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d972:	601a      	str	r2, [r3, #0]
 800d974:	f3bf 8f4f 	dsb	sy
 800d978:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d97c:	f000 fed6 	bl	800e72c <vPortExitCritical>

	return xAlreadyYielded;
 800d980:	68bb      	ldr	r3, [r7, #8]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	200004cc 	.word	0x200004cc
 800d990:	200004a4 	.word	0x200004a4
 800d994:	20000464 	.word	0x20000464
 800d998:	200004ac 	.word	0x200004ac
 800d99c:	200003a8 	.word	0x200003a8
 800d9a0:	200003a4 	.word	0x200003a4
 800d9a4:	200004b8 	.word	0x200004b8
 800d9a8:	200004b4 	.word	0x200004b4
 800d9ac:	e000ed04 	.word	0xe000ed04

0800d9b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d9b6:	4b05      	ldr	r3, [pc, #20]	; (800d9cc <xTaskGetTickCount+0x1c>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d9bc:	687b      	ldr	r3, [r7, #4]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	370c      	adds	r7, #12
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	200004a8 	.word	0x200004a8

0800d9d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9d6:	f000 ff57 	bl	800e888 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d9da:	2300      	movs	r3, #0
 800d9dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d9de:	4b04      	ldr	r3, [pc, #16]	; (800d9f0 <xTaskGetTickCountFromISR+0x20>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9e4:	683b      	ldr	r3, [r7, #0]
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3708      	adds	r7, #8
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	200004a8 	.word	0x200004a8

0800d9f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b086      	sub	sp, #24
 800d9f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9fe:	4b4f      	ldr	r3, [pc, #316]	; (800db3c <xTaskIncrementTick+0x148>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	f040 8089 	bne.w	800db1a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da08:	4b4d      	ldr	r3, [pc, #308]	; (800db40 <xTaskIncrementTick+0x14c>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3301      	adds	r3, #1
 800da0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da10:	4a4b      	ldr	r2, [pc, #300]	; (800db40 <xTaskIncrementTick+0x14c>)
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d121      	bne.n	800da60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800da1c:	4b49      	ldr	r3, [pc, #292]	; (800db44 <xTaskIncrementTick+0x150>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00b      	beq.n	800da3e <xTaskIncrementTick+0x4a>
 800da26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2a:	b672      	cpsid	i
 800da2c:	f383 8811 	msr	BASEPRI, r3
 800da30:	f3bf 8f6f 	isb	sy
 800da34:	f3bf 8f4f 	dsb	sy
 800da38:	b662      	cpsie	i
 800da3a:	603b      	str	r3, [r7, #0]
 800da3c:	e7fe      	b.n	800da3c <xTaskIncrementTick+0x48>
 800da3e:	4b41      	ldr	r3, [pc, #260]	; (800db44 <xTaskIncrementTick+0x150>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	4b40      	ldr	r3, [pc, #256]	; (800db48 <xTaskIncrementTick+0x154>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a3e      	ldr	r2, [pc, #248]	; (800db44 <xTaskIncrementTick+0x150>)
 800da4a:	6013      	str	r3, [r2, #0]
 800da4c:	4a3e      	ldr	r2, [pc, #248]	; (800db48 <xTaskIncrementTick+0x154>)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6013      	str	r3, [r2, #0]
 800da52:	4b3e      	ldr	r3, [pc, #248]	; (800db4c <xTaskIncrementTick+0x158>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	3301      	adds	r3, #1
 800da58:	4a3c      	ldr	r2, [pc, #240]	; (800db4c <xTaskIncrementTick+0x158>)
 800da5a:	6013      	str	r3, [r2, #0]
 800da5c:	f000 facc 	bl	800dff8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da60:	4b3b      	ldr	r3, [pc, #236]	; (800db50 <xTaskIncrementTick+0x15c>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	429a      	cmp	r2, r3
 800da68:	d348      	bcc.n	800dafc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da6a:	4b36      	ldr	r3, [pc, #216]	; (800db44 <xTaskIncrementTick+0x150>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d104      	bne.n	800da7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da74:	4b36      	ldr	r3, [pc, #216]	; (800db50 <xTaskIncrementTick+0x15c>)
 800da76:	f04f 32ff 	mov.w	r2, #4294967295
 800da7a:	601a      	str	r2, [r3, #0]
					break;
 800da7c:	e03e      	b.n	800dafc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da7e:	4b31      	ldr	r3, [pc, #196]	; (800db44 <xTaskIncrementTick+0x150>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800da8e:	693a      	ldr	r2, [r7, #16]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	429a      	cmp	r2, r3
 800da94:	d203      	bcs.n	800da9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800da96:	4a2e      	ldr	r2, [pc, #184]	; (800db50 <xTaskIncrementTick+0x15c>)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800da9c:	e02e      	b.n	800dafc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	3304      	adds	r3, #4
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fe fcf0 	bl	800c488 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daac:	2b00      	cmp	r3, #0
 800daae:	d004      	beq.n	800daba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	3318      	adds	r3, #24
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fe fce7 	bl	800c488 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dabe:	2201      	movs	r2, #1
 800dac0:	409a      	lsls	r2, r3
 800dac2:	4b24      	ldr	r3, [pc, #144]	; (800db54 <xTaskIncrementTick+0x160>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	4a22      	ldr	r2, [pc, #136]	; (800db54 <xTaskIncrementTick+0x160>)
 800daca:	6013      	str	r3, [r2, #0]
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad0:	4613      	mov	r3, r2
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	4413      	add	r3, r2
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	4a1f      	ldr	r2, [pc, #124]	; (800db58 <xTaskIncrementTick+0x164>)
 800dada:	441a      	add	r2, r3
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	3304      	adds	r3, #4
 800dae0:	4619      	mov	r1, r3
 800dae2:	4610      	mov	r0, r2
 800dae4:	f7fe fc73 	bl	800c3ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daec:	4b1b      	ldr	r3, [pc, #108]	; (800db5c <xTaskIncrementTick+0x168>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d3b9      	bcc.n	800da6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800daf6:	2301      	movs	r3, #1
 800daf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dafa:	e7b6      	b.n	800da6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dafc:	4b17      	ldr	r3, [pc, #92]	; (800db5c <xTaskIncrementTick+0x168>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db02:	4915      	ldr	r1, [pc, #84]	; (800db58 <xTaskIncrementTick+0x164>)
 800db04:	4613      	mov	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4413      	add	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	440b      	add	r3, r1
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b01      	cmp	r3, #1
 800db12:	d907      	bls.n	800db24 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800db14:	2301      	movs	r3, #1
 800db16:	617b      	str	r3, [r7, #20]
 800db18:	e004      	b.n	800db24 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800db1a:	4b11      	ldr	r3, [pc, #68]	; (800db60 <xTaskIncrementTick+0x16c>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	3301      	adds	r3, #1
 800db20:	4a0f      	ldr	r2, [pc, #60]	; (800db60 <xTaskIncrementTick+0x16c>)
 800db22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800db24:	4b0f      	ldr	r3, [pc, #60]	; (800db64 <xTaskIncrementTick+0x170>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d001      	beq.n	800db30 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800db2c:	2301      	movs	r3, #1
 800db2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800db30:	697b      	ldr	r3, [r7, #20]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3718      	adds	r7, #24
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	200004cc 	.word	0x200004cc
 800db40:	200004a8 	.word	0x200004a8
 800db44:	2000045c 	.word	0x2000045c
 800db48:	20000460 	.word	0x20000460
 800db4c:	200004bc 	.word	0x200004bc
 800db50:	200004c4 	.word	0x200004c4
 800db54:	200004ac 	.word	0x200004ac
 800db58:	200003a8 	.word	0x200003a8
 800db5c:	200003a4 	.word	0x200003a4
 800db60:	200004b4 	.word	0x200004b4
 800db64:	200004b8 	.word	0x200004b8

0800db68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db6e:	4b3a      	ldr	r3, [pc, #232]	; (800dc58 <vTaskSwitchContext+0xf0>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d003      	beq.n	800db7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db76:	4b39      	ldr	r3, [pc, #228]	; (800dc5c <vTaskSwitchContext+0xf4>)
 800db78:	2201      	movs	r2, #1
 800db7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800db7c:	e067      	b.n	800dc4e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800db7e:	4b37      	ldr	r3, [pc, #220]	; (800dc5c <vTaskSwitchContext+0xf4>)
 800db80:	2200      	movs	r2, #0
 800db82:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800db84:	4b36      	ldr	r3, [pc, #216]	; (800dc60 <vTaskSwitchContext+0xf8>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db8a:	61fb      	str	r3, [r7, #28]
 800db8c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800db90:	61bb      	str	r3, [r7, #24]
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	69ba      	ldr	r2, [r7, #24]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d111      	bne.n	800dbc0 <vTaskSwitchContext+0x58>
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	3304      	adds	r3, #4
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	69ba      	ldr	r2, [r7, #24]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d10b      	bne.n	800dbc0 <vTaskSwitchContext+0x58>
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	3308      	adds	r3, #8
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	69ba      	ldr	r2, [r7, #24]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d105      	bne.n	800dbc0 <vTaskSwitchContext+0x58>
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	330c      	adds	r3, #12
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	69ba      	ldr	r2, [r7, #24]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d008      	beq.n	800dbd2 <vTaskSwitchContext+0x6a>
 800dbc0:	4b27      	ldr	r3, [pc, #156]	; (800dc60 <vTaskSwitchContext+0xf8>)
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	4b26      	ldr	r3, [pc, #152]	; (800dc60 <vTaskSwitchContext+0xf8>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	3334      	adds	r3, #52	; 0x34
 800dbca:	4619      	mov	r1, r3
 800dbcc:	4610      	mov	r0, r2
 800dbce:	f7f2 fed2 	bl	8000976 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbd2:	4b24      	ldr	r3, [pc, #144]	; (800dc64 <vTaskSwitchContext+0xfc>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	fab3 f383 	clz	r3, r3
 800dbde:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dbe0:	7afb      	ldrb	r3, [r7, #11]
 800dbe2:	f1c3 031f 	rsb	r3, r3, #31
 800dbe6:	617b      	str	r3, [r7, #20]
 800dbe8:	491f      	ldr	r1, [pc, #124]	; (800dc68 <vTaskSwitchContext+0x100>)
 800dbea:	697a      	ldr	r2, [r7, #20]
 800dbec:	4613      	mov	r3, r2
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	440b      	add	r3, r1
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10b      	bne.n	800dc14 <vTaskSwitchContext+0xac>
	__asm volatile
 800dbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc00:	b672      	cpsid	i
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	b662      	cpsie	i
 800dc10:	607b      	str	r3, [r7, #4]
 800dc12:	e7fe      	b.n	800dc12 <vTaskSwitchContext+0xaa>
 800dc14:	697a      	ldr	r2, [r7, #20]
 800dc16:	4613      	mov	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4413      	add	r3, r2
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	4a12      	ldr	r2, [pc, #72]	; (800dc68 <vTaskSwitchContext+0x100>)
 800dc20:	4413      	add	r3, r2
 800dc22:	613b      	str	r3, [r7, #16]
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	685a      	ldr	r2, [r3, #4]
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	605a      	str	r2, [r3, #4]
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	685a      	ldr	r2, [r3, #4]
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	3308      	adds	r3, #8
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d104      	bne.n	800dc44 <vTaskSwitchContext+0xdc>
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	685a      	ldr	r2, [r3, #4]
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	605a      	str	r2, [r3, #4]
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	4a05      	ldr	r2, [pc, #20]	; (800dc60 <vTaskSwitchContext+0xf8>)
 800dc4c:	6013      	str	r3, [r2, #0]
}
 800dc4e:	bf00      	nop
 800dc50:	3720      	adds	r7, #32
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	200004cc 	.word	0x200004cc
 800dc5c:	200004b8 	.word	0x200004b8
 800dc60:	200003a4 	.word	0x200003a4
 800dc64:	200004ac 	.word	0x200004ac
 800dc68:	200003a8 	.word	0x200003a8

0800dc6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10b      	bne.n	800dc94 <vTaskPlaceOnEventList+0x28>
 800dc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc80:	b672      	cpsid	i
 800dc82:	f383 8811 	msr	BASEPRI, r3
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	b662      	cpsie	i
 800dc90:	60fb      	str	r3, [r7, #12]
 800dc92:	e7fe      	b.n	800dc92 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc94:	4b07      	ldr	r3, [pc, #28]	; (800dcb4 <vTaskPlaceOnEventList+0x48>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3318      	adds	r3, #24
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f7fe fbba 	bl	800c416 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dca2:	2101      	movs	r1, #1
 800dca4:	6838      	ldr	r0, [r7, #0]
 800dca6:	f000 fb9d 	bl	800e3e4 <prvAddCurrentTaskToDelayedList>
}
 800dcaa:	bf00      	nop
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	200003a4 	.word	0x200003a4

0800dcb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d10b      	bne.n	800dce6 <xTaskRemoveFromEventList+0x2e>
 800dcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd2:	b672      	cpsid	i
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	b662      	cpsie	i
 800dce2:	60fb      	str	r3, [r7, #12]
 800dce4:	e7fe      	b.n	800dce4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	3318      	adds	r3, #24
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fe fbcc 	bl	800c488 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcf0:	4b1d      	ldr	r3, [pc, #116]	; (800dd68 <xTaskRemoveFromEventList+0xb0>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d11c      	bne.n	800dd32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	3304      	adds	r3, #4
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7fe fbc3 	bl	800c488 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd06:	2201      	movs	r2, #1
 800dd08:	409a      	lsls	r2, r3
 800dd0a:	4b18      	ldr	r3, [pc, #96]	; (800dd6c <xTaskRemoveFromEventList+0xb4>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	4a16      	ldr	r2, [pc, #88]	; (800dd6c <xTaskRemoveFromEventList+0xb4>)
 800dd12:	6013      	str	r3, [r2, #0]
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd18:	4613      	mov	r3, r2
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4413      	add	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	4a13      	ldr	r2, [pc, #76]	; (800dd70 <xTaskRemoveFromEventList+0xb8>)
 800dd22:	441a      	add	r2, r3
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	3304      	adds	r3, #4
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	f7fe fb4f 	bl	800c3ce <vListInsertEnd>
 800dd30:	e005      	b.n	800dd3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	3318      	adds	r3, #24
 800dd36:	4619      	mov	r1, r3
 800dd38:	480e      	ldr	r0, [pc, #56]	; (800dd74 <xTaskRemoveFromEventList+0xbc>)
 800dd3a:	f7fe fb48 	bl	800c3ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd42:	4b0d      	ldr	r3, [pc, #52]	; (800dd78 <xTaskRemoveFromEventList+0xc0>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d905      	bls.n	800dd58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dd50:	4b0a      	ldr	r3, [pc, #40]	; (800dd7c <xTaskRemoveFromEventList+0xc4>)
 800dd52:	2201      	movs	r2, #1
 800dd54:	601a      	str	r2, [r3, #0]
 800dd56:	e001      	b.n	800dd5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dd5c:	697b      	ldr	r3, [r7, #20]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3718      	adds	r7, #24
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	200004cc 	.word	0x200004cc
 800dd6c:	200004ac 	.word	0x200004ac
 800dd70:	200003a8 	.word	0x200003a8
 800dd74:	20000464 	.word	0x20000464
 800dd78:	200003a4 	.word	0x200003a4
 800dd7c:	200004b8 	.word	0x200004b8

0800dd80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd88:	4b06      	ldr	r3, [pc, #24]	; (800dda4 <vTaskInternalSetTimeOutState+0x24>)
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd90:	4b05      	ldr	r3, [pc, #20]	; (800dda8 <vTaskInternalSetTimeOutState+0x28>)
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	605a      	str	r2, [r3, #4]
}
 800dd98:	bf00      	nop
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr
 800dda4:	200004bc 	.word	0x200004bc
 800dda8:	200004a8 	.word	0x200004a8

0800ddac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b088      	sub	sp, #32
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10b      	bne.n	800ddd4 <xTaskCheckForTimeOut+0x28>
 800ddbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc0:	b672      	cpsid	i
 800ddc2:	f383 8811 	msr	BASEPRI, r3
 800ddc6:	f3bf 8f6f 	isb	sy
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	b662      	cpsie	i
 800ddd0:	613b      	str	r3, [r7, #16]
 800ddd2:	e7fe      	b.n	800ddd2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10b      	bne.n	800ddf2 <xTaskCheckForTimeOut+0x46>
 800ddda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddde:	b672      	cpsid	i
 800dde0:	f383 8811 	msr	BASEPRI, r3
 800dde4:	f3bf 8f6f 	isb	sy
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	b662      	cpsie	i
 800ddee:	60fb      	str	r3, [r7, #12]
 800ddf0:	e7fe      	b.n	800ddf0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800ddf2:	f000 fc69 	bl	800e6c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ddf6:	4b1d      	ldr	r3, [pc, #116]	; (800de6c <xTaskCheckForTimeOut+0xc0>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	69ba      	ldr	r2, [r7, #24]
 800de02:	1ad3      	subs	r3, r2, r3
 800de04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de0e:	d102      	bne.n	800de16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800de10:	2300      	movs	r3, #0
 800de12:	61fb      	str	r3, [r7, #28]
 800de14:	e023      	b.n	800de5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	4b15      	ldr	r3, [pc, #84]	; (800de70 <xTaskCheckForTimeOut+0xc4>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d007      	beq.n	800de32 <xTaskCheckForTimeOut+0x86>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	69ba      	ldr	r2, [r7, #24]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d302      	bcc.n	800de32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800de2c:	2301      	movs	r3, #1
 800de2e:	61fb      	str	r3, [r7, #28]
 800de30:	e015      	b.n	800de5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	697a      	ldr	r2, [r7, #20]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d20b      	bcs.n	800de54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	1ad2      	subs	r2, r2, r3
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff ff99 	bl	800dd80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de4e:	2300      	movs	r3, #0
 800de50:	61fb      	str	r3, [r7, #28]
 800de52:	e004      	b.n	800de5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	2200      	movs	r2, #0
 800de58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de5a:	2301      	movs	r3, #1
 800de5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800de5e:	f000 fc65 	bl	800e72c <vPortExitCritical>

	return xReturn;
 800de62:	69fb      	ldr	r3, [r7, #28]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3720      	adds	r7, #32
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	200004a8 	.word	0x200004a8
 800de70:	200004bc 	.word	0x200004bc

0800de74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de74:	b480      	push	{r7}
 800de76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800de78:	4b03      	ldr	r3, [pc, #12]	; (800de88 <vTaskMissedYield+0x14>)
 800de7a:	2201      	movs	r2, #1
 800de7c:	601a      	str	r2, [r3, #0]
}
 800de7e:	bf00      	nop
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr
 800de88:	200004b8 	.word	0x200004b8

0800de8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de94:	f000 f854 	bl	800df40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de98:	4b07      	ldr	r3, [pc, #28]	; (800deb8 <prvIdleTask+0x2c>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d907      	bls.n	800deb0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800dea0:	4b06      	ldr	r3, [pc, #24]	; (800debc <prvIdleTask+0x30>)
 800dea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dea6:	601a      	str	r2, [r3, #0]
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800deb0:	f7f2 fd5a 	bl	8000968 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800deb4:	e7ee      	b.n	800de94 <prvIdleTask+0x8>
 800deb6:	bf00      	nop
 800deb8:	200003a8 	.word	0x200003a8
 800debc:	e000ed04 	.word	0xe000ed04

0800dec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dec6:	2300      	movs	r3, #0
 800dec8:	607b      	str	r3, [r7, #4]
 800deca:	e00c      	b.n	800dee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	4613      	mov	r3, r2
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	4a12      	ldr	r2, [pc, #72]	; (800df20 <prvInitialiseTaskLists+0x60>)
 800ded8:	4413      	add	r3, r2
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fe fa4a 	bl	800c374 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	3301      	adds	r3, #1
 800dee4:	607b      	str	r3, [r7, #4]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2b06      	cmp	r3, #6
 800deea:	d9ef      	bls.n	800decc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800deec:	480d      	ldr	r0, [pc, #52]	; (800df24 <prvInitialiseTaskLists+0x64>)
 800deee:	f7fe fa41 	bl	800c374 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800def2:	480d      	ldr	r0, [pc, #52]	; (800df28 <prvInitialiseTaskLists+0x68>)
 800def4:	f7fe fa3e 	bl	800c374 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800def8:	480c      	ldr	r0, [pc, #48]	; (800df2c <prvInitialiseTaskLists+0x6c>)
 800defa:	f7fe fa3b 	bl	800c374 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800defe:	480c      	ldr	r0, [pc, #48]	; (800df30 <prvInitialiseTaskLists+0x70>)
 800df00:	f7fe fa38 	bl	800c374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df04:	480b      	ldr	r0, [pc, #44]	; (800df34 <prvInitialiseTaskLists+0x74>)
 800df06:	f7fe fa35 	bl	800c374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df0a:	4b0b      	ldr	r3, [pc, #44]	; (800df38 <prvInitialiseTaskLists+0x78>)
 800df0c:	4a05      	ldr	r2, [pc, #20]	; (800df24 <prvInitialiseTaskLists+0x64>)
 800df0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df10:	4b0a      	ldr	r3, [pc, #40]	; (800df3c <prvInitialiseTaskLists+0x7c>)
 800df12:	4a05      	ldr	r2, [pc, #20]	; (800df28 <prvInitialiseTaskLists+0x68>)
 800df14:	601a      	str	r2, [r3, #0]
}
 800df16:	bf00      	nop
 800df18:	3708      	adds	r7, #8
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	200003a8 	.word	0x200003a8
 800df24:	20000434 	.word	0x20000434
 800df28:	20000448 	.word	0x20000448
 800df2c:	20000464 	.word	0x20000464
 800df30:	20000478 	.word	0x20000478
 800df34:	20000490 	.word	0x20000490
 800df38:	2000045c 	.word	0x2000045c
 800df3c:	20000460 	.word	0x20000460

0800df40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df46:	e019      	b.n	800df7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df48:	f000 fbbe 	bl	800e6c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df4c:	4b0f      	ldr	r3, [pc, #60]	; (800df8c <prvCheckTasksWaitingTermination+0x4c>)
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	3304      	adds	r3, #4
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fe fa95 	bl	800c488 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df5e:	4b0c      	ldr	r3, [pc, #48]	; (800df90 <prvCheckTasksWaitingTermination+0x50>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	3b01      	subs	r3, #1
 800df64:	4a0a      	ldr	r2, [pc, #40]	; (800df90 <prvCheckTasksWaitingTermination+0x50>)
 800df66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df68:	4b0a      	ldr	r3, [pc, #40]	; (800df94 <prvCheckTasksWaitingTermination+0x54>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	3b01      	subs	r3, #1
 800df6e:	4a09      	ldr	r2, [pc, #36]	; (800df94 <prvCheckTasksWaitingTermination+0x54>)
 800df70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df72:	f000 fbdb 	bl	800e72c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 f80e 	bl	800df98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df7c:	4b05      	ldr	r3, [pc, #20]	; (800df94 <prvCheckTasksWaitingTermination+0x54>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1e1      	bne.n	800df48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df84:	bf00      	nop
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	20000478 	.word	0x20000478
 800df90:	200004a4 	.word	0x200004a4
 800df94:	2000048c 	.word	0x2000048c

0800df98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d108      	bne.n	800dfbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f000 fd78 	bl	800eaa4 <vPortFree>
				vPortFree( pxTCB );
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 fd75 	bl	800eaa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dfba:	e019      	b.n	800dff0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d103      	bne.n	800dfce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 fd6c 	bl	800eaa4 <vPortFree>
	}
 800dfcc:	e010      	b.n	800dff0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	d00b      	beq.n	800dff0 <prvDeleteTCB+0x58>
 800dfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfdc:	b672      	cpsid	i
 800dfde:	f383 8811 	msr	BASEPRI, r3
 800dfe2:	f3bf 8f6f 	isb	sy
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	b662      	cpsie	i
 800dfec:	60fb      	str	r3, [r7, #12]
 800dfee:	e7fe      	b.n	800dfee <prvDeleteTCB+0x56>
	}
 800dff0:	bf00      	nop
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dffe:	4b0c      	ldr	r3, [pc, #48]	; (800e030 <prvResetNextTaskUnblockTime+0x38>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d104      	bne.n	800e012 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e008:	4b0a      	ldr	r3, [pc, #40]	; (800e034 <prvResetNextTaskUnblockTime+0x3c>)
 800e00a:	f04f 32ff 	mov.w	r2, #4294967295
 800e00e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e010:	e008      	b.n	800e024 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e012:	4b07      	ldr	r3, [pc, #28]	; (800e030 <prvResetNextTaskUnblockTime+0x38>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	4a04      	ldr	r2, [pc, #16]	; (800e034 <prvResetNextTaskUnblockTime+0x3c>)
 800e022:	6013      	str	r3, [r2, #0]
}
 800e024:	bf00      	nop
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr
 800e030:	2000045c 	.word	0x2000045c
 800e034:	200004c4 	.word	0x200004c4

0800e038 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e03e:	4b0b      	ldr	r3, [pc, #44]	; (800e06c <xTaskGetSchedulerState+0x34>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d102      	bne.n	800e04c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e046:	2301      	movs	r3, #1
 800e048:	607b      	str	r3, [r7, #4]
 800e04a:	e008      	b.n	800e05e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e04c:	4b08      	ldr	r3, [pc, #32]	; (800e070 <xTaskGetSchedulerState+0x38>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d102      	bne.n	800e05a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e054:	2302      	movs	r3, #2
 800e056:	607b      	str	r3, [r7, #4]
 800e058:	e001      	b.n	800e05e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e05a:	2300      	movs	r3, #0
 800e05c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e05e:	687b      	ldr	r3, [r7, #4]
	}
 800e060:	4618      	mov	r0, r3
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr
 800e06c:	200004b0 	.word	0x200004b0
 800e070:	200004cc 	.word	0x200004cc

0800e074 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e080:	2300      	movs	r3, #0
 800e082:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d069      	beq.n	800e15e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e08e:	4b36      	ldr	r3, [pc, #216]	; (800e168 <xTaskPriorityInherit+0xf4>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e094:	429a      	cmp	r2, r3
 800e096:	d259      	bcs.n	800e14c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	699b      	ldr	r3, [r3, #24]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	db06      	blt.n	800e0ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0a0:	4b31      	ldr	r3, [pc, #196]	; (800e168 <xTaskPriorityInherit+0xf4>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a6:	f1c3 0207 	rsb	r2, r3, #7
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	6959      	ldr	r1, [r3, #20]
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	4413      	add	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4a2b      	ldr	r2, [pc, #172]	; (800e16c <xTaskPriorityInherit+0xf8>)
 800e0c0:	4413      	add	r3, r2
 800e0c2:	4299      	cmp	r1, r3
 800e0c4:	d13a      	bne.n	800e13c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7fe f9dc 	bl	800c488 <uxListRemove>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d115      	bne.n	800e102 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0da:	4924      	ldr	r1, [pc, #144]	; (800e16c <xTaskPriorityInherit+0xf8>)
 800e0dc:	4613      	mov	r3, r2
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	440b      	add	r3, r1
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d10a      	bne.n	800e102 <xTaskPriorityInherit+0x8e>
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e0f6:	43da      	mvns	r2, r3
 800e0f8:	4b1d      	ldr	r3, [pc, #116]	; (800e170 <xTaskPriorityInherit+0xfc>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4013      	ands	r3, r2
 800e0fe:	4a1c      	ldr	r2, [pc, #112]	; (800e170 <xTaskPriorityInherit+0xfc>)
 800e100:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e102:	4b19      	ldr	r3, [pc, #100]	; (800e168 <xTaskPriorityInherit+0xf4>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e110:	2201      	movs	r2, #1
 800e112:	409a      	lsls	r2, r3
 800e114:	4b16      	ldr	r3, [pc, #88]	; (800e170 <xTaskPriorityInherit+0xfc>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4313      	orrs	r3, r2
 800e11a:	4a15      	ldr	r2, [pc, #84]	; (800e170 <xTaskPriorityInherit+0xfc>)
 800e11c:	6013      	str	r3, [r2, #0]
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e122:	4613      	mov	r3, r2
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	4413      	add	r3, r2
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	4a10      	ldr	r2, [pc, #64]	; (800e16c <xTaskPriorityInherit+0xf8>)
 800e12c:	441a      	add	r2, r3
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	3304      	adds	r3, #4
 800e132:	4619      	mov	r1, r3
 800e134:	4610      	mov	r0, r2
 800e136:	f7fe f94a 	bl	800c3ce <vListInsertEnd>
 800e13a:	e004      	b.n	800e146 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e13c:	4b0a      	ldr	r3, [pc, #40]	; (800e168 <xTaskPriorityInherit+0xf4>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e146:	2301      	movs	r3, #1
 800e148:	60fb      	str	r3, [r7, #12]
 800e14a:	e008      	b.n	800e15e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e150:	4b05      	ldr	r3, [pc, #20]	; (800e168 <xTaskPriorityInherit+0xf4>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e156:	429a      	cmp	r2, r3
 800e158:	d201      	bcs.n	800e15e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e15a:	2301      	movs	r3, #1
 800e15c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e15e:	68fb      	ldr	r3, [r7, #12]
	}
 800e160:	4618      	mov	r0, r3
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	200003a4 	.word	0x200003a4
 800e16c:	200003a8 	.word	0x200003a8
 800e170:	200004ac 	.word	0x200004ac

0800e174 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e174:	b580      	push	{r7, lr}
 800e176:	b086      	sub	sp, #24
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e180:	2300      	movs	r3, #0
 800e182:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d070      	beq.n	800e26c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e18a:	4b3b      	ldr	r3, [pc, #236]	; (800e278 <xTaskPriorityDisinherit+0x104>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	693a      	ldr	r2, [r7, #16]
 800e190:	429a      	cmp	r2, r3
 800e192:	d00b      	beq.n	800e1ac <xTaskPriorityDisinherit+0x38>
 800e194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e198:	b672      	cpsid	i
 800e19a:	f383 8811 	msr	BASEPRI, r3
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	b662      	cpsie	i
 800e1a8:	60fb      	str	r3, [r7, #12]
 800e1aa:	e7fe      	b.n	800e1aa <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d10b      	bne.n	800e1cc <xTaskPriorityDisinherit+0x58>
 800e1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b8:	b672      	cpsid	i
 800e1ba:	f383 8811 	msr	BASEPRI, r3
 800e1be:	f3bf 8f6f 	isb	sy
 800e1c2:	f3bf 8f4f 	dsb	sy
 800e1c6:	b662      	cpsie	i
 800e1c8:	60bb      	str	r3, [r7, #8]
 800e1ca:	e7fe      	b.n	800e1ca <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1d0:	1e5a      	subs	r2, r3, #1
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d044      	beq.n	800e26c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d140      	bne.n	800e26c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fe f94a 	bl	800c488 <uxListRemove>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d115      	bne.n	800e226 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1fe:	491f      	ldr	r1, [pc, #124]	; (800e27c <xTaskPriorityDisinherit+0x108>)
 800e200:	4613      	mov	r3, r2
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	4413      	add	r3, r2
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	440b      	add	r3, r1
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10a      	bne.n	800e226 <xTaskPriorityDisinherit+0xb2>
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e214:	2201      	movs	r2, #1
 800e216:	fa02 f303 	lsl.w	r3, r2, r3
 800e21a:	43da      	mvns	r2, r3
 800e21c:	4b18      	ldr	r3, [pc, #96]	; (800e280 <xTaskPriorityDisinherit+0x10c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4013      	ands	r3, r2
 800e222:	4a17      	ldr	r2, [pc, #92]	; (800e280 <xTaskPriorityDisinherit+0x10c>)
 800e224:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e232:	f1c3 0207 	rsb	r2, r3, #7
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23e:	2201      	movs	r2, #1
 800e240:	409a      	lsls	r2, r3
 800e242:	4b0f      	ldr	r3, [pc, #60]	; (800e280 <xTaskPriorityDisinherit+0x10c>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4313      	orrs	r3, r2
 800e248:	4a0d      	ldr	r2, [pc, #52]	; (800e280 <xTaskPriorityDisinherit+0x10c>)
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e250:	4613      	mov	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4413      	add	r3, r2
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4a08      	ldr	r2, [pc, #32]	; (800e27c <xTaskPriorityDisinherit+0x108>)
 800e25a:	441a      	add	r2, r3
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	3304      	adds	r3, #4
 800e260:	4619      	mov	r1, r3
 800e262:	4610      	mov	r0, r2
 800e264:	f7fe f8b3 	bl	800c3ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e268:	2301      	movs	r3, #1
 800e26a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e26c:	697b      	ldr	r3, [r7, #20]
	}
 800e26e:	4618      	mov	r0, r3
 800e270:	3718      	adds	r7, #24
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	200003a4 	.word	0x200003a4
 800e27c:	200003a8 	.word	0x200003a8
 800e280:	200004ac 	.word	0x200004ac

0800e284 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e284:	b580      	push	{r7, lr}
 800e286:	b088      	sub	sp, #32
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e292:	2301      	movs	r3, #1
 800e294:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	f000 8085 	beq.w	800e3a8 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e29e:	69bb      	ldr	r3, [r7, #24]
 800e2a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d10b      	bne.n	800e2be <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2aa:	b672      	cpsid	i
 800e2ac:	f383 8811 	msr	BASEPRI, r3
 800e2b0:	f3bf 8f6f 	isb	sy
 800e2b4:	f3bf 8f4f 	dsb	sy
 800e2b8:	b662      	cpsie	i
 800e2ba:	60fb      	str	r3, [r7, #12]
 800e2bc:	e7fe      	b.n	800e2bc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e2be:	69bb      	ldr	r3, [r7, #24]
 800e2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2c2:	683a      	ldr	r2, [r7, #0]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d902      	bls.n	800e2ce <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	61fb      	str	r3, [r7, #28]
 800e2cc:	e002      	b.n	800e2d4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d8:	69fa      	ldr	r2, [r7, #28]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d064      	beq.n	800e3a8 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e2de:	69bb      	ldr	r3, [r7, #24]
 800e2e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2e2:	697a      	ldr	r2, [r7, #20]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d15f      	bne.n	800e3a8 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e2e8:	4b31      	ldr	r3, [pc, #196]	; (800e3b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	69ba      	ldr	r2, [r7, #24]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d10b      	bne.n	800e30a <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f6:	b672      	cpsid	i
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	b662      	cpsie	i
 800e306:	60bb      	str	r3, [r7, #8]
 800e308:	e7fe      	b.n	800e308 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e310:	69bb      	ldr	r3, [r7, #24]
 800e312:	69fa      	ldr	r2, [r7, #28]
 800e314:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	699b      	ldr	r3, [r3, #24]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	db04      	blt.n	800e328 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e31e:	69fb      	ldr	r3, [r7, #28]
 800e320:	f1c3 0207 	rsb	r2, r3, #7
 800e324:	69bb      	ldr	r3, [r7, #24]
 800e326:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	6959      	ldr	r1, [r3, #20]
 800e32c:	693a      	ldr	r2, [r7, #16]
 800e32e:	4613      	mov	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	4413      	add	r3, r2
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4a1f      	ldr	r2, [pc, #124]	; (800e3b4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e338:	4413      	add	r3, r2
 800e33a:	4299      	cmp	r1, r3
 800e33c:	d134      	bne.n	800e3a8 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e33e:	69bb      	ldr	r3, [r7, #24]
 800e340:	3304      	adds	r3, #4
 800e342:	4618      	mov	r0, r3
 800e344:	f7fe f8a0 	bl	800c488 <uxListRemove>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d115      	bne.n	800e37a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e352:	4918      	ldr	r1, [pc, #96]	; (800e3b4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e354:	4613      	mov	r3, r2
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	4413      	add	r3, r2
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	440b      	add	r3, r1
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10a      	bne.n	800e37a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e368:	2201      	movs	r2, #1
 800e36a:	fa02 f303 	lsl.w	r3, r2, r3
 800e36e:	43da      	mvns	r2, r3
 800e370:	4b11      	ldr	r3, [pc, #68]	; (800e3b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4013      	ands	r3, r2
 800e376:	4a10      	ldr	r2, [pc, #64]	; (800e3b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e378:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e37e:	2201      	movs	r2, #1
 800e380:	409a      	lsls	r2, r3
 800e382:	4b0d      	ldr	r3, [pc, #52]	; (800e3b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4313      	orrs	r3, r2
 800e388:	4a0b      	ldr	r2, [pc, #44]	; (800e3b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e38a:	6013      	str	r3, [r2, #0]
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e390:	4613      	mov	r3, r2
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4a06      	ldr	r2, [pc, #24]	; (800e3b4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e39a:	441a      	add	r2, r3
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	3304      	adds	r3, #4
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	4610      	mov	r0, r2
 800e3a4:	f7fe f813 	bl	800c3ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3a8:	bf00      	nop
 800e3aa:	3720      	adds	r7, #32
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	200003a4 	.word	0x200003a4
 800e3b4:	200003a8 	.word	0x200003a8
 800e3b8:	200004ac 	.word	0x200004ac

0800e3bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e3bc:	b480      	push	{r7}
 800e3be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e3c0:	4b07      	ldr	r3, [pc, #28]	; (800e3e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d004      	beq.n	800e3d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e3c8:	4b05      	ldr	r3, [pc, #20]	; (800e3e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3ce:	3201      	adds	r2, #1
 800e3d0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e3d2:	4b03      	ldr	r3, [pc, #12]	; (800e3e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
	}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr
 800e3e0:	200003a4 	.word	0x200003a4

0800e3e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e3ee:	4b29      	ldr	r3, [pc, #164]	; (800e494 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3f4:	4b28      	ldr	r3, [pc, #160]	; (800e498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe f844 	bl	800c488 <uxListRemove>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d10b      	bne.n	800e41e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e406:	4b24      	ldr	r3, [pc, #144]	; (800e498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e40c:	2201      	movs	r2, #1
 800e40e:	fa02 f303 	lsl.w	r3, r2, r3
 800e412:	43da      	mvns	r2, r3
 800e414:	4b21      	ldr	r3, [pc, #132]	; (800e49c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4013      	ands	r3, r2
 800e41a:	4a20      	ldr	r2, [pc, #128]	; (800e49c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e41c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e424:	d10a      	bne.n	800e43c <prvAddCurrentTaskToDelayedList+0x58>
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d007      	beq.n	800e43c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e42c:	4b1a      	ldr	r3, [pc, #104]	; (800e498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	3304      	adds	r3, #4
 800e432:	4619      	mov	r1, r3
 800e434:	481a      	ldr	r0, [pc, #104]	; (800e4a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e436:	f7fd ffca 	bl	800c3ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e43a:	e026      	b.n	800e48a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	4413      	add	r3, r2
 800e442:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e444:	4b14      	ldr	r3, [pc, #80]	; (800e498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	68ba      	ldr	r2, [r7, #8]
 800e44a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e44c:	68ba      	ldr	r2, [r7, #8]
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	429a      	cmp	r2, r3
 800e452:	d209      	bcs.n	800e468 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e454:	4b13      	ldr	r3, [pc, #76]	; (800e4a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	4b0f      	ldr	r3, [pc, #60]	; (800e498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	3304      	adds	r3, #4
 800e45e:	4619      	mov	r1, r3
 800e460:	4610      	mov	r0, r2
 800e462:	f7fd ffd8 	bl	800c416 <vListInsert>
}
 800e466:	e010      	b.n	800e48a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e468:	4b0f      	ldr	r3, [pc, #60]	; (800e4a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	4b0a      	ldr	r3, [pc, #40]	; (800e498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	3304      	adds	r3, #4
 800e472:	4619      	mov	r1, r3
 800e474:	4610      	mov	r0, r2
 800e476:	f7fd ffce 	bl	800c416 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e47a:	4b0c      	ldr	r3, [pc, #48]	; (800e4ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	429a      	cmp	r2, r3
 800e482:	d202      	bcs.n	800e48a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e484:	4a09      	ldr	r2, [pc, #36]	; (800e4ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	6013      	str	r3, [r2, #0]
}
 800e48a:	bf00      	nop
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	200004a8 	.word	0x200004a8
 800e498:	200003a4 	.word	0x200003a4
 800e49c:	200004ac 	.word	0x200004ac
 800e4a0:	20000490 	.word	0x20000490
 800e4a4:	20000460 	.word	0x20000460
 800e4a8:	2000045c 	.word	0x2000045c
 800e4ac:	200004c4 	.word	0x200004c4

0800e4b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b085      	sub	sp, #20
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	3b04      	subs	r3, #4
 800e4c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3b04      	subs	r3, #4
 800e4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	f023 0201 	bic.w	r2, r3, #1
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	3b04      	subs	r3, #4
 800e4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4e0:	4a0c      	ldr	r2, [pc, #48]	; (800e514 <pxPortInitialiseStack+0x64>)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3b14      	subs	r3, #20
 800e4ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	3b04      	subs	r3, #4
 800e4f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f06f 0202 	mvn.w	r2, #2
 800e4fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	3b20      	subs	r3, #32
 800e504:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e506:	68fb      	ldr	r3, [r7, #12]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3714      	adds	r7, #20
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr
 800e514:	0800e519 	.word	0x0800e519

0800e518 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e518:	b480      	push	{r7}
 800e51a:	b085      	sub	sp, #20
 800e51c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e51e:	2300      	movs	r3, #0
 800e520:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e522:	4b13      	ldr	r3, [pc, #76]	; (800e570 <prvTaskExitError+0x58>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52a:	d00b      	beq.n	800e544 <prvTaskExitError+0x2c>
 800e52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e530:	b672      	cpsid	i
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	b662      	cpsie	i
 800e540:	60fb      	str	r3, [r7, #12]
 800e542:	e7fe      	b.n	800e542 <prvTaskExitError+0x2a>
 800e544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e548:	b672      	cpsid	i
 800e54a:	f383 8811 	msr	BASEPRI, r3
 800e54e:	f3bf 8f6f 	isb	sy
 800e552:	f3bf 8f4f 	dsb	sy
 800e556:	b662      	cpsie	i
 800e558:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e55a:	bf00      	nop
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d0fc      	beq.n	800e55c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e562:	bf00      	nop
 800e564:	3714      	adds	r7, #20
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop
 800e570:	20000038 	.word	0x20000038
	...

0800e580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e580:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <pxCurrentTCBConst2>)
 800e582:	6819      	ldr	r1, [r3, #0]
 800e584:	6808      	ldr	r0, [r1, #0]
 800e586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e58a:	f380 8809 	msr	PSP, r0
 800e58e:	f3bf 8f6f 	isb	sy
 800e592:	f04f 0000 	mov.w	r0, #0
 800e596:	f380 8811 	msr	BASEPRI, r0
 800e59a:	4770      	bx	lr
 800e59c:	f3af 8000 	nop.w

0800e5a0 <pxCurrentTCBConst2>:
 800e5a0:	200003a4 	.word	0x200003a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5a4:	bf00      	nop
 800e5a6:	bf00      	nop

0800e5a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5a8:	4808      	ldr	r0, [pc, #32]	; (800e5cc <prvPortStartFirstTask+0x24>)
 800e5aa:	6800      	ldr	r0, [r0, #0]
 800e5ac:	6800      	ldr	r0, [r0, #0]
 800e5ae:	f380 8808 	msr	MSP, r0
 800e5b2:	f04f 0000 	mov.w	r0, #0
 800e5b6:	f380 8814 	msr	CONTROL, r0
 800e5ba:	b662      	cpsie	i
 800e5bc:	b661      	cpsie	f
 800e5be:	f3bf 8f4f 	dsb	sy
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	df00      	svc	0
 800e5c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e5ca:	bf00      	nop
 800e5cc:	e000ed08 	.word	0xe000ed08

0800e5d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e5d6:	4b36      	ldr	r3, [pc, #216]	; (800e6b0 <xPortStartScheduler+0xe0>)
 800e5d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	22ff      	movs	r2, #255	; 0xff
 800e5e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e5f0:	78fb      	ldrb	r3, [r7, #3]
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	4b2e      	ldr	r3, [pc, #184]	; (800e6b4 <xPortStartScheduler+0xe4>)
 800e5fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e5fe:	4b2e      	ldr	r3, [pc, #184]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e600:	2207      	movs	r2, #7
 800e602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e604:	e009      	b.n	800e61a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e606:	4b2c      	ldr	r3, [pc, #176]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	3b01      	subs	r3, #1
 800e60c:	4a2a      	ldr	r2, [pc, #168]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e60e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e610:	78fb      	ldrb	r3, [r7, #3]
 800e612:	b2db      	uxtb	r3, r3
 800e614:	005b      	lsls	r3, r3, #1
 800e616:	b2db      	uxtb	r3, r3
 800e618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e61a:	78fb      	ldrb	r3, [r7, #3]
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e622:	2b80      	cmp	r3, #128	; 0x80
 800e624:	d0ef      	beq.n	800e606 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e626:	4b24      	ldr	r3, [pc, #144]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f1c3 0307 	rsb	r3, r3, #7
 800e62e:	2b04      	cmp	r3, #4
 800e630:	d00b      	beq.n	800e64a <xPortStartScheduler+0x7a>
 800e632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e636:	b672      	cpsid	i
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	b662      	cpsie	i
 800e646:	60bb      	str	r3, [r7, #8]
 800e648:	e7fe      	b.n	800e648 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e64a:	4b1b      	ldr	r3, [pc, #108]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	021b      	lsls	r3, r3, #8
 800e650:	4a19      	ldr	r2, [pc, #100]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e652:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e654:	4b18      	ldr	r3, [pc, #96]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e65c:	4a16      	ldr	r2, [pc, #88]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e65e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	b2da      	uxtb	r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e668:	4b14      	ldr	r3, [pc, #80]	; (800e6bc <xPortStartScheduler+0xec>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a13      	ldr	r2, [pc, #76]	; (800e6bc <xPortStartScheduler+0xec>)
 800e66e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e672:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e674:	4b11      	ldr	r3, [pc, #68]	; (800e6bc <xPortStartScheduler+0xec>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a10      	ldr	r2, [pc, #64]	; (800e6bc <xPortStartScheduler+0xec>)
 800e67a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e67e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e680:	f000 f8d4 	bl	800e82c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e684:	4b0e      	ldr	r3, [pc, #56]	; (800e6c0 <xPortStartScheduler+0xf0>)
 800e686:	2200      	movs	r2, #0
 800e688:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e68a:	f000 f8f3 	bl	800e874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e68e:	4b0d      	ldr	r3, [pc, #52]	; (800e6c4 <xPortStartScheduler+0xf4>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4a0c      	ldr	r2, [pc, #48]	; (800e6c4 <xPortStartScheduler+0xf4>)
 800e694:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e698:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e69a:	f7ff ff85 	bl	800e5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e69e:	f7ff fa63 	bl	800db68 <vTaskSwitchContext>
	prvTaskExitError();
 800e6a2:	f7ff ff39 	bl	800e518 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	e000e400 	.word	0xe000e400
 800e6b4:	200004d0 	.word	0x200004d0
 800e6b8:	200004d4 	.word	0x200004d4
 800e6bc:	e000ed20 	.word	0xe000ed20
 800e6c0:	20000038 	.word	0x20000038
 800e6c4:	e000ef34 	.word	0xe000ef34

0800e6c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d2:	b672      	cpsid	i
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	b662      	cpsie	i
 800e6e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e6e4:	4b0f      	ldr	r3, [pc, #60]	; (800e724 <vPortEnterCritical+0x5c>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	4a0e      	ldr	r2, [pc, #56]	; (800e724 <vPortEnterCritical+0x5c>)
 800e6ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e6ee:	4b0d      	ldr	r3, [pc, #52]	; (800e724 <vPortEnterCritical+0x5c>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d110      	bne.n	800e718 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e6f6:	4b0c      	ldr	r3, [pc, #48]	; (800e728 <vPortEnterCritical+0x60>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d00b      	beq.n	800e718 <vPortEnterCritical+0x50>
 800e700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e704:	b672      	cpsid	i
 800e706:	f383 8811 	msr	BASEPRI, r3
 800e70a:	f3bf 8f6f 	isb	sy
 800e70e:	f3bf 8f4f 	dsb	sy
 800e712:	b662      	cpsie	i
 800e714:	603b      	str	r3, [r7, #0]
 800e716:	e7fe      	b.n	800e716 <vPortEnterCritical+0x4e>
	}
}
 800e718:	bf00      	nop
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr
 800e724:	20000038 	.word	0x20000038
 800e728:	e000ed04 	.word	0xe000ed04

0800e72c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e732:	4b12      	ldr	r3, [pc, #72]	; (800e77c <vPortExitCritical+0x50>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d10b      	bne.n	800e752 <vPortExitCritical+0x26>
 800e73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73e:	b672      	cpsid	i
 800e740:	f383 8811 	msr	BASEPRI, r3
 800e744:	f3bf 8f6f 	isb	sy
 800e748:	f3bf 8f4f 	dsb	sy
 800e74c:	b662      	cpsie	i
 800e74e:	607b      	str	r3, [r7, #4]
 800e750:	e7fe      	b.n	800e750 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e752:	4b0a      	ldr	r3, [pc, #40]	; (800e77c <vPortExitCritical+0x50>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	3b01      	subs	r3, #1
 800e758:	4a08      	ldr	r2, [pc, #32]	; (800e77c <vPortExitCritical+0x50>)
 800e75a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e75c:	4b07      	ldr	r3, [pc, #28]	; (800e77c <vPortExitCritical+0x50>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d104      	bne.n	800e76e <vPortExitCritical+0x42>
 800e764:	2300      	movs	r3, #0
 800e766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e76e:	bf00      	nop
 800e770:	370c      	adds	r7, #12
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop
 800e77c:	20000038 	.word	0x20000038

0800e780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e780:	f3ef 8009 	mrs	r0, PSP
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	4b15      	ldr	r3, [pc, #84]	; (800e7e0 <pxCurrentTCBConst>)
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	f01e 0f10 	tst.w	lr, #16
 800e790:	bf08      	it	eq
 800e792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79a:	6010      	str	r0, [r2, #0]
 800e79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e7a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e7a4:	b672      	cpsid	i
 800e7a6:	f380 8811 	msr	BASEPRI, r0
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	f3bf 8f6f 	isb	sy
 800e7b2:	b662      	cpsie	i
 800e7b4:	f7ff f9d8 	bl	800db68 <vTaskSwitchContext>
 800e7b8:	f04f 0000 	mov.w	r0, #0
 800e7bc:	f380 8811 	msr	BASEPRI, r0
 800e7c0:	bc09      	pop	{r0, r3}
 800e7c2:	6819      	ldr	r1, [r3, #0]
 800e7c4:	6808      	ldr	r0, [r1, #0]
 800e7c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ca:	f01e 0f10 	tst.w	lr, #16
 800e7ce:	bf08      	it	eq
 800e7d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e7d4:	f380 8809 	msr	PSP, r0
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop

0800e7e0 <pxCurrentTCBConst>:
 800e7e0:	200003a4 	.word	0x200003a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e7e4:	bf00      	nop
 800e7e6:	bf00      	nop

0800e7e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f2:	b672      	cpsid	i
 800e7f4:	f383 8811 	msr	BASEPRI, r3
 800e7f8:	f3bf 8f6f 	isb	sy
 800e7fc:	f3bf 8f4f 	dsb	sy
 800e800:	b662      	cpsie	i
 800e802:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e804:	f7ff f8f6 	bl	800d9f4 <xTaskIncrementTick>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d003      	beq.n	800e816 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e80e:	4b06      	ldr	r3, [pc, #24]	; (800e828 <SysTick_Handler+0x40>)
 800e810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e814:	601a      	str	r2, [r3, #0]
 800e816:	2300      	movs	r3, #0
 800e818:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e820:	bf00      	nop
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	e000ed04 	.word	0xe000ed04

0800e82c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e82c:	b480      	push	{r7}
 800e82e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e830:	4b0b      	ldr	r3, [pc, #44]	; (800e860 <vPortSetupTimerInterrupt+0x34>)
 800e832:	2200      	movs	r2, #0
 800e834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e836:	4b0b      	ldr	r3, [pc, #44]	; (800e864 <vPortSetupTimerInterrupt+0x38>)
 800e838:	2200      	movs	r2, #0
 800e83a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e83c:	4b0a      	ldr	r3, [pc, #40]	; (800e868 <vPortSetupTimerInterrupt+0x3c>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a0a      	ldr	r2, [pc, #40]	; (800e86c <vPortSetupTimerInterrupt+0x40>)
 800e842:	fba2 2303 	umull	r2, r3, r2, r3
 800e846:	099b      	lsrs	r3, r3, #6
 800e848:	4a09      	ldr	r2, [pc, #36]	; (800e870 <vPortSetupTimerInterrupt+0x44>)
 800e84a:	3b01      	subs	r3, #1
 800e84c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e84e:	4b04      	ldr	r3, [pc, #16]	; (800e860 <vPortSetupTimerInterrupt+0x34>)
 800e850:	2207      	movs	r2, #7
 800e852:	601a      	str	r2, [r3, #0]
}
 800e854:	bf00      	nop
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop
 800e860:	e000e010 	.word	0xe000e010
 800e864:	e000e018 	.word	0xe000e018
 800e868:	2000002c 	.word	0x2000002c
 800e86c:	10624dd3 	.word	0x10624dd3
 800e870:	e000e014 	.word	0xe000e014

0800e874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e884 <vPortEnableVFP+0x10>
 800e878:	6801      	ldr	r1, [r0, #0]
 800e87a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e87e:	6001      	str	r1, [r0, #0]
 800e880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e882:	bf00      	nop
 800e884:	e000ed88 	.word	0xe000ed88

0800e888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e88e:	f3ef 8305 	mrs	r3, IPSR
 800e892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2b0f      	cmp	r3, #15
 800e898:	d915      	bls.n	800e8c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e89a:	4a18      	ldr	r2, [pc, #96]	; (800e8fc <vPortValidateInterruptPriority+0x74>)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	4413      	add	r3, r2
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e8a4:	4b16      	ldr	r3, [pc, #88]	; (800e900 <vPortValidateInterruptPriority+0x78>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	7afa      	ldrb	r2, [r7, #11]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d20b      	bcs.n	800e8c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b2:	b672      	cpsid	i
 800e8b4:	f383 8811 	msr	BASEPRI, r3
 800e8b8:	f3bf 8f6f 	isb	sy
 800e8bc:	f3bf 8f4f 	dsb	sy
 800e8c0:	b662      	cpsie	i
 800e8c2:	607b      	str	r3, [r7, #4]
 800e8c4:	e7fe      	b.n	800e8c4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e8c6:	4b0f      	ldr	r3, [pc, #60]	; (800e904 <vPortValidateInterruptPriority+0x7c>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e8ce:	4b0e      	ldr	r3, [pc, #56]	; (800e908 <vPortValidateInterruptPriority+0x80>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d90b      	bls.n	800e8ee <vPortValidateInterruptPriority+0x66>
 800e8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8da:	b672      	cpsid	i
 800e8dc:	f383 8811 	msr	BASEPRI, r3
 800e8e0:	f3bf 8f6f 	isb	sy
 800e8e4:	f3bf 8f4f 	dsb	sy
 800e8e8:	b662      	cpsie	i
 800e8ea:	603b      	str	r3, [r7, #0]
 800e8ec:	e7fe      	b.n	800e8ec <vPortValidateInterruptPriority+0x64>
	}
 800e8ee:	bf00      	nop
 800e8f0:	3714      	adds	r7, #20
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop
 800e8fc:	e000e3f0 	.word	0xe000e3f0
 800e900:	200004d0 	.word	0x200004d0
 800e904:	e000ed0c 	.word	0xe000ed0c
 800e908:	200004d4 	.word	0x200004d4

0800e90c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b08a      	sub	sp, #40	; 0x28
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e914:	2300      	movs	r3, #0
 800e916:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e918:	f7fe ff9e 	bl	800d858 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e91c:	4b5c      	ldr	r3, [pc, #368]	; (800ea90 <pvPortMalloc+0x184>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d101      	bne.n	800e928 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e924:	f000 f91a 	bl	800eb5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e928:	4b5a      	ldr	r3, [pc, #360]	; (800ea94 <pvPortMalloc+0x188>)
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4013      	ands	r3, r2
 800e930:	2b00      	cmp	r3, #0
 800e932:	f040 8090 	bne.w	800ea56 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d01e      	beq.n	800e97a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e93c:	2208      	movs	r2, #8
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4413      	add	r3, r2
 800e942:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f003 0307 	and.w	r3, r3, #7
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d015      	beq.n	800e97a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f023 0307 	bic.w	r3, r3, #7
 800e954:	3308      	adds	r3, #8
 800e956:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f003 0307 	and.w	r3, r3, #7
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00b      	beq.n	800e97a <pvPortMalloc+0x6e>
 800e962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e966:	b672      	cpsid	i
 800e968:	f383 8811 	msr	BASEPRI, r3
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	f3bf 8f4f 	dsb	sy
 800e974:	b662      	cpsie	i
 800e976:	617b      	str	r3, [r7, #20]
 800e978:	e7fe      	b.n	800e978 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d06a      	beq.n	800ea56 <pvPortMalloc+0x14a>
 800e980:	4b45      	ldr	r3, [pc, #276]	; (800ea98 <pvPortMalloc+0x18c>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	429a      	cmp	r2, r3
 800e988:	d865      	bhi.n	800ea56 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e98a:	4b44      	ldr	r3, [pc, #272]	; (800ea9c <pvPortMalloc+0x190>)
 800e98c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e98e:	4b43      	ldr	r3, [pc, #268]	; (800ea9c <pvPortMalloc+0x190>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e994:	e004      	b.n	800e9a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e998:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d903      	bls.n	800e9b2 <pvPortMalloc+0xa6>
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d1f1      	bne.n	800e996 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e9b2:	4b37      	ldr	r3, [pc, #220]	; (800ea90 <pvPortMalloc+0x184>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d04c      	beq.n	800ea56 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e9bc:	6a3b      	ldr	r3, [r7, #32]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2208      	movs	r2, #8
 800e9c2:	4413      	add	r3, r2
 800e9c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d0:	685a      	ldr	r2, [r3, #4]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	1ad2      	subs	r2, r2, r3
 800e9d6:	2308      	movs	r3, #8
 800e9d8:	005b      	lsls	r3, r3, #1
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d920      	bls.n	800ea20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e9de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	f003 0307 	and.w	r3, r3, #7
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d00b      	beq.n	800ea08 <pvPortMalloc+0xfc>
 800e9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f4:	b672      	cpsid	i
 800e9f6:	f383 8811 	msr	BASEPRI, r3
 800e9fa:	f3bf 8f6f 	isb	sy
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	b662      	cpsie	i
 800ea04:	613b      	str	r3, [r7, #16]
 800ea06:	e7fe      	b.n	800ea06 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0a:	685a      	ldr	r2, [r3, #4]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	1ad2      	subs	r2, r2, r3
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea1a:	69b8      	ldr	r0, [r7, #24]
 800ea1c:	f000 f900 	bl	800ec20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea20:	4b1d      	ldr	r3, [pc, #116]	; (800ea98 <pvPortMalloc+0x18c>)
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	1ad3      	subs	r3, r2, r3
 800ea2a:	4a1b      	ldr	r2, [pc, #108]	; (800ea98 <pvPortMalloc+0x18c>)
 800ea2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea2e:	4b1a      	ldr	r3, [pc, #104]	; (800ea98 <pvPortMalloc+0x18c>)
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	4b1b      	ldr	r3, [pc, #108]	; (800eaa0 <pvPortMalloc+0x194>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d203      	bcs.n	800ea42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea3a:	4b17      	ldr	r3, [pc, #92]	; (800ea98 <pvPortMalloc+0x18c>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	4a18      	ldr	r2, [pc, #96]	; (800eaa0 <pvPortMalloc+0x194>)
 800ea40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea44:	685a      	ldr	r2, [r3, #4]
 800ea46:	4b13      	ldr	r3, [pc, #76]	; (800ea94 <pvPortMalloc+0x188>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	431a      	orrs	r2, r3
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea52:	2200      	movs	r2, #0
 800ea54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea56:	f7fe ff0d 	bl	800d874 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d101      	bne.n	800ea64 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ea60:	f7f1 ff94 	bl	800098c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea64:	69fb      	ldr	r3, [r7, #28]
 800ea66:	f003 0307 	and.w	r3, r3, #7
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00b      	beq.n	800ea86 <pvPortMalloc+0x17a>
 800ea6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea72:	b672      	cpsid	i
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	b662      	cpsie	i
 800ea82:	60fb      	str	r3, [r7, #12]
 800ea84:	e7fe      	b.n	800ea84 <pvPortMalloc+0x178>
	return pvReturn;
 800ea86:	69fb      	ldr	r3, [r7, #28]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3728      	adds	r7, #40	; 0x28
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	200084e0 	.word	0x200084e0
 800ea94:	200084ec 	.word	0x200084ec
 800ea98:	200084e4 	.word	0x200084e4
 800ea9c:	200084d8 	.word	0x200084d8
 800eaa0:	200084e8 	.word	0x200084e8

0800eaa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d04a      	beq.n	800eb4c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eab6:	2308      	movs	r3, #8
 800eab8:	425b      	negs	r3, r3
 800eaba:	697a      	ldr	r2, [r7, #20]
 800eabc:	4413      	add	r3, r2
 800eabe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	685a      	ldr	r2, [r3, #4]
 800eac8:	4b22      	ldr	r3, [pc, #136]	; (800eb54 <vPortFree+0xb0>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4013      	ands	r3, r2
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d10b      	bne.n	800eaea <vPortFree+0x46>
 800ead2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead6:	b672      	cpsid	i
 800ead8:	f383 8811 	msr	BASEPRI, r3
 800eadc:	f3bf 8f6f 	isb	sy
 800eae0:	f3bf 8f4f 	dsb	sy
 800eae4:	b662      	cpsie	i
 800eae6:	60fb      	str	r3, [r7, #12]
 800eae8:	e7fe      	b.n	800eae8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d00b      	beq.n	800eb0a <vPortFree+0x66>
 800eaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf6:	b672      	cpsid	i
 800eaf8:	f383 8811 	msr	BASEPRI, r3
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	b662      	cpsie	i
 800eb06:	60bb      	str	r3, [r7, #8]
 800eb08:	e7fe      	b.n	800eb08 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	685a      	ldr	r2, [r3, #4]
 800eb0e:	4b11      	ldr	r3, [pc, #68]	; (800eb54 <vPortFree+0xb0>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4013      	ands	r3, r2
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d019      	beq.n	800eb4c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d115      	bne.n	800eb4c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	685a      	ldr	r2, [r3, #4]
 800eb24:	4b0b      	ldr	r3, [pc, #44]	; (800eb54 <vPortFree+0xb0>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	43db      	mvns	r3, r3
 800eb2a:	401a      	ands	r2, r3
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb30:	f7fe fe92 	bl	800d858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	685a      	ldr	r2, [r3, #4]
 800eb38:	4b07      	ldr	r3, [pc, #28]	; (800eb58 <vPortFree+0xb4>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	4a06      	ldr	r2, [pc, #24]	; (800eb58 <vPortFree+0xb4>)
 800eb40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb42:	6938      	ldr	r0, [r7, #16]
 800eb44:	f000 f86c 	bl	800ec20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eb48:	f7fe fe94 	bl	800d874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb4c:	bf00      	nop
 800eb4e:	3718      	adds	r7, #24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	200084ec 	.word	0x200084ec
 800eb58:	200084e4 	.word	0x200084e4

0800eb5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b085      	sub	sp, #20
 800eb60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb68:	4b27      	ldr	r3, [pc, #156]	; (800ec08 <prvHeapInit+0xac>)
 800eb6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f003 0307 	and.w	r3, r3, #7
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00c      	beq.n	800eb90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	3307      	adds	r3, #7
 800eb7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f023 0307 	bic.w	r3, r3, #7
 800eb82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb84:	68ba      	ldr	r2, [r7, #8]
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	1ad3      	subs	r3, r2, r3
 800eb8a:	4a1f      	ldr	r2, [pc, #124]	; (800ec08 <prvHeapInit+0xac>)
 800eb8c:	4413      	add	r3, r2
 800eb8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb94:	4a1d      	ldr	r2, [pc, #116]	; (800ec0c <prvHeapInit+0xb0>)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb9a:	4b1c      	ldr	r3, [pc, #112]	; (800ec0c <prvHeapInit+0xb0>)
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	68ba      	ldr	r2, [r7, #8]
 800eba4:	4413      	add	r3, r2
 800eba6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eba8:	2208      	movs	r2, #8
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	1a9b      	subs	r3, r3, r2
 800ebae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f023 0307 	bic.w	r3, r3, #7
 800ebb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	4a15      	ldr	r2, [pc, #84]	; (800ec10 <prvHeapInit+0xb4>)
 800ebbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ebbe:	4b14      	ldr	r3, [pc, #80]	; (800ec10 <prvHeapInit+0xb4>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ebc6:	4b12      	ldr	r3, [pc, #72]	; (800ec10 <prvHeapInit+0xb4>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	68fa      	ldr	r2, [r7, #12]
 800ebd6:	1ad2      	subs	r2, r2, r3
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ebdc:	4b0c      	ldr	r3, [pc, #48]	; (800ec10 <prvHeapInit+0xb4>)
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	4a0a      	ldr	r2, [pc, #40]	; (800ec14 <prvHeapInit+0xb8>)
 800ebea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	4a09      	ldr	r2, [pc, #36]	; (800ec18 <prvHeapInit+0xbc>)
 800ebf2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ebf4:	4b09      	ldr	r3, [pc, #36]	; (800ec1c <prvHeapInit+0xc0>)
 800ebf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ebfa:	601a      	str	r2, [r3, #0]
}
 800ebfc:	bf00      	nop
 800ebfe:	3714      	adds	r7, #20
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr
 800ec08:	200004d8 	.word	0x200004d8
 800ec0c:	200084d8 	.word	0x200084d8
 800ec10:	200084e0 	.word	0x200084e0
 800ec14:	200084e8 	.word	0x200084e8
 800ec18:	200084e4 	.word	0x200084e4
 800ec1c:	200084ec 	.word	0x200084ec

0800ec20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec20:	b480      	push	{r7}
 800ec22:	b085      	sub	sp, #20
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec28:	4b28      	ldr	r3, [pc, #160]	; (800eccc <prvInsertBlockIntoFreeList+0xac>)
 800ec2a:	60fb      	str	r3, [r7, #12]
 800ec2c:	e002      	b.n	800ec34 <prvInsertBlockIntoFreeList+0x14>
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	60fb      	str	r3, [r7, #12]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d8f7      	bhi.n	800ec2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	4413      	add	r3, r2
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d108      	bne.n	800ec62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	685a      	ldr	r2, [r3, #4]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	441a      	add	r2, r3
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	68ba      	ldr	r2, [r7, #8]
 800ec6c:	441a      	add	r2, r3
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d118      	bne.n	800eca8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	4b15      	ldr	r3, [pc, #84]	; (800ecd0 <prvInsertBlockIntoFreeList+0xb0>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d00d      	beq.n	800ec9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	441a      	add	r2, r3
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	601a      	str	r2, [r3, #0]
 800ec9c:	e008      	b.n	800ecb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec9e:	4b0c      	ldr	r3, [pc, #48]	; (800ecd0 <prvInsertBlockIntoFreeList+0xb0>)
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	601a      	str	r2, [r3, #0]
 800eca6:	e003      	b.n	800ecb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d002      	beq.n	800ecbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecbe:	bf00      	nop
 800ecc0:	3714      	adds	r7, #20
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop
 800eccc:	200084d8 	.word	0x200084d8
 800ecd0:	200084e0 	.word	0x200084e0

0800ecd4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b08c      	sub	sp, #48	; 0x30
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a51      	ldr	r2, [pc, #324]	; (800ee24 <I2Cx_MspInit+0x150>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d14d      	bne.n	800ed80 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800ece4:	4b50      	ldr	r3, [pc, #320]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ece6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece8:	4a4f      	ldr	r2, [pc, #316]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ecea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecee:	6313      	str	r3, [r2, #48]	; 0x30
 800ecf0:	4b4d      	ldr	r3, [pc, #308]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ecf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecf8:	61bb      	str	r3, [r7, #24]
 800ecfa:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800ecfc:	2380      	movs	r3, #128	; 0x80
 800ecfe:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800ed00:	2312      	movs	r3, #18
 800ed02:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800ed04:	2300      	movs	r3, #0
 800ed06:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800ed08:	2302      	movs	r3, #2
 800ed0a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800ed0c:	2304      	movs	r3, #4
 800ed0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ed10:	f107 031c 	add.w	r3, r7, #28
 800ed14:	4619      	mov	r1, r3
 800ed16:	4845      	ldr	r0, [pc, #276]	; (800ee2c <I2Cx_MspInit+0x158>)
 800ed18:	f7f5 fba0 	bl	800445c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800ed1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ed22:	f107 031c 	add.w	r3, r7, #28
 800ed26:	4619      	mov	r1, r3
 800ed28:	4840      	ldr	r0, [pc, #256]	; (800ee2c <I2Cx_MspInit+0x158>)
 800ed2a:	f7f5 fb97 	bl	800445c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800ed2e:	4b3e      	ldr	r3, [pc, #248]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed32:	4a3d      	ldr	r2, [pc, #244]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ed38:	6413      	str	r3, [r2, #64]	; 0x40
 800ed3a:	4b3b      	ldr	r3, [pc, #236]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed42:	617b      	str	r3, [r7, #20]
 800ed44:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800ed46:	4b38      	ldr	r3, [pc, #224]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed48:	6a1b      	ldr	r3, [r3, #32]
 800ed4a:	4a37      	ldr	r2, [pc, #220]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ed50:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800ed52:	4b35      	ldr	r3, [pc, #212]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed54:	6a1b      	ldr	r3, [r3, #32]
 800ed56:	4a34      	ldr	r2, [pc, #208]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ed5c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800ed5e:	2200      	movs	r2, #0
 800ed60:	210f      	movs	r1, #15
 800ed62:	2048      	movs	r0, #72	; 0x48
 800ed64:	f7f4 fd2a 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800ed68:	2048      	movs	r0, #72	; 0x48
 800ed6a:	f7f4 fd43 	bl	80037f4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800ed6e:	2200      	movs	r2, #0
 800ed70:	210f      	movs	r1, #15
 800ed72:	2049      	movs	r0, #73	; 0x49
 800ed74:	f7f4 fd22 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800ed78:	2049      	movs	r0, #73	; 0x49
 800ed7a:	f7f4 fd3b 	bl	80037f4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800ed7e:	e04d      	b.n	800ee1c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800ed80:	4b29      	ldr	r3, [pc, #164]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed84:	4a28      	ldr	r2, [pc, #160]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed86:	f043 0302 	orr.w	r3, r3, #2
 800ed8a:	6313      	str	r3, [r2, #48]	; 0x30
 800ed8c:	4b26      	ldr	r3, [pc, #152]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed90:	f003 0302 	and.w	r3, r3, #2
 800ed94:	613b      	str	r3, [r7, #16]
 800ed96:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800ed98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed9c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800ed9e:	2312      	movs	r3, #18
 800eda0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800eda2:	2300      	movs	r3, #0
 800eda4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800eda6:	2302      	movs	r3, #2
 800eda8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800edaa:	2304      	movs	r3, #4
 800edac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800edae:	f107 031c 	add.w	r3, r7, #28
 800edb2:	4619      	mov	r1, r3
 800edb4:	481e      	ldr	r0, [pc, #120]	; (800ee30 <I2Cx_MspInit+0x15c>)
 800edb6:	f7f5 fb51 	bl	800445c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800edba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800edbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800edc0:	f107 031c 	add.w	r3, r7, #28
 800edc4:	4619      	mov	r1, r3
 800edc6:	481a      	ldr	r0, [pc, #104]	; (800ee30 <I2Cx_MspInit+0x15c>)
 800edc8:	f7f5 fb48 	bl	800445c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800edcc:	4b16      	ldr	r3, [pc, #88]	; (800ee28 <I2Cx_MspInit+0x154>)
 800edce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edd0:	4a15      	ldr	r2, [pc, #84]	; (800ee28 <I2Cx_MspInit+0x154>)
 800edd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800edd6:	6413      	str	r3, [r2, #64]	; 0x40
 800edd8:	4b13      	ldr	r3, [pc, #76]	; (800ee28 <I2Cx_MspInit+0x154>)
 800edda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ede0:	60fb      	str	r3, [r7, #12]
 800ede2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800ede4:	4b10      	ldr	r3, [pc, #64]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ede6:	6a1b      	ldr	r3, [r3, #32]
 800ede8:	4a0f      	ldr	r2, [pc, #60]	; (800ee28 <I2Cx_MspInit+0x154>)
 800edea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800edee:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800edf0:	4b0d      	ldr	r3, [pc, #52]	; (800ee28 <I2Cx_MspInit+0x154>)
 800edf2:	6a1b      	ldr	r3, [r3, #32]
 800edf4:	4a0c      	ldr	r2, [pc, #48]	; (800ee28 <I2Cx_MspInit+0x154>)
 800edf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800edfa:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800edfc:	2200      	movs	r2, #0
 800edfe:	210f      	movs	r1, #15
 800ee00:	201f      	movs	r0, #31
 800ee02:	f7f4 fcdb 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800ee06:	201f      	movs	r0, #31
 800ee08:	f7f4 fcf4 	bl	80037f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	210f      	movs	r1, #15
 800ee10:	2020      	movs	r0, #32
 800ee12:	f7f4 fcd3 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800ee16:	2020      	movs	r0, #32
 800ee18:	f7f4 fcec 	bl	80037f4 <HAL_NVIC_EnableIRQ>
}
 800ee1c:	bf00      	nop
 800ee1e:	3730      	adds	r7, #48	; 0x30
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	200084f0 	.word	0x200084f0
 800ee28:	40023800 	.word	0x40023800
 800ee2c:	40021c00 	.word	0x40021c00
 800ee30:	40020400 	.word	0x40020400

0800ee34 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7f6 f8e1 	bl	8005004 <HAL_I2C_GetState>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d125      	bne.n	800ee94 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	4a14      	ldr	r2, [pc, #80]	; (800ee9c <I2Cx_Init+0x68>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d103      	bne.n	800ee58 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4a13      	ldr	r2, [pc, #76]	; (800eea0 <I2Cx_Init+0x6c>)
 800ee54:	601a      	str	r2, [r3, #0]
 800ee56:	e002      	b.n	800ee5e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	4a12      	ldr	r2, [pc, #72]	; (800eea4 <I2Cx_Init+0x70>)
 800ee5c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	4a11      	ldr	r2, [pc, #68]	; (800eea8 <I2Cx_Init+0x74>)
 800ee62:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2200      	movs	r2, #0
 800ee68:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7ff ff23 	bl	800ecd4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f7f5 fdca 	bl	8004a28 <HAL_I2C_Init>
  }
}
 800ee94:	bf00      	nop
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	200084f0 	.word	0x200084f0
 800eea0:	40005c00 	.word	0x40005c00
 800eea4:	40005400 	.word	0x40005400
 800eea8:	40912732 	.word	0x40912732

0800eeac <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b08a      	sub	sp, #40	; 0x28
 800eeb0:	af04      	add	r7, sp, #16
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	4608      	mov	r0, r1
 800eeb6:	4611      	mov	r1, r2
 800eeb8:	461a      	mov	r2, r3
 800eeba:	4603      	mov	r3, r0
 800eebc:	72fb      	strb	r3, [r7, #11]
 800eebe:	460b      	mov	r3, r1
 800eec0:	813b      	strh	r3, [r7, #8]
 800eec2:	4613      	mov	r3, r2
 800eec4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800eec6:	2300      	movs	r3, #0
 800eec8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800eeca:	7afb      	ldrb	r3, [r7, #11]
 800eecc:	b299      	uxth	r1, r3
 800eece:	88f8      	ldrh	r0, [r7, #6]
 800eed0:	893a      	ldrh	r2, [r7, #8]
 800eed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eed6:	9302      	str	r3, [sp, #8]
 800eed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeda:	9301      	str	r3, [sp, #4]
 800eedc:	6a3b      	ldr	r3, [r7, #32]
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	4603      	mov	r3, r0
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f7f5 ff74 	bl	8004dd0 <HAL_I2C_Mem_Read>
 800eee8:	4603      	mov	r3, r0
 800eeea:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800eeec:	7dfb      	ldrb	r3, [r7, #23]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d004      	beq.n	800eefc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800eef2:	7afb      	ldrb	r3, [r7, #11]
 800eef4:	4619      	mov	r1, r3
 800eef6:	68f8      	ldr	r0, [r7, #12]
 800eef8:	f000 f832 	bl	800ef60 <I2Cx_Error>
  }
  return status;    
 800eefc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3718      	adds	r7, #24
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b08a      	sub	sp, #40	; 0x28
 800ef0a:	af04      	add	r7, sp, #16
 800ef0c:	60f8      	str	r0, [r7, #12]
 800ef0e:	4608      	mov	r0, r1
 800ef10:	4611      	mov	r1, r2
 800ef12:	461a      	mov	r2, r3
 800ef14:	4603      	mov	r3, r0
 800ef16:	72fb      	strb	r3, [r7, #11]
 800ef18:	460b      	mov	r3, r1
 800ef1a:	813b      	strh	r3, [r7, #8]
 800ef1c:	4613      	mov	r3, r2
 800ef1e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800ef24:	7afb      	ldrb	r3, [r7, #11]
 800ef26:	b299      	uxth	r1, r3
 800ef28:	88f8      	ldrh	r0, [r7, #6]
 800ef2a:	893a      	ldrh	r2, [r7, #8]
 800ef2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ef30:	9302      	str	r3, [sp, #8]
 800ef32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef34:	9301      	str	r3, [sp, #4]
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	f7f5 fe33 	bl	8004ba8 <HAL_I2C_Mem_Write>
 800ef42:	4603      	mov	r3, r0
 800ef44:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800ef46:	7dfb      	ldrb	r3, [r7, #23]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d004      	beq.n	800ef56 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800ef4c:	7afb      	ldrb	r3, [r7, #11]
 800ef4e:	4619      	mov	r1, r3
 800ef50:	68f8      	ldr	r0, [r7, #12]
 800ef52:	f000 f805 	bl	800ef60 <I2Cx_Error>
  }
  return status;
 800ef56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3718      	adds	r7, #24
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	460b      	mov	r3, r1
 800ef6a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f7f5 fdeb 	bl	8004b48 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7ff ff5e 	bl	800ee34 <I2Cx_Init>
}
 800ef78:	bf00      	nop
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800ef84:	4802      	ldr	r0, [pc, #8]	; (800ef90 <TS_IO_Init+0x10>)
 800ef86:	f7ff ff55 	bl	800ee34 <I2Cx_Init>
}
 800ef8a:	bf00      	nop
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	200084f0 	.word	0x200084f0

0800ef94 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af02      	add	r7, sp, #8
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	71fb      	strb	r3, [r7, #7]
 800ef9e:	460b      	mov	r3, r1
 800efa0:	71bb      	strb	r3, [r7, #6]
 800efa2:	4613      	mov	r3, r2
 800efa4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800efa6:	79bb      	ldrb	r3, [r7, #6]
 800efa8:	b29a      	uxth	r2, r3
 800efaa:	79f9      	ldrb	r1, [r7, #7]
 800efac:	2301      	movs	r3, #1
 800efae:	9301      	str	r3, [sp, #4]
 800efb0:	1d7b      	adds	r3, r7, #5
 800efb2:	9300      	str	r3, [sp, #0]
 800efb4:	2301      	movs	r3, #1
 800efb6:	4803      	ldr	r0, [pc, #12]	; (800efc4 <TS_IO_Write+0x30>)
 800efb8:	f7ff ffa5 	bl	800ef06 <I2Cx_WriteMultiple>
}
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	200084f0 	.word	0x200084f0

0800efc8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b086      	sub	sp, #24
 800efcc:	af02      	add	r7, sp, #8
 800efce:	4603      	mov	r3, r0
 800efd0:	460a      	mov	r2, r1
 800efd2:	71fb      	strb	r3, [r7, #7]
 800efd4:	4613      	mov	r3, r2
 800efd6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800efd8:	2300      	movs	r3, #0
 800efda:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800efdc:	79bb      	ldrb	r3, [r7, #6]
 800efde:	b29a      	uxth	r2, r3
 800efe0:	79f9      	ldrb	r1, [r7, #7]
 800efe2:	2301      	movs	r3, #1
 800efe4:	9301      	str	r3, [sp, #4]
 800efe6:	f107 030f 	add.w	r3, r7, #15
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	2301      	movs	r3, #1
 800efee:	4804      	ldr	r0, [pc, #16]	; (800f000 <TS_IO_Read+0x38>)
 800eff0:	f7ff ff5c 	bl	800eeac <I2Cx_ReadMultiple>

  return read_value;
 800eff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3710      	adds	r7, #16
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	200084f0 	.word	0x200084f0

0800f004 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7f4 f851 	bl	80030b4 <HAL_Delay>
}
 800f012:	bf00      	nop
 800f014:	3708      	adds	r7, #8
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800f01e:	f007 ff57 	bl	8016ed0 <touchgfx_init>
}
 800f022:	bf00      	nop
 800f024:	bd80      	pop	{r7, pc}

0800f026 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800f026:	b580      	push	{r7, lr}
 800f028:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800f02a:	f007 ff7b 	bl	8016f24 <touchgfx_taskEntry>
}
 800f02e:	bf00      	nop
 800f030:	bd80      	pop	{r7, pc}
	...

0800f034 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
    {
 800f03c:	4a04      	ldr	r2, [pc, #16]	; (800f050 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	601a      	str	r2, [r3, #0]
    }
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4618      	mov	r0, r3
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr
 800f050:	08028ed8 	.word	0x08028ed8

0800f054 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
    }
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7ff ffe9 	bl	800f034 <_ZN8touchgfx12FontProviderD1Ev>
 800f062:	2104      	movs	r1, #4
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f018 fa75 	bl	8027554 <_ZdlPvj>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4618      	mov	r0, r3
 800f06e:	3708      	adds	r7, #8
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	460b      	mov	r3, r1
 800f07e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f080:	887b      	ldrh	r3, [r7, #2]
 800f082:	2b03      	cmp	r3, #3
 800f084:	d81e      	bhi.n	800f0c4 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 800f086:	a201      	add	r2, pc, #4	; (adr r2, 800f08c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800f088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08c:	0800f09d 	.word	0x0800f09d
 800f090:	0800f0a7 	.word	0x0800f0a7
 800f094:	0800f0b1 	.word	0x0800f0b1
 800f098:	0800f0bb 	.word	0x0800f0bb
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f09c:	f005 fdee 	bl	8014c7c <_ZN17TypedTextDatabase8getFontsEv>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	e00f      	b.n	800f0c6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f0a6:	f005 fde9 	bl	8014c7c <_ZN17TypedTextDatabase8getFontsEv>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	e00a      	b.n	800f0c6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f0b0:	f005 fde4 	bl	8014c7c <_ZN17TypedTextDatabase8getFontsEv>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	e005      	b.n	800f0c6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::TYPOGRAPHY_00:
        // verdana_27_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800f0ba:	f005 fddf 	bl	8014c7c <_ZN17TypedTextDatabase8getFontsEv>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	e000      	b.n	800f0c6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 800f0c4:	2300      	movs	r3, #0
    }
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3708      	adds	r7, #8
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop

0800f0d0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_18_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_27_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	4a05      	ldr	r2, [pc, #20]	; (800f0f0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	601a      	str	r2, [r3, #0]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7ff ffa7 	bl	800f034 <_ZN8touchgfx12FontProviderD1Ev>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3708      	adds	r7, #8
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	08028ec4 	.word	0x08028ec4

0800f0f4 <_ZN23ApplicationFontProviderD0Ev>:
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f7ff ffe7 	bl	800f0d0 <_ZN23ApplicationFontProviderD1Ev>
 800f102:	2104      	movs	r1, #4
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f018 fa25 	bl	8027554 <_ZdlPvj>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4618      	mov	r0, r3
 800f10e:	3708      	adds	r7, #8
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}

0800f114 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f114:	b480      	push	{r7}
 800f116:	b083      	sub	sp, #12
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
    {
 800f11c:	4a04      	ldr	r2, [pc, #16]	; (800f130 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	601a      	str	r2, [r3, #0]
    }
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4618      	mov	r0, r3
 800f126:	370c      	adds	r7, #12
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr
 800f130:	08029c34 	.word	0x08029c34

0800f134 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
    }
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f7ff ffe9 	bl	800f114 <_ZN8touchgfx4FontD1Ev>
 800f142:	2110      	movs	r1, #16
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f018 fa05 	bl	8027554 <_ZdlPvj>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	4618      	mov	r0, r3
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f154:	b590      	push	{r4, r7, lr}
 800f156:	b087      	sub	sp, #28
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	460b      	mov	r3, r1
 800f15e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f160:	887b      	ldrh	r3, [r7, #2]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d101      	bne.n	800f16a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f166:	2300      	movs	r3, #0
 800f168:	e010      	b.n	800f18c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f16a:	2300      	movs	r3, #0
 800f16c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f16e:	2300      	movs	r3, #0
 800f170:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	3308      	adds	r3, #8
 800f178:	681c      	ldr	r4, [r3, #0]
 800f17a:	f107 030f 	add.w	r3, r7, #15
 800f17e:	f107 0210 	add.w	r2, r7, #16
 800f182:	8879      	ldrh	r1, [r7, #2]
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	47a0      	blx	r4
 800f188:	6178      	str	r0, [r7, #20]
        return glyph;
 800f18a:	697b      	ldr	r3, [r7, #20]
    }
 800f18c:	4618      	mov	r0, r3
 800f18e:	371c      	adds	r7, #28
 800f190:	46bd      	mov	sp, r7
 800f192:	bd90      	pop	{r4, r7, pc}

0800f194 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	895b      	ldrh	r3, [r3, #10]
    }
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	899b      	ldrh	r3, [r3, #12]
    }
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800f1c4:	b480      	push	{r7}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	889b      	ldrh	r3, [r3, #4]
    }
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	370c      	adds	r7, #12
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	889a      	ldrh	r2, [r3, #4]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	799b      	ldrb	r3, [r3, #6]
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	4413      	add	r3, r2
 800f1f0:	b29b      	uxth	r3, r3
    }
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	370c      	adds	r7, #12
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr

0800f1fe <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800f1fe:	b480      	push	{r7}
 800f200:	b083      	sub	sp, #12
 800f202:	af00      	add	r7, sp, #0
 800f204:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	79db      	ldrb	r3, [r3, #7]
 800f20a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f20e:	b2db      	uxtb	r3, r3
    }
 800f210:	4618      	mov	r0, r3
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	79db      	ldrb	r3, [r3, #7]
 800f228:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f22c:	b2db      	uxtb	r3, r3
    }
 800f22e:	4618      	mov	r0, r3
 800f230:	370c      	adds	r7, #12
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr
	...

0800f23c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	4a05      	ldr	r2, [pc, #20]	; (800f25c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	601a      	str	r2, [r3, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7ff ff61 	bl	800f114 <_ZN8touchgfx4FontD1Ev>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	4618      	mov	r0, r3
 800f256:	3708      	adds	r7, #8
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	0802bb08 	.word	0x0802bb08

0800f260 <_ZN8touchgfx9ConstFontD0Ev>:
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f7ff ffe7 	bl	800f23c <_ZN8touchgfx9ConstFontD1Ev>
 800f26e:	2118      	movs	r1, #24
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f018 f96f 	bl	8027554 <_ZdlPvj>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4618      	mov	r0, r3
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	4a05      	ldr	r2, [pc, #20]	; (800f2a0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	601a      	str	r2, [r3, #0]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	4618      	mov	r0, r3
 800f292:	f7ff ffd3 	bl	800f23c <_ZN8touchgfx9ConstFontD1Ev>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	4618      	mov	r0, r3
 800f29a:	3708      	adds	r7, #8
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}
 800f2a0:	08028efc 	.word	0x08028efc

0800f2a4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7ff ffe7 	bl	800f280 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f2b2:	2124      	movs	r1, #36	; 0x24
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f018 f94d 	bl	8027554 <_ZdlPvj>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3708      	adds	r7, #8
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
    {
 800f2cc:	4a04      	ldr	r2, [pc, #16]	; (800f2e0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	601a      	str	r2, [r3, #0]
    }
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	370c      	adds	r7, #12
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr
 800f2e0:	08028eec 	.word	0x08028eec

0800f2e4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
    }
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7ff ffe9 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>
 800f2f2:	2108      	movs	r1, #8
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f018 f92d 	bl	8027554 <_ZdlPvj>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3708      	adds	r7, #8
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}

0800f304 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6a1b      	ldr	r3, [r3, #32]
    }
 800f310:	4618      	mov	r0, r3
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b08c      	sub	sp, #48	; 0x30
 800f320:	af08      	add	r7, sp, #32
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	4611      	mov	r1, r2
 800f328:	461a      	mov	r2, r3
 800f32a:	460b      	mov	r3, r1
 800f32c:	80fb      	strh	r3, [r7, #6]
 800f32e:	4613      	mov	r3, r2
 800f330:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	88b9      	ldrh	r1, [r7, #4]
 800f336:	88fa      	ldrh	r2, [r7, #6]
 800f338:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f33a:	9306      	str	r3, [sp, #24]
 800f33c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f33e:	9305      	str	r3, [sp, #20]
 800f340:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f344:	9304      	str	r3, [sp, #16]
 800f346:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f34a:	9303      	str	r3, [sp, #12]
 800f34c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f350:	9302      	str	r3, [sp, #8]
 800f352:	7f3b      	ldrb	r3, [r7, #28]
 800f354:	9301      	str	r3, [sp, #4]
 800f356:	7e3b      	ldrb	r3, [r7, #24]
 800f358:	9300      	str	r3, [sp, #0]
 800f35a:	460b      	mov	r3, r1
 800f35c:	68b9      	ldr	r1, [r7, #8]
 800f35e:	f00c fc83 	bl	801bc68 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f362:	4a08      	ldr	r2, [pc, #32]	; (800f384 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	601a      	str	r2, [r3, #0]
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f36c:	619a      	str	r2, [r3, #24]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f372:	61da      	str	r2, [r3, #28]
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f378:	621a      	str	r2, [r3, #32]
{
}
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	4618      	mov	r0, r3
 800f37e:	3710      	adds	r7, #16
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	08028efc 	.word	0x08028efc

0800f388 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f388:	b480      	push	{r7}
 800f38a:	b085      	sub	sp, #20
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	699b      	ldr	r3, [r3, #24]
 800f396:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	889b      	ldrh	r3, [r3, #4]
 800f39c:	0adb      	lsrs	r3, r3, #11
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	68fa      	ldr	r2, [r7, #12]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	681a      	ldr	r2, [r3, #0]
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4413      	add	r3, r2
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3714      	adds	r7, #20
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr

0800f3ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f3ba:	b480      	push	{r7}
 800f3bc:	b089      	sub	sp, #36	; 0x24
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	60f8      	str	r0, [r7, #12]
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	607a      	str	r2, [r7, #4]
 800f3c6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d003      	beq.n	800f3d6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	7b1b      	ldrb	r3, [r3, #12]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d101      	bne.n	800f3da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	e030      	b.n	800f43c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	69da      	ldr	r2, [r3, #28]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	7b5b      	ldrb	r3, [r3, #13]
 800f3e6:	021b      	lsls	r3, r3, #8
 800f3e8:	b21b      	sxth	r3, r3
 800f3ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f3ee:	b219      	sxth	r1, r3
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	7adb      	ldrb	r3, [r3, #11]
 800f3f4:	b21b      	sxth	r3, r3
 800f3f6:	430b      	orrs	r3, r1
 800f3f8:	b21b      	sxth	r3, r3
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	4413      	add	r3, r2
 800f400:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	7b1b      	ldrb	r3, [r3, #12]
 800f406:	837b      	strh	r3, [r7, #26]
 800f408:	8b7b      	ldrh	r3, [r7, #26]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d015      	beq.n	800f43a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	881b      	ldrh	r3, [r3, #0]
 800f412:	897a      	ldrh	r2, [r7, #10]
 800f414:	429a      	cmp	r2, r3
 800f416:	d103      	bne.n	800f420 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f41e:	e00d      	b.n	800f43c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	881b      	ldrh	r3, [r3, #0]
 800f424:	897a      	ldrh	r2, [r7, #10]
 800f426:	429a      	cmp	r2, r3
 800f428:	d306      	bcc.n	800f438 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f42a:	8b7b      	ldrh	r3, [r7, #26]
 800f42c:	3b01      	subs	r3, #1
 800f42e:	837b      	strh	r3, [r7, #26]
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	3304      	adds	r3, #4
 800f434:	61fb      	str	r3, [r7, #28]
 800f436:	e7e7      	b.n	800f408 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800f438:	bf00      	nop
        }
    }
    return 0;
 800f43a:	2300      	movs	r3, #0
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3724      	adds	r7, #36	; 0x24
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_18_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_18_4bpp();

touchgfx::GeneratedFont& getFont_verdana_18_4bpp()
{
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 6, 18, 0, 4, 1, 0, 0, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0);
 800f448:	b580      	push	{r7, lr}
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	4801      	ldr	r0, [pc, #4]	; (800f454 <__tcf_0+0xc>)
 800f44e:	f7ff ff17 	bl	800f280 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f452:	bd80      	pop	{r7, pc}
 800f454:	2000853c 	.word	0x2000853c

0800f458 <_Z23getFont_verdana_18_4bppv>:
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b08a      	sub	sp, #40	; 0x28
 800f45c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 6, 18, 0, 4, 1, 0, 0, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0);
 800f45e:	4b15      	ldr	r3, [pc, #84]	; (800f4b4 <_Z23getFont_verdana_18_4bppv+0x5c>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f003 0301 	and.w	r3, r3, #1
 800f466:	2b00      	cmp	r3, #0
 800f468:	d11f      	bne.n	800f4aa <_Z23getFont_verdana_18_4bppv+0x52>
 800f46a:	2300      	movs	r3, #0
 800f46c:	9309      	str	r3, [sp, #36]	; 0x24
 800f46e:	2300      	movs	r3, #0
 800f470:	9308      	str	r3, [sp, #32]
 800f472:	233f      	movs	r3, #63	; 0x3f
 800f474:	9307      	str	r3, [sp, #28]
 800f476:	4b10      	ldr	r3, [pc, #64]	; (800f4b8 <_Z23getFont_verdana_18_4bppv+0x60>)
 800f478:	9306      	str	r3, [sp, #24]
 800f47a:	4b10      	ldr	r3, [pc, #64]	; (800f4bc <_Z23getFont_verdana_18_4bppv+0x64>)
 800f47c:	9305      	str	r3, [sp, #20]
 800f47e:	2300      	movs	r3, #0
 800f480:	9304      	str	r3, [sp, #16]
 800f482:	2300      	movs	r3, #0
 800f484:	9303      	str	r3, [sp, #12]
 800f486:	2301      	movs	r3, #1
 800f488:	9302      	str	r3, [sp, #8]
 800f48a:	2304      	movs	r3, #4
 800f48c:	9301      	str	r3, [sp, #4]
 800f48e:	2300      	movs	r3, #0
 800f490:	9300      	str	r3, [sp, #0]
 800f492:	2312      	movs	r3, #18
 800f494:	2206      	movs	r2, #6
 800f496:	490a      	ldr	r1, [pc, #40]	; (800f4c0 <_Z23getFont_verdana_18_4bppv+0x68>)
 800f498:	480a      	ldr	r0, [pc, #40]	; (800f4c4 <_Z23getFont_verdana_18_4bppv+0x6c>)
 800f49a:	f7ff ff3f 	bl	800f31c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f49e:	4b05      	ldr	r3, [pc, #20]	; (800f4b4 <_Z23getFont_verdana_18_4bppv+0x5c>)
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	601a      	str	r2, [r3, #0]
 800f4a4:	4808      	ldr	r0, [pc, #32]	; (800f4c8 <_Z23getFont_verdana_18_4bppv+0x70>)
 800f4a6:	f018 f89f 	bl	80275e8 <atexit>
    return verdana_18_4bpp;
 800f4aa:	4b06      	ldr	r3, [pc, #24]	; (800f4c4 <_Z23getFont_verdana_18_4bppv+0x6c>)
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	20008560 	.word	0x20008560
 800f4b8:	0802eee0 	.word	0x0802eee0
 800f4bc:	08028f48 	.word	0x08028f48
 800f4c0:	0802ef60 	.word	0x0802ef60
 800f4c4:	2000853c 	.word	0x2000853c
 800f4c8:	0800f449 	.word	0x0800f449

0800f4cc <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 34, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	4801      	ldr	r0, [pc, #4]	; (800f4d8 <__tcf_0+0xc>)
 800f4d2:	f7ff fed5 	bl	800f280 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	20008564 	.word	0x20008564

0800f4dc <_Z23getFont_verdana_20_4bppv>:
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b08a      	sub	sp, #40	; 0x28
 800f4e0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 34, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800f4e2:	4b15      	ldr	r3, [pc, #84]	; (800f538 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f003 0301 	and.w	r3, r3, #1
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d11f      	bne.n	800f52e <_Z23getFont_verdana_20_4bppv+0x52>
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	9308      	str	r3, [sp, #32]
 800f4f6:	233f      	movs	r3, #63	; 0x3f
 800f4f8:	9307      	str	r3, [sp, #28]
 800f4fa:	4b10      	ldr	r3, [pc, #64]	; (800f53c <_Z23getFont_verdana_20_4bppv+0x60>)
 800f4fc:	9306      	str	r3, [sp, #24]
 800f4fe:	4b10      	ldr	r3, [pc, #64]	; (800f540 <_Z23getFont_verdana_20_4bppv+0x64>)
 800f500:	9305      	str	r3, [sp, #20]
 800f502:	2301      	movs	r3, #1
 800f504:	9304      	str	r3, [sp, #16]
 800f506:	2300      	movs	r3, #0
 800f508:	9303      	str	r3, [sp, #12]
 800f50a:	2301      	movs	r3, #1
 800f50c:	9302      	str	r3, [sp, #8]
 800f50e:	2304      	movs	r3, #4
 800f510:	9301      	str	r3, [sp, #4]
 800f512:	2300      	movs	r3, #0
 800f514:	9300      	str	r3, [sp, #0]
 800f516:	2314      	movs	r3, #20
 800f518:	2222      	movs	r2, #34	; 0x22
 800f51a:	490a      	ldr	r1, [pc, #40]	; (800f544 <_Z23getFont_verdana_20_4bppv+0x68>)
 800f51c:	480a      	ldr	r0, [pc, #40]	; (800f548 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800f51e:	f7ff fefd 	bl	800f31c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f522:	4b05      	ldr	r3, [pc, #20]	; (800f538 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800f524:	2201      	movs	r2, #1
 800f526:	601a      	str	r2, [r3, #0]
 800f528:	4808      	ldr	r0, [pc, #32]	; (800f54c <_Z23getFont_verdana_20_4bppv+0x70>)
 800f52a:	f018 f85d 	bl	80275e8 <atexit>
    return verdana_20_4bpp;
 800f52e:	4b06      	ldr	r3, [pc, #24]	; (800f548 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800f530:	4618      	mov	r0, r3
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	20008588 	.word	0x20008588
 800f53c:	0802eee4 	.word	0x0802eee4
 800f540:	08028f4c 	.word	0x08028f4c
 800f544:	0802efb4 	.word	0x0802efb4
 800f548:	20008564 	.word	0x20008564
 800f54c:	0800f4cd 	.word	0x0800f4cd

0800f550 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_27_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_27_4bpp();

touchgfx::GeneratedFont& getFont_verdana_27_4bpp()
{
    static touchgfx::GeneratedFont verdana_27_4bpp(glyphs_verdana_27_4bpp, 7, 27, 5, 4, 1, 0, 0, unicodes_verdana_27_4bpp, kerning_verdana_27_4bpp, 63, 0, 0);
 800f550:	b580      	push	{r7, lr}
 800f552:	af00      	add	r7, sp, #0
 800f554:	4801      	ldr	r0, [pc, #4]	; (800f55c <__tcf_0+0xc>)
 800f556:	f7ff fe93 	bl	800f280 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	2000858c 	.word	0x2000858c

0800f560 <_Z23getFont_verdana_27_4bppv>:
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b08a      	sub	sp, #40	; 0x28
 800f564:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_27_4bpp(glyphs_verdana_27_4bpp, 7, 27, 5, 4, 1, 0, 0, unicodes_verdana_27_4bpp, kerning_verdana_27_4bpp, 63, 0, 0);
 800f566:	4b15      	ldr	r3, [pc, #84]	; (800f5bc <_Z23getFont_verdana_27_4bppv+0x5c>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f003 0301 	and.w	r3, r3, #1
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d11f      	bne.n	800f5b2 <_Z23getFont_verdana_27_4bppv+0x52>
 800f572:	2300      	movs	r3, #0
 800f574:	9309      	str	r3, [sp, #36]	; 0x24
 800f576:	2300      	movs	r3, #0
 800f578:	9308      	str	r3, [sp, #32]
 800f57a:	233f      	movs	r3, #63	; 0x3f
 800f57c:	9307      	str	r3, [sp, #28]
 800f57e:	4b10      	ldr	r3, [pc, #64]	; (800f5c0 <_Z23getFont_verdana_27_4bppv+0x60>)
 800f580:	9306      	str	r3, [sp, #24]
 800f582:	4b10      	ldr	r3, [pc, #64]	; (800f5c4 <_Z23getFont_verdana_27_4bppv+0x64>)
 800f584:	9305      	str	r3, [sp, #20]
 800f586:	2300      	movs	r3, #0
 800f588:	9304      	str	r3, [sp, #16]
 800f58a:	2300      	movs	r3, #0
 800f58c:	9303      	str	r3, [sp, #12]
 800f58e:	2301      	movs	r3, #1
 800f590:	9302      	str	r3, [sp, #8]
 800f592:	2304      	movs	r3, #4
 800f594:	9301      	str	r3, [sp, #4]
 800f596:	2305      	movs	r3, #5
 800f598:	9300      	str	r3, [sp, #0]
 800f59a:	231b      	movs	r3, #27
 800f59c:	2207      	movs	r2, #7
 800f59e:	490a      	ldr	r1, [pc, #40]	; (800f5c8 <_Z23getFont_verdana_27_4bppv+0x68>)
 800f5a0:	480a      	ldr	r0, [pc, #40]	; (800f5cc <_Z23getFont_verdana_27_4bppv+0x6c>)
 800f5a2:	f7ff febb 	bl	800f31c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f5a6:	4b05      	ldr	r3, [pc, #20]	; (800f5bc <_Z23getFont_verdana_27_4bppv+0x5c>)
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	601a      	str	r2, [r3, #0]
 800f5ac:	4808      	ldr	r0, [pc, #32]	; (800f5d0 <_Z23getFont_verdana_27_4bppv+0x70>)
 800f5ae:	f018 f81b 	bl	80275e8 <atexit>
    return verdana_27_4bpp;
 800f5b2:	4b06      	ldr	r3, [pc, #24]	; (800f5cc <_Z23getFont_verdana_27_4bppv+0x6c>)
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	200085b0 	.word	0x200085b0
 800f5c0:	0802ef18 	.word	0x0802ef18
 800f5c4:	08028f50 	.word	0x08028f50
 800f5c8:	0802f190 	.word	0x0802f190
 800f5cc:	2000858c 	.word	0x2000858c
 800f5d0:	0800f551 	.word	0x0800f551

0800f5d4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	af00      	add	r7, sp, #0
 800f5d8:	4801      	ldr	r0, [pc, #4]	; (800f5e0 <__tcf_0+0xc>)
 800f5da:	f7ff fe51 	bl	800f280 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f5de:	bd80      	pop	{r7, pc}
 800f5e0:	200085b4 	.word	0x200085b4

0800f5e4 <_Z23getFont_verdana_40_4bppv>:
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b08a      	sub	sp, #40	; 0x28
 800f5e8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800f5ea:	4b15      	ldr	r3, [pc, #84]	; (800f640 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f003 0301 	and.w	r3, r3, #1
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d11f      	bne.n	800f636 <_Z23getFont_verdana_40_4bppv+0x52>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	9308      	str	r3, [sp, #32]
 800f5fe:	233f      	movs	r3, #63	; 0x3f
 800f600:	9307      	str	r3, [sp, #28]
 800f602:	4b10      	ldr	r3, [pc, #64]	; (800f644 <_Z23getFont_verdana_40_4bppv+0x60>)
 800f604:	9306      	str	r3, [sp, #24]
 800f606:	4b10      	ldr	r3, [pc, #64]	; (800f648 <_Z23getFont_verdana_40_4bppv+0x64>)
 800f608:	9305      	str	r3, [sp, #20]
 800f60a:	2301      	movs	r3, #1
 800f60c:	9304      	str	r3, [sp, #16]
 800f60e:	2300      	movs	r3, #0
 800f610:	9303      	str	r3, [sp, #12]
 800f612:	2301      	movs	r3, #1
 800f614:	9302      	str	r3, [sp, #8]
 800f616:	2304      	movs	r3, #4
 800f618:	9301      	str	r3, [sp, #4]
 800f61a:	2308      	movs	r3, #8
 800f61c:	9300      	str	r3, [sp, #0]
 800f61e:	2328      	movs	r3, #40	; 0x28
 800f620:	2212      	movs	r2, #18
 800f622:	490a      	ldr	r1, [pc, #40]	; (800f64c <_Z23getFont_verdana_40_4bppv+0x68>)
 800f624:	480a      	ldr	r0, [pc, #40]	; (800f650 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800f626:	f7ff fe79 	bl	800f31c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f62a:	4b05      	ldr	r3, [pc, #20]	; (800f640 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800f62c:	2201      	movs	r2, #1
 800f62e:	601a      	str	r2, [r3, #0]
 800f630:	4808      	ldr	r0, [pc, #32]	; (800f654 <_Z23getFont_verdana_40_4bppv+0x70>)
 800f632:	f017 ffd9 	bl	80275e8 <atexit>
    return verdana_40_4bpp;
 800f636:	4b06      	ldr	r3, [pc, #24]	; (800f650 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800f638:	4618      	mov	r0, r3
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	200085d8 	.word	0x200085d8
 800f644:	0802ef20 	.word	0x0802ef20
 800f648:	08028f54 	.word	0x08028f54
 800f64c:	0802f1f4 	.word	0x0802f1f4
 800f650:	200085b4 	.word	0x200085b4
 800f654:	0800f5d5 	.word	0x0800f5d5

0800f658 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	4618      	mov	r0, r3
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2200      	movs	r2, #0
 800f67c:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2200      	movs	r2, #0
 800f682:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2200      	movs	r2, #0
 800f688:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2200      	movs	r2, #0
 800f68e:	80da      	strh	r2, [r3, #6]
    }
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4618      	mov	r0, r3
 800f694:	370c      	adds	r7, #12
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr

0800f69e <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800f69e:	b480      	push	{r7}
 800f6a0:	b085      	sub	sp, #20
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	60f8      	str	r0, [r7, #12]
 800f6a6:	4608      	mov	r0, r1
 800f6a8:	4611      	mov	r1, r2
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	817b      	strh	r3, [r7, #10]
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	813b      	strh	r3, [r7, #8]
 800f6b4:	4613      	mov	r3, r2
 800f6b6:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	897a      	ldrh	r2, [r7, #10]
 800f6bc:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	893a      	ldrh	r2, [r7, #8]
 800f6c2:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	88fa      	ldrh	r2, [r7, #6]
 800f6c8:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	8b3a      	ldrh	r2, [r7, #24]
 800f6ce:	80da      	strh	r2, [r3, #6]
    }
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3714      	adds	r7, #20
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr

0800f6de <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f6de:	b480      	push	{r7}
 800f6e0:	b083      	sub	sp, #12
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
 800f6e6:	6039      	str	r1, [r7, #0]
    {
    }
 800f6e8:	bf00      	nop
 800f6ea:	370c      	adds	r7, #12
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr

0800f6f4 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f6f4:	b480      	push	{r7}
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
    {
    }
 800f6fe:	bf00      	nop
 800f700:	370c      	adds	r7, #12
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr

0800f70a <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f70a:	b480      	push	{r7}
 800f70c:	b083      	sub	sp, #12
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
 800f712:	6039      	str	r1, [r7, #0]
    {
    }
 800f714:	bf00      	nop
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f720:	b480      	push	{r7}
 800f722:	b083      	sub	sp, #12
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	460b      	mov	r3, r1
 800f72a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f72c:	bf00      	nop
 800f72e:	370c      	adds	r7, #12
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
    {
    }
 800f740:	bf00      	nop
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
    {
    }
 800f754:	bf00      	nop
 800f756:	370c      	adds	r7, #12
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr

0800f760 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800f760:	b480      	push	{r7}
 800f762:	b083      	sub	sp, #12
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
    {
 800f768:	4a04      	ldr	r2, [pc, #16]	; (800f77c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	601a      	str	r2, [r3, #0]
    }
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4618      	mov	r0, r3
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr
 800f77c:	080291c0 	.word	0x080291c0

0800f780 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
    }
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f7ff ffe9 	bl	800f760 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f78e:	2104      	movs	r1, #4
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f017 fedf 	bl	8027554 <_ZdlPvj>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	4618      	mov	r0, r3
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800f7a8:	4a07      	ldr	r2, [pc, #28]	; (800f7c8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	601a      	str	r2, [r3, #0]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	605a      	str	r2, [r3, #4]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	721a      	strb	r2, [r3, #8]
    {
    }
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	370c      	adds	r7, #12
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr
 800f7c8:	080291a0 	.word	0x080291a0

0800f7cc <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800f7cc:	b480      	push	{r7}
 800f7ce:	b083      	sub	sp, #12
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
    {
 800f7d4:	4a04      	ldr	r2, [pc, #16]	; (800f7e8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	601a      	str	r2, [r3, #0]
    }
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	370c      	adds	r7, #12
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr
 800f7e8:	080291a0 	.word	0x080291a0

0800f7ec <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
    }
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f7ff ffe9 	bl	800f7cc <_ZN8touchgfx10TransitionD1Ev>
 800f7fa:	210c      	movs	r1, #12
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f017 fea9 	bl	8027554 <_ZdlPvj>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4618      	mov	r0, r3
 800f806:	3708      	adds	r7, #8
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
    {
    }
 800f814:	bf00      	nop
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
    {
    }
 800f828:	bf00      	nop
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
    {
    }
 800f83c:	bf00      	nop
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr

0800f848 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	683a      	ldr	r2, [r7, #0]
 800f856:	605a      	str	r2, [r3, #4]
    }
 800f858:	bf00      	nop
 800f85a:	370c      	adds	r7, #12
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	460b      	mov	r3, r1
 800f86e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f870:	bf00      	nop
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr

0800f87c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800f87c:	b480      	push	{r7}
 800f87e:	b083      	sub	sp, #12
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	683a      	ldr	r2, [r7, #0]
 800f88a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800f88e:	6810      	ldr	r0, [r2, #0]
 800f890:	6851      	ldr	r1, [r2, #4]
 800f892:	c303      	stmia	r3!, {r0, r1}
    };
 800f894:	bf00      	nop
 800f896:	370c      	adds	r7, #12
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr

0800f8a0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
    {
 800f8a8:	4a04      	ldr	r2, [pc, #16]	; (800f8bc <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	601a      	str	r2, [r3, #0]
    }
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	08029188 	.word	0x08029188

0800f8c0 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
    }
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f7ff ffe9 	bl	800f8a0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f8ce:	2104      	movs	r1, #4
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f017 fe3f 	bl	8027554 <_ZdlPvj>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3708      	adds	r7, #8
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af02      	add	r7, sp, #8
 800f8e6:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800f8e8:	4a13      	ldr	r2, [pc, #76]	; (800f938 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	601a      	str	r2, [r3, #0]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	1d18      	adds	r0, r3, #4
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	9300      	str	r3, [sp, #0]
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	2100      	movs	r1, #0
 800f8fc:	f7ff fecf 	bl	800f69e <_ZN8touchgfx4RectC1Essss>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	330c      	adds	r3, #12
 800f904:	4618      	mov	r0, r3
 800f906:	f7ff feb3 	bl	800f670 <_ZN8touchgfx4RectC1Ev>
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2200      	movs	r2, #0
 800f90e:	615a      	str	r2, [r3, #20]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2200      	movs	r2, #0
 800f914:	619a      	str	r2, [r3, #24]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2200      	movs	r2, #0
 800f91a:	61da      	str	r2, [r3, #28]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2200      	movs	r2, #0
 800f920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2201      	movs	r2, #1
 800f928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4618      	mov	r0, r3
 800f930:	3708      	adds	r7, #8
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	0802baa0 	.word	0x0802baa0

0800f93c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
    {
 800f944:	4a04      	ldr	r2, [pc, #16]	; (800f958 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	601a      	str	r2, [r3, #0]
    }
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	4618      	mov	r0, r3
 800f94e:	370c      	adds	r7, #12
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr
 800f958:	0802baa0 	.word	0x0802baa0

0800f95c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
    }
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f7ff ffe9 	bl	800f93c <_ZN8touchgfx8DrawableD1Ev>
 800f96a:	2128      	movs	r1, #40	; 0x28
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f017 fdf1 	bl	8027554 <_ZdlPvj>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	4618      	mov	r0, r3
 800f976:	3708      	adds	r7, #8
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	4608      	mov	r0, r1
 800f986:	4611      	mov	r1, r2
 800f988:	461a      	mov	r2, r3
 800f98a:	4603      	mov	r3, r0
 800f98c:	817b      	strh	r3, [r7, #10]
 800f98e:	460b      	mov	r3, r1
 800f990:	813b      	strh	r3, [r7, #8]
 800f992:	4613      	mov	r3, r2
 800f994:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	3334      	adds	r3, #52	; 0x34
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f9a2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f9a6:	68f8      	ldr	r0, [r7, #12]
 800f9a8:	4798      	blx	r3
        setWidth(width);
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	3338      	adds	r3, #56	; 0x38
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f9b6:	4611      	mov	r1, r2
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	4798      	blx	r3
        setHeight(height);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	333c      	adds	r3, #60	; 0x3c
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f9c8:	4611      	mov	r1, r2
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	4798      	blx	r3
    }
 800f9ce:	bf00      	nop
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800f9d6:	b480      	push	{r7}
 800f9d8:	b083      	sub	sp, #12
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	370c      	adds	r7, #12
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800f9fe:	4618      	mov	r0, r3
 800fa00:	370c      	adds	r7, #12
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800fa0a:	b480      	push	{r7}
 800fa0c:	b083      	sub	sp, #12
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
 800fa12:	460b      	mov	r3, r1
 800fa14:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	887a      	ldrh	r2, [r7, #2]
 800fa1a:	809a      	strh	r2, [r3, #4]
    }
 800fa1c:	bf00      	nop
 800fa1e:	370c      	adds	r7, #12
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800fa28:	b480      	push	{r7}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	460b      	mov	r3, r1
 800fa32:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	887a      	ldrh	r2, [r7, #2]
 800fa38:	80da      	strh	r2, [r3, #6]
    }
 800fa3a:	bf00      	nop
 800fa3c:	370c      	adds	r7, #12
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr

0800fa46 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800fa46:	b580      	push	{r7, lr}
 800fa48:	b082      	sub	sp, #8
 800fa4a:	af00      	add	r7, sp, #0
 800fa4c:	6078      	str	r0, [r7, #4]
 800fa4e:	460b      	mov	r3, r1
 800fa50:	807b      	strh	r3, [r7, #2]
 800fa52:	4613      	mov	r3, r2
 800fa54:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	332c      	adds	r3, #44	; 0x2c
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fa62:	4611      	mov	r1, r2
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	4798      	blx	r3
        setY(y);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	3330      	adds	r3, #48	; 0x30
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f9b7 2000 	ldrsh.w	r2, [r7]
 800fa74:	4611      	mov	r1, r2
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	4798      	blx	r3
    }
 800fa7a:	bf00      	nop
 800fa7c:	3708      	adds	r7, #8
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800fa82:	b480      	push	{r7}
 800fa84:	b083      	sub	sp, #12
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
 800fa8a:	460b      	mov	r3, r1
 800fa8c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	887a      	ldrh	r2, [r7, #2]
 800fa92:	811a      	strh	r2, [r3, #8]
    }
 800fa94:	bf00      	nop
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	460b      	mov	r3, r1
 800faaa:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	887a      	ldrh	r2, [r7, #2]
 800fab0:	815a      	strh	r2, [r3, #10]
    }
 800fab2:	bf00      	nop
 800fab4:	370c      	adds	r7, #12
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr

0800fabe <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800fabe:	b480      	push	{r7}
 800fac0:	b083      	sub	sp, #12
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
    {
    }
 800fac6:	bf00      	nop
 800fac8:	370c      	adds	r7, #12
 800faca:	46bd      	mov	sp, r7
 800facc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad0:	4770      	bx	lr

0800fad2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800fad2:	b480      	push	{r7}
 800fad4:	b083      	sub	sp, #12
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
 800fada:	6039      	str	r1, [r7, #0]
    {
    }
 800fadc:	bf00      	nop
 800fade:	370c      	adds	r7, #12
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
    {
    }
 800faf2:	bf00      	nop
 800faf4:	370c      	adds	r7, #12
 800faf6:	46bd      	mov	sp, r7
 800faf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafc:	4770      	bx	lr

0800fafe <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800fafe:	b480      	push	{r7}
 800fb00:	b083      	sub	sp, #12
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
 800fb06:	6039      	str	r1, [r7, #0]
    {
    }
 800fb08:	bf00      	nop
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr

0800fb14 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
    {
    }
 800fb1c:	bf00      	nop
 800fb1e:	370c      	adds	r7, #12
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800fb36:	4618      	mov	r0, r3
 800fb38:	370c      	adds	r7, #12
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr

0800fb42 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800fb42:	b480      	push	{r7}
 800fb44:	b083      	sub	sp, #12
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800fb50:	4618      	mov	r0, r3
 800fb52:	370c      	adds	r7, #12
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr

0800fb5c <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	460b      	mov	r3, r1
 800fb66:	807b      	strh	r3, [r7, #2]
 800fb68:	4613      	mov	r3, r2
 800fb6a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	3354      	adds	r3, #84	; 0x54
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	8879      	ldrh	r1, [r7, #2]
 800fb76:	687a      	ldr	r2, [r7, #4]
 800fb78:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800fb7c:	b292      	uxth	r2, r2
 800fb7e:	1a8a      	subs	r2, r1, r2
 800fb80:	b292      	uxth	r2, r2
 800fb82:	b210      	sxth	r0, r2
 800fb84:	8839      	ldrh	r1, [r7, #0]
 800fb86:	687a      	ldr	r2, [r7, #4]
 800fb88:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800fb8c:	b292      	uxth	r2, r2
 800fb8e:	1a8a      	subs	r2, r1, r2
 800fb90:	b292      	uxth	r2, r2
 800fb92:	b212      	sxth	r2, r2
 800fb94:	4601      	mov	r1, r0
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	4798      	blx	r3
    }
 800fb9a:	bf00      	nop
 800fb9c:	3708      	adds	r7, #8
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800fba2:	b480      	push	{r7}
 800fba4:	b083      	sub	sp, #12
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbb0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbb8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbc0:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800fbc2:	bf00      	nop
 800fbc4:	370c      	adds	r7, #12
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr

0800fbce <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800fbce:	b580      	push	{r7, lr}
 800fbd0:	b084      	sub	sp, #16
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	60f8      	str	r0, [r7, #12]
 800fbd6:	60b9      	str	r1, [r7, #8]
 800fbd8:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800fbda:	68f8      	ldr	r0, [r7, #12]
 800fbdc:	f7ff ffe1 	bl	800fba2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	68fa      	ldr	r2, [r7, #12]
 800fbec:	601a      	str	r2, [r3, #0]
    }
 800fbee:	bf00      	nop
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
	...

0800fbf8 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800fbf8:	b480      	push	{r7}
 800fbfa:	af00      	add	r7, sp, #0
    {
        return instance;
 800fbfc:	4b03      	ldr	r3, [pc, #12]	; (800fc0c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
    }
 800fc00:	4618      	mov	r0, r3
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	2000b314 	.word	0x2000b314

0800fc10 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800fc10:	b480      	push	{r7}
 800fc12:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800fc14:	4b0b      	ldr	r3, [pc, #44]	; (800fc44 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d008      	beq.n	800fc32 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fc20:	4b08      	ldr	r3, [pc, #32]	; (800fc44 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d003      	beq.n	800fc32 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fc2a:	4b06      	ldr	r3, [pc, #24]	; (800fc44 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc30:	e002      	b.n	800fc38 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800fc32:	4b04      	ldr	r3, [pc, #16]	; (800fc44 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	689b      	ldr	r3, [r3, #8]
        }
    }
 800fc38:	4618      	mov	r0, r3
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	2000b314 	.word	0x2000b314

0800fc48 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	4a05      	ldr	r2, [pc, #20]	; (800fc68 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	601a      	str	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7ff fd81 	bl	800f760 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	4618      	mov	r0, r3
 800fc62:	3708      	adds	r7, #8
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}
 800fc68:	0802b9b0 	.word	0x0802b9b0

0800fc6c <_ZN8touchgfx11ApplicationD0Ev>:
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f7ff ffe7 	bl	800fc48 <_ZN8touchgfx11ApplicationD1Ev>
 800fc7a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f017 fc68 	bl	8027554 <_ZdlPvj>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	4618      	mov	r0, r3
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
	...

0800fc90 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f00b fb3e 	bl	801b31c <_ZN8touchgfx11ApplicationC1Ev>
 800fca0:	4a09      	ldr	r2, [pc, #36]	; (800fcc8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	601a      	str	r2, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	4a04      	ldr	r2, [pc, #16]	; (800fccc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fcba:	6013      	str	r3, [r2, #0]
    }
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	08029144 	.word	0x08029144
 800fccc:	2000b3a0 	.word	0x2000b3a0

0800fcd0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f000 f804 	bl	800fce6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fcde:	bf00      	nop
 800fce0:	3708      	adds	r7, #8
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}

0800fce6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fce6:	b580      	push	{r7, lr}
 800fce8:	b082      	sub	sp, #8
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00f      	beq.n	800fd18 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	330c      	adds	r3, #12
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4610      	mov	r0, r2
 800fd0c:	4798      	blx	r3
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d001      	beq.n	800fd18 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fd14:	2301      	movs	r3, #1
 800fd16:	e000      	b.n	800fd1a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fd18:	2300      	movs	r3, #0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d00e      	beq.n	800fd3c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	3308      	adds	r3, #8
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4610      	mov	r0, r2
 800fd32:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800fd3c:	bf00      	nop
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	683a      	ldr	r2, [r7, #0]
 800fd52:	601a      	str	r2, [r3, #0]
    }
 800fd54:	bf00      	nop
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	4a05      	ldr	r2, [pc, #20]	; (800fd80 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	601a      	str	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7ff ff69 	bl	800fc48 <_ZN8touchgfx11ApplicationD1Ev>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	08029144 	.word	0x08029144

0800fd84 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f7ff ffe7 	bl	800fd60 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fd92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f017 fbdc 	bl	8027554 <_ZdlPvj>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3708      	adds	r7, #8
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
	...

0800fda8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	4a08      	ldr	r2, [pc, #32]	; (800fdd4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	601a      	str	r2, [r3, #0]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f001 fc97 	bl	80116f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7ff ffcb 	bl	800fd60 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3708      	adds	r7, #8
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	080290e8 	.word	0x080290e8

0800fdd8 <_ZN23FrontendApplicationBaseD0Ev>:
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f7ff ffe1 	bl	800fda8 <_ZN23FrontendApplicationBaseD1Ev>
 800fde6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f017 fbb2 	bl	8027554 <_ZdlPvj>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3708      	adds	r7, #8
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}

0800fdfa <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800fdfa:	b480      	push	{r7}
 800fdfc:	b083      	sub	sp, #12
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2201      	movs	r2, #1
 800fe06:	721a      	strb	r2, [r3, #8]
    }
 800fe08:	bf00      	nop
 800fe0a:	370c      	adds	r7, #12
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe12:	4770      	bx	lr

0800fe14 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	607b      	str	r3, [r7, #4]
 800fe1e:	460b      	mov	r3, r1
 800fe20:	817b      	strh	r3, [r7, #10]
 800fe22:	4613      	mov	r3, r2
 800fe24:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7ff fe7d 	bl	800fb28 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d008      	beq.n	800fe46 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7ff fe83 	bl	800fb42 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d001      	beq.n	800fe46 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fe42:	2301      	movs	r3, #1
 800fe44:	e000      	b.n	800fe48 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800fe46:	2300      	movs	r3, #0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d002      	beq.n	800fe52 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	601a      	str	r2, [r3, #0]
        }
    }
 800fe52:	bf00      	nop
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}

0800fe5a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800fe5a:	b480      	push	{r7}
 800fe5c:	b083      	sub	sp, #12
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	6078      	str	r0, [r7, #4]
 800fe62:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	683a      	ldr	r2, [r7, #0]
 800fe68:	605a      	str	r2, [r3, #4]
    }
 800fe6a:	bf00      	nop
 800fe6c:	370c      	adds	r7, #12
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr
	...

0800fe78 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7ff fd2c 	bl	800f8e0 <_ZN8touchgfx8DrawableC1Ev>
 800fe88:	4a03      	ldr	r2, [pc, #12]	; (800fe98 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	601a      	str	r2, [r3, #0]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4618      	mov	r0, r3
 800fe92:	3708      	adds	r7, #8
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	08029060 	.word	0x08029060

0800fe9c <_ZN8touchgfx6WidgetD1Ev>:
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	4a05      	ldr	r2, [pc, #20]	; (800febc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	601a      	str	r2, [r3, #0]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	4618      	mov	r0, r3
 800feae:	f7ff fd45 	bl	800f93c <_ZN8touchgfx8DrawableD1Ev>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	4618      	mov	r0, r3
 800feb6:	3708      	adds	r7, #8
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}
 800febc:	08029060 	.word	0x08029060

0800fec0 <_ZN8touchgfx6WidgetD0Ev>:
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f7ff ffe7 	bl	800fe9c <_ZN8touchgfx6WidgetD1Ev>
 800fece:	2128      	movs	r1, #40	; 0x28
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f017 fb3f 	bl	8027554 <_ZdlPvj>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4618      	mov	r0, r3
 800feda:	3708      	adds	r7, #8
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/pong_screen/PongView.hpp>
#include <gui/pong_screen/PongPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b084      	sub	sp, #16
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	4618      	mov	r0, r3
 800fef0:	f7ff fece 	bl	800fc90 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fef4:	4a13      	ldr	r2, [pc, #76]	; (800ff44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	601a      	str	r2, [r3, #0]
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ff00:	4618      	mov	r0, r3
 800ff02:	f000 f9b7 	bl	8010274 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	68ba      	ldr	r2, [r7, #8]
 800ff12:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800ff16:	f7ff fe6f 	bl	800fbf8 <_ZN8touchgfx3HAL11getInstanceEv>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	6813      	ldr	r3, [r2, #0]
 800ff1e:	3308      	adds	r3, #8
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	2100      	movs	r1, #0
 800ff24:	4610      	mov	r0, r2
 800ff26:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800ff28:	2000      	movs	r0, #0
 800ff2a:	f004 fe2f 	bl	8014b8c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800ff2e:	f7ff fe6f 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 800ff32:	4603      	mov	r3, r0
 800ff34:	4618      	mov	r0, r3
 800ff36:	f011 f812 	bl	8020f5e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	080290e8 	.word	0x080290e8

0800ff48 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800ff48:	b480      	push	{r7}
 800ff4a:	b083      	sub	sp, #12
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	6039      	str	r1, [r7, #0]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4618      	mov	r0, r3
 800ff56:	370c      	adds	r7, #12
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr

0800ff60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	683a      	ldr	r2, [r7, #0]
 800ff6e:	4611      	mov	r1, r2
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7ff ffe9 	bl	800ff48 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	685a      	ldr	r2, [r3, #4]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	605a      	str	r2, [r3, #4]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	683a      	ldr	r2, [r7, #0]
 800ff82:	3308      	adds	r3, #8
 800ff84:	3208      	adds	r2, #8
 800ff86:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff8a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	4618      	mov	r0, r3
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800ff98:	b590      	push	{r4, r7, lr}
 800ff9a:	b089      	sub	sp, #36	; 0x24
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ffa6:	4b10      	ldr	r3, [pc, #64]	; (800ffe8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800ffa8:	61bb      	str	r3, [r7, #24]
 800ffaa:	2300      	movs	r3, #0
 800ffac:	61fb      	str	r3, [r7, #28]
 800ffae:	f107 0008 	add.w	r0, r7, #8
 800ffb2:	f107 0318 	add.w	r3, r7, #24
 800ffb6:	cb0c      	ldmia	r3, {r2, r3}
 800ffb8:	6879      	ldr	r1, [r7, #4]
 800ffba:	f000 f977 	bl	80102ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ffbe:	f107 0308 	add.w	r3, r7, #8
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	f7ff ffcb 	bl	800ff60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ffca:	f107 0308 	add.w	r3, r7, #8
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f001 fb8e 	bl	80116f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ffe0:	bf00      	nop
 800ffe2:	3724      	adds	r7, #36	; 0x24
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd90      	pop	{r4, r7, pc}
 800ffe8:	0800ffed 	.word	0x0800ffed

0800ffec <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af02      	add	r7, sp, #8
 800fff2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010000:	461a      	mov	r2, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010008:	9300      	str	r3, [sp, #0]
 801000a:	4b04      	ldr	r3, [pc, #16]	; (801001c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 801000e:	f000 f97f 	bl	8010310 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8010012:	bf00      	nop
 8010014:	3708      	adds	r7, #8
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	2000b394 	.word	0x2000b394
 8010020:	2000b390 	.word	0x2000b390

08010024 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEast()
{
 8010024:	b590      	push	{r4, r7, lr}
 8010026:	b089      	sub	sp, #36	; 0x24
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenSlideTransitionEastImpl);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8010032:	4b10      	ldr	r3, [pc, #64]	; (8010074 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv+0x50>)
 8010034:	61bb      	str	r3, [r7, #24]
 8010036:	2300      	movs	r3, #0
 8010038:	61fb      	str	r3, [r7, #28]
 801003a:	f107 0008 	add.w	r0, r7, #8
 801003e:	f107 0318 	add.w	r3, r7, #24
 8010042:	cb0c      	ldmia	r3, {r2, r3}
 8010044:	6879      	ldr	r1, [r7, #4]
 8010046:	f000 f931 	bl	80102ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801004a:	f107 0308 	add.w	r3, r7, #8
 801004e:	4619      	mov	r1, r3
 8010050:	4620      	mov	r0, r4
 8010052:	f7ff ff85 	bl	800ff60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010056:	f107 0308 	add.w	r3, r7, #8
 801005a:	4618      	mov	r0, r3
 801005c:	f001 fb48 	bl	80116f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 801006c:	bf00      	nop
 801006e:	3724      	adds	r7, #36	; 0x24
 8010070:	46bd      	mov	sp, r7
 8010072:	bd90      	pop	{r4, r7, pc}
 8010074:	08010079 	.word	0x08010079

08010078 <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEastImpl()
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af02      	add	r7, sp, #8
 801007e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 801008c:	461a      	mov	r2, r3
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010094:	9300      	str	r3, [sp, #0]
 8010096:	4b04      	ldr	r3, [pc, #16]	; (80100a8 <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x30>)
 8010098:	4804      	ldr	r0, [pc, #16]	; (80100ac <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x34>)
 801009a:	f000 fa65 	bl	8010568 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801009e:	bf00      	nop
 80100a0:	3708      	adds	r7, #8
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	2000b394 	.word	0x2000b394
 80100ac:	2000b390 	.word	0x2000b390

080100b0 <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv>:

// Music

void FrontendApplicationBase::gotoMusicScreenNoTransition()
{
 80100b0:	b590      	push	{r4, r7, lr}
 80100b2:	b089      	sub	sp, #36	; 0x24
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMusicScreenNoTransitionImpl);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80100be:	4b10      	ldr	r3, [pc, #64]	; (8010100 <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv+0x50>)
 80100c0:	61bb      	str	r3, [r7, #24]
 80100c2:	2300      	movs	r3, #0
 80100c4:	61fb      	str	r3, [r7, #28]
 80100c6:	f107 0008 	add.w	r0, r7, #8
 80100ca:	f107 0318 	add.w	r3, r7, #24
 80100ce:	cb0c      	ldmia	r3, {r2, r3}
 80100d0:	6879      	ldr	r1, [r7, #4]
 80100d2:	f000 f8eb 	bl	80102ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80100d6:	f107 0308 	add.w	r3, r7, #8
 80100da:	4619      	mov	r1, r3
 80100dc:	4620      	mov	r0, r4
 80100de:	f7ff ff3f 	bl	800ff60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80100e2:	f107 0308 	add.w	r3, r7, #8
 80100e6:	4618      	mov	r0, r3
 80100e8:	f001 fb02 	bl	80116f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80100f8:	bf00      	nop
 80100fa:	3724      	adds	r7, #36	; 0x24
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd90      	pop	{r4, r7, pc}
 8010100:	08010105 	.word	0x08010105

08010104 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMusicScreenNoTransitionImpl()
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af02      	add	r7, sp, #8
 801010a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MusicView, MusicPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010118:	461a      	mov	r2, r3
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	4b04      	ldr	r3, [pc, #16]	; (8010134 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv+0x30>)
 8010124:	4804      	ldr	r0, [pc, #16]	; (8010138 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv+0x34>)
 8010126:	f000 fb4b 	bl	80107c0 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801012a:	bf00      	nop
 801012c:	3708      	adds	r7, #8
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	2000b394 	.word	0x2000b394
 8010138:	2000b390 	.word	0x2000b390

0801013c <_ZN23FrontendApplicationBase26gotoDinoScreenNoTransitionEv>:

// Dino

void FrontendApplicationBase::gotoDinoScreenNoTransition()
{
 801013c:	b590      	push	{r4, r7, lr}
 801013e:	b089      	sub	sp, #36	; 0x24
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoDinoScreenNoTransitionImpl);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801014a:	4b10      	ldr	r3, [pc, #64]	; (801018c <_ZN23FrontendApplicationBase26gotoDinoScreenNoTransitionEv+0x50>)
 801014c:	61bb      	str	r3, [r7, #24]
 801014e:	2300      	movs	r3, #0
 8010150:	61fb      	str	r3, [r7, #28]
 8010152:	f107 0008 	add.w	r0, r7, #8
 8010156:	f107 0318 	add.w	r3, r7, #24
 801015a:	cb0c      	ldmia	r3, {r2, r3}
 801015c:	6879      	ldr	r1, [r7, #4]
 801015e:	f000 f8a5 	bl	80102ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010162:	f107 0308 	add.w	r3, r7, #8
 8010166:	4619      	mov	r1, r3
 8010168:	4620      	mov	r0, r4
 801016a:	f7ff fef9 	bl	800ff60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801016e:	f107 0308 	add.w	r3, r7, #8
 8010172:	4618      	mov	r0, r3
 8010174:	f001 fabc 	bl	80116f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8010184:	bf00      	nop
 8010186:	3724      	adds	r7, #36	; 0x24
 8010188:	46bd      	mov	sp, r7
 801018a:	bd90      	pop	{r4, r7, pc}
 801018c:	08010191 	.word	0x08010191

08010190 <_ZN23FrontendApplicationBase30gotoDinoScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoDinoScreenNoTransitionImpl()
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af02      	add	r7, sp, #8
 8010196:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<DinoView, DinoPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80101a4:	461a      	mov	r2, r3
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80101ac:	9300      	str	r3, [sp, #0]
 80101ae:	4b04      	ldr	r3, [pc, #16]	; (80101c0 <_ZN23FrontendApplicationBase30gotoDinoScreenNoTransitionImplEv+0x30>)
 80101b0:	4804      	ldr	r0, [pc, #16]	; (80101c4 <_ZN23FrontendApplicationBase30gotoDinoScreenNoTransitionImplEv+0x34>)
 80101b2:	f000 fc31 	bl	8010a18 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80101b6:	bf00      	nop
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	2000b394 	.word	0x2000b394
 80101c4:	2000b390 	.word	0x2000b390

080101c8 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>:

// Pong

void FrontendApplicationBase::gotoPongScreenCoverTransitionEast()
{
 80101c8:	b590      	push	{r4, r7, lr}
 80101ca:	b089      	sub	sp, #36	; 0x24
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoPongScreenCoverTransitionEastImpl);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80101d6:	4b10      	ldr	r3, [pc, #64]	; (8010218 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv+0x50>)
 80101d8:	61bb      	str	r3, [r7, #24]
 80101da:	2300      	movs	r3, #0
 80101dc:	61fb      	str	r3, [r7, #28]
 80101de:	f107 0008 	add.w	r0, r7, #8
 80101e2:	f107 0318 	add.w	r3, r7, #24
 80101e6:	cb0c      	ldmia	r3, {r2, r3}
 80101e8:	6879      	ldr	r1, [r7, #4]
 80101ea:	f000 f85f 	bl	80102ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80101ee:	f107 0308 	add.w	r3, r7, #8
 80101f2:	4619      	mov	r1, r3
 80101f4:	4620      	mov	r0, r4
 80101f6:	f7ff feb3 	bl	800ff60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80101fa:	f107 0308 	add.w	r3, r7, #8
 80101fe:	4618      	mov	r0, r3
 8010200:	f001 fa76 	bl	80116f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8010210:	bf00      	nop
 8010212:	3724      	adds	r7, #36	; 0x24
 8010214:	46bd      	mov	sp, r7
 8010216:	bd90      	pop	{r4, r7, pc}
 8010218:	0801021d 	.word	0x0801021d

0801021c <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoPongScreenCoverTransitionEastImpl()
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	af02      	add	r7, sp, #8
 8010222:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<PongView, PongPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f503 719c 	add.w	r1, r3, #312	; 0x138
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010230:	461a      	mov	r2, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010238:	9300      	str	r3, [sp, #0]
 801023a:	4b04      	ldr	r3, [pc, #16]	; (801024c <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x30>)
 801023c:	4804      	ldr	r0, [pc, #16]	; (8010250 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x34>)
 801023e:	f000 fd17 	bl	8010c70 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8010242:	bf00      	nop
 8010244:	3708      	adds	r7, #8
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	2000b394 	.word	0x2000b394
 8010250:	2000b390 	.word	0x2000b390

08010254 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	4a04      	ldr	r2, [pc, #16]	; (8010270 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	601a      	str	r2, [r3, #0]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	4618      	mov	r0, r3
 8010266:	370c      	adds	r7, #12
 8010268:	46bd      	mov	sp, r7
 801026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026e:	4770      	bx	lr
 8010270:	08029188 	.word	0x08029188

08010274 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	4618      	mov	r0, r3
 8010280:	f7ff ffe8 	bl	8010254 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8010284:	4a08      	ldr	r2, [pc, #32]	; (80102a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	601a      	str	r2, [r3, #0]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2200      	movs	r2, #0
 801028e:	605a      	str	r2, [r3, #4]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	609a      	str	r2, [r3, #8]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2200      	movs	r2, #0
 801029a:	60da      	str	r2, [r3, #12]
    {
    }
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	4618      	mov	r0, r3
 80102a0:	3708      	adds	r7, #8
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	0802912c 	.word	0x0802912c

080102ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b084      	sub	sp, #16
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	4639      	mov	r1, r7
 80102b8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	4618      	mov	r0, r3
 80102c0:	f7ff ffc8 	bl	8010254 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80102c4:	4a08      	ldr	r2, [pc, #32]	; (80102e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	68ba      	ldr	r2, [r7, #8]
 80102ce:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	3308      	adds	r3, #8
 80102d4:	463a      	mov	r2, r7
 80102d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102da:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	4618      	mov	r0, r3
 80102e2:	3710      	adds	r7, #16
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	0802912c 	.word	0x0802912c

080102ec <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7ff fa52 	bl	800f7a0 <_ZN8touchgfx10TransitionC1Ev>
 80102fc:	4a03      	ldr	r2, [pc, #12]	; (801030c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	601a      	str	r2, [r3, #0]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4618      	mov	r0, r3
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	080290c8 	.word	0x080290c8

08010310 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010310:	b590      	push	{r4, r7, lr}
 8010312:	b08f      	sub	sp, #60	; 0x3c
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	607a      	str	r2, [r7, #4]
 801031c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	689a      	ldr	r2, [r3, #8]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	3320      	adds	r3, #32
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4610      	mov	r0, r2
 801032e:	4798      	blx	r3
 8010330:	4603      	mov	r3, r0
 8010332:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 8010336:	d205      	bcs.n	8010344 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8010338:	4b86      	ldr	r3, [pc, #536]	; (8010554 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 801033a:	4a87      	ldr	r2, [pc, #540]	; (8010558 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 801033c:	21a7      	movs	r1, #167	; 0xa7
 801033e:	4887      	ldr	r0, [pc, #540]	; (801055c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010340:	f017 f934 	bl	80275ac <__assert_func>
 8010344:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	685a      	ldr	r2, [r3, #4]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	3320      	adds	r3, #32
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	4610      	mov	r0, r2
 8010356:	4798      	blx	r3
 8010358:	4603      	mov	r3, r0
 801035a:	2b0f      	cmp	r3, #15
 801035c:	d805      	bhi.n	801036a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801035e:	4b80      	ldr	r3, [pc, #512]	; (8010560 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010360:	4a7d      	ldr	r2, [pc, #500]	; (8010558 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010362:	21a8      	movs	r1, #168	; 0xa8
 8010364:	487d      	ldr	r0, [pc, #500]	; (801055c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010366:	f017 f921 	bl	80275ac <__assert_func>
 801036a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	68da      	ldr	r2, [r3, #12]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	3320      	adds	r3, #32
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	4610      	mov	r0, r2
 801037c:	4798      	blx	r3
 801037e:	4603      	mov	r3, r0
 8010380:	2b0b      	cmp	r3, #11
 8010382:	d805      	bhi.n	8010390 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8010384:	4b77      	ldr	r3, [pc, #476]	; (8010564 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 8010386:	4a74      	ldr	r2, [pc, #464]	; (8010558 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010388:	21a9      	movs	r1, #169	; 0xa9
 801038a:	4874      	ldr	r0, [pc, #464]	; (801055c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 801038c:	f017 f90e 	bl	80275ac <__assert_func>
 8010390:	bf00      	nop
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	62bb      	str	r3, [r7, #40]	; 0x28
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	627b      	str	r3, [r7, #36]	; 0x24
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 801039e:	f00a ff85 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 80103a2:	4603      	mov	r3, r0
 80103a4:	4618      	mov	r0, r3
 80103a6:	f00a ff9d 	bl	801b2e4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80103aa:	6a3b      	ldr	r3, [r7, #32]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d008      	beq.n	80103c4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 80103b2:	6a3b      	ldr	r3, [r7, #32]
 80103b4:	681a      	ldr	r2, [r3, #0]
 80103b6:	6a3b      	ldr	r3, [r7, #32]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	330c      	adds	r3, #12
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	4610      	mov	r0, r2
 80103c2:	4798      	blx	r3
    if (*currentTrans)
 80103c4:	6a3b      	ldr	r3, [r7, #32]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d007      	beq.n	80103dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 80103cc:	6a3b      	ldr	r3, [r7, #32]
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	6a3b      	ldr	r3, [r7, #32]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	4610      	mov	r0, r2
 80103da:	4798      	blx	r3
    if (*currentScreen)
 80103dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d008      	beq.n	80103f6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 80103e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e6:	681a      	ldr	r2, [r3, #0]
 80103e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	3314      	adds	r3, #20
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	4610      	mov	r0, r2
 80103f4:	4798      	blx	r3
    if (*currentPresenter)
 80103f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d008      	beq.n	8010410 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80103fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010400:	681a      	ldr	r2, [r3, #0]
 8010402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	3304      	adds	r3, #4
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4610      	mov	r0, r2
 801040e:	4798      	blx	r3
    if (*currentScreen)
 8010410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d007      	beq.n	8010428 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8010418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041a:	681a      	ldr	r2, [r3, #0]
 801041c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4610      	mov	r0, r2
 8010426:	4798      	blx	r3
    if (*currentPresenter)
 8010428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d008      	beq.n	8010442 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8010430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	3308      	adds	r3, #8
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4610      	mov	r0, r2
 8010440:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	68db      	ldr	r3, [r3, #12]
 8010446:	2100      	movs	r1, #0
 8010448:	4618      	mov	r0, r3
 801044a:	f000 fd3f 	bl	8010ecc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801044e:	4603      	mov	r3, r0
 8010450:	4619      	mov	r1, r3
 8010452:	200c      	movs	r0, #12
 8010454:	f7ff f900 	bl	800f658 <_ZnwjPv>
 8010458:	4604      	mov	r4, r0
 801045a:	2c00      	cmp	r4, #0
 801045c:	d004      	beq.n	8010468 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 801045e:	4620      	mov	r0, r4
 8010460:	f7ff ff44 	bl	80102ec <_ZN8touchgfx12NoTransitionC1Ev>
 8010464:	4623      	mov	r3, r4
 8010466:	e000      	b.n	801046a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 8010468:	4623      	mov	r3, r4
 801046a:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	689b      	ldr	r3, [r3, #8]
 8010470:	2100      	movs	r1, #0
 8010472:	4618      	mov	r0, r3
 8010474:	f000 fd3d 	bl	8010ef2 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8010478:	4603      	mov	r3, r0
 801047a:	4619      	mov	r1, r3
 801047c:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8010480:	f7ff f8ea 	bl	800f658 <_ZnwjPv>
 8010484:	4604      	mov	r4, r0
 8010486:	2c00      	cmp	r4, #0
 8010488:	d004      	beq.n	8010494 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 801048a:	4620      	mov	r0, r4
 801048c:	f005 fa68 	bl	8015960 <_ZN10screenViewC1Ev>
 8010490:	4623      	mov	r3, r4
 8010492:	e000      	b.n	8010496 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 8010494:	4623      	mov	r3, r4
 8010496:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	685b      	ldr	r3, [r3, #4]
 801049c:	2100      	movs	r1, #0
 801049e:	4618      	mov	r0, r3
 80104a0:	f000 fd3a 	bl	8010f18 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 80104a4:	4603      	mov	r3, r0
 80104a6:	4619      	mov	r1, r3
 80104a8:	2010      	movs	r0, #16
 80104aa:	f7ff f8d5 	bl	800f658 <_ZnwjPv>
 80104ae:	4604      	mov	r4, r0
 80104b0:	2c00      	cmp	r4, #0
 80104b2:	d005      	beq.n	80104c0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 80104b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80104b6:	4620      	mov	r0, r4
 80104b8:	f005 f9fa 	bl	80158b0 <_ZN15screenPresenterC1ER10screenView>
 80104bc:	4623      	mov	r3, r4
 80104be:	e000      	b.n	80104c2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 80104c0:	4623      	mov	r3, r4
 80104c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104c8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104ce:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104d4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80104d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d002      	beq.n	80104e2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 80104dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104de:	3304      	adds	r3, #4
 80104e0:	e000      	b.n	80104e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 80104e2:	2300      	movs	r3, #0
 80104e4:	4619      	mov	r1, r3
 80104e6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80104e8:	f7ff fc2c 	bl	800fd44 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80104ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ee:	3304      	adds	r3, #4
 80104f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7ff fcb1 	bl	800fe5a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80104f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80104fc:	4618      	mov	r0, r3
 80104fe:	f000 fd1e 	bl	8010f3e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8010502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010504:	61fb      	str	r3, [r7, #28]
 8010506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010508:	61bb      	str	r3, [r7, #24]
 801050a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 801050e:	69fb      	ldr	r3, [r7, #28]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	330c      	adds	r3, #12
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	69f8      	ldr	r0, [r7, #28]
 8010518:	4798      	blx	r3
    newPresenter->activate();
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	69b8      	ldr	r0, [r7, #24]
 8010522:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010524:	6979      	ldr	r1, [r7, #20]
 8010526:	69f8      	ldr	r0, [r7, #28]
 8010528:	f00b fff2 	bl	801c510 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	3310      	adds	r3, #16
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	6978      	ldr	r0, [r7, #20]
 8010536:	4798      	blx	r3
    Application::getInstance()->draw();
 8010538:	f00a feb8 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 801053c:	4602      	mov	r2, r0
 801053e:	6813      	ldr	r3, [r2, #0]
 8010540:	3330      	adds	r3, #48	; 0x30
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4610      	mov	r0, r2
 8010546:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8010548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801054a:	4618      	mov	r0, r3
 801054c:	373c      	adds	r7, #60	; 0x3c
 801054e:	46bd      	mov	sp, r7
 8010550:	bd90      	pop	{r4, r7, pc}
 8010552:	bf00      	nop
 8010554:	08028610 	.word	0x08028610
 8010558:	080291e0 	.word	0x080291e0
 801055c:	080286a0 	.word	0x080286a0
 8010560:	080286e4 	.word	0x080286e4
 8010564:	08028788 	.word	0x08028788

08010568 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010568:	b590      	push	{r4, r7, lr}
 801056a:	b08f      	sub	sp, #60	; 0x3c
 801056c:	af00      	add	r7, sp, #0
 801056e:	60f8      	str	r0, [r7, #12]
 8010570:	60b9      	str	r1, [r7, #8]
 8010572:	607a      	str	r2, [r7, #4]
 8010574:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	689a      	ldr	r2, [r3, #8]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	3320      	adds	r3, #32
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	4610      	mov	r0, r2
 8010586:	4798      	blx	r3
 8010588:	4603      	mov	r3, r0
 801058a:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 801058e:	d205      	bcs.n	801059c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8010590:	4b86      	ldr	r3, [pc, #536]	; (80107ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 8010592:	4a87      	ldr	r2, [pc, #540]	; (80107b0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010594:	21a7      	movs	r1, #167	; 0xa7
 8010596:	4887      	ldr	r0, [pc, #540]	; (80107b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010598:	f017 f808 	bl	80275ac <__assert_func>
 801059c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	685a      	ldr	r2, [r3, #4]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	3320      	adds	r3, #32
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	4610      	mov	r0, r2
 80105ae:	4798      	blx	r3
 80105b0:	4603      	mov	r3, r0
 80105b2:	2b0f      	cmp	r3, #15
 80105b4:	d805      	bhi.n	80105c2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80105b6:	4b80      	ldr	r3, [pc, #512]	; (80107b8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 80105b8:	4a7d      	ldr	r2, [pc, #500]	; (80107b0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80105ba:	21a8      	movs	r1, #168	; 0xa8
 80105bc:	487d      	ldr	r0, [pc, #500]	; (80107b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80105be:	f016 fff5 	bl	80275ac <__assert_func>
 80105c2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	68da      	ldr	r2, [r3, #12]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	3320      	adds	r3, #32
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	4610      	mov	r0, r2
 80105d4:	4798      	blx	r3
 80105d6:	4603      	mov	r3, r0
 80105d8:	2b53      	cmp	r3, #83	; 0x53
 80105da:	d805      	bhi.n	80105e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80105dc:	4b77      	ldr	r3, [pc, #476]	; (80107bc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 80105de:	4a74      	ldr	r2, [pc, #464]	; (80107b0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80105e0:	21a9      	movs	r1, #169	; 0xa9
 80105e2:	4874      	ldr	r0, [pc, #464]	; (80107b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80105e4:	f016 ffe2 	bl	80275ac <__assert_func>
 80105e8:	bf00      	nop
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	627b      	str	r3, [r7, #36]	; 0x24
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80105f6:	f00a fe59 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 80105fa:	4603      	mov	r3, r0
 80105fc:	4618      	mov	r0, r3
 80105fe:	f00a fe71 	bl	801b2e4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010602:	6a3b      	ldr	r3, [r7, #32]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d008      	beq.n	801061c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 801060a:	6a3b      	ldr	r3, [r7, #32]
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	6a3b      	ldr	r3, [r7, #32]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	330c      	adds	r3, #12
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4610      	mov	r0, r2
 801061a:	4798      	blx	r3
    if (*currentTrans)
 801061c:	6a3b      	ldr	r3, [r7, #32]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d007      	beq.n	8010634 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8010624:	6a3b      	ldr	r3, [r7, #32]
 8010626:	681a      	ldr	r2, [r3, #0]
 8010628:	6a3b      	ldr	r3, [r7, #32]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	4610      	mov	r0, r2
 8010632:	4798      	blx	r3
    if (*currentScreen)
 8010634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d008      	beq.n	801064e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 801063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063e:	681a      	ldr	r2, [r3, #0]
 8010640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	3314      	adds	r3, #20
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	4610      	mov	r0, r2
 801064c:	4798      	blx	r3
    if (*currentPresenter)
 801064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d008      	beq.n	8010668 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8010656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	3304      	adds	r3, #4
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4610      	mov	r0, r2
 8010666:	4798      	blx	r3
    if (*currentScreen)
 8010668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d007      	beq.n	8010680 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8010670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010672:	681a      	ldr	r2, [r3, #0]
 8010674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	4610      	mov	r0, r2
 801067e:	4798      	blx	r3
    if (*currentPresenter)
 8010680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d008      	beq.n	801069a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8010688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	3308      	adds	r3, #8
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4610      	mov	r0, r2
 8010698:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	68db      	ldr	r3, [r3, #12]
 801069e:	2100      	movs	r1, #0
 80106a0:	4618      	mov	r0, r3
 80106a2:	f000 fc5a 	bl	8010f5a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 80106a6:	4603      	mov	r3, r0
 80106a8:	4619      	mov	r1, r3
 80106aa:	2054      	movs	r0, #84	; 0x54
 80106ac:	f7fe ffd4 	bl	800f658 <_ZnwjPv>
 80106b0:	4604      	mov	r4, r0
 80106b2:	2c00      	cmp	r4, #0
 80106b4:	d005      	beq.n	80106c2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 80106b6:	2114      	movs	r1, #20
 80106b8:	4620      	mov	r0, r4
 80106ba:	f000 fca5 	bl	8011008 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 80106be:	4623      	mov	r3, r4
 80106c0:	e000      	b.n	80106c4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 80106c2:	4623      	mov	r3, r4
 80106c4:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	689b      	ldr	r3, [r3, #8]
 80106ca:	2100      	movs	r1, #0
 80106cc:	4618      	mov	r0, r3
 80106ce:	f000 fc10 	bl	8010ef2 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 80106d2:	4603      	mov	r3, r0
 80106d4:	4619      	mov	r1, r3
 80106d6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80106da:	f7fe ffbd 	bl	800f658 <_ZnwjPv>
 80106de:	4604      	mov	r4, r0
 80106e0:	2c00      	cmp	r4, #0
 80106e2:	d004      	beq.n	80106ee <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 80106e4:	4620      	mov	r0, r4
 80106e6:	f005 f93b 	bl	8015960 <_ZN10screenViewC1Ev>
 80106ea:	4623      	mov	r3, r4
 80106ec:	e000      	b.n	80106f0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 80106ee:	4623      	mov	r3, r4
 80106f0:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	685b      	ldr	r3, [r3, #4]
 80106f6:	2100      	movs	r1, #0
 80106f8:	4618      	mov	r0, r3
 80106fa:	f000 fc0d 	bl	8010f18 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 80106fe:	4603      	mov	r3, r0
 8010700:	4619      	mov	r1, r3
 8010702:	2010      	movs	r0, #16
 8010704:	f7fe ffa8 	bl	800f658 <_ZnwjPv>
 8010708:	4604      	mov	r4, r0
 801070a:	2c00      	cmp	r4, #0
 801070c:	d005      	beq.n	801071a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 801070e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010710:	4620      	mov	r0, r4
 8010712:	f005 f8cd 	bl	80158b0 <_ZN15screenPresenterC1ER10screenView>
 8010716:	4623      	mov	r3, r4
 8010718:	e000      	b.n	801071c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 801071a:	4623      	mov	r3, r4
 801071c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010722:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010728:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801072e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010732:	2b00      	cmp	r3, #0
 8010734:	d002      	beq.n	801073c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 8010736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010738:	3304      	adds	r3, #4
 801073a:	e000      	b.n	801073e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 801073c:	2300      	movs	r3, #0
 801073e:	4619      	mov	r1, r3
 8010740:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010742:	f7ff faff 	bl	800fd44 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010748:	3304      	adds	r3, #4
 801074a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801074c:	4618      	mov	r0, r3
 801074e:	f7ff fb84 	bl	800fe5a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010756:	4618      	mov	r0, r3
 8010758:	f000 fbf1 	bl	8010f3e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 801075c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075e:	61fb      	str	r3, [r7, #28]
 8010760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010762:	61bb      	str	r3, [r7, #24]
 8010764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010766:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010768:	69fb      	ldr	r3, [r7, #28]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	330c      	adds	r3, #12
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	69f8      	ldr	r0, [r7, #28]
 8010772:	4798      	blx	r3
    newPresenter->activate();
 8010774:	69bb      	ldr	r3, [r7, #24]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	69b8      	ldr	r0, [r7, #24]
 801077c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801077e:	6979      	ldr	r1, [r7, #20]
 8010780:	69f8      	ldr	r0, [r7, #28]
 8010782:	f00b fec5 	bl	801c510 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	3310      	adds	r3, #16
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	6978      	ldr	r0, [r7, #20]
 8010790:	4798      	blx	r3
    Application::getInstance()->draw();
 8010792:	f00a fd8b 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 8010796:	4602      	mov	r2, r0
 8010798:	6813      	ldr	r3, [r2, #0]
 801079a:	3330      	adds	r3, #48	; 0x30
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	4610      	mov	r0, r2
 80107a0:	4798      	blx	r3
    return newPresenter;
 80107a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	373c      	adds	r7, #60	; 0x3c
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd90      	pop	{r4, r7, pc}
 80107ac:	08028610 	.word	0x08028610
 80107b0:	080292e4 	.word	0x080292e4
 80107b4:	080286a0 	.word	0x080286a0
 80107b8:	080286e4 	.word	0x080286e4
 80107bc:	08028788 	.word	0x08028788

080107c0 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80107c0:	b590      	push	{r4, r7, lr}
 80107c2:	b08f      	sub	sp, #60	; 0x3c
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	607a      	str	r2, [r7, #4]
 80107cc:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	689a      	ldr	r2, [r3, #8]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	689b      	ldr	r3, [r3, #8]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	3320      	adds	r3, #32
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	4610      	mov	r0, r2
 80107de:	4798      	blx	r3
 80107e0:	4603      	mov	r3, r0
 80107e2:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
 80107e6:	d205      	bcs.n	80107f4 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80107e8:	4b86      	ldr	r3, [pc, #536]	; (8010a04 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 80107ea:	4a87      	ldr	r2, [pc, #540]	; (8010a08 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80107ec:	21a7      	movs	r1, #167	; 0xa7
 80107ee:	4887      	ldr	r0, [pc, #540]	; (8010a0c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80107f0:	f016 fedc 	bl	80275ac <__assert_func>
 80107f4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	685a      	ldr	r2, [r3, #4]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	3320      	adds	r3, #32
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	4610      	mov	r0, r2
 8010806:	4798      	blx	r3
 8010808:	4603      	mov	r3, r0
 801080a:	2b0f      	cmp	r3, #15
 801080c:	d805      	bhi.n	801081a <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801080e:	4b80      	ldr	r3, [pc, #512]	; (8010a10 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010810:	4a7d      	ldr	r2, [pc, #500]	; (8010a08 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010812:	21a8      	movs	r1, #168	; 0xa8
 8010814:	487d      	ldr	r0, [pc, #500]	; (8010a0c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010816:	f016 fec9 	bl	80275ac <__assert_func>
 801081a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	68da      	ldr	r2, [r3, #12]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	68db      	ldr	r3, [r3, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3320      	adds	r3, #32
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	4610      	mov	r0, r2
 801082c:	4798      	blx	r3
 801082e:	4603      	mov	r3, r0
 8010830:	2b0b      	cmp	r3, #11
 8010832:	d805      	bhi.n	8010840 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8010834:	4b77      	ldr	r3, [pc, #476]	; (8010a14 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 8010836:	4a74      	ldr	r2, [pc, #464]	; (8010a08 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010838:	21a9      	movs	r1, #169	; 0xa9
 801083a:	4874      	ldr	r0, [pc, #464]	; (8010a0c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 801083c:	f016 feb6 	bl	80275ac <__assert_func>
 8010840:	bf00      	nop
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	62bb      	str	r3, [r7, #40]	; 0x28
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	627b      	str	r3, [r7, #36]	; 0x24
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 801084e:	f00a fd2d 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 8010852:	4603      	mov	r3, r0
 8010854:	4618      	mov	r0, r3
 8010856:	f00a fd45 	bl	801b2e4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 801085a:	6a3b      	ldr	r3, [r7, #32]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d008      	beq.n	8010874 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8010862:	6a3b      	ldr	r3, [r7, #32]
 8010864:	681a      	ldr	r2, [r3, #0]
 8010866:	6a3b      	ldr	r3, [r7, #32]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	330c      	adds	r3, #12
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4610      	mov	r0, r2
 8010872:	4798      	blx	r3
    if (*currentTrans)
 8010874:	6a3b      	ldr	r3, [r7, #32]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d007      	beq.n	801088c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 801087c:	6a3b      	ldr	r3, [r7, #32]
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	6a3b      	ldr	r3, [r7, #32]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	4610      	mov	r0, r2
 801088a:	4798      	blx	r3
    if (*currentScreen)
 801088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d008      	beq.n	80108a6 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8010894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010896:	681a      	ldr	r2, [r3, #0]
 8010898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	3314      	adds	r3, #20
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4610      	mov	r0, r2
 80108a4:	4798      	blx	r3
    if (*currentPresenter)
 80108a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d008      	beq.n	80108c0 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80108ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b0:	681a      	ldr	r2, [r3, #0]
 80108b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	3304      	adds	r3, #4
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4610      	mov	r0, r2
 80108be:	4798      	blx	r3
    if (*currentScreen)
 80108c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d007      	beq.n	80108d8 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80108c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ca:	681a      	ldr	r2, [r3, #0]
 80108cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	4610      	mov	r0, r2
 80108d6:	4798      	blx	r3
    if (*currentPresenter)
 80108d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d008      	beq.n	80108f2 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80108e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	3308      	adds	r3, #8
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4610      	mov	r0, r2
 80108f0:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	68db      	ldr	r3, [r3, #12]
 80108f6:	2100      	movs	r1, #0
 80108f8:	4618      	mov	r0, r3
 80108fa:	f000 fae7 	bl	8010ecc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80108fe:	4603      	mov	r3, r0
 8010900:	4619      	mov	r1, r3
 8010902:	200c      	movs	r0, #12
 8010904:	f7fe fea8 	bl	800f658 <_ZnwjPv>
 8010908:	4604      	mov	r4, r0
 801090a:	2c00      	cmp	r4, #0
 801090c:	d004      	beq.n	8010918 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 801090e:	4620      	mov	r0, r4
 8010910:	f7ff fcec 	bl	80102ec <_ZN8touchgfx12NoTransitionC1Ev>
 8010914:	4623      	mov	r3, r4
 8010916:	e000      	b.n	801091a <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 8010918:	4623      	mov	r3, r4
 801091a:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	2100      	movs	r1, #0
 8010922:	4618      	mov	r0, r3
 8010924:	f000 fc04 	bl	8011130 <_ZN8touchgfx17AbstractPartition2atI9MusicViewEERT_t>
 8010928:	4603      	mov	r3, r0
 801092a:	4619      	mov	r1, r3
 801092c:	f44f 703c 	mov.w	r0, #752	; 0x2f0
 8010930:	f7fe fe92 	bl	800f658 <_ZnwjPv>
 8010934:	4604      	mov	r4, r0
 8010936:	2c00      	cmp	r4, #0
 8010938:	d004      	beq.n	8010944 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 801093a:	4620      	mov	r0, r4
 801093c:	f004 fbf6 	bl	801512c <_ZN9MusicViewC1Ev>
 8010940:	4623      	mov	r3, r4
 8010942:	e000      	b.n	8010946 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 8010944:	4623      	mov	r3, r4
 8010946:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	2100      	movs	r1, #0
 801094e:	4618      	mov	r0, r3
 8010950:	f000 fc01 	bl	8011156 <_ZN8touchgfx17AbstractPartition2atI14MusicPresenterEERT_t>
 8010954:	4603      	mov	r3, r0
 8010956:	4619      	mov	r1, r3
 8010958:	2010      	movs	r0, #16
 801095a:	f7fe fe7d 	bl	800f658 <_ZnwjPv>
 801095e:	4604      	mov	r4, r0
 8010960:	2c00      	cmp	r4, #0
 8010962:	d005      	beq.n	8010970 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8010964:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010966:	4620      	mov	r0, r4
 8010968:	f004 fb88 	bl	801507c <_ZN14MusicPresenterC1ER9MusicView>
 801096c:	4623      	mov	r3, r4
 801096e:	e000      	b.n	8010972 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8010970:	4623      	mov	r3, r4
 8010972:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010978:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801097e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010984:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010988:	2b00      	cmp	r3, #0
 801098a:	d002      	beq.n	8010992 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 801098c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098e:	3304      	adds	r3, #4
 8010990:	e000      	b.n	8010994 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 8010992:	2300      	movs	r3, #0
 8010994:	4619      	mov	r1, r3
 8010996:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010998:	f7ff f9d4 	bl	800fd44 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801099e:	3304      	adds	r3, #4
 80109a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80109a2:	4618      	mov	r0, r3
 80109a4:	f7ff fa59 	bl	800fe5a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80109a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109ac:	4618      	mov	r0, r3
 80109ae:	f000 fbe5 	bl	801117c <_ZN8touchgfx4ViewI14MusicPresenterE4bindERS1_>
 80109b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b4:	61fb      	str	r3, [r7, #28]
 80109b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b8:	61bb      	str	r3, [r7, #24]
 80109ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109bc:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80109be:	69fb      	ldr	r3, [r7, #28]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	330c      	adds	r3, #12
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	69f8      	ldr	r0, [r7, #28]
 80109c8:	4798      	blx	r3
    newPresenter->activate();
 80109ca:	69bb      	ldr	r3, [r7, #24]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	69b8      	ldr	r0, [r7, #24]
 80109d2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80109d4:	6979      	ldr	r1, [r7, #20]
 80109d6:	69f8      	ldr	r0, [r7, #28]
 80109d8:	f00b fd9a 	bl	801c510 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	3310      	adds	r3, #16
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	6978      	ldr	r0, [r7, #20]
 80109e6:	4798      	blx	r3
    Application::getInstance()->draw();
 80109e8:	f00a fc60 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 80109ec:	4602      	mov	r2, r0
 80109ee:	6813      	ldr	r3, [r2, #0]
 80109f0:	3330      	adds	r3, #48	; 0x30
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	4610      	mov	r0, r2
 80109f6:	4798      	blx	r3
    return newPresenter;
 80109f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	373c      	adds	r7, #60	; 0x3c
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd90      	pop	{r4, r7, pc}
 8010a02:	bf00      	nop
 8010a04:	08028610 	.word	0x08028610
 8010a08:	08029404 	.word	0x08029404
 8010a0c:	080286a0 	.word	0x080286a0
 8010a10:	080286e4 	.word	0x080286e4
 8010a14:	08028788 	.word	0x08028788

08010a18 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010a18:	b590      	push	{r4, r7, lr}
 8010a1a:	b08f      	sub	sp, #60	; 0x3c
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	60b9      	str	r1, [r7, #8]
 8010a22:	607a      	str	r2, [r7, #4]
 8010a24:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	689a      	ldr	r2, [r3, #8]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	689b      	ldr	r3, [r3, #8]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	3320      	adds	r3, #32
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4610      	mov	r0, r2
 8010a36:	4798      	blx	r3
 8010a38:	4603      	mov	r3, r0
 8010a3a:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8010a3e:	d205      	bcs.n	8010a4c <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8010a40:	4b86      	ldr	r3, [pc, #536]	; (8010c5c <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 8010a42:	4a87      	ldr	r2, [pc, #540]	; (8010c60 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010a44:	21a7      	movs	r1, #167	; 0xa7
 8010a46:	4887      	ldr	r0, [pc, #540]	; (8010c64 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010a48:	f016 fdb0 	bl	80275ac <__assert_func>
 8010a4c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	685a      	ldr	r2, [r3, #4]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	3320      	adds	r3, #32
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4610      	mov	r0, r2
 8010a5e:	4798      	blx	r3
 8010a60:	4603      	mov	r3, r0
 8010a62:	2b0f      	cmp	r3, #15
 8010a64:	d805      	bhi.n	8010a72 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8010a66:	4b80      	ldr	r3, [pc, #512]	; (8010c68 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010a68:	4a7d      	ldr	r2, [pc, #500]	; (8010c60 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010a6a:	21a8      	movs	r1, #168	; 0xa8
 8010a6c:	487d      	ldr	r0, [pc, #500]	; (8010c64 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010a6e:	f016 fd9d 	bl	80275ac <__assert_func>
 8010a72:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	68da      	ldr	r2, [r3, #12]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	68db      	ldr	r3, [r3, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	3320      	adds	r3, #32
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4610      	mov	r0, r2
 8010a84:	4798      	blx	r3
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b0b      	cmp	r3, #11
 8010a8a:	d805      	bhi.n	8010a98 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8010a8c:	4b77      	ldr	r3, [pc, #476]	; (8010c6c <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 8010a8e:	4a74      	ldr	r2, [pc, #464]	; (8010c60 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010a90:	21a9      	movs	r1, #169	; 0xa9
 8010a92:	4874      	ldr	r0, [pc, #464]	; (8010c64 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010a94:	f016 fd8a 	bl	80275ac <__assert_func>
 8010a98:	bf00      	nop
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010aa6:	f00a fc01 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	4618      	mov	r0, r3
 8010aae:	f00a fc19 	bl	801b2e4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010ab2:	6a3b      	ldr	r3, [r7, #32]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d008      	beq.n	8010acc <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8010aba:	6a3b      	ldr	r3, [r7, #32]
 8010abc:	681a      	ldr	r2, [r3, #0]
 8010abe:	6a3b      	ldr	r3, [r7, #32]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	330c      	adds	r3, #12
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4610      	mov	r0, r2
 8010aca:	4798      	blx	r3
    if (*currentTrans)
 8010acc:	6a3b      	ldr	r3, [r7, #32]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d007      	beq.n	8010ae4 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8010ad4:	6a3b      	ldr	r3, [r7, #32]
 8010ad6:	681a      	ldr	r2, [r3, #0]
 8010ad8:	6a3b      	ldr	r3, [r7, #32]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4610      	mov	r0, r2
 8010ae2:	4798      	blx	r3
    if (*currentScreen)
 8010ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d008      	beq.n	8010afe <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8010aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	3314      	adds	r3, #20
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4610      	mov	r0, r2
 8010afc:	4798      	blx	r3
    if (*currentPresenter)
 8010afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d008      	beq.n	8010b18 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8010b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	3304      	adds	r3, #4
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4610      	mov	r0, r2
 8010b16:	4798      	blx	r3
    if (*currentScreen)
 8010b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d007      	beq.n	8010b30 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8010b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	4610      	mov	r0, r2
 8010b2e:	4798      	blx	r3
    if (*currentPresenter)
 8010b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d008      	beq.n	8010b4a <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8010b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3a:	681a      	ldr	r2, [r3, #0]
 8010b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	3308      	adds	r3, #8
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	4610      	mov	r0, r2
 8010b48:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	68db      	ldr	r3, [r3, #12]
 8010b4e:	2100      	movs	r1, #0
 8010b50:	4618      	mov	r0, r3
 8010b52:	f000 f9bb 	bl	8010ecc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010b56:	4603      	mov	r3, r0
 8010b58:	4619      	mov	r1, r3
 8010b5a:	200c      	movs	r0, #12
 8010b5c:	f7fe fd7c 	bl	800f658 <_ZnwjPv>
 8010b60:	4604      	mov	r4, r0
 8010b62:	2c00      	cmp	r4, #0
 8010b64:	d004      	beq.n	8010b70 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 8010b66:	4620      	mov	r0, r4
 8010b68:	f7ff fbc0 	bl	80102ec <_ZN8touchgfx12NoTransitionC1Ev>
 8010b6c:	4623      	mov	r3, r4
 8010b6e:	e000      	b.n	8010b72 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 8010b70:	4623      	mov	r3, r4
 8010b72:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	2100      	movs	r1, #0
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f000 fb0c 	bl	8011198 <_ZN8touchgfx17AbstractPartition2atI8DinoViewEERT_t>
 8010b80:	4603      	mov	r3, r0
 8010b82:	4619      	mov	r1, r3
 8010b84:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8010b88:	f7fe fd66 	bl	800f658 <_ZnwjPv>
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	2c00      	cmp	r4, #0
 8010b90:	d004      	beq.n	8010b9c <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 8010b92:	4620      	mov	r0, r4
 8010b94:	f004 f9fc 	bl	8014f90 <_ZN8DinoViewC1Ev>
 8010b98:	4623      	mov	r3, r4
 8010b9a:	e000      	b.n	8010b9e <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 8010b9c:	4623      	mov	r3, r4
 8010b9e:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f000 fb09 	bl	80111be <_ZN8touchgfx17AbstractPartition2atI13DinoPresenterEERT_t>
 8010bac:	4603      	mov	r3, r0
 8010bae:	4619      	mov	r1, r3
 8010bb0:	2010      	movs	r0, #16
 8010bb2:	f7fe fd51 	bl	800f658 <_ZnwjPv>
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	2c00      	cmp	r4, #0
 8010bba:	d005      	beq.n	8010bc8 <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8010bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	f004 f98e 	bl	8014ee0 <_ZN13DinoPresenterC1ER8DinoView>
 8010bc4:	4623      	mov	r3, r4
 8010bc6:	e000      	b.n	8010bca <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8010bc8:	4623      	mov	r3, r4
 8010bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bd0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bd6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bdc:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d002      	beq.n	8010bea <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 8010be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be6:	3304      	adds	r3, #4
 8010be8:	e000      	b.n	8010bec <_ZN8touchgfx14makeTransitionI8DinoView13DinoPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 8010bea:	2300      	movs	r3, #0
 8010bec:	4619      	mov	r1, r3
 8010bee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010bf0:	f7ff f8a8 	bl	800fd44 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf6:	3304      	adds	r3, #4
 8010bf8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7ff f92d 	bl	800fe5a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c04:	4618      	mov	r0, r3
 8010c06:	f000 faed 	bl	80111e4 <_ZN8touchgfx4ViewI13DinoPresenterE4bindERS1_>
 8010c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0c:	61fb      	str	r3, [r7, #28]
 8010c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c10:	61bb      	str	r3, [r7, #24]
 8010c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c14:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010c16:	69fb      	ldr	r3, [r7, #28]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	330c      	adds	r3, #12
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	69f8      	ldr	r0, [r7, #28]
 8010c20:	4798      	blx	r3
    newPresenter->activate();
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	69b8      	ldr	r0, [r7, #24]
 8010c2a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010c2c:	6979      	ldr	r1, [r7, #20]
 8010c2e:	69f8      	ldr	r0, [r7, #28]
 8010c30:	f00b fc6e 	bl	801c510 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	3310      	adds	r3, #16
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	6978      	ldr	r0, [r7, #20]
 8010c3e:	4798      	blx	r3
    Application::getInstance()->draw();
 8010c40:	f00a fb34 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 8010c44:	4602      	mov	r2, r0
 8010c46:	6813      	ldr	r3, [r2, #0]
 8010c48:	3330      	adds	r3, #48	; 0x30
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	4610      	mov	r0, r2
 8010c4e:	4798      	blx	r3
    return newPresenter;
 8010c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	373c      	adds	r7, #60	; 0x3c
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd90      	pop	{r4, r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	08028610 	.word	0x08028610
 8010c60:	08029504 	.word	0x08029504
 8010c64:	080286a0 	.word	0x080286a0
 8010c68:	080286e4 	.word	0x080286e4
 8010c6c:	08028788 	.word	0x08028788

08010c70 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010c70:	b590      	push	{r4, r7, lr}
 8010c72:	b08f      	sub	sp, #60	; 0x3c
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	60f8      	str	r0, [r7, #12]
 8010c78:	60b9      	str	r1, [r7, #8]
 8010c7a:	607a      	str	r2, [r7, #4]
 8010c7c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	689a      	ldr	r2, [r3, #8]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	689b      	ldr	r3, [r3, #8]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	3320      	adds	r3, #32
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4610      	mov	r0, r2
 8010c8e:	4798      	blx	r3
 8010c90:	4602      	mov	r2, r0
 8010c92:	f641 6313 	movw	r3, #7699	; 0x1e13
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d805      	bhi.n	8010ca6 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8010c9a:	4b87      	ldr	r3, [pc, #540]	; (8010eb8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010c9c:	4a87      	ldr	r2, [pc, #540]	; (8010ebc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010c9e:	21a7      	movs	r1, #167	; 0xa7
 8010ca0:	4887      	ldr	r0, [pc, #540]	; (8010ec0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010ca2:	f016 fc83 	bl	80275ac <__assert_func>
 8010ca6:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	685a      	ldr	r2, [r3, #4]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	3320      	adds	r3, #32
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	4610      	mov	r0, r2
 8010cb8:	4798      	blx	r3
 8010cba:	4603      	mov	r3, r0
 8010cbc:	2b0f      	cmp	r3, #15
 8010cbe:	d805      	bhi.n	8010ccc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8010cc0:	4b80      	ldr	r3, [pc, #512]	; (8010ec4 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 8010cc2:	4a7e      	ldr	r2, [pc, #504]	; (8010ebc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010cc4:	21a8      	movs	r1, #168	; 0xa8
 8010cc6:	487e      	ldr	r0, [pc, #504]	; (8010ec0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010cc8:	f016 fc70 	bl	80275ac <__assert_func>
 8010ccc:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	68da      	ldr	r2, [r3, #12]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	3320      	adds	r3, #32
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	4610      	mov	r0, r2
 8010cde:	4798      	blx	r3
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	2b4f      	cmp	r3, #79	; 0x4f
 8010ce4:	d805      	bhi.n	8010cf2 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8010ce6:	4b78      	ldr	r3, [pc, #480]	; (8010ec8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x258>)
 8010ce8:	4a74      	ldr	r2, [pc, #464]	; (8010ebc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010cea:	21a9      	movs	r1, #169	; 0xa9
 8010cec:	4874      	ldr	r0, [pc, #464]	; (8010ec0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010cee:	f016 fc5d 	bl	80275ac <__assert_func>
 8010cf2:	bf00      	nop
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010d00:	f00a fad4 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 8010d04:	4603      	mov	r3, r0
 8010d06:	4618      	mov	r0, r3
 8010d08:	f00a faec 	bl	801b2e4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010d0c:	6a3b      	ldr	r3, [r7, #32]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d008      	beq.n	8010d26 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8010d14:	6a3b      	ldr	r3, [r7, #32]
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	6a3b      	ldr	r3, [r7, #32]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	330c      	adds	r3, #12
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	4610      	mov	r0, r2
 8010d24:	4798      	blx	r3
    if (*currentTrans)
 8010d26:	6a3b      	ldr	r3, [r7, #32]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d007      	beq.n	8010d3e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 8010d2e:	6a3b      	ldr	r3, [r7, #32]
 8010d30:	681a      	ldr	r2, [r3, #0]
 8010d32:	6a3b      	ldr	r3, [r7, #32]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	4610      	mov	r0, r2
 8010d3c:	4798      	blx	r3
    if (*currentScreen)
 8010d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d008      	beq.n	8010d58 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 8010d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	3314      	adds	r3, #20
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	4610      	mov	r0, r2
 8010d56:	4798      	blx	r3
    if (*currentPresenter)
 8010d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d008      	beq.n	8010d72 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8010d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d62:	681a      	ldr	r2, [r3, #0]
 8010d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	3304      	adds	r3, #4
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	4610      	mov	r0, r2
 8010d70:	4798      	blx	r3
    if (*currentScreen)
 8010d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d007      	beq.n	8010d8a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 8010d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d7c:	681a      	ldr	r2, [r3, #0]
 8010d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4610      	mov	r0, r2
 8010d88:	4798      	blx	r3
    if (*currentPresenter)
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d008      	beq.n	8010da4 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 8010d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	3308      	adds	r3, #8
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	4610      	mov	r0, r2
 8010da2:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	2100      	movs	r1, #0
 8010daa:	4618      	mov	r0, r3
 8010dac:	f000 fa28 	bl	8011200 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 8010db0:	4603      	mov	r3, r0
 8010db2:	4619      	mov	r1, r3
 8010db4:	2050      	movs	r0, #80	; 0x50
 8010db6:	f7fe fc4f 	bl	800f658 <_ZnwjPv>
 8010dba:	4604      	mov	r4, r0
 8010dbc:	2c00      	cmp	r4, #0
 8010dbe:	d005      	beq.n	8010dcc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 8010dc0:	2114      	movs	r1, #20
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	f000 fa86 	bl	80112d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 8010dc8:	4623      	mov	r3, r4
 8010dca:	e000      	b.n	8010dce <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15e>
 8010dcc:	4623      	mov	r3, r4
 8010dce:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	689b      	ldr	r3, [r3, #8]
 8010dd4:	2100      	movs	r1, #0
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f000 fb00 	bl	80113dc <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	4619      	mov	r1, r3
 8010de0:	f641 6014 	movw	r0, #7700	; 0x1e14
 8010de4:	f7fe fc38 	bl	800f658 <_ZnwjPv>
 8010de8:	4604      	mov	r4, r0
 8010dea:	2c00      	cmp	r4, #0
 8010dec:	d004      	beq.n	8010df8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 8010dee:	4620      	mov	r0, r4
 8010df0:	f004 fa6c 	bl	80152cc <_ZN8PongViewC1Ev>
 8010df4:	4623      	mov	r3, r4
 8010df6:	e000      	b.n	8010dfa <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x18a>
 8010df8:	4623      	mov	r3, r4
 8010dfa:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	2100      	movs	r1, #0
 8010e02:	4618      	mov	r0, r3
 8010e04:	f000 fafd 	bl	8011402 <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	2010      	movs	r0, #16
 8010e0e:	f7fe fc23 	bl	800f658 <_ZnwjPv>
 8010e12:	4604      	mov	r4, r0
 8010e14:	2c00      	cmp	r4, #0
 8010e16:	d005      	beq.n	8010e24 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8010e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f004 f9e4 	bl	80151e8 <_ZN13PongPresenterC1ER8PongView>
 8010e20:	4623      	mov	r3, r4
 8010e22:	e000      	b.n	8010e26 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8010e24:	4623      	mov	r3, r4
 8010e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e2c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e32:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e38:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d002      	beq.n	8010e46 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 8010e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e42:	3304      	adds	r3, #4
 8010e44:	e000      	b.n	8010e48 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d8>
 8010e46:	2300      	movs	r3, #0
 8010e48:	4619      	mov	r1, r3
 8010e4a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010e4c:	f7fe ff7a 	bl	800fd44 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e52:	3304      	adds	r3, #4
 8010e54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7fe ffff 	bl	800fe5a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e60:	4618      	mov	r0, r3
 8010e62:	f000 fae1 	bl	8011428 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>
 8010e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e68:	61fb      	str	r3, [r7, #28]
 8010e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e6c:	61bb      	str	r3, [r7, #24]
 8010e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e70:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	330c      	adds	r3, #12
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	69f8      	ldr	r0, [r7, #28]
 8010e7c:	4798      	blx	r3
    newPresenter->activate();
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	69b8      	ldr	r0, [r7, #24]
 8010e86:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010e88:	6979      	ldr	r1, [r7, #20]
 8010e8a:	69f8      	ldr	r0, [r7, #28]
 8010e8c:	f00b fb40 	bl	801c510 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	3310      	adds	r3, #16
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	6978      	ldr	r0, [r7, #20]
 8010e9a:	4798      	blx	r3
    Application::getInstance()->draw();
 8010e9c:	f00a fa06 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 8010ea0:	4602      	mov	r2, r0
 8010ea2:	6813      	ldr	r3, [r2, #0]
 8010ea4:	3330      	adds	r3, #48	; 0x30
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	4610      	mov	r0, r2
 8010eaa:	4798      	blx	r3
    return newPresenter;
 8010eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	373c      	adds	r7, #60	; 0x3c
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd90      	pop	{r4, r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	08028610 	.word	0x08028610
 8010ebc:	08029604 	.word	0x08029604
 8010ec0:	080286a0 	.word	0x080286a0
 8010ec4:	080286e4 	.word	0x080286e4
 8010ec8:	08028788 	.word	0x08028788

08010ecc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	460b      	mov	r3, r1
 8010ed6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	3324      	adds	r3, #36	; 0x24
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	887a      	ldrh	r2, [r7, #2]
 8010ee2:	4611      	mov	r1, r2
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	4798      	blx	r3
 8010ee8:	4603      	mov	r3, r0
    }
 8010eea:	4618      	mov	r0, r3
 8010eec:	3708      	adds	r7, #8
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}

08010ef2 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8010ef2:	b580      	push	{r7, lr}
 8010ef4:	b082      	sub	sp, #8
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]
 8010efa:	460b      	mov	r3, r1
 8010efc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	3324      	adds	r3, #36	; 0x24
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	887a      	ldrh	r2, [r7, #2]
 8010f08:	4611      	mov	r1, r2
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	4798      	blx	r3
 8010f0e:	4603      	mov	r3, r0
    }
 8010f10:	4618      	mov	r0, r3
 8010f12:	3708      	adds	r7, #8
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	460b      	mov	r3, r1
 8010f22:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	3324      	adds	r3, #36	; 0x24
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	887a      	ldrh	r2, [r7, #2]
 8010f2e:	4611      	mov	r1, r2
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	4798      	blx	r3
 8010f34:	4603      	mov	r3, r0
    }
 8010f36:	4618      	mov	r0, r3
 8010f38:	3708      	adds	r7, #8
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}

08010f3e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8010f3e:	b480      	push	{r7}
 8010f40:	b083      	sub	sp, #12
 8010f42:	af00      	add	r7, sp, #0
 8010f44:	6078      	str	r0, [r7, #4]
 8010f46:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	683a      	ldr	r2, [r7, #0]
 8010f4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010f4e:	bf00      	nop
 8010f50:	370c      	adds	r7, #12
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr

08010f5a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8010f5a:	b580      	push	{r7, lr}
 8010f5c:	b082      	sub	sp, #8
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	6078      	str	r0, [r7, #4]
 8010f62:	460b      	mov	r3, r1
 8010f64:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	3324      	adds	r3, #36	; 0x24
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	887a      	ldrh	r2, [r7, #2]
 8010f70:	4611      	mov	r1, r2
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	4798      	blx	r3
 8010f76:	4603      	mov	r3, r0
    }
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3708      	adds	r7, #8
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	4a05      	ldr	r2, [pc, #20]	; (8010fa0 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	601a      	str	r2, [r3, #0]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7fe ff83 	bl	800fe9c <_ZN8touchgfx6WidgetD1Ev>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}
 8010fa0:	0802b284 	.word	0x0802b284

08010fa4 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f7ff ffe7 	bl	8010f80 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8010fb2:	212c      	movs	r1, #44	; 0x2c
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f016 facd 	bl	8027554 <_ZdlPvj>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3708      	adds	r7, #8
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}

08010fc4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	4a05      	ldr	r2, [pc, #20]	; (8010fe4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	601a      	str	r2, [r3, #0]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f000 fa9f 	bl	8011518 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3708      	adds	r7, #8
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}
 8010fe4:	08028f88 	.word	0x08028f88

08010fe8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f7ff ffe7 	bl	8010fc4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8010ff6:	2110      	movs	r1, #16
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f016 faab 	bl	8027554 <_ZdlPvj>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	4618      	mov	r0, r3
 8011002:	3708      	adds	r7, #8
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}

08011008 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8011008:	b590      	push	{r4, r7, lr}
 801100a:	b087      	sub	sp, #28
 801100c:	af02      	add	r7, sp, #8
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	460b      	mov	r3, r1
 8011012:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	4618      	mov	r0, r3
 8011018:	f7fe fbc2 	bl	800f7a0 <_ZN8touchgfx10TransitionC1Ev>
 801101c:	4a3f      	ldr	r2, [pc, #252]	; (801111c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	601a      	str	r2, [r3, #0]
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	330c      	adds	r3, #12
 8011026:	4618      	mov	r0, r3
 8011028:	f008 fb0a 	bl	8019640 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f103 020c 	add.w	r2, r3, #12
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	639a      	str	r2, [r3, #56]	; 0x38
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801103c:	4a38      	ldr	r2, [pc, #224]	; (8011120 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 801103e:	f107 0308 	add.w	r3, r7, #8
 8011042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011046:	e883 0003 	stmia.w	r3, {r0, r1}
 801104a:	f107 0308 	add.w	r3, r7, #8
 801104e:	cb0c      	ldmia	r3, {r2, r3}
 8011050:	6879      	ldr	r1, [r7, #4]
 8011052:	4620      	mov	r0, r4
 8011054:	f000 fa40 	bl	80114d8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2202      	movs	r2, #2
 801105c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	78fa      	ldrb	r2, [r7, #3]
 8011064:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2200      	movs	r2, #0
 8011074:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8011078:	4b2a      	ldr	r3, [pc, #168]	; (8011124 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d047      	beq.n	8011110 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f103 000c 	add.w	r0, r3, #12
 8011086:	4b28      	ldr	r3, [pc, #160]	; (8011128 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011088:	881b      	ldrh	r3, [r3, #0]
 801108a:	b21a      	sxth	r2, r3
 801108c:	4b27      	ldr	r3, [pc, #156]	; (801112c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 801108e:	881b      	ldrh	r3, [r3, #0]
 8011090:	b21b      	sxth	r3, r3
 8011092:	9300      	str	r3, [sp, #0]
 8011094:	4613      	mov	r3, r2
 8011096:	2200      	movs	r2, #0
 8011098:	2100      	movs	r1, #0
 801109a:	f7fe fc6f 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	330c      	adds	r3, #12
 80110a2:	4618      	mov	r0, r3
 80110a4:	f008 fa4f 	bl	8019546 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80110ae:	2b03      	cmp	r3, #3
 80110b0:	d82a      	bhi.n	8011108 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 80110b2:	a201      	add	r2, pc, #4	; (adr r2, 80110b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 80110b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b8:	080110e9 	.word	0x080110e9
 80110bc:	080110f7 	.word	0x080110f7
 80110c0:	080110c9 	.word	0x080110c9
 80110c4:	080110db 	.word	0x080110db
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 80110c8:	4b17      	ldr	r3, [pc, #92]	; (8011128 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 80110ca:	881b      	ldrh	r3, [r3, #0]
 80110cc:	425b      	negs	r3, r3
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	b21a      	sxth	r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80110d8:	e01a      	b.n	8011110 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 80110da:	4b13      	ldr	r3, [pc, #76]	; (8011128 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 80110dc:	881b      	ldrh	r3, [r3, #0]
 80110de:	b21a      	sxth	r2, r3
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80110e6:	e013      	b.n	8011110 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 80110e8:	4b10      	ldr	r3, [pc, #64]	; (801112c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 80110ea:	881b      	ldrh	r3, [r3, #0]
 80110ec:	b21a      	sxth	r2, r3
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80110f4:	e00c      	b.n	8011110 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 80110f6:	4b0d      	ldr	r3, [pc, #52]	; (801112c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 80110f8:	881b      	ldrh	r3, [r3, #0]
 80110fa:	425b      	negs	r3, r3
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	b21a      	sxth	r2, r3
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011106:	e003      	b.n	8011110 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2201      	movs	r2, #1
 801110c:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 801110e:	bf00      	nop
            }
        }
    }
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	4618      	mov	r0, r3
 8011114:	3714      	adds	r7, #20
 8011116:	46bd      	mov	sp, r7
 8011118:	bd90      	pop	{r4, r7, pc}
 801111a:	bf00      	nop
 801111c:	08028f60 	.word	0x08028f60
 8011120:	0802882c 	.word	0x0802882c
 8011124:	2000b313 	.word	0x2000b313
 8011128:	2000b308 	.word	0x2000b308
 801112c:	2000b30a 	.word	0x2000b30a

08011130 <_ZN8touchgfx17AbstractPartition2atI9MusicViewEERT_t>:
    T& at(const uint16_t index)
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	460b      	mov	r3, r1
 801113a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	3324      	adds	r3, #36	; 0x24
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	887a      	ldrh	r2, [r7, #2]
 8011146:	4611      	mov	r1, r2
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	4798      	blx	r3
 801114c:	4603      	mov	r3, r0
    }
 801114e:	4618      	mov	r0, r3
 8011150:	3708      	adds	r7, #8
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}

08011156 <_ZN8touchgfx17AbstractPartition2atI14MusicPresenterEERT_t>:
    T& at(const uint16_t index)
 8011156:	b580      	push	{r7, lr}
 8011158:	b082      	sub	sp, #8
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
 801115e:	460b      	mov	r3, r1
 8011160:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	3324      	adds	r3, #36	; 0x24
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	887a      	ldrh	r2, [r7, #2]
 801116c:	4611      	mov	r1, r2
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	4798      	blx	r3
 8011172:	4603      	mov	r3, r0
    }
 8011174:	4618      	mov	r0, r3
 8011176:	3708      	adds	r7, #8
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <_ZN8touchgfx4ViewI14MusicPresenterE4bindERS1_>:
    void bind(T& presenter)
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	683a      	ldr	r2, [r7, #0]
 801118a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801118c:	bf00      	nop
 801118e:	370c      	adds	r7, #12
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr

08011198 <_ZN8touchgfx17AbstractPartition2atI8DinoViewEERT_t>:
    T& at(const uint16_t index)
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	460b      	mov	r3, r1
 80111a2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	3324      	adds	r3, #36	; 0x24
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	887a      	ldrh	r2, [r7, #2]
 80111ae:	4611      	mov	r1, r2
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	4798      	blx	r3
 80111b4:	4603      	mov	r3, r0
    }
 80111b6:	4618      	mov	r0, r3
 80111b8:	3708      	adds	r7, #8
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}

080111be <_ZN8touchgfx17AbstractPartition2atI13DinoPresenterEERT_t>:
    T& at(const uint16_t index)
 80111be:	b580      	push	{r7, lr}
 80111c0:	b082      	sub	sp, #8
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
 80111c6:	460b      	mov	r3, r1
 80111c8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	3324      	adds	r3, #36	; 0x24
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	887a      	ldrh	r2, [r7, #2]
 80111d4:	4611      	mov	r1, r2
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	4798      	blx	r3
 80111da:	4603      	mov	r3, r0
    }
 80111dc:	4618      	mov	r0, r3
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <_ZN8touchgfx4ViewI13DinoPresenterE4bindERS1_>:
    void bind(T& presenter)
 80111e4:	b480      	push	{r7}
 80111e6:	b083      	sub	sp, #12
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	683a      	ldr	r2, [r7, #0]
 80111f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80111f4:	bf00      	nop
 80111f6:	370c      	adds	r7, #12
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr

08011200 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	460b      	mov	r3, r1
 801120a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	3324      	adds	r3, #36	; 0x24
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	887a      	ldrh	r2, [r7, #2]
 8011216:	4611      	mov	r1, r2
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	4798      	blx	r3
 801121c:	4603      	mov	r3, r0
    }
 801121e:	4618      	mov	r0, r3
 8011220:	3708      	adds	r7, #8
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
	...

08011228 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 8011228:	b580      	push	{r7, lr}
 801122a:	b082      	sub	sp, #8
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	4a05      	ldr	r2, [pc, #20]	; (8011248 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	601a      	str	r2, [r3, #0]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	4618      	mov	r0, r3
 801123a:	f000 f96d 	bl	8011518 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	4618      	mov	r0, r3
 8011242:	3708      	adds	r7, #8
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	08029030 	.word	0x08029030

0801124c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff ffe7 	bl	8011228 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 801125a:	2110      	movs	r1, #16
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f016 f979 	bl	8027554 <_ZdlPvj>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4618      	mov	r0, r3
 8011266:	3708      	adds	r7, #8
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
public:
    /**
     * A Widget that returns a solid rect of the same size as the application (i.e. the size
     * of the display).
     */
    class FullSolidRect : public Widget
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	4618      	mov	r0, r3
 8011278:	f7fe fdfe 	bl	800fe78 <_ZN8touchgfx6WidgetC1Ev>
 801127c:	4a03      	ldr	r2, [pc, #12]	; (801128c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	601a      	str	r2, [r3, #0]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	4618      	mov	r0, r3
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	08028fc8 	.word	0x08028fc8

08011290 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	4a05      	ldr	r2, [pc, #20]	; (80112b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	601a      	str	r2, [r3, #0]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7fe fdfb 	bl	800fe9c <_ZN8touchgfx6WidgetD1Ev>
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	4618      	mov	r0, r3
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	08028fc8 	.word	0x08028fc8

080112b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f7ff ffe7 	bl	8011290 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 80112c2:	2128      	movs	r1, #40	; 0x28
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f016 f945 	bl	8027554 <_ZdlPvj>
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	4618      	mov	r0, r3
 80112ce:	3708      	adds	r7, #8
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}

080112d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 80112d4:	b590      	push	{r4, r7, lr}
 80112d6:	b087      	sub	sp, #28
 80112d8:	af02      	add	r7, sp, #8
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	460b      	mov	r3, r1
 80112de:	70fb      	strb	r3, [r7, #3]
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          movedToPos(0),
          solid()
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7fe fa5c 	bl	800f7a0 <_ZN8touchgfx10TransitionC1Ev>
 80112e8:	4a38      	ldr	r2, [pc, #224]	; (80113cc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf8>)
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	601a      	str	r2, [r3, #0]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f103 040c 	add.w	r4, r3, #12
 80112f4:	4a36      	ldr	r2, [pc, #216]	; (80113d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xfc>)
 80112f6:	f107 0308 	add.w	r3, r7, #8
 80112fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80112fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8011302:	f107 0308 	add.w	r3, r7, #8
 8011306:	cb0c      	ldmia	r3, {r2, r3}
 8011308:	6879      	ldr	r1, [r7, #4]
 801130a:	4620      	mov	r0, r4
 801130c:	f000 f956 	bl	80115bc <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2202      	movs	r2, #2
 8011314:	771a      	strb	r2, [r3, #28]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	78fa      	ldrb	r2, [r7, #3]
 801131a:	775a      	strb	r2, [r3, #29]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2200      	movs	r2, #0
 8011320:	779a      	strb	r2, [r3, #30]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	845a      	strh	r2, [r3, #34]	; 0x22
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	849a      	strh	r2, [r3, #36]	; 0x24
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	3328      	adds	r3, #40	; 0x28
 8011332:	2228      	movs	r2, #40	; 0x28
 8011334:	2100      	movs	r1, #0
 8011336:	4618      	mov	r0, r3
 8011338:	f016 f9c1 	bl	80276be <memset>
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	3328      	adds	r3, #40	; 0x28
 8011340:	4618      	mov	r0, r3
 8011342:	f7ff ff93 	bl	801126c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (direction)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	7f1b      	ldrb	r3, [r3, #28]
 801134a:	2b03      	cmp	r3, #3
 801134c:	d826      	bhi.n	801139c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc8>
 801134e:	a201      	add	r2, pc, #4	; (adr r2, 8011354 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 8011350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011354:	08011381 	.word	0x08011381
 8011358:	0801138d 	.word	0x0801138d
 801135c:	08011365 	.word	0x08011365
 8011360:	08011375 	.word	0x08011375
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 8011364:	4b1b      	ldr	r3, [pc, #108]	; (80113d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 8011366:	881b      	ldrh	r3, [r3, #0]
 8011368:	425b      	negs	r3, r3
 801136a:	b29b      	uxth	r3, r3
 801136c:	b21a      	sxth	r2, r3
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	841a      	strh	r2, [r3, #32]
            break;
 8011372:	e017      	b.n	80113a4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 8011374:	4b17      	ldr	r3, [pc, #92]	; (80113d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 8011376:	881b      	ldrh	r3, [r3, #0]
 8011378:	b21a      	sxth	r2, r3
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	841a      	strh	r2, [r3, #32]
            break;
 801137e:	e011      	b.n	80113a4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case NORTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 8011380:	4b15      	ldr	r3, [pc, #84]	; (80113d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 8011382:	881b      	ldrh	r3, [r3, #0]
 8011384:	b21a      	sxth	r2, r3
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	841a      	strh	r2, [r3, #32]
            break;
 801138a:	e00b      	b.n	80113a4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
 801138c:	4b12      	ldr	r3, [pc, #72]	; (80113d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 801138e:	881b      	ldrh	r3, [r3, #0]
 8011390:	425b      	negs	r3, r3
 8011392:	b29b      	uxth	r3, r3
 8011394:	b21a      	sxth	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	841a      	strh	r2, [r3, #32]
            break;
 801139a:	e003      	b.n	80113a4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        default:
            done = true;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2201      	movs	r2, #1
 80113a0:	721a      	strb	r2, [r3, #8]
            // Nothing to do here
            break;
 80113a2:	bf00      	nop
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80113aa:	4b0a      	ldr	r3, [pc, #40]	; (80113d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 80113ac:	881b      	ldrh	r3, [r3, #0]
 80113ae:	b21a      	sxth	r2, r3
 80113b0:	4b09      	ldr	r3, [pc, #36]	; (80113d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 80113b2:	881b      	ldrh	r3, [r3, #0]
 80113b4:	b21b      	sxth	r3, r3
 80113b6:	9300      	str	r3, [sp, #0]
 80113b8:	4613      	mov	r3, r2
 80113ba:	2200      	movs	r2, #0
 80113bc:	2100      	movs	r1, #0
 80113be:	f7fe fadd 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	4618      	mov	r0, r3
 80113c6:	3714      	adds	r7, #20
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd90      	pop	{r4, r7, pc}
 80113cc:	08028fa0 	.word	0x08028fa0
 80113d0:	08028834 	.word	0x08028834
 80113d4:	2000b308 	.word	0x2000b308
 80113d8:	2000b30a 	.word	0x2000b30a

080113dc <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>:
    T& at(const uint16_t index)
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	460b      	mov	r3, r1
 80113e6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	3324      	adds	r3, #36	; 0x24
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	887a      	ldrh	r2, [r7, #2]
 80113f2:	4611      	mov	r1, r2
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	4798      	blx	r3
 80113f8:	4603      	mov	r3, r0
    }
 80113fa:	4618      	mov	r0, r3
 80113fc:	3708      	adds	r7, #8
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}

08011402 <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>:
    T& at(const uint16_t index)
 8011402:	b580      	push	{r7, lr}
 8011404:	b082      	sub	sp, #8
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
 801140a:	460b      	mov	r3, r1
 801140c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	3324      	adds	r3, #36	; 0x24
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	887a      	ldrh	r2, [r7, #2]
 8011418:	4611      	mov	r1, r2
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	4798      	blx	r3
 801141e:	4603      	mov	r3, r0
    }
 8011420:	4618      	mov	r0, r3
 8011422:	3708      	adds	r7, #8
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>:
    void bind(T& presenter)
 8011428:	b480      	push	{r7}
 801142a:	b083      	sub	sp, #12
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
 8011430:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	683a      	ldr	r2, [r7, #0]
 8011436:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011438:	bf00      	nop
 801143a:	370c      	adds	r7, #12
 801143c:	46bd      	mov	sp, r7
 801143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011442:	4770      	bx	lr

08011444 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011452:	683a      	ldr	r2, [r7, #0]
 8011454:	429a      	cmp	r2, r3
 8011456:	d02a      	beq.n	80114ae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801145e:	2b03      	cmp	r3, #3
 8011460:	d820      	bhi.n	80114a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 8011462:	a201      	add	r2, pc, #4	; (adr r2, 8011468 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8011464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011468:	0801148f 	.word	0x0801148f
 801146c:	0801148f 	.word	0x0801148f
 8011470:	08011479 	.word	0x08011479
 8011474:	08011479 	.word	0x08011479
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	3354      	adds	r3, #84	; 0x54
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	687a      	ldr	r2, [r7, #4]
 8011482:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8011486:	2200      	movs	r2, #0
 8011488:	6838      	ldr	r0, [r7, #0]
 801148a:	4798      	blx	r3
            break;
 801148c:	e010      	b.n	80114b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	3354      	adds	r3, #84	; 0x54
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 801149c:	2100      	movs	r1, #0
 801149e:	6838      	ldr	r0, [r7, #0]
 80114a0:	4798      	blx	r3
            break;
 80114a2:	e005      	b.n	80114b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2201      	movs	r2, #1
 80114a8:	721a      	strb	r2, [r3, #8]
            break;
 80114aa:	bf00      	nop
 80114ac:	e000      	b.n	80114b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 80114ae:	bf00      	nop
        }
    }
 80114b0:	3708      	adds	r7, #8
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop

080114b8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80114b8:	b480      	push	{r7}
 80114ba:	b083      	sub	sp, #12
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	4a04      	ldr	r2, [pc, #16]	; (80114d4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	601a      	str	r2, [r3, #0]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	4618      	mov	r0, r3
 80114ca:	370c      	adds	r7, #12
 80114cc:	46bd      	mov	sp, r7
 80114ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d2:	4770      	bx	lr
 80114d4:	08029048 	.word	0x08029048

080114d8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	4639      	mov	r1, r7
 80114e4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7ff ffe4 	bl	80114b8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 80114f0:	4a08      	ldr	r2, [pc, #32]	; (8011514 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	68ba      	ldr	r2, [r7, #8]
 80114fa:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	3308      	adds	r3, #8
 8011500:	463a      	mov	r2, r7
 8011502:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011506:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	4618      	mov	r0, r3
 801150e:	3710      	adds	r7, #16
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	08028f88 	.word	0x08028f88

08011518 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8011518:	b480      	push	{r7}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
    }
 8011520:	4a04      	ldr	r2, [pc, #16]	; (8011534 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	601a      	str	r2, [r3, #0]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	4618      	mov	r0, r3
 801152a:	370c      	adds	r7, #12
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr
 8011534:	08029048 	.word	0x08029048

08011538 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8011538:	b580      	push	{r7, lr}
 801153a:	b082      	sub	sp, #8
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
    }
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f7ff ffe9 	bl	8011518 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011546:	2104      	movs	r1, #4
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f016 f803 	bl	8027554 <_ZdlPvj>
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	4618      	mov	r0, r3
 8011552:	3708      	adds	r7, #8
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable to the new position as calculated in handleTickEvent().
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
    {
        switch (direction)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	7f1b      	ldrb	r3, [r3, #28]
 8011566:	2b03      	cmp	r3, #3
 8011568:	d820      	bhi.n	80115ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x54>
 801156a:	a201      	add	r2, pc, #4	; (adr r2, 8011570 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x18>)
 801156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011570:	08011597 	.word	0x08011597
 8011574:	08011597 	.word	0x08011597
 8011578:	08011581 	.word	0x08011581
 801157c:	08011581 	.word	0x08011581
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	3354      	adds	r3, #84	; 0x54
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 801158e:	2200      	movs	r2, #0
 8011590:	6838      	ldr	r0, [r7, #0]
 8011592:	4798      	blx	r3
            break;
 8011594:	e00e      	b.n	80115b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	3354      	adds	r3, #84	; 0x54
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	687a      	ldr	r2, [r7, #4]
 80115a0:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 80115a4:	2100      	movs	r1, #0
 80115a6:	6838      	ldr	r0, [r7, #0]
 80115a8:	4798      	blx	r3
            break;
 80115aa:	e003      	b.n	80115b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2201      	movs	r2, #1
 80115b0:	721a      	strb	r2, [r3, #8]
            break;
 80115b2:	bf00      	nop
        }
    }
 80115b4:	bf00      	nop
 80115b6:	3708      	adds	r7, #8
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	60f8      	str	r0, [r7, #12]
 80115c4:	60b9      	str	r1, [r7, #8]
 80115c6:	4639      	mov	r1, r7
 80115c8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7ff ff72 	bl	80114b8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 80115d4:	4a08      	ldr	r2, [pc, #32]	; (80115f8 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	68ba      	ldr	r2, [r7, #8]
 80115de:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	3308      	adds	r3, #8
 80115e4:	463a      	mov	r2, r7
 80115e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115ea:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	4618      	mov	r0, r3
 80115f2:	3710      	adds	r7, #16
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}
 80115f8:	08029030 	.word	0x08029030

080115fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b082      	sub	sp, #8
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	4a0a      	ldr	r2, [pc, #40]	; (8011630 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	601a      	str	r2, [r3, #0]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	333c      	adds	r3, #60	; 0x3c
 801160e:	4618      	mov	r0, r3
 8011610:	f7ff fcd8 	bl	8010fc4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	330c      	adds	r3, #12
 8011618:	4618      	mov	r0, r3
 801161a:	f7ff fcb1 	bl	8010f80 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	4618      	mov	r0, r3
 8011622:	f7fe f8d3 	bl	800f7cc <_ZN8touchgfx10TransitionD1Ev>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4618      	mov	r0, r3
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	08028f60 	.word	0x08028f60

08011634 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f7ff ffdd 	bl	80115fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8011642:	2154      	movs	r1, #84	; 0x54
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f015 ff85 	bl	8027554 <_ZdlPvj>
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	4618      	mov	r0, r3
 801164e:	3708      	adds	r7, #8
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	4a0a      	ldr	r2, [pc, #40]	; (8011688 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x34>)
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	601a      	str	r2, [r3, #0]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	3328      	adds	r3, #40	; 0x28
 8011666:	4618      	mov	r0, r3
 8011668:	f7ff fe12 	bl	8011290 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	330c      	adds	r3, #12
 8011670:	4618      	mov	r0, r3
 8011672:	f7ff fdd9 	bl	8011228 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4618      	mov	r0, r3
 801167a:	f7fe f8a7 	bl	800f7cc <_ZN8touchgfx10TransitionD1Ev>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4618      	mov	r0, r3
 8011682:	3708      	adds	r7, #8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	08028fa0 	.word	0x08028fa0

0801168c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f7ff ffdd 	bl	8011654 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 801169a:	2150      	movs	r1, #80	; 0x50
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f015 ff59 	bl	8027554 <_ZdlPvj>
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	4618      	mov	r0, r3
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <_ZN8touchgfx12NoTransitionD1Ev>:
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	4a05      	ldr	r2, [pc, #20]	; (80116cc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	601a      	str	r2, [r3, #0]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fe f885 	bl	800f7cc <_ZN8touchgfx10TransitionD1Ev>
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	4618      	mov	r0, r3
 80116c6:	3708      	adds	r7, #8
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	080290c8 	.word	0x080290c8

080116d0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f7ff ffe7 	bl	80116ac <_ZN8touchgfx12NoTransitionD1Ev>
 80116de:	210c      	movs	r1, #12
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f015 ff37 	bl	8027554 <_ZdlPvj>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	4618      	mov	r0, r3
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b082      	sub	sp, #8
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	4a05      	ldr	r2, [pc, #20]	; (8011710 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	601a      	str	r2, [r3, #0]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	4618      	mov	r0, r3
 8011702:	f7fe f8cd 	bl	800f8a0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	4618      	mov	r0, r3
 801170a:	3708      	adds	r7, #8
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	0802912c 	.word	0x0802912c

08011714 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f7ff ffe7 	bl	80116f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011722:	2110      	movs	r1, #16
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f015 ff15 	bl	8027554 <_ZdlPvj>
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	4618      	mov	r0, r3
 801172e:	3708      	adds	r7, #8
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}

08011734 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 801173c:	4b59      	ldr	r3, [pc, #356]	; (80118a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	f083 0301 	eor.w	r3, r3, #1
 8011744:	b2db      	uxtb	r3, r3
 8011746:	2b00      	cmp	r3, #0
 8011748:	d003      	beq.n	8011752 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2201      	movs	r2, #1
 801174e:	721a      	strb	r2, [r3, #8]
            return;
 8011750:	e0a5      	b.n	801189e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	4618      	mov	r0, r3
 8011756:	f7fe f859 	bl	800f80c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011760:	3301      	adds	r3, #1
 8011762:	b2da      	uxtb	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011776:	429a      	cmp	r2, r3
 8011778:	d82f      	bhi.n	80117da <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011780:	b298      	uxth	r0, r3
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801178e:	b29b      	uxth	r3, r3
 8011790:	2100      	movs	r1, #0
 8011792:	f00a fec3 	bl	801c51c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011796:	4603      	mov	r3, r0
 8011798:	461a      	mov	r2, r3
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	f003 0301 	and.w	r3, r3, #1
 80117ac:	b29b      	uxth	r3, r3
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d01b      	beq.n	80117ea <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	687a      	ldr	r2, [r7, #4]
 80117bc:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 80117c0:	2a00      	cmp	r2, #0
 80117c2:	dd01      	ble.n	80117c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 80117c4:	2201      	movs	r2, #1
 80117c6:	e001      	b.n	80117cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 80117c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117cc:	4413      	add	r3, r2
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	b21a      	sxth	r2, r3
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80117d8:	e007      	b.n	80117ea <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2201      	movs	r2, #1
 80117de:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2200      	movs	r2, #0
 80117e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 80117e8:	e059      	b.n	801189e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80117f0:	2b03      	cmp	r3, #3
 80117f2:	d845      	bhi.n	8011880 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 80117f4:	a201      	add	r2, pc, #4	; (adr r2, 80117fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 80117f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117fa:	bf00      	nop
 80117fc:	08011847 	.word	0x08011847
 8011800:	08011847 	.word	0x08011847
 8011804:	0801180d 	.word	0x0801180d
 8011808:	0801180d 	.word	0x0801180d
            calculatedValue -= snapshot.getX();
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	330c      	adds	r3, #12
 8011810:	4618      	mov	r0, r3
 8011812:	f7fe f8e0 	bl	800f9d6 <_ZNK8touchgfx8Drawable4getXEv>
 8011816:	4603      	mov	r3, r0
 8011818:	4619      	mov	r1, r3
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011820:	b29a      	uxth	r2, r3
 8011822:	b28b      	uxth	r3, r1
 8011824:	1ad3      	subs	r3, r2, r3
 8011826:	b29b      	uxth	r3, r3
 8011828:	b21a      	sxth	r2, r3
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f103 000c 	add.w	r0, r3, #12
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801183c:	2200      	movs	r2, #0
 801183e:	4619      	mov	r1, r3
 8011840:	f00a f986 	bl	801bb50 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011844:	e020      	b.n	8011888 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	330c      	adds	r3, #12
 801184a:	4618      	mov	r0, r3
 801184c:	f7fe f8d0 	bl	800f9f0 <_ZNK8touchgfx8Drawable4getYEv>
 8011850:	4603      	mov	r3, r0
 8011852:	4619      	mov	r1, r3
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801185a:	b29a      	uxth	r2, r3
 801185c:	b28b      	uxth	r3, r1
 801185e:	1ad3      	subs	r3, r2, r3
 8011860:	b29b      	uxth	r3, r3
 8011862:	b21a      	sxth	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f103 000c 	add.w	r0, r3, #12
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011876:	461a      	mov	r2, r3
 8011878:	2100      	movs	r1, #0
 801187a:	f00a f969 	bl	801bb50 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801187e:	e003      	b.n	8011888 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2201      	movs	r2, #1
 8011884:	721a      	strb	r2, [r3, #8]
            break;
 8011886:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6858      	ldr	r0, [r3, #4]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	3378      	adds	r3, #120	; 0x78
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	687a      	ldr	r2, [r7, #4]
 8011898:	323c      	adds	r2, #60	; 0x3c
 801189a:	4611      	mov	r1, r2
 801189c:	4798      	blx	r3
    }
 801189e:	3708      	adds	r7, #8
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	2000b313 	.word	0x2000b313

080118a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 80118b0:	4b0b      	ldr	r3, [pc, #44]	; (80118e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d00e      	beq.n	80118d6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d00a      	beq.n	80118d6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6858      	ldr	r0, [r3, #4]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	3364      	adds	r3, #100	; 0x64
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	320c      	adds	r2, #12
 80118d2:	4611      	mov	r1, r2
 80118d4:	4798      	blx	r3
    }
 80118d6:	bf00      	nop
 80118d8:	3708      	adds	r7, #8
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
 80118de:	bf00      	nop
 80118e0:	2000b313 	.word	0x2000b313

080118e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b088      	sub	sp, #32
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 80118ec:	4b1a      	ldr	r3, [pc, #104]	; (8011958 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d02d      	beq.n	8011950 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7fd ff9c 	bl	800f834 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80118fc:	4a17      	ldr	r2, [pc, #92]	; (801195c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 80118fe:	f107 0318 	add.w	r3, r7, #24
 8011902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011906:	e883 0003 	stmia.w	r3, {r0, r1}
 801190a:	f107 0008 	add.w	r0, r7, #8
 801190e:	f107 0318 	add.w	r3, r7, #24
 8011912:	cb0c      	ldmia	r3, {r2, r3}
 8011914:	6879      	ldr	r1, [r7, #4]
 8011916:	f7ff fddf 	bl	80114d8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	685a      	ldr	r2, [r3, #4]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	3378      	adds	r3, #120	; 0x78
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f107 0108 	add.w	r1, r7, #8
 801192c:	4610      	mov	r0, r2
 801192e:	4798      	blx	r3
            screenContainer->add(snapshot);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6858      	ldr	r0, [r3, #4]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	3360      	adds	r3, #96	; 0x60
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	687a      	ldr	r2, [r7, #4]
 8011940:	320c      	adds	r2, #12
 8011942:	4611      	mov	r1, r2
 8011944:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011946:	f107 0308 	add.w	r3, r7, #8
 801194a:	4618      	mov	r0, r3
 801194c:	f7ff fb3a 	bl	8010fc4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8011950:	bf00      	nop
 8011952:	3720      	adds	r7, #32
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}
 8011958:	2000b313 	.word	0x2000b313
 801195c:	0802883c 	.word	0x0802883c

08011960 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8011960:	b580      	push	{r7, lr}
 8011962:	b082      	sub	sp, #8
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	6039      	str	r1, [r7, #0]
        switch (direction)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011970:	2b03      	cmp	r3, #3
 8011972:	d83b      	bhi.n	80119ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 8011974:	a201      	add	r2, pc, #4	; (adr r2, 801197c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 8011976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801197a:	bf00      	nop
 801197c:	080119bd 	.word	0x080119bd
 8011980:	080119d7 	.word	0x080119d7
 8011984:	0801198d 	.word	0x0801198d
 8011988:	080119a3 	.word	0x080119a3
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	3354      	adds	r3, #84	; 0x54
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	4a18      	ldr	r2, [pc, #96]	; (80119f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011996:	8812      	ldrh	r2, [r2, #0]
 8011998:	b211      	sxth	r1, r2
 801199a:	2200      	movs	r2, #0
 801199c:	6838      	ldr	r0, [r7, #0]
 801199e:	4798      	blx	r3
            break;
 80119a0:	e025      	b.n	80119ee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	3354      	adds	r3, #84	; 0x54
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4a13      	ldr	r2, [pc, #76]	; (80119f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 80119ac:	8812      	ldrh	r2, [r2, #0]
 80119ae:	4252      	negs	r2, r2
 80119b0:	b292      	uxth	r2, r2
 80119b2:	b211      	sxth	r1, r2
 80119b4:	2200      	movs	r2, #0
 80119b6:	6838      	ldr	r0, [r7, #0]
 80119b8:	4798      	blx	r3
            break;
 80119ba:	e018      	b.n	80119ee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	3354      	adds	r3, #84	; 0x54
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	4a0d      	ldr	r2, [pc, #52]	; (80119fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 80119c6:	8812      	ldrh	r2, [r2, #0]
 80119c8:	4252      	negs	r2, r2
 80119ca:	b292      	uxth	r2, r2
 80119cc:	b212      	sxth	r2, r2
 80119ce:	2100      	movs	r1, #0
 80119d0:	6838      	ldr	r0, [r7, #0]
 80119d2:	4798      	blx	r3
            break;
 80119d4:	e00b      	b.n	80119ee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	3354      	adds	r3, #84	; 0x54
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	4a07      	ldr	r2, [pc, #28]	; (80119fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 80119e0:	8812      	ldrh	r2, [r2, #0]
 80119e2:	b212      	sxth	r2, r2
 80119e4:	2100      	movs	r1, #0
 80119e6:	6838      	ldr	r0, [r7, #0]
 80119e8:	4798      	blx	r3
            break;
 80119ea:	e000      	b.n	80119ee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 80119ec:	bf00      	nop
    }
 80119ee:	bf00      	nop
 80119f0:	3708      	adds	r7, #8
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop
 80119f8:	2000b308 	.word	0x2000b308
 80119fc:	2000b30a 	.word	0x2000b30a

08011a00 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	687a      	ldr	r2, [r7, #4]
 8011a10:	68d2      	ldr	r2, [r2, #12]
 8011a12:	1052      	asrs	r2, r2, #1
 8011a14:	1898      	adds	r0, r3, r2
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	68db      	ldr	r3, [r3, #12]
 8011a1a:	f003 0301 	and.w	r3, r3, #1
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d102      	bne.n	8011a28 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	689b      	ldr	r3, [r3, #8]
 8011a26:	e00a      	b.n	8011a3e <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	685b      	ldr	r3, [r3, #4]
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	68d2      	ldr	r2, [r2, #12]
 8011a30:	1052      	asrs	r2, r2, #1
 8011a32:	4413      	add	r3, r2
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	6892      	ldr	r2, [r2, #8]
 8011a3a:	4413      	add	r3, r2
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	6839      	ldr	r1, [r7, #0]
 8011a40:	4798      	blx	r3
    }
 8011a42:	bf00      	nop
 8011a44:	3708      	adds	r7, #8
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}

08011a4a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8011a4a:	b480      	push	{r7}
 8011a4c:	b083      	sub	sp, #12
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	685b      	ldr	r3, [r3, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d010      	beq.n	8011a7c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	689b      	ldr	r3, [r3, #8]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d107      	bne.n	8011a72 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	68db      	ldr	r3, [r3, #12]
 8011a66:	f003 0301 	and.w	r3, r3, #1
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d101      	bne.n	8011a72 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011a6e:	2301      	movs	r3, #1
 8011a70:	e000      	b.n	8011a74 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8011a72:	2300      	movs	r3, #0
 8011a74:	2b01      	cmp	r3, #1
 8011a76:	d001      	beq.n	8011a7c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011a78:	2301      	movs	r3, #1
 8011a7a:	e000      	b.n	8011a7e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8011a7c:	2300      	movs	r3, #0
    }
 8011a7e:	4618      	mov	r0, r3
 8011a80:	370c      	adds	r7, #12
 8011a82:	46bd      	mov	sp, r7
 8011a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a88:	4770      	bx	lr
	...

08011a8c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8011a8c:	b590      	push	{r4, r7, lr}
 8011a8e:	b08b      	sub	sp, #44	; 0x2c
 8011a90:	af02      	add	r7, sp, #8
 8011a92:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7fd feb8 	bl	800f80c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	7f9b      	ldrb	r3, [r3, #30]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	b2da      	uxtb	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	779a      	strb	r2, [r3, #30]
        if (animationCounter <= animationSteps)
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	7f9a      	ldrb	r2, [r3, #30]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	7f5b      	ldrb	r3, [r3, #29]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d82b      	bhi.n	8011b0c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	7f9b      	ldrb	r3, [r3, #30]
 8011ab8:	b298      	uxth	r0, r3
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	7f5b      	ldrb	r3, [r3, #29]
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	2100      	movs	r1, #0
 8011ac8:	f00a fd28 	bl	801c51c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011acc:	4603      	mov	r3, r0
 8011ace:	461a      	mov	r2, r3
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	845a      	strh	r2, [r3, #34]	; 0x22
            if (calculatedValue % 2)
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	f003 0301 	and.w	r3, r3, #1
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d019      	beq.n	8011b1a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8011af4:	2a00      	cmp	r2, #0
 8011af6:	dd01      	ble.n	8011afc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 8011af8:	2201      	movs	r2, #1
 8011afa:	e001      	b.n	8011b00 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 8011afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b00:	4413      	add	r3, r2
 8011b02:	b29b      	uxth	r3, r3
 8011b04:	b21a      	sxth	r2, r3
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	845a      	strh	r2, [r3, #34]	; 0x22
 8011b0a:	e006      	b.n	8011b1a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            done = true;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2201      	movs	r2, #1
 8011b10:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2200      	movs	r2, #0
 8011b16:	779a      	strb	r2, [r3, #30]
            return;
 8011b18:	e0c0      	b.n	8011c9c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x210>
        calculatedValue -= movedToPos;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011b20:	b29a      	uxth	r2, r3
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8011b28:	b29b      	uxth	r3, r3
 8011b2a:	1ad3      	subs	r3, r2, r3
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	b21a      	sxth	r2, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	845a      	strh	r2, [r3, #34]	; 0x22
        movedToPos += calculatedValue;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8011b3a:	b29a      	uxth	r2, r3
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	4413      	add	r3, r2
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	b21a      	sxth	r2, r3
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	849a      	strh	r2, [r3, #36]	; 0x24
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	7f9b      	ldrb	r3, [r3, #30]
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	f040 8097 	bne.w	8011c86 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
 8011b58:	4b52      	ldr	r3, [pc, #328]	; (8011ca4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x218>)
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	f000 8092 	beq.w	8011c86 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
            Rect rect;
 8011b62:	f107 0314 	add.w	r3, r7, #20
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fd fd82 	bl	800f670 <_ZN8touchgfx4RectC1Ev>
            switch (direction)
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	7f1b      	ldrb	r3, [r3, #28]
 8011b70:	2b03      	cmp	r3, #3
 8011b72:	d85b      	bhi.n	8011c2c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a0>
 8011b74:	a201      	add	r2, pc, #4	; (adr r2, 8011b7c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xf0>)
 8011b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b7a:	bf00      	nop
 8011b7c:	08011bdd 	.word	0x08011bdd
 8011b80:	08011c07 	.word	0x08011c07
 8011b84:	08011b8d 	.word	0x08011b8d
 8011b88:	08011bb3 	.word	0x08011bb3
                rect.x = 0;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8011b90:	2300      	movs	r3, #0
 8011b92:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011b9a:	b29a      	uxth	r2, r3
 8011b9c:	4b42      	ldr	r3, [pc, #264]	; (8011ca8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011b9e:	881b      	ldrh	r3, [r3, #0]
 8011ba0:	4413      	add	r3, r2
 8011ba2:	b29b      	uxth	r3, r3
 8011ba4:	b21b      	sxth	r3, r3
 8011ba6:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 8011ba8:	4b40      	ldr	r3, [pc, #256]	; (8011cac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8011baa:	881b      	ldrh	r3, [r3, #0]
 8011bac:	b21b      	sxth	r3, r3
 8011bae:	837b      	strh	r3, [r7, #26]
                break;
 8011bb0:	e03d      	b.n	8011c2e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = calculatedValue;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011bb8:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH - calculatedValue;
 8011bbe:	4b3a      	ldr	r3, [pc, #232]	; (8011ca8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011bc0:	881a      	ldrh	r2, [r3, #0]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	1ad3      	subs	r3, r2, r3
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	b21b      	sxth	r3, r3
 8011bd0:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 8011bd2:	4b36      	ldr	r3, [pc, #216]	; (8011cac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8011bd4:	881b      	ldrh	r3, [r3, #0]
 8011bd6:	b21b      	sxth	r3, r3
 8011bd8:	837b      	strh	r3, [r7, #26]
                break;
 8011bda:	e028      	b.n	8011c2e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	82bb      	strh	r3, [r7, #20]
                rect.y = calculatedValue;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011be6:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 8011be8:	4b2f      	ldr	r3, [pc, #188]	; (8011ca8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011bea:	881b      	ldrh	r3, [r3, #0]
 8011bec:	b21b      	sxth	r3, r3
 8011bee:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT - calculatedValue;
 8011bf0:	4b2e      	ldr	r3, [pc, #184]	; (8011cac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8011bf2:	881a      	ldrh	r2, [r3, #0]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011bfa:	b29b      	uxth	r3, r3
 8011bfc:	1ad3      	subs	r3, r2, r3
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	b21b      	sxth	r3, r3
 8011c02:	837b      	strh	r3, [r7, #26]
                break;
 8011c04:	e013      	b.n	8011c2e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 8011c06:	2300      	movs	r3, #0
 8011c08:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 8011c0e:	4b26      	ldr	r3, [pc, #152]	; (8011ca8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011c10:	881b      	ldrh	r3, [r3, #0]
 8011c12:	b21b      	sxth	r3, r3
 8011c14:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT + calculatedValue;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011c1c:	b29a      	uxth	r2, r3
 8011c1e:	4b23      	ldr	r3, [pc, #140]	; (8011cac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8011c20:	881b      	ldrh	r3, [r3, #0]
 8011c22:	4413      	add	r3, r2
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	b21b      	sxth	r3, r3
 8011c28:	837b      	strh	r3, [r7, #26]
                break;
 8011c2a:	e000      	b.n	8011c2e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                break;
 8011c2c:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 8011c2e:	f7fd ffe3 	bl	800fbf8 <_ZN8touchgfx3HAL11getInstanceEv>
 8011c32:	4602      	mov	r2, r0
 8011c34:	6813      	ldr	r3, [r2, #0]
 8011c36:	3328      	adds	r3, #40	; 0x28
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4610      	mov	r0, r2
 8011c3c:	4798      	blx	r3
 8011c3e:	61f8      	str	r0, [r7, #28]
            Rect source;
 8011c40:	f107 030c 	add.w	r3, r7, #12
 8011c44:	4618      	mov	r0, r3
 8011c46:	f7fd fd13 	bl	800f670 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 8011c52:	4b15      	ldr	r3, [pc, #84]	; (8011ca8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011c54:	881b      	ldrh	r3, [r3, #0]
 8011c56:	b21b      	sxth	r3, r3
 8011c58:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 8011c5a:	4b14      	ldr	r3, [pc, #80]	; (8011cac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8011c5c:	881b      	ldrh	r3, [r3, #0]
 8011c5e:	b21b      	sxth	r3, r3
 8011c60:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 8011c62:	f7fd ffc9 	bl	800fbf8 <_ZN8touchgfx3HAL11getInstanceEv>
 8011c66:	f7fd ffd3 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8011c6a:	6803      	ldr	r3, [r0, #0]
 8011c6c:	330c      	adds	r3, #12
 8011c6e:	681c      	ldr	r4, [r3, #0]
 8011c70:	f107 0114 	add.w	r1, r7, #20
 8011c74:	f107 020c 	add.w	r2, r7, #12
 8011c78:	2300      	movs	r3, #0
 8011c7a:	9301      	str	r3, [sp, #4]
 8011c7c:	23ff      	movs	r3, #255	; 0xff
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	460b      	mov	r3, r1
 8011c82:	69f9      	ldr	r1, [r7, #28]
 8011c84:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6858      	ldr	r0, [r3, #4]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	3378      	adds	r3, #120	; 0x78
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	320c      	adds	r2, #12
 8011c98:	4611      	mov	r1, r2
 8011c9a:	4798      	blx	r3
    }
 8011c9c:	3724      	adds	r7, #36	; 0x24
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd90      	pop	{r4, r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	2000b312 	.word	0x2000b312
 8011ca8:	2000b308 	.word	0x2000b308
 8011cac:	2000b30a 	.word	0x2000b30a

08011cb0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6858      	ldr	r0, [r3, #4]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	3364      	adds	r3, #100	; 0x64
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	3228      	adds	r2, #40	; 0x28
 8011cca:	4611      	mov	r1, r2
 8011ccc:	4798      	blx	r3
    }
 8011cce:	bf00      	nop
 8011cd0:	3708      	adds	r7, #8
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
	...

08011cd8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b088      	sub	sp, #32
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
        Transition::init();
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7fd fda6 	bl	800f834 <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 8011ce8:	4a16      	ldr	r2, [pc, #88]	; (8011d44 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x6c>)
 8011cea:	f107 0318 	add.w	r3, r7, #24
 8011cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011cf2:	e883 0003 	stmia.w	r3, {r0, r1}
 8011cf6:	f107 0008 	add.w	r0, r7, #8
 8011cfa:	f107 0318 	add.w	r3, r7, #24
 8011cfe:	cb0c      	ldmia	r3, {r2, r3}
 8011d00:	6879      	ldr	r1, [r7, #4]
 8011d02:	f7ff fc5b 	bl	80115bc <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	685a      	ldr	r2, [r3, #4]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	3378      	adds	r3, #120	; 0x78
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f107 0108 	add.w	r1, r7, #8
 8011d18:	4610      	mov	r0, r2
 8011d1a:	4798      	blx	r3
        screenContainer->add(solid);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6858      	ldr	r0, [r3, #4]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	3360      	adds	r3, #96	; 0x60
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	687a      	ldr	r2, [r7, #4]
 8011d2c:	3228      	adds	r2, #40	; 0x28
 8011d2e:	4611      	mov	r1, r2
 8011d30:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 8011d32:	f107 0308 	add.w	r3, r7, #8
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7ff fa76 	bl	8011228 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8011d3c:	bf00      	nop
 8011d3e:	3720      	adds	r7, #32
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}
 8011d44:	08028844 	.word	0x08028844

08011d48 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
        switch (direction)
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	7f1b      	ldrb	r3, [r3, #28]
 8011d56:	2b03      	cmp	r3, #3
 8011d58:	d83a      	bhi.n	8011dd0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x88>
 8011d5a:	a201      	add	r2, pc, #4	; (adr r2, 8011d60 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x18>)
 8011d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d60:	08011da1 	.word	0x08011da1
 8011d64:	08011dbb 	.word	0x08011dbb
 8011d68:	08011d71 	.word	0x08011d71
 8011d6c:	08011d87 	.word	0x08011d87
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	3354      	adds	r3, #84	; 0x54
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	4a18      	ldr	r2, [pc, #96]	; (8011ddc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 8011d7a:	8812      	ldrh	r2, [r2, #0]
 8011d7c:	b211      	sxth	r1, r2
 8011d7e:	2200      	movs	r2, #0
 8011d80:	6838      	ldr	r0, [r7, #0]
 8011d82:	4798      	blx	r3
            break;
 8011d84:	e025      	b.n	8011dd2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	3354      	adds	r3, #84	; 0x54
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	4a13      	ldr	r2, [pc, #76]	; (8011ddc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 8011d90:	8812      	ldrh	r2, [r2, #0]
 8011d92:	4252      	negs	r2, r2
 8011d94:	b292      	uxth	r2, r2
 8011d96:	b211      	sxth	r1, r2
 8011d98:	2200      	movs	r2, #0
 8011d9a:	6838      	ldr	r0, [r7, #0]
 8011d9c:	4798      	blx	r3
            break;
 8011d9e:	e018      	b.n	8011dd2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	3354      	adds	r3, #84	; 0x54
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	4a0d      	ldr	r2, [pc, #52]	; (8011de0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011daa:	8812      	ldrh	r2, [r2, #0]
 8011dac:	4252      	negs	r2, r2
 8011dae:	b292      	uxth	r2, r2
 8011db0:	b212      	sxth	r2, r2
 8011db2:	2100      	movs	r1, #0
 8011db4:	6838      	ldr	r0, [r7, #0]
 8011db6:	4798      	blx	r3
            break;
 8011db8:	e00b      	b.n	8011dd2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	3354      	adds	r3, #84	; 0x54
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	4a07      	ldr	r2, [pc, #28]	; (8011de0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011dc4:	8812      	ldrh	r2, [r2, #0]
 8011dc6:	b212      	sxth	r2, r2
 8011dc8:	2100      	movs	r1, #0
 8011dca:	6838      	ldr	r0, [r7, #0]
 8011dcc:	4798      	blx	r3
            break;
 8011dce:	e000      	b.n	8011dd2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            break;
 8011dd0:	bf00      	nop
    }
 8011dd2:	bf00      	nop
 8011dd4:	3708      	adds	r7, #8
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	2000b308 	.word	0x2000b308
 8011de0:	2000b30a 	.word	0x2000b30a

08011de4 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
        }
 8011dee:	bf00      	nop
 8011df0:	370c      	adds	r7, #12
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr
	...

08011dfc <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af02      	add	r7, sp, #8
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8011e06:	4b08      	ldr	r3, [pc, #32]	; (8011e28 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x2c>)
 8011e08:	881b      	ldrh	r3, [r3, #0]
 8011e0a:	b21a      	sxth	r2, r3
 8011e0c:	4b07      	ldr	r3, [pc, #28]	; (8011e2c <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x30>)
 8011e0e:	881b      	ldrh	r3, [r3, #0]
 8011e10:	b21b      	sxth	r3, r3
 8011e12:	9300      	str	r3, [sp, #0]
 8011e14:	4613      	mov	r3, r2
 8011e16:	2200      	movs	r2, #0
 8011e18:	2100      	movs	r1, #0
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f7fd fc3f 	bl	800f69e <_ZN8touchgfx4RectC1Essss>
        }
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	3708      	adds	r7, #8
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}
 8011e28:	2000b308 	.word	0x2000b308
 8011e2c:	2000b30a 	.word	0x2000b30a

08011e30 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	687a      	ldr	r2, [r7, #4]
 8011e40:	68d2      	ldr	r2, [r2, #12]
 8011e42:	1052      	asrs	r2, r2, #1
 8011e44:	1898      	adds	r0, r3, r2
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	68db      	ldr	r3, [r3, #12]
 8011e4a:	f003 0301 	and.w	r3, r3, #1
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d102      	bne.n	8011e58 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	689b      	ldr	r3, [r3, #8]
 8011e56:	e00a      	b.n	8011e6e <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	685b      	ldr	r3, [r3, #4]
 8011e5c:	687a      	ldr	r2, [r7, #4]
 8011e5e:	68d2      	ldr	r2, [r2, #12]
 8011e60:	1052      	asrs	r2, r2, #1
 8011e62:	4413      	add	r3, r2
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	6892      	ldr	r2, [r2, #8]
 8011e6a:	4413      	add	r3, r2
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	6839      	ldr	r1, [r7, #0]
 8011e70:	4798      	blx	r3
    }
 8011e72:	bf00      	nop
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}

08011e7a <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8011e7a:	b480      	push	{r7}
 8011e7c:	b083      	sub	sp, #12
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d010      	beq.n	8011eac <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	689b      	ldr	r3, [r3, #8]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d107      	bne.n	8011ea2 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	f003 0301 	and.w	r3, r3, #1
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d101      	bne.n	8011ea2 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	e000      	b.n	8011ea4 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d001      	beq.n	8011eac <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	e000      	b.n	8011eae <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8011eac:	2300      	movs	r3, #0
    }
 8011eae:	4618      	mov	r0, r3
 8011eb0:	370c      	adds	r7, #12
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr

08011eba <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8011eba:	b580      	push	{r7, lr}
 8011ebc:	b082      	sub	sp, #8
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	68d2      	ldr	r2, [r2, #12]
 8011eca:	1052      	asrs	r2, r2, #1
 8011ecc:	1899      	adds	r1, r3, r2
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	68db      	ldr	r3, [r3, #12]
 8011ed2:	f003 0301 	and.w	r3, r3, #1
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d102      	bne.n	8011ee0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	689b      	ldr	r3, [r3, #8]
 8011ede:	e00a      	b.n	8011ef6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	68d2      	ldr	r2, [r2, #12]
 8011ee8:	1052      	asrs	r2, r2, #1
 8011eea:	4413      	add	r3, r2
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	6892      	ldr	r2, [r2, #8]
 8011ef2:	4413      	add	r3, r2
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	4608      	mov	r0, r1
 8011ef8:	4798      	blx	r3
    }
 8011efa:	bf00      	nop
 8011efc:	3708      	adds	r7, #8
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}

08011f02 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8011f02:	b480      	push	{r7}
 8011f04:	b083      	sub	sp, #12
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d010      	beq.n	8011f34 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	689b      	ldr	r3, [r3, #8]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d107      	bne.n	8011f2a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	f003 0301 	and.w	r3, r3, #1
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d101      	bne.n	8011f2a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011f26:	2301      	movs	r3, #1
 8011f28:	e000      	b.n	8011f2c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d001      	beq.n	8011f34 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011f30:	2301      	movs	r3, #1
 8011f32:	e000      	b.n	8011f36 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8011f34:	2300      	movs	r3, #0
    }
 8011f36:	4618      	mov	r0, r3
 8011f38:	370c      	adds	r7, #12
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr

08011f42 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8011f42:	b480      	push	{r7}
 8011f44:	b083      	sub	sp, #12
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
 8011f4a:	6039      	str	r1, [r7, #0]
        color = col;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	683a      	ldr	r2, [r7, #0]
 8011f50:	601a      	str	r2, [r3, #0]
    }
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	4618      	mov	r0, r3
 8011f56:	370c      	adds	r7, #12
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8011f60:	b480      	push	{r7}
 8011f62:	b083      	sub	sp, #12
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	460b      	mov	r3, r1
 8011f6a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	887a      	ldrh	r2, [r7, #2]
 8011f70:	801a      	strh	r2, [r3, #0]
    {
    }
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	4618      	mov	r0, r3
 8011f76:	370c      	adds	r7, #12
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7e:	4770      	bx	lr

08011f80 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
    {
 8011f88:	4a06      	ldr	r2, [pc, #24]	; (8011fa4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	601a      	str	r2, [r3, #0]
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	3304      	adds	r3, #4
 8011f92:	4618      	mov	r0, r3
 8011f94:	f000 fc5e 	bl	8012854 <_ZN8touchgfx9ContainerD1Ev>
    }
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3708      	adds	r7, #8
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	0802bb98 	.word	0x0802bb98

08011fa8 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b082      	sub	sp, #8
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
    }
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f7ff ffe5 	bl	8011f80 <_ZN8touchgfx6ScreenD1Ev>
 8011fb6:	213c      	movs	r1, #60	; 0x3c
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f015 facb 	bl	8027554 <_ZdlPvj>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3708      	adds	r7, #8
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}

08011fc8 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
    {
    }
 8011fd0:	bf00      	nop
 8011fd2:	370c      	adds	r7, #12
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr

08011fdc <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8011fdc:	b480      	push	{r7}
 8011fde:	b083      	sub	sp, #12
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
    {
    }
 8011fe4:	bf00      	nop
 8011fe6:	370c      	adds	r7, #12
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr

08011ff0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 8011ff0:	b480      	push	{r7}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
    {
    }
 8011ff8:	bf00      	nop
 8011ffa:	370c      	adds	r7, #12
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr

08012004 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8012004:	b480      	push	{r7}
 8012006:	b083      	sub	sp, #12
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
    {
    }
 801200c:	bf00      	nop
 801200e:	370c      	adds	r7, #12
 8012010:	46bd      	mov	sp, r7
 8012012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012016:	4770      	bx	lr

08012018 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8012018:	b480      	push	{r7}
 801201a:	b083      	sub	sp, #12
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	460b      	mov	r3, r1
 8012022:	70fb      	strb	r3, [r7, #3]
    {
    }
 8012024:	bf00      	nop
 8012026:	370c      	adds	r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr

08012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	3304      	adds	r3, #4
 801203e:	6839      	ldr	r1, [r7, #0]
 8012040:	4618      	mov	r0, r3
 8012042:	f005 fc81 	bl	8017948 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8012046:	bf00      	nop
 8012048:	3708      	adds	r7, #8
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}

0801204e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 801204e:	b480      	push	{r7}
 8012050:	b083      	sub	sp, #12
 8012052:	af00      	add	r7, sp, #0
 8012054:	6078      	str	r0, [r7, #4]
 8012056:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	683a      	ldr	r2, [r7, #0]
 801205c:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801205e:	bf00      	nop
 8012060:	370c      	adds	r7, #12
 8012062:	46bd      	mov	sp, r7
 8012064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012068:	4770      	bx	lr
	...

0801206c <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	4a05      	ldr	r2, [pc, #20]	; (801208c <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	601a      	str	r2, [r3, #0]
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	4618      	mov	r0, r3
 801207e:	f7fd ff0d 	bl	800fe9c <_ZN8touchgfx6WidgetD1Ev>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	4618      	mov	r0, r3
 8012086:	3708      	adds	r7, #8
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	0802b218 	.word	0x0802b218

08012090 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f7ff ffe7 	bl	801206c <_ZN8touchgfx14AbstractButtonD1Ev>
 801209e:	2130      	movs	r1, #48	; 0x30
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f015 fa57 	bl	8027554 <_ZdlPvj>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	4618      	mov	r0, r3
 80120aa:	3708      	adds	r7, #8
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}

080120b0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	4618      	mov	r0, r3
 80120bc:	2326      	movs	r3, #38	; 0x26
 80120be:	461a      	mov	r2, r3
 80120c0:	2100      	movs	r1, #0
 80120c2:	f015 fafc 	bl	80276be <memset>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7fd fed5 	bl	800fe78 <_ZN8touchgfx6WidgetC1Ev>
 80120ce:	4a0b      	ldr	r2, [pc, #44]	; (80120fc <_ZN8touchgfx3BoxC1Ev+0x4c>)
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	601a      	str	r2, [r3, #0]
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	22ff      	movs	r2, #255	; 0xff
 80120d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	3328      	adds	r3, #40	; 0x28
 80120e0:	2100      	movs	r1, #0
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7ff ff2d 	bl	8011f42 <_ZN8touchgfx9colortypeC1Em>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2200      	movs	r2, #0
 80120ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	4618      	mov	r0, r3
 80120f4:	3708      	adds	r7, #8
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop
 80120fc:	0802b460 	.word	0x0802b460

08012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8012100:	b480      	push	{r7}
 8012102:	b083      	sub	sp, #12
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	683a      	ldr	r2, [r7, #0]
 801210e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012110:	bf00      	nop
 8012112:	370c      	adds	r7, #12
 8012114:	46bd      	mov	sp, r7
 8012116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211a:	4770      	bx	lr

0801211c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 801211c:	b480      	push	{r7}
 801211e:	b083      	sub	sp, #12
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
 8012124:	460b      	mov	r3, r1
 8012126:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8012128:	4a06      	ldr	r2, [pc, #24]	; (8012144 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	601a      	str	r2, [r3, #0]
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	887a      	ldrh	r2, [r7, #2]
 8012132:	809a      	strh	r2, [r3, #4]
    }
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	4618      	mov	r0, r3
 8012138:	370c      	adds	r7, #12
 801213a:	46bd      	mov	sp, r7
 801213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012140:	4770      	bx	lr
 8012142:	bf00      	nop
 8012144:	08028eec 	.word	0x08028eec

08012148 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 8012148:	b480      	push	{r7}
 801214a:	b083      	sub	sp, #12
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	6039      	str	r1, [r7, #0]
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	889a      	ldrh	r2, [r3, #4]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	809a      	strh	r2, [r3, #4]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	4618      	mov	r0, r3
 801215e:	370c      	adds	r7, #12
 8012160:	46bd      	mov	sp, r7
 8012162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012166:	4770      	bx	lr

08012168 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	3334      	adds	r3, #52	; 0x34
 8012176:	6839      	ldr	r1, [r7, #0]
 8012178:	4618      	mov	r0, r3
 801217a:	f7ff ffe5 	bl	8012148 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f000 f820 	bl	80121c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8012184:	bf00      	nop
 8012186:	3708      	adds	r7, #8
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}

0801218c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 801218c:	b480      	push	{r7}
 801218e:	b083      	sub	sp, #12
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	683a      	ldr	r2, [r7, #0]
 801219a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801219c:	bf00      	nop
 801219e:	370c      	adds	r7, #12
 80121a0:	46bd      	mov	sp, r7
 80121a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a6:	4770      	bx	lr

080121a8 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 80121a8:	b480      	push	{r7}
 80121aa:	b083      	sub	sp, #12
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	683a      	ldr	r2, [r7, #0]
 80121b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
 80121b8:	bf00      	nop
 80121ba:	370c      	adds	r7, #12
 80121bc:	46bd      	mov	sp, r7
 80121be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c2:	4770      	bx	lr

080121c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 80121c4:	b590      	push	{r4, r7, lr}
 80121c6:	b08b      	sub	sp, #44	; 0x2c
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	3334      	adds	r3, #52	; 0x34
 80121d0:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId != TYPED_TEXT_INVALID;
 80121d2:	69fb      	ldr	r3, [r7, #28]
 80121d4:	889b      	ldrh	r3, [r3, #4]
 80121d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121da:	4293      	cmp	r3, r2
 80121dc:	bf14      	ite	ne
 80121de:	2301      	movne	r3, #1
 80121e0:	2300      	moveq	r3, #0
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d06f      	beq.n	80122c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x104>
        {
            const Font* f = typedText.getFont();
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	3334      	adds	r3, #52	; 0x34
 80121ec:	613b      	str	r3, [r7, #16]
 80121ee:	693b      	ldr	r3, [r7, #16]
 80121f0:	60fb      	str	r3, [r7, #12]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80121f2:	4b39      	ldr	r3, [pc, #228]	; (80122d8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d105      	bne.n	8012206 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 80121fa:	4b38      	ldr	r3, [pc, #224]	; (80122dc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 80121fc:	4a38      	ldr	r2, [pc, #224]	; (80122e0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80121fe:	21b1      	movs	r1, #177	; 0xb1
 8012200:	4838      	ldr	r0, [pc, #224]	; (80122e4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8012202:	f015 f9d3 	bl	80275ac <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	889a      	ldrh	r2, [r3, #4]
 801220a:	4b37      	ldr	r3, [pc, #220]	; (80122e8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 801220c:	881b      	ldrh	r3, [r3, #0]
 801220e:	429a      	cmp	r2, r3
 8012210:	d305      	bcc.n	801221e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 8012212:	4b36      	ldr	r3, [pc, #216]	; (80122ec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8012214:	4a32      	ldr	r2, [pc, #200]	; (80122e0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8012216:	21b2      	movs	r1, #178	; 0xb2
 8012218:	4832      	ldr	r0, [pc, #200]	; (80122e4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 801221a:	f015 f9c7 	bl	80275ac <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 801221e:	4b34      	ldr	r3, [pc, #208]	; (80122f0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	4b2d      	ldr	r3, [pc, #180]	; (80122d8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 8012224:	6819      	ldr	r1, [r3, #0]
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	889b      	ldrh	r3, [r3, #4]
 801222a:	005b      	lsls	r3, r3, #1
 801222c:	440b      	add	r3, r1
 801222e:	781b      	ldrb	r3, [r3, #0]
 8012230:	009b      	lsls	r3, r3, #2
 8012232:	4413      	add	r3, r2
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	3334      	adds	r3, #52	; 0x34
 801223c:	61bb      	str	r3, [r7, #24]
 801223e:	69bb      	ldr	r3, [r7, #24]
 8012240:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012242:	4b25      	ldr	r3, [pc, #148]	; (80122d8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d105      	bne.n	8012256 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x92>
 801224a:	4b24      	ldr	r3, [pc, #144]	; (80122dc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 801224c:	4a24      	ldr	r2, [pc, #144]	; (80122e0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 801224e:	21b1      	movs	r1, #177	; 0xb1
 8012250:	4824      	ldr	r0, [pc, #144]	; (80122e4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8012252:	f015 f9ab 	bl	80275ac <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	889a      	ldrh	r2, [r3, #4]
 801225a:	4b23      	ldr	r3, [pc, #140]	; (80122e8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	429a      	cmp	r2, r3
 8012260:	d305      	bcc.n	801226e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xaa>
 8012262:	4b22      	ldr	r3, [pc, #136]	; (80122ec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8012264:	4a1e      	ldr	r2, [pc, #120]	; (80122e0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8012266:	21b2      	movs	r1, #178	; 0xb2
 8012268:	481e      	ldr	r0, [pc, #120]	; (80122e4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 801226a:	f015 f99f 	bl	80275ac <__assert_func>
        return texts->getText(typedTextId);
 801226e:	4b21      	ldr	r3, [pc, #132]	; (80122f4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	69bb      	ldr	r3, [r7, #24]
 8012274:	889b      	ldrh	r3, [r3, #4]
 8012276:	4619      	mov	r1, r3
 8012278:	4610      	mov	r0, r2
 801227a:	f002 fcdd 	bl	8014c38 <_ZNK8touchgfx5Texts7getTextEt>
 801227e:	4603      	mov	r3, r0
 8012280:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8012282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	3328      	adds	r3, #40	; 0x28
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	6a39      	ldr	r1, [r7, #32]
 801228c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801228e:	4798      	blx	r3
 8012290:	4603      	mov	r3, r0
 8012292:	b2dc      	uxtb	r4, r3
 8012294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	3340      	adds	r3, #64	; 0x40
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	6a39      	ldr	r1, [r7, #32]
 801229e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122a0:	4798      	blx	r3
 80122a2:	4603      	mov	r3, r0
 80122a4:	b2db      	uxtb	r3, r3
 80122a6:	fb14 f303 	smulbb	r3, r4, r3
 80122aa:	b2dc      	uxtb	r4, r3
 80122ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	3324      	adds	r3, #36	; 0x24
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	6a39      	ldr	r1, [r7, #32]
 80122b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122b8:	4798      	blx	r3
 80122ba:	4603      	mov	r3, r0
 80122bc:	4423      	add	r3, r4
 80122be:	b2da      	uxtb	r2, r3
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80122c6:	e003      	b.n	80122d0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10c>
            textHeightIncludingSpacing = 0;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2200      	movs	r2, #0
 80122cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 80122d0:	bf00      	nop
 80122d2:	372c      	adds	r7, #44	; 0x2c
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd90      	pop	{r4, r7, pc}
 80122d8:	2000b3a4 	.word	0x2000b3a4
 80122dc:	0802884c 	.word	0x0802884c
 80122e0:	080297b8 	.word	0x080297b8
 80122e4:	08028890 	.word	0x08028890
 80122e8:	2000b3a8 	.word	0x2000b3a8
 80122ec:	080288d4 	.word	0x080288d4
 80122f0:	2000b3ac 	.word	0x2000b3ac
 80122f4:	2000b3b0 	.word	0x2000b3b0

080122f8 <_ZN8touchgfx4ViewI13DinoPresenterED1Ev>:
class View : public Screen
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	4a05      	ldr	r2, [pc, #20]	; (8012318 <_ZN8touchgfx4ViewI13DinoPresenterED1Ev+0x20>)
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	601a      	str	r2, [r3, #0]
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	4618      	mov	r0, r3
 801230a:	f7ff fe39 	bl	8011f80 <_ZN8touchgfx6ScreenD1Ev>
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	4618      	mov	r0, r3
 8012312:	3708      	adds	r7, #8
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}
 8012318:	08029774 	.word	0x08029774

0801231c <_ZN8touchgfx4ViewI13DinoPresenterED0Ev>:
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f7ff ffe7 	bl	80122f8 <_ZN8touchgfx4ViewI13DinoPresenterED1Ev>
 801232a:	2140      	movs	r1, #64	; 0x40
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f015 f911 	bl	8027554 <_ZdlPvj>
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	4618      	mov	r0, r3
 8012336:	3708      	adds	r7, #8
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <_ZN12DinoViewBaseD1Ev>:

class DinoViewBase : public touchgfx::View<DinoPresenter>
{
public:
    DinoViewBase();
    virtual ~DinoViewBase() {}
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	4a1b      	ldr	r2, [pc, #108]	; (80123b4 <_ZN12DinoViewBaseD1Ev+0x78>)
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	601a      	str	r2, [r3, #0]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012350:	4618      	mov	r0, r3
 8012352:	f000 fa5d 	bl	8012810 <_ZN8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801235c:	4618      	mov	r0, r3
 801235e:	f000 fa9b 	bl	8012898 <_ZN8touchgfx3BoxD1Ev>
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012368:	4618      	mov	r0, r3
 801236a:	f000 fa95 	bl	8012898 <_ZN8touchgfx3BoxD1Ev>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8012374:	4618      	mov	r0, r3
 8012376:	f000 fa8f 	bl	8012898 <_ZN8touchgfx3BoxD1Ev>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	33e8      	adds	r3, #232	; 0xe8
 801237e:	4618      	mov	r0, r3
 8012380:	f000 fa8a 	bl	8012898 <_ZN8touchgfx3BoxD1Ev>
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	33b8      	adds	r3, #184	; 0xb8
 8012388:	4618      	mov	r0, r3
 801238a:	f000 fa85 	bl	8012898 <_ZN8touchgfx3BoxD1Ev>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	3370      	adds	r3, #112	; 0x70
 8012392:	4618      	mov	r0, r3
 8012394:	f000 fac4 	bl	8012920 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	3340      	adds	r3, #64	; 0x40
 801239c:	4618      	mov	r0, r3
 801239e:	f000 fa7b 	bl	8012898 <_ZN8touchgfx3BoxD1Ev>
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7ff ffa7 	bl	80122f8 <_ZN8touchgfx4ViewI13DinoPresenterED1Ev>
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	4618      	mov	r0, r3
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	08029728 	.word	0x08029728

080123b8 <_ZN12DinoViewBaseD0Ev>:
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f7ff ffbb 	bl	801233c <_ZN12DinoViewBaseD1Ev>
 80123c6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f015 f8c2 	bl	8027554 <_ZdlPvj>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	4618      	mov	r0, r3
 80123d4:	3708      	adds	r7, #8
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}

080123da <_ZN12DinoViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80123da:	b580      	push	{r7, lr}
 80123dc:	b082      	sub	sp, #8
 80123de:	af00      	add	r7, sp, #0
 80123e0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80123e2:	f008 ff63 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 80123e6:	4603      	mov	r3, r0
    }
 80123e8:	4618      	mov	r0, r3
 80123ea:	3708      	adds	r7, #8
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}

080123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 80123f0:	b590      	push	{r4, r7, lr}
 80123f2:	b083      	sub	sp, #12
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	4603      	mov	r3, r0
 80123f8:	71fb      	strb	r3, [r7, #7]
 80123fa:	460b      	mov	r3, r1
 80123fc:	71bb      	strb	r3, [r7, #6]
 80123fe:	4613      	mov	r3, r2
 8012400:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8012402:	f7fd fbf9 	bl	800fbf8 <_ZN8touchgfx3HAL11getInstanceEv>
 8012406:	4603      	mov	r3, r0
 8012408:	2b00      	cmp	r3, #0
 801240a:	d105      	bne.n	8012418 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 801240c:	4b0a      	ldr	r3, [pc, #40]	; (8012438 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 801240e:	4a0b      	ldr	r2, [pc, #44]	; (801243c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8012410:	2135      	movs	r1, #53	; 0x35
 8012412:	480b      	ldr	r0, [pc, #44]	; (8012440 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8012414:	f015 f8ca 	bl	80275ac <__assert_func>
 8012418:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 801241a:	f7fd fbf9 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 801241e:	6803      	ldr	r3, [r0, #0]
 8012420:	3328      	adds	r3, #40	; 0x28
 8012422:	681c      	ldr	r4, [r3, #0]
 8012424:	797b      	ldrb	r3, [r7, #5]
 8012426:	79ba      	ldrb	r2, [r7, #6]
 8012428:	79f9      	ldrb	r1, [r7, #7]
 801242a:	47a0      	blx	r4
 801242c:	4603      	mov	r3, r0
    }
 801242e:	4618      	mov	r0, r3
 8012430:	370c      	adds	r7, #12
 8012432:	46bd      	mov	sp, r7
 8012434:	bd90      	pop	{r4, r7, pc}
 8012436:	bf00      	nop
 8012438:	08028928 	.word	0x08028928
 801243c:	080297e8 	.word	0x080297e8
 8012440:	0802896c 	.word	0x0802896c

08012444 <_ZN12DinoViewBaseC1Ev>:
#include <gui_generated/dino_screen/DinoViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

DinoViewBase::DinoViewBase() :
 8012444:	b590      	push	{r4, r7, lr}
 8012446:	b08b      	sub	sp, #44	; 0x2c
 8012448:	af02      	add	r7, sp, #8
 801244a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &DinoViewBase::buttonCallbackHandler)
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	4618      	mov	r0, r3
 8012450:	f000 f978 	bl	8012744 <_ZN8touchgfx4ViewI13DinoPresenterEC1Ev>
 8012454:	4aa9      	ldr	r2, [pc, #676]	; (80126fc <_ZN12DinoViewBaseC1Ev+0x2b8>)
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	601a      	str	r2, [r3, #0]
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	3340      	adds	r3, #64	; 0x40
 801245e:	4618      	mov	r0, r3
 8012460:	f7ff fe26 	bl	80120b0 <_ZN8touchgfx3BoxC1Ev>
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	3370      	adds	r3, #112	; 0x70
 8012468:	4618      	mov	r0, r3
 801246a:	f007 fe6b 	bl	801a144 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	33b8      	adds	r3, #184	; 0xb8
 8012472:	4618      	mov	r0, r3
 8012474:	f7ff fe1c 	bl	80120b0 <_ZN8touchgfx3BoxC1Ev>
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	33e8      	adds	r3, #232	; 0xe8
 801247c:	4618      	mov	r0, r3
 801247e:	f7ff fe17 	bl	80120b0 <_ZN8touchgfx3BoxC1Ev>
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8012488:	4618      	mov	r0, r3
 801248a:	f7ff fe11 	bl	80120b0 <_ZN8touchgfx3BoxC1Ev>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012494:	4618      	mov	r0, r3
 8012496:	f7ff fe0b 	bl	80120b0 <_ZN8touchgfx3BoxC1Ev>
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7ff fe05 	bl	80120b0 <_ZN8touchgfx3BoxC1Ev>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 80124ac:	4b94      	ldr	r3, [pc, #592]	; (8012700 <_ZN12DinoViewBaseC1Ev+0x2bc>)
 80124ae:	60bb      	str	r3, [r7, #8]
 80124b0:	2300      	movs	r3, #0
 80124b2:	60fb      	str	r3, [r7, #12]
 80124b4:	f107 0308 	add.w	r3, r7, #8
 80124b8:	cb0c      	ldmia	r3, {r2, r3}
 80124ba:	6879      	ldr	r1, [r7, #4]
 80124bc:	f000 f968 	bl	8012790 <_ZN8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    bg.setPosition(0, 0, 480, 272);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80124c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80124ca:	9300      	str	r3, [sp, #0]
 80124cc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80124d0:	2200      	movs	r2, #0
 80124d2:	2100      	movs	r1, #0
 80124d4:	f7fd fa52 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    bg.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80124de:	22ff      	movs	r2, #255	; 0xff
 80124e0:	21ff      	movs	r1, #255	; 0xff
 80124e2:	20ff      	movs	r0, #255	; 0xff
 80124e4:	f7ff ff84 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80124e8:	4603      	mov	r3, r0
 80124ea:	4619      	mov	r1, r3
 80124ec:	4620      	mov	r0, r4
 80124ee:	f7ff fe07 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(0, 0);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	3370      	adds	r3, #112	; 0x70
 80124f6:	2200      	movs	r2, #0
 80124f8:	2100      	movs	r1, #0
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fd faa3 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012506:	f107 0310 	add.w	r3, r7, #16
 801250a:	2102      	movs	r1, #2
 801250c:	4618      	mov	r0, r3
 801250e:	f7ff fd27 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012512:	f107 0314 	add.w	r3, r7, #20
 8012516:	2103      	movs	r1, #3
 8012518:	4618      	mov	r0, r3
 801251a:	f7ff fd21 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 801251e:	f107 0214 	add.w	r2, r7, #20
 8012522:	f107 0310 	add.w	r3, r7, #16
 8012526:	4619      	mov	r1, r3
 8012528:	4620      	mov	r0, r4
 801252a:	f007 fac7 	bl	8019abc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID21));
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012534:	f107 0318 	add.w	r3, r7, #24
 8012538:	210b      	movs	r1, #11
 801253a:	4618      	mov	r0, r3
 801253c:	f7ff fdee 	bl	801211c <_ZN8touchgfx9TypedTextC1Et>
 8012540:	f107 0318 	add.w	r3, r7, #24
 8012544:	4619      	mov	r1, r3
 8012546:	4620      	mov	r0, r4
 8012548:	f7ff fe0e 	bl	8012168 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 801254c:	f107 0318 	add.w	r3, r7, #24
 8012550:	4618      	mov	r0, r3
 8012552:	f7fc feb7 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801255c:	22ff      	movs	r2, #255	; 0xff
 801255e:	21ff      	movs	r1, #255	; 0xff
 8012560:	20ff      	movs	r0, #255	; 0xff
 8012562:	f7ff ff45 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012566:	4603      	mov	r3, r0
 8012568:	4619      	mov	r1, r3
 801256a:	4620      	mov	r0, r4
 801256c:	f7ff fe0e 	bl	801218c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012576:	22ff      	movs	r2, #255	; 0xff
 8012578:	21ff      	movs	r1, #255	; 0xff
 801257a:	20ff      	movs	r0, #255	; 0xff
 801257c:	f7ff ff38 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012580:	4603      	mov	r3, r0
 8012582:	4619      	mov	r1, r3
 8012584:	4620      	mov	r0, r4
 8012586:	f7ff fe0f 	bl	80121a8 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012596:	4619      	mov	r1, r3
 8012598:	4610      	mov	r0, r2
 801259a:	f7ff fd58 	bl	801204e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    land.setPosition(0, 173, 480, 99);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 80125a4:	2363      	movs	r3, #99	; 0x63
 80125a6:	9300      	str	r3, [sp, #0]
 80125a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80125ac:	22ad      	movs	r2, #173	; 0xad
 80125ae:	2100      	movs	r1, #0
 80125b0:	f7fd f9e4 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    land.setColor(touchgfx::Color::getColorFrom24BitRGB(217, 165, 37));
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80125ba:	2225      	movs	r2, #37	; 0x25
 80125bc:	21a5      	movs	r1, #165	; 0xa5
 80125be:	20d9      	movs	r0, #217	; 0xd9
 80125c0:	f7ff ff16 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80125c4:	4603      	mov	r3, r0
 80125c6:	4619      	mov	r1, r3
 80125c8:	4620      	mov	r0, r4
 80125ca:	f7ff fd99 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    character.setPosition(20, 123, 20, 50);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 80125d4:	2332      	movs	r3, #50	; 0x32
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	2314      	movs	r3, #20
 80125da:	227b      	movs	r2, #123	; 0x7b
 80125dc:	2114      	movs	r1, #20
 80125de:	f7fd f9cd 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    character.setColor(touchgfx::Color::getColorFrom24BitRGB(17, 86, 255));
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 80125e8:	22ff      	movs	r2, #255	; 0xff
 80125ea:	2156      	movs	r1, #86	; 0x56
 80125ec:	2011      	movs	r0, #17
 80125ee:	f7ff feff 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80125f2:	4603      	mov	r3, r0
 80125f4:	4619      	mov	r1, r3
 80125f6:	4620      	mov	r0, r4
 80125f8:	f7ff fd82 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    obstacle.setPosition(183, 107, 46, 66);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f503 708c 	add.w	r0, r3, #280	; 0x118
 8012602:	2342      	movs	r3, #66	; 0x42
 8012604:	9300      	str	r3, [sp, #0]
 8012606:	232e      	movs	r3, #46	; 0x2e
 8012608:	226b      	movs	r2, #107	; 0x6b
 801260a:	21b7      	movs	r1, #183	; 0xb7
 801260c:	f7fd f9b6 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    obstacle.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 53, 53));
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f503 748c 	add.w	r4, r3, #280	; 0x118
 8012616:	2235      	movs	r2, #53	; 0x35
 8012618:	2135      	movs	r1, #53	; 0x35
 801261a:	20ff      	movs	r0, #255	; 0xff
 801261c:	f7ff fee8 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012620:	4603      	mov	r3, r0
 8012622:	4619      	mov	r1, r3
 8012624:	4620      	mov	r0, r4
 8012626:	f7ff fd6b 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    obstacle_1.setPosition(306, 107, 46, 66);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 8012630:	2342      	movs	r3, #66	; 0x42
 8012632:	9300      	str	r3, [sp, #0]
 8012634:	232e      	movs	r3, #46	; 0x2e
 8012636:	226b      	movs	r2, #107	; 0x6b
 8012638:	f44f 7199 	mov.w	r1, #306	; 0x132
 801263c:	f7fd f99e 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    obstacle_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 53, 53));
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 8012646:	2235      	movs	r2, #53	; 0x35
 8012648:	2135      	movs	r1, #53	; 0x35
 801264a:	20ff      	movs	r0, #255	; 0xff
 801264c:	f7ff fed0 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012650:	4603      	mov	r3, r0
 8012652:	4619      	mov	r1, r3
 8012654:	4620      	mov	r0, r4
 8012656:	f7ff fd53 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    obstacle_2.setPosition(411, 107, 46, 66);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8012660:	2342      	movs	r3, #66	; 0x42
 8012662:	9300      	str	r3, [sp, #0]
 8012664:	232e      	movs	r3, #46	; 0x2e
 8012666:	226b      	movs	r2, #107	; 0x6b
 8012668:	f240 119b 	movw	r1, #411	; 0x19b
 801266c:	f7fd f986 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    obstacle_2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 53, 53));
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8012676:	2235      	movs	r2, #53	; 0x35
 8012678:	2135      	movs	r1, #53	; 0x35
 801267a:	20ff      	movs	r0, #255	; 0xff
 801267c:	f7ff feb8 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012680:	4603      	mov	r3, r0
 8012682:	4619      	mov	r1, r3
 8012684:	4620      	mov	r0, r4
 8012686:	f7ff fd3b 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    add(bg);
 801268a:	687a      	ldr	r2, [r7, #4]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	3340      	adds	r3, #64	; 0x40
 8012690:	4619      	mov	r1, r3
 8012692:	4610      	mov	r0, r2
 8012694:	f7ff fccc 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8012698:	687a      	ldr	r2, [r7, #4]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	3370      	adds	r3, #112	; 0x70
 801269e:	4619      	mov	r1, r3
 80126a0:	4610      	mov	r0, r2
 80126a2:	f7ff fcc5 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(land);
 80126a6:	687a      	ldr	r2, [r7, #4]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	33b8      	adds	r3, #184	; 0xb8
 80126ac:	4619      	mov	r1, r3
 80126ae:	4610      	mov	r0, r2
 80126b0:	f7ff fcbe 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(character);
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	33e8      	adds	r3, #232	; 0xe8
 80126ba:	4619      	mov	r1, r3
 80126bc:	4610      	mov	r0, r2
 80126be:	f7ff fcb7 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(obstacle);
 80126c2:	687a      	ldr	r2, [r7, #4]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80126ca:	4619      	mov	r1, r3
 80126cc:	4610      	mov	r0, r2
 80126ce:	f7ff fcaf 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(obstacle_1);
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80126da:	4619      	mov	r1, r3
 80126dc:	4610      	mov	r0, r2
 80126de:	f7ff fca7 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(obstacle_2);
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80126ea:	4619      	mov	r1, r3
 80126ec:	4610      	mov	r0, r2
 80126ee:	f7ff fc9f 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	4618      	mov	r0, r3
 80126f6:	3724      	adds	r7, #36	; 0x24
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd90      	pop	{r4, r7, pc}
 80126fc:	08029728 	.word	0x08029728
 8012700:	08012719 	.word	0x08012719

08012704 <_ZN12DinoViewBase11setupScreenEv>:

void DinoViewBase::setupScreen()
{
 8012704:	b480      	push	{r7}
 8012706:	b083      	sub	sp, #12
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]

}
 801270c:	bf00      	nop
 801270e:	370c      	adds	r7, #12
 8012710:	46bd      	mov	sp, r7
 8012712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012716:	4770      	bx	lr

08012718 <_ZN12DinoViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void DinoViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	3370      	adds	r3, #112	; 0x70
 8012726:	683a      	ldr	r2, [r7, #0]
 8012728:	429a      	cmp	r2, r3
 801272a:	d106      	bne.n	801273a <_ZN12DinoViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f7ff fe54 	bl	80123da <_ZN12DinoViewBase11applicationEv>
 8012732:	4603      	mov	r3, r0
 8012734:	4618      	mov	r0, r3
 8012736:	f7fd fc2f 	bl	800ff98 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
}
 801273a:	bf00      	nop
 801273c:	3708      	adds	r7, #8
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}
	...

08012744 <_ZN8touchgfx4ViewI13DinoPresenterEC1Ev>:
    View()
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	4618      	mov	r0, r3
 8012750:	f009 fd62 	bl	801c218 <_ZN8touchgfx6ScreenC1Ev>
 8012754:	4a05      	ldr	r2, [pc, #20]	; (801276c <_ZN8touchgfx4ViewI13DinoPresenterEC1Ev+0x28>)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	601a      	str	r2, [r3, #0]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2200      	movs	r2, #0
 801275e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	4618      	mov	r0, r3
 8012764:	3708      	adds	r7, #8
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}
 801276a:	bf00      	nop
 801276c:	08029774 	.word	0x08029774

08012770 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8012770:	b480      	push	{r7}
 8012772:	b083      	sub	sp, #12
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	4a04      	ldr	r2, [pc, #16]	; (801278c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	601a      	str	r2, [r3, #0]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	4618      	mov	r0, r3
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr
 801278c:	080297a8 	.word	0x080297a8

08012790 <_ZN8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8012790:	b580      	push	{r7, lr}
 8012792:	b084      	sub	sp, #16
 8012794:	af00      	add	r7, sp, #0
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	60b9      	str	r1, [r7, #8]
 801279a:	4639      	mov	r1, r7
 801279c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7ff ffe4 	bl	8012770 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80127a8:	4a08      	ldr	r2, [pc, #32]	; (80127cc <_ZN8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	68ba      	ldr	r2, [r7, #8]
 80127b2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	3308      	adds	r3, #8
 80127b8:	463a      	mov	r2, r7
 80127ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127be:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	4618      	mov	r0, r3
 80127c6:	3710      	adds	r7, #16
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	0802975c 	.word	0x0802975c

080127d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 80127d0:	b480      	push	{r7}
 80127d2:	b083      	sub	sp, #12
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
    }
 80127d8:	4a04      	ldr	r2, [pc, #16]	; (80127ec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	601a      	str	r2, [r3, #0]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	4618      	mov	r0, r3
 80127e2:	370c      	adds	r7, #12
 80127e4:	46bd      	mov	sp, r7
 80127e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ea:	4770      	bx	lr
 80127ec:	080297a8 	.word	0x080297a8

080127f0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b082      	sub	sp, #8
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
    }
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f7ff ffe9 	bl	80127d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80127fe:	2104      	movs	r1, #4
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f014 fea7 	bl	8027554 <_ZdlPvj>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	4618      	mov	r0, r3
 801280a:	3708      	adds	r7, #8
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <_ZN8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	4a05      	ldr	r2, [pc, #20]	; (8012830 <_ZN8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	601a      	str	r2, [r3, #0]
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4618      	mov	r0, r3
 8012822:	f7ff ffd5 	bl	80127d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4618      	mov	r0, r3
 801282a:	3708      	adds	r7, #8
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	0802975c 	.word	0x0802975c

08012834 <_ZN8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f7ff ffe7 	bl	8012810 <_ZN8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012842:	2110      	movs	r1, #16
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f014 fe85 	bl	8027554 <_ZdlPvj>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4618      	mov	r0, r3
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	4a05      	ldr	r2, [pc, #20]	; (8012874 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	601a      	str	r2, [r3, #0]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4618      	mov	r0, r3
 8012866:	f7fd f869 	bl	800f93c <_ZN8touchgfx8DrawableD1Ev>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4618      	mov	r0, r3
 801286e:	3708      	adds	r7, #8
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}
 8012874:	0802a74c 	.word	0x0802a74c

08012878 <_ZN8touchgfx9ContainerD0Ev>:
 8012878:	b580      	push	{r7, lr}
 801287a:	b082      	sub	sp, #8
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f7ff ffe7 	bl	8012854 <_ZN8touchgfx9ContainerD1Ev>
 8012886:	212c      	movs	r1, #44	; 0x2c
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f014 fe63 	bl	8027554 <_ZdlPvj>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	4618      	mov	r0, r3
 8012892:	3708      	adds	r7, #8
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	4a05      	ldr	r2, [pc, #20]	; (80128b8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	601a      	str	r2, [r3, #0]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7fd faf7 	bl	800fe9c <_ZN8touchgfx6WidgetD1Ev>
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4618      	mov	r0, r3
 80128b2:	3708      	adds	r7, #8
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}
 80128b8:	0802b460 	.word	0x0802b460

080128bc <_ZN8touchgfx3BoxD0Ev>:
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f7ff ffe7 	bl	8012898 <_ZN8touchgfx3BoxD1Ev>
 80128ca:	2130      	movs	r1, #48	; 0x30
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f014 fe41 	bl	8027554 <_ZdlPvj>
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	4618      	mov	r0, r3
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 80128dc:	b580      	push	{r7, lr}
 80128de:	b082      	sub	sp, #8
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	4a05      	ldr	r2, [pc, #20]	; (80128fc <_ZN8touchgfx6ButtonD1Ev+0x20>)
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	601a      	str	r2, [r3, #0]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7ff fbbd 	bl	801206c <_ZN8touchgfx14AbstractButtonD1Ev>
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	4618      	mov	r0, r3
 80128f6:	3708      	adds	r7, #8
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	0802b52c 	.word	0x0802b52c

08012900 <_ZN8touchgfx6ButtonD0Ev>:
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f7ff ffe7 	bl	80128dc <_ZN8touchgfx6ButtonD1Ev>
 801290e:	2134      	movs	r1, #52	; 0x34
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f014 fe1f 	bl	8027554 <_ZdlPvj>
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	4618      	mov	r0, r3
 801291a:	3708      	adds	r7, #8
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	4a08      	ldr	r2, [pc, #32]	; (801294c <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	601a      	str	r2, [r3, #0]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	3334      	adds	r3, #52	; 0x34
 8012932:	4618      	mov	r0, r3
 8012934:	f7fc fcc6 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4618      	mov	r0, r3
 801293c:	f7ff ffce 	bl	80128dc <_ZN8touchgfx6ButtonD1Ev>
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	4618      	mov	r0, r3
 8012944:	3708      	adds	r7, #8
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}
 801294a:	bf00      	nop
 801294c:	0802b724 	.word	0x0802b724

08012950 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f7ff ffe1 	bl	8012920 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801295e:	2148      	movs	r1, #72	; 0x48
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f014 fdf7 	bl	8027554 <_ZdlPvj>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	4618      	mov	r0, r3
 801296a:	3708      	adds	r7, #8
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <_ZN8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	68d2      	ldr	r2, [r2, #12]
 8012982:	1052      	asrs	r2, r2, #1
 8012984:	1898      	adds	r0, r3, r2
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	68db      	ldr	r3, [r3, #12]
 801298a:	f003 0301 	and.w	r3, r3, #1
 801298e:	2b00      	cmp	r3, #0
 8012990:	d102      	bne.n	8012998 <_ZN8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	689b      	ldr	r3, [r3, #8]
 8012996:	e00a      	b.n	80129ae <_ZN8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	687a      	ldr	r2, [r7, #4]
 801299e:	68d2      	ldr	r2, [r2, #12]
 80129a0:	1052      	asrs	r2, r2, #1
 80129a2:	4413      	add	r3, r2
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	687a      	ldr	r2, [r7, #4]
 80129a8:	6892      	ldr	r2, [r2, #8]
 80129aa:	4413      	add	r3, r2
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	6839      	ldr	r1, [r7, #0]
 80129b0:	4798      	blx	r3
    }
 80129b2:	bf00      	nop
 80129b4:	3708      	adds	r7, #8
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}

080129ba <_ZNK8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80129ba:	b480      	push	{r7}
 80129bc:	b083      	sub	sp, #12
 80129be:	af00      	add	r7, sp, #0
 80129c0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d010      	beq.n	80129ec <_ZNK8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	689b      	ldr	r3, [r3, #8]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d107      	bne.n	80129e2 <_ZNK8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	68db      	ldr	r3, [r3, #12]
 80129d6:	f003 0301 	and.w	r3, r3, #1
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d101      	bne.n	80129e2 <_ZNK8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80129de:	2301      	movs	r3, #1
 80129e0:	e000      	b.n	80129e4 <_ZNK8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80129e2:	2300      	movs	r3, #0
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d001      	beq.n	80129ec <_ZNK8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80129e8:	2301      	movs	r3, #1
 80129ea:	e000      	b.n	80129ee <_ZNK8touchgfx8CallbackI12DinoViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80129ec:	2300      	movs	r3, #0
    }
 80129ee:	4618      	mov	r0, r3
 80129f0:	370c      	adds	r7, #12
 80129f2:	46bd      	mov	sp, r7
 80129f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f8:	4770      	bx	lr

080129fa <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 80129fa:	b480      	push	{r7}
 80129fc:	b083      	sub	sp, #12
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	6078      	str	r0, [r7, #4]
 8012a02:	460b      	mov	r3, r1
 8012a04:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	78fa      	ldrb	r2, [r7, #3]
 8012a0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8012a0e:	bf00      	nop
 8012a10:	370c      	adds	r7, #12
 8012a12:	46bd      	mov	sp, r7
 8012a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a18:	4770      	bx	lr
	...

08012a1c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	4618      	mov	r0, r3
 8012a28:	2326      	movs	r3, #38	; 0x26
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	2100      	movs	r1, #0
 8012a2e:	f014 fe46 	bl	80276be <memset>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	4618      	mov	r0, r3
 8012a36:	f7fd fa1f 	bl	800fe78 <_ZN8touchgfx6WidgetC1Ev>
 8012a3a:	4a14      	ldr	r2, [pc, #80]	; (8012a8c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	601a      	str	r2, [r3, #0]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	3328      	adds	r3, #40	; 0x28
 8012a44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7ff fb67 	bl	801211c <_ZN8touchgfx9TypedTextC1Et>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	3330      	adds	r3, #48	; 0x30
 8012a52:	2100      	movs	r1, #0
 8012a54:	4618      	mov	r0, r3
 8012a56:	f7ff fa74 	bl	8011f42 <_ZN8touchgfx9colortypeC1Em>
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	869a      	strh	r2, [r3, #52]	; 0x34
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	22ff      	movs	r2, #255	; 0xff
 8012a64:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2200      	movs	r2, #0
 8012a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	4618      	mov	r0, r3
 8012a84:	3708      	adds	r7, #8
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	0802b3b4 	.word	0x0802b3b4

08012a90 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
 8012a90:	b480      	push	{r7}
 8012a92:	b083      	sub	sp, #12
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	460b      	mov	r3, r1
 8012a9a:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	887a      	ldrh	r2, [r7, #2]
 8012aa0:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 8012aa2:	bf00      	nop
 8012aa4:	370c      	adds	r7, #12
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr

08012aae <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
 8012aae:	b480      	push	{r7}
 8012ab0:	b083      	sub	sp, #12
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	887a      	ldrh	r2, [r7, #2]
 8012abe:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 8012ac0:	bf00      	nop
 8012ac2:	370c      	adds	r7, #12
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr

08012acc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The values set are overwritten on a subsequent call to setBitmaps.
     */
    void setIconXY(int16_t x, int16_t y)
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	460b      	mov	r3, r1
 8012ad6:	807b      	strh	r3, [r7, #2]
 8012ad8:	4613      	mov	r3, r2
 8012ada:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 8012adc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f7ff ffd4 	bl	8012a90 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 8012ae8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012aec:	4619      	mov	r1, r3
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f7ff ffdd 	bl	8012aae <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 8012af4:	bf00      	nop
 8012af6:	3708      	adds	r7, #8
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}

08012afc <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>:
class View : public Screen
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	4a05      	ldr	r2, [pc, #20]	; (8012b1c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev+0x20>)
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	601a      	str	r2, [r3, #0]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f7ff fa37 	bl	8011f80 <_ZN8touchgfx6ScreenD1Ev>
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	4618      	mov	r0, r3
 8012b16:	3708      	adds	r7, #8
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}
 8012b1c:	08029898 	.word	0x08029898

08012b20 <_ZN8touchgfx4ViewI14MusicPresenterED0Ev>:
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f7ff ffe7 	bl	8012afc <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>
 8012b2e:	2140      	movs	r1, #64	; 0x40
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f014 fd0f 	bl	8027554 <_ZdlPvj>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3708      	adds	r7, #8
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <_ZN13MusicViewBaseD1Ev>:

class MusicViewBase : public touchgfx::View<MusicPresenter>
{
public:
    MusicViewBase();
    virtual ~MusicViewBase() {}
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	4a27      	ldr	r2, [pc, #156]	; (8012be8 <_ZN13MusicViewBaseD1Ev+0xa8>)
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	601a      	str	r2, [r3, #0]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8012b54:	4618      	mov	r0, r3
 8012b56:	f000 fc47 	bl	80133e8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8012b60:	4618      	mov	r0, r3
 8012b62:	f000 fc8b 	bl	801347c <_ZN8touchgfx14ButtonWithIconD1Ev>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f7ff fed7 	bl	8012920 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7ff fed1 	bl	8012920 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8012b84:	4618      	mov	r0, r3
 8012b86:	f000 fc79 	bl	801347c <_ZN8touchgfx14ButtonWithIconD1Ev>
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8012b90:	4618      	mov	r0, r3
 8012b92:	f000 fc73 	bl	801347c <_ZN8touchgfx14ButtonWithIconD1Ev>
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f000 fc6d 	bl	801347c <_ZN8touchgfx14ButtonWithIconD1Ev>
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f000 fc67 	bl	801347c <_ZN8touchgfx14ButtonWithIconD1Ev>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	33e8      	adds	r3, #232	; 0xe8
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f000 fc3a 	bl	801342c <_ZN8touchgfx8TextAreaD1Ev>
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	33ac      	adds	r3, #172	; 0xac
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f000 fc5d 	bl	801347c <_ZN8touchgfx14ButtonWithIconD1Ev>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	3370      	adds	r3, #112	; 0x70
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f000 fc30 	bl	801342c <_ZN8touchgfx8TextAreaD1Ev>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	3340      	adds	r3, #64	; 0x40
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7ff fe61 	bl	8012898 <_ZN8touchgfx3BoxD1Ev>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7ff ff8f 	bl	8012afc <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	4618      	mov	r0, r3
 8012be2:	3708      	adds	r7, #8
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}
 8012be8:	0802984c 	.word	0x0802984c

08012bec <_ZN13MusicViewBaseD0Ev>:
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b082      	sub	sp, #8
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
 8012bf4:	6878      	ldr	r0, [r7, #4]
 8012bf6:	f7ff ffa3 	bl	8012b40 <_ZN13MusicViewBaseD1Ev>
 8012bfa:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f014 fca8 	bl	8027554 <_ZdlPvj>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	4618      	mov	r0, r3
 8012c08:	3708      	adds	r7, #8
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}

08012c0e <_ZN13MusicViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8012c0e:	b580      	push	{r7, lr}
 8012c10:	b082      	sub	sp, #8
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8012c16:	f008 fb49 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 8012c1a:	4603      	mov	r3, r0
    }
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	3708      	adds	r7, #8
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}

08012c24 <_ZN13MusicViewBaseC1Ev>:
#include <gui_generated/music_screen/MusicViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MusicViewBase::MusicViewBase() :
 8012c24:	b590      	push	{r4, r7, lr}
 8012c26:	b0b3      	sub	sp, #204	; 0xcc
 8012c28:	af02      	add	r7, sp, #8
 8012c2a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MusicViewBase::buttonCallbackHandler)
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f000 fba4 	bl	801337c <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev>
 8012c34:	4ae0      	ldr	r2, [pc, #896]	; (8012fb8 <_ZN13MusicViewBaseC1Ev+0x394>)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	601a      	str	r2, [r3, #0]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	3340      	adds	r3, #64	; 0x40
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7ff fa36 	bl	80120b0 <_ZN8touchgfx3BoxC1Ev>
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	3370      	adds	r3, #112	; 0x70
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7ff fee7 	bl	8012a1c <_ZN8touchgfx8TextAreaC1Ev>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	33ac      	adds	r3, #172	; 0xac
 8012c52:	4618      	mov	r0, r3
 8012c54:	f007 f982 	bl	8019f5c <_ZN8touchgfx14ButtonWithIconC1Ev>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	33e8      	adds	r3, #232	; 0xe8
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7ff fedd 	bl	8012a1c <_ZN8touchgfx8TextAreaC1Ev>
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f007 f977 	bl	8019f5c <_ZN8touchgfx14ButtonWithIconC1Ev>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8012c74:	4618      	mov	r0, r3
 8012c76:	f007 f971 	bl	8019f5c <_ZN8touchgfx14ButtonWithIconC1Ev>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8012c80:	4618      	mov	r0, r3
 8012c82:	f007 f96b 	bl	8019f5c <_ZN8touchgfx14ButtonWithIconC1Ev>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f007 f965 	bl	8019f5c <_ZN8touchgfx14ButtonWithIconC1Ev>
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f007 fa53 	bl	801a144 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f007 fa4d 	bl	801a144 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f007 f953 	bl	8019f5c <_ZN8touchgfx14ButtonWithIconC1Ev>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 8012cbc:	4bbf      	ldr	r3, [pc, #764]	; (8012fbc <_ZN13MusicViewBaseC1Ev+0x398>)
 8012cbe:	613b      	str	r3, [r7, #16]
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	617b      	str	r3, [r7, #20]
 8012cc4:	f107 0310 	add.w	r3, r7, #16
 8012cc8:	cb0c      	ldmia	r3, {r2, r3}
 8012cca:	6879      	ldr	r1, [r7, #4]
 8012ccc:	f000 fb6c 	bl	80133a8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012cd6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012cda:	9300      	str	r3, [sp, #0]
 8012cdc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	2100      	movs	r1, #0
 8012ce4:	f7fc fe4a 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012cee:	22ff      	movs	r2, #255	; 0xff
 8012cf0:	21ff      	movs	r1, #255	; 0xff
 8012cf2:	20ff      	movs	r0, #255	; 0xff
 8012cf4:	f7ff fb7c 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	f7ff f9ff 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea1.setXY(116, 0);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	3370      	adds	r3, #112	; 0x70
 8012d06:	2200      	movs	r2, #0
 8012d08:	2174      	movs	r1, #116	; 0x74
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7fc fe9b 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012d16:	2200      	movs	r2, #0
 8012d18:	2100      	movs	r1, #0
 8012d1a:	2000      	movs	r0, #0
 8012d1c:	f7ff fb68 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012d20:	4603      	mov	r3, r0
 8012d22:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8012d26:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8012d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012d2c:	68fa      	ldr	r2, [r7, #12]
 8012d2e:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	3370      	adds	r3, #112	; 0x70
 8012d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012d38:	2300      	movs	r3, #0
 8012d3a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8012d3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012d42:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8012d46:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012d4e:	f107 0318 	add.w	r3, r7, #24
 8012d52:	2108      	movs	r1, #8
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7ff f9e1 	bl	801211c <_ZN8touchgfx9TypedTextC1Et>
 8012d5a:	f107 0318 	add.w	r3, r7, #24
 8012d5e:	4619      	mov	r1, r3
 8012d60:	4620      	mov	r0, r4
 8012d62:	f006 fe71 	bl	8019a48 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8012d66:	f107 0318 	add.w	r3, r7, #24
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fc faaa 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>

    Play_Button.setXY(116, 212);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	33ac      	adds	r3, #172	; 0xac
 8012d74:	22d4      	movs	r2, #212	; 0xd4
 8012d76:	2174      	movs	r1, #116	; 0x74
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7fc fe64 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    Play_Button.setVisible(false);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	33ac      	adds	r3, #172	; 0xac
 8012d82:	2100      	movs	r1, #0
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7ff fe38 	bl	80129fa <_ZN8touchgfx8Drawable10setVisibleEb>
    Play_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID));
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8012d90:	f107 0320 	add.w	r3, r7, #32
 8012d94:	2104      	movs	r1, #4
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7ff f8e2 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012da0:	2105      	movs	r1, #5
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7ff f8dc 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012dac:	210b      	movs	r1, #11
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7ff f8d6 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012db8:	210b      	movs	r1, #11
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7ff f8d0 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012dc0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8012dc4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012dc8:	f107 0120 	add.w	r1, r7, #32
 8012dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dd0:	9300      	str	r3, [sp, #0]
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f007 f81d 	bl	8019e14 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Play_Button.setIconXY(19, 14);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	33ac      	adds	r3, #172	; 0xac
 8012dde:	220e      	movs	r2, #14
 8012de0:	2113      	movs	r1, #19
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7ff fe72 	bl	8012acc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Play_Button.setAction(buttonCallback);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8012df4:	4619      	mov	r1, r3
 8012df6:	4610      	mov	r0, r2
 8012df8:	f7ff f929 	bl	801204e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea2.setPosition(0, 105, 480, 31);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 8012e02:	231f      	movs	r3, #31
 8012e04:	9300      	str	r3, [sp, #0]
 8012e06:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012e0a:	2269      	movs	r2, #105	; 0x69
 8012e0c:	2100      	movs	r1, #0
 8012e0e:	f7fc fdb5 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8012e18:	2200      	movs	r2, #0
 8012e1a:	2100      	movs	r1, #0
 8012e1c:	2000      	movs	r0, #0
 8012e1e:	f7ff fae7 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012e22:	4603      	mov	r3, r0
 8012e24:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 8012e28:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8012e2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e2e:	68ba      	ldr	r2, [r7, #8]
 8012e30:	631a      	str	r2, [r3, #48]	; 0x30
    textArea2.setLinespacing(0);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	33e8      	adds	r3, #232	; 0xe8
 8012e36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 8012e40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012e44:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8012e48:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8012e50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012e54:	210f      	movs	r1, #15
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7ff f960 	bl	801211c <_ZN8touchgfx9TypedTextC1Et>
 8012e5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012e60:	4619      	mov	r1, r3
 8012e62:	4620      	mov	r0, r4
 8012e64:	f006 fdf0 	bl	8019a48 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8012e68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7fc fa29 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>

    Pause_Button.setXY(116, 212);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8012e78:	22d4      	movs	r2, #212	; 0xd4
 8012e7a:	2174      	movs	r1, #116	; 0x74
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fc fde2 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    Pause_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID));
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8012e88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012e8c:	2104      	movs	r1, #4
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f7ff f866 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012e94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012e98:	2105      	movs	r1, #5
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7ff f860 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012ea0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012ea4:	210a      	movs	r1, #10
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7ff f85a 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012eac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012eb0:	210a      	movs	r1, #10
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7ff f854 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012eb8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8012ebc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8012ec0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8012ec4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012ec8:	9300      	str	r3, [sp, #0]
 8012eca:	4603      	mov	r3, r0
 8012ecc:	4620      	mov	r0, r4
 8012ece:	f006 ffa1 	bl	8019e14 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Pause_Button.setIconXY(17, 14);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8012ed8:	220e      	movs	r2, #14
 8012eda:	2111      	movs	r1, #17
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7ff fdf5 	bl	8012acc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Pause_Button.setAction(buttonCallback);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f503 7292 	add.w	r2, r3, #292	; 0x124
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8012eee:	4619      	mov	r1, r3
 8012ef0:	4610      	mov	r0, r2
 8012ef2:	f7ff f8ac 	bl	801204e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Stop_Button.setXY(180, 212);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8012efc:	22d4      	movs	r2, #212	; 0xd4
 8012efe:	21b4      	movs	r1, #180	; 0xb4
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7fc fda0 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    Stop_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID));
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f503 74b0 	add.w	r4, r3, #352	; 0x160
 8012f0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012f10:	2104      	movs	r1, #4
 8012f12:	4618      	mov	r0, r3
 8012f14:	f7ff f824 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012f18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012f1c:	2105      	movs	r1, #5
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7ff f81e 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012f24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012f28:	2106      	movs	r1, #6
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7ff f818 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012f30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012f34:	2106      	movs	r1, #6
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7ff f812 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012f3c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8012f40:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012f44:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012f48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012f4c:	9300      	str	r3, [sp, #0]
 8012f4e:	4603      	mov	r3, r0
 8012f50:	4620      	mov	r0, r4
 8012f52:	f006 ff5f 	bl	8019e14 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Stop_Button.setIconXY(15, 15);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8012f5c:	220f      	movs	r2, #15
 8012f5e:	210f      	movs	r1, #15
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7ff fdb3 	bl	8012acc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>

    Prev_Button.setXY(244, 212);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8012f6c:	22d4      	movs	r2, #212	; 0xd4
 8012f6e:	21f4      	movs	r1, #244	; 0xf4
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7fc fd68 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    Prev_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_BACK_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_BACK_32_ID));
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 8012f7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012f80:	2104      	movs	r1, #4
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7fe ffec 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012f88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012f8c:	2105      	movs	r1, #5
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fe ffe6 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012f94:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012f98:	2108      	movs	r1, #8
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fe ffe0 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012fa0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012fa4:	2108      	movs	r1, #8
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7fe ffda 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8012fac:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8012fb0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8012fb4:	e004      	b.n	8012fc0 <_ZN13MusicViewBaseC1Ev+0x39c>
 8012fb6:	bf00      	nop
 8012fb8:	0802984c 	.word	0x0802984c
 8012fbc:	080132d5 	.word	0x080132d5
 8012fc0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012fc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012fc8:	9300      	str	r3, [sp, #0]
 8012fca:	4603      	mov	r3, r0
 8012fcc:	4620      	mov	r0, r4
 8012fce:	f006 ff21 	bl	8019e14 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Prev_Button.setIconXY(14, 15);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8012fd8:	220f      	movs	r2, #15
 8012fda:	210e      	movs	r1, #14
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7ff fd75 	bl	8012acc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>

    Next_Button.setXY(308, 212);
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8012fe8:	22d4      	movs	r2, #212	; 0xd4
 8012fea:	f44f 719a 	mov.w	r1, #308	; 0x134
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7fc fd29 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    Next_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_NEXT_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_NEXT_32_ID));
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 8012ffa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012ffe:	2104      	movs	r1, #4
 8013000:	4618      	mov	r0, r3
 8013002:	f7fe ffad 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8013006:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801300a:	2105      	movs	r1, #5
 801300c:	4618      	mov	r0, r3
 801300e:	f7fe ffa7 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8013012:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013016:	2109      	movs	r1, #9
 8013018:	4618      	mov	r0, r3
 801301a:	f7fe ffa1 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 801301e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013022:	2109      	movs	r1, #9
 8013024:	4618      	mov	r0, r3
 8013026:	f7fe ff9b 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 801302a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 801302e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8013032:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8013036:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801303a:	9300      	str	r3, [sp, #0]
 801303c:	4603      	mov	r3, r0
 801303e:	4620      	mov	r0, r4
 8013040:	f006 fee8 	bl	8019e14 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Next_Button.setIconXY(14, 15);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801304a:	220f      	movs	r2, #15
 801304c:	210e      	movs	r1, #14
 801304e:	4618      	mov	r0, r3
 8013050:	f7ff fd3c 	bl	8012acc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>

    VolUp_Button.setXY(420, 212);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801305a:	22d4      	movs	r2, #212	; 0xd4
 801305c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8013060:	4618      	mov	r0, r3
 8013062:	f7fc fcf0 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    VolUp_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f503 7405 	add.w	r4, r3, #532	; 0x214
 801306c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013070:	2104      	movs	r1, #4
 8013072:	4618      	mov	r0, r3
 8013074:	f7fe ff74 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8013078:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801307c:	2105      	movs	r1, #5
 801307e:	4618      	mov	r0, r3
 8013080:	f7fe ff6e 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8013084:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8013088:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801308c:	4619      	mov	r1, r3
 801308e:	4620      	mov	r0, r4
 8013090:	f006 fd14 	bl	8019abc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    VolUp_Button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID31));
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f503 7405 	add.w	r4, r3, #532	; 0x214
 801309a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801309e:	2110      	movs	r1, #16
 80130a0:	4618      	mov	r0, r3
 80130a2:	f7ff f83b 	bl	801211c <_ZN8touchgfx9TypedTextC1Et>
 80130a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80130aa:	4619      	mov	r1, r3
 80130ac:	4620      	mov	r0, r4
 80130ae:	f7ff f85b 	bl	8012168 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80130b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7fc f904 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>
    VolUp_Button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f503 7405 	add.w	r4, r3, #532	; 0x214
 80130c2:	22ff      	movs	r2, #255	; 0xff
 80130c4:	21ff      	movs	r1, #255	; 0xff
 80130c6:	20ff      	movs	r0, #255	; 0xff
 80130c8:	f7ff f992 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80130cc:	4603      	mov	r3, r0
 80130ce:	4619      	mov	r1, r3
 80130d0:	4620      	mov	r0, r4
 80130d2:	f7ff f85b 	bl	801218c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    VolUp_Button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f503 7405 	add.w	r4, r3, #532	; 0x214
 80130dc:	22ff      	movs	r2, #255	; 0xff
 80130de:	21ff      	movs	r1, #255	; 0xff
 80130e0:	20ff      	movs	r0, #255	; 0xff
 80130e2:	f7ff f985 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80130e6:	4603      	mov	r3, r0
 80130e8:	4619      	mov	r1, r3
 80130ea:	4620      	mov	r0, r4
 80130ec:	f7ff f85c 	bl	80121a8 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>

    VolDown_Button.setXY(0, 212);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80130f6:	22d4      	movs	r2, #212	; 0xd4
 80130f8:	2100      	movs	r1, #0
 80130fa:	4618      	mov	r0, r3
 80130fc:	f7fc fca3 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    VolDown_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f503 7417 	add.w	r4, r3, #604	; 0x25c
 8013106:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801310a:	2104      	movs	r1, #4
 801310c:	4618      	mov	r0, r3
 801310e:	f7fe ff27 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8013112:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013116:	2105      	movs	r1, #5
 8013118:	4618      	mov	r0, r3
 801311a:	f7fe ff21 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 801311e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8013122:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013126:	4619      	mov	r1, r3
 8013128:	4620      	mov	r0, r4
 801312a:	f006 fcc7 	bl	8019abc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    VolDown_Button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID32));
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f503 7417 	add.w	r4, r3, #604	; 0x25c
 8013134:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013138:	2111      	movs	r1, #17
 801313a:	4618      	mov	r0, r3
 801313c:	f7fe ffee 	bl	801211c <_ZN8touchgfx9TypedTextC1Et>
 8013140:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013144:	4619      	mov	r1, r3
 8013146:	4620      	mov	r0, r4
 8013148:	f7ff f80e 	bl	8012168 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 801314c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013150:	4618      	mov	r0, r3
 8013152:	f7fc f8b7 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>
    VolDown_Button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	f503 7417 	add.w	r4, r3, #604	; 0x25c
 801315c:	22ff      	movs	r2, #255	; 0xff
 801315e:	21ff      	movs	r1, #255	; 0xff
 8013160:	20ff      	movs	r0, #255	; 0xff
 8013162:	f7ff f945 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013166:	4603      	mov	r3, r0
 8013168:	4619      	mov	r1, r3
 801316a:	4620      	mov	r0, r4
 801316c:	f7ff f80e 	bl	801218c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    VolDown_Button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f503 7417 	add.w	r4, r3, #604	; 0x25c
 8013176:	22ff      	movs	r2, #255	; 0xff
 8013178:	21ff      	movs	r1, #255	; 0xff
 801317a:	20ff      	movs	r0, #255	; 0xff
 801317c:	f7ff f938 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013180:	4603      	mov	r3, r0
 8013182:	4619      	mov	r1, r3
 8013184:	4620      	mov	r0, r4
 8013186:	f7ff f80f 	bl	80121a8 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>

    Back_Button.setXY(0, 0);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8013190:	2200      	movs	r2, #0
 8013192:	2100      	movs	r1, #0
 8013194:	4618      	mov	r0, r3
 8013196:	f7fc fc56 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f503 7429 	add.w	r4, r3, #676	; 0x2a4
 80131a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80131a4:	2102      	movs	r1, #2
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7fe feda 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 80131ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80131b0:	2103      	movs	r1, #3
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7fe fed4 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 80131b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80131bc:	2107      	movs	r1, #7
 80131be:	4618      	mov	r0, r3
 80131c0:	f7fe fece 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 80131c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80131c8:	2107      	movs	r1, #7
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7fe fec8 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 80131d0:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80131d4:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80131d8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80131dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80131e0:	9300      	str	r3, [sp, #0]
 80131e2:	4603      	mov	r3, r0
 80131e4:	4620      	mov	r0, r4
 80131e6:	f006 fe15 	bl	8019e14 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80131f0:	220f      	movs	r2, #15
 80131f2:	2113      	movs	r1, #19
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7ff fc69 	bl	8012acc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f503 7229 	add.w	r2, r3, #676	; 0x2a4
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8013206:	4619      	mov	r1, r3
 8013208:	4610      	mov	r0, r2
 801320a:	f7fe ff20 	bl	801204e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	3340      	adds	r3, #64	; 0x40
 8013214:	4619      	mov	r1, r3
 8013216:	4610      	mov	r0, r2
 8013218:	f7fe ff0a 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 801321c:	687a      	ldr	r2, [r7, #4]
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	3370      	adds	r3, #112	; 0x70
 8013222:	4619      	mov	r1, r3
 8013224:	4610      	mov	r0, r2
 8013226:	f7fe ff03 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Play_Button);
 801322a:	687a      	ldr	r2, [r7, #4]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	33ac      	adds	r3, #172	; 0xac
 8013230:	4619      	mov	r1, r3
 8013232:	4610      	mov	r0, r2
 8013234:	f7fe fefc 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	33e8      	adds	r3, #232	; 0xe8
 801323e:	4619      	mov	r1, r3
 8013240:	4610      	mov	r0, r2
 8013242:	f7fe fef5 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pause_Button);
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 801324e:	4619      	mov	r1, r3
 8013250:	4610      	mov	r0, r2
 8013252:	f7fe feed 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Stop_Button);
 8013256:	687a      	ldr	r2, [r7, #4]
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801325e:	4619      	mov	r1, r3
 8013260:	4610      	mov	r0, r2
 8013262:	f7fe fee5 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Prev_Button);
 8013266:	687a      	ldr	r2, [r7, #4]
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 801326e:	4619      	mov	r1, r3
 8013270:	4610      	mov	r0, r2
 8013272:	f7fe fedd 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Next_Button);
 8013276:	687a      	ldr	r2, [r7, #4]
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801327e:	4619      	mov	r1, r3
 8013280:	4610      	mov	r0, r2
 8013282:	f7fe fed5 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VolUp_Button);
 8013286:	687a      	ldr	r2, [r7, #4]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801328e:	4619      	mov	r1, r3
 8013290:	4610      	mov	r0, r2
 8013292:	f7fe fecd 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VolDown_Button);
 8013296:	687a      	ldr	r2, [r7, #4]
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 801329e:	4619      	mov	r1, r3
 80132a0:	4610      	mov	r0, r2
 80132a2:	f7fe fec5 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80132ae:	4619      	mov	r1, r3
 80132b0:	4610      	mov	r0, r2
 80132b2:	f7fe febd 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	4618      	mov	r0, r3
 80132ba:	37c4      	adds	r7, #196	; 0xc4
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd90      	pop	{r4, r7, pc}

080132c0 <_ZN13MusicViewBase11setupScreenEv>:

void MusicViewBase::setupScreen()
{
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]

}
 80132c8:	bf00      	nop
 80132ca:	370c      	adds	r7, #12
 80132cc:	46bd      	mov	sp, r7
 80132ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d2:	4770      	bx	lr

080132d4 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MusicViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	6039      	str	r1, [r7, #0]
    if (&src == &Play_Button)
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	33ac      	adds	r3, #172	; 0xac
 80132e2:	683a      	ldr	r2, [r7, #0]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d118      	bne.n	801331a <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x46>
    {
        //Hide_Play
        //When Play_Button clicked hide Play_Button
        //Hide Play_Button
        Play_Button.setVisible(false);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	33ac      	adds	r3, #172	; 0xac
 80132ec:	2100      	movs	r1, #0
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7ff fb83 	bl	80129fa <_ZN8touchgfx8Drawable10setVisibleEb>
        Play_Button.invalidate();
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	33ac      	adds	r3, #172	; 0xac
 80132f8:	4618      	mov	r0, r3
 80132fa:	f008 fbf9 	bl	801baf0 <_ZNK8touchgfx8Drawable10invalidateEv>

        //Show_Pause
        //When Play_Button clicked show Pause_Button
        //Show Pause_Button
        Pause_Button.setVisible(true);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8013304:	2101      	movs	r1, #1
 8013306:	4618      	mov	r0, r3
 8013308:	f7ff fb77 	bl	80129fa <_ZN8touchgfx8Drawable10setVisibleEb>
        Pause_Button.invalidate();
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8013312:	4618      	mov	r0, r3
 8013314:	f008 fbec 	bl	801baf0 <_ZNK8touchgfx8Drawable10invalidateEv>
        //Interaction1
        //When Back_Button clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
    }
}
 8013318:	e02b      	b.n	8013372 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x9e>
    else if (&src == &Pause_Button)
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8013320:	683a      	ldr	r2, [r7, #0]
 8013322:	429a      	cmp	r2, r3
 8013324:	d118      	bne.n	8013358 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x84>
        Pause_Button.setVisible(false);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f503 7392 	add.w	r3, r3, #292	; 0x124
 801332c:	2100      	movs	r1, #0
 801332e:	4618      	mov	r0, r3
 8013330:	f7ff fb63 	bl	80129fa <_ZN8touchgfx8Drawable10setVisibleEb>
        Pause_Button.invalidate();
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f503 7392 	add.w	r3, r3, #292	; 0x124
 801333a:	4618      	mov	r0, r3
 801333c:	f008 fbd8 	bl	801baf0 <_ZNK8touchgfx8Drawable10invalidateEv>
        Play_Button.setVisible(true);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	33ac      	adds	r3, #172	; 0xac
 8013344:	2101      	movs	r1, #1
 8013346:	4618      	mov	r0, r3
 8013348:	f7ff fb57 	bl	80129fa <_ZN8touchgfx8Drawable10setVisibleEb>
        Play_Button.invalidate();
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	33ac      	adds	r3, #172	; 0xac
 8013350:	4618      	mov	r0, r3
 8013352:	f008 fbcd 	bl	801baf0 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8013356:	e00c      	b.n	8013372 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x9e>
    else if (&src == &Back_Button)
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 801335e:	683a      	ldr	r2, [r7, #0]
 8013360:	429a      	cmp	r2, r3
 8013362:	d106      	bne.n	8013372 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x9e>
        application().gotoscreenScreenNoTransition();
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f7ff fc52 	bl	8012c0e <_ZN13MusicViewBase11applicationEv>
 801336a:	4603      	mov	r3, r0
 801336c:	4618      	mov	r0, r3
 801336e:	f7fc fe13 	bl	800ff98 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
}
 8013372:	bf00      	nop
 8013374:	3708      	adds	r7, #8
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
	...

0801337c <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev>:
    View()
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	4618      	mov	r0, r3
 8013388:	f008 ff46 	bl	801c218 <_ZN8touchgfx6ScreenC1Ev>
 801338c:	4a05      	ldr	r2, [pc, #20]	; (80133a4 <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev+0x28>)
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	601a      	str	r2, [r3, #0]
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	2200      	movs	r2, #0
 8013396:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	4618      	mov	r0, r3
 801339c:	3708      	adds	r7, #8
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	08029898 	.word	0x08029898

080133a8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b084      	sub	sp, #16
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	60f8      	str	r0, [r7, #12]
 80133b0:	60b9      	str	r1, [r7, #8]
 80133b2:	4639      	mov	r1, r7
 80133b4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7ff f9d8 	bl	8012770 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80133c0:	4a08      	ldr	r2, [pc, #32]	; (80133e4 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	68ba      	ldr	r2, [r7, #8]
 80133ca:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	3308      	adds	r3, #8
 80133d0:	463a      	mov	r2, r7
 80133d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80133d6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	4618      	mov	r0, r3
 80133de:	3710      	adds	r7, #16
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	08029880 	.word	0x08029880

080133e8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b082      	sub	sp, #8
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
 80133f0:	4a05      	ldr	r2, [pc, #20]	; (8013408 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	601a      	str	r2, [r3, #0]
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7ff f9e9 	bl	80127d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	4618      	mov	r0, r3
 8013402:	3708      	adds	r7, #8
 8013404:	46bd      	mov	sp, r7
 8013406:	bd80      	pop	{r7, pc}
 8013408:	08029880 	.word	0x08029880

0801340c <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801340c:	b580      	push	{r7, lr}
 801340e:	b082      	sub	sp, #8
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f7ff ffe7 	bl	80133e8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801341a:	2110      	movs	r1, #16
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f014 f899 	bl	8027554 <_ZdlPvj>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	4618      	mov	r0, r3
 8013426:	3708      	adds	r7, #8
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}

0801342c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 801342c:	b580      	push	{r7, lr}
 801342e:	b082      	sub	sp, #8
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
 8013434:	4a08      	ldr	r2, [pc, #32]	; (8013458 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	601a      	str	r2, [r3, #0]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	3328      	adds	r3, #40	; 0x28
 801343e:	4618      	mov	r0, r3
 8013440:	f7fb ff40 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	4618      	mov	r0, r3
 8013448:	f7fc fd28 	bl	800fe9c <_ZN8touchgfx6WidgetD1Ev>
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	4618      	mov	r0, r3
 8013450:	3708      	adds	r7, #8
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}
 8013456:	bf00      	nop
 8013458:	0802b3b4 	.word	0x0802b3b4

0801345c <_ZN8touchgfx8TextAreaD0Ev>:
 801345c:	b580      	push	{r7, lr}
 801345e:	b082      	sub	sp, #8
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f7ff ffe1 	bl	801342c <_ZN8touchgfx8TextAreaD1Ev>
 801346a:	213c      	movs	r1, #60	; 0x3c
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f014 f871 	bl	8027554 <_ZdlPvj>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	4618      	mov	r0, r3
 8013476:	3708      	adds	r7, #8
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	4a05      	ldr	r2, [pc, #20]	; (801349c <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	601a      	str	r2, [r3, #0]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	4618      	mov	r0, r3
 801348e:	f7ff fa25 	bl	80128dc <_ZN8touchgfx6ButtonD1Ev>
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	4618      	mov	r0, r3
 8013496:	3708      	adds	r7, #8
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}
 801349c:	0802b67c 	.word	0x0802b67c

080134a0 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f7ff ffe7 	bl	801347c <_ZN8touchgfx14ButtonWithIconD1Ev>
 80134ae:	213c      	movs	r1, #60	; 0x3c
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f014 f84f 	bl	8027554 <_ZdlPvj>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	4618      	mov	r0, r3
 80134ba:	3708      	adds	r7, #8
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
 80134c8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	685b      	ldr	r3, [r3, #4]
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	68d2      	ldr	r2, [r2, #12]
 80134d2:	1052      	asrs	r2, r2, #1
 80134d4:	1898      	adds	r0, r3, r2
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	68db      	ldr	r3, [r3, #12]
 80134da:	f003 0301 	and.w	r3, r3, #1
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d102      	bne.n	80134e8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	689b      	ldr	r3, [r3, #8]
 80134e6:	e00a      	b.n	80134fe <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	687a      	ldr	r2, [r7, #4]
 80134ee:	68d2      	ldr	r2, [r2, #12]
 80134f0:	1052      	asrs	r2, r2, #1
 80134f2:	4413      	add	r3, r2
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	687a      	ldr	r2, [r7, #4]
 80134f8:	6892      	ldr	r2, [r2, #8]
 80134fa:	4413      	add	r3, r2
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	6839      	ldr	r1, [r7, #0]
 8013500:	4798      	blx	r3
    }
 8013502:	bf00      	nop
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}

0801350a <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801350a:	b480      	push	{r7}
 801350c:	b083      	sub	sp, #12
 801350e:	af00      	add	r7, sp, #0
 8013510:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	685b      	ldr	r3, [r3, #4]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d010      	beq.n	801353c <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	689b      	ldr	r3, [r3, #8]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d107      	bne.n	8013532 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	68db      	ldr	r3, [r3, #12]
 8013526:	f003 0301 	and.w	r3, r3, #1
 801352a:	2b00      	cmp	r3, #0
 801352c:	d101      	bne.n	8013532 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801352e:	2301      	movs	r3, #1
 8013530:	e000      	b.n	8013534 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8013532:	2300      	movs	r3, #0
 8013534:	2b01      	cmp	r3, #1
 8013536:	d001      	beq.n	801353c <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013538:	2301      	movs	r3, #1
 801353a:	e000      	b.n	801353e <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801353c:	2300      	movs	r3, #0
    }
 801353e:	4618      	mov	r0, r3
 8013540:	370c      	adds	r7, #12
 8013542:	46bd      	mov	sp, r7
 8013544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013548:	4770      	bx	lr

0801354a <_ZNK8touchgfx9DragEvent9getDeltaXEv>:
    /**
     * Gets the distance in x coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaX() const
 801354a:	b480      	push	{r7}
 801354c:	b083      	sub	sp, #12
 801354e:	af00      	add	r7, sp, #0
 8013550:	6078      	str	r0, [r7, #4]
    {
        return _newX - _oldX;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013558:	b29a      	uxth	r2, r3
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013560:	b29b      	uxth	r3, r3
 8013562:	1ad3      	subs	r3, r2, r3
 8013564:	b29b      	uxth	r3, r3
 8013566:	b21b      	sxth	r3, r3
    }
 8013568:	4618      	mov	r0, r3
 801356a:	370c      	adds	r7, #12
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr

08013574 <_ZNK8touchgfx9DragEvent9getDeltaYEv>:
    /**
     * Gets the distance in y coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaY() const
 8013574:	b480      	push	{r7}
 8013576:	b083      	sub	sp, #12
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
    {
        return _newY - _oldY;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013582:	b29a      	uxth	r2, r3
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801358a:	b29b      	uxth	r3, r3
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	b29b      	uxth	r3, r3
 8013590:	b21b      	sxth	r3, r3
    }
 8013592:	4618      	mov	r0, r3
 8013594:	370c      	adds	r7, #12
 8013596:	46bd      	mov	sp, r7
 8013598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359c:	4770      	bx	lr

0801359e <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 801359e:	b480      	push	{r7}
 80135a0:	b083      	sub	sp, #12
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	6078      	str	r0, [r7, #4]
 80135a6:	460b      	mov	r3, r1
 80135a8:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	78fa      	ldrb	r2, [r7, #3]
 80135ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80135b2:	bf00      	nop
 80135b4:	370c      	adds	r7, #12
 80135b6:	46bd      	mov	sp, r7
 80135b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135bc:	4770      	bx	lr

080135be <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 80135be:	b480      	push	{r7}
 80135c0:	b083      	sub	sp, #12
 80135c2:	af00      	add	r7, sp, #0
 80135c4:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 80135ca:	4618      	mov	r0, r3
 80135cc:	370c      	adds	r7, #12
 80135ce:	46bd      	mov	sp, r7
 80135d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d4:	4770      	bx	lr
	...

080135d8 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 80135d8:	b480      	push	{r7}
 80135da:	b083      	sub	sp, #12
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255),
          painterAlpha(255)
 80135e0:	4a0a      	ldr	r2, [pc, #40]	; (801360c <_ZN8touchgfx15AbstractPainterC1Ev+0x34>)
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	601a      	str	r2, [r3, #0]
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	2200      	movs	r2, #0
 80135ea:	809a      	strh	r2, [r3, #4]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2200      	movs	r2, #0
 80135f0:	80da      	strh	r2, [r3, #6]
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	22ff      	movs	r2, #255	; 0xff
 80135f6:	721a      	strb	r2, [r3, #8]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	22ff      	movs	r2, #255	; 0xff
 80135fc:	725a      	strb	r2, [r3, #9]
    {
    }
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	4618      	mov	r0, r3
 8013602:	370c      	adds	r7, #12
 8013604:	46bd      	mov	sp, r7
 8013606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360a:	4770      	bx	lr
 801360c:	08029a3c 	.word	0x08029a3c

08013610 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8013610:	b480      	push	{r7}
 8013612:	b083      	sub	sp, #12
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
    {
 8013618:	4a04      	ldr	r2, [pc, #16]	; (801362c <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	601a      	str	r2, [r3, #0]
    }
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	4618      	mov	r0, r3
 8013622:	370c      	adds	r7, #12
 8013624:	46bd      	mov	sp, r7
 8013626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362a:	4770      	bx	lr
 801362c:	08029a3c 	.word	0x08029a3c

08013630 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8013630:	b580      	push	{r7, lr}
 8013632:	b082      	sub	sp, #8
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
    }
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f7ff ffe9 	bl	8013610 <_ZN8touchgfx15AbstractPainterD1Ev>
 801363e:	210c      	movs	r1, #12
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f013 ff87 	bl	8027554 <_ZdlPvj>
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	4618      	mov	r0, r3
 801364a:	3708      	adds	r7, #8
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}

08013650 <_ZN8touchgfx15AbstractPainter8setAlphaEh>:
     *       AbstractPainter for better performance.
     */
    virtual void render(uint8_t* ptr, int x, int xAdjust, int y, unsigned count, const uint8_t* covers) = 0;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 8013650:	b480      	push	{r7}
 8013652:	b083      	sub	sp, #12
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	460b      	mov	r3, r1
 801365a:	70fb      	strb	r3, [r7, #3]
    {
        painterAlpha = newAlpha;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	78fa      	ldrb	r2, [r7, #3]
 8013660:	725a      	strb	r2, [r3, #9]
    }
 8013662:	bf00      	nop
 8013664:	370c      	adds	r7, #12
 8013666:	46bd      	mov	sp, r7
 8013668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366c:	4770      	bx	lr

0801366e <_ZNK8touchgfx15AbstractPainter8getAlphaEv>:

    /** @copydoc Image::getAlpha */
    virtual uint8_t getAlpha() const
 801366e:	b480      	push	{r7}
 8013670:	b083      	sub	sp, #12
 8013672:	af00      	add	r7, sp, #0
 8013674:	6078      	str	r0, [r7, #4]
    {
        return painterAlpha;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	7a5b      	ldrb	r3, [r3, #9]
    }
 801367a:	4618      	mov	r0, r3
 801367c:	370c      	adds	r7, #12
 801367e:	46bd      	mov	sp, r7
 8013680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013684:	4770      	bx	lr

08013686 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 8013686:	b480      	push	{r7}
 8013688:	b083      	sub	sp, #12
 801368a:	af00      	add	r7, sp, #0
 801368c:	6078      	str	r0, [r7, #4]
 801368e:	6039      	str	r1, [r7, #0]
            : v(i)
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	683a      	ldr	r2, [r7, #0]
 8013694:	601a      	str	r2, [r3, #0]
        {
        }
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	4618      	mov	r0, r3
 801369a:	370c      	adds	r7, #12
 801369c:	46bd      	mov	sp, r7
 801369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a2:	4770      	bx	lr

080136a4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     *
     * @note The painter set with setPainter() can also have an alpha value. The alpha value of
     *       the painter and the alpha value of the CanvasWidget are combine to a single
     *       alpha value.
     */
    virtual void setAlpha(uint8_t alpha)
 80136a4:	b480      	push	{r7}
 80136a6:	b083      	sub	sp, #12
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	460b      	mov	r3, r1
 80136ae:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	78fa      	ldrb	r2, [r7, #3]
 80136b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 80136b8:	bf00      	nop
 80136ba:	370c      	adds	r7, #12
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr

080136c4 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     *
     * @return Gets the current alpha value of the Box.
     *
     * @see setAlpha
     */
    virtual uint8_t getAlpha() const
 80136c4:	b480      	push	{r7}
 80136c6:	b083      	sub	sp, #12
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 80136d2:	4618      	mov	r0, r3
 80136d4:	370c      	adds	r7, #12
 80136d6:	46bd      	mov	sp, r7
 80136d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136dc:	4770      	bx	lr
	...

080136e0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b084      	sub	sp, #16
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	4618      	mov	r0, r3
 80136ec:	f7ff ff74 	bl	80135d8 <_ZN8touchgfx15AbstractPainterC1Ev>
 80136f0:	4a27      	ldr	r2, [pc, #156]	; (8013790 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb0>)
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	601a      	str	r2, [r3, #0]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	2200      	movs	r2, #0
 80136fa:	60da      	str	r2, [r3, #12]
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2200      	movs	r2, #0
 8013700:	611a      	str	r2, [r3, #16]
 8013702:	2301      	movs	r3, #1
 8013704:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8013706:	f7fc fa83 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 801370a:	4602      	mov	r2, r0
 801370c:	6813      	ldr	r3, [r2, #0]
 801370e:	3320      	adds	r3, #32
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	4610      	mov	r0, r2
 8013714:	4798      	blx	r3
 8013716:	4603      	mov	r3, r0
 8013718:	461a      	mov	r2, r3
 801371a:	7bfb      	ldrb	r3, [r7, #15]
 801371c:	4293      	cmp	r3, r2
 801371e:	bf0c      	ite	eq
 8013720:	2301      	moveq	r3, #1
 8013722:	2300      	movne	r3, #0
 8013724:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 8013726:	f7fc fa67 	bl	800fbf8 <_ZN8touchgfx3HAL11getInstanceEv>
 801372a:	4603      	mov	r3, r0
 801372c:	4618      	mov	r0, r3
 801372e:	f7ff ff46 	bl	80135be <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8013732:	4603      	mov	r3, r0
 8013734:	2b00      	cmp	r3, #0
 8013736:	bf14      	ite	ne
 8013738:	2301      	movne	r3, #1
 801373a:	2300      	moveq	r3, #0
 801373c:	b2db      	uxtb	r3, r3
 801373e:	2b00      	cmp	r3, #0
 8013740:	d016      	beq.n	8013770 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x90>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8013742:	f7fc fa59 	bl	800fbf8 <_ZN8touchgfx3HAL11getInstanceEv>
 8013746:	4603      	mov	r3, r0
 8013748:	4618      	mov	r0, r3
 801374a:	f7ff ff38 	bl	80135be <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 801374e:	4602      	mov	r2, r0
 8013750:	6813      	ldr	r3, [r2, #0]
 8013752:	3320      	adds	r3, #32
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	4610      	mov	r0, r2
 8013758:	4798      	blx	r3
 801375a:	4603      	mov	r3, r0
 801375c:	461a      	mov	r2, r3
 801375e:	7bfb      	ldrb	r3, [r7, #15]
 8013760:	4293      	cmp	r3, r2
 8013762:	bf0c      	ite	eq
 8013764:	2301      	moveq	r3, #1
 8013766:	2300      	movne	r3, #0
 8013768:	b2da      	uxtb	r2, r3
 801376a:	7bbb      	ldrb	r3, [r7, #14]
 801376c:	4313      	orrs	r3, r2
 801376e:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8013770:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8013772:	2b00      	cmp	r3, #0
 8013774:	d105      	bne.n	8013782 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xa2>
 8013776:	4b07      	ldr	r3, [pc, #28]	; (8013794 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb4>)
 8013778:	4a07      	ldr	r2, [pc, #28]	; (8013798 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 801377a:	212b      	movs	r1, #43	; 0x2b
 801377c:	4807      	ldr	r0, [pc, #28]	; (801379c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 801377e:	f013 ff15 	bl	80275ac <__assert_func>
 8013782:	bf00      	nop
    }
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	4618      	mov	r0, r3
 8013788:	3710      	adds	r7, #16
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
 801378e:	bf00      	nop
 8013790:	0802af5c 	.word	0x0802af5c
 8013794:	08028a30 	.word	0x08028a30
 8013798:	08029a50 	.word	0x08029a50
 801379c:	08028a90 	.word	0x08028a90

080137a0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b082      	sub	sp, #8
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	4a05      	ldr	r2, [pc, #20]	; (80137c0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	601a      	str	r2, [r3, #0]
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7ff ff2d 	bl	8013610 <_ZN8touchgfx15AbstractPainterD1Ev>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	4618      	mov	r0, r3
 80137ba:	3708      	adds	r7, #8
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}
 80137c0:	0802af5c 	.word	0x0802af5c

080137c4 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b082      	sub	sp, #8
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f7ff ffe7 	bl	80137a0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80137d2:	2114      	movs	r1, #20
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f013 febd 	bl	8027554 <_ZdlPvj>
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	4618      	mov	r0, r3
 80137de:	3708      	adds	r7, #8
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}

080137e4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     * @param  alpha (Optional) the alpha, default is 255 i.e. solid.
     */
    PainterRGB888(colortype color = 0, uint8_t alpha = 255)
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b084      	sub	sp, #16
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	60f8      	str	r0, [r7, #12]
 80137ec:	60b9      	str	r1, [r7, #8]
 80137ee:	4613      	mov	r3, r2
 80137f0:	71fb      	strb	r3, [r7, #7]
        : AbstractPainterRGB888()
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7ff ff73 	bl	80136e0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80137fa:	4a09      	ldr	r2, [pc, #36]	; (8013820 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x3c>)
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	601a      	str	r2, [r3, #0]
    {
        setColor(color);
 8013800:	68b9      	ldr	r1, [r7, #8]
 8013802:	68f8      	ldr	r0, [r7, #12]
 8013804:	f000 f80e 	bl	8013824 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        setAlpha(alpha);
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	79fa      	ldrb	r2, [r7, #7]
 801380c:	4611      	mov	r1, r2
 801380e:	4618      	mov	r0, r3
 8013810:	f7ff ff1e 	bl	8013650 <_ZN8touchgfx15AbstractPainter8setAlphaEh>
    }
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	4618      	mov	r0, r3
 8013818:	3710      	adds	r7, #16
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}
 801381e:	bf00      	nop
 8013820:	0802b0bc 	.word	0x0802b0bc

08013824 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color and alpha to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 8013824:	b580      	push	{r7, lr}
 8013826:	b086      	sub	sp, #24
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6039      	str	r1, [r7, #0]
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	617b      	str	r3, [r7, #20]
     *
     * @see LCD16bpp::getRedFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getRedColor(colortype color)
    {
        return HAL::lcd().getRedColor(color);
 8013832:	f7fc f9ed 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8013836:	4602      	mov	r2, r0
 8013838:	6813      	ldr	r3, [r2, #0]
 801383a:	332c      	adds	r3, #44	; 0x2c
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	6979      	ldr	r1, [r7, #20]
 8013840:	4610      	mov	r0, r2
 8013842:	4798      	blx	r3
 8013844:	4603      	mov	r3, r0
 8013846:	461a      	mov	r2, r3
    {
        painterRed = Color::getRedColor(color);
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	751a      	strb	r2, [r3, #20]
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	613b      	str	r3, [r7, #16]
     *
     * @see LCD16bpp::getGreenFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreenColor(colortype color)
    {
        return HAL::lcd().getGreenColor(color);
 8013850:	f7fc f9de 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8013854:	4602      	mov	r2, r0
 8013856:	6813      	ldr	r3, [r2, #0]
 8013858:	3330      	adds	r3, #48	; 0x30
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	6939      	ldr	r1, [r7, #16]
 801385e:	4610      	mov	r0, r2
 8013860:	4798      	blx	r3
 8013862:	4603      	mov	r3, r0
 8013864:	461a      	mov	r2, r3
        painterGreen = Color::getGreenColor(color);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	755a      	strb	r2, [r3, #21]
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	60fb      	str	r3, [r7, #12]
     *
     * @see LCD16bpp::getBlueFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlueColor(colortype color)
    {
        return HAL::lcd().getBlueColor(color);
 801386e:	f7fc f9cf 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8013872:	4602      	mov	r2, r0
 8013874:	6813      	ldr	r3, [r2, #0]
 8013876:	3334      	adds	r3, #52	; 0x34
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	68f9      	ldr	r1, [r7, #12]
 801387c:	4610      	mov	r0, r2
 801387e:	4798      	blx	r3
 8013880:	4603      	mov	r3, r0
 8013882:	461a      	mov	r2, r3
        painterBlue = Color::getBlueColor(color);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	759a      	strb	r2, [r3, #22]
    }
 8013888:	bf00      	nop
 801388a:	3718      	adds	r7, #24
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}

08013890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8013890:	b580      	push	{r7, lr}
 8013892:	b082      	sub	sp, #8
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	4618      	mov	r0, r3
 801389c:	f7ff f8be 	bl	8012a1c <_ZN8touchgfx8TextAreaC1Ev>
 80138a0:	4a05      	ldr	r2, [pc, #20]	; (80138b8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	601a      	str	r2, [r3, #0]
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2200      	movs	r2, #0
 80138aa:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	4618      	mov	r0, r3
 80138b0:	3708      	adds	r7, #8
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}
 80138b6:	bf00      	nop
 80138b8:	0802b5d0 	.word	0x0802b5d0

080138bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80138bc:	b480      	push	{r7}
 80138be:	b083      	sub	sp, #12
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	683a      	ldr	r2, [r7, #0]
 80138ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80138cc:	bf00      	nop
 80138ce:	370c      	adds	r7, #12
 80138d0:	46bd      	mov	sp, r7
 80138d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d6:	4770      	bx	lr

080138d8 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>:
class View : public Screen
 80138d8:	b580      	push	{r7, lr}
 80138da:	b082      	sub	sp, #8
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	4a05      	ldr	r2, [pc, #20]	; (80138f8 <_ZN8touchgfx4ViewI13PongPresenterED1Ev+0x20>)
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	601a      	str	r2, [r3, #0]
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7fe fb49 	bl	8011f80 <_ZN8touchgfx6ScreenD1Ev>
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	4618      	mov	r0, r3
 80138f2:	3708      	adds	r7, #8
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	08029a08 	.word	0x08029a08

080138fc <_ZN8touchgfx4ViewI13PongPresenterED0Ev>:
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f7ff ffe7 	bl	80138d8 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 801390a:	2140      	movs	r1, #64	; 0x40
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f013 fe21 	bl	8027554 <_ZdlPvj>
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	4618      	mov	r0, r3
 8013916:	3708      	adds	r7, #8
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}

0801391c <_ZN12PongViewBaseD1Ev>:

class PongViewBase : public touchgfx::View<PongPresenter>
{
public:
    PongViewBase();
    virtual ~PongViewBase() {}
 801391c:	b580      	push	{r7, lr}
 801391e:	b082      	sub	sp, #8
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	4a18      	ldr	r2, [pc, #96]	; (8013988 <_ZN12PongViewBaseD1Ev+0x6c>)
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	601a      	str	r2, [r3, #0]
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8013930:	4618      	mov	r0, r3
 8013932:	f000 fb41 	bl	8013fb8 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801393c:	4618      	mov	r0, r3
 801393e:	f7ff fd9d 	bl	801347c <_ZN8touchgfx14ButtonWithIconD1Ev>
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8013948:	4618      	mov	r0, r3
 801394a:	f000 fbbd 	bl	80140c8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	33f0      	adds	r3, #240	; 0xf0
 8013952:	4618      	mov	r0, r3
 8013954:	f000 fb52 	bl	8013ffc <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	33d8      	adds	r3, #216	; 0xd8
 801395c:	4618      	mov	r0, r3
 801395e:	f000 fb91 	bl	8014084 <_ZN8touchgfx13PainterRGB888D1Ev>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	3370      	adds	r3, #112	; 0x70
 8013966:	4618      	mov	r0, r3
 8013968:	f000 fb6a 	bl	8014040 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	3340      	adds	r3, #64	; 0x40
 8013970:	4618      	mov	r0, r3
 8013972:	f7fe ff91 	bl	8012898 <_ZN8touchgfx3BoxD1Ev>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	4618      	mov	r0, r3
 801397a:	f7ff ffad 	bl	80138d8 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	4618      	mov	r0, r3
 8013982:	3708      	adds	r7, #8
 8013984:	46bd      	mov	sp, r7
 8013986:	bd80      	pop	{r7, pc}
 8013988:	080298cc 	.word	0x080298cc

0801398c <_ZN12PongViewBaseD0Ev>:
 801398c:	b580      	push	{r7, lr}
 801398e:	b082      	sub	sp, #8
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
 8013994:	6878      	ldr	r0, [r7, #4]
 8013996:	f7ff ffc1 	bl	801391c <_ZN12PongViewBaseD1Ev>
 801399a:	f641 51f4 	movw	r1, #7668	; 0x1df4
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f013 fdd8 	bl	8027554 <_ZdlPvj>
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	4618      	mov	r0, r3
 80139a8:	3708      	adds	r7, #8
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}

080139ae <_ZN12PongViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80139ae:	b580      	push	{r7, lr}
 80139b0:	b082      	sub	sp, #8
 80139b2:	af00      	add	r7, sp, #0
 80139b4:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80139b6:	f007 fc79 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 80139ba:	4603      	mov	r3, r0
    }
 80139bc:	4618      	mov	r0, r3
 80139be:	3708      	adds	r7, #8
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd80      	pop	{r7, pc}

080139c4 <_ZN12PongViewBaseC1Ev>:
#include <gui_generated/pong_screen/PongViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

PongViewBase::PongViewBase() :
 80139c4:	b590      	push	{r4, r7, lr}
 80139c6:	b095      	sub	sp, #84	; 0x54
 80139c8:	af02      	add	r7, sp, #8
 80139ca:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &PongViewBase::buttonCallbackHandler)
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	4618      	mov	r0, r3
 80139d0:	f000 fa10 	bl	8013df4 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>
 80139d4:	4ac7      	ldr	r2, [pc, #796]	; (8013cf4 <_ZN12PongViewBaseC1Ev+0x330>)
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	601a      	str	r2, [r3, #0]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	3340      	adds	r3, #64	; 0x40
 80139de:	4618      	mov	r0, r3
 80139e0:	f7fe fb66 	bl	80120b0 <_ZN8touchgfx3BoxC1Ev>
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	3370      	adds	r3, #112	; 0x70
 80139e8:	4618      	mov	r0, r3
 80139ea:	f000 fa5d 	bl	8013ea8 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80139f4:	f107 030c 	add.w	r3, r7, #12
 80139f8:	2100      	movs	r1, #0
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7fe faa1 	bl	8011f42 <_ZN8touchgfx9colortypeC1Em>
 8013a00:	22ff      	movs	r2, #255	; 0xff
 8013a02:	68f9      	ldr	r1, [r7, #12]
 8013a04:	4620      	mov	r0, r4
 8013a06:	f7ff feed 	bl	80137e4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	33f0      	adds	r3, #240	; 0xf0
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f000 fa6c 	bl	8013eec <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7ff ff38 	bl	8013890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013a26:	4618      	mov	r0, r3
 8013a28:	f006 fa98 	bl	8019f5c <_ZN8touchgfx14ButtonWithIconC1Ev>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f503 70e2 	add.w	r0, r3, #452	; 0x1c4
 8013a32:	4bb1      	ldr	r3, [pc, #708]	; (8013cf8 <_ZN12PongViewBaseC1Ev+0x334>)
 8013a34:	613b      	str	r3, [r7, #16]
 8013a36:	2300      	movs	r3, #0
 8013a38:	617b      	str	r3, [r7, #20]
 8013a3a:	f107 0310 	add.w	r3, r7, #16
 8013a3e:	cb0c      	ldmia	r3, {r2, r3}
 8013a40:	6879      	ldr	r1, [r7, #4]
 8013a42:	f000 fa6b 	bl	8013f1c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8013a4c:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8013a50:	4618      	mov	r0, r3
 8013a52:	f006 fba3 	bl	801a19c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    background.setPosition(0, 0, 480, 272);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013a5c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013a60:	9300      	str	r3, [sp, #0]
 8013a62:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013a66:	2200      	movs	r2, #0
 8013a68:	2100      	movs	r1, #0
 8013a6a:	f7fb ff87 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013a74:	22ff      	movs	r2, #255	; 0xff
 8013a76:	21ff      	movs	r1, #255	; 0xff
 8013a78:	20ff      	movs	r0, #255	; 0xff
 8013a7a:	f7fe fcb9 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	4619      	mov	r1, r3
 8013a82:	4620      	mov	r0, r4
 8013a84:	f7fe fb3c 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    ball.setPosition(200, 85, 80, 80);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8013a8e:	2350      	movs	r3, #80	; 0x50
 8013a90:	9300      	str	r3, [sp, #0]
 8013a92:	2350      	movs	r3, #80	; 0x50
 8013a94:	2255      	movs	r2, #85	; 0x55
 8013a96:	21c8      	movs	r1, #200	; 0xc8
 8013a98:	f7fb ff70 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    ball.setCenter(40, 40);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	3370      	adds	r3, #112	; 0x70
 8013aa0:	2228      	movs	r2, #40	; 0x28
 8013aa2:	2128      	movs	r1, #40	; 0x28
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f000 f959 	bl	8013d5c <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    ball.setRadius(20);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	3370      	adds	r3, #112	; 0x70
 8013aae:	2114      	movs	r1, #20
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f000 fa53 	bl	8013f5c <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    ball.setLineWidth(0);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	3370      	adds	r3, #112	; 0x70
 8013aba:	2100      	movs	r1, #0
 8013abc:	4618      	mov	r0, r3
 8013abe:	f000 fa64 	bl	8013f8a <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    ball.setArc(0, 360);
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	3370      	adds	r3, #112	; 0x70
 8013ac6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013aca:	2100      	movs	r1, #0
 8013acc:	4618      	mov	r0, r3
 8013ace:	f000 f96b 	bl	8013da8 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    ballPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8013ad8:	22ff      	movs	r2, #255	; 0xff
 8013ada:	2180      	movs	r1, #128	; 0x80
 8013adc:	2006      	movs	r0, #6
 8013ade:	f7fe fc87 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	4619      	mov	r1, r3
 8013ae6:	4620      	mov	r0, r4
 8013ae8:	f7ff fe9c 	bl	8013824 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    ball.setPainter(ballPainter);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	33d8      	adds	r3, #216	; 0xd8
 8013af6:	4619      	mov	r1, r3
 8013af8:	4610      	mov	r0, r2
 8013afa:	f005 fc1d 	bl	8019338 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    paddle1.setPosition(66, 212, 134, 29);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8013b04:	231d      	movs	r3, #29
 8013b06:	9300      	str	r3, [sp, #0]
 8013b08:	2386      	movs	r3, #134	; 0x86
 8013b0a:	22d4      	movs	r2, #212	; 0xd4
 8013b0c:	2142      	movs	r1, #66	; 0x42
 8013b0e:	f7fb ff35 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    paddle1.setColor(touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8013b18:	22ff      	movs	r2, #255	; 0xff
 8013b1a:	2180      	movs	r1, #128	; 0x80
 8013b1c:	2006      	movs	r0, #6
 8013b1e:	f7fe fc67 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b22:	4603      	mov	r3, r0
 8013b24:	4619      	mov	r1, r3
 8013b26:	4620      	mov	r0, r4
 8013b28:	f7fe faea 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    score.setXY(299, 0);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8013b32:	2200      	movs	r2, #0
 8013b34:	f240 112b 	movw	r1, #299	; 0x12b
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7fb ff84 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    score.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 173, 173));
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8013b44:	22ad      	movs	r2, #173	; 0xad
 8013b46:	21ad      	movs	r1, #173	; 0xad
 8013b48:	2000      	movs	r0, #0
 8013b4a:	f7fe fc51 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	63bc      	str	r4, [r7, #56]	; 0x38
 8013b52:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8013b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b56:	68ba      	ldr	r2, [r7, #8]
 8013b58:	631a      	str	r2, [r3, #48]	; 0x30
    score.setLinespacing(0);
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8013b60:	643b      	str	r3, [r7, #64]	; 0x40
 8013b62:	2300      	movs	r3, #0
 8013b64:	87fb      	strh	r3, [r7, #62]	; 0x3e
        linespace = space;
 8013b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b68:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013b6a:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID29).getText());
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 8013b72:	f107 0318 	add.w	r3, r7, #24
 8013b76:	210e      	movs	r1, #14
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7fe facf 	bl	801211c <_ZN8touchgfx9TypedTextC1Et>
 8013b7e:	f107 0318 	add.w	r3, r7, #24
 8013b82:	647b      	str	r3, [r7, #68]	; 0x44
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013b84:	4b5d      	ldr	r3, [pc, #372]	; (8013cfc <_ZN12PongViewBaseC1Ev+0x338>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d105      	bne.n	8013b98 <_ZN12PongViewBaseC1Ev+0x1d4>
 8013b8c:	4b5c      	ldr	r3, [pc, #368]	; (8013d00 <_ZN12PongViewBaseC1Ev+0x33c>)
 8013b8e:	4a5d      	ldr	r2, [pc, #372]	; (8013d04 <_ZN12PongViewBaseC1Ev+0x340>)
 8013b90:	21b1      	movs	r1, #177	; 0xb1
 8013b92:	485d      	ldr	r0, [pc, #372]	; (8013d08 <_ZN12PongViewBaseC1Ev+0x344>)
 8013b94:	f013 fd0a 	bl	80275ac <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b9a:	889a      	ldrh	r2, [r3, #4]
 8013b9c:	4b5b      	ldr	r3, [pc, #364]	; (8013d0c <_ZN12PongViewBaseC1Ev+0x348>)
 8013b9e:	881b      	ldrh	r3, [r3, #0]
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d305      	bcc.n	8013bb0 <_ZN12PongViewBaseC1Ev+0x1ec>
 8013ba4:	4b5a      	ldr	r3, [pc, #360]	; (8013d10 <_ZN12PongViewBaseC1Ev+0x34c>)
 8013ba6:	4a57      	ldr	r2, [pc, #348]	; (8013d04 <_ZN12PongViewBaseC1Ev+0x340>)
 8013ba8:	21b2      	movs	r1, #178	; 0xb2
 8013baa:	4857      	ldr	r0, [pc, #348]	; (8013d08 <_ZN12PongViewBaseC1Ev+0x344>)
 8013bac:	f013 fcfe 	bl	80275ac <__assert_func>
        return texts->getText(typedTextId);
 8013bb0:	4b58      	ldr	r3, [pc, #352]	; (8013d14 <_ZN12PongViewBaseC1Ev+0x350>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	8bba      	ldrh	r2, [r7, #28]
 8013bb6:	4611      	mov	r1, r2
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f001 f83d 	bl	8014c38 <_ZNK8touchgfx5Texts7getTextEt>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	4a55      	ldr	r2, [pc, #340]	; (8013d18 <_ZN12PongViewBaseC1Ev+0x354>)
 8013bc2:	2114      	movs	r1, #20
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	f009 fdcb 	bl	801d760 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013bca:	f107 0318 	add.w	r3, r7, #24
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7fb fb78 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>
    score.setWildcard(scoreBuffer);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8013be0:	4619      	mov	r1, r3
 8013be2:	4610      	mov	r0, r2
 8013be4:	f7ff fe6a 	bl	80138bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    score.resizeToCurrentText();
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f005 ff00 	bl	80199f4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    score.setTypedText(touchgfx::TypedText(T_SINGLEUSEID28));
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8013bfa:	f107 0320 	add.w	r3, r7, #32
 8013bfe:	210d      	movs	r1, #13
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7fe fa8b 	bl	801211c <_ZN8touchgfx9TypedTextC1Et>
 8013c06:	f107 0320 	add.w	r3, r7, #32
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	f005 ff1b 	bl	8019a48 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8013c12:	f107 0320 	add.w	r3, r7, #32
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7fb fb54 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>

    Back_Button.setXY(0, 0);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013c22:	2200      	movs	r2, #0
 8013c24:	2100      	movs	r1, #0
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7fb ff0d 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f503 74b0 	add.w	r4, r3, #352	; 0x160
 8013c32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013c36:	2102      	movs	r1, #2
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7fe f991 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8013c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c42:	2103      	movs	r1, #3
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7fe f98b 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8013c4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013c4e:	2107      	movs	r1, #7
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7fe f985 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8013c56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013c5a:	2107      	movs	r1, #7
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f7fe f97f 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8013c62:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8013c66:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013c6a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8013c6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013c72:	9300      	str	r3, [sp, #0]
 8013c74:	4603      	mov	r3, r0
 8013c76:	4620      	mov	r0, r4
 8013c78:	f006 f8cc 	bl	8019e14 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013c82:	220f      	movs	r2, #15
 8013c84:	2113      	movs	r1, #19
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7fe ff20 	bl	8012acc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8013c98:	4619      	mov	r1, r3
 8013c9a:	4610      	mov	r0, r2
 8013c9c:	f7fe f9d7 	bl	801204e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(background);
 8013ca0:	687a      	ldr	r2, [r7, #4]
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	3340      	adds	r3, #64	; 0x40
 8013ca6:	4619      	mov	r1, r3
 8013ca8:	4610      	mov	r0, r2
 8013caa:	f7fe f9c1 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ball);
 8013cae:	687a      	ldr	r2, [r7, #4]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	3370      	adds	r3, #112	; 0x70
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	4610      	mov	r0, r2
 8013cb8:	f7fe f9ba 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(paddle1);
 8013cbc:	687a      	ldr	r2, [r7, #4]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	33f0      	adds	r3, #240	; 0xf0
 8013cc2:	4619      	mov	r1, r3
 8013cc4:	4610      	mov	r0, r2
 8013cc6:	f7fe f9b3 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(score);
 8013cca:	687a      	ldr	r2, [r7, #4]
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8013cd2:	4619      	mov	r1, r3
 8013cd4:	4610      	mov	r0, r2
 8013cd6:	f7fe f9ab 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 8013cda:	687a      	ldr	r2, [r7, #4]
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	4610      	mov	r0, r2
 8013ce6:	f7fe f9a3 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	4618      	mov	r0, r3
 8013cee:	374c      	adds	r7, #76	; 0x4c
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd90      	pop	{r4, r7, pc}
 8013cf4:	080298cc 	.word	0x080298cc
 8013cf8:	08013d31 	.word	0x08013d31
 8013cfc:	2000b3a4 	.word	0x2000b3a4
 8013d00:	08028af0 	.word	0x08028af0
 8013d04:	08029a8c 	.word	0x08029a8c
 8013d08:	08028b34 	.word	0x08028b34
 8013d0c:	2000b3a8 	.word	0x2000b3a8
 8013d10:	08028b78 	.word	0x08028b78
 8013d14:	2000b3b0 	.word	0x2000b3b0
 8013d18:	08028bcc 	.word	0x08028bcc

08013d1c <_ZN12PongViewBase11setupScreenEv>:

void PongViewBase::setupScreen()
{
 8013d1c:	b480      	push	{r7}
 8013d1e:	b083      	sub	sp, #12
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]

}
 8013d24:	bf00      	nop
 8013d26:	370c      	adds	r7, #12
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2e:	4770      	bx	lr

08013d30 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void PongViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b082      	sub	sp, #8
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
 8013d38:	6039      	str	r1, [r7, #0]
    if (&src == &Back_Button)
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013d40:	683a      	ldr	r2, [r7, #0]
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d106      	bne.n	8013d54 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //back_to_main_screen
        //When Back_Button clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenSlideTransitionEast();
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	f7ff fe31 	bl	80139ae <_ZN12PongViewBase11applicationEv>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fc f968 	bl	8010024 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>
    }
}
 8013d54:	bf00      	nop
 8013d56:	3708      	adds	r7, #8
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}

08013d5c <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b088      	sub	sp, #32
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	60f8      	str	r0, [r7, #12]
 8013d64:	60b9      	str	r1, [r7, #8]
 8013d66:	607a      	str	r2, [r7, #4]
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8013d6c:	69bb      	ldr	r3, [r7, #24]
 8013d6e:	015a      	lsls	r2, r3, #5
 8013d70:	f107 0314 	add.w	r3, r7, #20
 8013d74:	4611      	mov	r1, r2
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7ff fc85 	bl	8013686 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013d7c:	697b      	ldr	r3, [r7, #20]
 8013d7e:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	631a      	str	r2, [r3, #48]	; 0x30
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	61fb      	str	r3, [r7, #28]
 8013d88:	69fb      	ldr	r3, [r7, #28]
 8013d8a:	015a      	lsls	r2, r3, #5
 8013d8c:	f107 0310 	add.w	r3, r7, #16
 8013d90:	4611      	mov	r1, r2
 8013d92:	4618      	mov	r0, r3
 8013d94:	f7ff fc77 	bl	8013686 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013d98:	693b      	ldr	r3, [r7, #16]
 8013d9a:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8013da0:	bf00      	nop
 8013da2:	3720      	adds	r7, #32
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     * @see getArc, updateArcStart, updateArcEnd, updateArc
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b088      	sub	sp, #32
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	60f8      	str	r0, [r7, #12]
 8013db0:	60b9      	str	r1, [r7, #8]
 8013db2:	607a      	str	r2, [r7, #4]
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	61bb      	str	r3, [r7, #24]
 8013db8:	69bb      	ldr	r3, [r7, #24]
 8013dba:	015a      	lsls	r2, r3, #5
 8013dbc:	f107 0314 	add.w	r3, r7, #20
 8013dc0:	4611      	mov	r1, r2
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7ff fc5f 	bl	8013686 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	63da      	str	r2, [r3, #60]	; 0x3c
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	61fb      	str	r3, [r7, #28]
 8013dd4:	69fb      	ldr	r3, [r7, #28]
 8013dd6:	015a      	lsls	r2, r3, #5
 8013dd8:	f107 0310 	add.w	r3, r7, #16
 8013ddc:	4611      	mov	r1, r2
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7ff fc51 	bl	8013686 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8013dec:	bf00      	nop
 8013dee:	3720      	adds	r7, #32
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>:
    View()
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f008 fa0a 	bl	801c218 <_ZN8touchgfx6ScreenC1Ev>
 8013e04:	4a05      	ldr	r2, [pc, #20]	; (8013e1c <_ZN8touchgfx4ViewI13PongPresenterEC1Ev+0x28>)
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	601a      	str	r2, [r3, #0]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	4618      	mov	r0, r3
 8013e14:	3708      	adds	r7, #8
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}
 8013e1a:	bf00      	nop
 8013e1c:	08029a08 	.word	0x08029a08

08013e20 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b082      	sub	sp, #8
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	4a05      	ldr	r2, [pc, #20]	; (8013e40 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	601a      	str	r2, [r3, #0]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7fc f833 	bl	800fe9c <_ZN8touchgfx6WidgetD1Ev>
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3708      	adds	r7, #8
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	0802b148 	.word	0x0802b148

08013e44 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b082      	sub	sp, #8
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f7ff ffe7 	bl	8013e20 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8013e52:	2130      	movs	r1, #48	; 0x30
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f013 fb7d 	bl	8027554 <_ZdlPvj>
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	3708      	adds	r7, #8
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
 8013e6c:	4a05      	ldr	r2, [pc, #20]	; (8013e84 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	601a      	str	r2, [r3, #0]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7ff ffd3 	bl	8013e20 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3708      	adds	r7, #8
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}
 8013e84:	0802b03c 	.word	0x0802b03c

08013e88 <_ZN8touchgfx6CircleD0Ev>:
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f7ff ffe7 	bl	8013e64 <_ZN8touchgfx6CircleD1Ev>
 8013e96:	214c      	movs	r1, #76	; 0x4c
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f013 fb5b 	bl	8027554 <_ZdlPvj>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3708      	adds	r7, #8
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}

08013ea8 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>:
 */
template <class T>
class MoveAnimator : public T
{
public:
    MoveAnimator()
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
        : T(),
          moveAnimationRunning(false),
          moveAnimationCounter(0),
          moveAnimationDelay(0),
          moveAnimationEndedCallback(0)
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f004 fe1a 	bl	8018aec <_ZN8touchgfx6CircleC1Ev>
 8013eb8:	4a0b      	ldr	r2, [pc, #44]	; (8013ee8 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev+0x40>)
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	601a      	str	r2, [r3, #0]
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2200      	movs	r2, #0
 8013eca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	665a      	str	r2, [r3, #100]	; 0x64
    {
    }
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3708      	adds	r7, #8
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	08029980 	.word	0x08029980

08013eec <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>:
template <class T>
class Draggable : public T
{
public:
    /** Initializes a new instance of the Draggable class. Make the object touchable. */
    Draggable()
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b082      	sub	sp, #8
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
        : T()
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7fe f8da 	bl	80120b0 <_ZN8touchgfx3BoxC1Ev>
 8013efc:	4a06      	ldr	r2, [pc, #24]	; (8013f18 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev+0x2c>)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	601a      	str	r2, [r3, #0]
    {
        T::setTouchable(true);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	2101      	movs	r1, #1
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7ff fb49 	bl	801359e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3708      	adds	r7, #8
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}
 8013f16:	bf00      	nop
 8013f18:	08029918 	.word	0x08029918

08013f1c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b084      	sub	sp, #16
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	60b9      	str	r1, [r7, #8]
 8013f26:	4639      	mov	r1, r7
 8013f28:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f7fe fc1e 	bl	8012770 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8013f34:	4a08      	ldr	r2, [pc, #32]	; (8013f58 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	68ba      	ldr	r2, [r7, #8]
 8013f3e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	3308      	adds	r3, #8
 8013f44:	463a      	mov	r2, r7
 8013f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f4a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	4618      	mov	r0, r3
 8013f52:	3710      	adds	r7, #16
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}
 8013f58:	08029900 	.word	0x08029900

08013f5c <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b084      	sub	sp, #16
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	6039      	str	r1, [r7, #0]
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	60fb      	str	r3, [r7, #12]
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	015a      	lsls	r2, r3, #5
 8013f6e:	f107 0308 	add.w	r3, r7, #8
 8013f72:	4611      	mov	r1, r2
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7ff fb86 	bl	8013686 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5<T>(r);
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8013f82:	bf00      	nop
 8013f84:	3710      	adds	r7, #16
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}

08013f8a <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 8013f8a:	b580      	push	{r7, lr}
 8013f8c:	b084      	sub	sp, #16
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
 8013f92:	6039      	str	r1, [r7, #0]
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	60fb      	str	r3, [r7, #12]
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	015a      	lsls	r2, r3, #5
 8013f9c:	f107 0308 	add.w	r3, r7, #8
 8013fa0:	4611      	mov	r1, r2
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7ff fb6f 	bl	8013686 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013fa8:	68bb      	ldr	r3, [r7, #8]
 8013faa:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8013fb0:	bf00      	nop
 8013fb2:	3710      	adds	r7, #16
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}

08013fb8 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b082      	sub	sp, #8
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	4a05      	ldr	r2, [pc, #20]	; (8013fd8 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	601a      	str	r2, [r3, #0]
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7fe fc01 	bl	80127d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3708      	adds	r7, #8
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	08029900 	.word	0x08029900

08013fdc <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b082      	sub	sp, #8
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f7ff ffe7 	bl	8013fb8 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013fea:	2110      	movs	r1, #16
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f013 fab1 	bl	8027554 <_ZdlPvj>
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3708      	adds	r7, #8
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>:
class Draggable : public T
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	4a05      	ldr	r2, [pc, #20]	; (801401c <_ZN8touchgfx9DraggableINS_3BoxEED1Ev+0x20>)
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	601a      	str	r2, [r3, #0]
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	4618      	mov	r0, r3
 801400e:	f7fe fc43 	bl	8012898 <_ZN8touchgfx3BoxD1Ev>
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	4618      	mov	r0, r3
 8014016:	3708      	adds	r7, #8
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}
 801401c:	08029918 	.word	0x08029918

08014020 <_ZN8touchgfx9DraggableINS_3BoxEED0Ev>:
 8014020:	b580      	push	{r7, lr}
 8014022:	b082      	sub	sp, #8
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f7ff ffe7 	bl	8013ffc <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 801402e:	2130      	movs	r1, #48	; 0x30
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f013 fa8f 	bl	8027554 <_ZdlPvj>
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	4618      	mov	r0, r3
 801403a:	3708      	adds	r7, #8
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>:
class MoveAnimator : public T
 8014040:	b580      	push	{r7, lr}
 8014042:	b082      	sub	sp, #8
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	4a05      	ldr	r2, [pc, #20]	; (8014060 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev+0x20>)
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	601a      	str	r2, [r3, #0]
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	4618      	mov	r0, r3
 8014052:	f7ff ff07 	bl	8013e64 <_ZN8touchgfx6CircleD1Ev>
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	4618      	mov	r0, r3
 801405a:	3708      	adds	r7, #8
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}
 8014060:	08029980 	.word	0x08029980

08014064 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED0Ev>:
 8014064:	b580      	push	{r7, lr}
 8014066:	b082      	sub	sp, #8
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f7ff ffe7 	bl	8014040 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 8014072:	2168      	movs	r1, #104	; 0x68
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	f013 fa6d 	bl	8027554 <_ZdlPvj>
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	4618      	mov	r0, r3
 801407e:	3708      	adds	r7, #8
 8014080:	46bd      	mov	sp, r7
 8014082:	bd80      	pop	{r7, pc}

08014084 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8014084:	b580      	push	{r7, lr}
 8014086:	b082      	sub	sp, #8
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
 801408c:	4a05      	ldr	r2, [pc, #20]	; (80140a4 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	601a      	str	r2, [r3, #0]
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	4618      	mov	r0, r3
 8014096:	f7ff fb83 	bl	80137a0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	4618      	mov	r0, r3
 801409e:	3708      	adds	r7, #8
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}
 80140a4:	0802b0bc 	.word	0x0802b0bc

080140a8 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b082      	sub	sp, #8
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f7ff ffe7 	bl	8014084 <_ZN8touchgfx13PainterRGB888D1Ev>
 80140b6:	2118      	movs	r1, #24
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f013 fa4b 	bl	8027554 <_ZdlPvj>
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	4618      	mov	r0, r3
 80140c2:	3708      	adds	r7, #8
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}

080140c8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b082      	sub	sp, #8
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	4a05      	ldr	r2, [pc, #20]	; (80140e8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	601a      	str	r2, [r3, #0]
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	4618      	mov	r0, r3
 80140da:	f7ff f9a7 	bl	801342c <_ZN8touchgfx8TextAreaD1Ev>
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	4618      	mov	r0, r3
 80140e2:	3708      	adds	r7, #8
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	0802b5d0 	.word	0x0802b5d0

080140ec <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f7ff ffe7 	bl	80140c8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80140fa:	2140      	movs	r1, #64	; 0x40
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f013 fa29 	bl	8027554 <_ZdlPvj>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	4618      	mov	r0, r3
 8014106:	3708      	adds	r7, #8
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}

0801410c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	685b      	ldr	r3, [r3, #4]
 801411a:	687a      	ldr	r2, [r7, #4]
 801411c:	68d2      	ldr	r2, [r2, #12]
 801411e:	1052      	asrs	r2, r2, #1
 8014120:	1898      	adds	r0, r3, r2
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	68db      	ldr	r3, [r3, #12]
 8014126:	f003 0301 	and.w	r3, r3, #1
 801412a:	2b00      	cmp	r3, #0
 801412c:	d102      	bne.n	8014134 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	689b      	ldr	r3, [r3, #8]
 8014132:	e00a      	b.n	801414a <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	685b      	ldr	r3, [r3, #4]
 8014138:	687a      	ldr	r2, [r7, #4]
 801413a:	68d2      	ldr	r2, [r2, #12]
 801413c:	1052      	asrs	r2, r2, #1
 801413e:	4413      	add	r3, r2
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	6892      	ldr	r2, [r2, #8]
 8014146:	4413      	add	r3, r2
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	6839      	ldr	r1, [r7, #0]
 801414c:	4798      	blx	r3
    }
 801414e:	bf00      	nop
 8014150:	3708      	adds	r7, #8
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}

08014156 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8014156:	b480      	push	{r7}
 8014158:	b083      	sub	sp, #12
 801415a:	af00      	add	r7, sp, #0
 801415c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	685b      	ldr	r3, [r3, #4]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d010      	beq.n	8014188 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	689b      	ldr	r3, [r3, #8]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d107      	bne.n	801417e <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	68db      	ldr	r3, [r3, #12]
 8014172:	f003 0301 	and.w	r3, r3, #1
 8014176:	2b00      	cmp	r3, #0
 8014178:	d101      	bne.n	801417e <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801417a:	2301      	movs	r3, #1
 801417c:	e000      	b.n	8014180 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801417e:	2300      	movs	r3, #0
 8014180:	2b01      	cmp	r3, #1
 8014182:	d001      	beq.n	8014188 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8014184:	2301      	movs	r3, #1
 8014186:	e000      	b.n	801418a <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8014188:	2300      	movs	r3, #0
    }
 801418a:	4618      	mov	r0, r3
 801418c:	370c      	adds	r7, #12
 801418e:	46bd      	mov	sp, r7
 8014190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014194:	4770      	bx	lr

08014196 <_ZN8touchgfx9DraggableINS_3BoxEE15handleDragEventERKNS_9DragEventE>:
     * Called when dragging the Draggable object. The object is moved according to the drag
     * event.
     *
     * @param  evt The drag event.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 8014196:	b5b0      	push	{r4, r5, r7, lr}
 8014198:	b082      	sub	sp, #8
 801419a:	af00      	add	r7, sp, #0
 801419c:	6078      	str	r0, [r7, #4]
 801419e:	6039      	str	r1, [r7, #0]
    {
        T::handleDragEvent(evt);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6839      	ldr	r1, [r7, #0]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f7fb fcaa 	bl	800fafe <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>
        T::moveRelative(evt.getDeltaX(), evt.getDeltaY());
 80141aa:	687c      	ldr	r4, [r7, #4]
 80141ac:	6838      	ldr	r0, [r7, #0]
 80141ae:	f7ff f9cc 	bl	801354a <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 80141b2:	4603      	mov	r3, r0
 80141b4:	461d      	mov	r5, r3
 80141b6:	6838      	ldr	r0, [r7, #0]
 80141b8:	f7ff f9dc 	bl	8013574 <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 80141bc:	4603      	mov	r3, r0
 80141be:	461a      	mov	r2, r3
 80141c0:	4629      	mov	r1, r5
 80141c2:	4620      	mov	r0, r4
 80141c4:	f007 fcc4 	bl	801bb50 <_ZN8touchgfx8Drawable12moveRelativeEss>
    }
 80141c8:	bf00      	nop
 80141ca:	3708      	adds	r7, #8
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bdb0      	pop	{r4, r5, r7, pc}

080141d0 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv>:
        }
    }

protected:
    /** The tick handler that handles the actual animation steps. */
    virtual void handleTickEvent()
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b082      	sub	sp, #8
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
    {
        T::handleTickEvent();
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fb fc9a 	bl	800fb14 <_ZN8touchgfx8Drawable15handleTickEventEv>

        nextMoveAnimationStep();
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f000 f821 	bl	8014228 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>
    }
 80141e6:	bf00      	nop
 80141e8:	3708      	adds	r7, #8
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}

080141ee <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 80141ee:	b480      	push	{r7}
 80141f0:	b083      	sub	sp, #12
 80141f2:	af00      	add	r7, sp, #0
 80141f4:	6078      	str	r0, [r7, #4]
 80141f6:	460b      	mov	r3, r1
 80141f8:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	887a      	ldrh	r2, [r7, #2]
 80141fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
 8014202:	bf00      	nop
 8014204:	370c      	adds	r7, #12
 8014206:	46bd      	mov	sp, r7
 8014208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420c:	4770      	bx	lr

0801420e <_ZNK8touchgfx12MoveAnimatorINS_6CircleEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 801420e:	b480      	push	{r7}
 8014210:	b083      	sub	sp, #12
 8014212:	af00      	add	r7, sp, #0
 8014214:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    }
 801421c:	4618      	mov	r0, r3
 801421e:	370c      	adds	r7, #12
 8014220:	46bd      	mov	sp, r7
 8014222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014226:	4770      	bx	lr

08014228 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>:

    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 8014228:	b590      	push	{r4, r7, lr}
 801422a:	b085      	sub	sp, #20
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8014236:	2b00      	cmp	r3, #0
 8014238:	f000 80ad 	beq.w	8014396 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
        {
            if (moveAnimationCounter < moveAnimationDelay)
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8014248:	429a      	cmp	r2, r3
 801424a:	d208      	bcs.n	801425e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x36>
            {
                // Just wait for the delay time to pass
                moveAnimationCounter++;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8014252:	3301      	adds	r3, #1
 8014254:	b29a      	uxth	r2, r3
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                        moveAnimationEndedCallback->execute(*this);
                    }
                }
            }
        }
    }
 801425c:	e09b      	b.n	8014396 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8014264:	461a      	mov	r2, r3
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801426c:	4619      	mov	r1, r3
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014274:	440b      	add	r3, r1
 8014276:	429a      	cmp	r2, r3
 8014278:	d850      	bhi.n	801431c <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0xf4>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8014280:	461a      	mov	r2, r3
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8014288:	1ad3      	subs	r3, r2, r3
 801428a:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	b298      	uxth	r0, r3
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801429a:	b29a      	uxth	r2, r3
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80142a2:	b29b      	uxth	r3, r3
 80142a4:	1ad3      	subs	r3, r2, r3
 80142a6:	b29b      	uxth	r3, r3
 80142a8:	b21a      	sxth	r2, r3
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80142b0:	2100      	movs	r1, #0
 80142b2:	47a0      	blx	r4
 80142b4:	4603      	mov	r3, r0
 80142b6:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	b298      	uxth	r0, r3
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 80142c6:	b29a      	uxth	r2, r3
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	1ad3      	subs	r3, r2, r3
 80142d2:	b29b      	uxth	r3, r3
 80142d4:	b21a      	sxth	r2, r3
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80142dc:	2100      	movs	r1, #0
 80142de:	47a0      	blx	r4
 80142e0:	4603      	mov	r3, r0
 80142e2:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80142ec:	b29a      	uxth	r2, r3
 80142ee:	897b      	ldrh	r3, [r7, #10]
 80142f0:	4413      	add	r3, r2
 80142f2:	b29b      	uxth	r3, r3
 80142f4:	b219      	sxth	r1, r3
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80142fc:	b29a      	uxth	r2, r3
 80142fe:	893b      	ldrh	r3, [r7, #8]
 8014300:	4413      	add	r3, r2
 8014302:	b29b      	uxth	r3, r3
 8014304:	b21b      	sxth	r3, r3
 8014306:	461a      	mov	r2, r3
 8014308:	f7fb fc28 	bl	800fb5c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8014312:	3301      	adds	r3, #1
 8014314:	b29a      	uxth	r2, r3
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8014322:	461a      	mov	r2, r3
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801432a:	4619      	mov	r1, r3
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014332:	440b      	add	r3, r1
 8014334:	429a      	cmp	r2, r3
 8014336:	d92e      	bls.n	8014396 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                    moveAnimationRunning = false;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2200      	movs	r2, #0
 801433c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                    moveAnimationCounter = 0;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2200      	movs	r2, #0
 8014344:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                    Application::getInstance()->unregisterTimerWidget(this);
 8014348:	f006 ffb0 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 801434c:	4602      	mov	r2, r0
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	4619      	mov	r1, r3
 8014352:	4610      	mov	r0, r2
 8014354:	f006 ffb0 	bl	801b2b8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801435c:	2b00      	cmp	r3, #0
 801435e:	d00d      	beq.n	801437c <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	330c      	adds	r3, #12
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	4610      	mov	r0, r2
 8014370:	4798      	blx	r3
 8014372:	4603      	mov	r3, r0
 8014374:	2b00      	cmp	r3, #0
 8014376:	d001      	beq.n	801437c <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 8014378:	2301      	movs	r3, #1
 801437a:	e000      	b.n	801437e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x156>
 801437c:	2300      	movs	r3, #0
 801437e:	2b00      	cmp	r3, #0
 8014380:	d009      	beq.n	8014396 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                        moveAnimationEndedCallback->execute(*this);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	3308      	adds	r3, #8
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	6879      	ldr	r1, [r7, #4]
 8014392:	4610      	mov	r0, r2
 8014394:	4798      	blx	r3
    }
 8014396:	bf00      	nop
 8014398:	3714      	adds	r7, #20
 801439a:	46bd      	mov	sp, r7
 801439c:	bd90      	pop	{r4, r7, pc}
	...

080143a0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b082      	sub	sp, #8
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	4a05      	ldr	r2, [pc, #20]	; (80143c0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	601a      	str	r2, [r3, #0]
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7fd fde5 	bl	8011f80 <_ZN8touchgfx6ScreenD1Ev>
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	4618      	mov	r0, r3
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	08029b10 	.word	0x08029b10

080143c4 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f7ff ffe7 	bl	80143a0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80143d2:	2140      	movs	r1, #64	; 0x40
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f013 f8bd 	bl	8027554 <_ZdlPvj>
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	4618      	mov	r0, r3
 80143de:	3708      	adds	r7, #8
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}

080143e4 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b082      	sub	sp, #8
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
 80143ec:	4a13      	ldr	r2, [pc, #76]	; (801443c <_ZN14screenViewBaseD1Ev+0x58>)
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	601a      	str	r2, [r3, #0]
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80143f8:	4618      	mov	r0, r3
 80143fa:	f000 fa1d 	bl	8014838 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014404:	4618      	mov	r0, r3
 8014406:	f7fe fa8b 	bl	8012920 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	33b8      	adds	r3, #184	; 0xb8
 801440e:	4618      	mov	r0, r3
 8014410:	f7fe fa86 	bl	8012920 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	3370      	adds	r3, #112	; 0x70
 8014418:	4618      	mov	r0, r3
 801441a:	f7fe fa81 	bl	8012920 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	3340      	adds	r3, #64	; 0x40
 8014422:	4618      	mov	r0, r3
 8014424:	f7fe fa38 	bl	8012898 <_ZN8touchgfx3BoxD1Ev>
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	4618      	mov	r0, r3
 801442c:	f7ff ffb8 	bl	80143a0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	4618      	mov	r0, r3
 8014434:	3708      	adds	r7, #8
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
 801443a:	bf00      	nop
 801443c:	08029ac4 	.word	0x08029ac4

08014440 <_ZN14screenViewBaseD0Ev>:
 8014440:	b580      	push	{r7, lr}
 8014442:	b082      	sub	sp, #8
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7ff ffcb 	bl	80143e4 <_ZN14screenViewBaseD1Ev>
 801444e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	f013 f87e 	bl	8027554 <_ZdlPvj>
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	4618      	mov	r0, r3
 801445c:	3708      	adds	r7, #8
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}

08014462 <_ZN14screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8014462:	b580      	push	{r7, lr}
 8014464:	b082      	sub	sp, #8
 8014466:	af00      	add	r7, sp, #0
 8014468:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801446a:	f006 ff1f 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 801446e:	4603      	mov	r3, r0
    }
 8014470:	4618      	mov	r0, r3
 8014472:	3708      	adds	r7, #8
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase() :
 8014478:	b590      	push	{r4, r7, lr}
 801447a:	b093      	sub	sp, #76	; 0x4c
 801447c:	af02      	add	r7, sp, #8
 801447e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	4618      	mov	r0, r3
 8014484:	f000 f9a2 	bl	80147cc <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8014488:	4ab1      	ldr	r2, [pc, #708]	; (8014750 <_ZN14screenViewBaseC1Ev+0x2d8>)
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	601a      	str	r2, [r3, #0]
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	3340      	adds	r3, #64	; 0x40
 8014492:	4618      	mov	r0, r3
 8014494:	f7fd fe0c 	bl	80120b0 <_ZN8touchgfx3BoxC1Ev>
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	3370      	adds	r3, #112	; 0x70
 801449c:	4618      	mov	r0, r3
 801449e:	f005 fe51 	bl	801a144 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	33b8      	adds	r3, #184	; 0xb8
 80144a6:	4618      	mov	r0, r3
 80144a8:	f005 fe4c 	bl	801a144 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80144b2:	4618      	mov	r0, r3
 80144b4:	f005 fe46 	bl	801a144 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 80144be:	4ba5      	ldr	r3, [pc, #660]	; (8014754 <_ZN14screenViewBaseC1Ev+0x2dc>)
 80144c0:	60bb      	str	r3, [r7, #8]
 80144c2:	2300      	movs	r3, #0
 80144c4:	60fb      	str	r3, [r7, #12]
 80144c6:	f107 0308 	add.w	r3, r7, #8
 80144ca:	cb0c      	ldmia	r3, {r2, r3}
 80144cc:	6879      	ldr	r1, [r7, #4]
 80144ce:	f000 f993 	bl	80147f8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80144d8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80144dc:	9300      	str	r3, [sp, #0]
 80144de:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80144e2:	2200      	movs	r2, #0
 80144e4:	2100      	movs	r1, #0
 80144e6:	f7fb fa49 	bl	800f97c <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80144f0:	22ff      	movs	r2, #255	; 0xff
 80144f2:	21ff      	movs	r1, #255	; 0xff
 80144f4:	20ff      	movs	r0, #255	; 0xff
 80144f6:	f7fd ff7b 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80144fa:	4603      	mov	r3, r0
 80144fc:	4619      	mov	r1, r3
 80144fe:	4620      	mov	r0, r4
 8014500:	f7fd fdfe 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(155, 18);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	3370      	adds	r3, #112	; 0x70
 8014508:	2212      	movs	r2, #18
 801450a:	219b      	movs	r1, #155	; 0x9b
 801450c:	4618      	mov	r0, r3
 801450e:	f7fb fa9a 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014518:	f107 0310 	add.w	r3, r7, #16
 801451c:	2100      	movs	r1, #0
 801451e:	4618      	mov	r0, r3
 8014520:	f7fd fd1e 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8014524:	f107 0314 	add.w	r3, r7, #20
 8014528:	2101      	movs	r1, #1
 801452a:	4618      	mov	r0, r3
 801452c:	f7fd fd18 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 8014530:	f107 0214 	add.w	r2, r7, #20
 8014534:	f107 0310 	add.w	r3, r7, #16
 8014538:	4619      	mov	r1, r3
 801453a:	4620      	mov	r0, r4
 801453c:	f005 fabe 	bl	8019abc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID1));
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014546:	f107 0318 	add.w	r3, r7, #24
 801454a:	2100      	movs	r1, #0
 801454c:	4618      	mov	r0, r3
 801454e:	f7fd fde5 	bl	801211c <_ZN8touchgfx9TypedTextC1Et>
 8014552:	f107 0318 	add.w	r3, r7, #24
 8014556:	4619      	mov	r1, r3
 8014558:	4620      	mov	r0, r4
 801455a:	f7fd fe05 	bl	8012168 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 801455e:	f107 0318 	add.w	r3, r7, #24
 8014562:	4618      	mov	r0, r3
 8014564:	f7fa feae 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801456e:	22ff      	movs	r2, #255	; 0xff
 8014570:	21ff      	movs	r1, #255	; 0xff
 8014572:	20ff      	movs	r0, #255	; 0xff
 8014574:	f7fd ff3c 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014578:	4603      	mov	r3, r0
 801457a:	4619      	mov	r1, r3
 801457c:	4620      	mov	r0, r4
 801457e:	f7fd fe05 	bl	801218c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014588:	22ff      	movs	r2, #255	; 0xff
 801458a:	21ff      	movs	r1, #255	; 0xff
 801458c:	20ff      	movs	r0, #255	; 0xff
 801458e:	f7fd ff2f 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014592:	4603      	mov	r3, r0
 8014594:	4619      	mov	r1, r3
 8014596:	4620      	mov	r0, r4
 8014598:	f7fd fe06 	bl	80121a8 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80145a8:	4619      	mov	r1, r3
 80145aa:	4610      	mov	r0, r2
 80145ac:	f7fd fd4f 	bl	801204e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel2.setXY(155, 106);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	33b8      	adds	r3, #184	; 0xb8
 80145b4:	226a      	movs	r2, #106	; 0x6a
 80145b6:	219b      	movs	r1, #155	; 0x9b
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7fb fa44 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80145c4:	f107 0320 	add.w	r3, r7, #32
 80145c8:	2100      	movs	r1, #0
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7fd fcc8 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 80145d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80145d4:	2101      	movs	r1, #1
 80145d6:	4618      	mov	r0, r3
 80145d8:	f7fd fcc2 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 80145dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80145e0:	f107 0320 	add.w	r3, r7, #32
 80145e4:	4619      	mov	r1, r3
 80145e6:	4620      	mov	r0, r4
 80145e8:	f005 fa68 	bl	8019abc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80145f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80145f6:	2101      	movs	r1, #1
 80145f8:	4618      	mov	r0, r3
 80145fa:	f7fd fd8f 	bl	801211c <_ZN8touchgfx9TypedTextC1Et>
 80145fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014602:	4619      	mov	r1, r3
 8014604:	4620      	mov	r0, r4
 8014606:	f7fd fdaf 	bl	8012168 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 801460a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801460e:	4618      	mov	r0, r3
 8014610:	f7fa fe58 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 801461a:	22ff      	movs	r2, #255	; 0xff
 801461c:	21ff      	movs	r1, #255	; 0xff
 801461e:	20ff      	movs	r0, #255	; 0xff
 8014620:	f7fd fee6 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014624:	4603      	mov	r3, r0
 8014626:	4619      	mov	r1, r3
 8014628:	4620      	mov	r0, r4
 801462a:	f7fd fdaf 	bl	801218c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8014634:	22ff      	movs	r2, #255	; 0xff
 8014636:	21ff      	movs	r1, #255	; 0xff
 8014638:	20ff      	movs	r0, #255	; 0xff
 801463a:	f7fd fed9 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801463e:	4603      	mov	r3, r0
 8014640:	4619      	mov	r1, r3
 8014642:	4620      	mov	r0, r4
 8014644:	f7fd fdb0 	bl	80121a8 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel2.setAction(buttonCallback);
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8014654:	4619      	mov	r1, r3
 8014656:	4610      	mov	r0, r2
 8014658:	f7fd fcf9 	bl	801204e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel3.setXY(155, 197);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014662:	22c5      	movs	r2, #197	; 0xc5
 8014664:	219b      	movs	r1, #155	; 0x9b
 8014666:	4618      	mov	r0, r3
 8014668:	f7fb f9ed 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8014672:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014676:	2100      	movs	r1, #0
 8014678:	4618      	mov	r0, r3
 801467a:	f7fd fc71 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 801467e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014682:	2101      	movs	r1, #1
 8014684:	4618      	mov	r0, r3
 8014686:	f7fd fc6b 	bl	8011f60 <_ZN8touchgfx6BitmapC1Et>
 801468a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801468e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014692:	4619      	mov	r1, r3
 8014694:	4620      	mov	r0, r4
 8014696:	f005 fa11 	bl	8019abc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel3.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80146a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80146a4:	2102      	movs	r1, #2
 80146a6:	4618      	mov	r0, r3
 80146a8:	f7fd fd38 	bl	801211c <_ZN8touchgfx9TypedTextC1Et>
 80146ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80146b0:	4619      	mov	r1, r3
 80146b2:	4620      	mov	r0, r4
 80146b4:	f7fd fd58 	bl	8012168 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80146b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80146bc:	4618      	mov	r0, r3
 80146be:	f7fa fe01 	bl	800f2c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel3.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80146c8:	22ff      	movs	r2, #255	; 0xff
 80146ca:	21ff      	movs	r1, #255	; 0xff
 80146cc:	20ff      	movs	r0, #255	; 0xff
 80146ce:	f7fd fe8f 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80146d2:	4603      	mov	r3, r0
 80146d4:	4619      	mov	r1, r3
 80146d6:	4620      	mov	r0, r4
 80146d8:	f7fd fd58 	bl	801218c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel3.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80146e2:	22ff      	movs	r2, #255	; 0xff
 80146e4:	21ff      	movs	r1, #255	; 0xff
 80146e6:	20ff      	movs	r0, #255	; 0xff
 80146e8:	f7fd fe82 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80146ec:	4603      	mov	r3, r0
 80146ee:	4619      	mov	r1, r3
 80146f0:	4620      	mov	r0, r4
 80146f2:	f7fd fd59 	bl	80121a8 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel3.setAction(buttonCallback);
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8014702:	4619      	mov	r1, r3
 8014704:	4610      	mov	r0, r2
 8014706:	f7fd fca2 	bl	801204e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 801470a:	687a      	ldr	r2, [r7, #4]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	3340      	adds	r3, #64	; 0x40
 8014710:	4619      	mov	r1, r3
 8014712:	4610      	mov	r0, r2
 8014714:	f7fd fc8c 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8014718:	687a      	ldr	r2, [r7, #4]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	3370      	adds	r3, #112	; 0x70
 801471e:	4619      	mov	r1, r3
 8014720:	4610      	mov	r0, r2
 8014722:	f7fd fc85 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel2);
 8014726:	687a      	ldr	r2, [r7, #4]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	33b8      	adds	r3, #184	; 0xb8
 801472c:	4619      	mov	r1, r3
 801472e:	4610      	mov	r0, r2
 8014730:	f7fd fc7e 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel3);
 8014734:	687a      	ldr	r2, [r7, #4]
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801473c:	4619      	mov	r1, r3
 801473e:	4610      	mov	r0, r2
 8014740:	f7fd fc76 	bl	8012030 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	4618      	mov	r0, r3
 8014748:	3744      	adds	r7, #68	; 0x44
 801474a:	46bd      	mov	sp, r7
 801474c:	bd90      	pop	{r4, r7, pc}
 801474e:	bf00      	nop
 8014750:	08029ac4 	.word	0x08029ac4
 8014754:	0801476d 	.word	0x0801476d

08014758 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8014758:	b480      	push	{r7}
 801475a:	b083      	sub	sp, #12
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]

}
 8014760:	bf00      	nop
 8014762:	370c      	adds	r7, #12
 8014764:	46bd      	mov	sp, r7
 8014766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476a:	4770      	bx	lr

0801476c <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b082      	sub	sp, #8
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
 8014774:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	3370      	adds	r3, #112	; 0x70
 801477a:	683a      	ldr	r2, [r7, #0]
 801477c:	429a      	cmp	r2, r3
 801477e:	d107      	bne.n	8014790 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Pong
        //Go to Pong with screen transition towards East
        application().gotoPongScreenCoverTransitionEast();
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f7ff fe6e 	bl	8014462 <_ZN14screenViewBase11applicationEv>
 8014786:	4603      	mov	r3, r0
 8014788:	4618      	mov	r0, r3
 801478a:	f7fb fd1d 	bl	80101c8 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>
        //Interaction3
        //When buttonWithLabel3 clicked change screen to Dino
        //Go to Dino with no screen transition
        application().gotoDinoScreenNoTransition();
    }
}
 801478e:	e019      	b.n	80147c4 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel2)
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	33b8      	adds	r3, #184	; 0xb8
 8014794:	683a      	ldr	r2, [r7, #0]
 8014796:	429a      	cmp	r2, r3
 8014798:	d107      	bne.n	80147aa <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        application().gotoMusicScreenNoTransition();
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f7ff fe61 	bl	8014462 <_ZN14screenViewBase11applicationEv>
 80147a0:	4603      	mov	r3, r0
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7fb fc84 	bl	80100b0 <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv>
}
 80147a8:	e00c      	b.n	80147c4 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel3)
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80147b0:	683a      	ldr	r2, [r7, #0]
 80147b2:	429a      	cmp	r2, r3
 80147b4:	d106      	bne.n	80147c4 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotoDinoScreenNoTransition();
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f7ff fe53 	bl	8014462 <_ZN14screenViewBase11applicationEv>
 80147bc:	4603      	mov	r3, r0
 80147be:	4618      	mov	r0, r3
 80147c0:	f7fb fcbc 	bl	801013c <_ZN23FrontendApplicationBase26gotoDinoScreenNoTransitionEv>
}
 80147c4:	bf00      	nop
 80147c6:	3708      	adds	r7, #8
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}

080147cc <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b082      	sub	sp, #8
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	4618      	mov	r0, r3
 80147d8:	f007 fd1e 	bl	801c218 <_ZN8touchgfx6ScreenC1Ev>
 80147dc:	4a05      	ldr	r2, [pc, #20]	; (80147f4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	601a      	str	r2, [r3, #0]
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	2200      	movs	r2, #0
 80147e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	4618      	mov	r0, r3
 80147ec:	3708      	adds	r7, #8
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	08029b10 	.word	0x08029b10

080147f8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b084      	sub	sp, #16
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	60f8      	str	r0, [r7, #12]
 8014800:	60b9      	str	r1, [r7, #8]
 8014802:	4639      	mov	r1, r7
 8014804:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	4618      	mov	r0, r3
 801480c:	f7fd ffb0 	bl	8012770 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8014810:	4a08      	ldr	r2, [pc, #32]	; (8014834 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	68ba      	ldr	r2, [r7, #8]
 801481a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	3308      	adds	r3, #8
 8014820:	463a      	mov	r2, r7
 8014822:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014826:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	4618      	mov	r0, r3
 801482e:	3710      	adds	r7, #16
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}
 8014834:	08029af8 	.word	0x08029af8

08014838 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8014838:	b580      	push	{r7, lr}
 801483a:	b082      	sub	sp, #8
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
 8014840:	4a05      	ldr	r2, [pc, #20]	; (8014858 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	601a      	str	r2, [r3, #0]
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	4618      	mov	r0, r3
 801484a:	f7fd ffc1 	bl	80127d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	4618      	mov	r0, r3
 8014852:	3708      	adds	r7, #8
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}
 8014858:	08029af8 	.word	0x08029af8

0801485c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801485c:	b580      	push	{r7, lr}
 801485e:	b082      	sub	sp, #8
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	6878      	ldr	r0, [r7, #4]
 8014866:	f7ff ffe7 	bl	8014838 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801486a:	2110      	movs	r1, #16
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f012 fe71 	bl	8027554 <_ZdlPvj>
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	4618      	mov	r0, r3
 8014876:	3708      	adds	r7, #8
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	685b      	ldr	r3, [r3, #4]
 801488a:	687a      	ldr	r2, [r7, #4]
 801488c:	68d2      	ldr	r2, [r2, #12]
 801488e:	1052      	asrs	r2, r2, #1
 8014890:	1898      	adds	r0, r3, r2
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	68db      	ldr	r3, [r3, #12]
 8014896:	f003 0301 	and.w	r3, r3, #1
 801489a:	2b00      	cmp	r3, #0
 801489c:	d102      	bne.n	80148a4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	689b      	ldr	r3, [r3, #8]
 80148a2:	e00a      	b.n	80148ba <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	685b      	ldr	r3, [r3, #4]
 80148a8:	687a      	ldr	r2, [r7, #4]
 80148aa:	68d2      	ldr	r2, [r2, #12]
 80148ac:	1052      	asrs	r2, r2, #1
 80148ae:	4413      	add	r3, r2
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	687a      	ldr	r2, [r7, #4]
 80148b4:	6892      	ldr	r2, [r2, #8]
 80148b6:	4413      	add	r3, r2
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	6839      	ldr	r1, [r7, #0]
 80148bc:	4798      	blx	r3
    }
 80148be:	bf00      	nop
 80148c0:	3708      	adds	r7, #8
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}

080148c6 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80148c6:	b480      	push	{r7}
 80148c8:	b083      	sub	sp, #12
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	685b      	ldr	r3, [r3, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d010      	beq.n	80148f8 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	689b      	ldr	r3, [r3, #8]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d107      	bne.n	80148ee <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	68db      	ldr	r3, [r3, #12]
 80148e2:	f003 0301 	and.w	r3, r3, #1
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d101      	bne.n	80148ee <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80148ea:	2301      	movs	r3, #1
 80148ec:	e000      	b.n	80148f0 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80148ee:	2300      	movs	r3, #0
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d001      	beq.n	80148f8 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80148f4:	2301      	movs	r3, #1
 80148f6:	e000      	b.n	80148fa <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80148f8:	2300      	movs	r3, #0
    }
 80148fa:	4618      	mov	r0, r3
 80148fc:	370c      	adds	r7, #12
 80148fe:	46bd      	mov	sp, r7
 8014900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014904:	4770      	bx	lr
	...

08014908 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8014908:	b480      	push	{r7}
 801490a:	af00      	add	r7, sp, #0
    return bitmap_database;
 801490c:	4b02      	ldr	r3, [pc, #8]	; (8014918 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801490e:	4618      	mov	r0, r3
 8014910:	46bd      	mov	sp, r7
 8014912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014916:	4770      	bx	lr
 8014918:	08029b3c 	.word	0x08029b3c

0801491c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801491c:	b480      	push	{r7}
 801491e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8014920:	230c      	movs	r3, #12
}
 8014922:	4618      	mov	r0, r3
 8014924:	46bd      	mov	sp, r7
 8014926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492a:	4770      	bx	lr

0801492c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 801492c:	b480      	push	{r7}
 801492e:	b085      	sub	sp, #20
 8014930:	af00      	add	r7, sp, #0
 8014932:	60f8      	str	r0, [r7, #12]
 8014934:	460b      	mov	r3, r1
 8014936:	607a      	str	r2, [r7, #4]
 8014938:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 801493a:	2300      	movs	r3, #0
    }
 801493c:	4618      	mov	r0, r3
 801493e:	3714      	adds	r7, #20
 8014940:	46bd      	mov	sp, r7
 8014942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014946:	4770      	bx	lr

08014948 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8014948:	b480      	push	{r7}
 801494a:	b083      	sub	sp, #12
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8014950:	2300      	movs	r3, #0
    }
 8014952:	4618      	mov	r0, r3
 8014954:	370c      	adds	r7, #12
 8014956:	46bd      	mov	sp, r7
 8014958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495c:	4770      	bx	lr
	...

08014960 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8014960:	b480      	push	{r7}
 8014962:	b085      	sub	sp, #20
 8014964:	af00      	add	r7, sp, #0
 8014966:	60f8      	str	r0, [r7, #12]
 8014968:	60b9      	str	r1, [r7, #8]
 801496a:	4613      	mov	r3, r2
 801496c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801496e:	4a07      	ldr	r2, [pc, #28]	; (801498c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	6013      	str	r3, [r2, #0]
        fonts = f;
 8014974:	4a06      	ldr	r2, [pc, #24]	; (8014990 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801497a:	4a06      	ldr	r2, [pc, #24]	; (8014994 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 801497c:	88fb      	ldrh	r3, [r7, #6]
 801497e:	8013      	strh	r3, [r2, #0]
    }
 8014980:	bf00      	nop
 8014982:	3714      	adds	r7, #20
 8014984:	46bd      	mov	sp, r7
 8014986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498a:	4770      	bx	lr
 801498c:	2000b3a4 	.word	0x2000b3a4
 8014990:	2000b3ac 	.word	0x2000b3ac
 8014994:	2000b3a8 	.word	0x2000b3a8

08014998 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8014998:	b40e      	push	{r1, r2, r3}
 801499a:	b580      	push	{r7, lr}
 801499c:	b085      	sub	sp, #20
 801499e:	af00      	add	r7, sp, #0
 80149a0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80149a2:	f107 0320 	add.w	r3, r7, #32
 80149a6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	69fa      	ldr	r2, [r7, #28]
 80149ac:	2100      	movs	r1, #0
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f006 ff94 	bl	801b8dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80149b4:	4603      	mov	r3, r0
 80149b6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80149b8:	89fb      	ldrh	r3, [r7, #14]
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3714      	adds	r7, #20
 80149be:	46bd      	mov	sp, r7
 80149c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80149c4:	b003      	add	sp, #12
 80149c6:	4770      	bx	lr

080149c8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80149c8:	b40c      	push	{r2, r3}
 80149ca:	b580      	push	{r7, lr}
 80149cc:	b084      	sub	sp, #16
 80149ce:	af00      	add	r7, sp, #0
 80149d0:	6078      	str	r0, [r7, #4]
 80149d2:	460b      	mov	r3, r1
 80149d4:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80149d6:	f107 031c 	add.w	r3, r7, #28
 80149da:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80149dc:	78f9      	ldrb	r1, [r7, #3]
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	69ba      	ldr	r2, [r7, #24]
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f006 ff7a 	bl	801b8dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80149e8:	4603      	mov	r3, r0
 80149ea:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80149ec:	89fb      	ldrh	r3, [r7, #14]
}
 80149ee:	4618      	mov	r0, r3
 80149f0:	3710      	adds	r7, #16
 80149f2:	46bd      	mov	sp, r7
 80149f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80149f8:	b002      	add	sp, #8
 80149fa:	4770      	bx	lr

080149fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b08a      	sub	sp, #40	; 0x28
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	460b      	mov	r3, r1
 8014a06:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d016      	beq.n	8014a3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	331a      	adds	r3, #26
 8014a14:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8014a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a18:	8adb      	ldrh	r3, [r3, #22]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d105      	bne.n	8014a2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8014a1e:	4b42      	ldr	r3, [pc, #264]	; (8014b28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 8014a20:	4a42      	ldr	r2, [pc, #264]	; (8014b2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8014a22:	21c0      	movs	r1, #192	; 0xc0
 8014a24:	4842      	ldr	r0, [pc, #264]	; (8014b30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014a26:	f012 fdc1 	bl	80275ac <__assert_func>
            return buffer[pos];
 8014a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2c:	8a9b      	ldrh	r3, [r3, #20]
 8014a2e:	461a      	mov	r2, r3
 8014a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d001      	beq.n	8014a3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	e000      	b.n	8014a40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8014a3e:	2300      	movs	r3, #0
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d068      	beq.n	8014b16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f008 faeb 	bl	801d020 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	331a      	adds	r3, #26
 8014a4e:	623b      	str	r3, [r7, #32]
 8014a50:	2301      	movs	r3, #1
 8014a52:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8014a54:	6a3b      	ldr	r3, [r7, #32]
 8014a56:	8adb      	ldrh	r3, [r3, #22]
 8014a58:	8bfa      	ldrh	r2, [r7, #30]
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	d305      	bcc.n	8014a6a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8014a5e:	4b35      	ldr	r3, [pc, #212]	; (8014b34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014a60:	4a35      	ldr	r2, [pc, #212]	; (8014b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8014a62:	21c5      	movs	r1, #197	; 0xc5
 8014a64:	4832      	ldr	r0, [pc, #200]	; (8014b30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014a66:	f012 fda1 	bl	80275ac <__assert_func>
            const uint16_t index = pos + offset;
 8014a6a:	6a3b      	ldr	r3, [r7, #32]
 8014a6c:	8a9a      	ldrh	r2, [r3, #20]
 8014a6e:	8bfb      	ldrh	r3, [r7, #30]
 8014a70:	4413      	add	r3, r2
 8014a72:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8014a74:	8bbb      	ldrh	r3, [r7, #28]
 8014a76:	2b09      	cmp	r3, #9
 8014a78:	d801      	bhi.n	8014a7e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8014a7a:	8bbb      	ldrh	r3, [r7, #28]
 8014a7c:	e001      	b.n	8014a82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8014a7e:	8bbb      	ldrh	r3, [r7, #28]
 8014a80:	3b0a      	subs	r3, #10
 8014a82:	6a3a      	ldr	r2, [r7, #32]
 8014a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a88:	f640 123f 	movw	r2, #2367	; 0x93f
 8014a8c:	4293      	cmp	r3, r2
 8014a8e:	bf0c      	ite	eq
 8014a90:	2301      	moveq	r3, #1
 8014a92:	2300      	movne	r3, #0
 8014a94:	b2db      	uxtb	r3, r3
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d03d      	beq.n	8014b16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	331a      	adds	r3, #26
 8014a9e:	687a      	ldr	r2, [r7, #4]
 8014aa0:	321a      	adds	r2, #26
 8014aa2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8014aa4:	68ba      	ldr	r2, [r7, #8]
 8014aa6:	8ad2      	ldrh	r2, [r2, #22]
 8014aa8:	2a00      	cmp	r2, #0
 8014aaa:	d105      	bne.n	8014ab8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8014aac:	4b1e      	ldr	r3, [pc, #120]	; (8014b28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 8014aae:	4a1f      	ldr	r2, [pc, #124]	; (8014b2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8014ab0:	21c0      	movs	r1, #192	; 0xc0
 8014ab2:	481f      	ldr	r0, [pc, #124]	; (8014b30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014ab4:	f012 fd7a 	bl	80275ac <__assert_func>
            return buffer[pos];
 8014ab8:	68ba      	ldr	r2, [r7, #8]
 8014aba:	8a92      	ldrh	r2, [r2, #20]
 8014abc:	4611      	mov	r1, r2
 8014abe:	68ba      	ldr	r2, [r7, #8]
 8014ac0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8014ac4:	613b      	str	r3, [r7, #16]
 8014ac6:	4613      	mov	r3, r2
 8014ac8:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8014aca:	693b      	ldr	r3, [r7, #16]
 8014acc:	8adb      	ldrh	r3, [r3, #22]
 8014ace:	2b01      	cmp	r3, #1
 8014ad0:	d806      	bhi.n	8014ae0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8014ad2:	4b1a      	ldr	r3, [pc, #104]	; (8014b3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8014ad4:	4a1a      	ldr	r2, [pc, #104]	; (8014b40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8014ad6:	f240 110d 	movw	r1, #269	; 0x10d
 8014ada:	4815      	ldr	r0, [pc, #84]	; (8014b30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014adc:	f012 fd66 	bl	80275ac <__assert_func>
            const uint16_t index = pos + 1;
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	8a9b      	ldrh	r3, [r3, #20]
 8014ae4:	3301      	adds	r3, #1
 8014ae6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8014ae8:	89bb      	ldrh	r3, [r7, #12]
 8014aea:	2b09      	cmp	r3, #9
 8014aec:	d801      	bhi.n	8014af2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8014aee:	89bb      	ldrh	r3, [r7, #12]
 8014af0:	e000      	b.n	8014af4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8014af2:	2300      	movs	r3, #0
 8014af4:	693a      	ldr	r2, [r7, #16]
 8014af6:	89f9      	ldrh	r1, [r7, #14]
 8014af8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	331a      	adds	r3, #26
 8014b00:	61bb      	str	r3, [r7, #24]
 8014b02:	f640 133f 	movw	r3, #2367	; 0x93f
 8014b06:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8014b08:	69bb      	ldr	r3, [r7, #24]
 8014b0a:	8a9b      	ldrh	r3, [r3, #20]
 8014b0c:	4619      	mov	r1, r3
 8014b0e:	69bb      	ldr	r3, [r7, #24]
 8014b10:	8afa      	ldrh	r2, [r7, #22]
 8014b12:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f008 f966 	bl	801cde8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014b1c:	4603      	mov	r3, r0
}
 8014b1e:	4618      	mov	r0, r3
 8014b20:	3728      	adds	r7, #40	; 0x28
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}
 8014b26:	bf00      	nop
 8014b28:	08028bd0 	.word	0x08028bd0
 8014b2c:	08029d50 	.word	0x08029d50
 8014b30:	08028bdc 	.word	0x08028bdc
 8014b34:	08028c24 	.word	0x08028c24
 8014b38:	08029c7c 	.word	0x08029c7c
 8014b3c:	08028c34 	.word	0x08028c34
 8014b40:	08029dfc 	.word	0x08029dfc

08014b44 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f008 f905 	bl	801cd5c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8014b52:	bf00      	nop
 8014b54:	3708      	adds	r7, #8
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}

08014b5a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8014b5a:	b580      	push	{r7, lr}
 8014b5c:	b088      	sub	sp, #32
 8014b5e:	af02      	add	r7, sp, #8
 8014b60:	60f8      	str	r0, [r7, #12]
 8014b62:	1d38      	adds	r0, r7, #4
 8014b64:	e880 0006 	stmia.w	r0, {r1, r2}
 8014b68:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8014b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014b6e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8014b70:	1d39      	adds	r1, r7, #4
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	9301      	str	r3, [sp, #4]
 8014b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b78:	9300      	str	r3, [sp, #0]
 8014b7a:	6a3b      	ldr	r3, [r7, #32]
 8014b7c:	683a      	ldr	r2, [r7, #0]
 8014b7e:	68f8      	ldr	r0, [r7, #12]
 8014b80:	f005 ffaf 	bl	801aae2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8014b84:	bf00      	nop
 8014b86:	3718      	adds	r7, #24
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}

08014b8c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8014b8c:	b590      	push	{r4, r7, lr}
 8014b8e:	b085      	sub	sp, #20
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	4603      	mov	r3, r0
 8014b94:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8014b96:	2300      	movs	r3, #0
 8014b98:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8014b9a:	88fb      	ldrh	r3, [r7, #6]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d127      	bne.n	8014bf0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8014ba0:	88fb      	ldrh	r3, [r7, #6]
 8014ba2:	4a1e      	ldr	r2, [pc, #120]	; (8014c1c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d016      	beq.n	8014bda <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8014bac:	88fb      	ldrh	r3, [r7, #6]
 8014bae:	4a1b      	ldr	r2, [pc, #108]	; (8014c1c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bb4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	68ba      	ldr	r2, [r7, #8]
 8014bbc:	4413      	add	r3, r2
 8014bbe:	4a18      	ldr	r2, [pc, #96]	; (8014c20 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014bc0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	685b      	ldr	r3, [r3, #4]
 8014bc6:	68ba      	ldr	r2, [r7, #8]
 8014bc8:	4413      	add	r3, r2
 8014bca:	4a16      	ldr	r2, [pc, #88]	; (8014c24 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014bcc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	689b      	ldr	r3, [r3, #8]
 8014bd2:	68ba      	ldr	r2, [r7, #8]
 8014bd4:	4413      	add	r3, r2
 8014bd6:	60fb      	str	r3, [r7, #12]
 8014bd8:	e00a      	b.n	8014bf0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8014bda:	4b11      	ldr	r3, [pc, #68]	; (8014c20 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014bdc:	4a12      	ldr	r2, [pc, #72]	; (8014c28 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8014bde:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8014be0:	4a12      	ldr	r2, [pc, #72]	; (8014c2c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8014be2:	4b10      	ldr	r3, [pc, #64]	; (8014c24 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014be4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8014be6:	88fb      	ldrh	r3, [r7, #6]
 8014be8:	4a11      	ldr	r2, [pc, #68]	; (8014c30 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8014bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bee:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d00d      	beq.n	8014c12 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8014bf6:	4a0f      	ldr	r2, [pc, #60]	; (8014c34 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8014bf8:	88fb      	ldrh	r3, [r7, #6]
 8014bfa:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8014bfc:	f000 f83e 	bl	8014c7c <_ZN17TypedTextDatabase8getFontsEv>
 8014c00:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8014c02:	f000 f833 	bl	8014c6c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8014c06:	4603      	mov	r3, r0
 8014c08:	461a      	mov	r2, r3
 8014c0a:	4621      	mov	r1, r4
 8014c0c:	68f8      	ldr	r0, [r7, #12]
 8014c0e:	f7ff fea7 	bl	8014960 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8014c12:	bf00      	nop
 8014c14:	3714      	adds	r7, #20
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd90      	pop	{r4, r7, pc}
 8014c1a:	bf00      	nop
 8014c1c:	200085dc 	.word	0x200085dc
 8014c20:	200085e4 	.word	0x200085e4
 8014c24:	200085e8 	.word	0x200085e8
 8014c28:	08056108 	.word	0x08056108
 8014c2c:	080560c0 	.word	0x080560c0
 8014c30:	080561c0 	.word	0x080561c0
 8014c34:	200085e0 	.word	0x200085e0

08014c38 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b083      	sub	sp, #12
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	460b      	mov	r3, r1
 8014c42:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8014c44:	4b07      	ldr	r3, [pc, #28]	; (8014c64 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8014c46:	681a      	ldr	r2, [r3, #0]
 8014c48:	4b07      	ldr	r3, [pc, #28]	; (8014c68 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8014c4a:	6819      	ldr	r1, [r3, #0]
 8014c4c:	887b      	ldrh	r3, [r7, #2]
 8014c4e:	009b      	lsls	r3, r3, #2
 8014c50:	440b      	add	r3, r1
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	005b      	lsls	r3, r3, #1
 8014c56:	4413      	add	r3, r2
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	370c      	adds	r7, #12
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c62:	4770      	bx	lr
 8014c64:	200085e4 	.word	0x200085e4
 8014c68:	200085e8 	.word	0x200085e8

08014c6c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8014c6c:	b480      	push	{r7}
 8014c6e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8014c70:	2312      	movs	r3, #18
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	46bd      	mov	sp, r7
 8014c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7a:	4770      	bx	lr

08014c7c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8014c80:	4b02      	ldr	r3, [pc, #8]	; (8014c8c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8014c82:	4618      	mov	r0, r3
 8014c84:	46bd      	mov	sp, r7
 8014c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8a:	4770      	bx	lr
 8014c8c:	200085ec 	.word	0x200085ec

08014c90 <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_27_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b082      	sub	sp, #8
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
 8014c98:	6039      	str	r1, [r7, #0]
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	2b01      	cmp	r3, #1
 8014c9e:	d118      	bne.n	8014cd2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8014ca0:	683b      	ldr	r3, [r7, #0]
 8014ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ca6:	4293      	cmp	r3, r2
 8014ca8:	d113      	bne.n	8014cd2 <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 8014caa:	f7fa fc17 	bl	800f4dc <_Z23getFont_verdana_20_4bppv>
 8014cae:	4602      	mov	r2, r0
};
 8014cb0:	4b0a      	ldr	r3, [pc, #40]	; (8014cdc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8014cb2:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8014cb4:	f7fa fc96 	bl	800f5e4 <_Z23getFont_verdana_40_4bppv>
 8014cb8:	4602      	mov	r2, r0
};
 8014cba:	4b08      	ldr	r3, [pc, #32]	; (8014cdc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8014cbc:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_18_4bpp()),
 8014cbe:	f7fa fbcb 	bl	800f458 <_Z23getFont_verdana_18_4bppv>
 8014cc2:	4602      	mov	r2, r0
};
 8014cc4:	4b05      	ldr	r3, [pc, #20]	; (8014cdc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8014cc6:	609a      	str	r2, [r3, #8]
    &(getFont_verdana_27_4bpp())
 8014cc8:	f7fa fc4a 	bl	800f560 <_Z23getFont_verdana_27_4bppv>
 8014ccc:	4602      	mov	r2, r0
};
 8014cce:	4b03      	ldr	r3, [pc, #12]	; (8014cdc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8014cd0:	60da      	str	r2, [r3, #12]
}  // namespace TypedTextDatabase
 8014cd2:	bf00      	nop
 8014cd4:	3708      	adds	r7, #8
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
 8014cda:	bf00      	nop
 8014cdc:	200085ec 	.word	0x200085ec

08014ce0 <_GLOBAL__sub_I_touchgfx_fonts>:
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	af00      	add	r7, sp, #0
 8014ce4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014ce8:	2001      	movs	r0, #1
 8014cea:	f7ff ffd1 	bl	8014c90 <_Z41__static_initialization_and_destruction_0ii>
 8014cee:	bd80      	pop	{r7, pc}

08014cf0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
 8014cf8:	4a05      	ldr	r2, [pc, #20]	; (8014d10 <_ZN19FrontendApplicationD1Ev+0x20>)
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	601a      	str	r2, [r3, #0]
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7fb f851 	bl	800fda8 <_ZN23FrontendApplicationBaseD1Ev>
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	4618      	mov	r0, r3
 8014d0a:	3708      	adds	r7, #8
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}
 8014d10:	08029eb8 	.word	0x08029eb8

08014d14 <_ZN19FrontendApplicationD0Ev>:
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b082      	sub	sp, #8
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f7ff ffe7 	bl	8014cf0 <_ZN19FrontendApplicationD1Ev>
 8014d22:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f012 fc14 	bl	8027554 <_ZdlPvj>
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3708      	adds	r7, #8
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}

08014d36 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8014d36:	b580      	push	{r7, lr}
 8014d38:	b082      	sub	sp, #8
 8014d3a:	af00      	add	r7, sp, #0
 8014d3c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8014d44:	4618      	mov	r0, r3
 8014d46:	f000 f95b 	bl	8015000 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f006 f98f 	bl	801b070 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8014d52:	bf00      	nop
 8014d54:	3708      	adds	r7, #8
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}
	...

08014d5c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b084      	sub	sp, #16
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	60f8      	str	r0, [r7, #12]
 8014d64:	60b9      	str	r1, [r7, #8]
 8014d66:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	687a      	ldr	r2, [r7, #4]
 8014d6c:	68b9      	ldr	r1, [r7, #8]
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f7fb f8b6 	bl	800fee0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8014d74:	4a03      	ldr	r2, [pc, #12]	; (8014d84 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	601a      	str	r2, [r3, #0]
{

}
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3710      	adds	r7, #16
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}
 8014d84:	08029eb8 	.word	0x08029eb8

08014d88 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8014d88:	b480      	push	{r7}
 8014d8a:	b083      	sub	sp, #12
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
    {
    }
 8014d90:	bf00      	nop
 8014d92:	370c      	adds	r7, #12
 8014d94:	46bd      	mov	sp, r7
 8014d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9a:	4770      	bx	lr

08014d9c <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8014d9c:	b480      	push	{r7}
 8014d9e:	b083      	sub	sp, #12
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
    {
    }
 8014da4:	bf00      	nop
 8014da6:	370c      	adds	r7, #12
 8014da8:	46bd      	mov	sp, r7
 8014daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dae:	4770      	bx	lr

08014db0 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8014db0:	b480      	push	{r7}
 8014db2:	b083      	sub	sp, #12
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
    {
 8014db8:	4a04      	ldr	r2, [pc, #16]	; (8014dcc <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	601a      	str	r2, [r3, #0]
    }
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	370c      	adds	r7, #12
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dca:	4770      	bx	lr
 8014dcc:	08029f34 	.word	0x08029f34

08014dd0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
    }
 8014dd8:	6878      	ldr	r0, [r7, #4]
 8014dda:	f7ff ffe9 	bl	8014db0 <_ZN8touchgfx9PresenterD1Ev>
 8014dde:	2104      	movs	r1, #4
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f012 fbb7 	bl	8027554 <_ZdlPvj>
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	4618      	mov	r0, r3
 8014dea:	3708      	adds	r7, #8
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8014df0:	b480      	push	{r7}
 8014df2:	b083      	sub	sp, #12
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
    {
 8014df8:	4a04      	ldr	r2, [pc, #16]	; (8014e0c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	601a      	str	r2, [r3, #0]
    }
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	4618      	mov	r0, r3
 8014e02:	370c      	adds	r7, #12
 8014e04:	46bd      	mov	sp, r7
 8014e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0a:	4770      	bx	lr
 8014e0c:	08029f34 	.word	0x08029f34

08014e10 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8014e10:	b480      	push	{r7}
 8014e12:	b083      	sub	sp, #12
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
 8014e18:	4a06      	ldr	r2, [pc, #24]	; (8014e34 <_ZN13ModelListenerC1Ev+0x24>)
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	601a      	str	r2, [r3, #0]
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	2200      	movs	r2, #0
 8014e22:	605a      	str	r2, [r3, #4]
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	4618      	mov	r0, r3
 8014e28:	370c      	adds	r7, #12
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e30:	4770      	bx	lr
 8014e32:	bf00      	nop
 8014e34:	08029f24 	.word	0x08029f24

08014e38 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8014e38:	b480      	push	{r7}
 8014e3a:	b083      	sub	sp, #12
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	4a04      	ldr	r2, [pc, #16]	; (8014e54 <_ZN13ModelListenerD1Ev+0x1c>)
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	601a      	str	r2, [r3, #0]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	4618      	mov	r0, r3
 8014e4a:	370c      	adds	r7, #12
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e52:	4770      	bx	lr
 8014e54:	08029f24 	.word	0x08029f24

08014e58 <_ZN13ModelListenerD0Ev>:
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b082      	sub	sp, #8
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f7ff ffe9 	bl	8014e38 <_ZN13ModelListenerD1Ev>
 8014e66:	2108      	movs	r1, #8
 8014e68:	6878      	ldr	r0, [r7, #4]
 8014e6a:	f012 fb73 	bl	8027554 <_ZdlPvj>
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	4618      	mov	r0, r3
 8014e72:	3708      	adds	r7, #8
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}

08014e78 <_ZN13DinoPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~DinoPresenter() {};
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
 8014e80:	4a09      	ldr	r2, [pc, #36]	; (8014ea8 <_ZN13DinoPresenterD1Ev+0x30>)
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	601a      	str	r2, [r3, #0]
 8014e86:	4a09      	ldr	r2, [pc, #36]	; (8014eac <_ZN13DinoPresenterD1Ev+0x34>)
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	605a      	str	r2, [r3, #4]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	3304      	adds	r3, #4
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7ff ffd1 	bl	8014e38 <_ZN13ModelListenerD1Ev>
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7ff ff89 	bl	8014db0 <_ZN8touchgfx9PresenterD1Ev>
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3708      	adds	r7, #8
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	08029efc 	.word	0x08029efc
 8014eac:	08029f14 	.word	0x08029f14

08014eb0 <_ZThn4_N13DinoPresenterD1Ev>:
 8014eb0:	f1a0 0004 	sub.w	r0, r0, #4
 8014eb4:	e7e0      	b.n	8014e78 <_ZN13DinoPresenterD1Ev>
 8014eb6:	bf00      	nop

08014eb8 <_ZN13DinoPresenterD0Ev>:
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b082      	sub	sp, #8
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f7ff ffd9 	bl	8014e78 <_ZN13DinoPresenterD1Ev>
 8014ec6:	2110      	movs	r1, #16
 8014ec8:	6878      	ldr	r0, [r7, #4]
 8014eca:	f012 fb43 	bl	8027554 <_ZdlPvj>
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	3708      	adds	r7, #8
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}

08014ed8 <_ZThn4_N13DinoPresenterD0Ev>:
 8014ed8:	f1a0 0004 	sub.w	r0, r0, #4
 8014edc:	e7ec      	b.n	8014eb8 <_ZN13DinoPresenterD0Ev>
	...

08014ee0 <_ZN13DinoPresenterC1ER8DinoView>:
#include <gui/dino_screen/DinoView.hpp>
#include <gui/dino_screen/DinoPresenter.hpp>

DinoPresenter::DinoPresenter(DinoView& v)
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b082      	sub	sp, #8
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	6039      	str	r1, [r7, #0]
    : view(v)
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7ff ff7f 	bl	8014df0 <_ZN8touchgfx9PresenterC1Ev>
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	3304      	adds	r3, #4
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7ff ff8a 	bl	8014e10 <_ZN13ModelListenerC1Ev>
 8014efc:	4a06      	ldr	r2, [pc, #24]	; (8014f18 <_ZN13DinoPresenterC1ER8DinoView+0x38>)
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	601a      	str	r2, [r3, #0]
 8014f02:	4a06      	ldr	r2, [pc, #24]	; (8014f1c <_ZN13DinoPresenterC1ER8DinoView+0x3c>)
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	605a      	str	r2, [r3, #4]
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	683a      	ldr	r2, [r7, #0]
 8014f0c:	60da      	str	r2, [r3, #12]
{

}
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	4618      	mov	r0, r3
 8014f12:	3708      	adds	r7, #8
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	08029efc 	.word	0x08029efc
 8014f1c:	08029f14 	.word	0x08029f14

08014f20 <_ZN13DinoPresenter8activateEv>:

void DinoPresenter::activate()
{
 8014f20:	b480      	push	{r7}
 8014f22:	b083      	sub	sp, #12
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]

}
 8014f28:	bf00      	nop
 8014f2a:	370c      	adds	r7, #12
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f32:	4770      	bx	lr

08014f34 <_ZN13DinoPresenter10deactivateEv>:

void DinoPresenter::deactivate()
{
 8014f34:	b480      	push	{r7}
 8014f36:	b083      	sub	sp, #12
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]

}
 8014f3c:	bf00      	nop
 8014f3e:	370c      	adds	r7, #12
 8014f40:	46bd      	mov	sp, r7
 8014f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f46:	4770      	bx	lr

08014f48 <_ZN8DinoViewD1Ev>:

class DinoView : public DinoViewBase
{
public:
    DinoView();
    virtual ~DinoView() {}
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b082      	sub	sp, #8
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
 8014f50:	4a05      	ldr	r2, [pc, #20]	; (8014f68 <_ZN8DinoViewD1Ev+0x20>)
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	601a      	str	r2, [r3, #0]
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f7fd f9ef 	bl	801233c <_ZN12DinoViewBaseD1Ev>
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	4618      	mov	r0, r3
 8014f62:	3708      	adds	r7, #8
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}
 8014f68:	08029f4c 	.word	0x08029f4c

08014f6c <_ZN8DinoViewD0Ev>:
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b082      	sub	sp, #8
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f7ff ffe7 	bl	8014f48 <_ZN8DinoViewD1Ev>
 8014f7a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8014f7e:	6878      	ldr	r0, [r7, #4]
 8014f80:	f012 fae8 	bl	8027554 <_ZdlPvj>
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	4618      	mov	r0, r3
 8014f88:	3708      	adds	r7, #8
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}
	...

08014f90 <_ZN8DinoViewC1Ev>:
#include <gui/dino_screen/DinoView.hpp>

DinoView::DinoView()
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f7fd fa52 	bl	8012444 <_ZN12DinoViewBaseC1Ev>
 8014fa0:	4a03      	ldr	r2, [pc, #12]	; (8014fb0 <_ZN8DinoViewC1Ev+0x20>)
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	601a      	str	r2, [r3, #0]
{

}
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3708      	adds	r7, #8
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}
 8014fb0:	08029f4c 	.word	0x08029f4c

08014fb4 <_ZN8DinoView11setupScreenEv>:

void DinoView::setupScreen()
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b082      	sub	sp, #8
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
    DinoViewBase::setupScreen();
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f7fd fba0 	bl	8012704 <_ZN12DinoViewBase11setupScreenEv>
}
 8014fc4:	bf00      	nop
 8014fc6:	3708      	adds	r7, #8
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}

08014fcc <_ZN8DinoView14tearDownScreenEv>:

void DinoView::tearDownScreen()
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
    DinoViewBase::tearDownScreen();
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f7fd f80a 	bl	8011ff0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8014fdc:	bf00      	nop
 8014fde:	3708      	adds	r7, #8
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}

08014fe4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8014fe4:	b480      	push	{r7}
 8014fe6:	b083      	sub	sp, #12
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	2200      	movs	r2, #0
 8014ff0:	601a      	str	r2, [r3, #0]
{

}
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	370c      	adds	r7, #12
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffe:	4770      	bx	lr

08015000 <_ZN5Model4tickEv>:

void Model::tick()
{
 8015000:	b480      	push	{r7}
 8015002:	b083      	sub	sp, #12
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]

}
 8015008:	bf00      	nop
 801500a:	370c      	adds	r7, #12
 801500c:	46bd      	mov	sp, r7
 801500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015012:	4770      	bx	lr

08015014 <_ZN14MusicPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MusicPresenter() {};
 8015014:	b580      	push	{r7, lr}
 8015016:	b082      	sub	sp, #8
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
 801501c:	4a09      	ldr	r2, [pc, #36]	; (8015044 <_ZN14MusicPresenterD1Ev+0x30>)
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	601a      	str	r2, [r3, #0]
 8015022:	4a09      	ldr	r2, [pc, #36]	; (8015048 <_ZN14MusicPresenterD1Ev+0x34>)
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	605a      	str	r2, [r3, #4]
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	3304      	adds	r3, #4
 801502c:	4618      	mov	r0, r3
 801502e:	f7ff ff03 	bl	8014e38 <_ZN13ModelListenerD1Ev>
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	4618      	mov	r0, r3
 8015036:	f7ff febb 	bl	8014db0 <_ZN8touchgfx9PresenterD1Ev>
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	4618      	mov	r0, r3
 801503e:	3708      	adds	r7, #8
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}
 8015044:	08029f80 	.word	0x08029f80
 8015048:	08029f98 	.word	0x08029f98

0801504c <_ZThn4_N14MusicPresenterD1Ev>:
 801504c:	f1a0 0004 	sub.w	r0, r0, #4
 8015050:	e7e0      	b.n	8015014 <_ZN14MusicPresenterD1Ev>
 8015052:	bf00      	nop

08015054 <_ZN14MusicPresenterD0Ev>:
 8015054:	b580      	push	{r7, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f7ff ffd9 	bl	8015014 <_ZN14MusicPresenterD1Ev>
 8015062:	2110      	movs	r1, #16
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f012 fa75 	bl	8027554 <_ZdlPvj>
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	4618      	mov	r0, r3
 801506e:	3708      	adds	r7, #8
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}

08015074 <_ZThn4_N14MusicPresenterD0Ev>:
 8015074:	f1a0 0004 	sub.w	r0, r0, #4
 8015078:	e7ec      	b.n	8015054 <_ZN14MusicPresenterD0Ev>
	...

0801507c <_ZN14MusicPresenterC1ER9MusicView>:
#include <gui/music_screen/MusicView.hpp>
#include <gui/music_screen/MusicPresenter.hpp>

MusicPresenter::MusicPresenter(MusicView& v)
 801507c:	b580      	push	{r7, lr}
 801507e:	b082      	sub	sp, #8
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	6039      	str	r1, [r7, #0]
    : view(v)
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	4618      	mov	r0, r3
 801508a:	f7ff feb1 	bl	8014df0 <_ZN8touchgfx9PresenterC1Ev>
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	3304      	adds	r3, #4
 8015092:	4618      	mov	r0, r3
 8015094:	f7ff febc 	bl	8014e10 <_ZN13ModelListenerC1Ev>
 8015098:	4a06      	ldr	r2, [pc, #24]	; (80150b4 <_ZN14MusicPresenterC1ER9MusicView+0x38>)
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	601a      	str	r2, [r3, #0]
 801509e:	4a06      	ldr	r2, [pc, #24]	; (80150b8 <_ZN14MusicPresenterC1ER9MusicView+0x3c>)
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	605a      	str	r2, [r3, #4]
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	683a      	ldr	r2, [r7, #0]
 80150a8:	60da      	str	r2, [r3, #12]
{

}
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	4618      	mov	r0, r3
 80150ae:	3708      	adds	r7, #8
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}
 80150b4:	08029f80 	.word	0x08029f80
 80150b8:	08029f98 	.word	0x08029f98

080150bc <_ZN14MusicPresenter8activateEv>:

void MusicPresenter::activate()
{
 80150bc:	b480      	push	{r7}
 80150be:	b083      	sub	sp, #12
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]

}
 80150c4:	bf00      	nop
 80150c6:	370c      	adds	r7, #12
 80150c8:	46bd      	mov	sp, r7
 80150ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ce:	4770      	bx	lr

080150d0 <_ZN14MusicPresenter10deactivateEv>:

void MusicPresenter::deactivate()
{
 80150d0:	b480      	push	{r7}
 80150d2:	b083      	sub	sp, #12
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]

}
 80150d8:	bf00      	nop
 80150da:	370c      	adds	r7, #12
 80150dc:	46bd      	mov	sp, r7
 80150de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e2:	4770      	bx	lr

080150e4 <_ZN9MusicViewD1Ev>:

class MusicView : public MusicViewBase
{
public:
    MusicView();
    virtual ~MusicView() {}
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b082      	sub	sp, #8
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	4a05      	ldr	r2, [pc, #20]	; (8015104 <_ZN9MusicViewD1Ev+0x20>)
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	601a      	str	r2, [r3, #0]
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7fd fd23 	bl	8012b40 <_ZN13MusicViewBaseD1Ev>
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	4618      	mov	r0, r3
 80150fe:	3708      	adds	r7, #8
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}
 8015104:	08029fa8 	.word	0x08029fa8

08015108 <_ZN9MusicViewD0Ev>:
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f7ff ffe7 	bl	80150e4 <_ZN9MusicViewD1Ev>
 8015116:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f012 fa1a 	bl	8027554 <_ZdlPvj>
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	4618      	mov	r0, r3
 8015124:	3708      	adds	r7, #8
 8015126:	46bd      	mov	sp, r7
 8015128:	bd80      	pop	{r7, pc}
	...

0801512c <_ZN9MusicViewC1Ev>:
#include <gui/music_screen/MusicView.hpp>

MusicView::MusicView()
 801512c:	b580      	push	{r7, lr}
 801512e:	b082      	sub	sp, #8
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	4618      	mov	r0, r3
 8015138:	f7fd fd74 	bl	8012c24 <_ZN13MusicViewBaseC1Ev>
 801513c:	4a03      	ldr	r2, [pc, #12]	; (801514c <_ZN9MusicViewC1Ev+0x20>)
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	601a      	str	r2, [r3, #0]
{

}
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	4618      	mov	r0, r3
 8015146:	3708      	adds	r7, #8
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}
 801514c:	08029fa8 	.word	0x08029fa8

08015150 <_ZN9MusicView11setupScreenEv>:

void MusicView::setupScreen()
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b082      	sub	sp, #8
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
    MusicViewBase::setupScreen();
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	4618      	mov	r0, r3
 801515c:	f7fe f8b0 	bl	80132c0 <_ZN13MusicViewBase11setupScreenEv>
}
 8015160:	bf00      	nop
 8015162:	3708      	adds	r7, #8
 8015164:	46bd      	mov	sp, r7
 8015166:	bd80      	pop	{r7, pc}

08015168 <_ZN9MusicView14tearDownScreenEv>:

void MusicView::tearDownScreen()
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
    MusicViewBase::tearDownScreen();
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	4618      	mov	r0, r3
 8015174:	f7fc ff3c 	bl	8011ff0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8015178:	bf00      	nop
 801517a:	3708      	adds	r7, #8
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}

08015180 <_ZN13PongPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~PongPresenter() {};
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	4a09      	ldr	r2, [pc, #36]	; (80151b0 <_ZN13PongPresenterD1Ev+0x30>)
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	601a      	str	r2, [r3, #0]
 801518e:	4a09      	ldr	r2, [pc, #36]	; (80151b4 <_ZN13PongPresenterD1Ev+0x34>)
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	605a      	str	r2, [r3, #4]
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	3304      	adds	r3, #4
 8015198:	4618      	mov	r0, r3
 801519a:	f7ff fe4d 	bl	8014e38 <_ZN13ModelListenerD1Ev>
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7ff fe05 	bl	8014db0 <_ZN8touchgfx9PresenterD1Ev>
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	4618      	mov	r0, r3
 80151aa:	3708      	adds	r7, #8
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}
 80151b0:	08029fdc 	.word	0x08029fdc
 80151b4:	08029ff4 	.word	0x08029ff4

080151b8 <_ZThn4_N13PongPresenterD1Ev>:
 80151b8:	f1a0 0004 	sub.w	r0, r0, #4
 80151bc:	e7e0      	b.n	8015180 <_ZN13PongPresenterD1Ev>
 80151be:	bf00      	nop

080151c0 <_ZN13PongPresenterD0Ev>:
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b082      	sub	sp, #8
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6878      	ldr	r0, [r7, #4]
 80151ca:	f7ff ffd9 	bl	8015180 <_ZN13PongPresenterD1Ev>
 80151ce:	2110      	movs	r1, #16
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f012 f9bf 	bl	8027554 <_ZdlPvj>
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	4618      	mov	r0, r3
 80151da:	3708      	adds	r7, #8
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}

080151e0 <_ZThn4_N13PongPresenterD0Ev>:
 80151e0:	f1a0 0004 	sub.w	r0, r0, #4
 80151e4:	e7ec      	b.n	80151c0 <_ZN13PongPresenterD0Ev>
	...

080151e8 <_ZN13PongPresenterC1ER8PongView>:
#include <gui/pong_screen/PongView.hpp>
#include <gui/pong_screen/PongPresenter.hpp>

PongPresenter::PongPresenter(PongView& v)
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b082      	sub	sp, #8
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
 80151f0:	6039      	str	r1, [r7, #0]
    : view(v)
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	4618      	mov	r0, r3
 80151f6:	f7ff fdfb 	bl	8014df0 <_ZN8touchgfx9PresenterC1Ev>
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	3304      	adds	r3, #4
 80151fe:	4618      	mov	r0, r3
 8015200:	f7ff fe06 	bl	8014e10 <_ZN13ModelListenerC1Ev>
 8015204:	4a06      	ldr	r2, [pc, #24]	; (8015220 <_ZN13PongPresenterC1ER8PongView+0x38>)
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	601a      	str	r2, [r3, #0]
 801520a:	4a06      	ldr	r2, [pc, #24]	; (8015224 <_ZN13PongPresenterC1ER8PongView+0x3c>)
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	605a      	str	r2, [r3, #4]
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	683a      	ldr	r2, [r7, #0]
 8015214:	60da      	str	r2, [r3, #12]
{

}
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	4618      	mov	r0, r3
 801521a:	3708      	adds	r7, #8
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}
 8015220:	08029fdc 	.word	0x08029fdc
 8015224:	08029ff4 	.word	0x08029ff4

08015228 <_ZN13PongPresenter8activateEv>:

void PongPresenter::activate()
{
 8015228:	b480      	push	{r7}
 801522a:	b083      	sub	sp, #12
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]

}
 8015230:	bf00      	nop
 8015232:	370c      	adds	r7, #12
 8015234:	46bd      	mov	sp, r7
 8015236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523a:	4770      	bx	lr

0801523c <_ZN13PongPresenter10deactivateEv>:

void PongPresenter::deactivate()
{
 801523c:	b480      	push	{r7}
 801523e:	b083      	sub	sp, #12
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]

}
 8015244:	bf00      	nop
 8015246:	370c      	adds	r7, #12
 8015248:	46bd      	mov	sp, r7
 801524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524e:	4770      	bx	lr

08015250 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8015250:	b480      	push	{r7}
 8015252:	b083      	sub	sp, #12
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
        return rect.width;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 801525e:	4618      	mov	r0, r3
 8015260:	370c      	adds	r7, #12
 8015262:	46bd      	mov	sp, r7
 8015264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015268:	4770      	bx	lr

0801526a <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 801526a:	b480      	push	{r7}
 801526c:	b083      	sub	sp, #12
 801526e:	af00      	add	r7, sp, #0
 8015270:	6078      	str	r0, [r7, #4]
        return rect.height;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8015278:	4618      	mov	r0, r3
 801527a:	370c      	adds	r7, #12
 801527c:	46bd      	mov	sp, r7
 801527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015282:	4770      	bx	lr

08015284 <_ZN8PongViewD1Ev>:
#include <touchgfx/Color.hpp>
class PongView : public PongViewBase
{
public:
    PongView();
    virtual ~PongView() {}
 8015284:	b580      	push	{r7, lr}
 8015286:	b082      	sub	sp, #8
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
 801528c:	4a05      	ldr	r2, [pc, #20]	; (80152a4 <_ZN8PongViewD1Ev+0x20>)
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	601a      	str	r2, [r3, #0]
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	4618      	mov	r0, r3
 8015296:	f7fe fb41 	bl	801391c <_ZN12PongViewBaseD1Ev>
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	4618      	mov	r0, r3
 801529e:	3708      	adds	r7, #8
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}
 80152a4:	0802a004 	.word	0x0802a004

080152a8 <_ZN8PongViewD0Ev>:
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b082      	sub	sp, #8
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f7ff ffe7 	bl	8015284 <_ZN8PongViewD1Ev>
 80152b6:	f641 6114 	movw	r1, #7700	; 0x1e14
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	f012 f94a 	bl	8027554 <_ZdlPvj>
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	4618      	mov	r0, r3
 80152c4:	3708      	adds	r7, #8
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd80      	pop	{r7, pc}
	...

080152cc <_ZN8PongViewC1Ev>:
#include <gui/pong_screen/PongView.hpp>

#include <touchgfx/lcd/LCD.hpp>

PongView::PongView()
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	4618      	mov	r0, r3
 80152d8:	f7fe fb74 	bl	80139c4 <_ZN12PongViewBaseC1Ev>
 80152dc:	4a18      	ldr	r2, [pc, #96]	; (8015340 <_ZN8PongViewC1Ev+0x74>)
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	601a      	str	r2, [r3, #0]
 80152e2:	687a      	ldr	r2, [r7, #4]
 80152e4:	f641 53f4 	movw	r3, #7668	; 0x1df4
 80152e8:	4413      	add	r3, r2
 80152ea:	2201      	movs	r2, #1
 80152ec:	601a      	str	r2, [r3, #0]
 80152ee:	687a      	ldr	r2, [r7, #4]
 80152f0:	f641 53f8 	movw	r3, #7672	; 0x1df8
 80152f4:	4413      	add	r3, r2
 80152f6:	2201      	movs	r2, #1
 80152f8:	601a      	str	r2, [r3, #0]
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	f641 53fc 	movw	r3, #7676	; 0x1dfc
 8015300:	4413      	add	r3, r2
 8015302:	2204      	movs	r2, #4
 8015304:	601a      	str	r2, [r3, #0]
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801530c:	2228      	movs	r2, #40	; 0x28
 801530e:	601a      	str	r2, [r3, #0]
 8015310:	687a      	ldr	r2, [r7, #4]
 8015312:	f641 6304 	movw	r3, #7684	; 0x1e04
 8015316:	4413      	add	r3, r2
 8015318:	2200      	movs	r2, #0
 801531a:	601a      	str	r2, [r3, #0]
 801531c:	687a      	ldr	r2, [r7, #4]
 801531e:	f641 630c 	movw	r3, #7692	; 0x1e0c
 8015322:	4413      	add	r3, r2
 8015324:	2200      	movs	r2, #0
 8015326:	601a      	str	r2, [r3, #0]
 8015328:	687a      	ldr	r2, [r7, #4]
 801532a:	f641 6310 	movw	r3, #7696	; 0x1e10
 801532e:	4413      	add	r3, r2
 8015330:	2200      	movs	r2, #0
 8015332:	601a      	str	r2, [r3, #0]
{

}
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	4618      	mov	r0, r3
 8015338:	3708      	adds	r7, #8
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
 801533e:	bf00      	nop
 8015340:	0802a004 	.word	0x0802a004

08015344 <_ZN8PongView11setupScreenEv>:

void PongView::setupScreen()
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b082      	sub	sp, #8
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
    PongViewBase::setupScreen();
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	4618      	mov	r0, r3
 8015350:	f7fe fce4 	bl	8013d1c <_ZN12PongViewBase11setupScreenEv>
}
 8015354:	bf00      	nop
 8015356:	3708      	adds	r7, #8
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}

0801535c <_ZN8PongView14tearDownScreenEv>:

void PongView::tearDownScreen()
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
    PongViewBase::tearDownScreen();
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	4618      	mov	r0, r3
 8015368:	f7fc fe42 	bl	8011ff0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801536c:	bf00      	nop
 801536e:	3708      	adds	r7, #8
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}

08015374 <_ZN8PongView9move_leftEv>:

void PongView::move_left(){
 8015374:	b590      	push	{r4, r7, lr}
 8015376:	b083      	sub	sp, #12
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8015382:	22ff      	movs	r2, #255	; 0xff
 8015384:	21ff      	movs	r1, #255	; 0xff
 8015386:	20ff      	movs	r0, #255	; 0xff
 8015388:	f7fd f832 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801538c:	4603      	mov	r3, r0
 801538e:	4619      	mov	r1, r3
 8015390:	4620      	mov	r0, r4
 8015392:	f7fc feb5 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	33f0      	adds	r3, #240	; 0xf0
 801539a:	4618      	mov	r0, r3
 801539c:	f006 fba8 	bl	801baf0 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()-20);
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	33f0      	adds	r3, #240	; 0xf0
 80153aa:	4618      	mov	r0, r3
 80153ac:	f7fa fb13 	bl	800f9d6 <_ZNK8touchgfx8Drawable4getXEv>
 80153b0:	4603      	mov	r3, r0
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	3b14      	subs	r3, #20
 80153b6:	b29b      	uxth	r3, r3
 80153b8:	b21b      	sxth	r3, r3
 80153ba:	4619      	mov	r1, r3
 80153bc:	4620      	mov	r0, r4
 80153be:	f7fa fb24 	bl	800fa0a <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80153c8:	22ff      	movs	r2, #255	; 0xff
 80153ca:	2180      	movs	r1, #128	; 0x80
 80153cc:	2006      	movs	r0, #6
 80153ce:	f7fd f80f 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80153d2:	4603      	mov	r3, r0
 80153d4:	4619      	mov	r1, r3
 80153d6:	4620      	mov	r0, r4
 80153d8:	f7fc fe92 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	33f0      	adds	r3, #240	; 0xf0
 80153e0:	4618      	mov	r0, r3
 80153e2:	f006 fb85 	bl	801baf0 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 80153e6:	bf00      	nop
 80153e8:	370c      	adds	r7, #12
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd90      	pop	{r4, r7, pc}

080153ee <_ZN8PongView10move_rightEv>:

void PongView::move_right(){
 80153ee:	b590      	push	{r4, r7, lr}
 80153f0:	b083      	sub	sp, #12
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80153fc:	22ff      	movs	r2, #255	; 0xff
 80153fe:	21ff      	movs	r1, #255	; 0xff
 8015400:	20ff      	movs	r0, #255	; 0xff
 8015402:	f7fc fff5 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015406:	4603      	mov	r3, r0
 8015408:	4619      	mov	r1, r3
 801540a:	4620      	mov	r0, r4
 801540c:	f7fc fe78 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	33f0      	adds	r3, #240	; 0xf0
 8015414:	4618      	mov	r0, r3
 8015416:	f006 fb6b 	bl	801baf0 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()+20);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	33f0      	adds	r3, #240	; 0xf0
 8015424:	4618      	mov	r0, r3
 8015426:	f7fa fad6 	bl	800f9d6 <_ZNK8touchgfx8Drawable4getXEv>
 801542a:	4603      	mov	r3, r0
 801542c:	b29b      	uxth	r3, r3
 801542e:	3314      	adds	r3, #20
 8015430:	b29b      	uxth	r3, r3
 8015432:	b21b      	sxth	r3, r3
 8015434:	4619      	mov	r1, r3
 8015436:	4620      	mov	r0, r4
 8015438:	f7fa fae7 	bl	800fa0a <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8015442:	22ff      	movs	r2, #255	; 0xff
 8015444:	2180      	movs	r1, #128	; 0x80
 8015446:	2006      	movs	r0, #6
 8015448:	f7fc ffd2 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801544c:	4603      	mov	r3, r0
 801544e:	4619      	mov	r1, r3
 8015450:	4620      	mov	r0, r4
 8015452:	f7fc fe55 	bl	8012100 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	33f0      	adds	r3, #240	; 0xf0
 801545a:	4618      	mov	r0, r3
 801545c:	f006 fb48 	bl	801baf0 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8015460:	bf00      	nop
 8015462:	370c      	adds	r7, #12
 8015464:	46bd      	mov	sp, r7
 8015466:	bd90      	pop	{r4, r7, pc}

08015468 <_ZN8PongView15handleTickEventEv>:

void PongView::handleTickEvent(){
 8015468:	b580      	push	{r7, lr}
 801546a:	b082      	sub	sp, #8
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
	tick ++;
 8015470:	687a      	ldr	r2, [r7, #4]
 8015472:	f641 6304 	movw	r3, #7684	; 0x1e04
 8015476:	4413      	add	r3, r2
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	1c5a      	adds	r2, r3, #1
 801547c:	6879      	ldr	r1, [r7, #4]
 801547e:	f641 6304 	movw	r3, #7684	; 0x1e04
 8015482:	440b      	add	r3, r1
 8015484:	601a      	str	r2, [r3, #0]
	move_ball();
 8015486:	6878      	ldr	r0, [r7, #4]
 8015488:	f000 f804 	bl	8015494 <_ZN8PongView9move_ballEv>

}
 801548c:	bf00      	nop
 801548e:	3708      	adds	r7, #8
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}

08015494 <_ZN8PongView9move_ballEv>:

void PongView::move_ball(){\
 8015494:	b590      	push	{r4, r7, lr}
 8015496:	b083      	sub	sp, #12
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]

	// move ball
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80154a2:	22ff      	movs	r2, #255	; 0xff
 80154a4:	21ff      	movs	r1, #255	; 0xff
 80154a6:	20ff      	movs	r0, #255	; 0xff
 80154a8:	f7fc ffa2 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80154ac:	4603      	mov	r3, r0
 80154ae:	4619      	mov	r1, r3
 80154b0:	4620      	mov	r0, r4
 80154b2:	f7fe f9b7 	bl	8013824 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	3370      	adds	r3, #112	; 0x70
 80154ba:	4618      	mov	r0, r3
 80154bc:	f003 ff3e 	bl	801933c <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	ball.setY(ball.getY() +  ball_vertical_direction*ball_speed);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	3370      	adds	r3, #112	; 0x70
 80154ca:	4618      	mov	r0, r3
 80154cc:	f7fa fa90 	bl	800f9f0 <_ZNK8touchgfx8Drawable4getYEv>
 80154d0:	4603      	mov	r3, r0
 80154d2:	b29a      	uxth	r2, r3
 80154d4:	6879      	ldr	r1, [r7, #4]
 80154d6:	f641 53f4 	movw	r3, #7668	; 0x1df4
 80154da:	440b      	add	r3, r1
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	b299      	uxth	r1, r3
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f641 53fc 	movw	r3, #7676	; 0x1dfc
 80154e6:	4403      	add	r3, r0
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	b29b      	uxth	r3, r3
 80154ec:	fb11 f303 	smulbb	r3, r1, r3
 80154f0:	b29b      	uxth	r3, r3
 80154f2:	4413      	add	r3, r2
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	b21b      	sxth	r3, r3
 80154f8:	4619      	mov	r1, r3
 80154fa:	4620      	mov	r0, r4
 80154fc:	f7fa fa94 	bl	800fa28 <_ZN8touchgfx8Drawable4setYEs>
	ball.setX(ball.getX() +  ball_horizontal_direction*ball_speed);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	3370      	adds	r3, #112	; 0x70
 801550a:	4618      	mov	r0, r3
 801550c:	f7fa fa63 	bl	800f9d6 <_ZNK8touchgfx8Drawable4getXEv>
 8015510:	4603      	mov	r3, r0
 8015512:	b29a      	uxth	r2, r3
 8015514:	6879      	ldr	r1, [r7, #4]
 8015516:	f641 53f8 	movw	r3, #7672	; 0x1df8
 801551a:	440b      	add	r3, r1
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	b299      	uxth	r1, r3
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f641 53fc 	movw	r3, #7676	; 0x1dfc
 8015526:	4403      	add	r3, r0
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	b29b      	uxth	r3, r3
 801552c:	fb11 f303 	smulbb	r3, r1, r3
 8015530:	b29b      	uxth	r3, r3
 8015532:	4413      	add	r3, r2
 8015534:	b29b      	uxth	r3, r3
 8015536:	b21b      	sxth	r3, r3
 8015538:	4619      	mov	r1, r3
 801553a:	4620      	mov	r0, r4
 801553c:	f7fa fa65 	bl	800fa0a <_ZN8touchgfx8Drawable4setXEs>
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8015546:	22ff      	movs	r2, #255	; 0xff
 8015548:	2180      	movs	r1, #128	; 0x80
 801554a:	2006      	movs	r0, #6
 801554c:	f7fc ff50 	bl	80123f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015550:	4603      	mov	r3, r0
 8015552:	4619      	mov	r1, r3
 8015554:	4620      	mov	r0, r4
 8015556:	f7fe f965 	bl	8013824 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	3370      	adds	r3, #112	; 0x70
 801555e:	4618      	mov	r0, r3
 8015560:	f003 feec 	bl	801933c <_ZNK8touchgfx12CanvasWidget10invalidateEv>


	if(check_collision()==1){
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f000 f8af 	bl	80156c8 <_ZN8PongView15check_collisionEv>
 801556a:	4603      	mov	r3, r0
 801556c:	2b01      	cmp	r3, #1
 801556e:	bf0c      	ite	eq
 8015570:	2301      	moveq	r3, #1
 8015572:	2300      	movne	r3, #0
 8015574:	b2db      	uxtb	r3, r3
 8015576:	2b00      	cmp	r3, #0
 8015578:	d067      	beq.n	801564a <_ZN8PongView9move_ballEv+0x1b6>
		ball_vertical_direction = -1;
 801557a:	687a      	ldr	r2, [r7, #4]
 801557c:	f641 53f4 	movw	r3, #7668	; 0x1df4
 8015580:	4413      	add	r3, r2
 8015582:	f04f 32ff 	mov.w	r2, #4294967295
 8015586:	601a      	str	r2, [r3, #0]

		if(collide_count % 20 == 0){
 8015588:	687a      	ldr	r2, [r7, #4]
 801558a:	f641 6310 	movw	r3, #7696	; 0x1e10
 801558e:	4413      	add	r3, r2
 8015590:	6819      	ldr	r1, [r3, #0]
 8015592:	4b4b      	ldr	r3, [pc, #300]	; (80156c0 <_ZN8PongView9move_ballEv+0x22c>)
 8015594:	fb83 2301 	smull	r2, r3, r3, r1
 8015598:	10da      	asrs	r2, r3, #3
 801559a:	17cb      	asrs	r3, r1, #31
 801559c:	1ad2      	subs	r2, r2, r3
 801559e:	4613      	mov	r3, r2
 80155a0:	009b      	lsls	r3, r3, #2
 80155a2:	4413      	add	r3, r2
 80155a4:	009b      	lsls	r3, r3, #2
 80155a6:	1aca      	subs	r2, r1, r3
 80155a8:	2a00      	cmp	r2, #0
 80155aa:	d127      	bne.n	80155fc <_ZN8PongView9move_ballEv+0x168>
			ball_speed = ball_speed  + 1;
 80155ac:	687a      	ldr	r2, [r7, #4]
 80155ae:	f641 53fc 	movw	r3, #7676	; 0x1dfc
 80155b2:	4413      	add	r3, r2
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	1c5a      	adds	r2, r3, #1
 80155b8:	6879      	ldr	r1, [r7, #4]
 80155ba:	f641 53fc 	movw	r3, #7676	; 0x1dfc
 80155be:	440b      	add	r3, r1
 80155c0:	601a      	str	r2, [r3, #0]
			sc ++;
 80155c2:	687a      	ldr	r2, [r7, #4]
 80155c4:	f641 630c 	movw	r3, #7692	; 0x1e0c
 80155c8:	4413      	add	r3, r2
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	1c5a      	adds	r2, r3, #1
 80155ce:	6879      	ldr	r1, [r7, #4]
 80155d0:	f641 630c 	movw	r3, #7692	; 0x1e0c
 80155d4:	440b      	add	r3, r1
 80155d6:	601a      	str	r2, [r3, #0]
			Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", sc);
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	f503 70ce 	add.w	r0, r3, #412	; 0x19c
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	f641 630c 	movw	r3, #7692	; 0x1e0c
 80155e4:	4413      	add	r3, r2
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	4a36      	ldr	r2, [pc, #216]	; (80156c4 <_ZN8PongView9move_ballEv+0x230>)
 80155ea:	2114      	movs	r1, #20
 80155ec:	f008 f8b8 	bl	801d760 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			score.invalidate();
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80155f6:	4618      	mov	r0, r3
 80155f8:	f006 fa7a 	bl	801baf0 <_ZNK8touchgfx8Drawable10invalidateEv>

		}
		collide_count ++;
 80155fc:	687a      	ldr	r2, [r7, #4]
 80155fe:	f641 6310 	movw	r3, #7696	; 0x1e10
 8015602:	4413      	add	r3, r2
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	1c5a      	adds	r2, r3, #1
 8015608:	6879      	ldr	r1, [r7, #4]
 801560a:	f641 6310 	movw	r3, #7696	; 0x1e10
 801560e:	440b      	add	r3, r1
 8015610:	601a      	str	r2, [r3, #0]

		if(ball_horizontal_direction==1){
 8015612:	687a      	ldr	r2, [r7, #4]
 8015614:	f641 53f8 	movw	r3, #7672	; 0x1df8
 8015618:	4413      	add	r3, r2
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	2b01      	cmp	r3, #1
 801561e:	d106      	bne.n	801562e <_ZN8PongView9move_ballEv+0x19a>
			ball_horizontal_direction = 2;
 8015620:	687a      	ldr	r2, [r7, #4]
 8015622:	f641 53f8 	movw	r3, #7672	; 0x1df8
 8015626:	4413      	add	r3, r2
 8015628:	2202      	movs	r2, #2
 801562a:	601a      	str	r2, [r3, #0]
	}
	else if(check_collision()==4){
		ball_horizontal_direction = -1;
	}

}
 801562c:	e043      	b.n	80156b6 <_ZN8PongView9move_ballEv+0x222>
		else if (ball_horizontal_direction==2){
 801562e:	687a      	ldr	r2, [r7, #4]
 8015630:	f641 53f8 	movw	r3, #7672	; 0x1df8
 8015634:	4413      	add	r3, r2
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	2b02      	cmp	r3, #2
 801563a:	d13c      	bne.n	80156b6 <_ZN8PongView9move_ballEv+0x222>
			ball_horizontal_direction = 1;
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	f641 53f8 	movw	r3, #7672	; 0x1df8
 8015642:	4413      	add	r3, r2
 8015644:	2201      	movs	r2, #1
 8015646:	601a      	str	r2, [r3, #0]
}
 8015648:	e035      	b.n	80156b6 <_ZN8PongView9move_ballEv+0x222>
	else if(check_collision()==2){
 801564a:	6878      	ldr	r0, [r7, #4]
 801564c:	f000 f83c 	bl	80156c8 <_ZN8PongView15check_collisionEv>
 8015650:	4603      	mov	r3, r0
 8015652:	2b02      	cmp	r3, #2
 8015654:	bf0c      	ite	eq
 8015656:	2301      	moveq	r3, #1
 8015658:	2300      	movne	r3, #0
 801565a:	b2db      	uxtb	r3, r3
 801565c:	2b00      	cmp	r3, #0
 801565e:	d006      	beq.n	801566e <_ZN8PongView9move_ballEv+0x1da>
		ball_vertical_direction = 1;
 8015660:	687a      	ldr	r2, [r7, #4]
 8015662:	f641 53f4 	movw	r3, #7668	; 0x1df4
 8015666:	4413      	add	r3, r2
 8015668:	2201      	movs	r2, #1
 801566a:	601a      	str	r2, [r3, #0]
}
 801566c:	e023      	b.n	80156b6 <_ZN8PongView9move_ballEv+0x222>
	else if(check_collision()==3){
 801566e:	6878      	ldr	r0, [r7, #4]
 8015670:	f000 f82a 	bl	80156c8 <_ZN8PongView15check_collisionEv>
 8015674:	4603      	mov	r3, r0
 8015676:	2b03      	cmp	r3, #3
 8015678:	bf0c      	ite	eq
 801567a:	2301      	moveq	r3, #1
 801567c:	2300      	movne	r3, #0
 801567e:	b2db      	uxtb	r3, r3
 8015680:	2b00      	cmp	r3, #0
 8015682:	d006      	beq.n	8015692 <_ZN8PongView9move_ballEv+0x1fe>
		ball_horizontal_direction = 1;
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	f641 53f8 	movw	r3, #7672	; 0x1df8
 801568a:	4413      	add	r3, r2
 801568c:	2201      	movs	r2, #1
 801568e:	601a      	str	r2, [r3, #0]
}
 8015690:	e011      	b.n	80156b6 <_ZN8PongView9move_ballEv+0x222>
	else if(check_collision()==4){
 8015692:	6878      	ldr	r0, [r7, #4]
 8015694:	f000 f818 	bl	80156c8 <_ZN8PongView15check_collisionEv>
 8015698:	4603      	mov	r3, r0
 801569a:	2b04      	cmp	r3, #4
 801569c:	bf0c      	ite	eq
 801569e:	2301      	moveq	r3, #1
 80156a0:	2300      	movne	r3, #0
 80156a2:	b2db      	uxtb	r3, r3
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d006      	beq.n	80156b6 <_ZN8PongView9move_ballEv+0x222>
		ball_horizontal_direction = -1;
 80156a8:	687a      	ldr	r2, [r7, #4]
 80156aa:	f641 53f8 	movw	r3, #7672	; 0x1df8
 80156ae:	4413      	add	r3, r2
 80156b0:	f04f 32ff 	mov.w	r2, #4294967295
 80156b4:	601a      	str	r2, [r3, #0]
}
 80156b6:	bf00      	nop
 80156b8:	370c      	adds	r7, #12
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd90      	pop	{r4, r7, pc}
 80156be:	bf00      	nop
 80156c0:	66666667 	.word	0x66666667
 80156c4:	08028cc4 	.word	0x08028cc4

080156c8 <_ZN8PongView15check_collisionEv>:

int PongView::check_collision(){
 80156c8:	b5b0      	push	{r4, r5, r7, lr}
 80156ca:	b082      	sub	sp, #8
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
	// collide with paddle
	if(ball.getY()+ball.getHeight()-margin>=paddle1.getY()-paddle1.getHeight() && ball.getX() + margin - 110 >= paddle1.getX() - paddle1.getWidth() && ball.getX() + margin <= paddle1.getX() + paddle1.getWidth()){
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	3370      	adds	r3, #112	; 0x70
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7fa f98b 	bl	800f9f0 <_ZNK8touchgfx8Drawable4getYEv>
 80156da:	4603      	mov	r3, r0
 80156dc:	461c      	mov	r4, r3
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	3370      	adds	r3, #112	; 0x70
 80156e2:	4618      	mov	r0, r3
 80156e4:	f7ff fdc1 	bl	801526a <_ZNK8touchgfx8Drawable9getHeightEv>
 80156e8:	4603      	mov	r3, r0
 80156ea:	18e2      	adds	r2, r4, r3
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	1ad4      	subs	r4, r2, r3
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	33f0      	adds	r3, #240	; 0xf0
 80156fa:	4618      	mov	r0, r3
 80156fc:	f7fa f978 	bl	800f9f0 <_ZNK8touchgfx8Drawable4getYEv>
 8015700:	4603      	mov	r3, r0
 8015702:	461d      	mov	r5, r3
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	33f0      	adds	r3, #240	; 0xf0
 8015708:	4618      	mov	r0, r3
 801570a:	f7ff fdae 	bl	801526a <_ZNK8touchgfx8Drawable9getHeightEv>
 801570e:	4603      	mov	r3, r0
 8015710:	1aeb      	subs	r3, r5, r3
 8015712:	429c      	cmp	r4, r3
 8015714:	db3b      	blt.n	801578e <_ZN8PongView15check_collisionEv+0xc6>
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	3370      	adds	r3, #112	; 0x70
 801571a:	4618      	mov	r0, r3
 801571c:	f7fa f95b 	bl	800f9d6 <_ZNK8touchgfx8Drawable4getXEv>
 8015720:	4603      	mov	r3, r0
 8015722:	461a      	mov	r2, r3
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	4413      	add	r3, r2
 801572e:	f1a3 046e 	sub.w	r4, r3, #110	; 0x6e
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	33f0      	adds	r3, #240	; 0xf0
 8015736:	4618      	mov	r0, r3
 8015738:	f7fa f94d 	bl	800f9d6 <_ZNK8touchgfx8Drawable4getXEv>
 801573c:	4603      	mov	r3, r0
 801573e:	461d      	mov	r5, r3
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	33f0      	adds	r3, #240	; 0xf0
 8015744:	4618      	mov	r0, r3
 8015746:	f7ff fd83 	bl	8015250 <_ZNK8touchgfx8Drawable8getWidthEv>
 801574a:	4603      	mov	r3, r0
 801574c:	1aeb      	subs	r3, r5, r3
 801574e:	429c      	cmp	r4, r3
 8015750:	db1d      	blt.n	801578e <_ZN8PongView15check_collisionEv+0xc6>
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	3370      	adds	r3, #112	; 0x70
 8015756:	4618      	mov	r0, r3
 8015758:	f7fa f93d 	bl	800f9d6 <_ZNK8touchgfx8Drawable4getXEv>
 801575c:	4603      	mov	r3, r0
 801575e:	461a      	mov	r2, r3
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	18d4      	adds	r4, r2, r3
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	33f0      	adds	r3, #240	; 0xf0
 801576e:	4618      	mov	r0, r3
 8015770:	f7fa f931 	bl	800f9d6 <_ZNK8touchgfx8Drawable4getXEv>
 8015774:	4603      	mov	r3, r0
 8015776:	461d      	mov	r5, r3
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	33f0      	adds	r3, #240	; 0xf0
 801577c:	4618      	mov	r0, r3
 801577e:	f7ff fd67 	bl	8015250 <_ZNK8touchgfx8Drawable8getWidthEv>
 8015782:	4603      	mov	r3, r0
 8015784:	442b      	add	r3, r5
 8015786:	429c      	cmp	r4, r3
 8015788:	dc01      	bgt.n	801578e <_ZN8PongView15check_collisionEv+0xc6>
 801578a:	2301      	movs	r3, #1
 801578c:	e000      	b.n	8015790 <_ZN8PongView15check_collisionEv+0xc8>
 801578e:	2300      	movs	r3, #0
 8015790:	2b00      	cmp	r3, #0
 8015792:	d001      	beq.n	8015798 <_ZN8PongView15check_collisionEv+0xd0>
		return 1;
 8015794:	2301      	movs	r3, #1
 8015796:	e053      	b.n	8015840 <_ZN8PongView15check_collisionEv+0x178>
	}

	// collide with wall
	if(ball.getY()+ball.getHeight()-margin-20<=0){
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	3370      	adds	r3, #112	; 0x70
 801579c:	4618      	mov	r0, r3
 801579e:	f7fa f927 	bl	800f9f0 <_ZNK8touchgfx8Drawable4getYEv>
 80157a2:	4603      	mov	r3, r0
 80157a4:	461c      	mov	r4, r3
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	3370      	adds	r3, #112	; 0x70
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7ff fd5d 	bl	801526a <_ZNK8touchgfx8Drawable9getHeightEv>
 80157b0:	4603      	mov	r3, r0
 80157b2:	18e2      	adds	r2, r4, r3
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	1ad3      	subs	r3, r2, r3
 80157be:	3b14      	subs	r3, #20
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	bfd4      	ite	le
 80157c4:	2301      	movle	r3, #1
 80157c6:	2300      	movgt	r3, #0
 80157c8:	b2db      	uxtb	r3, r3
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d001      	beq.n	80157d2 <_ZN8PongView15check_collisionEv+0x10a>
		return 2;
 80157ce:	2302      	movs	r3, #2
 80157d0:	e036      	b.n	8015840 <_ZN8PongView15check_collisionEv+0x178>
	}

	// collide with left wall
	if(ball.getX()+ball.getWidth()-margin-20<=0){
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	3370      	adds	r3, #112	; 0x70
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7fa f8fd 	bl	800f9d6 <_ZNK8touchgfx8Drawable4getXEv>
 80157dc:	4603      	mov	r3, r0
 80157de:	461c      	mov	r4, r3
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	3370      	adds	r3, #112	; 0x70
 80157e4:	4618      	mov	r0, r3
 80157e6:	f7ff fd33 	bl	8015250 <_ZNK8touchgfx8Drawable8getWidthEv>
 80157ea:	4603      	mov	r3, r0
 80157ec:	18e2      	adds	r2, r4, r3
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	1ad3      	subs	r3, r2, r3
 80157f8:	3b14      	subs	r3, #20
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	bfd4      	ite	le
 80157fe:	2301      	movle	r3, #1
 8015800:	2300      	movgt	r3, #0
 8015802:	b2db      	uxtb	r3, r3
 8015804:	2b00      	cmp	r3, #0
 8015806:	d001      	beq.n	801580c <_ZN8PongView15check_collisionEv+0x144>
		return 3;
 8015808:	2303      	movs	r3, #3
 801580a:	e019      	b.n	8015840 <_ZN8PongView15check_collisionEv+0x178>
	}

	// collide with right wall
	if(ball.getX()+ball.getWidth() >= 480){
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	3370      	adds	r3, #112	; 0x70
 8015810:	4618      	mov	r0, r3
 8015812:	f7fa f8e0 	bl	800f9d6 <_ZNK8touchgfx8Drawable4getXEv>
 8015816:	4603      	mov	r3, r0
 8015818:	461c      	mov	r4, r3
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	3370      	adds	r3, #112	; 0x70
 801581e:	4618      	mov	r0, r3
 8015820:	f7ff fd16 	bl	8015250 <_ZNK8touchgfx8Drawable8getWidthEv>
 8015824:	4603      	mov	r3, r0
 8015826:	4423      	add	r3, r4
 8015828:	f240 12df 	movw	r2, #479	; 0x1df
 801582c:	4293      	cmp	r3, r2
 801582e:	bfcc      	ite	gt
 8015830:	2301      	movgt	r3, #1
 8015832:	2300      	movle	r3, #0
 8015834:	b2db      	uxtb	r3, r3
 8015836:	2b00      	cmp	r3, #0
 8015838:	d001      	beq.n	801583e <_ZN8PongView15check_collisionEv+0x176>
		return 4;
 801583a:	2304      	movs	r3, #4
 801583c:	e000      	b.n	8015840 <_ZN8PongView15check_collisionEv+0x178>
	}

	return 0;
 801583e:	2300      	movs	r3, #0
}
 8015840:	4618      	mov	r0, r3
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bdb0      	pop	{r4, r5, r7, pc}

08015848 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	4a09      	ldr	r2, [pc, #36]	; (8015878 <_ZN15screenPresenterD1Ev+0x30>)
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	601a      	str	r2, [r3, #0]
 8015856:	4a09      	ldr	r2, [pc, #36]	; (801587c <_ZN15screenPresenterD1Ev+0x34>)
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	605a      	str	r2, [r3, #4]
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	3304      	adds	r3, #4
 8015860:	4618      	mov	r0, r3
 8015862:	f7ff fae9 	bl	8014e38 <_ZN13ModelListenerD1Ev>
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	4618      	mov	r0, r3
 801586a:	f7ff faa1 	bl	8014db0 <_ZN8touchgfx9PresenterD1Ev>
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	4618      	mov	r0, r3
 8015872:	3708      	adds	r7, #8
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}
 8015878:	0802a040 	.word	0x0802a040
 801587c:	0802a058 	.word	0x0802a058

08015880 <_ZThn4_N15screenPresenterD1Ev>:
 8015880:	f1a0 0004 	sub.w	r0, r0, #4
 8015884:	e7e0      	b.n	8015848 <_ZN15screenPresenterD1Ev>
 8015886:	bf00      	nop

08015888 <_ZN15screenPresenterD0Ev>:
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
 8015890:	6878      	ldr	r0, [r7, #4]
 8015892:	f7ff ffd9 	bl	8015848 <_ZN15screenPresenterD1Ev>
 8015896:	2110      	movs	r1, #16
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	f011 fe5b 	bl	8027554 <_ZdlPvj>
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	4618      	mov	r0, r3
 80158a2:	3708      	adds	r7, #8
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}

080158a8 <_ZThn4_N15screenPresenterD0Ev>:
 80158a8:	f1a0 0004 	sub.w	r0, r0, #4
 80158ac:	e7ec      	b.n	8015888 <_ZN15screenPresenterD0Ev>
	...

080158b0 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b082      	sub	sp, #8
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
 80158b8:	6039      	str	r1, [r7, #0]
    : view(v)
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	4618      	mov	r0, r3
 80158be:	f7ff fa97 	bl	8014df0 <_ZN8touchgfx9PresenterC1Ev>
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	3304      	adds	r3, #4
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7ff faa2 	bl	8014e10 <_ZN13ModelListenerC1Ev>
 80158cc:	4a06      	ldr	r2, [pc, #24]	; (80158e8 <_ZN15screenPresenterC1ER10screenView+0x38>)
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	601a      	str	r2, [r3, #0]
 80158d2:	4a06      	ldr	r2, [pc, #24]	; (80158ec <_ZN15screenPresenterC1ER10screenView+0x3c>)
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	605a      	str	r2, [r3, #4]
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	683a      	ldr	r2, [r7, #0]
 80158dc:	60da      	str	r2, [r3, #12]
{

}
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	4618      	mov	r0, r3
 80158e2:	3708      	adds	r7, #8
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	0802a040 	.word	0x0802a040
 80158ec:	0802a058 	.word	0x0802a058

080158f0 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 80158f0:	b480      	push	{r7}
 80158f2:	b083      	sub	sp, #12
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]

}
 80158f8:	bf00      	nop
 80158fa:	370c      	adds	r7, #12
 80158fc:	46bd      	mov	sp, r7
 80158fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015902:	4770      	bx	lr

08015904 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8015904:	b480      	push	{r7}
 8015906:	b083      	sub	sp, #12
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]

}
 801590c:	bf00      	nop
 801590e:	370c      	adds	r7, #12
 8015910:	46bd      	mov	sp, r7
 8015912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015916:	4770      	bx	lr

08015918 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8015918:	b580      	push	{r7, lr}
 801591a:	b082      	sub	sp, #8
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
 8015920:	4a05      	ldr	r2, [pc, #20]	; (8015938 <_ZN10screenViewD1Ev+0x20>)
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	601a      	str	r2, [r3, #0]
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	4618      	mov	r0, r3
 801592a:	f7fe fd5b 	bl	80143e4 <_ZN14screenViewBaseD1Ev>
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	4618      	mov	r0, r3
 8015932:	3708      	adds	r7, #8
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}
 8015938:	0802a068 	.word	0x0802a068

0801593c <_ZN10screenViewD0Ev>:
 801593c:	b580      	push	{r7, lr}
 801593e:	b082      	sub	sp, #8
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
 8015944:	6878      	ldr	r0, [r7, #4]
 8015946:	f7ff ffe7 	bl	8015918 <_ZN10screenViewD1Ev>
 801594a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801594e:	6878      	ldr	r0, [r7, #4]
 8015950:	f011 fe00 	bl	8027554 <_ZdlPvj>
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	4618      	mov	r0, r3
 8015958:	3708      	adds	r7, #8
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
	...

08015960 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8015960:	b580      	push	{r7, lr}
 8015962:	b082      	sub	sp, #8
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	4618      	mov	r0, r3
 801596c:	f7fe fd84 	bl	8014478 <_ZN14screenViewBaseC1Ev>
 8015970:	4a03      	ldr	r2, [pc, #12]	; (8015980 <_ZN10screenViewC1Ev+0x20>)
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	601a      	str	r2, [r3, #0]
{

}
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	4618      	mov	r0, r3
 801597a:	3708      	adds	r7, #8
 801597c:	46bd      	mov	sp, r7
 801597e:	bd80      	pop	{r7, pc}
 8015980:	0802a068 	.word	0x0802a068

08015984 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b082      	sub	sp, #8
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	4618      	mov	r0, r3
 8015990:	f7fe fee2 	bl	8014758 <_ZN14screenViewBase11setupScreenEv>

}
 8015994:	bf00      	nop
 8015996:	3708      	adds	r7, #8
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}

0801599c <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b082      	sub	sp, #8
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	4618      	mov	r0, r3
 80159a8:	f7fc fb22 	bl	8011ff0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80159ac:	bf00      	nop
 80159ae:	3708      	adds	r7, #8
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}

080159b4 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80159b4:	b480      	push	{r7}
 80159b6:	b083      	sub	sp, #12
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
    {
 80159bc:	4a04      	ldr	r2, [pc, #16]	; (80159d0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	601a      	str	r2, [r3, #0]
    }
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	4618      	mov	r0, r3
 80159c6:	370c      	adds	r7, #12
 80159c8:	46bd      	mov	sp, r7
 80159ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ce:	4770      	bx	lr
 80159d0:	0802a0b4 	.word	0x0802a0b4

080159d4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b082      	sub	sp, #8
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
    }
 80159dc:	6878      	ldr	r0, [r7, #4]
 80159de:	f7ff ffe9 	bl	80159b4 <_ZN8touchgfx15TouchControllerD1Ev>
 80159e2:	2104      	movs	r1, #4
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f011 fdb5 	bl	8027554 <_ZdlPvj>
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	4618      	mov	r0, r3
 80159ee:	3708      	adds	r7, #8
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}

080159f4 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b082      	sub	sp, #8
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	tsDriver = &ft5336_ts_drv;
 80159fc:	4b05      	ldr	r3, [pc, #20]	; (8015a14 <_ZN20STM32TouchController4initEv+0x20>)
 80159fe:	4a06      	ldr	r2, [pc, #24]	; (8015a18 <_ZN20STM32TouchController4initEv+0x24>)
 8015a00:	601a      	str	r2, [r3, #0]
	tsDriver->Start(TS_I2C_ADDRESS);
 8015a02:	4b04      	ldr	r3, [pc, #16]	; (8015a14 <_ZN20STM32TouchController4initEv+0x20>)
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	68db      	ldr	r3, [r3, #12]
 8015a08:	2070      	movs	r0, #112	; 0x70
 8015a0a:	4798      	blx	r3

}
 8015a0c:	bf00      	nop
 8015a0e:	3708      	adds	r7, #8
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}
 8015a14:	200085fc 	.word	0x200085fc
 8015a18:	20000004 	.word	0x20000004

08015a1c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b084      	sub	sp, #16
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	60b9      	str	r1, [r7, #8]
 8015a26:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	if (tsDriver)
 8015a28:	4b0f      	ldr	r3, [pc, #60]	; (8015a68 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d015      	beq.n	8015a5c <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    {
	        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8015a30:	4b0d      	ldr	r3, [pc, #52]	; (8015a68 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	691b      	ldr	r3, [r3, #16]
 8015a36:	2070      	movs	r0, #112	; 0x70
 8015a38:	4798      	blx	r3
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	bf14      	ite	ne
 8015a40:	2301      	movne	r3, #1
 8015a42:	2300      	moveq	r3, #0
 8015a44:	b2db      	uxtb	r3, r3
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d008      	beq.n	8015a5c <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	        {
	            /* Get each touch coordinates */
	            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8015a4a:	4b07      	ldr	r3, [pc, #28]	; (8015a68 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	695b      	ldr	r3, [r3, #20]
 8015a50:	68ba      	ldr	r2, [r7, #8]
 8015a52:	6879      	ldr	r1, [r7, #4]
 8015a54:	2070      	movs	r0, #112	; 0x70
 8015a56:	4798      	blx	r3
	            return true;
 8015a58:	2301      	movs	r3, #1
 8015a5a:	e000      	b.n	8015a5e <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
	        }
	    }


    return false;
 8015a5c:	2300      	movs	r3, #0
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3710      	adds	r7, #16
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	200085fc 	.word	0x200085fc

08015a6c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b082      	sub	sp, #8
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
 8015a74:	4a05      	ldr	r2, [pc, #20]	; (8015a8c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	601a      	str	r2, [r3, #0]
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f7ff ff99 	bl	80159b4 <_ZN8touchgfx15TouchControllerD1Ev>
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	4618      	mov	r0, r3
 8015a86:	3708      	adds	r7, #8
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	0802a09c 	.word	0x0802a09c

08015a90 <_ZN20STM32TouchControllerD0Ev>:
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b082      	sub	sp, #8
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f7ff ffe7 	bl	8015a6c <_ZN20STM32TouchControllerD1Ev>
 8015a9e:	2104      	movs	r1, #4
 8015aa0:	6878      	ldr	r0, [r7, #4]
 8015aa2:	f011 fd57 	bl	8027554 <_ZdlPvj>
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3708      	adds	r7, #8
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}

08015ab0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	b083      	sub	sp, #12
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	71fb      	strb	r3, [r7, #7]

}
 8015aba:	bf00      	nop
 8015abc:	370c      	adds	r7, #12
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac4:	4770      	bx	lr

08015ac6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8015ac6:	b480      	push	{r7}
 8015ac8:	b083      	sub	sp, #12
 8015aca:	af00      	add	r7, sp, #0
 8015acc:	4603      	mov	r3, r0
 8015ace:	71fb      	strb	r3, [r7, #7]

}
 8015ad0:	bf00      	nop
 8015ad2:	370c      	adds	r7, #12
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ada:	4770      	bx	lr

08015adc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8015adc:	b480      	push	{r7}
 8015ade:	b083      	sub	sp, #12
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	71fb      	strb	r3, [r7, #7]

}
 8015ae6:	bf00      	nop
 8015ae8:	370c      	adds	r7, #12
 8015aea:	46bd      	mov	sp, r7
 8015aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af0:	4770      	bx	lr
	...

08015af4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8015af4:	b480      	push	{r7}
 8015af6:	b083      	sub	sp, #12
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
    {
 8015afc:	4a04      	ldr	r2, [pc, #16]	; (8015b10 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	601a      	str	r2, [r3, #0]
    }
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	4618      	mov	r0, r3
 8015b06:	370c      	adds	r7, #12
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0e:	4770      	bx	lr
 8015b10:	0802a9f4 	.word	0x0802a9f4

08015b14 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b082      	sub	sp, #8
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
    }
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f7ff ffe9 	bl	8015af4 <_ZN8touchgfx3HALD1Ev>
 8015b22:	2178      	movs	r1, #120	; 0x78
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f011 fd15 	bl	8027554 <_ZdlPvj>
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	3708      	adds	r7, #8
 8015b30:	46bd      	mov	sp, r7
 8015b32:	bd80      	pop	{r7, pc}

08015b34 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8015b34:	b480      	push	{r7}
 8015b36:	b083      	sub	sp, #12
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
 8015b3c:	460b      	mov	r3, r1
 8015b3e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	78fa      	ldrb	r2, [r7, #3]
 8015b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	2201      	movs	r2, #1
 8015b4c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8015b50:	bf00      	nop
 8015b52:	370c      	adds	r7, #12
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr

08015b5c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b082      	sub	sp, #8
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	685a      	ldr	r2, [r3, #4]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	685b      	ldr	r3, [r3, #4]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	4610      	mov	r0, r2
 8015b72:	4798      	blx	r3
 8015b74:	4603      	mov	r3, r0
    }
 8015b76:	4618      	mov	r0, r3
 8015b78:	3708      	adds	r7, #8
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}

08015b7e <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8015b7e:	b580      	push	{r7, lr}
 8015b80:	b082      	sub	sp, #8
 8015b82:	af00      	add	r7, sp, #0
 8015b84:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f002 fd9e 	bl	80186c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	3390      	adds	r3, #144	; 0x90
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	6878      	ldr	r0, [r7, #4]
 8015b96:	4798      	blx	r3
    }
 8015b98:	bf00      	nop
 8015b9a:	3708      	adds	r7, #8
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8015ba0:	b480      	push	{r7}
 8015ba2:	b083      	sub	sp, #12
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	6039      	str	r1, [r7, #0]
        return false;
 8015baa:	2300      	movs	r3, #0
    }
 8015bac:	4618      	mov	r0, r3
 8015bae:	370c      	adds	r7, #12
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb6:	4770      	bx	lr

08015bb8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    TOUCHGFX_DEPRECATED(
 8015bb8:	b590      	push	{r4, r7, lr}
 8015bba:	b08b      	sub	sp, #44	; 0x2c
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	60f8      	str	r0, [r7, #12]
 8015bc0:	60b9      	str	r1, [r7, #8]
 8015bc2:	4611      	mov	r1, r2
 8015bc4:	461a      	mov	r2, r3
 8015bc6:	460b      	mov	r3, r1
 8015bc8:	80fb      	strh	r3, [r7, #6]
 8015bca:	4613      	mov	r3, r2
 8015bcc:	717b      	strb	r3, [r7, #5]
        uint16_t stride = lcd().framebufferStride();
 8015bce:	f7fa f81f 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8015bd2:	4602      	mov	r2, r0
 8015bd4:	6813      	ldr	r3, [r2, #0]
 8015bd6:	3324      	adds	r3, #36	; 0x24
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	4610      	mov	r0, r2
 8015bdc:	4798      	blx	r3
 8015bde:	4603      	mov	r3, r0
 8015be0:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8015be2:	8b7b      	ldrh	r3, [r7, #26]
 8015be4:	4a3d      	ldr	r2, [pc, #244]	; (8015cdc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8015be6:	8812      	ldrh	r2, [r2, #0]
 8015be8:	fb02 f303 	mul.w	r3, r2, r3
 8015bec:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8015bee:	68bb      	ldr	r3, [r7, #8]
 8015bf0:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8015bfa:	797b      	ldrb	r3, [r7, #5]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d005      	beq.n	8015c0c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8015c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c02:	697b      	ldr	r3, [r7, #20]
 8015c04:	4413      	add	r3, r2
 8015c06:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8015c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c0a:	623b      	str	r3, [r7, #32]
        if (useAnimationStorage)
 8015c0c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d005      	beq.n	8015c20 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8015c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	4413      	add	r3, r2
 8015c1a:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8015c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1e:	61fb      	str	r3, [r7, #28]
        switch (depth)
 8015c20:	88fb      	ldrh	r3, [r7, #6]
 8015c22:	3b01      	subs	r3, #1
 8015c24:	2b1f      	cmp	r3, #31
 8015c26:	d84d      	bhi.n	8015cc4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8015c28:	a201      	add	r2, pc, #4	; (adr r2, 8015c30 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8015c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c2e:	bf00      	nop
 8015c30:	08015cb1 	.word	0x08015cb1
 8015c34:	08015cb1 	.word	0x08015cb1
 8015c38:	08015cc5 	.word	0x08015cc5
 8015c3c:	08015cb1 	.word	0x08015cb1
 8015c40:	08015cc5 	.word	0x08015cc5
 8015c44:	08015cc5 	.word	0x08015cc5
 8015c48:	08015cc5 	.word	0x08015cc5
 8015c4c:	08015cb1 	.word	0x08015cb1
 8015c50:	08015cc5 	.word	0x08015cc5
 8015c54:	08015cc5 	.word	0x08015cc5
 8015c58:	08015cc5 	.word	0x08015cc5
 8015c5c:	08015cc5 	.word	0x08015cc5
 8015c60:	08015cc5 	.word	0x08015cc5
 8015c64:	08015cc5 	.word	0x08015cc5
 8015c68:	08015cc5 	.word	0x08015cc5
 8015c6c:	08015cb1 	.word	0x08015cb1
 8015c70:	08015cc5 	.word	0x08015cc5
 8015c74:	08015cc5 	.word	0x08015cc5
 8015c78:	08015cc5 	.word	0x08015cc5
 8015c7c:	08015cc5 	.word	0x08015cc5
 8015c80:	08015cc5 	.word	0x08015cc5
 8015c84:	08015cc5 	.word	0x08015cc5
 8015c88:	08015cc5 	.word	0x08015cc5
 8015c8c:	08015cb1 	.word	0x08015cb1
 8015c90:	08015cc5 	.word	0x08015cc5
 8015c94:	08015cc5 	.word	0x08015cc5
 8015c98:	08015cc5 	.word	0x08015cc5
 8015c9c:	08015cc5 	.word	0x08015cc5
 8015ca0:	08015cc5 	.word	0x08015cc5
 8015ca4:	08015cc5 	.word	0x08015cc5
 8015ca8:	08015cc5 	.word	0x08015cc5
 8015cac:	08015cb1 	.word	0x08015cb1
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	3374      	adds	r3, #116	; 0x74
 8015cb6:	681c      	ldr	r4, [r3, #0]
 8015cb8:	69fb      	ldr	r3, [r7, #28]
 8015cba:	6a3a      	ldr	r2, [r7, #32]
 8015cbc:	68b9      	ldr	r1, [r7, #8]
 8015cbe:	68f8      	ldr	r0, [r7, #12]
 8015cc0:	47a0      	blx	r4
            break;
 8015cc2:	e006      	b.n	8015cd2 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
            assert(0 && "Unsupported bit depth");
 8015cc4:	4b06      	ldr	r3, [pc, #24]	; (8015ce0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8015cc6:	4a07      	ldr	r2, [pc, #28]	; (8015ce4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8015cc8:	f240 216f 	movw	r1, #623	; 0x26f
 8015ccc:	4806      	ldr	r0, [pc, #24]	; (8015ce8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8015cce:	f011 fc6d 	bl	80275ac <__assert_func>
    }
 8015cd2:	bf00      	nop
 8015cd4:	372c      	adds	r7, #44	; 0x2c
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	bd90      	pop	{r4, r7, pc}
 8015cda:	bf00      	nop
 8015cdc:	2000b310 	.word	0x2000b310
 8015ce0:	08028cc8 	.word	0x08028cc8
 8015ce4:	0802a1c8 	.word	0x0802a1c8
 8015ce8:	08028ce8 	.word	0x08028ce8

08015cec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b084      	sub	sp, #16
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	60f8      	str	r0, [r7, #12]
 8015cf4:	60b9      	str	r1, [r7, #8]
 8015cf6:	607a      	str	r2, [r7, #4]
 8015cf8:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8015cfa:	68bb      	ldr	r3, [r7, #8]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d106      	bne.n	8015d0e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8015d00:	4b11      	ldr	r3, [pc, #68]	; (8015d48 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8015d02:	4a12      	ldr	r2, [pc, #72]	; (8015d4c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8015d04:	f240 2182 	movw	r1, #642	; 0x282
 8015d08:	4811      	ldr	r0, [pc, #68]	; (8015d50 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8015d0a:	f011 fc4f 	bl	80275ac <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	68ba      	ldr	r2, [r7, #8]
 8015d12:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	687a      	ldr	r2, [r7, #4]
 8015d18:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	683a      	ldr	r2, [r7, #0]
 8015d1e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	bf14      	ite	ne
 8015d26:	2301      	movne	r3, #1
 8015d28:	2300      	moveq	r3, #0
 8015d2a:	b2da      	uxtb	r2, r3
 8015d2c:	4b09      	ldr	r3, [pc, #36]	; (8015d54 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8015d2e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	bf14      	ite	ne
 8015d36:	2301      	movne	r3, #1
 8015d38:	2300      	moveq	r3, #0
 8015d3a:	b2da      	uxtb	r2, r3
 8015d3c:	4b06      	ldr	r3, [pc, #24]	; (8015d58 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8015d3e:	701a      	strb	r2, [r3, #0]
    }
 8015d40:	bf00      	nop
 8015d42:	3710      	adds	r7, #16
 8015d44:	46bd      	mov	sp, r7
 8015d46:	bd80      	pop	{r7, pc}
 8015d48:	08028d2c 	.word	0x08028d2c
 8015d4c:	0802a178 	.word	0x0802a178
 8015d50:	08028ce8 	.word	0x08028ce8
 8015d54:	2000b312 	.word	0x2000b312
 8015d58:	2000b313 	.word	0x2000b313

08015d5c <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
 8015d64:	460b      	mov	r3, r1
 8015d66:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d004      	beq.n	8015d7a <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d74:	887a      	ldrh	r2, [r7, #2]
 8015d76:	4610      	mov	r0, r2
 8015d78:	4798      	blx	r3
    }
 8015d7a:	bf00      	nop
 8015d7c:	3708      	adds	r7, #8
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bd80      	pop	{r7, pc}

08015d82 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8015d82:	b580      	push	{r7, lr}
 8015d84:	b082      	sub	sp, #8
 8015d86:	af00      	add	r7, sp, #0
 8015d88:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	685a      	ldr	r2, [r3, #4]
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	685b      	ldr	r3, [r3, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	3318      	adds	r3, #24
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	4610      	mov	r0, r2
 8015d9a:	4798      	blx	r3
 8015d9c:	4603      	mov	r3, r0
    }
 8015d9e:	4618      	mov	r0, r3
 8015da0:	3708      	adds	r7, #8
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}
	...

08015da8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8015da8:	b480      	push	{r7}
 8015daa:	b083      	sub	sp, #12
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	d017      	beq.n	8015df0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8015dc0:	4b1a      	ldr	r3, [pc, #104]	; (8015e2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015dc2:	781b      	ldrb	r3, [r3, #0]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d12a      	bne.n	8015e1e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8015dc8:	4b19      	ldr	r3, [pc, #100]	; (8015e30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015dca:	881a      	ldrh	r2, [r3, #0]
 8015dcc:	4b19      	ldr	r3, [pc, #100]	; (8015e34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015dce:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8015dd0:	4b19      	ldr	r3, [pc, #100]	; (8015e38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015dd2:	881a      	ldrh	r2, [r3, #0]
 8015dd4:	4b19      	ldr	r3, [pc, #100]	; (8015e3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015dd6:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8015dd8:	4b16      	ldr	r3, [pc, #88]	; (8015e34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015dda:	881a      	ldrh	r2, [r3, #0]
 8015ddc:	4b16      	ldr	r3, [pc, #88]	; (8015e38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015dde:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8015de0:	4b16      	ldr	r3, [pc, #88]	; (8015e3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015de2:	881a      	ldrh	r2, [r3, #0]
 8015de4:	4b12      	ldr	r3, [pc, #72]	; (8015e30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015de6:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8015de8:	4b10      	ldr	r3, [pc, #64]	; (8015e2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015dea:	2201      	movs	r2, #1
 8015dec:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8015dee:	e016      	b.n	8015e1e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8015df0:	4b0e      	ldr	r3, [pc, #56]	; (8015e2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015df2:	781b      	ldrb	r3, [r3, #0]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d012      	beq.n	8015e1e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8015df8:	4b0f      	ldr	r3, [pc, #60]	; (8015e38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015dfa:	881a      	ldrh	r2, [r3, #0]
 8015dfc:	4b0d      	ldr	r3, [pc, #52]	; (8015e34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015dfe:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8015e00:	4b0b      	ldr	r3, [pc, #44]	; (8015e30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015e02:	881a      	ldrh	r2, [r3, #0]
 8015e04:	4b0d      	ldr	r3, [pc, #52]	; (8015e3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015e06:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8015e08:	4b0c      	ldr	r3, [pc, #48]	; (8015e3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015e0a:	881a      	ldrh	r2, [r3, #0]
 8015e0c:	4b0a      	ldr	r3, [pc, #40]	; (8015e38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015e0e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8015e10:	4b08      	ldr	r3, [pc, #32]	; (8015e34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015e12:	881a      	ldrh	r2, [r3, #0]
 8015e14:	4b06      	ldr	r3, [pc, #24]	; (8015e30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015e16:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8015e18:	4b04      	ldr	r3, [pc, #16]	; (8015e2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	701a      	strb	r2, [r3, #0]
    }
 8015e1e:	bf00      	nop
 8015e20:	370c      	adds	r7, #12
 8015e22:	46bd      	mov	sp, r7
 8015e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e28:	4770      	bx	lr
 8015e2a:	bf00      	nop
 8015e2c:	2000b30c 	.word	0x2000b30c
 8015e30:	2000b308 	.word	0x2000b308
 8015e34:	2000b30e 	.word	0x2000b30e
 8015e38:	2000b30a 	.word	0x2000b30a
 8015e3c:	2000b310 	.word	0x2000b310

08015e40 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	f001 febf 	bl	8017bce <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8015e50:	bf00      	nop
 8015e52:	3708      	adds	r7, #8
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}

08015e58 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b082      	sub	sp, #8
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
 8015e60:	4a05      	ldr	r2, [pc, #20]	; (8015e78 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	601a      	str	r2, [r3, #0]
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f7ff fe43 	bl	8015af4 <_ZN8touchgfx3HALD1Ev>
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	4618      	mov	r0, r3
 8015e72:	3708      	adds	r7, #8
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}
 8015e78:	0802a3e0 	.word	0x0802a3e0

08015e7c <_ZN20TouchGFXGeneratedHALD0Ev>:
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b082      	sub	sp, #8
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f7ff ffe7 	bl	8015e58 <_ZN20TouchGFXGeneratedHALD1Ev>
 8015e8a:	2178      	movs	r1, #120	; 0x78
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f011 fb61 	bl	8027554 <_ZdlPvj>
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	4618      	mov	r0, r3
 8015e96:	3708      	adds	r7, #8
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}

08015e9c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b082      	sub	sp, #8
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f7ff ffca 	bl	8015e40 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8015eac:	bf00      	nop
 8015eae:	3708      	adds	r7, #8
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}

08015eb4 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b082      	sub	sp, #8
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	f001 fafc 	bl	80174bc <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8015ec4:	bf00      	nop
 8015ec6:	3708      	adds	r7, #8
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}

08015ecc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b082      	sub	sp, #8
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f001 fb7c 	bl	80175d4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8015edc:	4603      	mov	r3, r0
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3708      	adds	r7, #8
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}

08015ee6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8015ee6:	b580      	push	{r7, lr}
 8015ee8:	b082      	sub	sp, #8
 8015eea:	af00      	add	r7, sp, #0
 8015eec:	6078      	str	r0, [r7, #4]
 8015eee:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	6839      	ldr	r1, [r7, #0]
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f001 fb7b 	bl	80175f0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8015efa:	bf00      	nop
 8015efc:	3708      	adds	r7, #8
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}

08015f02 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015f02:	b580      	push	{r7, lr}
 8015f04:	b082      	sub	sp, #8
 8015f06:	af00      	add	r7, sp, #0
 8015f08:	6078      	str	r0, [r7, #4]
 8015f0a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	6839      	ldr	r1, [r7, #0]
 8015f10:	4618      	mov	r0, r3
 8015f12:	f001 fb83 	bl	801761c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8015f16:	bf00      	nop
 8015f18:	3708      	adds	r7, #8
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}

08015f1e <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015f1e:	b580      	push	{r7, lr}
 8015f20:	b084      	sub	sp, #16
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	60f8      	str	r0, [r7, #12]
 8015f26:	60b9      	str	r1, [r7, #8]
 8015f28:	607a      	str	r2, [r7, #4]
 8015f2a:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8015f2c:	68f8      	ldr	r0, [r7, #12]
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	687a      	ldr	r2, [r7, #4]
 8015f32:	68b9      	ldr	r1, [r7, #8]
 8015f34:	f001 ff85 	bl	8017e42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8015f38:	4603      	mov	r3, r0
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3710      	adds	r7, #16
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}

08015f42 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8015f42:	b580      	push	{r7, lr}
 8015f44:	b082      	sub	sp, #8
 8015f46:	af00      	add	r7, sp, #0
 8015f48:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f001 fae7 	bl	8017520 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8015f52:	bf00      	nop
 8015f54:	3708      	adds	r7, #8
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}

08015f5a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8015f5a:	b580      	push	{r7, lr}
 8015f5c:	b082      	sub	sp, #8
 8015f5e:	af00      	add	r7, sp, #0
 8015f60:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	4618      	mov	r0, r3
 8015f66:	f001 faeb 	bl	8017540 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8015f6a:	bf00      	nop
 8015f6c:	3708      	adds	r7, #8
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}

08015f72 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8015f72:	b580      	push	{r7, lr}
 8015f74:	b082      	sub	sp, #8
 8015f76:	af00      	add	r7, sp, #0
 8015f78:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f001 faed 	bl	801755c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8015f82:	bf00      	nop
 8015f84:	3708      	adds	r7, #8
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}

08015f8a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8015f8a:	b580      	push	{r7, lr}
 8015f8c:	b082      	sub	sp, #8
 8015f8e:	af00      	add	r7, sp, #0
 8015f90:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	4618      	mov	r0, r3
 8015f96:	f001 faef 	bl	8017578 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8015f9a:	bf00      	nop
 8015f9c:	3708      	adds	r7, #8
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bd80      	pop	{r7, pc}
	...

08015fa4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b082      	sub	sp, #8
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
 8015fac:	4a05      	ldr	r2, [pc, #20]	; (8015fc4 <_ZN11TouchGFXHALD1Ev+0x20>)
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	601a      	str	r2, [r3, #0]
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f7ff ff4f 	bl	8015e58 <_ZN20TouchGFXGeneratedHALD1Ev>
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}
 8015fc4:	0802a0cc 	.word	0x0802a0cc

08015fc8 <_ZN11TouchGFXHALD0Ev>:
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b082      	sub	sp, #8
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f7ff ffe7 	bl	8015fa4 <_ZN11TouchGFXHALD1Ev>
 8015fd6:	2178      	movs	r1, #120	; 0x78
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f011 fabb 	bl	8027554 <_ZdlPvj>
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	3708      	adds	r7, #8
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bd80      	pop	{r7, pc}

08015fe8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 8015fec:	2101      	movs	r1, #1
 8015fee:	4811      	ldr	r0, [pc, #68]	; (8016034 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8015ff0:	f7f6 f81e 	bl	800c030 <osSemaphoreCreate>
 8015ff4:	4602      	mov	r2, r0
 8015ff6:	4b10      	ldr	r3, [pc, #64]	; (8016038 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8015ff8:	601a      	str	r2, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8015ffa:	4b0f      	ldr	r3, [pc, #60]	; (8016038 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d105      	bne.n	801600e <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 8016002:	4b0e      	ldr	r3, [pc, #56]	; (801603c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8016004:	4a0e      	ldr	r2, [pc, #56]	; (8016040 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8016006:	2125      	movs	r1, #37	; 0x25
 8016008:	480e      	ldr	r0, [pc, #56]	; (8016044 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801600a:	f011 facf 	bl	80275ac <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 801600e:	2101      	movs	r1, #1
 8016010:	480d      	ldr	r0, [pc, #52]	; (8016048 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8016012:	f7f6 f80d 	bl	800c030 <osSemaphoreCreate>
 8016016:	4602      	mov	r2, r0
 8016018:	4b0c      	ldr	r3, [pc, #48]	; (801604c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801601a:	601a      	str	r2, [r3, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 801601c:	4b0b      	ldr	r3, [pc, #44]	; (801604c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d105      	bne.n	8016030 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 8016024:	4b0a      	ldr	r3, [pc, #40]	; (8016050 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 8016026:	4a06      	ldr	r2, [pc, #24]	; (8016040 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8016028:	2128      	movs	r1, #40	; 0x28
 801602a:	4806      	ldr	r0, [pc, #24]	; (8016044 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801602c:	f011 fabe 	bl	80275ac <__assert_func>
}
 8016030:	bf00      	nop
 8016032:	bd80      	pop	{r7, pc}
 8016034:	0802a21c 	.word	0x0802a21c
 8016038:	20008600 	.word	0x20008600
 801603c:	08028d64 	.word	0x08028d64
 8016040:	0802a22c 	.word	0x0802a22c
 8016044:	08028db0 	.word	0x08028db0
 8016048:	0802a224 	.word	0x0802a224
 801604c:	20008604 	.word	0x20008604
 8016050:	08028ddc 	.word	0x08028ddc

08016054 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8016054:	b580      	push	{r7, lr}
 8016056:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8016058:	4b04      	ldr	r3, [pc, #16]	; (801606c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	f04f 31ff 	mov.w	r1, #4294967295
 8016060:	4618      	mov	r0, r3
 8016062:	f7f6 f825 	bl	800c0b0 <osSemaphoreWait>
}
 8016066:	bf00      	nop
 8016068:	bd80      	pop	{r7, pc}
 801606a:	bf00      	nop
 801606c:	20008600 	.word	0x20008600

08016070 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8016070:	b580      	push	{r7, lr}
 8016072:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8016074:	4b03      	ldr	r3, [pc, #12]	; (8016084 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	4618      	mov	r0, r3
 801607a:	f7f6 f867 	bl	800c14c <osSemaphoreRelease>
}
 801607e:	bf00      	nop
 8016080:	bd80      	pop	{r7, pc}
 8016082:	bf00      	nop
 8016084:	20008600 	.word	0x20008600

08016088 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8016088:	b580      	push	{r7, lr}
 801608a:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 801608c:	4b03      	ldr	r3, [pc, #12]	; (801609c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	2100      	movs	r1, #0
 8016092:	4618      	mov	r0, r3
 8016094:	f7f6 f80c 	bl	800c0b0 <osSemaphoreWait>
}
 8016098:	bf00      	nop
 801609a:	bd80      	pop	{r7, pc}
 801609c:	20008600 	.word	0x20008600

080160a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 80160a4:	4b03      	ldr	r3, [pc, #12]	; (80160b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	4618      	mov	r0, r3
 80160aa:	f7f6 f84f 	bl	800c14c <osSemaphoreRelease>
}
 80160ae:	bf00      	nop
 80160b0:	bd80      	pop	{r7, pc}
 80160b2:	bf00      	nop
 80160b4:	20008600 	.word	0x20008600

080160b8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 80160bc:	4b03      	ldr	r3, [pc, #12]	; (80160cc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	4618      	mov	r0, r3
 80160c2:	f7f6 f843 	bl	800c14c <osSemaphoreRelease>
}
 80160c6:	bf00      	nop
 80160c8:	bd80      	pop	{r7, pc}
 80160ca:	bf00      	nop
 80160cc:	20008604 	.word	0x20008604

080160d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 80160d4:	4b07      	ldr	r3, [pc, #28]	; (80160f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	2100      	movs	r1, #0
 80160da:	4618      	mov	r0, r3
 80160dc:	f7f5 ffe8 	bl	800c0b0 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 80160e0:	4b04      	ldr	r3, [pc, #16]	; (80160f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	f04f 31ff 	mov.w	r1, #4294967295
 80160e8:	4618      	mov	r0, r3
 80160ea:	f7f5 ffe1 	bl	800c0b0 <osSemaphoreWait>
}
 80160ee:	bf00      	nop
 80160f0:	bd80      	pop	{r7, pc}
 80160f2:	bf00      	nop
 80160f4:	20008604 	.word	0x20008604

080160f8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	4603      	mov	r3, r0
 8016100:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8016102:	88fb      	ldrh	r3, [r7, #6]
 8016104:	4618      	mov	r0, r3
 8016106:	f7f5 ff7f 	bl	800c008 <osDelay>
}
 801610a:	bf00      	nop
 801610c:	3708      	adds	r7, #8
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}
	...

08016114 <__NVIC_EnableIRQ>:
{
 8016114:	b480      	push	{r7}
 8016116:	b083      	sub	sp, #12
 8016118:	af00      	add	r7, sp, #0
 801611a:	4603      	mov	r3, r0
 801611c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801611e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016122:	2b00      	cmp	r3, #0
 8016124:	db0d      	blt.n	8016142 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801612a:	b2db      	uxtb	r3, r3
 801612c:	f003 021f 	and.w	r2, r3, #31
 8016130:	4907      	ldr	r1, [pc, #28]	; (8016150 <__NVIC_EnableIRQ+0x3c>)
 8016132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016136:	095b      	lsrs	r3, r3, #5
 8016138:	2001      	movs	r0, #1
 801613a:	fa00 f202 	lsl.w	r2, r0, r2
 801613e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016142:	bf00      	nop
 8016144:	370c      	adds	r7, #12
 8016146:	46bd      	mov	sp, r7
 8016148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614c:	4770      	bx	lr
 801614e:	bf00      	nop
 8016150:	e000e100 	.word	0xe000e100

08016154 <__NVIC_DisableIRQ>:
{
 8016154:	b480      	push	{r7}
 8016156:	b083      	sub	sp, #12
 8016158:	af00      	add	r7, sp, #0
 801615a:	4603      	mov	r3, r0
 801615c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801615e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016162:	2b00      	cmp	r3, #0
 8016164:	db12      	blt.n	801618c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801616a:	b2db      	uxtb	r3, r3
 801616c:	f003 021f 	and.w	r2, r3, #31
 8016170:	4909      	ldr	r1, [pc, #36]	; (8016198 <__NVIC_DisableIRQ+0x44>)
 8016172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016176:	095b      	lsrs	r3, r3, #5
 8016178:	2001      	movs	r0, #1
 801617a:	fa00 f202 	lsl.w	r2, r0, r2
 801617e:	3320      	adds	r3, #32
 8016180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016184:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8016188:	f3bf 8f6f 	isb	sy
}
 801618c:	bf00      	nop
 801618e:	370c      	adds	r7, #12
 8016190:	46bd      	mov	sp, r7
 8016192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016196:	4770      	bx	lr
 8016198:	e000e100 	.word	0xe000e100

0801619c <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 801619c:	b480      	push	{r7}
 801619e:	b083      	sub	sp, #12
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
        : color(0)
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2200      	movs	r2, #0
 80161a8:	601a      	str	r2, [r3, #0]
    }
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	4618      	mov	r0, r3
 80161ae:	370c      	adds	r7, #12
 80161b0:	46bd      	mov	sp, r7
 80161b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b6:	4770      	bx	lr

080161b8 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 80161b8:	b480      	push	{r7}
 80161ba:	b083      	sub	sp, #12
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
        return color;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	681b      	ldr	r3, [r3, #0]
    }
 80161c4:	4618      	mov	r0, r3
 80161c6:	370c      	adds	r7, #12
 80161c8:	46bd      	mov	sp, r7
 80161ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ce:	4770      	bx	lr

080161d0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80161d0:	b480      	push	{r7}
 80161d2:	b083      	sub	sp, #12
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
    {
 80161d8:	4a04      	ldr	r2, [pc, #16]	; (80161ec <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	601a      	str	r2, [r3, #0]
    }
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	4618      	mov	r0, r3
 80161e2:	370c      	adds	r7, #12
 80161e4:	46bd      	mov	sp, r7
 80161e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ea:	4770      	bx	lr
 80161ec:	0802a2b4 	.word	0x0802a2b4

080161f0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b082      	sub	sp, #8
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
    }
 80161f8:	6878      	ldr	r0, [r7, #4]
 80161fa:	f7ff ffe9 	bl	80161d0 <_ZN8touchgfx9DMA_QueueD1Ev>
 80161fe:	2104      	movs	r1, #4
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f011 f9a7 	bl	8027554 <_ZdlPvj>
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	4618      	mov	r0, r3
 801620a:	3708      	adds	r7, #8
 801620c:	46bd      	mov	sp, r7
 801620e:	bd80      	pop	{r7, pc}

08016210 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8016210:	b580      	push	{r7, lr}
 8016212:	b082      	sub	sp, #8
 8016214:	af00      	add	r7, sp, #0
 8016216:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	3344      	adds	r3, #68	; 0x44
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	6878      	ldr	r0, [r7, #4]
 8016222:	4798      	blx	r3
    }
 8016224:	bf00      	nop
 8016226:	3708      	adds	r7, #8
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}

0801622c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 801622c:	b480      	push	{r7}
 801622e:	b083      	sub	sp, #12
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8016234:	2300      	movs	r3, #0
    }
 8016236:	4618      	mov	r0, r3
 8016238:	370c      	adds	r7, #12
 801623a:	46bd      	mov	sp, r7
 801623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016240:	4770      	bx	lr
	...

08016244 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8016244:	b480      	push	{r7}
 8016246:	b083      	sub	sp, #12
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
    {
 801624c:	4a04      	ldr	r2, [pc, #16]	; (8016260 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	601a      	str	r2, [r3, #0]
    }
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	4618      	mov	r0, r3
 8016256:	370c      	adds	r7, #12
 8016258:	46bd      	mov	sp, r7
 801625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625e:	4770      	bx	lr
 8016260:	0802ae38 	.word	0x0802ae38

08016264 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8016264:	b580      	push	{r7, lr}
 8016266:	b082      	sub	sp, #8
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
    }
 801626c:	6878      	ldr	r0, [r7, #4]
 801626e:	f7ff ffe9 	bl	8016244 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016272:	210c      	movs	r1, #12
 8016274:	6878      	ldr	r0, [r7, #4]
 8016276:	f011 f96d 	bl	8027554 <_ZdlPvj>
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	4618      	mov	r0, r3
 801627e:	3708      	adds	r7, #8
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}

08016284 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016284:	b480      	push	{r7}
 8016286:	b083      	sub	sp, #12
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
 801628c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801628e:	4a09      	ldr	r2, [pc, #36]	; (80162b4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	601a      	str	r2, [r3, #0]
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	683a      	ldr	r2, [r7, #0]
 8016298:	605a      	str	r2, [r3, #4]
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	2200      	movs	r2, #0
 801629e:	721a      	strb	r2, [r3, #8]
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2200      	movs	r2, #0
 80162a4:	725a      	strb	r2, [r3, #9]
    {
    }
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	4618      	mov	r0, r3
 80162aa:	370c      	adds	r7, #12
 80162ac:	46bd      	mov	sp, r7
 80162ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b2:	4770      	bx	lr
 80162b4:	0802ae38 	.word	0x0802ae38

080162b8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b082      	sub	sp, #8
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	685a      	ldr	r2, [r3, #4]
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	685b      	ldr	r3, [r3, #4]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	3314      	adds	r3, #20
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	4610      	mov	r0, r2
 80162d0:	4798      	blx	r3
    }
 80162d2:	bf00      	nop
 80162d4:	3708      	adds	r7, #8
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}

080162da <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80162da:	b580      	push	{r7, lr}
 80162dc:	b082      	sub	sp, #8
 80162de:	af00      	add	r7, sp, #0
 80162e0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80162e2:	687a      	ldr	r2, [r7, #4]
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	3328      	adds	r3, #40	; 0x28
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	4610      	mov	r0, r2
 80162ee:	4798      	blx	r3
    }
 80162f0:	bf00      	nop
 80162f2:	3708      	adds	r7, #8
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}

080162f8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80162f8:	b480      	push	{r7}
 80162fa:	b085      	sub	sp, #20
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	60f8      	str	r0, [r7, #12]
 8016300:	60b9      	str	r1, [r7, #8]
 8016302:	607a      	str	r2, [r7, #4]
 8016304:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8016310:	68ba      	ldr	r2, [r7, #8]
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	430a      	orrs	r2, r1
 8016318:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016320:	f023 0107 	bic.w	r1, r3, #7
 8016324:	687a      	ldr	r2, [r7, #4]
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	430a      	orrs	r2, r1
 801632c:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016334:	4b06      	ldr	r3, [pc, #24]	; (8016350 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8016336:	4013      	ands	r3, r2
 8016338:	6839      	ldr	r1, [r7, #0]
 801633a:	68fa      	ldr	r2, [r7, #12]
 801633c:	6812      	ldr	r2, [r2, #0]
 801633e:	430b      	orrs	r3, r1
 8016340:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8016342:	2300      	movs	r3, #0
}
 8016344:	4618      	mov	r0, r3
 8016346:	3714      	adds	r7, #20
 8016348:	46bd      	mov	sp, r7
 801634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634e:	4770      	bx	lr
 8016350:	ffffc000 	.word	0xffffc000

08016354 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b082      	sub	sp, #8
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 801635c:	f7f9 fc4c 	bl	800fbf8 <_ZN8touchgfx3HAL11getInstanceEv>
 8016360:	4603      	mov	r3, r0
 8016362:	4618      	mov	r0, r3
 8016364:	f7ff ffa8 	bl	80162b8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8016368:	bf00      	nop
 801636a:	3708      	adds	r7, #8
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}

08016370 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b082      	sub	sp, #8
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
    assert(0);
 8016378:	4b02      	ldr	r3, [pc, #8]	; (8016384 <DMA2D_XferErrorCallback+0x14>)
 801637a:	4a03      	ldr	r2, [pc, #12]	; (8016388 <DMA2D_XferErrorCallback+0x18>)
 801637c:	213e      	movs	r1, #62	; 0x3e
 801637e:	4803      	ldr	r0, [pc, #12]	; (801638c <DMA2D_XferErrorCallback+0x1c>)
 8016380:	f011 f914 	bl	80275ac <__assert_func>
 8016384:	08028e18 	.word	0x08028e18
 8016388:	0802a2d0 	.word	0x0802a2d0
 801638c:	08028e1c 	.word	0x08028e1c

08016390 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8016390:	b580      	push	{r7, lr}
 8016392:	b082      	sub	sp, #8
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	3318      	adds	r3, #24
 801639c:	4618      	mov	r0, r3
 801639e:	f7ff fefd 	bl	801619c <_ZN8touchgfx9colortypeC1Ev>
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	4618      	mov	r0, r3
 80163a6:	3708      	adds	r7, #8
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}

080163ac <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 80163ac:	b5b0      	push	{r4, r5, r7, lr}
 80163ae:	b082      	sub	sp, #8
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80163b4:	687a      	ldr	r2, [r7, #4]
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	330c      	adds	r3, #12
 80163ba:	4619      	mov	r1, r3
 80163bc:	4610      	mov	r0, r2
 80163be:	f7ff ff61 	bl	8016284 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80163c2:	4a0e      	ldr	r2, [pc, #56]	; (80163fc <_ZN10STM32F7DMAC1Ev+0x50>)
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	601a      	str	r2, [r3, #0]
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f103 000c 	add.w	r0, r3, #12
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	3320      	adds	r3, #32
 80163d2:	2260      	movs	r2, #96	; 0x60
 80163d4:	4619      	mov	r1, r3
 80163d6:	f002 fa9d 	bl	8018914 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	3320      	adds	r3, #32
 80163de:	245f      	movs	r4, #95	; 0x5f
 80163e0:	461d      	mov	r5, r3
 80163e2:	2c00      	cmp	r4, #0
 80163e4:	db05      	blt.n	80163f2 <_ZN10STM32F7DMAC1Ev+0x46>
 80163e6:	4628      	mov	r0, r5
 80163e8:	f7ff ffd2 	bl	8016390 <_ZN8touchgfx6BlitOpC1Ev>
 80163ec:	3520      	adds	r5, #32
 80163ee:	3c01      	subs	r4, #1
 80163f0:	e7f7      	b.n	80163e2 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	4618      	mov	r0, r3
 80163f6:	3708      	adds	r7, #8
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bdb0      	pop	{r4, r5, r7, pc}
 80163fc:	0802a264 	.word	0x0802a264

08016400 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8016400:	b580      	push	{r7, lr}
 8016402:	b082      	sub	sp, #8
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
 8016408:	4a0b      	ldr	r2, [pc, #44]	; (8016438 <_ZN10STM32F7DMAD1Ev+0x38>)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 801640e:	480b      	ldr	r0, [pc, #44]	; (801643c <_ZN10STM32F7DMAD1Ev+0x3c>)
 8016410:	f7ed fc76 	bl	8003d00 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016414:	205a      	movs	r0, #90	; 0x5a
 8016416:	f7ff fe9d 	bl	8016154 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	330c      	adds	r3, #12
 801641e:	4618      	mov	r0, r3
 8016420:	f000 faa4 	bl	801696c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	4618      	mov	r0, r3
 8016428:	f7ff ff0c 	bl	8016244 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	4618      	mov	r0, r3
 8016430:	3708      	adds	r7, #8
 8016432:	46bd      	mov	sp, r7
 8016434:	bd80      	pop	{r7, pc}
 8016436:	bf00      	nop
 8016438:	0802a264 	.word	0x0802a264
 801643c:	2000bb6c 	.word	0x2000bb6c

08016440 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8016440:	b580      	push	{r7, lr}
 8016442:	b082      	sub	sp, #8
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
}
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f7ff ffd9 	bl	8016400 <_ZN10STM32F7DMAD1Ev>
 801644e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f011 f87e 	bl	8027554 <_ZdlPvj>
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	4618      	mov	r0, r3
 801645c:	3708      	adds	r7, #8
 801645e:	46bd      	mov	sp, r7
 8016460:	bd80      	pop	{r7, pc}
	...

08016464 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b082      	sub	sp, #8
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 801646c:	4b09      	ldr	r3, [pc, #36]	; (8016494 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801646e:	4a0a      	ldr	r2, [pc, #40]	; (8016498 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8016470:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8016472:	4808      	ldr	r0, [pc, #32]	; (8016494 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016474:	f7ed fbfa 	bl	8003c6c <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8016478:	4b06      	ldr	r3, [pc, #24]	; (8016494 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801647a:	4a08      	ldr	r2, [pc, #32]	; (801649c <_ZN10STM32F7DMA10initializeEv+0x38>)
 801647c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801647e:	4b05      	ldr	r3, [pc, #20]	; (8016494 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016480:	4a07      	ldr	r2, [pc, #28]	; (80164a0 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8016482:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8016484:	205a      	movs	r0, #90	; 0x5a
 8016486:	f7ff fe45 	bl	8016114 <__NVIC_EnableIRQ>
}
 801648a:	bf00      	nop
 801648c:	3708      	adds	r7, #8
 801648e:	46bd      	mov	sp, r7
 8016490:	bd80      	pop	{r7, pc}
 8016492:	bf00      	nop
 8016494:	2000bb6c 	.word	0x2000bb6c
 8016498:	4002b000 	.word	0x4002b000
 801649c:	08016355 	.word	0x08016355
 80164a0:	08016371 	.word	0x08016371

080164a4 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 80164a4:	b480      	push	{r7}
 80164a6:	b083      	sub	sp, #12
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 80164ac:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	370c      	adds	r7, #12
 80164b4:	46bd      	mov	sp, r7
 80164b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ba:	4770      	bx	lr

080164bc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 80164bc:	b590      	push	{r4, r7, lr}
 80164be:	b08d      	sub	sp, #52	; 0x34
 80164c0:	af02      	add	r7, sp, #8
 80164c2:	6078      	str	r0, [r7, #4]
 80164c4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80164c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80164ca:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80164cc:	2300      	movs	r3, #0
 80164ce:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80164d0:	683b      	ldr	r3, [r7, #0]
 80164d2:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80164d4:	2b20      	cmp	r3, #32
 80164d6:	d007      	beq.n	80164e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	2b40      	cmp	r3, #64	; 0x40
 80164de:	d003      	beq.n	80164e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	2b04      	cmp	r3, #4
 80164e6:	d101      	bne.n	80164ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80164e8:	2301      	movs	r3, #1
 80164ea:	e000      	b.n	80164ee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80164ec:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80164ee:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80164f0:	683b      	ldr	r3, [r7, #0]
 80164f2:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80164f4:	2b80      	cmp	r3, #128	; 0x80
 80164f6:	d004      	beq.n	8016502 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016500:	d101      	bne.n	8016506 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8016502:	2301      	movs	r3, #1
 8016504:	e000      	b.n	8016508 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8016506:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016508:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801650a:	f7f9 fb81 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 801650e:	4602      	mov	r2, r0
 8016510:	6813      	ldr	r3, [r2, #0]
 8016512:	331c      	adds	r3, #28
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	4610      	mov	r0, r2
 8016518:	4798      	blx	r3
 801651a:	4603      	mov	r3, r0
 801651c:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 801651e:	683b      	ldr	r3, [r7, #0]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	2b40      	cmp	r3, #64	; 0x40
 8016524:	d01d      	beq.n	8016562 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016526:	2b40      	cmp	r3, #64	; 0x40
 8016528:	d804      	bhi.n	8016534 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801652a:	2b04      	cmp	r3, #4
 801652c:	d00e      	beq.n	801654c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 801652e:	2b20      	cmp	r3, #32
 8016530:	d017      	beq.n	8016562 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016532:	e019      	b.n	8016568 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8016534:	2b80      	cmp	r3, #128	; 0x80
 8016536:	d003      	beq.n	8016540 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8016538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801653c:	d003      	beq.n	8016546 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 801653e:	e013      	b.n	8016568 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8016540:	230a      	movs	r3, #10
 8016542:	623b      	str	r3, [r7, #32]
        break;
 8016544:	e01a      	b.n	801657c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8016546:	2309      	movs	r3, #9
 8016548:	623b      	str	r3, [r7, #32]
        break;
 801654a:	e017      	b.n	801657c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801654c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016550:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016552:	7f7b      	ldrb	r3, [r7, #29]
 8016554:	2b10      	cmp	r3, #16
 8016556:	d101      	bne.n	801655c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8016558:	2302      	movs	r3, #2
 801655a:	e000      	b.n	801655e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 801655c:	2301      	movs	r3, #1
 801655e:	623b      	str	r3, [r7, #32]
        break;
 8016560:	e00c      	b.n	801657c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8016562:	2300      	movs	r3, #0
 8016564:	623b      	str	r3, [r7, #32]
        break;
 8016566:	e009      	b.n	801657c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8016568:	2300      	movs	r3, #0
 801656a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801656c:	7f7b      	ldrb	r3, [r7, #29]
 801656e:	2b10      	cmp	r3, #16
 8016570:	d101      	bne.n	8016576 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8016572:	2302      	movs	r3, #2
 8016574:	e000      	b.n	8016578 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8016576:	2301      	movs	r3, #1
 8016578:	623b      	str	r3, [r7, #32]
        break;
 801657a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801657c:	4a75      	ldr	r2, [pc, #468]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016580:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016582:	7f7b      	ldrb	r3, [r7, #29]
 8016584:	2b10      	cmp	r3, #16
 8016586:	d101      	bne.n	801658c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8016588:	2302      	movs	r3, #2
 801658a:	e000      	b.n	801658e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 801658c:	2301      	movs	r3, #1
 801658e:	4a71      	ldr	r2, [pc, #452]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016590:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016592:	683b      	ldr	r3, [r7, #0]
 8016594:	8adb      	ldrh	r3, [r3, #22]
 8016596:	461a      	mov	r2, r3
 8016598:	683b      	ldr	r3, [r7, #0]
 801659a:	8a1b      	ldrh	r3, [r3, #16]
 801659c:	1ad3      	subs	r3, r2, r3
 801659e:	461a      	mov	r2, r3
 80165a0:	4b6c      	ldr	r3, [pc, #432]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80165a2:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80165a4:	7f7b      	ldrb	r3, [r7, #29]
 80165a6:	2b10      	cmp	r3, #16
 80165a8:	d101      	bne.n	80165ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 80165aa:	2202      	movs	r2, #2
 80165ac:	e000      	b.n	80165b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 80165ae:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	8adb      	ldrh	r3, [r3, #22]
 80165b4:	4619      	mov	r1, r3
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	8a1b      	ldrh	r3, [r3, #16]
 80165ba:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80165bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80165be:	4865      	ldr	r0, [pc, #404]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80165c0:	f7ff fe9a 	bl	80162f8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80165c4:	4a63      	ldr	r2, [pc, #396]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80165c6:	6a3b      	ldr	r3, [r7, #32]
 80165c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 80165ca:	683b      	ldr	r3, [r7, #0]
 80165cc:	8a9b      	ldrh	r3, [r3, #20]
 80165ce:	461a      	mov	r2, r3
 80165d0:	683b      	ldr	r3, [r7, #0]
 80165d2:	8a1b      	ldrh	r3, [r3, #16]
 80165d4:	1ad3      	subs	r3, r2, r3
 80165d6:	461a      	mov	r2, r3
 80165d8:	4b5e      	ldr	r3, [pc, #376]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80165da:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80165dc:	7ffb      	ldrb	r3, [r7, #31]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d103      	bne.n	80165ea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80165e2:	7fbb      	ldrb	r3, [r7, #30]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	f000 8081 	beq.w	80166ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	7f1b      	ldrb	r3, [r3, #28]
 80165ee:	2bff      	cmp	r3, #255	; 0xff
 80165f0:	d008      	beq.n	8016604 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80165f2:	4b58      	ldr	r3, [pc, #352]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80165f4:	2202      	movs	r2, #2
 80165f6:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	7f1b      	ldrb	r3, [r3, #28]
 80165fc:	461a      	mov	r2, r3
 80165fe:	4b55      	ldr	r3, [pc, #340]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016600:	635a      	str	r2, [r3, #52]	; 0x34
 8016602:	e002      	b.n	801660a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8016604:	4b53      	ldr	r3, [pc, #332]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016606:	2200      	movs	r2, #0
 8016608:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801660a:	7fbb      	ldrb	r3, [r7, #30]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d058      	beq.n	80166c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 8016610:	7f7b      	ldrb	r3, [r7, #29]
 8016612:	2b10      	cmp	r3, #16
 8016614:	d14a      	bne.n	80166ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8016616:	683b      	ldr	r3, [r7, #0]
 8016618:	3318      	adds	r3, #24
 801661a:	4618      	mov	r0, r3
 801661c:	f7ff fdcc 	bl	80161b8 <_ZNK8touchgfx9colortypecvmEv>
 8016620:	4603      	mov	r3, r0
 8016622:	0adb      	lsrs	r3, r3, #11
 8016624:	f003 021f 	and.w	r2, r3, #31
 8016628:	4613      	mov	r3, r2
 801662a:	021b      	lsls	r3, r3, #8
 801662c:	1a9a      	subs	r2, r3, r2
 801662e:	4b4a      	ldr	r3, [pc, #296]	; (8016758 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016630:	fba3 1302 	umull	r1, r3, r3, r2
 8016634:	1ad2      	subs	r2, r2, r3
 8016636:	0852      	lsrs	r2, r2, #1
 8016638:	4413      	add	r3, r2
 801663a:	091b      	lsrs	r3, r3, #4
 801663c:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801663e:	683b      	ldr	r3, [r7, #0]
 8016640:	3318      	adds	r3, #24
 8016642:	4618      	mov	r0, r3
 8016644:	f7ff fdb8 	bl	80161b8 <_ZNK8touchgfx9colortypecvmEv>
 8016648:	4603      	mov	r3, r0
 801664a:	095b      	lsrs	r3, r3, #5
 801664c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016650:	4613      	mov	r3, r2
 8016652:	021b      	lsls	r3, r3, #8
 8016654:	1a9a      	subs	r2, r3, r2
 8016656:	4b41      	ldr	r3, [pc, #260]	; (801675c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016658:	fba3 1302 	umull	r1, r3, r3, r2
 801665c:	1ad2      	subs	r2, r2, r3
 801665e:	0852      	lsrs	r2, r2, #1
 8016660:	4413      	add	r3, r2
 8016662:	095b      	lsrs	r3, r3, #5
 8016664:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8016666:	683b      	ldr	r3, [r7, #0]
 8016668:	3318      	adds	r3, #24
 801666a:	4618      	mov	r0, r3
 801666c:	f7ff fda4 	bl	80161b8 <_ZNK8touchgfx9colortypecvmEv>
 8016670:	4603      	mov	r3, r0
 8016672:	f003 021f 	and.w	r2, r3, #31
 8016676:	4613      	mov	r3, r2
 8016678:	021b      	lsls	r3, r3, #8
 801667a:	1a9a      	subs	r2, r3, r2
 801667c:	4b36      	ldr	r3, [pc, #216]	; (8016758 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801667e:	fba3 1302 	umull	r1, r3, r3, r2
 8016682:	1ad2      	subs	r2, r2, r3
 8016684:	0852      	lsrs	r2, r2, #1
 8016686:	4413      	add	r3, r2
 8016688:	091b      	lsrs	r3, r3, #4
 801668a:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	7f1b      	ldrb	r3, [r3, #28]
 8016690:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	061a      	lsls	r2, r3, #24
 8016696:	69bb      	ldr	r3, [r7, #24]
 8016698:	041b      	lsls	r3, r3, #16
 801669a:	431a      	orrs	r2, r3
 801669c:	697b      	ldr	r3, [r7, #20]
 801669e:	021b      	lsls	r3, r3, #8
 80166a0:	431a      	orrs	r2, r3
 80166a2:	693b      	ldr	r3, [r7, #16]
 80166a4:	4313      	orrs	r3, r2
 80166a6:	4a2b      	ldr	r2, [pc, #172]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80166a8:	6353      	str	r3, [r2, #52]	; 0x34
 80166aa:	e00a      	b.n	80166c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 80166ac:	683b      	ldr	r3, [r7, #0]
 80166ae:	3318      	adds	r3, #24
 80166b0:	60bb      	str	r3, [r7, #8]
        return color;
 80166b2:	68bb      	ldr	r3, [r7, #8]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	683a      	ldr	r2, [r7, #0]
 80166b8:	7f12      	ldrb	r2, [r2, #28]
 80166ba:	0612      	lsls	r2, r2, #24
 80166bc:	4313      	orrs	r3, r2
 80166be:	4a25      	ldr	r2, [pc, #148]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80166c0:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	8adb      	ldrh	r3, [r3, #22]
 80166c6:	461a      	mov	r2, r3
 80166c8:	683b      	ldr	r3, [r7, #0]
 80166ca:	8a1b      	ldrh	r3, [r3, #16]
 80166cc:	1ad3      	subs	r3, r2, r3
 80166ce:	461a      	mov	r2, r3
 80166d0:	4b20      	ldr	r3, [pc, #128]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80166d2:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80166d4:	7f7b      	ldrb	r3, [r7, #29]
 80166d6:	2b10      	cmp	r3, #16
 80166d8:	d101      	bne.n	80166de <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 80166da:	2302      	movs	r3, #2
 80166dc:	e000      	b.n	80166e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 80166de:	2301      	movs	r3, #1
 80166e0:	4a1c      	ldr	r2, [pc, #112]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80166e2:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80166e4:	2100      	movs	r1, #0
 80166e6:	481b      	ldr	r0, [pc, #108]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80166e8:	f7ed fd8a 	bl	8004200 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80166ec:	2101      	movs	r1, #1
 80166ee:	4819      	ldr	r0, [pc, #100]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80166f0:	f7ed fd86 	bl	8004200 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 80166f4:	7ffb      	ldrb	r3, [r7, #31]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d102      	bne.n	8016700 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 80166fa:	7fbb      	ldrb	r3, [r7, #30]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d015      	beq.n	801672c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8016700:	683b      	ldr	r3, [r7, #0]
 8016702:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016704:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016706:	683b      	ldr	r3, [r7, #0]
 8016708:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801670a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801670c:	683b      	ldr	r3, [r7, #0]
 801670e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016710:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016712:	683b      	ldr	r3, [r7, #0]
 8016714:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016716:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016718:	683b      	ldr	r3, [r7, #0]
 801671a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801671c:	9301      	str	r3, [sp, #4]
 801671e:	9200      	str	r2, [sp, #0]
 8016720:	4623      	mov	r3, r4
 8016722:	4602      	mov	r2, r0
 8016724:	480b      	ldr	r0, [pc, #44]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016726:	f7ed fb8e 	bl	8003e46 <HAL_DMA2D_BlendingStart_IT>
 801672a:	e00f      	b.n	801674c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 801672c:	683b      	ldr	r3, [r7, #0]
 801672e:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016730:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016736:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016738:	683b      	ldr	r3, [r7, #0]
 801673a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 801673c:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016742:	9300      	str	r3, [sp, #0]
 8016744:	4603      	mov	r3, r0
 8016746:	4803      	ldr	r0, [pc, #12]	; (8016754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016748:	f7ed fb4a 	bl	8003de0 <HAL_DMA2D_Start_IT>
    }
}
 801674c:	bf00      	nop
 801674e:	372c      	adds	r7, #44	; 0x2c
 8016750:	46bd      	mov	sp, r7
 8016752:	bd90      	pop	{r4, r7, pc}
 8016754:	2000bb6c 	.word	0x2000bb6c
 8016758:	08421085 	.word	0x08421085
 801675c:	04104105 	.word	0x04104105

08016760 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8016760:	b590      	push	{r4, r7, lr}
 8016762:	b08f      	sub	sp, #60	; 0x3c
 8016764:	af02      	add	r7, sp, #8
 8016766:	6078      	str	r0, [r7, #4]
 8016768:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 801676a:	f7f9 fa51 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 801676e:	4602      	mov	r2, r0
 8016770:	6813      	ldr	r3, [r2, #0]
 8016772:	331c      	adds	r3, #28
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	4610      	mov	r0, r2
 8016778:	4798      	blx	r3
 801677a:	4603      	mov	r3, r0
 801677c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016784:	2b10      	cmp	r3, #16
 8016786:	d101      	bne.n	801678c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 8016788:	2302      	movs	r3, #2
 801678a:	e000      	b.n	801678e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 801678c:	2301      	movs	r3, #1
 801678e:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 8016790:	2300      	movs	r3, #0
 8016792:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 8016794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016798:	2b10      	cmp	r3, #16
 801679a:	d149      	bne.n	8016830 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	3318      	adds	r3, #24
 80167a0:	4618      	mov	r0, r3
 80167a2:	f7ff fd09 	bl	80161b8 <_ZNK8touchgfx9colortypecvmEv>
 80167a6:	4603      	mov	r3, r0
 80167a8:	0adb      	lsrs	r3, r3, #11
 80167aa:	f003 021f 	and.w	r2, r3, #31
 80167ae:	4613      	mov	r3, r2
 80167b0:	021b      	lsls	r3, r3, #8
 80167b2:	1a9a      	subs	r2, r3, r2
 80167b4:	4b6a      	ldr	r3, [pc, #424]	; (8016960 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80167b6:	fba3 1302 	umull	r1, r3, r3, r2
 80167ba:	1ad2      	subs	r2, r2, r3
 80167bc:	0852      	lsrs	r2, r2, #1
 80167be:	4413      	add	r3, r2
 80167c0:	091b      	lsrs	r3, r3, #4
 80167c2:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	3318      	adds	r3, #24
 80167c8:	4618      	mov	r0, r3
 80167ca:	f7ff fcf5 	bl	80161b8 <_ZNK8touchgfx9colortypecvmEv>
 80167ce:	4603      	mov	r3, r0
 80167d0:	095b      	lsrs	r3, r3, #5
 80167d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80167d6:	4613      	mov	r3, r2
 80167d8:	021b      	lsls	r3, r3, #8
 80167da:	1a9a      	subs	r2, r3, r2
 80167dc:	4b61      	ldr	r3, [pc, #388]	; (8016964 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 80167de:	fba3 1302 	umull	r1, r3, r3, r2
 80167e2:	1ad2      	subs	r2, r2, r3
 80167e4:	0852      	lsrs	r2, r2, #1
 80167e6:	4413      	add	r3, r2
 80167e8:	095b      	lsrs	r3, r3, #5
 80167ea:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80167ec:	683b      	ldr	r3, [r7, #0]
 80167ee:	3318      	adds	r3, #24
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7ff fce1 	bl	80161b8 <_ZNK8touchgfx9colortypecvmEv>
 80167f6:	4603      	mov	r3, r0
 80167f8:	f003 021f 	and.w	r2, r3, #31
 80167fc:	4613      	mov	r3, r2
 80167fe:	021b      	lsls	r3, r3, #8
 8016800:	1a9a      	subs	r2, r3, r2
 8016802:	4b57      	ldr	r3, [pc, #348]	; (8016960 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8016804:	fba3 1302 	umull	r1, r3, r3, r2
 8016808:	1ad2      	subs	r2, r2, r3
 801680a:	0852      	lsrs	r2, r2, #1
 801680c:	4413      	add	r3, r2
 801680e:	091b      	lsrs	r3, r3, #4
 8016810:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	7f1b      	ldrb	r3, [r3, #28]
 8016816:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	061a      	lsls	r2, r3, #24
 801681c:	69fb      	ldr	r3, [r7, #28]
 801681e:	041b      	lsls	r3, r3, #16
 8016820:	431a      	orrs	r2, r3
 8016822:	69bb      	ldr	r3, [r7, #24]
 8016824:	021b      	lsls	r3, r3, #8
 8016826:	4313      	orrs	r3, r2
 8016828:	697a      	ldr	r2, [r7, #20]
 801682a:	4313      	orrs	r3, r2
 801682c:	62bb      	str	r3, [r7, #40]	; 0x28
 801682e:	e00a      	b.n	8016846 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8016830:	683b      	ldr	r3, [r7, #0]
 8016832:	7f1b      	ldrb	r3, [r3, #28]
 8016834:	061b      	lsls	r3, r3, #24
 8016836:	461a      	mov	r2, r3
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	3318      	adds	r3, #24
 801683c:	60fb      	str	r3, [r7, #12]
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	4313      	orrs	r3, r2
 8016844:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	2b08      	cmp	r3, #8
 801684c:	d103      	bne.n	8016856 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801684e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016852:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8016854:	e003      	b.n	801685e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8016856:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801685a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801685c:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801685e:	4a42      	ldr	r2, [pc, #264]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016862:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016868:	2b10      	cmp	r3, #16
 801686a:	d101      	bne.n	8016870 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 801686c:	2302      	movs	r3, #2
 801686e:	e000      	b.n	8016872 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 8016870:	2301      	movs	r3, #1
 8016872:	4a3d      	ldr	r2, [pc, #244]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016874:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	8adb      	ldrh	r3, [r3, #22]
 801687a:	461a      	mov	r2, r3
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	8a1b      	ldrh	r3, [r3, #16]
 8016880:	1ad3      	subs	r3, r2, r3
 8016882:	461a      	mov	r2, r3
 8016884:	4b38      	ldr	r3, [pc, #224]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016886:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801688c:	2b10      	cmp	r3, #16
 801688e:	d101      	bne.n	8016894 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 8016890:	2202      	movs	r2, #2
 8016892:	e000      	b.n	8016896 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 8016894:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	8adb      	ldrh	r3, [r3, #22]
 801689a:	4619      	mov	r1, r3
 801689c:	683b      	ldr	r3, [r7, #0]
 801689e:	8a1b      	ldrh	r3, [r3, #16]
 80168a0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80168a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80168a4:	4830      	ldr	r0, [pc, #192]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80168a6:	f7ff fd27 	bl	80162f8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 80168aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80168b0:	d11f      	bne.n	80168f2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80168b2:	4b2d      	ldr	r3, [pc, #180]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80168b4:	2201      	movs	r2, #1
 80168b6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 80168b8:	4a2b      	ldr	r2, [pc, #172]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80168ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168bc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 80168be:	4b2a      	ldr	r3, [pc, #168]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80168c0:	2209      	movs	r2, #9
 80168c2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	8adb      	ldrh	r3, [r3, #22]
 80168c8:	461a      	mov	r2, r3
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	8a1b      	ldrh	r3, [r3, #16]
 80168ce:	1ad3      	subs	r3, r2, r3
 80168d0:	461a      	mov	r2, r3
 80168d2:	4b25      	ldr	r3, [pc, #148]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80168d4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80168d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168da:	2b10      	cmp	r3, #16
 80168dc:	d101      	bne.n	80168e2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 80168de:	2302      	movs	r3, #2
 80168e0:	e000      	b.n	80168e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 80168e2:	2301      	movs	r3, #1
 80168e4:	4a20      	ldr	r2, [pc, #128]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80168e6:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80168e8:	2100      	movs	r1, #0
 80168ea:	481f      	ldr	r0, [pc, #124]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80168ec:	f7ed fc88 	bl	8004200 <HAL_DMA2D_ConfigLayer>
 80168f0:	e005      	b.n	80168fe <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80168f2:	4a1d      	ldr	r2, [pc, #116]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80168f4:	6a3b      	ldr	r3, [r7, #32]
 80168f6:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80168f8:	4b1b      	ldr	r3, [pc, #108]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80168fa:	2200      	movs	r2, #0
 80168fc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80168fe:	2101      	movs	r1, #1
 8016900:	4819      	ldr	r0, [pc, #100]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016902:	f7ed fc7d 	bl	8004200 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8016906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801690c:	d115      	bne.n	801693a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801690e:	683b      	ldr	r3, [r7, #0]
 8016910:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016912:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016918:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801691a:	683b      	ldr	r3, [r7, #0]
 801691c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801691e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016920:	683b      	ldr	r3, [r7, #0]
 8016922:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016924:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016926:	683b      	ldr	r3, [r7, #0]
 8016928:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801692a:	9301      	str	r3, [sp, #4]
 801692c:	9200      	str	r2, [sp, #0]
 801692e:	4623      	mov	r3, r4
 8016930:	4602      	mov	r2, r0
 8016932:	480d      	ldr	r0, [pc, #52]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016934:	f7ed fa87 	bl	8003e46 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8016938:	e00d      	b.n	8016956 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801693a:	683b      	ldr	r3, [r7, #0]
 801693c:	68db      	ldr	r3, [r3, #12]
 801693e:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016944:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016946:	683b      	ldr	r3, [r7, #0]
 8016948:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801694a:	9300      	str	r3, [sp, #0]
 801694c:	460b      	mov	r3, r1
 801694e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016950:	4805      	ldr	r0, [pc, #20]	; (8016968 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016952:	f7ed fa45 	bl	8003de0 <HAL_DMA2D_Start_IT>
}
 8016956:	bf00      	nop
 8016958:	3734      	adds	r7, #52	; 0x34
 801695a:	46bd      	mov	sp, r7
 801695c:	bd90      	pop	{r4, r7, pc}
 801695e:	bf00      	nop
 8016960:	08421085 	.word	0x08421085
 8016964:	04104105 	.word	0x04104105
 8016968:	2000bb6c 	.word	0x2000bb6c

0801696c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801696c:	b580      	push	{r7, lr}
 801696e:	b082      	sub	sp, #8
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
 8016974:	4a05      	ldr	r2, [pc, #20]	; (801698c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	601a      	str	r2, [r3, #0]
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	4618      	mov	r0, r3
 801697e:	f7ff fc27 	bl	80161d0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	4618      	mov	r0, r3
 8016986:	3708      	adds	r7, #8
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}
 801698c:	0802ae88 	.word	0x0802ae88

08016990 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8016990:	b580      	push	{r7, lr}
 8016992:	b082      	sub	sp, #8
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
 8016998:	6878      	ldr	r0, [r7, #4]
 801699a:	f7ff ffe7 	bl	801696c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801699e:	2114      	movs	r1, #20
 80169a0:	6878      	ldr	r0, [r7, #4]
 80169a2:	f010 fdd7 	bl	8027554 <_ZdlPvj>
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	4618      	mov	r0, r3
 80169aa:	3708      	adds	r7, #8
 80169ac:	46bd      	mov	sp, r7
 80169ae:	bd80      	pop	{r7, pc}

080169b0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 80169b0:	b480      	push	{r7}
 80169b2:	b083      	sub	sp, #12
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
        texts = t;
 80169b8:	4a04      	ldr	r2, [pc, #16]	; (80169cc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	6013      	str	r3, [r2, #0]
    }
 80169be:	bf00      	nop
 80169c0:	370c      	adds	r7, #12
 80169c2:	46bd      	mov	sp, r7
 80169c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c8:	4770      	bx	lr
 80169ca:	bf00      	nop
 80169cc:	2000b3b0 	.word	0x2000b3b0

080169d0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80169d0:	b480      	push	{r7}
 80169d2:	b085      	sub	sp, #20
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	60f8      	str	r0, [r7, #12]
 80169d8:	60b9      	str	r1, [r7, #8]
 80169da:	607a      	str	r2, [r7, #4]
 80169dc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80169de:	4a0b      	ldr	r2, [pc, #44]	; (8016a0c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	601a      	str	r2, [r3, #0]
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	68ba      	ldr	r2, [r7, #8]
 80169e8:	605a      	str	r2, [r3, #4]
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	687a      	ldr	r2, [r7, #4]
 80169ee:	609a      	str	r2, [r3, #8]
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	683a      	ldr	r2, [r7, #0]
 80169f4:	60da      	str	r2, [r3, #12]
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	69ba      	ldr	r2, [r7, #24]
 80169fa:	611a      	str	r2, [r3, #16]
    {
    }
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	4618      	mov	r0, r3
 8016a00:	3714      	adds	r7, #20
 8016a02:	46bd      	mov	sp, r7
 8016a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a08:	4770      	bx	lr
 8016a0a:	bf00      	nop
 8016a0c:	0802a3d0 	.word	0x0802a3d0

08016a10 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8016a10:	b480      	push	{r7}
 8016a12:	b083      	sub	sp, #12
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	6078      	str	r0, [r7, #4]
    {
 8016a18:	4a04      	ldr	r2, [pc, #16]	; (8016a2c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	601a      	str	r2, [r3, #0]
    }
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	4618      	mov	r0, r3
 8016a22:	370c      	adds	r7, #12
 8016a24:	46bd      	mov	sp, r7
 8016a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2a:	4770      	bx	lr
 8016a2c:	0802a3d0 	.word	0x0802a3d0

08016a30 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b082      	sub	sp, #8
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
    }
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f7ff ffe9 	bl	8016a10 <_ZN8touchgfx7MVPHeapD1Ev>
 8016a3e:	2114      	movs	r1, #20
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f010 fd87 	bl	8027554 <_ZdlPvj>
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	4618      	mov	r0, r3
 8016a4a:	3708      	adds	r7, #8
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}

08016a50 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8016a50:	b480      	push	{r7}
 8016a52:	b083      	sub	sp, #12
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
    {
 8016a58:	4a04      	ldr	r2, [pc, #16]	; (8016a6c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	601a      	str	r2, [r3, #0]
    }
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	4618      	mov	r0, r3
 8016a62:	370c      	adds	r7, #12
 8016a64:	46bd      	mov	sp, r7
 8016a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6a:	4770      	bx	lr
 8016a6c:	0802b8d8 	.word	0x0802b8d8

08016a70 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
    }
 8016a78:	6878      	ldr	r0, [r7, #4]
 8016a7a:	f7ff ffe9 	bl	8016a50 <_ZN8touchgfx3LCDD1Ev>
 8016a7e:	2108      	movs	r1, #8
 8016a80:	6878      	ldr	r0, [r7, #4]
 8016a82:	f010 fd67 	bl	8027554 <_ZdlPvj>
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	4618      	mov	r0, r3
 8016a8a:	3708      	adds	r7, #8
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}

08016a90 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8016a90:	b480      	push	{r7}
 8016a92:	b083      	sub	sp, #12
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	801a      	strh	r2, [r3, #0]
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	2200      	movs	r2, #0
 8016aa2:	805a      	strh	r2, [r3, #2]
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	809a      	strh	r2, [r3, #4]
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	2200      	movs	r2, #0
 8016aae:	80da      	strh	r2, [r3, #6]
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	2200      	movs	r2, #0
 8016ab4:	811a      	strh	r2, [r3, #8]
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	2200      	movs	r2, #0
 8016aba:	815a      	strh	r2, [r3, #10]
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	2200      	movs	r2, #0
 8016ac0:	819a      	strh	r2, [r3, #12]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	739a      	strb	r2, [r3, #14]
        {
        }
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	4618      	mov	r0, r3
 8016acc:	370c      	adds	r7, #12
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad4:	4770      	bx	lr

08016ad6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8016ad6:	b580      	push	{r7, lr}
 8016ad8:	b082      	sub	sp, #8
 8016ada:	af00      	add	r7, sp, #0
 8016adc:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f7ff ffd5 	bl	8016a90 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	2200      	movs	r2, #0
 8016aea:	611a      	str	r2, [r3, #16]
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	2200      	movs	r2, #0
 8016af0:	829a      	strh	r2, [r3, #20]
    {
    }
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	4618      	mov	r0, r3
 8016af6:	3708      	adds	r7, #8
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}

08016afc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b084      	sub	sp, #16
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	60f8      	str	r0, [r7, #12]
 8016b04:	60b9      	str	r1, [r7, #8]
 8016b06:	607a      	str	r2, [r7, #4]
 8016b08:	603b      	str	r3, [r7, #0]
          displayOrientationChangeRequested(false)
 8016b0a:	4a44      	ldr	r2, [pc, #272]	; (8016c1c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	601a      	str	r2, [r3, #0]
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	68ba      	ldr	r2, [r7, #8]
 8016b14:	605a      	str	r2, [r3, #4]
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	687a      	ldr	r2, [r7, #4]
 8016b1a:	609a      	str	r2, [r3, #8]
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	683a      	ldr	r2, [r7, #0]
 8016b20:	60da      	str	r2, [r3, #12]
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	2200      	movs	r2, #0
 8016b26:	611a      	str	r2, [r3, #16]
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	615a      	str	r2, [r3, #20]
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	2200      	movs	r2, #0
 8016b32:	619a      	str	r2, [r3, #24]
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	331c      	adds	r3, #28
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f7ff ffcc 	bl	8016ad6 <_ZN8touchgfx8GesturesC1Ev>
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	2200      	movs	r2, #0
 8016b42:	639a      	str	r2, [r3, #56]	; 0x38
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	2200      	movs	r2, #0
 8016b48:	63da      	str	r2, [r3, #60]	; 0x3c
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	641a      	str	r2, [r3, #64]	; 0x40
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	2200      	movs	r2, #0
 8016b54:	645a      	str	r2, [r3, #68]	; 0x44
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	2200      	movs	r2, #0
 8016b5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	2201      	movs	r2, #1
 8016b62:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	2200      	movs	r2, #0
 8016b6a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	2200      	movs	r2, #0
 8016b72:	64da      	str	r2, [r3, #76]	; 0x4c
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	3350      	adds	r3, #80	; 0x50
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7f8 fd79 	bl	800f670 <_ZN8touchgfx4RectC1Ev>
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	2201      	movs	r2, #1
 8016b82:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	2200      	movs	r2, #0
 8016b92:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	2201      	movs	r2, #1
 8016b9a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	2200      	movs	r2, #0
 8016baa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	2200      	movs	r2, #0
 8016bb2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	2200      	movs	r2, #0
 8016bba:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	2200      	movs	r2, #0
 8016bca:	671a      	str	r2, [r3, #112]	; 0x70
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	2200      	movs	r2, #0
 8016bd0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8016bd4:	4a12      	ldr	r2, [pc, #72]	; (8016c20 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8016bda:	4a12      	ldr	r2, [pc, #72]	; (8016c24 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8016bdc:	8b3b      	ldrh	r3, [r7, #24]
 8016bde:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8016be0:	4a11      	ldr	r2, [pc, #68]	; (8016c28 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8016be2:	8bbb      	ldrh	r3, [r7, #28]
 8016be4:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8016be6:	4b11      	ldr	r3, [pc, #68]	; (8016c2c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8016be8:	2200      	movs	r2, #0
 8016bea:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8016bec:	4b0d      	ldr	r3, [pc, #52]	; (8016c24 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8016bee:	881a      	ldrh	r2, [r3, #0]
 8016bf0:	4b0f      	ldr	r3, [pc, #60]	; (8016c30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8016bf2:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8016bf4:	4b0c      	ldr	r3, [pc, #48]	; (8016c28 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8016bf6:	881a      	ldrh	r2, [r3, #0]
 8016bf8:	4b0e      	ldr	r3, [pc, #56]	; (8016c34 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8016bfa:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8016bfc:	8b3a      	ldrh	r2, [r7, #24]
 8016bfe:	8bbb      	ldrh	r3, [r7, #28]
 8016c00:	429a      	cmp	r2, r3
 8016c02:	d301      	bcc.n	8016c08 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8016c04:	2200      	movs	r2, #0
 8016c06:	e000      	b.n	8016c0a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8016c08:	2201      	movs	r2, #1
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	4618      	mov	r0, r3
 8016c14:	3710      	adds	r7, #16
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	0802a9f4 	.word	0x0802a9f4
 8016c20:	2000b314 	.word	0x2000b314
 8016c24:	2000b308 	.word	0x2000b308
 8016c28:	2000b30a 	.word	0x2000b30a
 8016c2c:	2000b30c 	.word	0x2000b30c
 8016c30:	2000b30e 	.word	0x2000b30e
 8016c34:	2000b310 	.word	0x2000b310

08016c38 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b082      	sub	sp, #8
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
 8016c40:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	4618      	mov	r0, r3
 8016c46:	f7f9 f9a7 	bl	800ff98 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8016c4a:	bf00      	nop
 8016c4c:	3708      	adds	r7, #8
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}
	...

08016c54 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b086      	sub	sp, #24
 8016c58:	af02      	add	r7, sp, #8
 8016c5a:	60f8      	str	r0, [r7, #12]
 8016c5c:	60b9      	str	r1, [r7, #8]
 8016c5e:	607a      	str	r2, [r7, #4]
 8016c60:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8016c62:	68f8      	ldr	r0, [r7, #12]
 8016c64:	69bb      	ldr	r3, [r7, #24]
 8016c66:	9300      	str	r3, [sp, #0]
 8016c68:	683b      	ldr	r3, [r7, #0]
 8016c6a:	687a      	ldr	r2, [r7, #4]
 8016c6c:	68b9      	ldr	r1, [r7, #8]
 8016c6e:	f7ff feaf 	bl	80169d0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8016c72:	4a04      	ldr	r2, [pc, #16]	; (8016c84 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	601a      	str	r2, [r3, #0]
    {

    }
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	3710      	adds	r7, #16
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	bd80      	pop	{r7, pc}
 8016c82:	bf00      	nop
 8016c84:	0802a3bc 	.word	0x0802a3bc

08016c88 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	af00      	add	r7, sp, #0
 8016c8c:	4801      	ldr	r0, [pc, #4]	; (8016c94 <__tcf_0+0xc>)
 8016c8e:	f000 f953 	bl	8016f38 <_ZN12FrontendHeapD1Ev>
 8016c92:	bd80      	pop	{r7, pc}
 8016c94:	20008608 	.word	0x20008608

08016c98 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8016c9c:	4b08      	ldr	r3, [pc, #32]	; (8016cc0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	f003 0301 	and.w	r3, r3, #1
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d108      	bne.n	8016cba <_ZN12FrontendHeap11getInstanceEv+0x22>
 8016ca8:	4806      	ldr	r0, [pc, #24]	; (8016cc4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8016caa:	f000 f867 	bl	8016d7c <_ZN12FrontendHeapC1Ev>
 8016cae:	4b04      	ldr	r3, [pc, #16]	; (8016cc0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8016cb0:	2201      	movs	r2, #1
 8016cb2:	601a      	str	r2, [r3, #0]
 8016cb4:	4804      	ldr	r0, [pc, #16]	; (8016cc8 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8016cb6:	f010 fc97 	bl	80275e8 <atexit>
        return instance;
 8016cba:	4b02      	ldr	r3, [pc, #8]	; (8016cc4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	bd80      	pop	{r7, pc}
 8016cc0:	2000a608 	.word	0x2000a608
 8016cc4:	20008608 	.word	0x20008608
 8016cc8:	08016c89 	.word	0x08016c89

08016ccc <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b082      	sub	sp, #8
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
 8016cd4:	4a05      	ldr	r2, [pc, #20]	; (8016cec <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	601a      	str	r2, [r3, #0]
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f7ff fe97 	bl	8016a10 <_ZN8touchgfx7MVPHeapD1Ev>
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	3708      	adds	r7, #8
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}
 8016cec:	0802a3bc 	.word	0x0802a3bc

08016cf0 <_ZN16FrontendHeapBaseD0Ev>:
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b082      	sub	sp, #8
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
 8016cf8:	6878      	ldr	r0, [r7, #4]
 8016cfa:	f7ff ffe7 	bl	8016ccc <_ZN16FrontendHeapBaseD1Ev>
 8016cfe:	2114      	movs	r1, #20
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	f010 fc27 	bl	8027554 <_ZdlPvj>
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	4618      	mov	r0, r3
 8016d0a:	3708      	adds	r7, #8
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}

08016d10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b082      	sub	sp, #8
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	f000 fd74 	bl	8017808 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016d20:	4a03      	ldr	r2, [pc, #12]	; (8016d30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	601a      	str	r2, [r3, #0]
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	4618      	mov	r0, r3
 8016d2a:	3708      	adds	r7, #8
 8016d2c:	46bd      	mov	sp, r7
 8016d2e:	bd80      	pop	{r7, pc}
 8016d30:	0802a388 	.word	0x0802a388

08016d34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b082      	sub	sp, #8
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	6078      	str	r0, [r7, #4]
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f000 fd62 	bl	8017808 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016d44:	4a03      	ldr	r2, [pc, #12]	; (8016d54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	601a      	str	r2, [r3, #0]
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	3708      	adds	r7, #8
 8016d50:	46bd      	mov	sp, r7
 8016d52:	bd80      	pop	{r7, pc}
 8016d54:	0802a354 	.word	0x0802a354

08016d58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	4618      	mov	r0, r3
 8016d64:	f000 fd50 	bl	8017808 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016d68:	4a03      	ldr	r2, [pc, #12]	; (8016d78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	601a      	str	r2, [r3, #0]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	4618      	mov	r0, r3
 8016d72:	3708      	adds	r7, #8
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	0802a320 	.word	0x0802a320

08016d7c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8016d7c:	b5b0      	push	{r4, r5, r7, lr}
 8016d7e:	b084      	sub	sp, #16
 8016d80:	af02      	add	r7, sp, #8
 8016d82:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8016d84:	6878      	ldr	r0, [r7, #4]
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	f103 0414 	add.w	r4, r3, #20
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	f641 6248 	movw	r2, #7752	; 0x1e48
 8016d98:	441a      	add	r2, r3
 8016d9a:	6879      	ldr	r1, [r7, #4]
 8016d9c:	f641 63a8 	movw	r3, #7848	; 0x1ea8
 8016da0:	440b      	add	r3, r1
 8016da2:	9300      	str	r3, [sp, #0]
 8016da4:	4613      	mov	r3, r2
 8016da6:	462a      	mov	r2, r5
 8016da8:	4621      	mov	r1, r4
 8016daa:	f7ff ff53 	bl	8016c54 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8016dae:	4a1a      	ldr	r2, [pc, #104]	; (8016e18 <_ZN12FrontendHeapC1Ev+0x9c>)
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	601a      	str	r2, [r3, #0]
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	3314      	adds	r3, #20
 8016db8:	4618      	mov	r0, r3
 8016dba:	f7ff ffa9 	bl	8016d10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	332c      	adds	r3, #44	; 0x2c
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	f7ff ffb6 	bl	8016d34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016dc8:	687a      	ldr	r2, [r7, #4]
 8016dca:	f641 6348 	movw	r3, #7752	; 0x1e48
 8016dce:	4413      	add	r3, r2
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f7ff ffc1 	bl	8016d58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8016dd6:	687a      	ldr	r2, [r7, #4]
 8016dd8:	f641 63a4 	movw	r3, #7844	; 0x1ea4
 8016ddc:	4413      	add	r3, r2
 8016dde:	4618      	mov	r0, r3
 8016de0:	f7fe f900 	bl	8014fe4 <_ZN5ModelC1Ev>
 8016de4:	687a      	ldr	r2, [r7, #4]
 8016de6:	f641 63a8 	movw	r3, #7848	; 0x1ea8
 8016dea:	4413      	add	r3, r2
 8016dec:	687a      	ldr	r2, [r7, #4]
 8016dee:	f641 61a4 	movw	r1, #7844	; 0x1ea4
 8016df2:	4411      	add	r1, r2
 8016df4:	687a      	ldr	r2, [r7, #4]
 8016df6:	4618      	mov	r0, r3
 8016df8:	f7fd ffb0 	bl	8014d5c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8016dfc:	6878      	ldr	r0, [r7, #4]
 8016dfe:	687a      	ldr	r2, [r7, #4]
 8016e00:	f641 63a8 	movw	r3, #7848	; 0x1ea8
 8016e04:	4413      	add	r3, r2
 8016e06:	4619      	mov	r1, r3
 8016e08:	f7ff ff16 	bl	8016c38 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	4618      	mov	r0, r3
 8016e10:	3708      	adds	r7, #8
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bdb0      	pop	{r4, r5, r7, pc}
 8016e16:	bf00      	nop
 8016e18:	0802a30c 	.word	0x0802a30c

08016e1c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b086      	sub	sp, #24
 8016e20:	af02      	add	r7, sp, #8
 8016e22:	60f8      	str	r0, [r7, #12]
 8016e24:	60b9      	str	r1, [r7, #8]
 8016e26:	607a      	str	r2, [r7, #4]
 8016e28:	603b      	str	r3, [r7, #0]
 8016e2a:	68f8      	ldr	r0, [r7, #12]
 8016e2c:	8bbb      	ldrh	r3, [r7, #28]
 8016e2e:	9301      	str	r3, [sp, #4]
 8016e30:	8b3b      	ldrh	r3, [r7, #24]
 8016e32:	9300      	str	r3, [sp, #0]
 8016e34:	683b      	ldr	r3, [r7, #0]
 8016e36:	687a      	ldr	r2, [r7, #4]
 8016e38:	68b9      	ldr	r1, [r7, #8]
 8016e3a:	f7ff fe5f 	bl	8016afc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8016e3e:	4a04      	ldr	r2, [pc, #16]	; (8016e50 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	601a      	str	r2, [r3, #0]
    }
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	4618      	mov	r0, r3
 8016e48:	3710      	adds	r7, #16
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}
 8016e4e:	bf00      	nop
 8016e50:	0802a3e0 	.word	0x0802a3e0

08016e54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b086      	sub	sp, #24
 8016e58:	af02      	add	r7, sp, #8
 8016e5a:	60f8      	str	r0, [r7, #12]
 8016e5c:	60b9      	str	r1, [r7, #8]
 8016e5e:	607a      	str	r2, [r7, #4]
 8016e60:	603b      	str	r3, [r7, #0]
 8016e62:	68f8      	ldr	r0, [r7, #12]
 8016e64:	8bbb      	ldrh	r3, [r7, #28]
 8016e66:	9301      	str	r3, [sp, #4]
 8016e68:	8b3b      	ldrh	r3, [r7, #24]
 8016e6a:	9300      	str	r3, [sp, #0]
 8016e6c:	683b      	ldr	r3, [r7, #0]
 8016e6e:	687a      	ldr	r2, [r7, #4]
 8016e70:	68b9      	ldr	r1, [r7, #8]
 8016e72:	f7ff ffd3 	bl	8016e1c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8016e76:	4a04      	ldr	r2, [pc, #16]	; (8016e88 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	601a      	str	r2, [r3, #0]
    }
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	4618      	mov	r0, r3
 8016e80:	3710      	adds	r7, #16
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}
 8016e86:	bf00      	nop
 8016e88:	0802a0cc 	.word	0x0802a0cc

08016e8c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8016e8c:	b480      	push	{r7}
 8016e8e:	b083      	sub	sp, #12
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
 8016e94:	4a04      	ldr	r2, [pc, #16]	; (8016ea8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	601a      	str	r2, [r3, #0]
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	370c      	adds	r7, #12
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea6:	4770      	bx	lr
 8016ea8:	0802a0b4 	.word	0x0802a0b4

08016eac <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b082      	sub	sp, #8
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7ff ffe8 	bl	8016e8c <_ZN8touchgfx15TouchControllerC1Ev>
 8016ebc:	4a03      	ldr	r2, [pc, #12]	; (8016ecc <_ZN20STM32TouchControllerC1Ev+0x20>)
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	601a      	str	r2, [r3, #0]
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	3708      	adds	r7, #8
 8016ec8:	46bd      	mov	sp, r7
 8016eca:	bd80      	pop	{r7, pc}
 8016ecc:	0802a09c 	.word	0x0802a09c

08016ed0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8016ed0:	b590      	push	{r4, r7, lr}
 8016ed2:	b085      	sub	sp, #20
 8016ed4:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8016ed6:	f7fd fd17 	bl	8014908 <_ZN14BitmapDatabase11getInstanceEv>
 8016eda:	4604      	mov	r4, r0
 8016edc:	f7fd fd1e 	bl	801491c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8016ee0:	4603      	mov	r3, r0
 8016ee2:	4619      	mov	r1, r3
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	9300      	str	r3, [sp, #0]
 8016ee8:	2300      	movs	r3, #0
 8016eea:	2200      	movs	r2, #0
 8016eec:	4620      	mov	r0, r4
 8016eee:	f006 fcfb 	bl	801d8e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8016ef2:	4809      	ldr	r0, [pc, #36]	; (8016f18 <touchgfx_init+0x48>)
 8016ef4:	f7ff fd5c 	bl	80169b0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8016ef8:	2000      	movs	r0, #0
 8016efa:	f7fd fe47 	bl	8014b8c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8016efe:	4807      	ldr	r0, [pc, #28]	; (8016f1c <touchgfx_init+0x4c>)
 8016f00:	f006 fc3c 	bl	801d77c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8016f04:	f7ff fec8 	bl	8016c98 <_ZN12FrontendHeap11getInstanceEv>
 8016f08:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8016f0a:	4805      	ldr	r0, [pc, #20]	; (8016f20 <touchgfx_init+0x50>)
 8016f0c:	f7fe ffd2 	bl	8015eb4 <_ZN11TouchGFXHAL10initializeEv>
}
 8016f10:	bf00      	nop
 8016f12:	370c      	adds	r7, #12
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bd90      	pop	{r4, r7, pc}
 8016f18:	2000b288 	.word	0x2000b288
 8016f1c:	2000003c 	.word	0x2000003c
 8016f20:	2000b28c 	.word	0x2000b28c

08016f24 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8016f24:	b580      	push	{r7, lr}
 8016f26:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8016f28:	4802      	ldr	r0, [pc, #8]	; (8016f34 <touchgfx_taskEntry+0x10>)
 8016f2a:	f000 fe80 	bl	8017c2e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8016f2e:	bf00      	nop
 8016f30:	bd80      	pop	{r7, pc}
 8016f32:	bf00      	nop
 8016f34:	2000b28c 	.word	0x2000b28c

08016f38 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b082      	sub	sp, #8
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
 8016f40:	4a11      	ldr	r2, [pc, #68]	; (8016f88 <_ZN12FrontendHeapD1Ev+0x50>)
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	601a      	str	r2, [r3, #0]
 8016f46:	687a      	ldr	r2, [r7, #4]
 8016f48:	f641 63a8 	movw	r3, #7848	; 0x1ea8
 8016f4c:	4413      	add	r3, r2
 8016f4e:	4618      	mov	r0, r3
 8016f50:	f7fd fece 	bl	8014cf0 <_ZN19FrontendApplicationD1Ev>
 8016f54:	687a      	ldr	r2, [r7, #4]
 8016f56:	f641 6348 	movw	r3, #7752	; 0x1e48
 8016f5a:	4413      	add	r3, r2
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f000 f827 	bl	8016fb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	332c      	adds	r3, #44	; 0x2c
 8016f66:	4618      	mov	r0, r3
 8016f68:	f000 f844 	bl	8016ff4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	3314      	adds	r3, #20
 8016f70:	4618      	mov	r0, r3
 8016f72:	f000 f863 	bl	801703c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f7ff fea7 	bl	8016ccc <_ZN16FrontendHeapBaseD1Ev>
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	4618      	mov	r0, r3
 8016f82:	3708      	adds	r7, #8
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}
 8016f88:	0802a30c 	.word	0x0802a30c

08016f8c <_ZN12FrontendHeapD0Ev>:
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b082      	sub	sp, #8
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
 8016f94:	6878      	ldr	r0, [r7, #4]
 8016f96:	f7ff ffcf 	bl	8016f38 <_ZN12FrontendHeapD1Ev>
 8016f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f010 fad8 	bl	8027554 <_ZdlPvj>
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	3708      	adds	r7, #8
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bd80      	pop	{r7, pc}
	...

08016fb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b082      	sub	sp, #8
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
 8016fb8:	4a05      	ldr	r2, [pc, #20]	; (8016fd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	601a      	str	r2, [r3, #0]
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f000 fc1f 	bl	8017804 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	4618      	mov	r0, r3
 8016fca:	3708      	adds	r7, #8
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}
 8016fd0:	0802a320 	.word	0x0802a320

08016fd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b082      	sub	sp, #8
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f7ff ffe7 	bl	8016fb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8016fe2:	215c      	movs	r1, #92	; 0x5c
 8016fe4:	6878      	ldr	r0, [r7, #4]
 8016fe6:	f010 fab5 	bl	8027554 <_ZdlPvj>
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	4618      	mov	r0, r3
 8016fee:	3708      	adds	r7, #8
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}

08016ff4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b082      	sub	sp, #8
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
 8016ffc:	4a05      	ldr	r2, [pc, #20]	; (8017014 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	601a      	str	r2, [r3, #0]
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	4618      	mov	r0, r3
 8017006:	f000 fbfd 	bl	8017804 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	4618      	mov	r0, r3
 801700e:	3708      	adds	r7, #8
 8017010:	46bd      	mov	sp, r7
 8017012:	bd80      	pop	{r7, pc}
 8017014:	0802a354 	.word	0x0802a354

08017018 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8017018:	b580      	push	{r7, lr}
 801701a:	b082      	sub	sp, #8
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	6878      	ldr	r0, [r7, #4]
 8017022:	f7ff ffe7 	bl	8016ff4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017026:	f641 611c 	movw	r1, #7708	; 0x1e1c
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	f010 fa92 	bl	8027554 <_ZdlPvj>
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	4618      	mov	r0, r3
 8017034:	3708      	adds	r7, #8
 8017036:	46bd      	mov	sp, r7
 8017038:	bd80      	pop	{r7, pc}
	...

0801703c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801703c:	b580      	push	{r7, lr}
 801703e:	b082      	sub	sp, #8
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
 8017044:	4a05      	ldr	r2, [pc, #20]	; (801705c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	601a      	str	r2, [r3, #0]
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	4618      	mov	r0, r3
 801704e:	f000 fbd9 	bl	8017804 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	4618      	mov	r0, r3
 8017056:	3708      	adds	r7, #8
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}
 801705c:	0802a388 	.word	0x0802a388

08017060 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8017060:	b580      	push	{r7, lr}
 8017062:	b082      	sub	sp, #8
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f7ff ffe7 	bl	801703c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801706e:	2118      	movs	r1, #24
 8017070:	6878      	ldr	r0, [r7, #4]
 8017072:	f010 fa6f 	bl	8027554 <_ZdlPvj>
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	4618      	mov	r0, r3
 801707a:	3708      	adds	r7, #8
 801707c:	46bd      	mov	sp, r7
 801707e:	bd80      	pop	{r7, pc}

08017080 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8017080:	b580      	push	{r7, lr}
 8017082:	b082      	sub	sp, #8
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]
 8017088:	4a05      	ldr	r2, [pc, #20]	; (80170a0 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	601a      	str	r2, [r3, #0]
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	4618      	mov	r0, r3
 8017092:	f7ff fcdd 	bl	8016a50 <_ZN8touchgfx3LCDD1Ev>
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	4618      	mov	r0, r3
 801709a:	3708      	adds	r7, #8
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	0802c9ac 	.word	0x0802c9ac

080170a4 <_ZN8touchgfx8LCD24bppD0Ev>:
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b082      	sub	sp, #8
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f7ff ffe7 	bl	8017080 <_ZN8touchgfx8LCD24bppD1Ev>
 80170b2:	2158      	movs	r1, #88	; 0x58
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f010 fa4d 	bl	8027554 <_ZdlPvj>
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	4618      	mov	r0, r3
 80170be:	3708      	adds	r7, #8
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}

080170c4 <_Z41__static_initialization_and_destruction_0ii>:
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b084      	sub	sp, #16
 80170c8:	af02      	add	r7, sp, #8
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	6039      	str	r1, [r7, #0]
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	2b01      	cmp	r3, #1
 80170d2:	d119      	bne.n	8017108 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80170d4:	683b      	ldr	r3, [r7, #0]
 80170d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80170da:	4293      	cmp	r3, r2
 80170dc:	d114      	bne.n	8017108 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80170de:	4818      	ldr	r0, [pc, #96]	; (8017140 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80170e0:	f7ff fee4 	bl	8016eac <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80170e4:	4817      	ldr	r0, [pc, #92]	; (8017144 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80170e6:	f7ff f961 	bl	80163ac <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 80170ea:	4817      	ldr	r0, [pc, #92]	; (8017148 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80170ec:	f008 fdea 	bl	801fcc4 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80170f0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80170f4:	9301      	str	r3, [sp, #4]
 80170f6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80170fa:	9300      	str	r3, [sp, #0]
 80170fc:	4b10      	ldr	r3, [pc, #64]	; (8017140 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80170fe:	4a12      	ldr	r2, [pc, #72]	; (8017148 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017100:	4910      	ldr	r1, [pc, #64]	; (8017144 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017102:	4812      	ldr	r0, [pc, #72]	; (801714c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8017104:	f7ff fea6 	bl	8016e54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d113      	bne.n	8017136 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017114:	4293      	cmp	r3, r2
 8017116:	d10e      	bne.n	8017136 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8017118:	480c      	ldr	r0, [pc, #48]	; (801714c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801711a:	f7fe ff43 	bl	8015fa4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801711e:	480c      	ldr	r0, [pc, #48]	; (8017150 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8017120:	f7f7 ffd6 	bl	800f0d0 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8017124:	4808      	ldr	r0, [pc, #32]	; (8017148 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017126:	f7ff ffab 	bl	8017080 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 801712a:	4806      	ldr	r0, [pc, #24]	; (8017144 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801712c:	f7ff f968 	bl	8016400 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8017130:	4803      	ldr	r0, [pc, #12]	; (8017140 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017132:	f7fe fc9b 	bl	8015a6c <_ZN20STM32TouchControllerD1Ev>
}
 8017136:	bf00      	nop
 8017138:	3708      	adds	r7, #8
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}
 801713e:	bf00      	nop
 8017140:	2000a60c 	.word	0x2000a60c
 8017144:	2000a610 	.word	0x2000a610
 8017148:	2000b230 	.word	0x2000b230
 801714c:	2000b28c 	.word	0x2000b28c
 8017150:	2000003c 	.word	0x2000003c

08017154 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 8017154:	b480      	push	{r7}
 8017156:	b083      	sub	sp, #12
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 801715c:	2301      	movs	r3, #1
    }
 801715e:	4618      	mov	r0, r3
 8017160:	370c      	adds	r7, #12
 8017162:	46bd      	mov	sp, r7
 8017164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017168:	4770      	bx	lr

0801716a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 801716a:	b480      	push	{r7}
 801716c:	b083      	sub	sp, #12
 801716e:	af00      	add	r7, sp, #0
 8017170:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8017172:	2354      	movs	r3, #84	; 0x54
    }
 8017174:	4618      	mov	r0, r3
 8017176:	370c      	adds	r7, #12
 8017178:	46bd      	mov	sp, r7
 801717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717e:	4770      	bx	lr

08017180 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 8017180:	b480      	push	{r7}
 8017182:	b083      	sub	sp, #12
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
 8017188:	460b      	mov	r3, r1
 801718a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801718c:	887b      	ldrh	r3, [r7, #2]
 801718e:	2254      	movs	r2, #84	; 0x54
 8017190:	fb02 f303 	mul.w	r3, r2, r3
 8017194:	3308      	adds	r3, #8
 8017196:	687a      	ldr	r2, [r7, #4]
 8017198:	4413      	add	r3, r2
    }
 801719a:	4618      	mov	r0, r3
 801719c:	370c      	adds	r7, #12
 801719e:	46bd      	mov	sp, r7
 80171a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a4:	4770      	bx	lr

080171a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 80171a6:	b480      	push	{r7}
 80171a8:	b083      	sub	sp, #12
 80171aa:	af00      	add	r7, sp, #0
 80171ac:	6078      	str	r0, [r7, #4]
 80171ae:	460b      	mov	r3, r1
 80171b0:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80171b2:	887b      	ldrh	r3, [r7, #2]
 80171b4:	2254      	movs	r2, #84	; 0x54
 80171b6:	fb02 f303 	mul.w	r3, r2, r3
 80171ba:	3308      	adds	r3, #8
 80171bc:	687a      	ldr	r2, [r7, #4]
 80171be:	4413      	add	r3, r2
    }
 80171c0:	4618      	mov	r0, r3
 80171c2:	370c      	adds	r7, #12
 80171c4:	46bd      	mov	sp, r7
 80171c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ca:	4770      	bx	lr

080171cc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80171cc:	b480      	push	{r7}
 80171ce:	b083      	sub	sp, #12
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80171d4:	2301      	movs	r3, #1
    }
 80171d6:	4618      	mov	r0, r3
 80171d8:	370c      	adds	r7, #12
 80171da:	46bd      	mov	sp, r7
 80171dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e0:	4770      	bx	lr

080171e2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80171e2:	b480      	push	{r7}
 80171e4:	b083      	sub	sp, #12
 80171e6:	af00      	add	r7, sp, #0
 80171e8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80171ea:	f641 6314 	movw	r3, #7700	; 0x1e14
    }
 80171ee:	4618      	mov	r0, r3
 80171f0:	370c      	adds	r7, #12
 80171f2:	46bd      	mov	sp, r7
 80171f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f8:	4770      	bx	lr

080171fa <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80171fa:	b480      	push	{r7}
 80171fc:	b083      	sub	sp, #12
 80171fe:	af00      	add	r7, sp, #0
 8017200:	6078      	str	r0, [r7, #4]
 8017202:	460b      	mov	r3, r1
 8017204:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017206:	887b      	ldrh	r3, [r7, #2]
 8017208:	f641 6214 	movw	r2, #7700	; 0x1e14
 801720c:	fb02 f303 	mul.w	r3, r2, r3
 8017210:	3308      	adds	r3, #8
 8017212:	687a      	ldr	r2, [r7, #4]
 8017214:	4413      	add	r3, r2
    }
 8017216:	4618      	mov	r0, r3
 8017218:	370c      	adds	r7, #12
 801721a:	46bd      	mov	sp, r7
 801721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017220:	4770      	bx	lr

08017222 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017222:	b480      	push	{r7}
 8017224:	b083      	sub	sp, #12
 8017226:	af00      	add	r7, sp, #0
 8017228:	6078      	str	r0, [r7, #4]
 801722a:	460b      	mov	r3, r1
 801722c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801722e:	887b      	ldrh	r3, [r7, #2]
 8017230:	f641 6214 	movw	r2, #7700	; 0x1e14
 8017234:	fb02 f303 	mul.w	r3, r2, r3
 8017238:	3308      	adds	r3, #8
 801723a:	687a      	ldr	r2, [r7, #4]
 801723c:	4413      	add	r3, r2
    }
 801723e:	4618      	mov	r0, r3
 8017240:	370c      	adds	r7, #12
 8017242:	46bd      	mov	sp, r7
 8017244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017248:	4770      	bx	lr

0801724a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801724a:	b480      	push	{r7}
 801724c:	b083      	sub	sp, #12
 801724e:	af00      	add	r7, sp, #0
 8017250:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017252:	2301      	movs	r3, #1
    }
 8017254:	4618      	mov	r0, r3
 8017256:	370c      	adds	r7, #12
 8017258:	46bd      	mov	sp, r7
 801725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725e:	4770      	bx	lr

08017260 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017260:	b480      	push	{r7}
 8017262:	b083      	sub	sp, #12
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017268:	2310      	movs	r3, #16
    }
 801726a:	4618      	mov	r0, r3
 801726c:	370c      	adds	r7, #12
 801726e:	46bd      	mov	sp, r7
 8017270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017274:	4770      	bx	lr

08017276 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017276:	b480      	push	{r7}
 8017278:	b083      	sub	sp, #12
 801727a:	af00      	add	r7, sp, #0
 801727c:	6078      	str	r0, [r7, #4]
 801727e:	460b      	mov	r3, r1
 8017280:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017282:	887b      	ldrh	r3, [r7, #2]
 8017284:	011b      	lsls	r3, r3, #4
 8017286:	3308      	adds	r3, #8
 8017288:	687a      	ldr	r2, [r7, #4]
 801728a:	4413      	add	r3, r2
    }
 801728c:	4618      	mov	r0, r3
 801728e:	370c      	adds	r7, #12
 8017290:	46bd      	mov	sp, r7
 8017292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017296:	4770      	bx	lr

08017298 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017298:	b480      	push	{r7}
 801729a:	b083      	sub	sp, #12
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
 80172a0:	460b      	mov	r3, r1
 80172a2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80172a4:	887b      	ldrh	r3, [r7, #2]
 80172a6:	011b      	lsls	r3, r3, #4
 80172a8:	3308      	adds	r3, #8
 80172aa:	687a      	ldr	r2, [r7, #4]
 80172ac:	4413      	add	r3, r2
    }
 80172ae:	4618      	mov	r0, r3
 80172b0:	370c      	adds	r7, #12
 80172b2:	46bd      	mov	sp, r7
 80172b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b8:	4770      	bx	lr

080172ba <_GLOBAL__sub_I_touchgfx_init>:
 80172ba:	b580      	push	{r7, lr}
 80172bc:	af00      	add	r7, sp, #0
 80172be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80172c2:	2001      	movs	r0, #1
 80172c4:	f7ff fefe 	bl	80170c4 <_Z41__static_initialization_and_destruction_0ii>
 80172c8:	bd80      	pop	{r7, pc}

080172ca <_GLOBAL__sub_D_touchgfx_init>:
 80172ca:	b580      	push	{r7, lr}
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80172d2:	2000      	movs	r0, #0
 80172d4:	f7ff fef6 	bl	80170c4 <_Z41__static_initialization_and_destruction_0ii>
 80172d8:	bd80      	pop	{r7, pc}

080172da <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80172da:	b580      	push	{r7, lr}
 80172dc:	b082      	sub	sp, #8
 80172de:	af00      	add	r7, sp, #0
 80172e0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	3318      	adds	r3, #24
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	6878      	ldr	r0, [r7, #4]
 80172ec:	4798      	blx	r3
    }
 80172ee:	bf00      	nop
 80172f0:	3708      	adds	r7, #8
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}

080172f6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80172f6:	b480      	push	{r7}
 80172f8:	b083      	sub	sp, #12
 80172fa:	af00      	add	r7, sp, #0
 80172fc:	6078      	str	r0, [r7, #4]
 80172fe:	460b      	mov	r3, r1
 8017300:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	78fa      	ldrb	r2, [r7, #3]
 8017306:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 801730a:	bf00      	nop
 801730c:	370c      	adds	r7, #12
 801730e:	46bd      	mov	sp, r7
 8017310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017314:	4770      	bx	lr

08017316 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8017316:	b480      	push	{r7}
 8017318:	b083      	sub	sp, #12
 801731a:	af00      	add	r7, sp, #0
 801731c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8017324:	3301      	adds	r3, #1
 8017326:	b2da      	uxtb	r2, r3
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801732e:	bf00      	nop
 8017330:	370c      	adds	r7, #12
 8017332:	46bd      	mov	sp, r7
 8017334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017338:	4770      	bx	lr
	...

0801733c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 801733c:	b580      	push	{r7, lr}
 801733e:	b082      	sub	sp, #8
 8017340:	af00      	add	r7, sp, #0
 8017342:	6078      	str	r0, [r7, #4]
 8017344:	460b      	mov	r3, r1
 8017346:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8017348:	78fb      	ldrb	r3, [r7, #3]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d002      	beq.n	8017354 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801734e:	78fb      	ldrb	r3, [r7, #3]
 8017350:	2b02      	cmp	r3, #2
 8017352:	d105      	bne.n	8017360 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	78fa      	ldrb	r2, [r7, #3]
 8017358:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 801735c:	2301      	movs	r3, #1
 801735e:	e027      	b.n	80173b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8017360:	78fb      	ldrb	r3, [r7, #3]
 8017362:	2b01      	cmp	r3, #1
 8017364:	d123      	bne.n	80173ae <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801736a:	2b00      	cmp	r3, #0
 801736c:	d014      	beq.n	8017398 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	3380      	adds	r3, #128	; 0x80
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	6878      	ldr	r0, [r7, #4]
 8017378:	4798      	blx	r3
 801737a:	4603      	mov	r3, r0
 801737c:	461a      	mov	r2, r3
 801737e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017382:	429a      	cmp	r2, r3
 8017384:	d008      	beq.n	8017398 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017386:	4b0c      	ldr	r3, [pc, #48]	; (80173b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	f083 0301 	eor.w	r3, r3, #1
 801738e:	b2db      	uxtb	r3, r3
 8017390:	2b00      	cmp	r3, #0
 8017392:	d001      	beq.n	8017398 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017394:	2301      	movs	r3, #1
 8017396:	e000      	b.n	801739a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8017398:	2300      	movs	r3, #0
 801739a:	2b00      	cmp	r3, #0
 801739c:	d005      	beq.n	80173aa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	78fa      	ldrb	r2, [r7, #3]
 80173a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80173a6:	2301      	movs	r3, #1
 80173a8:	e002      	b.n	80173b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80173aa:	2300      	movs	r3, #0
 80173ac:	e000      	b.n	80173b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80173ae:	2300      	movs	r3, #0
    }
 80173b0:	4618      	mov	r0, r3
 80173b2:	3708      	adds	r7, #8
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bd80      	pop	{r7, pc}
 80173b8:	2000b312 	.word	0x2000b312

080173bc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 80173bc:	b480      	push	{r7}
 80173be:	b083      	sub	sp, #12
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
 80173c4:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	683a      	ldr	r2, [r7, #0]
 80173ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80173cc:	bf00      	nop
 80173ce:	370c      	adds	r7, #12
 80173d0:	46bd      	mov	sp, r7
 80173d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d6:	4770      	bx	lr

080173d8 <__NVIC_EnableIRQ>:
{
 80173d8:	b480      	push	{r7}
 80173da:	b083      	sub	sp, #12
 80173dc:	af00      	add	r7, sp, #0
 80173de:	4603      	mov	r3, r0
 80173e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80173e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	db0d      	blt.n	8017406 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80173ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80173ee:	b2db      	uxtb	r3, r3
 80173f0:	f003 021f 	and.w	r2, r3, #31
 80173f4:	4907      	ldr	r1, [pc, #28]	; (8017414 <__NVIC_EnableIRQ+0x3c>)
 80173f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80173fa:	095b      	lsrs	r3, r3, #5
 80173fc:	2001      	movs	r0, #1
 80173fe:	fa00 f202 	lsl.w	r2, r0, r2
 8017402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017406:	bf00      	nop
 8017408:	370c      	adds	r7, #12
 801740a:	46bd      	mov	sp, r7
 801740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017410:	4770      	bx	lr
 8017412:	bf00      	nop
 8017414:	e000e100 	.word	0xe000e100

08017418 <__NVIC_DisableIRQ>:
{
 8017418:	b480      	push	{r7}
 801741a:	b083      	sub	sp, #12
 801741c:	af00      	add	r7, sp, #0
 801741e:	4603      	mov	r3, r0
 8017420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017426:	2b00      	cmp	r3, #0
 8017428:	db12      	blt.n	8017450 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801742a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801742e:	b2db      	uxtb	r3, r3
 8017430:	f003 021f 	and.w	r2, r3, #31
 8017434:	4909      	ldr	r1, [pc, #36]	; (801745c <__NVIC_DisableIRQ+0x44>)
 8017436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801743a:	095b      	lsrs	r3, r3, #5
 801743c:	2001      	movs	r0, #1
 801743e:	fa00 f202 	lsl.w	r2, r0, r2
 8017442:	3320      	adds	r3, #32
 8017444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017448:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801744c:	f3bf 8f6f 	isb	sy
}
 8017450:	bf00      	nop
 8017452:	370c      	adds	r7, #12
 8017454:	46bd      	mov	sp, r7
 8017456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801745a:	4770      	bx	lr
 801745c:	e000e100 	.word	0xe000e100

08017460 <__NVIC_SetPriority>:
{
 8017460:	b480      	push	{r7}
 8017462:	b083      	sub	sp, #12
 8017464:	af00      	add	r7, sp, #0
 8017466:	4603      	mov	r3, r0
 8017468:	6039      	str	r1, [r7, #0]
 801746a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801746c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017470:	2b00      	cmp	r3, #0
 8017472:	db0c      	blt.n	801748e <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017474:	683b      	ldr	r3, [r7, #0]
 8017476:	b2db      	uxtb	r3, r3
 8017478:	4a0e      	ldr	r2, [pc, #56]	; (80174b4 <__NVIC_SetPriority+0x54>)
 801747a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801747e:	4608      	mov	r0, r1
 8017480:	011b      	lsls	r3, r3, #4
 8017482:	b2d9      	uxtb	r1, r3
 8017484:	1813      	adds	r3, r2, r0
 8017486:	460a      	mov	r2, r1
 8017488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801748c:	e00c      	b.n	80174a8 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801748e:	683b      	ldr	r3, [r7, #0]
 8017490:	b2da      	uxtb	r2, r3
 8017492:	4909      	ldr	r1, [pc, #36]	; (80174b8 <__NVIC_SetPriority+0x58>)
 8017494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017498:	b2db      	uxtb	r3, r3
 801749a:	f003 030f 	and.w	r3, r3, #15
 801749e:	3b04      	subs	r3, #4
 80174a0:	0112      	lsls	r2, r2, #4
 80174a2:	b2d2      	uxtb	r2, r2
 80174a4:	440b      	add	r3, r1
 80174a6:	761a      	strb	r2, [r3, #24]
}
 80174a8:	bf00      	nop
 80174aa:	370c      	adds	r7, #12
 80174ac:	46bd      	mov	sp, r7
 80174ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b2:	4770      	bx	lr
 80174b4:	e000e100 	.word	0xe000e100
 80174b8:	e000ed00 	.word	0xe000ed00

080174bc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80174bc:	b5b0      	push	{r4, r5, r7, lr}
 80174be:	b082      	sub	sp, #8
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	4618      	mov	r0, r3
 80174c8:	f000 fe76 	bl	80181b8 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 80174cc:	687d      	ldr	r5, [r7, #4]
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	334c      	adds	r3, #76	; 0x4c
 80174d4:	681c      	ldr	r4, [r3, #0]
 80174d6:	f003 fee9 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 80174da:	4603      	mov	r3, r0
 80174dc:	4619      	mov	r1, r3
 80174de:	4628      	mov	r0, r5
 80174e0:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	490d      	ldr	r1, [pc, #52]	; (801751c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80174e6:	4618      	mov	r0, r3
 80174e8:	f7ff ff68 	bl	80173bc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	2101      	movs	r1, #1
 80174f0:	4618      	mov	r0, r3
 80174f2:	f7ff ff23 	bl	801733c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80174f6:	6878      	ldr	r0, [r7, #4]
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	3374      	adds	r3, #116	; 0x74
 80174fe:	681c      	ldr	r4, [r3, #0]
 8017500:	2300      	movs	r3, #0
 8017502:	2200      	movs	r2, #0
 8017504:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8017508:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	2101      	movs	r1, #1
 801750e:	4618      	mov	r0, r3
 8017510:	f7ff fef1 	bl	80172f6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8017514:	bf00      	nop
 8017516:	3708      	adds	r7, #8
 8017518:	46bd      	mov	sp, r7
 801751a:	bdb0      	pop	{r4, r5, r7, pc}
 801751c:	080160f9 	.word	0x080160f9

08017520 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b082      	sub	sp, #8
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8017528:	2109      	movs	r1, #9
 801752a:	205a      	movs	r0, #90	; 0x5a
 801752c:	f7ff ff98 	bl	8017460 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8017530:	2109      	movs	r1, #9
 8017532:	2058      	movs	r0, #88	; 0x58
 8017534:	f7ff ff94 	bl	8017460 <__NVIC_SetPriority>
}
 8017538:	bf00      	nop
 801753a:	3708      	adds	r7, #8
 801753c:	46bd      	mov	sp, r7
 801753e:	bd80      	pop	{r7, pc}

08017540 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b082      	sub	sp, #8
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8017548:	205a      	movs	r0, #90	; 0x5a
 801754a:	f7ff ff45 	bl	80173d8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801754e:	2058      	movs	r0, #88	; 0x58
 8017550:	f7ff ff42 	bl	80173d8 <__NVIC_EnableIRQ>
}
 8017554:	bf00      	nop
 8017556:	3708      	adds	r7, #8
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}

0801755c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b082      	sub	sp, #8
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8017564:	205a      	movs	r0, #90	; 0x5a
 8017566:	f7ff ff57 	bl	8017418 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801756a:	2058      	movs	r0, #88	; 0x58
 801756c:	f7ff ff54 	bl	8017418 <__NVIC_DisableIRQ>
}
 8017570:	bf00      	nop
 8017572:	3708      	adds	r7, #8
 8017574:	46bd      	mov	sp, r7
 8017576:	bd80      	pop	{r7, pc}

08017578 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8017578:	b480      	push	{r7}
 801757a:	b083      	sub	sp, #12
 801757c:	af00      	add	r7, sp, #0
 801757e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8017580:	4b11      	ldr	r3, [pc, #68]	; (80175c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017582:	68db      	ldr	r3, [r3, #12]
 8017584:	b29b      	uxth	r3, r3
 8017586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801758a:	b29b      	uxth	r3, r3
 801758c:	3b01      	subs	r3, #1
 801758e:	b29a      	uxth	r2, r3
 8017590:	4b0e      	ldr	r3, [pc, #56]	; (80175cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017592:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8017594:	4b0c      	ldr	r3, [pc, #48]	; (80175c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017596:	691b      	ldr	r3, [r3, #16]
 8017598:	b29b      	uxth	r3, r3
 801759a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801759e:	b29b      	uxth	r3, r3
 80175a0:	3b01      	subs	r3, #1
 80175a2:	b29a      	uxth	r2, r3
 80175a4:	4b0a      	ldr	r3, [pc, #40]	; (80175d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80175a6:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80175a8:	4b08      	ldr	r3, [pc, #32]	; (80175cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80175aa:	881a      	ldrh	r2, [r3, #0]
 80175ac:	4b06      	ldr	r3, [pc, #24]	; (80175c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80175ae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80175b0:	4b05      	ldr	r3, [pc, #20]	; (80175c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80175b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80175b4:	4a04      	ldr	r2, [pc, #16]	; (80175c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80175b6:	f043 0301 	orr.w	r3, r3, #1
 80175ba:	6353      	str	r3, [r2, #52]	; 0x34
}
 80175bc:	bf00      	nop
 80175be:	370c      	adds	r7, #12
 80175c0:	46bd      	mov	sp, r7
 80175c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c6:	4770      	bx	lr
 80175c8:	40016800 	.word	0x40016800
 80175cc:	2000b304 	.word	0x2000b304
 80175d0:	2000b306 	.word	0x2000b306

080175d4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80175d4:	b480      	push	{r7}
 80175d6:	b083      	sub	sp, #12
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80175dc:	4b03      	ldr	r3, [pc, #12]	; (80175ec <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80175de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80175e0:	4618      	mov	r0, r3
 80175e2:	370c      	adds	r7, #12
 80175e4:	46bd      	mov	sp, r7
 80175e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ea:	4770      	bx	lr
 80175ec:	40016884 	.word	0x40016884

080175f0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80175f0:	b480      	push	{r7}
 80175f2:	b083      	sub	sp, #12
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
 80175f8:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80175fa:	4a06      	ldr	r2, [pc, #24]	; (8017614 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80175fc:	683b      	ldr	r3, [r7, #0]
 80175fe:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8017600:	4b05      	ldr	r3, [pc, #20]	; (8017618 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8017602:	2201      	movs	r2, #1
 8017604:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017606:	bf00      	nop
 8017608:	370c      	adds	r7, #12
 801760a:	46bd      	mov	sp, r7
 801760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017610:	4770      	bx	lr
 8017612:	bf00      	nop
 8017614:	40016884 	.word	0x40016884
 8017618:	40016800 	.word	0x40016800

0801761c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b082      	sub	sp, #8
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
 8017624:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	6839      	ldr	r1, [r7, #0]
 801762a:	4618      	mov	r0, r3
 801762c:	f000 fad5 	bl	8017bda <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8017630:	bf00      	nop
 8017632:	3708      	adds	r7, #8
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}

08017638 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8017638:	b480      	push	{r7}
 801763a:	b085      	sub	sp, #20
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8017640:	4b0d      	ldr	r3, [pc, #52]	; (8017678 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017644:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8017646:	4b0c      	ldr	r3, [pc, #48]	; (8017678 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017648:	68db      	ldr	r3, [r3, #12]
 801764a:	b29b      	uxth	r3, r3
 801764c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017650:	b29b      	uxth	r3, r3
 8017652:	3301      	adds	r3, #1
 8017654:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8017656:	89fa      	ldrh	r2, [r7, #14]
 8017658:	89bb      	ldrh	r3, [r7, #12]
 801765a:	429a      	cmp	r2, r3
 801765c:	d201      	bcs.n	8017662 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 801765e:	2300      	movs	r3, #0
 8017660:	e003      	b.n	801766a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8017662:	89fa      	ldrh	r2, [r7, #14]
 8017664:	89bb      	ldrh	r3, [r7, #12]
 8017666:	1ad3      	subs	r3, r2, r3
 8017668:	b29b      	uxth	r3, r3
    }
}
 801766a:	4618      	mov	r0, r3
 801766c:	3714      	adds	r7, #20
 801766e:	46bd      	mov	sp, r7
 8017670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017674:	4770      	bx	lr
 8017676:	bf00      	nop
 8017678:	40016800 	.word	0x40016800

0801767c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 801767c:	b580      	push	{r7, lr}
 801767e:	b082      	sub	sp, #8
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8017684:	4b1a      	ldr	r3, [pc, #104]	; (80176f0 <HAL_LTDC_LineEventCallback+0x74>)
 8017686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017688:	4a1a      	ldr	r2, [pc, #104]	; (80176f4 <HAL_LTDC_LineEventCallback+0x78>)
 801768a:	8812      	ldrh	r2, [r2, #0]
 801768c:	4293      	cmp	r3, r2
 801768e:	bf0c      	ite	eq
 8017690:	2301      	moveq	r3, #1
 8017692:	2300      	movne	r3, #0
 8017694:	b2db      	uxtb	r3, r3
 8017696:	2b00      	cmp	r3, #0
 8017698:	d017      	beq.n	80176ca <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801769a:	4b17      	ldr	r3, [pc, #92]	; (80176f8 <HAL_LTDC_LineEventCallback+0x7c>)
 801769c:	881b      	ldrh	r3, [r3, #0]
 801769e:	4619      	mov	r1, r3
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f7ee f937 	bl	8005914 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80176a6:	f7f8 faa7 	bl	800fbf8 <_ZN8touchgfx3HAL11getInstanceEv>
 80176aa:	4603      	mov	r3, r0
 80176ac:	4618      	mov	r0, r3
 80176ae:	f7ff fe32 	bl	8017316 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80176b2:	f7fe fd01 	bl	80160b8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80176b6:	f7f8 fa9f 	bl	800fbf8 <_ZN8touchgfx3HAL11getInstanceEv>
 80176ba:	4603      	mov	r3, r0
 80176bc:	4618      	mov	r0, r3
 80176be:	f001 f803 	bl	80186c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80176c2:	2000      	movs	r0, #0
 80176c4:	f7fe f9f4 	bl	8015ab0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80176c8:	e00e      	b.n	80176e8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80176ca:	4b0a      	ldr	r3, [pc, #40]	; (80176f4 <HAL_LTDC_LineEventCallback+0x78>)
 80176cc:	881b      	ldrh	r3, [r3, #0]
 80176ce:	4619      	mov	r1, r3
 80176d0:	6878      	ldr	r0, [r7, #4]
 80176d2:	f7ee f91f 	bl	8005914 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80176d6:	2000      	movs	r0, #0
 80176d8:	f7fe f9f5 	bl	8015ac6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80176dc:	f7f8 fa8c 	bl	800fbf8 <_ZN8touchgfx3HAL11getInstanceEv>
 80176e0:	4603      	mov	r3, r0
 80176e2:	4618      	mov	r0, r3
 80176e4:	f7ff fdf9 	bl	80172da <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80176e8:	bf00      	nop
 80176ea:	3708      	adds	r7, #8
 80176ec:	46bd      	mov	sp, r7
 80176ee:	bd80      	pop	{r7, pc}
 80176f0:	40016800 	.word	0x40016800
 80176f4:	2000b304 	.word	0x2000b304
 80176f8:	2000b306 	.word	0x2000b306

080176fc <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80176fc:	8880      	ldrh	r0, [r0, #4]
 80176fe:	4770      	bx	lr

08017700 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8017700:	2300      	movs	r3, #0
 8017702:	8083      	strh	r3, [r0, #4]
 8017704:	4770      	bx	lr
	...

08017708 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801770a:	6803      	ldr	r3, [r0, #0]
 801770c:	460e      	mov	r6, r1
 801770e:	2100      	movs	r1, #0
 8017710:	4605      	mov	r5, r0
 8017712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017714:	4798      	blx	r3
 8017716:	4604      	mov	r4, r0
 8017718:	682b      	ldr	r3, [r5, #0]
 801771a:	4628      	mov	r0, r5
 801771c:	1b34      	subs	r4, r6, r4
 801771e:	6a1b      	ldr	r3, [r3, #32]
 8017720:	b2a4      	uxth	r4, r4
 8017722:	4798      	blx	r3
 8017724:	88ab      	ldrh	r3, [r5, #4]
 8017726:	fbb4 f4f0 	udiv	r4, r4, r0
 801772a:	42a3      	cmp	r3, r4
 801772c:	d805      	bhi.n	801773a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801772e:	4b0e      	ldr	r3, [pc, #56]	; (8017768 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8017730:	2120      	movs	r1, #32
 8017732:	4a0e      	ldr	r2, [pc, #56]	; (801776c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017734:	480e      	ldr	r0, [pc, #56]	; (8017770 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8017736:	f00f ff39 	bl	80275ac <__assert_func>
 801773a:	682b      	ldr	r3, [r5, #0]
 801773c:	2100      	movs	r1, #0
 801773e:	4628      	mov	r0, r5
 8017740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017742:	4798      	blx	r3
 8017744:	682b      	ldr	r3, [r5, #0]
 8017746:	4607      	mov	r7, r0
 8017748:	4628      	mov	r0, r5
 801774a:	6a1b      	ldr	r3, [r3, #32]
 801774c:	4798      	blx	r3
 801774e:	1bf3      	subs	r3, r6, r7
 8017750:	b29b      	uxth	r3, r3
 8017752:	fbb3 f2f0 	udiv	r2, r3, r0
 8017756:	fb02 3010 	mls	r0, r2, r0, r3
 801775a:	b118      	cbz	r0, 8017764 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801775c:	4b05      	ldr	r3, [pc, #20]	; (8017774 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801775e:	2121      	movs	r1, #33	; 0x21
 8017760:	4a02      	ldr	r2, [pc, #8]	; (801776c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017762:	e7e7      	b.n	8017734 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8017764:	4620      	mov	r0, r4
 8017766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017768:	0802a48c 	.word	0x0802a48c
 801776c:	0802a5fa 	.word	0x0802a5fa
 8017770:	0802a4a1 	.word	0x0802a4a1
 8017774:	0802a4cf 	.word	0x0802a4cf

08017778 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017778:	b538      	push	{r3, r4, r5, lr}
 801777a:	6803      	ldr	r3, [r0, #0]
 801777c:	460d      	mov	r5, r1
 801777e:	4604      	mov	r4, r0
 8017780:	6a1b      	ldr	r3, [r3, #32]
 8017782:	4798      	blx	r3
 8017784:	4285      	cmp	r5, r0
 8017786:	d905      	bls.n	8017794 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8017788:	4b0c      	ldr	r3, [pc, #48]	; (80177bc <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801778a:	2132      	movs	r1, #50	; 0x32
 801778c:	4a0c      	ldr	r2, [pc, #48]	; (80177c0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801778e:	480d      	ldr	r0, [pc, #52]	; (80177c4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8017790:	f00f ff0c 	bl	80275ac <__assert_func>
 8017794:	6823      	ldr	r3, [r4, #0]
 8017796:	4620      	mov	r0, r4
 8017798:	88a5      	ldrh	r5, [r4, #4]
 801779a:	69db      	ldr	r3, [r3, #28]
 801779c:	4798      	blx	r3
 801779e:	4285      	cmp	r5, r0
 80177a0:	d303      	bcc.n	80177aa <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80177a2:	4b09      	ldr	r3, [pc, #36]	; (80177c8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80177a4:	2133      	movs	r1, #51	; 0x33
 80177a6:	4a06      	ldr	r2, [pc, #24]	; (80177c0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80177a8:	e7f1      	b.n	801778e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80177aa:	6823      	ldr	r3, [r4, #0]
 80177ac:	4620      	mov	r0, r4
 80177ae:	88a1      	ldrh	r1, [r4, #4]
 80177b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177b2:	4798      	blx	r3
 80177b4:	88a3      	ldrh	r3, [r4, #4]
 80177b6:	3301      	adds	r3, #1
 80177b8:	80a3      	strh	r3, [r4, #4]
 80177ba:	bd38      	pop	{r3, r4, r5, pc}
 80177bc:	0802a549 	.word	0x0802a549
 80177c0:	0802a63d 	.word	0x0802a63d
 80177c4:	0802a4a1 	.word	0x0802a4a1
 80177c8:	0802a560 	.word	0x0802a560

080177cc <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80177cc:	b570      	push	{r4, r5, r6, lr}
 80177ce:	6803      	ldr	r3, [r0, #0]
 80177d0:	4616      	mov	r6, r2
 80177d2:	4604      	mov	r4, r0
 80177d4:	460d      	mov	r5, r1
 80177d6:	6a1b      	ldr	r3, [r3, #32]
 80177d8:	4798      	blx	r3
 80177da:	4286      	cmp	r6, r0
 80177dc:	d905      	bls.n	80177ea <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80177de:	4b06      	ldr	r3, [pc, #24]	; (80177f8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80177e0:	213c      	movs	r1, #60	; 0x3c
 80177e2:	4a06      	ldr	r2, [pc, #24]	; (80177fc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80177e4:	4806      	ldr	r0, [pc, #24]	; (8017800 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80177e6:	f00f fee1 	bl	80275ac <__assert_func>
 80177ea:	6823      	ldr	r3, [r4, #0]
 80177ec:	4629      	mov	r1, r5
 80177ee:	4620      	mov	r0, r4
 80177f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177f6:	4718      	bx	r3
 80177f8:	0802a549 	.word	0x0802a549
 80177fc:	0802a5b0 	.word	0x0802a5b0
 8017800:	0802a4a1 	.word	0x0802a4a1

08017804 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017804:	4770      	bx	lr
	...

08017808 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017808:	4a02      	ldr	r2, [pc, #8]	; (8017814 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801780a:	6002      	str	r2, [r0, #0]
 801780c:	2200      	movs	r2, #0
 801780e:	8082      	strh	r2, [r0, #4]
 8017810:	4770      	bx	lr
 8017812:	bf00      	nop
 8017814:	0802a584 	.word	0x0802a584

08017818 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017818:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801781a:	2000      	movs	r0, #0
 801781c:	b12b      	cbz	r3, 801782a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801781e:	b920      	cbnz	r0, 801782a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017820:	1a5a      	subs	r2, r3, r1
 8017822:	699b      	ldr	r3, [r3, #24]
 8017824:	4250      	negs	r0, r2
 8017826:	4150      	adcs	r0, r2
 8017828:	e7f8      	b.n	801781c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801782a:	4770      	bx	lr

0801782c <_ZN8touchgfx9Container9removeAllEv>:
 801782c:	2200      	movs	r2, #0
 801782e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017830:	b123      	cbz	r3, 801783c <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017832:	6999      	ldr	r1, [r3, #24]
 8017834:	6281      	str	r1, [r0, #40]	; 0x28
 8017836:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801783a:	e7f8      	b.n	801782e <_ZN8touchgfx9Container9removeAllEv+0x2>
 801783c:	4770      	bx	lr

0801783e <_ZN8touchgfx9Container6unlinkEv>:
 801783e:	2300      	movs	r3, #0
 8017840:	6283      	str	r3, [r0, #40]	; 0x28
 8017842:	4770      	bx	lr

08017844 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017848:	461f      	mov	r7, r3
 801784a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801784e:	460d      	mov	r5, r1
 8017850:	4616      	mov	r6, r2
 8017852:	b103      	cbz	r3, 8017856 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017854:	6038      	str	r0, [r7, #0]
 8017856:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017858:	b314      	cbz	r4, 80178a0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801785a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801785e:	b1eb      	cbz	r3, 801789c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017860:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017864:	428d      	cmp	r5, r1
 8017866:	db19      	blt.n	801789c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017868:	b289      	uxth	r1, r1
 801786a:	8923      	ldrh	r3, [r4, #8]
 801786c:	440b      	add	r3, r1
 801786e:	b21b      	sxth	r3, r3
 8017870:	429d      	cmp	r5, r3
 8017872:	da13      	bge.n	801789c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017874:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017878:	4296      	cmp	r6, r2
 801787a:	db0f      	blt.n	801789c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801787c:	b292      	uxth	r2, r2
 801787e:	8963      	ldrh	r3, [r4, #10]
 8017880:	4413      	add	r3, r2
 8017882:	b21b      	sxth	r3, r3
 8017884:	429e      	cmp	r6, r3
 8017886:	da09      	bge.n	801789c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017888:	6823      	ldr	r3, [r4, #0]
 801788a:	1ab2      	subs	r2, r6, r2
 801788c:	1a69      	subs	r1, r5, r1
 801788e:	4620      	mov	r0, r4
 8017890:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8017894:	b212      	sxth	r2, r2
 8017896:	463b      	mov	r3, r7
 8017898:	b209      	sxth	r1, r1
 801789a:	47c0      	blx	r8
 801789c:	69a4      	ldr	r4, [r4, #24]
 801789e:	e7db      	b.n	8017858 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80178a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080178a4 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80178a4:	2200      	movs	r2, #0
 80178a6:	8002      	strh	r2, [r0, #0]
 80178a8:	8042      	strh	r2, [r0, #2]
 80178aa:	8082      	strh	r2, [r0, #4]
 80178ac:	80c2      	strh	r2, [r0, #6]
 80178ae:	4770      	bx	lr

080178b0 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80178b0:	b570      	push	{r4, r5, r6, lr}
 80178b2:	460d      	mov	r5, r1
 80178b4:	4616      	mov	r6, r2
 80178b6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80178b8:	b13c      	cbz	r4, 80178ca <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80178ba:	6823      	ldr	r3, [r4, #0]
 80178bc:	4620      	mov	r0, r4
 80178be:	4632      	mov	r2, r6
 80178c0:	4629      	mov	r1, r5
 80178c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80178c4:	4798      	blx	r3
 80178c6:	69a4      	ldr	r4, [r4, #24]
 80178c8:	e7f6      	b.n	80178b8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80178ca:	bd70      	pop	{r4, r5, r6, pc}

080178cc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80178cc:	b538      	push	{r3, r4, r5, lr}
 80178ce:	460d      	mov	r5, r1
 80178d0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80178d2:	b134      	cbz	r4, 80178e2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80178d4:	682b      	ldr	r3, [r5, #0]
 80178d6:	4621      	mov	r1, r4
 80178d8:	4628      	mov	r0, r5
 80178da:	689b      	ldr	r3, [r3, #8]
 80178dc:	4798      	blx	r3
 80178de:	69a4      	ldr	r4, [r4, #24]
 80178e0:	e7f7      	b.n	80178d2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80178e2:	bd38      	pop	{r3, r4, r5, pc}

080178e4 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80178e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80178e6:	b19b      	cbz	r3, 8017910 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80178e8:	428b      	cmp	r3, r1
 80178ea:	d109      	bne.n	8017900 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80178ec:	699a      	ldr	r2, [r3, #24]
 80178ee:	2100      	movs	r1, #0
 80178f0:	6159      	str	r1, [r3, #20]
 80178f2:	6282      	str	r2, [r0, #40]	; 0x28
 80178f4:	b902      	cbnz	r2, 80178f8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80178f6:	4770      	bx	lr
 80178f8:	6199      	str	r1, [r3, #24]
 80178fa:	4770      	bx	lr
 80178fc:	4613      	mov	r3, r2
 80178fe:	b13a      	cbz	r2, 8017910 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017900:	699a      	ldr	r2, [r3, #24]
 8017902:	428a      	cmp	r2, r1
 8017904:	d1fa      	bne.n	80178fc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017906:	698a      	ldr	r2, [r1, #24]
 8017908:	619a      	str	r2, [r3, #24]
 801790a:	2300      	movs	r3, #0
 801790c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017910:	4770      	bx	lr

08017912 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8017912:	b410      	push	{r4}
 8017914:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017916:	4604      	mov	r4, r0
 8017918:	b92b      	cbnz	r3, 8017926 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801791a:	6803      	ldr	r3, [r0, #0]
 801791c:	4611      	mov	r1, r2
 801791e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017924:	4718      	bx	r3
 8017926:	b941      	cbnz	r1, 801793a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017928:	6193      	str	r3, [r2, #24]
 801792a:	6282      	str	r2, [r0, #40]	; 0x28
 801792c:	6154      	str	r4, [r2, #20]
 801792e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017932:	4770      	bx	lr
 8017934:	4603      	mov	r3, r0
 8017936:	2800      	cmp	r0, #0
 8017938:	d0f9      	beq.n	801792e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801793a:	4299      	cmp	r1, r3
 801793c:	6998      	ldr	r0, [r3, #24]
 801793e:	d1f9      	bne.n	8017934 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017940:	6190      	str	r0, [r2, #24]
 8017942:	618a      	str	r2, [r1, #24]
 8017944:	e7f2      	b.n	801792c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08017948 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017948:	4288      	cmp	r0, r1
 801794a:	b508      	push	{r3, lr}
 801794c:	d105      	bne.n	801795a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801794e:	4b11      	ldr	r3, [pc, #68]	; (8017994 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8017950:	2123      	movs	r1, #35	; 0x23
 8017952:	4a11      	ldr	r2, [pc, #68]	; (8017998 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017954:	4811      	ldr	r0, [pc, #68]	; (801799c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8017956:	f00f fe29 	bl	80275ac <__assert_func>
 801795a:	694b      	ldr	r3, [r1, #20]
 801795c:	b11b      	cbz	r3, 8017966 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801795e:	4b10      	ldr	r3, [pc, #64]	; (80179a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8017960:	2124      	movs	r1, #36	; 0x24
 8017962:	4a0d      	ldr	r2, [pc, #52]	; (8017998 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017964:	e7f6      	b.n	8017954 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017966:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801796a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801796c:	b913      	cbnz	r3, 8017974 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801796e:	6281      	str	r1, [r0, #40]	; 0x28
 8017970:	bd08      	pop	{r3, pc}
 8017972:	4613      	mov	r3, r2
 8017974:	699a      	ldr	r2, [r3, #24]
 8017976:	b12a      	cbz	r2, 8017984 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8017978:	428b      	cmp	r3, r1
 801797a:	d1fa      	bne.n	8017972 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 801797c:	4b09      	ldr	r3, [pc, #36]	; (80179a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801797e:	2135      	movs	r1, #53	; 0x35
 8017980:	4a05      	ldr	r2, [pc, #20]	; (8017998 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017982:	e7e7      	b.n	8017954 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017984:	428b      	cmp	r3, r1
 8017986:	d103      	bne.n	8017990 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8017988:	4b06      	ldr	r3, [pc, #24]	; (80179a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801798a:	2138      	movs	r1, #56	; 0x38
 801798c:	4a02      	ldr	r2, [pc, #8]	; (8017998 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801798e:	e7e1      	b.n	8017954 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017990:	6199      	str	r1, [r3, #24]
 8017992:	e7ed      	b.n	8017970 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8017994:	0802a67b 	.word	0x0802a67b
 8017998:	0802a7d0 	.word	0x0802a7d0
 801799c:	0802a6a7 	.word	0x0802a6a7
 80179a0:	0802a6da 	.word	0x0802a6da
 80179a4:	0802a710 	.word	0x0802a710

080179a8 <_ZN8touchgfx4RectaNERKS0_>:
 80179a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179ac:	f9b1 7000 	ldrsh.w	r7, [r1]
 80179b0:	888c      	ldrh	r4, [r1, #4]
 80179b2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80179b6:	443c      	add	r4, r7
 80179b8:	b2a4      	uxth	r4, r4
 80179ba:	fa0f f884 	sxth.w	r8, r4
 80179be:	45c1      	cmp	r9, r8
 80179c0:	da2f      	bge.n	8017a22 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80179c2:	8882      	ldrh	r2, [r0, #4]
 80179c4:	444a      	add	r2, r9
 80179c6:	b292      	uxth	r2, r2
 80179c8:	fa0f fe82 	sxth.w	lr, r2
 80179cc:	4577      	cmp	r7, lr
 80179ce:	da28      	bge.n	8017a22 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80179d0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80179d4:	88cb      	ldrh	r3, [r1, #6]
 80179d6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80179da:	442b      	add	r3, r5
 80179dc:	b21b      	sxth	r3, r3
 80179de:	429e      	cmp	r6, r3
 80179e0:	da1f      	bge.n	8017a22 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80179e2:	88c3      	ldrh	r3, [r0, #6]
 80179e4:	4433      	add	r3, r6
 80179e6:	b29b      	uxth	r3, r3
 80179e8:	fa0f fc83 	sxth.w	ip, r3
 80179ec:	4565      	cmp	r5, ip
 80179ee:	da18      	bge.n	8017a22 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80179f0:	454f      	cmp	r7, r9
 80179f2:	bfb8      	it	lt
 80179f4:	464f      	movlt	r7, r9
 80179f6:	42b5      	cmp	r5, r6
 80179f8:	bfb8      	it	lt
 80179fa:	4635      	movlt	r5, r6
 80179fc:	45f0      	cmp	r8, lr
 80179fe:	bfd8      	it	le
 8017a00:	4622      	movle	r2, r4
 8017a02:	1bd2      	subs	r2, r2, r7
 8017a04:	8082      	strh	r2, [r0, #4]
 8017a06:	884a      	ldrh	r2, [r1, #2]
 8017a08:	88c9      	ldrh	r1, [r1, #6]
 8017a0a:	8007      	strh	r7, [r0, #0]
 8017a0c:	440a      	add	r2, r1
 8017a0e:	8045      	strh	r5, [r0, #2]
 8017a10:	b292      	uxth	r2, r2
 8017a12:	b211      	sxth	r1, r2
 8017a14:	458c      	cmp	ip, r1
 8017a16:	bfa8      	it	ge
 8017a18:	4613      	movge	r3, r2
 8017a1a:	1b5b      	subs	r3, r3, r5
 8017a1c:	80c3      	strh	r3, [r0, #6]
 8017a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a22:	2300      	movs	r3, #0
 8017a24:	8003      	strh	r3, [r0, #0]
 8017a26:	8043      	strh	r3, [r0, #2]
 8017a28:	8083      	strh	r3, [r0, #4]
 8017a2a:	80c3      	strh	r3, [r0, #6]
 8017a2c:	e7f7      	b.n	8017a1e <_ZN8touchgfx4RectaNERKS0_+0x76>

08017a2e <_ZNK8touchgfx4Rect7isEmptyEv>:
 8017a2e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	dd06      	ble.n	8017a44 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017a36:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017a3a:	2800      	cmp	r0, #0
 8017a3c:	bfcc      	ite	gt
 8017a3e:	2000      	movgt	r0, #0
 8017a40:	2001      	movle	r0, #1
 8017a42:	4770      	bx	lr
 8017a44:	2001      	movs	r0, #1
 8017a46:	4770      	bx	lr

08017a48 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	4604      	mov	r4, r0
 8017a50:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017a52:	8003      	strh	r3, [r0, #0]
 8017a54:	8043      	strh	r3, [r0, #2]
 8017a56:	8083      	strh	r3, [r0, #4]
 8017a58:	80c3      	strh	r3, [r0, #6]
 8017a5a:	2d00      	cmp	r5, #0
 8017a5c:	d040      	beq.n	8017ae0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017a5e:	1d28      	adds	r0, r5, #4
 8017a60:	f7ff ffe5 	bl	8017a2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a64:	b988      	cbnz	r0, 8017a8a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017a66:	4620      	mov	r0, r4
 8017a68:	f7ff ffe1 	bl	8017a2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a6c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017a70:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017a74:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017a78:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017a7c:	b138      	cbz	r0, 8017a8e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017a7e:	8022      	strh	r2, [r4, #0]
 8017a80:	8063      	strh	r3, [r4, #2]
 8017a82:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017a86:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017a8a:	69ad      	ldr	r5, [r5, #24]
 8017a8c:	e7e5      	b.n	8017a5a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017a8e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017a92:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017a96:	4290      	cmp	r0, r2
 8017a98:	4607      	mov	r7, r0
 8017a9a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017a9e:	460e      	mov	r6, r1
 8017aa0:	bfa8      	it	ge
 8017aa2:	4617      	movge	r7, r2
 8017aa4:	4299      	cmp	r1, r3
 8017aa6:	4472      	add	r2, lr
 8017aa8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017aac:	bfa8      	it	ge
 8017aae:	461e      	movge	r6, r3
 8017ab0:	4440      	add	r0, r8
 8017ab2:	4471      	add	r1, lr
 8017ab4:	4463      	add	r3, ip
 8017ab6:	b200      	sxth	r0, r0
 8017ab8:	8027      	strh	r7, [r4, #0]
 8017aba:	b212      	sxth	r2, r2
 8017abc:	8066      	strh	r6, [r4, #2]
 8017abe:	b209      	sxth	r1, r1
 8017ac0:	b21b      	sxth	r3, r3
 8017ac2:	4290      	cmp	r0, r2
 8017ac4:	bfac      	ite	ge
 8017ac6:	ebc7 0200 	rsbge	r2, r7, r0
 8017aca:	ebc7 0202 	rsblt	r2, r7, r2
 8017ace:	4299      	cmp	r1, r3
 8017ad0:	bfac      	ite	ge
 8017ad2:	ebc6 0301 	rsbge	r3, r6, r1
 8017ad6:	ebc6 0303 	rsblt	r3, r6, r3
 8017ada:	80a2      	strh	r2, [r4, #4]
 8017adc:	80e3      	strh	r3, [r4, #6]
 8017ade:	e7d4      	b.n	8017a8a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017ae0:	4620      	mov	r0, r4
 8017ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017ae6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017ae6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017aea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017aee:	b383      	cbz	r3, 8017b52 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017af0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017af2:	b374      	cbz	r4, 8017b52 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017af4:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017af8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8017afc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017b00:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017b04:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017b08:	b303      	cbz	r3, 8017b4c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017b0a:	4668      	mov	r0, sp
 8017b0c:	1d21      	adds	r1, r4, #4
 8017b0e:	f8ad 5000 	strh.w	r5, [sp]
 8017b12:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017b16:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017b1a:	f8ad 8006 	strh.w	r8, [sp, #6]
 8017b1e:	f7ff ff43 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 8017b22:	4668      	mov	r0, sp
 8017b24:	f7ff ff83 	bl	8017a2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b28:	b980      	cbnz	r0, 8017b4c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017b2a:	f8bd 3000 	ldrh.w	r3, [sp]
 8017b2e:	4669      	mov	r1, sp
 8017b30:	88a2      	ldrh	r2, [r4, #4]
 8017b32:	4620      	mov	r0, r4
 8017b34:	1a9b      	subs	r3, r3, r2
 8017b36:	88e2      	ldrh	r2, [r4, #6]
 8017b38:	f8ad 3000 	strh.w	r3, [sp]
 8017b3c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017b40:	1a9b      	subs	r3, r3, r2
 8017b42:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017b46:	6823      	ldr	r3, [r4, #0]
 8017b48:	689b      	ldr	r3, [r3, #8]
 8017b4a:	4798      	blx	r3
 8017b4c:	69a4      	ldr	r4, [r4, #24]
 8017b4e:	2c00      	cmp	r4, #0
 8017b50:	d1d8      	bne.n	8017b04 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017b52:	b002      	add	sp, #8
 8017b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017b58 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017b5a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017b5e:	460d      	mov	r5, r1
 8017b60:	4616      	mov	r6, r2
 8017b62:	b323      	cbz	r3, 8017bae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017b64:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017b66:	b314      	cbz	r4, 8017bae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017b68:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017b6c:	b1eb      	cbz	r3, 8017baa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017b6e:	6828      	ldr	r0, [r5, #0]
 8017b70:	466b      	mov	r3, sp
 8017b72:	6869      	ldr	r1, [r5, #4]
 8017b74:	c303      	stmia	r3!, {r0, r1}
 8017b76:	4668      	mov	r0, sp
 8017b78:	1d21      	adds	r1, r4, #4
 8017b7a:	f7ff ff15 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 8017b7e:	4668      	mov	r0, sp
 8017b80:	f7ff ff55 	bl	8017a2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b84:	b988      	cbnz	r0, 8017baa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017b86:	f8bd 3000 	ldrh.w	r3, [sp]
 8017b8a:	4669      	mov	r1, sp
 8017b8c:	88a2      	ldrh	r2, [r4, #4]
 8017b8e:	4620      	mov	r0, r4
 8017b90:	1a9b      	subs	r3, r3, r2
 8017b92:	88e2      	ldrh	r2, [r4, #6]
 8017b94:	f8ad 3000 	strh.w	r3, [sp]
 8017b98:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017b9c:	1a9b      	subs	r3, r3, r2
 8017b9e:	4632      	mov	r2, r6
 8017ba0:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017ba4:	6823      	ldr	r3, [r4, #0]
 8017ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017ba8:	4798      	blx	r3
 8017baa:	69a4      	ldr	r4, [r4, #24]
 8017bac:	e7db      	b.n	8017b66 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017bae:	b002      	add	sp, #8
 8017bb0:	bd70      	pop	{r4, r5, r6, pc}

08017bb2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8017bb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017bb6:	4770      	bx	lr

08017bb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8017bb8:	6803      	ldr	r3, [r0, #0]
 8017bba:	b513      	push	{r0, r1, r4, lr}
 8017bbc:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	e9cd 3300 	strd	r3, r3, [sp]
 8017bc6:	466b      	mov	r3, sp
 8017bc8:	47a0      	blx	r4
 8017bca:	b002      	add	sp, #8
 8017bcc:	bd10      	pop	{r4, pc}

08017bce <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017bce:	2301      	movs	r3, #1
 8017bd0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017bd4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017bd8:	4770      	bx	lr

08017bda <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8017bda:	2301      	movs	r3, #1
 8017bdc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017be0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017be4:	4770      	bx	lr

08017be6 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017be6:	6843      	ldr	r3, [r0, #4]
 8017be8:	2201      	movs	r2, #1
 8017bea:	725a      	strb	r2, [r3, #9]
 8017bec:	6840      	ldr	r0, [r0, #4]
 8017bee:	6803      	ldr	r3, [r0, #0]
 8017bf0:	691b      	ldr	r3, [r3, #16]
 8017bf2:	4718      	bx	r3

08017bf4 <_ZN8touchgfx3HAL8flushDMAEv>:
 8017bf4:	6840      	ldr	r0, [r0, #4]
 8017bf6:	6803      	ldr	r3, [r0, #0]
 8017bf8:	689b      	ldr	r3, [r3, #8]
 8017bfa:	4718      	bx	r3

08017bfc <_ZN8touchgfx3HAL10beginFrameEv>:
 8017bfc:	4b04      	ldr	r3, [pc, #16]	; (8017c10 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017bfe:	781b      	ldrb	r3, [r3, #0]
 8017c00:	b123      	cbz	r3, 8017c0c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017c02:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8017c06:	f080 0001 	eor.w	r0, r0, #1
 8017c0a:	4770      	bx	lr
 8017c0c:	2001      	movs	r0, #1
 8017c0e:	4770      	bx	lr
 8017c10:	2000b312 	.word	0x2000b312

08017c14 <_ZN8touchgfx3HAL8endFrameEv>:
 8017c14:	b510      	push	{r4, lr}
 8017c16:	4604      	mov	r4, r0
 8017c18:	6840      	ldr	r0, [r0, #4]
 8017c1a:	6803      	ldr	r3, [r0, #0]
 8017c1c:	689b      	ldr	r3, [r3, #8]
 8017c1e:	4798      	blx	r3
 8017c20:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8017c24:	b113      	cbz	r3, 8017c2c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8017c26:	2301      	movs	r3, #1
 8017c28:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017c2c:	bd10      	pop	{r4, pc}

08017c2e <_ZN8touchgfx3HAL9taskEntryEv>:
 8017c2e:	b508      	push	{r3, lr}
 8017c30:	6803      	ldr	r3, [r0, #0]
 8017c32:	4604      	mov	r4, r0
 8017c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017c36:	4798      	blx	r3
 8017c38:	6823      	ldr	r3, [r4, #0]
 8017c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017c3c:	4620      	mov	r0, r4
 8017c3e:	4798      	blx	r3
 8017c40:	f7fe fa46 	bl	80160d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8017c44:	6823      	ldr	r3, [r4, #0]
 8017c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c48:	e7f8      	b.n	8017c3c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08017c4c <_ZN8touchgfx3HAL4tickEv>:
 8017c4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017c4e:	6803      	ldr	r3, [r0, #0]
 8017c50:	4604      	mov	r4, r0
 8017c52:	4d5c      	ldr	r5, [pc, #368]	; (8017dc4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8017c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017c58:	4798      	blx	r3
 8017c5a:	2800      	cmp	r0, #0
 8017c5c:	f000 8097 	beq.w	8017d8e <_ZN8touchgfx3HAL4tickEv+0x142>
 8017c60:	2001      	movs	r0, #1
 8017c62:	2600      	movs	r6, #0
 8017c64:	f7fd ff24 	bl	8015ab0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017c68:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017c6c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017c70:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017c74:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8017c78:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017c7c:	b133      	cbz	r3, 8017c8c <_ZN8touchgfx3HAL4tickEv+0x40>
 8017c7e:	6823      	ldr	r3, [r4, #0]
 8017c80:	4620      	mov	r0, r4
 8017c82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017c86:	4798      	blx	r3
 8017c88:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017c8c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017c90:	2601      	movs	r6, #1
 8017c92:	6862      	ldr	r2, [r4, #4]
 8017c94:	f083 0301 	eor.w	r3, r3, #1
 8017c98:	702e      	strb	r6, [r5, #0]
 8017c9a:	7253      	strb	r3, [r2, #9]
 8017c9c:	f003 fb06 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 8017ca0:	6803      	ldr	r3, [r0, #0]
 8017ca2:	4631      	mov	r1, r6
 8017ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ca6:	4798      	blx	r3
 8017ca8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017cac:	b90b      	cbnz	r3, 8017cb2 <_ZN8touchgfx3HAL4tickEv+0x66>
 8017cae:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017cb2:	f003 fafb 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 8017cb6:	6803      	ldr	r3, [r0, #0]
 8017cb8:	695b      	ldr	r3, [r3, #20]
 8017cba:	4798      	blx	r3
 8017cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cbe:	6803      	ldr	r3, [r0, #0]
 8017cc0:	691b      	ldr	r3, [r3, #16]
 8017cc2:	4798      	blx	r3
 8017cc4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017cc8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8017ccc:	3b01      	subs	r3, #1
 8017cce:	b2db      	uxtb	r3, r3
 8017cd0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017cd4:	b10a      	cbz	r2, 8017cda <_ZN8touchgfx3HAL4tickEv+0x8e>
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d1eb      	bne.n	8017cb2 <_ZN8touchgfx3HAL4tickEv+0x66>
 8017cda:	4a3b      	ldr	r2, [pc, #236]	; (8017dc8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017cdc:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017ce0:	7813      	ldrb	r3, [r2, #0]
 8017ce2:	3301      	adds	r3, #1
 8017ce4:	b25b      	sxtb	r3, r3
 8017ce6:	4299      	cmp	r1, r3
 8017ce8:	7013      	strb	r3, [r2, #0]
 8017cea:	dc10      	bgt.n	8017d0e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017cec:	2300      	movs	r3, #0
 8017cee:	68e0      	ldr	r0, [r4, #12]
 8017cf0:	a902      	add	r1, sp, #8
 8017cf2:	7013      	strb	r3, [r2, #0]
 8017cf4:	aa03      	add	r2, sp, #12
 8017cf6:	6803      	ldr	r3, [r0, #0]
 8017cf8:	68db      	ldr	r3, [r3, #12]
 8017cfa:	4798      	blx	r3
 8017cfc:	6823      	ldr	r3, [r4, #0]
 8017cfe:	2800      	cmp	r0, #0
 8017d00:	d051      	beq.n	8017da6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8017d02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017d06:	4620      	mov	r0, r4
 8017d08:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017d0c:	4798      	blx	r3
 8017d0e:	2300      	movs	r3, #0
 8017d10:	6960      	ldr	r0, [r4, #20]
 8017d12:	f88d 3007 	strb.w	r3, [sp, #7]
 8017d16:	b158      	cbz	r0, 8017d30 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8017d18:	6803      	ldr	r3, [r0, #0]
 8017d1a:	f10d 0107 	add.w	r1, sp, #7
 8017d1e:	68db      	ldr	r3, [r3, #12]
 8017d20:	4798      	blx	r3
 8017d22:	b128      	cbz	r0, 8017d30 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8017d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017d26:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017d2a:	6803      	ldr	r3, [r0, #0]
 8017d2c:	68db      	ldr	r3, [r3, #12]
 8017d2e:	4798      	blx	r3
 8017d30:	f104 001c 	add.w	r0, r4, #28
 8017d34:	f00d ff64 	bl	8025c00 <_ZN8touchgfx8Gestures4tickEv>
 8017d38:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8017d3c:	b30b      	cbz	r3, 8017d82 <_ZN8touchgfx3HAL4tickEv+0x136>
 8017d3e:	6920      	ldr	r0, [r4, #16]
 8017d40:	6803      	ldr	r3, [r0, #0]
 8017d42:	691b      	ldr	r3, [r3, #16]
 8017d44:	4798      	blx	r3
 8017d46:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017d48:	4606      	mov	r6, r0
 8017d4a:	b903      	cbnz	r3, 8017d4e <_ZN8touchgfx3HAL4tickEv+0x102>
 8017d4c:	6720      	str	r0, [r4, #112]	; 0x70
 8017d4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017d50:	4a1e      	ldr	r2, [pc, #120]	; (8017dcc <_ZN8touchgfx3HAL4tickEv+0x180>)
 8017d52:	1af3      	subs	r3, r6, r3
 8017d54:	4293      	cmp	r3, r2
 8017d56:	d914      	bls.n	8017d82 <_ZN8touchgfx3HAL4tickEv+0x136>
 8017d58:	6920      	ldr	r0, [r4, #16]
 8017d5a:	6803      	ldr	r3, [r0, #0]
 8017d5c:	699b      	ldr	r3, [r3, #24]
 8017d5e:	4798      	blx	r3
 8017d60:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017d62:	2264      	movs	r2, #100	; 0x64
 8017d64:	1af3      	subs	r3, r6, r3
 8017d66:	fbb3 f3f2 	udiv	r3, r3, r2
 8017d6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8017d6e:	2800      	cmp	r0, #0
 8017d70:	dc1e      	bgt.n	8017db0 <_ZN8touchgfx3HAL4tickEv+0x164>
 8017d72:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8017d76:	6920      	ldr	r0, [r4, #16]
 8017d78:	2100      	movs	r1, #0
 8017d7a:	6803      	ldr	r3, [r0, #0]
 8017d7c:	69db      	ldr	r3, [r3, #28]
 8017d7e:	4798      	blx	r3
 8017d80:	6726      	str	r6, [r4, #112]	; 0x70
 8017d82:	f003 fa93 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 8017d86:	6803      	ldr	r3, [r0, #0]
 8017d88:	2100      	movs	r1, #0
 8017d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d8c:	4798      	blx	r3
 8017d8e:	6823      	ldr	r3, [r4, #0]
 8017d90:	4620      	mov	r0, r4
 8017d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017d96:	4798      	blx	r3
 8017d98:	2001      	movs	r0, #1
 8017d9a:	f7fd fe94 	bl	8015ac6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017d9e:	2300      	movs	r3, #0
 8017da0:	702b      	strb	r3, [r5, #0]
 8017da2:	b004      	add	sp, #16
 8017da4:	bd70      	pop	{r4, r5, r6, pc}
 8017da6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8017daa:	4620      	mov	r0, r4
 8017dac:	4798      	blx	r3
 8017dae:	e7ae      	b.n	8017d0e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017db0:	2863      	cmp	r0, #99	; 0x63
 8017db2:	bfcb      	itete	gt
 8017db4:	2300      	movgt	r3, #0
 8017db6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017dba:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8017dbe:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8017dc2:	e7d8      	b.n	8017d76 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8017dc4:	2000b318 	.word	0x2000b318
 8017dc8:	2000b319 	.word	0x2000b319
 8017dcc:	05f5e100 	.word	0x05f5e100

08017dd0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017dd0:	f7fe b94e 	b.w	8016070 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017dd4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017dd4:	6581      	str	r1, [r0, #88]	; 0x58
 8017dd6:	301c      	adds	r0, #28
 8017dd8:	f00d bf10 	b.w	8025bfc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017ddc <_ZN8touchgfx3HAL5touchEll>:
 8017ddc:	b530      	push	{r4, r5, lr}
 8017dde:	b087      	sub	sp, #28
 8017de0:	4604      	mov	r4, r0
 8017de2:	a804      	add	r0, sp, #16
 8017de4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017de8:	f003 f81a 	bl	801ae20 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017dec:	9b04      	ldr	r3, [sp, #16]
 8017dee:	a906      	add	r1, sp, #24
 8017df0:	a803      	add	r0, sp, #12
 8017df2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017df6:	9b05      	ldr	r3, [sp, #20]
 8017df8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017dfc:	f003 f85e 	bl	801aebc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017e00:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8017e04:	f104 001c 	add.w	r0, r4, #28
 8017e08:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017e0c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017e10:	b189      	cbz	r1, 8017e36 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8017e12:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8017e16:	9300      	str	r3, [sp, #0]
 8017e18:	4613      	mov	r3, r2
 8017e1a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017e1e:	462a      	mov	r2, r5
 8017e20:	f00d fefc 	bl	8025c1c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8017e24:	b128      	cbz	r0, 8017e32 <_ZN8touchgfx3HAL5touchEll+0x56>
 8017e26:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017e2a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017e2c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017e30:	6623      	str	r3, [r4, #96]	; 0x60
 8017e32:	b007      	add	sp, #28
 8017e34:	bd30      	pop	{r4, r5, pc}
 8017e36:	f00d ff35 	bl	8025ca4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017e3a:	2301      	movs	r3, #1
 8017e3c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017e40:	e7f1      	b.n	8017e26 <_ZN8touchgfx3HAL5touchEll+0x4a>

08017e42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8017e42:	b570      	push	{r4, r5, r6, lr}
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d050      	beq.n	8017eea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8017e48:	ea81 0002 	eor.w	r0, r1, r2
 8017e4c:	07c6      	lsls	r6, r0, #31
 8017e4e:	d508      	bpl.n	8017e62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017e50:	3a01      	subs	r2, #1
 8017e52:	18cc      	adds	r4, r1, r3
 8017e54:	42a1      	cmp	r1, r4
 8017e56:	d048      	beq.n	8017eea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8017e58:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017e5c:	f801 0b01 	strb.w	r0, [r1], #1
 8017e60:	e7f8      	b.n	8017e54 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017e62:	07d5      	lsls	r5, r2, #31
 8017e64:	bf42      	ittt	mi
 8017e66:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8017e6a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017e6e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017e72:	2b01      	cmp	r3, #1
 8017e74:	d915      	bls.n	8017ea2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8017e76:	ea82 0001 	eor.w	r0, r2, r1
 8017e7a:	0784      	lsls	r4, r0, #30
 8017e7c:	d02d      	beq.n	8017eda <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8017e7e:	1e94      	subs	r4, r2, #2
 8017e80:	4608      	mov	r0, r1
 8017e82:	18ce      	adds	r6, r1, r3
 8017e84:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8017e88:	f820 5b02 	strh.w	r5, [r0], #2
 8017e8c:	1a35      	subs	r5, r6, r0
 8017e8e:	2d01      	cmp	r5, #1
 8017e90:	d8f8      	bhi.n	8017e84 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8017e92:	1e98      	subs	r0, r3, #2
 8017e94:	f003 0301 	and.w	r3, r3, #1
 8017e98:	f020 0001 	bic.w	r0, r0, #1
 8017e9c:	3002      	adds	r0, #2
 8017e9e:	4401      	add	r1, r0
 8017ea0:	4402      	add	r2, r0
 8017ea2:	1f14      	subs	r4, r2, #4
 8017ea4:	4608      	mov	r0, r1
 8017ea6:	18ce      	adds	r6, r1, r3
 8017ea8:	1a35      	subs	r5, r6, r0
 8017eaa:	2d03      	cmp	r5, #3
 8017eac:	d810      	bhi.n	8017ed0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8017eae:	089c      	lsrs	r4, r3, #2
 8017eb0:	00a0      	lsls	r0, r4, #2
 8017eb2:	4401      	add	r1, r0
 8017eb4:	3801      	subs	r0, #1
 8017eb6:	4402      	add	r2, r0
 8017eb8:	f06f 0003 	mvn.w	r0, #3
 8017ebc:	fb00 3404 	mla	r4, r0, r4, r3
 8017ec0:	440c      	add	r4, r1
 8017ec2:	42a1      	cmp	r1, r4
 8017ec4:	d011      	beq.n	8017eea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8017ec6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8017eca:	f801 3b01 	strb.w	r3, [r1], #1
 8017ece:	e7f8      	b.n	8017ec2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8017ed0:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8017ed4:	f840 5b04 	str.w	r5, [r0], #4
 8017ed8:	e7e6      	b.n	8017ea8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8017eda:	0790      	lsls	r0, r2, #30
 8017edc:	d0e1      	beq.n	8017ea2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8017ede:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017ee2:	3b02      	subs	r3, #2
 8017ee4:	f821 0b02 	strh.w	r0, [r1], #2
 8017ee8:	e7db      	b.n	8017ea2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8017eea:	2001      	movs	r0, #1
 8017eec:	bd70      	pop	{r4, r5, r6, pc}

08017eee <_ZN8touchgfx3HAL7noTouchEv>:
 8017eee:	b510      	push	{r4, lr}
 8017ef0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8017ef4:	4604      	mov	r4, r0
 8017ef6:	b153      	cbz	r3, 8017f0e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017ef8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017efc:	2101      	movs	r1, #1
 8017efe:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8017f02:	301c      	adds	r0, #28
 8017f04:	f00d fece 	bl	8025ca4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017f08:	2300      	movs	r3, #0
 8017f0a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017f0e:	bd10      	pop	{r4, pc}

08017f10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f14:	4605      	mov	r5, r0
 8017f16:	6980      	ldr	r0, [r0, #24]
 8017f18:	b085      	sub	sp, #20
 8017f1a:	460f      	mov	r7, r1
 8017f1c:	4690      	mov	r8, r2
 8017f1e:	4699      	mov	r9, r3
 8017f20:	b930      	cbnz	r0, 8017f30 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8017f22:	4b1f      	ldr	r3, [pc, #124]	; (8017fa0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8017f24:	f44f 7198 	mov.w	r1, #304	; 0x130
 8017f28:	4a1e      	ldr	r2, [pc, #120]	; (8017fa4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017f2a:	481f      	ldr	r0, [pc, #124]	; (8017fa8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8017f2c:	f00f fb3e 	bl	80275ac <__assert_func>
 8017f30:	ac04      	add	r4, sp, #16
 8017f32:	2600      	movs	r6, #0
 8017f34:	f844 6d04 	str.w	r6, [r4, #-4]!
 8017f38:	6806      	ldr	r6, [r0, #0]
 8017f3a:	9401      	str	r4, [sp, #4]
 8017f3c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8017f40:	9400      	str	r4, [sp, #0]
 8017f42:	6834      	ldr	r4, [r6, #0]
 8017f44:	47a0      	blx	r4
 8017f46:	4c19      	ldr	r4, [pc, #100]	; (8017fac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8017f48:	4606      	mov	r6, r0
 8017f4a:	f8a4 9000 	strh.w	r9, [r4]
 8017f4e:	f7f7 fe5f 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8017f52:	6803      	ldr	r3, [r0, #0]
 8017f54:	6a1b      	ldr	r3, [r3, #32]
 8017f56:	4798      	blx	r3
 8017f58:	280c      	cmp	r0, #12
 8017f5a:	d80f      	bhi.n	8017f7c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8017f5c:	e8df f000 	tbb	[pc, r0]
 8017f60:	1b1b1207 	.word	0x1b1b1207
 8017f64:	1b1b1b1b 	.word	0x1b1b1b1b
 8017f68:	1b1b1b1b 	.word	0x1b1b1b1b
 8017f6c:	1b          	.byte	0x1b
 8017f6d:	00          	.byte	0x00
 8017f6e:	8823      	ldrh	r3, [r4, #0]
 8017f70:	fb08 7203 	mla	r2, r8, r3, r7
 8017f74:	9b03      	ldr	r3, [sp, #12]
 8017f76:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017f7a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8017f7c:	4630      	mov	r0, r6
 8017f7e:	b005      	add	sp, #20
 8017f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f84:	8822      	ldrh	r2, [r4, #0]
 8017f86:	9b03      	ldr	r3, [sp, #12]
 8017f88:	fb08 7202 	mla	r2, r8, r2, r7
 8017f8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017f90:	1a9a      	subs	r2, r3, r2
 8017f92:	63ea      	str	r2, [r5, #60]	; 0x3c
 8017f94:	e7f2      	b.n	8017f7c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8017f96:	4b06      	ldr	r3, [pc, #24]	; (8017fb0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8017f98:	f240 114d 	movw	r1, #333	; 0x14d
 8017f9c:	4a01      	ldr	r2, [pc, #4]	; (8017fa4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017f9e:	e7c4      	b.n	8017f2a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017fa0:	0802a879 	.word	0x0802a879
 8017fa4:	0802ab8a 	.word	0x0802ab8a
 8017fa8:	0802a8be 	.word	0x0802a8be
 8017fac:	2000b30e 	.word	0x2000b30e
 8017fb0:	0802a8e4 	.word	0x0802a8e4

08017fb4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8017fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fb8:	4698      	mov	r8, r3
 8017fba:	6803      	ldr	r3, [r0, #0]
 8017fbc:	b087      	sub	sp, #28
 8017fbe:	460e      	mov	r6, r1
 8017fc0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8017fc2:	4617      	mov	r7, r2
 8017fc4:	4b0d      	ldr	r3, [pc, #52]	; (8017ffc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8017fc6:	4604      	mov	r4, r0
 8017fc8:	f8b3 9000 	ldrh.w	r9, [r3]
 8017fcc:	f7f7 fe20 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8017fd0:	6803      	ldr	r3, [r0, #0]
 8017fd2:	6a1b      	ldr	r3, [r3, #32]
 8017fd4:	4798      	blx	r3
 8017fd6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017fda:	463a      	mov	r2, r7
 8017fdc:	4631      	mov	r1, r6
 8017fde:	9302      	str	r3, [sp, #8]
 8017fe0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017fe4:	9301      	str	r3, [sp, #4]
 8017fe6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017fea:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8017fee:	9300      	str	r3, [sp, #0]
 8017ff0:	4620      	mov	r0, r4
 8017ff2:	4643      	mov	r3, r8
 8017ff4:	47a8      	blx	r5
 8017ff6:	b007      	add	sp, #28
 8017ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ffc:	2000b30e 	.word	0x2000b30e

08018000 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018004:	4606      	mov	r6, r0
 8018006:	b089      	sub	sp, #36	; 0x24
 8018008:	4610      	mov	r0, r2
 801800a:	460c      	mov	r4, r1
 801800c:	4691      	mov	r9, r2
 801800e:	4698      	mov	r8, r3
 8018010:	f005 fbba 	bl	801d788 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018014:	2800      	cmp	r0, #0
 8018016:	f000 8093 	beq.w	8018140 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 801801a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8018158 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801801e:	ad08      	add	r5, sp, #32
 8018020:	f8df b138 	ldr.w	fp, [pc, #312]	; 801815c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8018024:	f8da 0000 	ldr.w	r0, [sl]
 8018028:	4f4a      	ldr	r7, [pc, #296]	; (8018154 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801802a:	6802      	ldr	r2, [r0, #0]
 801802c:	6a12      	ldr	r2, [r2, #32]
 801802e:	4790      	blx	r2
 8018030:	f8da 0000 	ldr.w	r0, [sl]
 8018034:	6802      	ldr	r2, [r0, #0]
 8018036:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018038:	4790      	blx	r2
 801803a:	f8bb 3000 	ldrh.w	r3, [fp]
 801803e:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8018042:	4628      	mov	r0, r5
 8018044:	9300      	str	r3, [sp, #0]
 8018046:	883b      	ldrh	r3, [r7, #0]
 8018048:	9301      	str	r3, [sp, #4]
 801804a:	f005 fc61 	bl	801d910 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801804e:	f8ab 0000 	strh.w	r0, [fp]
 8018052:	4628      	mov	r0, r5
 8018054:	f005 fc96 	bl	801d984 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018058:	f8da b000 	ldr.w	fp, [sl]
 801805c:	8038      	strh	r0, [r7, #0]
 801805e:	4648      	mov	r0, r9
 8018060:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8018064:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8018068:	9302      	str	r3, [sp, #8]
 801806a:	f005 fb8d 	bl	801d788 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801806e:	f8da 2000 	ldr.w	r2, [sl]
 8018072:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8018076:	63d0      	str	r0, [r2, #60]	; 0x3c
 8018078:	4620      	mov	r0, r4
 801807a:	6822      	ldr	r2, [r4, #0]
 801807c:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8018080:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8018082:	2200      	movs	r2, #0
 8018084:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8018088:	4611      	mov	r1, r2
 801808a:	4798      	blx	r3
 801808c:	2201      	movs	r2, #1
 801808e:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8018092:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8018096:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801809a:	2a00      	cmp	r2, #0
 801809c:	f104 0204 	add.w	r2, r4, #4
 80180a0:	dd51      	ble.n	8018146 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 80180a2:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 80180a6:	2900      	cmp	r1, #0
 80180a8:	dd4d      	ble.n	8018146 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 80180aa:	6810      	ldr	r0, [r2, #0]
 80180ac:	f10d 0c18 	add.w	ip, sp, #24
 80180b0:	6851      	ldr	r1, [r2, #4]
 80180b2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80180b6:	4641      	mov	r1, r8
 80180b8:	a806      	add	r0, sp, #24
 80180ba:	f7ff fc75 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 80180be:	4628      	mov	r0, r5
 80180c0:	f005 fd78 	bl	801dbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80180c4:	4680      	mov	r8, r0
 80180c6:	f7f7 fda3 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 80180ca:	6802      	ldr	r2, [r0, #0]
 80180cc:	6a12      	ldr	r2, [r2, #32]
 80180ce:	4790      	blx	r2
 80180d0:	4580      	cmp	r8, r0
 80180d2:	d03d      	beq.n	8018150 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 80180d4:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80180d6:	b150      	cbz	r0, 80180ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 80180d8:	4628      	mov	r0, r5
 80180da:	f005 fd6b 	bl	801dbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80180de:	4605      	mov	r5, r0
 80180e0:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80180e2:	6803      	ldr	r3, [r0, #0]
 80180e4:	6a1b      	ldr	r3, [r3, #32]
 80180e6:	4798      	blx	r3
 80180e8:	1a2b      	subs	r3, r5, r0
 80180ea:	4258      	negs	r0, r3
 80180ec:	4158      	adcs	r0, r3
 80180ee:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 80180f2:	2500      	movs	r5, #0
 80180f4:	6963      	ldr	r3, [r4, #20]
 80180f6:	4620      	mov	r0, r4
 80180f8:	6822      	ldr	r2, [r4, #0]
 80180fa:	a906      	add	r1, sp, #24
 80180fc:	6165      	str	r5, [r4, #20]
 80180fe:	9303      	str	r3, [sp, #12]
 8018100:	6892      	ldr	r2, [r2, #8]
 8018102:	4790      	blx	r2
 8018104:	9b03      	ldr	r3, [sp, #12]
 8018106:	4620      	mov	r0, r4
 8018108:	4652      	mov	r2, sl
 801810a:	6163      	str	r3, [r4, #20]
 801810c:	4649      	mov	r1, r9
 801810e:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8018112:	6823      	ldr	r3, [r4, #0]
 8018114:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8018118:	4c0f      	ldr	r4, [pc, #60]	; (8018158 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 801811a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801811c:	4798      	blx	r3
 801811e:	6820      	ldr	r0, [r4, #0]
 8018120:	9b02      	ldr	r3, [sp, #8]
 8018122:	9a00      	ldr	r2, [sp, #0]
 8018124:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8018128:	4b0c      	ldr	r3, [pc, #48]	; (801815c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 801812a:	801a      	strh	r2, [r3, #0]
 801812c:	4b09      	ldr	r3, [pc, #36]	; (8018154 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801812e:	9a01      	ldr	r2, [sp, #4]
 8018130:	801a      	strh	r2, [r3, #0]
 8018132:	6803      	ldr	r3, [r0, #0]
 8018134:	6a1b      	ldr	r3, [r3, #32]
 8018136:	4798      	blx	r3
 8018138:	6820      	ldr	r0, [r4, #0]
 801813a:	6803      	ldr	r3, [r0, #0]
 801813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801813e:	4798      	blx	r3
 8018140:	b009      	add	sp, #36	; 0x24
 8018142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018146:	ab06      	add	r3, sp, #24
 8018148:	6810      	ldr	r0, [r2, #0]
 801814a:	6851      	ldr	r1, [r2, #4]
 801814c:	c303      	stmia	r3!, {r0, r1}
 801814e:	e7b6      	b.n	80180be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 8018150:	2000      	movs	r0, #0
 8018152:	e7cc      	b.n	80180ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8018154:	2000b310 	.word	0x2000b310
 8018158:	2000b314 	.word	0x2000b314
 801815c:	2000b30e 	.word	0x2000b30e

08018160 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018160:	4b07      	ldr	r3, [pc, #28]	; (8018180 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018162:	b510      	push	{r4, lr}
 8018164:	781b      	ldrb	r3, [r3, #0]
 8018166:	4604      	mov	r4, r0
 8018168:	b13b      	cbz	r3, 801817a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801816a:	6803      	ldr	r3, [r0, #0]
 801816c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801816e:	4798      	blx	r3
 8018170:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018172:	4283      	cmp	r3, r0
 8018174:	d101      	bne.n	801817a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018176:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018178:	bd10      	pop	{r4, pc}
 801817a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801817c:	e7fc      	b.n	8018178 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801817e:	bf00      	nop
 8018180:	2000b312 	.word	0x2000b312

08018184 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8018184:	4b0b      	ldr	r3, [pc, #44]	; (80181b4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8018186:	b510      	push	{r4, lr}
 8018188:	781b      	ldrb	r3, [r3, #0]
 801818a:	4604      	mov	r4, r0
 801818c:	b95b      	cbnz	r3, 80181a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801818e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8018192:	2b02      	cmp	r3, #2
 8018194:	d007      	beq.n	80181a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018196:	6840      	ldr	r0, [r0, #4]
 8018198:	f000 fbc8 	bl	801892c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801819c:	b118      	cbz	r0, 80181a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801819e:	6862      	ldr	r2, [r4, #4]
 80181a0:	7a53      	ldrb	r3, [r2, #9]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d0fc      	beq.n	80181a0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80181a6:	f7fd ff55 	bl	8016054 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80181aa:	4620      	mov	r0, r4
 80181ac:	f7ff ffd8 	bl	8018160 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80181b0:	bd10      	pop	{r4, pc}
 80181b2:	bf00      	nop
 80181b4:	2000b312 	.word	0x2000b312

080181b8 <_ZN8touchgfx3HAL10initializeEv>:
 80181b8:	b510      	push	{r4, lr}
 80181ba:	4604      	mov	r4, r0
 80181bc:	f7fd ff14 	bl	8015fe8 <_ZN8touchgfx10OSWrappers10initializeEv>
 80181c0:	6860      	ldr	r0, [r4, #4]
 80181c2:	6803      	ldr	r3, [r0, #0]
 80181c4:	68db      	ldr	r3, [r3, #12]
 80181c6:	4798      	blx	r3
 80181c8:	68e0      	ldr	r0, [r4, #12]
 80181ca:	6803      	ldr	r3, [r0, #0]
 80181cc:	689b      	ldr	r3, [r3, #8]
 80181ce:	4798      	blx	r3
 80181d0:	6823      	ldr	r3, [r4, #0]
 80181d2:	4620      	mov	r0, r4
 80181d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80181d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181da:	4718      	bx	r3

080181dc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80181dc:	b508      	push	{r3, lr}
 80181de:	290c      	cmp	r1, #12
 80181e0:	d817      	bhi.n	8018212 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80181e2:	e8df f001 	tbb	[pc, r1]
 80181e6:	090b      	.short	0x090b
 80181e8:	0d0d0d07 	.word	0x0d0d0d07
 80181ec:	1414140d 	.word	0x1414140d
 80181f0:	1414      	.short	0x1414
 80181f2:	0d          	.byte	0x0d
 80181f3:	00          	.byte	0x00
 80181f4:	2020      	movs	r0, #32
 80181f6:	bd08      	pop	{r3, pc}
 80181f8:	2018      	movs	r0, #24
 80181fa:	e7fc      	b.n	80181f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80181fc:	2010      	movs	r0, #16
 80181fe:	e7fa      	b.n	80181f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018200:	4b05      	ldr	r3, [pc, #20]	; (8018218 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8018202:	f44f 710c 	mov.w	r1, #560	; 0x230
 8018206:	4a05      	ldr	r2, [pc, #20]	; (801821c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8018208:	4805      	ldr	r0, [pc, #20]	; (8018220 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801820a:	f00f f9cf 	bl	80275ac <__assert_func>
 801820e:	2008      	movs	r0, #8
 8018210:	e7f1      	b.n	80181f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018212:	2000      	movs	r0, #0
 8018214:	e7ef      	b.n	80181f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018216:	bf00      	nop
 8018218:	0802a9b7 	.word	0x0802a9b7
 801821c:	0802ad4c 	.word	0x0802ad4c
 8018220:	0802a8be 	.word	0x0802a8be

08018224 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8018224:	b570      	push	{r4, r5, r6, lr}
 8018226:	460d      	mov	r5, r1
 8018228:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801822c:	4616      	mov	r6, r2
 801822e:	461c      	mov	r4, r3
 8018230:	f7ff ffd4 	bl	80181dc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018234:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018238:	10c0      	asrs	r0, r0, #3
 801823a:	fb06 5101 	mla	r1, r6, r1, r5
 801823e:	fb00 4001 	mla	r0, r0, r1, r4
 8018242:	bd70      	pop	{r4, r5, r6, pc}

08018244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8018244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018248:	b08a      	sub	sp, #40	; 0x28
 801824a:	f04f 0c00 	mov.w	ip, #0
 801824e:	4604      	mov	r4, r0
 8018250:	469a      	mov	sl, r3
 8018252:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8018256:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801825a:	f1b8 0f02 	cmp.w	r8, #2
 801825e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8018262:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018266:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801826a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801826e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8018272:	f8cd c020 	str.w	ip, [sp, #32]
 8018276:	d030      	beq.n	80182da <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8018278:	2bff      	cmp	r3, #255	; 0xff
 801827a:	d12c      	bne.n	80182d6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801827c:	4560      	cmp	r0, ip
 801827e:	bf14      	ite	ne
 8018280:	2004      	movne	r0, #4
 8018282:	2001      	moveq	r0, #1
 8018284:	9204      	str	r2, [sp, #16]
 8018286:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801828a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801828e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018292:	f8ad 6018 	strh.w	r6, [sp, #24]
 8018296:	f8ad 501a 	strh.w	r5, [sp, #26]
 801829a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801829e:	4620      	mov	r0, r4
 80182a0:	f7ff ff5e 	bl	8018160 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80182a4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80182a8:	4603      	mov	r3, r0
 80182aa:	4651      	mov	r1, sl
 80182ac:	4620      	mov	r0, r4
 80182ae:	e9cd 9700 	strd	r9, r7, [sp]
 80182b2:	f7ff ffb7 	bl	8018224 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80182b6:	f8ad 901e 	strh.w	r9, [sp, #30]
 80182ba:	9005      	str	r0, [sp, #20]
 80182bc:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 80182c0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80182c4:	b106      	cbz	r6, 80182c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 80182c6:	b98d      	cbnz	r5, 80182ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 80182c8:	4b12      	ldr	r3, [pc, #72]	; (8018314 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 80182ca:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80182ce:	4a12      	ldr	r2, [pc, #72]	; (8018318 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80182d0:	4812      	ldr	r0, [pc, #72]	; (801831c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 80182d2:	f00f f96b 	bl	80275ac <__assert_func>
 80182d6:	2004      	movs	r0, #4
 80182d8:	e7d4      	b.n	8018284 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80182da:	2bff      	cmp	r3, #255	; 0xff
 80182dc:	d104      	bne.n	80182e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 80182de:	2800      	cmp	r0, #0
 80182e0:	bf14      	ite	ne
 80182e2:	2040      	movne	r0, #64	; 0x40
 80182e4:	2020      	moveq	r0, #32
 80182e6:	e7cd      	b.n	8018284 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80182e8:	2040      	movs	r0, #64	; 0x40
 80182ea:	e7cb      	b.n	8018284 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80182ec:	6823      	ldr	r3, [r4, #0]
 80182ee:	4620      	mov	r0, r4
 80182f0:	9d02      	ldr	r5, [sp, #8]
 80182f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182f4:	4798      	blx	r3
 80182f6:	4228      	tst	r0, r5
 80182f8:	d104      	bne.n	8018304 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80182fa:	4b09      	ldr	r3, [pc, #36]	; (8018320 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80182fc:	f240 11b1 	movw	r1, #433	; 0x1b1
 8018300:	4a05      	ldr	r2, [pc, #20]	; (8018318 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8018302:	e7e5      	b.n	80182d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8018304:	6860      	ldr	r0, [r4, #4]
 8018306:	a902      	add	r1, sp, #8
 8018308:	6803      	ldr	r3, [r0, #0]
 801830a:	685b      	ldr	r3, [r3, #4]
 801830c:	4798      	blx	r3
 801830e:	b00a      	add	sp, #40	; 0x28
 8018310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018314:	0802a93a 	.word	0x0802a93a
 8018318:	0802abee 	.word	0x0802abee
 801831c:	0802a8be 	.word	0x0802a8be
 8018320:	0802a972 	.word	0x0802a972

08018324 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8018324:	b510      	push	{r4, lr}
 8018326:	b08a      	sub	sp, #40	; 0x28
 8018328:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801832c:	9408      	str	r4, [sp, #32]
 801832e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8018332:	9407      	str	r4, [sp, #28]
 8018334:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8018338:	9406      	str	r4, [sp, #24]
 801833a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801833e:	9405      	str	r4, [sp, #20]
 8018340:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8018344:	9404      	str	r4, [sp, #16]
 8018346:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801834a:	9403      	str	r4, [sp, #12]
 801834c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8018350:	9402      	str	r4, [sp, #8]
 8018352:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8018356:	e9cd 3400 	strd	r3, r4, [sp]
 801835a:	4613      	mov	r3, r2
 801835c:	2200      	movs	r2, #0
 801835e:	f7ff ff71 	bl	8018244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8018362:	b00a      	add	sp, #40	; 0x28
 8018364:	bd10      	pop	{r4, pc}
	...

08018368 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8018368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801836a:	b08b      	sub	sp, #44	; 0x2c
 801836c:	4616      	mov	r6, r2
 801836e:	460d      	mov	r5, r1
 8018370:	461f      	mov	r7, r3
 8018372:	4604      	mov	r4, r0
 8018374:	f7f7 fc4c 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8018378:	6803      	ldr	r3, [r0, #0]
 801837a:	6a1b      	ldr	r3, [r3, #32]
 801837c:	4798      	blx	r3
 801837e:	4b0e      	ldr	r3, [pc, #56]	; (80183b8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8018380:	2200      	movs	r2, #0
 8018382:	4629      	mov	r1, r5
 8018384:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018388:	881b      	ldrh	r3, [r3, #0]
 801838a:	4620      	mov	r0, r4
 801838c:	9306      	str	r3, [sp, #24]
 801838e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018392:	9305      	str	r3, [sp, #20]
 8018394:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018398:	9304      	str	r3, [sp, #16]
 801839a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801839e:	9303      	str	r3, [sp, #12]
 80183a0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80183a4:	9302      	str	r3, [sp, #8]
 80183a6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80183aa:	e9cd 7300 	strd	r7, r3, [sp]
 80183ae:	4633      	mov	r3, r6
 80183b0:	f7ff ff48 	bl	8018244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80183b4:	b00b      	add	sp, #44	; 0x2c
 80183b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183b8:	2000b30e 	.word	0x2000b30e

080183bc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80183bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183c0:	461f      	mov	r7, r3
 80183c2:	4b14      	ldr	r3, [pc, #80]	; (8018414 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80183c4:	b08a      	sub	sp, #40	; 0x28
 80183c6:	4616      	mov	r6, r2
 80183c8:	f8b3 8000 	ldrh.w	r8, [r3]
 80183cc:	460d      	mov	r5, r1
 80183ce:	4604      	mov	r4, r0
 80183d0:	f7f7 fc1e 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 80183d4:	6803      	ldr	r3, [r0, #0]
 80183d6:	6a1b      	ldr	r3, [r3, #32]
 80183d8:	4798      	blx	r3
 80183da:	2302      	movs	r3, #2
 80183dc:	9008      	str	r0, [sp, #32]
 80183de:	2200      	movs	r2, #0
 80183e0:	4629      	mov	r1, r5
 80183e2:	4620      	mov	r0, r4
 80183e4:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80183e8:	2301      	movs	r3, #1
 80183ea:	9305      	str	r3, [sp, #20]
 80183ec:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80183f0:	9304      	str	r3, [sp, #16]
 80183f2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80183f6:	9303      	str	r3, [sp, #12]
 80183f8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80183fc:	9302      	str	r3, [sp, #8]
 80183fe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018402:	e9cd 7300 	strd	r7, r3, [sp]
 8018406:	4633      	mov	r3, r6
 8018408:	f7ff ff1c 	bl	8018244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801840c:	b00a      	add	sp, #40	; 0x28
 801840e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018412:	bf00      	nop
 8018414:	2000b30e 	.word	0x2000b30e

08018418 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8018418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801841c:	b08b      	sub	sp, #44	; 0x2c
 801841e:	469b      	mov	fp, r3
 8018420:	4604      	mov	r4, r0
 8018422:	4692      	mov	sl, r2
 8018424:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018428:	2600      	movs	r6, #0
 801842a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801842e:	4689      	mov	r9, r1
 8018430:	2fff      	cmp	r7, #255	; 0xff
 8018432:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018436:	9608      	str	r6, [sp, #32]
 8018438:	bf14      	ite	ne
 801843a:	2308      	movne	r3, #8
 801843c:	2302      	moveq	r3, #2
 801843e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8018442:	f7ff fe8d 	bl	8018160 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018446:	465a      	mov	r2, fp
 8018448:	4603      	mov	r3, r0
 801844a:	4651      	mov	r1, sl
 801844c:	4620      	mov	r0, r4
 801844e:	e9cd 8500 	strd	r8, r5, [sp]
 8018452:	f7ff fee7 	bl	8018224 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018456:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801845a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801845e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018462:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018466:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801846a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801846e:	6823      	ldr	r3, [r4, #0]
 8018470:	9d02      	ldr	r5, [sp, #8]
 8018472:	9005      	str	r0, [sp, #20]
 8018474:	4620      	mov	r0, r4
 8018476:	f8ad 601c 	strh.w	r6, [sp, #28]
 801847a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801847e:	f8cd 9020 	str.w	r9, [sp, #32]
 8018482:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8018486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018488:	4798      	blx	r3
 801848a:	4228      	tst	r0, r5
 801848c:	d106      	bne.n	801849c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801848e:	4b07      	ldr	r3, [pc, #28]	; (80184ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8018490:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8018494:	4a06      	ldr	r2, [pc, #24]	; (80184b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8018496:	4807      	ldr	r0, [pc, #28]	; (80184b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8018498:	f00f f888 	bl	80275ac <__assert_func>
 801849c:	6860      	ldr	r0, [r4, #4]
 801849e:	a902      	add	r1, sp, #8
 80184a0:	6803      	ldr	r3, [r0, #0]
 80184a2:	685b      	ldr	r3, [r3, #4]
 80184a4:	4798      	blx	r3
 80184a6:	b00b      	add	sp, #44	; 0x2c
 80184a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184ac:	0802a972 	.word	0x0802a972
 80184b0:	0802acb7 	.word	0x0802acb7
 80184b4:	0802a8be 	.word	0x0802a8be

080184b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80184b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80184bc:	461f      	mov	r7, r3
 80184be:	4b0b      	ldr	r3, [pc, #44]	; (80184ec <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80184c0:	460d      	mov	r5, r1
 80184c2:	4616      	mov	r6, r2
 80184c4:	f8b3 8000 	ldrh.w	r8, [r3]
 80184c8:	4604      	mov	r4, r0
 80184ca:	f7f7 fba1 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 80184ce:	6803      	ldr	r3, [r0, #0]
 80184d0:	6a1b      	ldr	r3, [r3, #32]
 80184d2:	4798      	blx	r3
 80184d4:	463b      	mov	r3, r7
 80184d6:	4632      	mov	r2, r6
 80184d8:	4629      	mov	r1, r5
 80184da:	e9cd 8000 	strd	r8, r0, [sp]
 80184de:	4620      	mov	r0, r4
 80184e0:	f7ff fea0 	bl	8018224 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80184e4:	b002      	add	sp, #8
 80184e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184ea:	bf00      	nop
 80184ec:	2000b30e 	.word	0x2000b30e

080184f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80184f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184f4:	4698      	mov	r8, r3
 80184f6:	b088      	sub	sp, #32
 80184f8:	2300      	movs	r3, #0
 80184fa:	4617      	mov	r7, r2
 80184fc:	4604      	mov	r4, r0
 80184fe:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018502:	9306      	str	r3, [sp, #24]
 8018504:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018508:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801850c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8018510:	f8ad 5012 	strh.w	r5, [sp, #18]
 8018514:	e9cd 3100 	strd	r3, r1, [sp]
 8018518:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801851c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018520:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018524:	f88d 301c 	strb.w	r3, [sp, #28]
 8018528:	f7ff fe1a 	bl	8018160 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801852c:	4642      	mov	r2, r8
 801852e:	4603      	mov	r3, r0
 8018530:	4639      	mov	r1, r7
 8018532:	4620      	mov	r0, r4
 8018534:	f7ff ffc0 	bl	80184b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018538:	4b16      	ldr	r3, [pc, #88]	; (8018594 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801853a:	9003      	str	r0, [sp, #12]
 801853c:	881b      	ldrh	r3, [r3, #0]
 801853e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018542:	f7f7 fb65 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8018546:	6803      	ldr	r3, [r0, #0]
 8018548:	6a1b      	ldr	r3, [r3, #32]
 801854a:	4798      	blx	r3
 801854c:	f88d 001e 	strb.w	r0, [sp, #30]
 8018550:	f88d 001d 	strb.w	r0, [sp, #29]
 8018554:	b106      	cbz	r6, 8018558 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8018556:	b935      	cbnz	r5, 8018566 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8018558:	4b0f      	ldr	r3, [pc, #60]	; (8018598 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801855a:	f240 11cd 	movw	r1, #461	; 0x1cd
 801855e:	4a0f      	ldr	r2, [pc, #60]	; (801859c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8018560:	480f      	ldr	r0, [pc, #60]	; (80185a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8018562:	f00f f823 	bl	80275ac <__assert_func>
 8018566:	6823      	ldr	r3, [r4, #0]
 8018568:	4620      	mov	r0, r4
 801856a:	9d00      	ldr	r5, [sp, #0]
 801856c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801856e:	4798      	blx	r3
 8018570:	4228      	tst	r0, r5
 8018572:	d104      	bne.n	801857e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8018574:	4b0b      	ldr	r3, [pc, #44]	; (80185a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8018576:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 801857a:	4a08      	ldr	r2, [pc, #32]	; (801859c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801857c:	e7f0      	b.n	8018560 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801857e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018580:	4669      	mov	r1, sp
 8018582:	6860      	ldr	r0, [r4, #4]
 8018584:	9306      	str	r3, [sp, #24]
 8018586:	6803      	ldr	r3, [r0, #0]
 8018588:	685b      	ldr	r3, [r3, #4]
 801858a:	4798      	blx	r3
 801858c:	b008      	add	sp, #32
 801858e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018592:	bf00      	nop
 8018594:	2000b30e 	.word	0x2000b30e
 8018598:	0802a93a 	.word	0x0802a93a
 801859c:	0802aaa0 	.word	0x0802aaa0
 80185a0:	0802a8be 	.word	0x0802a8be
 80185a4:	0802a972 	.word	0x0802a972

080185a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80185a8:	b570      	push	{r4, r5, r6, lr}
 80185aa:	b08a      	sub	sp, #40	; 0x28
 80185ac:	4604      	mov	r4, r0
 80185ae:	466b      	mov	r3, sp
 80185b0:	e883 0006 	stmia.w	r3, {r1, r2}
 80185b4:	4b1f      	ldr	r3, [pc, #124]	; (8018634 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80185b6:	781b      	ldrb	r3, [r3, #0]
 80185b8:	b933      	cbnz	r3, 80185c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80185ba:	4b1f      	ldr	r3, [pc, #124]	; (8018638 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80185bc:	f240 11f9 	movw	r1, #505	; 0x1f9
 80185c0:	4a1e      	ldr	r2, [pc, #120]	; (801863c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80185c2:	481f      	ldr	r0, [pc, #124]	; (8018640 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80185c4:	f00e fff2 	bl	80275ac <__assert_func>
 80185c8:	2300      	movs	r3, #0
 80185ca:	f8bd 5000 	ldrh.w	r5, [sp]
 80185ce:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80185d2:	9308      	str	r3, [sp, #32]
 80185d4:	2301      	movs	r3, #1
 80185d6:	9302      	str	r3, [sp, #8]
 80185d8:	6803      	ldr	r3, [r0, #0]
 80185da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185dc:	4798      	blx	r3
 80185de:	4632      	mov	r2, r6
 80185e0:	4629      	mov	r1, r5
 80185e2:	4603      	mov	r3, r0
 80185e4:	4620      	mov	r0, r4
 80185e6:	f7ff ff67 	bl	80184b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80185ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80185ec:	9003      	str	r0, [sp, #12]
 80185ee:	9305      	str	r3, [sp, #20]
 80185f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80185f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80185f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80185fc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018600:	4b10      	ldr	r3, [pc, #64]	; (8018644 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8018602:	881b      	ldrh	r3, [r3, #0]
 8018604:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018608:	f8ad 301e 	strh.w	r3, [sp, #30]
 801860c:	f7f7 fb00 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8018610:	6803      	ldr	r3, [r0, #0]
 8018612:	6a1b      	ldr	r3, [r3, #32]
 8018614:	4798      	blx	r3
 8018616:	23ff      	movs	r3, #255	; 0xff
 8018618:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801861c:	a902      	add	r1, sp, #8
 801861e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018622:	6860      	ldr	r0, [r4, #4]
 8018624:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018628:	6803      	ldr	r3, [r0, #0]
 801862a:	685b      	ldr	r3, [r3, #4]
 801862c:	4798      	blx	r3
 801862e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018630:	b00a      	add	sp, #40	; 0x28
 8018632:	bd70      	pop	{r4, r5, r6, pc}
 8018634:	2000b313 	.word	0x2000b313
 8018638:	0802a80b 	.word	0x0802a80b
 801863c:	0802ab44 	.word	0x0802ab44
 8018640:	0802a8be 	.word	0x0802a8be
 8018644:	2000b30e 	.word	0x2000b30e

08018648 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801864a:	b08b      	sub	sp, #44	; 0x2c
 801864c:	4604      	mov	r4, r0
 801864e:	466d      	mov	r5, sp
 8018650:	e885 0006 	stmia.w	r5, {r1, r2}
 8018654:	461d      	mov	r5, r3
 8018656:	2300      	movs	r3, #0
 8018658:	f8bd 6000 	ldrh.w	r6, [sp]
 801865c:	9308      	str	r3, [sp, #32]
 801865e:	2301      	movs	r3, #1
 8018660:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018664:	9302      	str	r3, [sp, #8]
 8018666:	6803      	ldr	r3, [r0, #0]
 8018668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801866a:	4798      	blx	r3
 801866c:	463a      	mov	r2, r7
 801866e:	4631      	mov	r1, r6
 8018670:	4603      	mov	r3, r0
 8018672:	4620      	mov	r0, r4
 8018674:	f7ff ff20 	bl	80184b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018678:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801867c:	9003      	str	r0, [sp, #12]
 801867e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018682:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018686:	9505      	str	r5, [sp, #20]
 8018688:	f8ad 301a 	strh.w	r3, [sp, #26]
 801868c:	4b0d      	ldr	r3, [pc, #52]	; (80186c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801868e:	881b      	ldrh	r3, [r3, #0]
 8018690:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018696:	f8ad 301e 	strh.w	r3, [sp, #30]
 801869a:	f7f7 fab9 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 801869e:	6803      	ldr	r3, [r0, #0]
 80186a0:	6a1b      	ldr	r3, [r3, #32]
 80186a2:	4798      	blx	r3
 80186a4:	23ff      	movs	r3, #255	; 0xff
 80186a6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80186aa:	a902      	add	r1, sp, #8
 80186ac:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80186b0:	6860      	ldr	r0, [r4, #4]
 80186b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80186b6:	6803      	ldr	r3, [r0, #0]
 80186b8:	685b      	ldr	r3, [r3, #4]
 80186ba:	4798      	blx	r3
 80186bc:	4628      	mov	r0, r5
 80186be:	b00b      	add	sp, #44	; 0x2c
 80186c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186c2:	bf00      	nop
 80186c4:	2000b30e 	.word	0x2000b30e

080186c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80186c8:	b570      	push	{r4, r5, r6, lr}
 80186ca:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80186ce:	4604      	mov	r4, r0
 80186d0:	b19b      	cbz	r3, 80186fa <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80186d2:	2002      	movs	r0, #2
 80186d4:	f7fd fa02 	bl	8015adc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80186d8:	2300      	movs	r3, #0
 80186da:	4620      	mov	r0, r4
 80186dc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80186e0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80186e4:	6823      	ldr	r3, [r4, #0]
 80186e6:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80186ea:	f7ff fd39 	bl	8018160 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80186ee:	4601      	mov	r1, r0
 80186f0:	4620      	mov	r0, r4
 80186f2:	462b      	mov	r3, r5
 80186f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186f8:	4718      	bx	r3
 80186fa:	bd70      	pop	{r4, r5, r6, pc}

080186fc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80186fc:	4770      	bx	lr

080186fe <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80186fe:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8018702:	1a13      	subs	r3, r2, r0
 8018704:	4258      	negs	r0, r3
 8018706:	4158      	adcs	r0, r3
 8018708:	4770      	bx	lr

0801870a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801870a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801870e:	1a9b      	subs	r3, r3, r2
 8018710:	2b00      	cmp	r3, #0
 8018712:	bfdc      	itt	le
 8018714:	6882      	ldrle	r2, [r0, #8]
 8018716:	189b      	addle	r3, r3, r2
 8018718:	2b01      	cmp	r3, #1
 801871a:	bfcc      	ite	gt
 801871c:	2000      	movgt	r0, #0
 801871e:	2001      	movle	r0, #1
 8018720:	4770      	bx	lr

08018722 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018722:	6902      	ldr	r2, [r0, #16]
 8018724:	6840      	ldr	r0, [r0, #4]
 8018726:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801872a:	4770      	bx	lr

0801872c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801872c:	6803      	ldr	r3, [r0, #0]
 801872e:	691b      	ldr	r3, [r3, #16]
 8018730:	4718      	bx	r3

08018732 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018732:	4770      	bx	lr

08018734 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8018734:	4770      	bx	lr
	...

08018738 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8018738:	2301      	movs	r3, #1
 801873a:	b570      	push	{r4, r5, r6, lr}
 801873c:	7203      	strb	r3, [r0, #8]
 801873e:	4604      	mov	r4, r0
 8018740:	6840      	ldr	r0, [r0, #4]
 8018742:	6803      	ldr	r3, [r0, #0]
 8018744:	699b      	ldr	r3, [r3, #24]
 8018746:	4798      	blx	r3
 8018748:	6803      	ldr	r3, [r0, #0]
 801874a:	4605      	mov	r5, r0
 801874c:	2b08      	cmp	r3, #8
 801874e:	d01e      	beq.n	801878e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8018750:	d80b      	bhi.n	801876a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018752:	2b02      	cmp	r3, #2
 8018754:	d027      	beq.n	80187a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8018756:	2b04      	cmp	r3, #4
 8018758:	d011      	beq.n	801877e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801875a:	2b01      	cmp	r3, #1
 801875c:	d028      	beq.n	80187b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801875e:	4b17      	ldr	r3, [pc, #92]	; (80187bc <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8018760:	218b      	movs	r1, #139	; 0x8b
 8018762:	4a17      	ldr	r2, [pc, #92]	; (80187c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8018764:	4817      	ldr	r0, [pc, #92]	; (80187c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8018766:	f00e ff21 	bl	80275ac <__assert_func>
 801876a:	2b40      	cmp	r3, #64	; 0x40
 801876c:	d020      	beq.n	80187b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801876e:	d801      	bhi.n	8018774 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8018770:	2b20      	cmp	r3, #32
 8018772:	e7f3      	b.n	801875c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018774:	2b80      	cmp	r3, #128	; 0x80
 8018776:	d01b      	beq.n	80187b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801877c:	e7ee      	b.n	801875c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801877e:	6823      	ldr	r3, [r4, #0]
 8018780:	7f01      	ldrb	r1, [r0, #28]
 8018782:	4620      	mov	r0, r4
 8018784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018786:	4798      	blx	r3
 8018788:	6823      	ldr	r3, [r4, #0]
 801878a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801878c:	e006      	b.n	801879c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801878e:	6823      	ldr	r3, [r4, #0]
 8018790:	7f01      	ldrb	r1, [r0, #28]
 8018792:	4620      	mov	r0, r4
 8018794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018796:	4798      	blx	r3
 8018798:	6823      	ldr	r3, [r4, #0]
 801879a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801879c:	4629      	mov	r1, r5
 801879e:	4620      	mov	r0, r4
 80187a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80187a4:	4718      	bx	r3
 80187a6:	6823      	ldr	r3, [r4, #0]
 80187a8:	4620      	mov	r0, r4
 80187aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80187ac:	4798      	blx	r3
 80187ae:	e7f3      	b.n	8018798 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80187b0:	6823      	ldr	r3, [r4, #0]
 80187b2:	4620      	mov	r0, r4
 80187b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80187b6:	4798      	blx	r3
 80187b8:	e7e6      	b.n	8018788 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80187ba:	bf00      	nop
 80187bc:	0802ad95 	.word	0x0802ad95
 80187c0:	0802aea4 	.word	0x0802aea4
 80187c4:	0802adba 	.word	0x0802adba

080187c8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80187c8:	b570      	push	{r4, r5, r6, lr}
 80187ca:	4604      	mov	r4, r0
 80187cc:	460e      	mov	r6, r1
 80187ce:	6860      	ldr	r0, [r4, #4]
 80187d0:	6803      	ldr	r3, [r0, #0]
 80187d2:	685b      	ldr	r3, [r3, #4]
 80187d4:	4798      	blx	r3
 80187d6:	2800      	cmp	r0, #0
 80187d8:	d1f9      	bne.n	80187ce <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80187da:	4d0b      	ldr	r5, [pc, #44]	; (8018808 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 80187dc:	6828      	ldr	r0, [r5, #0]
 80187de:	6803      	ldr	r3, [r0, #0]
 80187e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80187e2:	4798      	blx	r3
 80187e4:	f7fd fc50 	bl	8016088 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80187e8:	6860      	ldr	r0, [r4, #4]
 80187ea:	4631      	mov	r1, r6
 80187ec:	6803      	ldr	r3, [r0, #0]
 80187ee:	689b      	ldr	r3, [r3, #8]
 80187f0:	4798      	blx	r3
 80187f2:	6823      	ldr	r3, [r4, #0]
 80187f4:	4620      	mov	r0, r4
 80187f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187f8:	4798      	blx	r3
 80187fa:	6828      	ldr	r0, [r5, #0]
 80187fc:	6803      	ldr	r3, [r0, #0]
 80187fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018804:	4718      	bx	r3
 8018806:	bf00      	nop
 8018808:	2000b314 	.word	0x2000b314

0801880c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801880c:	b508      	push	{r3, lr}
 801880e:	f7fd fc21 	bl	8016054 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018816:	f7fd bc2b 	b.w	8016070 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801881a <_ZN8touchgfx13DMA_Interface5startEv>:
 801881a:	b510      	push	{r4, lr}
 801881c:	4604      	mov	r4, r0
 801881e:	6840      	ldr	r0, [r0, #4]
 8018820:	6803      	ldr	r3, [r0, #0]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	4798      	blx	r3
 8018826:	b948      	cbnz	r0, 801883c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018828:	7a63      	ldrb	r3, [r4, #9]
 801882a:	b13b      	cbz	r3, 801883c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801882c:	7a23      	ldrb	r3, [r4, #8]
 801882e:	b92b      	cbnz	r3, 801883c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018830:	6823      	ldr	r3, [r4, #0]
 8018832:	4620      	mov	r0, r4
 8018834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801883a:	4718      	bx	r3
 801883c:	bd10      	pop	{r4, pc}
	...

08018840 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8018840:	b510      	push	{r4, lr}
 8018842:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8018846:	1b12      	subs	r2, r2, r4
 8018848:	2a00      	cmp	r2, #0
 801884a:	bfdc      	itt	le
 801884c:	6883      	ldrle	r3, [r0, #8]
 801884e:	18d2      	addle	r2, r2, r3
 8018850:	2a01      	cmp	r2, #1
 8018852:	dd18      	ble.n	8018886 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8018854:	6843      	ldr	r3, [r0, #4]
 8018856:	f101 021c 	add.w	r2, r1, #28
 801885a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801885e:	f851 4b04 	ldr.w	r4, [r1], #4
 8018862:	4291      	cmp	r1, r2
 8018864:	f843 4b04 	str.w	r4, [r3], #4
 8018868:	d1f9      	bne.n	801885e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801886a:	880a      	ldrh	r2, [r1, #0]
 801886c:	801a      	strh	r2, [r3, #0]
 801886e:	788a      	ldrb	r2, [r1, #2]
 8018870:	709a      	strb	r2, [r3, #2]
 8018872:	68c3      	ldr	r3, [r0, #12]
 8018874:	6882      	ldr	r2, [r0, #8]
 8018876:	f3bf 8f5b 	dmb	ish
 801887a:	3301      	adds	r3, #1
 801887c:	429a      	cmp	r2, r3
 801887e:	bfd8      	it	le
 8018880:	1a9b      	suble	r3, r3, r2
 8018882:	60c3      	str	r3, [r0, #12]
 8018884:	bd10      	pop	{r4, pc}
 8018886:	4b03      	ldr	r3, [pc, #12]	; (8018894 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8018888:	2139      	movs	r1, #57	; 0x39
 801888a:	4a03      	ldr	r2, [pc, #12]	; (8018898 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801888c:	4803      	ldr	r0, [pc, #12]	; (801889c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801888e:	f00e fe8d 	bl	80275ac <__assert_func>
 8018892:	bf00      	nop
 8018894:	0802ade0 	.word	0x0802ade0
 8018898:	0802aed4 	.word	0x0802aed4
 801889c:	0802adba 	.word	0x0802adba

080188a0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80188a0:	b510      	push	{r4, lr}
 80188a2:	6803      	ldr	r3, [r0, #0]
 80188a4:	4604      	mov	r4, r0
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	4798      	blx	r3
 80188aa:	b128      	cbz	r0, 80188b8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80188ac:	4b07      	ldr	r3, [pc, #28]	; (80188cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80188ae:	213f      	movs	r1, #63	; 0x3f
 80188b0:	4a07      	ldr	r2, [pc, #28]	; (80188d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80188b2:	4808      	ldr	r0, [pc, #32]	; (80188d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80188b4:	f00e fe7a 	bl	80275ac <__assert_func>
 80188b8:	6923      	ldr	r3, [r4, #16]
 80188ba:	68a2      	ldr	r2, [r4, #8]
 80188bc:	f3bf 8f5b 	dmb	ish
 80188c0:	3301      	adds	r3, #1
 80188c2:	429a      	cmp	r2, r3
 80188c4:	bfd8      	it	le
 80188c6:	1a9b      	suble	r3, r3, r2
 80188c8:	6123      	str	r3, [r4, #16]
 80188ca:	bd10      	pop	{r4, pc}
 80188cc:	0802ae03 	.word	0x0802ae03
 80188d0:	0802af22 	.word	0x0802af22
 80188d4:	0802adba 	.word	0x0802adba

080188d8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80188d8:	b570      	push	{r4, r5, r6, lr}
 80188da:	4604      	mov	r4, r0
 80188dc:	6840      	ldr	r0, [r0, #4]
 80188de:	6803      	ldr	r3, [r0, #0]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	4798      	blx	r3
 80188e4:	4605      	mov	r5, r0
 80188e6:	b930      	cbnz	r0, 80188f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80188e8:	7a23      	ldrb	r3, [r4, #8]
 80188ea:	b123      	cbz	r3, 80188f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80188ec:	6860      	ldr	r0, [r4, #4]
 80188ee:	6803      	ldr	r3, [r0, #0]
 80188f0:	695b      	ldr	r3, [r3, #20]
 80188f2:	4798      	blx	r3
 80188f4:	7225      	strb	r5, [r4, #8]
 80188f6:	6860      	ldr	r0, [r4, #4]
 80188f8:	6803      	ldr	r3, [r0, #0]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	4798      	blx	r3
 80188fe:	b928      	cbnz	r0, 801890c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8018900:	6823      	ldr	r3, [r4, #0]
 8018902:	4620      	mov	r0, r4
 8018904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801890a:	4718      	bx	r3
 801890c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018910:	f7fd bbc6 	b.w	80160a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08018914 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018914:	b510      	push	{r4, lr}
 8018916:	6082      	str	r2, [r0, #8]
 8018918:	2200      	movs	r2, #0
 801891a:	4c03      	ldr	r4, [pc, #12]	; (8018928 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801891c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8018920:	e9c0 4100 	strd	r4, r1, [r0]
 8018924:	bd10      	pop	{r4, pc}
 8018926:	bf00      	nop
 8018928:	0802ae88 	.word	0x0802ae88

0801892c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801892c:	6840      	ldr	r0, [r0, #4]
 801892e:	6803      	ldr	r3, [r0, #0]
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	4718      	bx	r3

08018934 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8018934:	2001      	movs	r0, #1
 8018936:	4770      	bx	lr

08018938 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8018938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801893c:	460d      	mov	r5, r1
 801893e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8018942:	b085      	sub	sp, #20
 8018944:	4690      	mov	r8, r2
 8018946:	4411      	add	r1, r2
 8018948:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801894c:	4699      	mov	r9, r3
 801894e:	6803      	ldr	r3, [r0, #0]
 8018950:	60c1      	str	r1, [r0, #12]
 8018952:	4604      	mov	r4, r0
 8018954:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018956:	440a      	add	r2, r1
 8018958:	6102      	str	r2, [r0, #16]
 801895a:	695b      	ldr	r3, [r3, #20]
 801895c:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8018960:	4798      	blx	r3
 8018962:	2800      	cmp	r0, #0
 8018964:	d039      	beq.n	80189da <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8018966:	44c8      	add	r8, r9
 8018968:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801896c:	4445      	add	r5, r8
 801896e:	6823      	ldr	r3, [r4, #0]
 8018970:	f10d 020f 	add.w	r2, sp, #15
 8018974:	a903      	add	r1, sp, #12
 8018976:	4620      	mov	r0, r4
 8018978:	9200      	str	r2, [sp, #0]
 801897a:	f10d 020d 	add.w	r2, sp, #13
 801897e:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8018982:	f10d 030e 	add.w	r3, sp, #14
 8018986:	47c0      	blx	r8
 8018988:	b1f8      	cbz	r0, 80189ca <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801898a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801898e:	7a20      	ldrb	r0, [r4, #8]
 8018990:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8018994:	4358      	muls	r0, r3
 8018996:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801899a:	1c43      	adds	r3, r0, #1
 801899c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80189a0:	f817 0b01 	ldrb.w	r0, [r7], #1
 80189a4:	121b      	asrs	r3, r3, #8
 80189a6:	fb10 f003 	smulbb	r0, r0, r3
 80189aa:	b283      	uxth	r3, r0
 80189ac:	1c58      	adds	r0, r3, #1
 80189ae:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80189b2:	6823      	ldr	r3, [r4, #0]
 80189b4:	1200      	asrs	r0, r0, #8
 80189b6:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80189ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80189be:	28ff      	cmp	r0, #255	; 0xff
 80189c0:	d10e      	bne.n	80189e0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 80189c2:	9100      	str	r1, [sp, #0]
 80189c4:	4629      	mov	r1, r5
 80189c6:	4620      	mov	r0, r4
 80189c8:	47c0      	blx	r8
 80189ca:	68e3      	ldr	r3, [r4, #12]
 80189cc:	3e01      	subs	r6, #1
 80189ce:	f105 0503 	add.w	r5, r5, #3
 80189d2:	f103 0301 	add.w	r3, r3, #1
 80189d6:	60e3      	str	r3, [r4, #12]
 80189d8:	d1c9      	bne.n	801896e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 80189da:	b005      	add	sp, #20
 80189dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189e0:	fa1f fc80 	uxth.w	ip, r0
 80189e4:	43c0      	mvns	r0, r0
 80189e6:	f895 e002 	ldrb.w	lr, [r5, #2]
 80189ea:	fb12 f20c 	smulbb	r2, r2, ip
 80189ee:	b2c0      	uxtb	r0, r0
 80189f0:	fb13 f30c 	smulbb	r3, r3, ip
 80189f4:	fb0e 2200 	mla	r2, lr, r0, r2
 80189f8:	f895 e001 	ldrb.w	lr, [r5, #1]
 80189fc:	fb11 f10c 	smulbb	r1, r1, ip
 8018a00:	fb0e 3300 	mla	r3, lr, r0, r3
 8018a04:	f895 e000 	ldrb.w	lr, [r5]
 8018a08:	b292      	uxth	r2, r2
 8018a0a:	b29b      	uxth	r3, r3
 8018a0c:	fb0e 1000 	mla	r0, lr, r0, r1
 8018a10:	1c59      	adds	r1, r3, #1
 8018a12:	b280      	uxth	r0, r0
 8018a14:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8018a18:	1c51      	adds	r1, r2, #1
 8018a1a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8018a1e:	1c41      	adds	r1, r0, #1
 8018a20:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018a24:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8018a28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018a2c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018a30:	9000      	str	r0, [sp, #0]
 8018a32:	e7c7      	b.n	80189c4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08018a34 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8018a34:	f89d 0000 	ldrb.w	r0, [sp]
 8018a38:	704b      	strb	r3, [r1, #1]
 8018a3a:	7008      	strb	r0, [r1, #0]
 8018a3c:	708a      	strb	r2, [r1, #2]
 8018a3e:	4770      	bx	lr

08018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8018a40:	b507      	push	{r0, r1, r2, lr}
 8018a42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8018a46:	ab01      	add	r3, sp, #4
 8018a48:	6809      	ldr	r1, [r1, #0]
 8018a4a:	6800      	ldr	r0, [r0, #0]
 8018a4c:	f003 f9be 	bl	801bdcc <_ZN8touchgfx6muldivElllRl>
 8018a50:	b003      	add	sp, #12
 8018a52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018a58 <_ZN8touchgfx7CWRUtil4sineEi>:
 8018a58:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018a5c:	fb90 f3f2 	sdiv	r3, r0, r2
 8018a60:	fb03 0312 	mls	r3, r3, r2, r0
 8018a64:	4413      	add	r3, r2
 8018a66:	fb93 f0f2 	sdiv	r0, r3, r2
 8018a6a:	fb02 3010 	mls	r0, r2, r0, r3
 8018a6e:	4b0a      	ldr	r3, [pc, #40]	; (8018a98 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8018a70:	285a      	cmp	r0, #90	; 0x5a
 8018a72:	dc02      	bgt.n	8018a7a <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8018a74:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018a78:	4770      	bx	lr
 8018a7a:	28b4      	cmp	r0, #180	; 0xb4
 8018a7c:	dc02      	bgt.n	8018a84 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8018a7e:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8018a82:	e7f7      	b.n	8018a74 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8018a84:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8018a88:	bfd4      	ite	le
 8018a8a:	38b4      	suble	r0, #180	; 0xb4
 8018a8c:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8018a90:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018a94:	4240      	negs	r0, r0
 8018a96:	4770      	bx	lr
 8018a98:	0802af7c 	.word	0x0802af7c

08018a9c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8018a9c:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8018aa0:	fb90 f3f2 	sdiv	r3, r0, r2
 8018aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018aa6:	fb03 0012 	mls	r0, r3, r2, r0
 8018aaa:	4410      	add	r0, r2
 8018aac:	fb90 f4f2 	sdiv	r4, r0, r2
 8018ab0:	fb02 0414 	mls	r4, r2, r4, r0
 8018ab4:	f004 061f 	and.w	r6, r4, #31
 8018ab8:	1164      	asrs	r4, r4, #5
 8018aba:	4620      	mov	r0, r4
 8018abc:	f7ff ffcc 	bl	8018a58 <_ZN8touchgfx7CWRUtil4sineEi>
 8018ac0:	4605      	mov	r5, r0
 8018ac2:	b90e      	cbnz	r6, 8018ac8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8018ac4:	b002      	add	sp, #8
 8018ac6:	bd70      	pop	{r4, r5, r6, pc}
 8018ac8:	1c60      	adds	r0, r4, #1
 8018aca:	f7ff ffc5 	bl	8018a58 <_ZN8touchgfx7CWRUtil4sineEi>
 8018ace:	ab01      	add	r3, sp, #4
 8018ad0:	2220      	movs	r2, #32
 8018ad2:	4631      	mov	r1, r6
 8018ad4:	1b40      	subs	r0, r0, r5
 8018ad6:	f003 f979 	bl	801bdcc <_ZN8touchgfx6muldivElllRl>
 8018ada:	4428      	add	r0, r5
 8018adc:	e7f2      	b.n	8018ac4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08018ade <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8018ade:	b508      	push	{r3, lr}
 8018ae0:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8018ae4:	f7ff ffda 	bl	8018a9c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018ae8:	bd08      	pop	{r3, pc}
	...

08018aec <_ZN8touchgfx6CircleC1Ev>:
 8018aec:	b510      	push	{r4, lr}
 8018aee:	4604      	mov	r4, r0
 8018af0:	f000 fce2 	bl	80194b8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8018af4:	4b08      	ldr	r3, [pc, #32]	; (8018b18 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8018af6:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8018afa:	4620      	mov	r0, r4
 8018afc:	6023      	str	r3, [r4, #0]
 8018afe:	2300      	movs	r3, #0
 8018b00:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8018b04:	f24b 4205 	movw	r2, #46085	; 0xb405
 8018b08:	60a3      	str	r3, [r4, #8]
 8018b0a:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8018b0e:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8018b12:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8018b16:	bd10      	pop	{r4, pc}
 8018b18:	0802b03c 	.word	0x0802b03c

08018b1c <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8018b1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018b20:	4606      	mov	r6, r0
 8018b22:	6810      	ldr	r0, [r2, #0]
 8018b24:	4698      	mov	r8, r3
 8018b26:	4691      	mov	r9, r2
 8018b28:	460f      	mov	r7, r1
 8018b2a:	f7ff ffb7 	bl	8018a9c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018b2e:	a902      	add	r1, sp, #8
 8018b30:	2402      	movs	r4, #2
 8018b32:	f841 0d08 	str.w	r0, [r1, #-8]!
 8018b36:	4640      	mov	r0, r8
 8018b38:	f7ff ff82 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018b3c:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8018b3e:	fb90 f0f4 	sdiv	r0, r0, r4
 8018b42:	4405      	add	r5, r0
 8018b44:	f8d9 0000 	ldr.w	r0, [r9]
 8018b48:	f7ff ffc9 	bl	8018ade <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018b4c:	a902      	add	r1, sp, #8
 8018b4e:	f841 0d04 	str.w	r0, [r1, #-4]!
 8018b52:	4640      	mov	r0, r8
 8018b54:	f7ff ff74 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018b58:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8018b5a:	4629      	mov	r1, r5
 8018b5c:	fb90 f0f4 	sdiv	r0, r0, r4
 8018b60:	1a12      	subs	r2, r2, r0
 8018b62:	4638      	mov	r0, r7
 8018b64:	f00d fb15 	bl	8026192 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8018b68:	b003      	add	sp, #12
 8018b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018b6e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8018b6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018b72:	9e08      	ldr	r6, [sp, #32]
 8018b74:	4698      	mov	r8, r3
 8018b76:	4615      	mov	r5, r2
 8018b78:	460f      	mov	r7, r1
 8018b7a:	6830      	ldr	r0, [r6, #0]
 8018b7c:	2402      	movs	r4, #2
 8018b7e:	f7ff ff8d 	bl	8018a9c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018b82:	a902      	add	r1, sp, #8
 8018b84:	f841 0d08 	str.w	r0, [r1, #-8]!
 8018b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b8a:	f7ff ff59 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018b8e:	682d      	ldr	r5, [r5, #0]
 8018b90:	fb90 f0f4 	sdiv	r0, r0, r4
 8018b94:	4405      	add	r5, r0
 8018b96:	6830      	ldr	r0, [r6, #0]
 8018b98:	f7ff ffa1 	bl	8018ade <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018b9c:	a902      	add	r1, sp, #8
 8018b9e:	f841 0d04 	str.w	r0, [r1, #-4]!
 8018ba2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018ba4:	f7ff ff4c 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018ba8:	f8d8 2000 	ldr.w	r2, [r8]
 8018bac:	4629      	mov	r1, r5
 8018bae:	fb90 f0f4 	sdiv	r0, r0, r4
 8018bb2:	1a12      	subs	r2, r2, r0
 8018bb4:	4638      	mov	r0, r7
 8018bb6:	f00d fa7b 	bl	80260b0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018bba:	b002      	add	sp, #8
 8018bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018bc0 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8018bc0:	b513      	push	{r0, r1, r4, lr}
 8018bc2:	e9cd 2300 	strd	r2, r3, [sp]
 8018bc6:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8018bca:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8018bce:	f7ff ffce 	bl	8018b6e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8018bd2:	b002      	add	sp, #8
 8018bd4:	bd10      	pop	{r4, pc}

08018bd6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8018bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bd8:	680e      	ldr	r6, [r1, #0]
 8018bda:	681f      	ldr	r7, [r3, #0]
 8018bdc:	9807      	ldr	r0, [sp, #28]
 8018bde:	42be      	cmp	r6, r7
 8018be0:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8018be4:	bfb8      	it	lt
 8018be6:	601e      	strlt	r6, [r3, #0]
 8018be8:	680b      	ldr	r3, [r1, #0]
 8018bea:	6829      	ldr	r1, [r5, #0]
 8018bec:	428b      	cmp	r3, r1
 8018bee:	bfc8      	it	gt
 8018bf0:	602b      	strgt	r3, [r5, #0]
 8018bf2:	6813      	ldr	r3, [r2, #0]
 8018bf4:	6821      	ldr	r1, [r4, #0]
 8018bf6:	428b      	cmp	r3, r1
 8018bf8:	bfb8      	it	lt
 8018bfa:	6023      	strlt	r3, [r4, #0]
 8018bfc:	6813      	ldr	r3, [r2, #0]
 8018bfe:	6802      	ldr	r2, [r0, #0]
 8018c00:	4293      	cmp	r3, r2
 8018c02:	bfc8      	it	gt
 8018c04:	6003      	strgt	r3, [r0, #0]
 8018c06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018c08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8018c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c0c:	b089      	sub	sp, #36	; 0x24
 8018c0e:	4690      	mov	r8, r2
 8018c10:	4606      	mov	r6, r0
 8018c12:	2402      	movs	r4, #2
 8018c14:	ad08      	add	r5, sp, #32
 8018c16:	6808      	ldr	r0, [r1, #0]
 8018c18:	461f      	mov	r7, r3
 8018c1a:	4689      	mov	r9, r1
 8018c1c:	f7ff ff3e 	bl	8018a9c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018c20:	f845 0d04 	str.w	r0, [r5, #-4]!
 8018c24:	4640      	mov	r0, r8
 8018c26:	4629      	mov	r1, r5
 8018c28:	f7ff ff0a 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018c2c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8018c2e:	fb90 f0f4 	sdiv	r0, r0, r4
 8018c32:	4418      	add	r0, r3
 8018c34:	9005      	str	r0, [sp, #20]
 8018c36:	f8d9 0000 	ldr.w	r0, [r9]
 8018c3a:	f7ff ff50 	bl	8018ade <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018c3e:	4629      	mov	r1, r5
 8018c40:	9007      	str	r0, [sp, #28]
 8018c42:	4640      	mov	r0, r8
 8018c44:	f7ff fefc 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018c48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018c4a:	aa08      	add	r2, sp, #32
 8018c4c:	a905      	add	r1, sp, #20
 8018c4e:	fb90 f0f4 	sdiv	r0, r0, r4
 8018c52:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8018c54:	1a24      	subs	r4, r4, r0
 8018c56:	4630      	mov	r0, r6
 8018c58:	f842 4d08 	str.w	r4, [r2, #-8]!
 8018c5c:	9302      	str	r3, [sp, #8]
 8018c5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018c60:	9301      	str	r3, [sp, #4]
 8018c62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018c64:	9300      	str	r3, [sp, #0]
 8018c66:	463b      	mov	r3, r7
 8018c68:	f7ff ffb5 	bl	8018bd6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018c6c:	b009      	add	sp, #36	; 0x24
 8018c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018c72 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8018c72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c76:	4291      	cmp	r1, r2
 8018c78:	b08d      	sub	sp, #52	; 0x34
 8018c7a:	461e      	mov	r6, r3
 8018c7c:	4604      	mov	r4, r0
 8018c7e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8018c82:	ad0c      	add	r5, sp, #48	; 0x30
 8018c84:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8018c88:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8018c8c:	bfc8      	it	gt
 8018c8e:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 8018c92:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018c96:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8018c9a:	1a9b      	subs	r3, r3, r2
 8018c9c:	a907      	add	r1, sp, #28
 8018c9e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018ca2:	bfa2      	ittt	ge
 8018ca4:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8018ca8:	2200      	movge	r2, #0
 8018caa:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 8018cae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8018cb0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8018cb2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018cb6:	f845 3d04 	str.w	r3, [r5, #-4]!
 8018cba:	4633      	mov	r3, r6
 8018cbc:	462a      	mov	r2, r5
 8018cbe:	9700      	str	r7, [sp, #0]
 8018cc0:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018cc4:	f7ff ffa0 	bl	8018c08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018cc8:	9b07      	ldr	r3, [sp, #28]
 8018cca:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 8018cce:	f103 0120 	add.w	r1, r3, #32
 8018cd2:	fb91 f3f0 	sdiv	r3, r1, r0
 8018cd6:	fb00 1313 	mls	r3, r0, r3, r1
 8018cda:	1ac3      	subs	r3, r0, r3
 8018cdc:	fb93 f2f0 	sdiv	r2, r3, r0
 8018ce0:	fb00 3312 	mls	r3, r0, r2, r3
 8018ce4:	440b      	add	r3, r1
 8018ce6:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 8018cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018cec:	9906      	ldr	r1, [sp, #24]
 8018cee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018cf0:	4291      	cmp	r1, r2
 8018cf2:	db11      	blt.n	8018d18 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8018cf4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018cf6:	4651      	mov	r1, sl
 8018cf8:	9700      	str	r7, [sp, #0]
 8018cfa:	4620      	mov	r0, r4
 8018cfc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018d00:	462a      	mov	r2, r5
 8018d02:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d04:	4633      	mov	r3, r6
 8018d06:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018d0a:	f7ff ff7d 	bl	8018c08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d10:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8018d14:	9309      	str	r3, [sp, #36]	; 0x24
 8018d16:	e7e8      	b.n	8018cea <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8018d18:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8018d1c:	4291      	cmp	r1, r2
 8018d1e:	dd0c      	ble.n	8018d3a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8018d20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018d22:	a906      	add	r1, sp, #24
 8018d24:	9700      	str	r7, [sp, #0]
 8018d26:	4620      	mov	r0, r4
 8018d28:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018d2c:	462a      	mov	r2, r5
 8018d2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d30:	4633      	mov	r3, r6
 8018d32:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018d36:	f7ff ff67 	bl	8018c08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018d3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	f040 8097 	bne.w	8018e70 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 8018d42:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8018d46:	1a52      	subs	r2, r2, r1
 8018d48:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8018d4c:	da0a      	bge.n	8018d64 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 8018d4e:	462a      	mov	r2, r5
 8018d50:	a90a      	add	r1, sp, #40	; 0x28
 8018d52:	9700      	str	r7, [sp, #0]
 8018d54:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8018d58:	4633      	mov	r3, r6
 8018d5a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018d5e:	4620      	mov	r0, r4
 8018d60:	f7ff ff52 	bl	8018c08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018d64:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8018d68:	2bb3      	cmp	r3, #179	; 0xb3
 8018d6a:	d87e      	bhi.n	8018e6a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8018d6c:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8018d70:	1a1b      	subs	r3, r3, r0
 8018d72:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018d76:	da78      	bge.n	8018e6a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8018d78:	ad0c      	add	r5, sp, #48	; 0x30
 8018d7a:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8018d7e:	f7ff fe8d 	bl	8018a9c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018d82:	f04f 0a02 	mov.w	sl, #2
 8018d86:	f845 0d04 	str.w	r0, [r5, #-4]!
 8018d8a:	4658      	mov	r0, fp
 8018d8c:	4629      	mov	r1, r5
 8018d8e:	f7ff fe57 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018d92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018d94:	18c3      	adds	r3, r0, r3
 8018d96:	9807      	ldr	r0, [sp, #28]
 8018d98:	9305      	str	r3, [sp, #20]
 8018d9a:	f7ff fea0 	bl	8018ade <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018d9e:	4629      	mov	r1, r5
 8018da0:	900b      	str	r0, [sp, #44]	; 0x2c
 8018da2:	4658      	mov	r0, fp
 8018da4:	f7ff fe4c 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018daa:	9a05      	ldr	r2, [sp, #20]
 8018dac:	a90a      	add	r1, sp, #40	; 0x28
 8018dae:	1a1b      	subs	r3, r3, r0
 8018db0:	9700      	str	r7, [sp, #0]
 8018db2:	4620      	mov	r0, r4
 8018db4:	9304      	str	r3, [sp, #16]
 8018db6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018db8:	fb93 f3fa 	sdiv	r3, r3, sl
 8018dbc:	1ad2      	subs	r2, r2, r3
 8018dbe:	920a      	str	r2, [sp, #40]	; 0x28
 8018dc0:	9a04      	ldr	r2, [sp, #16]
 8018dc2:	1ad3      	subs	r3, r2, r3
 8018dc4:	462a      	mov	r2, r5
 8018dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8018dc8:	4633      	mov	r3, r6
 8018dca:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018dce:	f7ff ff02 	bl	8018bd6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018dd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018dd4:	9a05      	ldr	r2, [sp, #20]
 8018dd6:	a90a      	add	r1, sp, #40	; 0x28
 8018dd8:	4620      	mov	r0, r4
 8018dda:	9700      	str	r7, [sp, #0]
 8018ddc:	fb93 f3fa 	sdiv	r3, r3, sl
 8018de0:	189a      	adds	r2, r3, r2
 8018de2:	920a      	str	r2, [sp, #40]	; 0x28
 8018de4:	9a04      	ldr	r2, [sp, #16]
 8018de6:	4413      	add	r3, r2
 8018de8:	462a      	mov	r2, r5
 8018dea:	930b      	str	r3, [sp, #44]	; 0x2c
 8018dec:	4633      	mov	r3, r6
 8018dee:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018df2:	f7ff fef0 	bl	8018bd6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018df6:	9806      	ldr	r0, [sp, #24]
 8018df8:	f7ff fe50 	bl	8018a9c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018dfc:	4629      	mov	r1, r5
 8018dfe:	900b      	str	r0, [sp, #44]	; 0x2c
 8018e00:	4658      	mov	r0, fp
 8018e02:	f7ff fe1d 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018e06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018e08:	18c3      	adds	r3, r0, r3
 8018e0a:	9806      	ldr	r0, [sp, #24]
 8018e0c:	9304      	str	r3, [sp, #16]
 8018e0e:	f7ff fe66 	bl	8018ade <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018e12:	4629      	mov	r1, r5
 8018e14:	900b      	str	r0, [sp, #44]	; 0x2c
 8018e16:	4658      	mov	r0, fp
 8018e18:	f7ff fe12 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018e1e:	9a04      	ldr	r2, [sp, #16]
 8018e20:	a90a      	add	r1, sp, #40	; 0x28
 8018e22:	eba3 0b00 	sub.w	fp, r3, r0
 8018e26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018e28:	4620      	mov	r0, r4
 8018e2a:	9700      	str	r7, [sp, #0]
 8018e2c:	fb93 f3fa 	sdiv	r3, r3, sl
 8018e30:	1ad2      	subs	r2, r2, r3
 8018e32:	ebab 0303 	sub.w	r3, fp, r3
 8018e36:	920a      	str	r2, [sp, #40]	; 0x28
 8018e38:	462a      	mov	r2, r5
 8018e3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8018e3c:	4633      	mov	r3, r6
 8018e3e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018e42:	f7ff fec8 	bl	8018bd6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018e46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018e48:	9700      	str	r7, [sp, #0]
 8018e4a:	462a      	mov	r2, r5
 8018e4c:	a90a      	add	r1, sp, #40	; 0x28
 8018e4e:	4620      	mov	r0, r4
 8018e50:	fb93 fafa 	sdiv	sl, r3, sl
 8018e54:	9b04      	ldr	r3, [sp, #16]
 8018e56:	4453      	add	r3, sl
 8018e58:	930a      	str	r3, [sp, #40]	; 0x28
 8018e5a:	eb0a 030b 	add.w	r3, sl, fp
 8018e5e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018e62:	930b      	str	r3, [sp, #44]	; 0x2c
 8018e64:	4633      	mov	r3, r6
 8018e66:	f7ff feb6 	bl	8018bd6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018e6a:	b00d      	add	sp, #52	; 0x34
 8018e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018e72:	a907      	add	r1, sp, #28
 8018e74:	9700      	str	r7, [sp, #0]
 8018e76:	4620      	mov	r0, r4
 8018e78:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018e7c:	462a      	mov	r2, r5
 8018e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018e80:	4633      	mov	r3, r6
 8018e82:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018e86:	f7ff febf 	bl	8018c08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018e8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018e8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018e8e:	a906      	add	r1, sp, #24
 8018e90:	9700      	str	r7, [sp, #0]
 8018e92:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018e96:	462a      	mov	r2, r5
 8018e98:	930b      	str	r3, [sp, #44]	; 0x2c
 8018e9a:	4633      	mov	r3, r6
 8018e9c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018ea0:	e75d      	b.n	8018d5e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08018ea2 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8018ea2:	b530      	push	{r4, r5, lr}
 8018ea4:	4604      	mov	r4, r0
 8018ea6:	4608      	mov	r0, r1
 8018ea8:	4611      	mov	r1, r2
 8018eaa:	461a      	mov	r2, r3
 8018eac:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018eb0:	b089      	sub	sp, #36	; 0x24
 8018eb2:	2500      	movs	r5, #0
 8018eb4:	015b      	lsls	r3, r3, #5
 8018eb6:	9505      	str	r5, [sp, #20]
 8018eb8:	9304      	str	r3, [sp, #16]
 8018eba:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018ebe:	015b      	lsls	r3, r3, #5
 8018ec0:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8018ec4:	ab07      	add	r3, sp, #28
 8018ec6:	2520      	movs	r5, #32
 8018ec8:	9302      	str	r3, [sp, #8]
 8018eca:	ab06      	add	r3, sp, #24
 8018ecc:	9301      	str	r3, [sp, #4]
 8018ece:	ab05      	add	r3, sp, #20
 8018ed0:	9300      	str	r3, [sp, #0]
 8018ed2:	ab04      	add	r3, sp, #16
 8018ed4:	f7ff fecd 	bl	8018c72 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8018ed8:	9a04      	ldr	r2, [sp, #16]
 8018eda:	9805      	ldr	r0, [sp, #20]
 8018edc:	9b06      	ldr	r3, [sp, #24]
 8018ede:	9907      	ldr	r1, [sp, #28]
 8018ee0:	fb92 f2f5 	sdiv	r2, r2, r5
 8018ee4:	fb90 f0f5 	sdiv	r0, r0, r5
 8018ee8:	fb93 f3f5 	sdiv	r3, r3, r5
 8018eec:	fb91 f1f5 	sdiv	r1, r1, r5
 8018ef0:	b292      	uxth	r2, r2
 8018ef2:	3002      	adds	r0, #2
 8018ef4:	b29b      	uxth	r3, r3
 8018ef6:	3102      	adds	r1, #2
 8018ef8:	1a80      	subs	r0, r0, r2
 8018efa:	3a01      	subs	r2, #1
 8018efc:	1ac9      	subs	r1, r1, r3
 8018efe:	3b01      	subs	r3, #1
 8018f00:	80a0      	strh	r0, [r4, #4]
 8018f02:	4620      	mov	r0, r4
 8018f04:	8022      	strh	r2, [r4, #0]
 8018f06:	8063      	strh	r3, [r4, #2]
 8018f08:	80e1      	strh	r1, [r4, #6]
 8018f0a:	b009      	add	sp, #36	; 0x24
 8018f0c:	bd30      	pop	{r4, r5, pc}

08018f0e <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8018f0e:	b510      	push	{r4, lr}
 8018f10:	4604      	mov	r4, r0
 8018f12:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8018f16:	f7ff ffc4 	bl	8018ea2 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8018f1a:	4620      	mov	r0, r4
 8018f1c:	bd10      	pop	{r4, pc}

08018f1e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8018f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f22:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8018f24:	b0ba      	sub	sp, #232	; 0xe8
 8018f26:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8018f28:	4604      	mov	r4, r0
 8018f2a:	9303      	str	r3, [sp, #12]
 8018f2c:	460f      	mov	r7, r1
 8018f2e:	429a      	cmp	r2, r3
 8018f30:	9204      	str	r2, [sp, #16]
 8018f32:	ae0a      	add	r6, sp, #40	; 0x28
 8018f34:	bfb8      	it	lt
 8018f36:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 8018f3a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8018f3e:	1a9b      	subs	r3, r3, r2
 8018f40:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018f44:	bfa2      	ittt	ge
 8018f46:	2200      	movge	r2, #0
 8018f48:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8018f4c:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 8018f50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018f52:	2a00      	cmp	r2, #0
 8018f54:	d131      	bne.n	8018fba <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8018f56:	463a      	mov	r2, r7
 8018f58:	4621      	mov	r1, r4
 8018f5a:	a80b      	add	r0, sp, #44	; 0x2c
 8018f5c:	f00c ff50 	bl	8025e00 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8018f60:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018f62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018f64:	9205      	str	r2, [sp, #20]
 8018f66:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8018f6a:	9306      	str	r3, [sp, #24]
 8018f6c:	dc6f      	bgt.n	801904e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 8018f6e:	9b03      	ldr	r3, [sp, #12]
 8018f70:	a90b      	add	r1, sp, #44	; 0x2c
 8018f72:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8018f76:	4620      	mov	r0, r4
 8018f78:	9307      	str	r3, [sp, #28]
 8018f7a:	016d      	lsls	r5, r5, #5
 8018f7c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018f80:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018f84:	aa07      	add	r2, sp, #28
 8018f86:	930a      	str	r3, [sp, #40]	; 0x28
 8018f88:	4633      	mov	r3, r6
 8018f8a:	f7ff fdc7 	bl	8018b1c <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018f8e:	9f07      	ldr	r7, [sp, #28]
 8018f90:	2d00      	cmp	r5, #0
 8018f92:	d165      	bne.n	8019060 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8018f94:	3720      	adds	r7, #32
 8018f96:	4639      	mov	r1, r7
 8018f98:	9a04      	ldr	r2, [sp, #16]
 8018f9a:	9b06      	ldr	r3, [sp, #24]
 8018f9c:	442f      	add	r7, r5
 8018f9e:	4291      	cmp	r1, r2
 8018fa0:	dc6b      	bgt.n	801907a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 8018fa2:	9a05      	ldr	r2, [sp, #20]
 8018fa4:	4620      	mov	r0, r4
 8018fa6:	9107      	str	r1, [sp, #28]
 8018fa8:	a90b      	add	r1, sp, #44	; 0x2c
 8018faa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018fae:	aa07      	add	r2, sp, #28
 8018fb0:	930a      	str	r3, [sp, #40]	; 0x28
 8018fb2:	4633      	mov	r3, r6
 8018fb4:	f7ff fe04 	bl	8018bc0 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018fb8:	e7ed      	b.n	8018f96 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8018fba:	f9b1 c000 	ldrsh.w	ip, [r1]
 8018fbe:	88bd      	ldrh	r5, [r7, #4]
 8018fc0:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8018fc4:	4465      	add	r5, ip
 8018fc6:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8018fca:	b22d      	sxth	r5, r5
 8018fcc:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8018fd0:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8018fd4:	2d00      	cmp	r5, #0
 8018fd6:	bfb8      	it	lt
 8018fd8:	426d      	neglt	r5, r5
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	bfb8      	it	lt
 8018fde:	425b      	neglt	r3, r3
 8018fe0:	429d      	cmp	r5, r3
 8018fe2:	bfb8      	it	lt
 8018fe4:	461d      	movlt	r5, r3
 8018fe6:	88fb      	ldrh	r3, [r7, #6]
 8018fe8:	4403      	add	r3, r0
 8018fea:	116d      	asrs	r5, r5, #5
 8018fec:	b21b      	sxth	r3, r3
 8018fee:	3501      	adds	r5, #1
 8018ff0:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8018ff4:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8018ff8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	f100 0001 	add.w	r0, r0, #1
 8019002:	bfb8      	it	lt
 8019004:	425b      	neglt	r3, r3
 8019006:	2900      	cmp	r1, #0
 8019008:	ea4f 0060 	mov.w	r0, r0, asr #1
 801900c:	bfb8      	it	lt
 801900e:	4249      	neglt	r1, r1
 8019010:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8019014:	428b      	cmp	r3, r1
 8019016:	bfb8      	it	lt
 8019018:	460b      	movlt	r3, r1
 801901a:	115b      	asrs	r3, r3, #5
 801901c:	3301      	adds	r3, #1
 801901e:	435b      	muls	r3, r3
 8019020:	fb05 3505 	mla	r5, r5, r5, r3
 8019024:	2302      	movs	r3, #2
 8019026:	fb92 f2f3 	sdiv	r2, r2, r3
 801902a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801902c:	1a9a      	subs	r2, r3, r2
 801902e:	920a      	str	r2, [sp, #40]	; 0x28
 8019030:	f7ff fd12 	bl	8018a58 <_ZN8touchgfx7CWRUtil4sineEi>
 8019034:	a90b      	add	r1, sp, #44	; 0x2c
 8019036:	900b      	str	r0, [sp, #44]	; 0x2c
 8019038:	4630      	mov	r0, r6
 801903a:	f7ff fd01 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801903e:	2320      	movs	r3, #32
 8019040:	fb90 f0f3 	sdiv	r0, r0, r3
 8019044:	4340      	muls	r0, r0
 8019046:	42a8      	cmp	r0, r5
 8019048:	dd85      	ble.n	8018f56 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 801904a:	2401      	movs	r4, #1
 801904c:	e036      	b.n	80190bc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 801904e:	2102      	movs	r1, #2
 8019050:	fb93 f3f1 	sdiv	r3, r3, r1
 8019054:	4413      	add	r3, r2
 8019056:	9306      	str	r3, [sp, #24]
 8019058:	fb93 f3f1 	sdiv	r3, r3, r1
 801905c:	9305      	str	r3, [sp, #20]
 801905e:	e786      	b.n	8018f6e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8019060:	f107 0320 	add.w	r3, r7, #32
 8019064:	fb93 f7f5 	sdiv	r7, r3, r5
 8019068:	fb05 3717 	mls	r7, r5, r7, r3
 801906c:	1bea      	subs	r2, r5, r7
 801906e:	fb92 f7f5 	sdiv	r7, r2, r5
 8019072:	fb05 2717 	mls	r7, r5, r7, r2
 8019076:	441f      	add	r7, r3
 8019078:	e78d      	b.n	8018f96 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 801907a:	9907      	ldr	r1, [sp, #28]
 801907c:	428a      	cmp	r2, r1
 801907e:	dd09      	ble.n	8019094 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 8019080:	9a05      	ldr	r2, [sp, #20]
 8019082:	a90b      	add	r1, sp, #44	; 0x2c
 8019084:	4620      	mov	r0, r4
 8019086:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801908a:	aa04      	add	r2, sp, #16
 801908c:	930a      	str	r3, [sp, #40]	; 0x28
 801908e:	4633      	mov	r3, r6
 8019090:	f7ff fd96 	bl	8018bc0 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019094:	9a06      	ldr	r2, [sp, #24]
 8019096:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 801909a:	1ac3      	subs	r3, r0, r3
 801909c:	b992      	cbnz	r2, 80190c4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 801909e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80190a2:	da04      	bge.n	80190ae <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 80190a4:	a80b      	add	r0, sp, #44	; 0x2c
 80190a6:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80190aa:	f00d f801 	bl	80260b0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80190ae:	a80b      	add	r0, sp, #44	; 0x2c
 80190b0:	f00d f973 	bl	802639a <_ZN8touchgfx6Canvas6renderEv>
 80190b4:	4604      	mov	r4, r0
 80190b6:	a80b      	add	r0, sp, #44	; 0x2c
 80190b8:	f00d f9ac 	bl	8026414 <_ZN8touchgfx6CanvasD1Ev>
 80190bc:	4620      	mov	r0, r4
 80190be:	b03a      	add	sp, #232	; 0xe8
 80190c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190c4:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 80190c8:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80190cc:	ea4f 1747 	mov.w	r7, r7, lsl #5
 80190d0:	da2b      	bge.n	801912a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 80190d2:	f7ff fce3 	bl	8018a9c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80190d6:	4631      	mov	r1, r6
 80190d8:	900a      	str	r0, [sp, #40]	; 0x28
 80190da:	a805      	add	r0, sp, #20
 80190dc:	f7ff fcb0 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80190e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80190e2:	f10d 0818 	add.w	r8, sp, #24
 80190e6:	4418      	add	r0, r3
 80190e8:	9008      	str	r0, [sp, #32]
 80190ea:	9804      	ldr	r0, [sp, #16]
 80190ec:	f7ff fcf7 	bl	8018ade <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80190f0:	4631      	mov	r1, r6
 80190f2:	900a      	str	r0, [sp, #40]	; 0x28
 80190f4:	a805      	add	r0, sp, #20
 80190f6:	f7ff fca3 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80190fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80190fc:	1a18      	subs	r0, r3, r0
 80190fe:	9b04      	ldr	r3, [sp, #16]
 8019100:	443b      	add	r3, r7
 8019102:	9009      	str	r0, [sp, #36]	; 0x24
 8019104:	930a      	str	r3, [sp, #40]	; 0x28
 8019106:	9b04      	ldr	r3, [sp, #16]
 8019108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801910a:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 801910e:	4293      	cmp	r3, r2
 8019110:	dd0b      	ble.n	801912a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8019112:	ab09      	add	r3, sp, #36	; 0x24
 8019114:	aa08      	add	r2, sp, #32
 8019116:	a90b      	add	r1, sp, #44	; 0x2c
 8019118:	4620      	mov	r0, r4
 801911a:	e9cd 6800 	strd	r6, r8, [sp]
 801911e:	f7ff fd26 	bl	8018b6e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8019122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019124:	443b      	add	r3, r7
 8019126:	930a      	str	r3, [sp, #40]	; 0x28
 8019128:	e7ed      	b.n	8019106 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 801912a:	9a04      	ldr	r2, [sp, #16]
 801912c:	9b07      	ldr	r3, [sp, #28]
 801912e:	429a      	cmp	r2, r3
 8019130:	dd0a      	ble.n	8019148 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 8019132:	a90b      	add	r1, sp, #44	; 0x2c
 8019134:	4620      	mov	r0, r4
 8019136:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801913a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801913e:	aa04      	add	r2, sp, #16
 8019140:	930a      	str	r3, [sp, #40]	; 0x28
 8019142:	4633      	mov	r3, r6
 8019144:	f7ff fd3c 	bl	8018bc0 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019148:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801914c:	4642      	mov	r2, r8
 801914e:	9b03      	ldr	r3, [sp, #12]
 8019150:	eba8 0805 	sub.w	r8, r8, r5
 8019154:	429a      	cmp	r2, r3
 8019156:	db0c      	blt.n	8019172 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x254>
 8019158:	9207      	str	r2, [sp, #28]
 801915a:	a90b      	add	r1, sp, #44	; 0x2c
 801915c:	4620      	mov	r0, r4
 801915e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019162:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019166:	aa07      	add	r2, sp, #28
 8019168:	930a      	str	r3, [sp, #40]	; 0x28
 801916a:	4633      	mov	r3, r6
 801916c:	f7ff fd28 	bl	8018bc0 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019170:	e7ec      	b.n	801914c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 8019172:	9a07      	ldr	r2, [sp, #28]
 8019174:	4293      	cmp	r3, r2
 8019176:	da0a      	bge.n	801918e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x270>
 8019178:	a90b      	add	r1, sp, #44	; 0x2c
 801917a:	4620      	mov	r0, r4
 801917c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019180:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019184:	aa03      	add	r2, sp, #12
 8019186:	930a      	str	r3, [sp, #40]	; 0x28
 8019188:	4633      	mov	r3, r6
 801918a:	f7ff fd19 	bl	8018bc0 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801918e:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 8019192:	1a1b      	subs	r3, r3, r0
 8019194:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019198:	da89      	bge.n	80190ae <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 801919a:	f7ff fc7f 	bl	8018a9c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801919e:	4631      	mov	r1, r6
 80191a0:	900a      	str	r0, [sp, #40]	; 0x28
 80191a2:	a805      	add	r0, sp, #20
 80191a4:	f7ff fc4c 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80191a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80191aa:	ad06      	add	r5, sp, #24
 80191ac:	4418      	add	r0, r3
 80191ae:	9008      	str	r0, [sp, #32]
 80191b0:	9803      	ldr	r0, [sp, #12]
 80191b2:	f7ff fc94 	bl	8018ade <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80191b6:	4631      	mov	r1, r6
 80191b8:	900a      	str	r0, [sp, #40]	; 0x28
 80191ba:	a805      	add	r0, sp, #20
 80191bc:	f7ff fc40 	bl	8018a40 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80191c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80191c2:	1a18      	subs	r0, r3, r0
 80191c4:	9b03      	ldr	r3, [sp, #12]
 80191c6:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 80191ca:	9009      	str	r0, [sp, #36]	; 0x24
 80191cc:	443b      	add	r3, r7
 80191ce:	930a      	str	r3, [sp, #40]	; 0x28
 80191d0:	9a03      	ldr	r2, [sp, #12]
 80191d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191d4:	429a      	cmp	r2, r3
 80191d6:	f77f af6a 	ble.w	80190ae <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 80191da:	ab09      	add	r3, sp, #36	; 0x24
 80191dc:	aa08      	add	r2, sp, #32
 80191de:	a90b      	add	r1, sp, #44	; 0x2c
 80191e0:	4620      	mov	r0, r4
 80191e2:	e9cd 6500 	strd	r6, r5, [sp]
 80191e6:	f7ff fcc2 	bl	8018b6e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80191ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191ec:	443b      	add	r3, r7
 80191ee:	930a      	str	r3, [sp, #40]	; 0x28
 80191f0:	e7ee      	b.n	80191d0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

080191f2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 80191f2:	4413      	add	r3, r2
 80191f4:	7a42      	ldrb	r2, [r0, #9]
 80191f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80191fa:	4419      	add	r1, r3
 80191fc:	7a03      	ldrb	r3, [r0, #8]
 80191fe:	435a      	muls	r2, r3
 8019200:	1c53      	adds	r3, r2, #1
 8019202:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019206:	121b      	asrs	r3, r3, #8
 8019208:	2bff      	cmp	r3, #255	; 0xff
 801920a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801920c:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8019210:	d13e      	bne.n	8019290 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8019212:	4427      	add	r7, r4
 8019214:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019218:	3103      	adds	r1, #3
 801921a:	7d86      	ldrb	r6, [r0, #22]
 801921c:	2bff      	cmp	r3, #255	; 0xff
 801921e:	d10a      	bne.n	8019236 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8019220:	f801 6c03 	strb.w	r6, [r1, #-3]
 8019224:	7d43      	ldrb	r3, [r0, #21]
 8019226:	f801 3c02 	strb.w	r3, [r1, #-2]
 801922a:	7d03      	ldrb	r3, [r0, #20]
 801922c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8019230:	42a7      	cmp	r7, r4
 8019232:	d1ef      	bne.n	8019214 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8019234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019236:	b29a      	uxth	r2, r3
 8019238:	43db      	mvns	r3, r3
 801923a:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801923e:	fb16 f602 	smulbb	r6, r6, r2
 8019242:	b2db      	uxtb	r3, r3
 8019244:	fb05 6503 	mla	r5, r5, r3, r6
 8019248:	b2ad      	uxth	r5, r5
 801924a:	1c6e      	adds	r6, r5, #1
 801924c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019250:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8019254:	fb16 f603 	smulbb	r6, r6, r3
 8019258:	122d      	asrs	r5, r5, #8
 801925a:	f801 5c03 	strb.w	r5, [r1, #-3]
 801925e:	7d45      	ldrb	r5, [r0, #21]
 8019260:	fb05 6502 	mla	r5, r5, r2, r6
 8019264:	b2ad      	uxth	r5, r5
 8019266:	1c6e      	adds	r6, r5, #1
 8019268:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801926c:	122d      	asrs	r5, r5, #8
 801926e:	f801 5c02 	strb.w	r5, [r1, #-2]
 8019272:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019276:	7d06      	ldrb	r6, [r0, #20]
 8019278:	fb15 f303 	smulbb	r3, r5, r3
 801927c:	fb06 3202 	mla	r2, r6, r2, r3
 8019280:	b292      	uxth	r2, r2
 8019282:	1c53      	adds	r3, r2, #1
 8019284:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019288:	1212      	asrs	r2, r2, #8
 801928a:	f801 2c01 	strb.w	r2, [r1, #-1]
 801928e:	e7cf      	b.n	8019230 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8019290:	b2de      	uxtb	r6, r3
 8019292:	2b00      	cmp	r3, #0
 8019294:	d0ce      	beq.n	8019234 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8019296:	3103      	adds	r1, #3
 8019298:	4427      	add	r7, r4
 801929a:	f814 2b01 	ldrb.w	r2, [r4], #1
 801929e:	3103      	adds	r1, #3
 80192a0:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 80192a4:	fb02 f306 	mul.w	r3, r2, r6
 80192a8:	42bc      	cmp	r4, r7
 80192aa:	f103 0201 	add.w	r2, r3, #1
 80192ae:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80192b2:	ea4f 2222 	mov.w	r2, r2, asr #8
 80192b6:	b295      	uxth	r5, r2
 80192b8:	ea6f 0202 	mvn.w	r2, r2
 80192bc:	b2d3      	uxtb	r3, r2
 80192be:	7d82      	ldrb	r2, [r0, #22]
 80192c0:	fb1c fc03 	smulbb	ip, ip, r3
 80192c4:	fb02 c205 	mla	r2, r2, r5, ip
 80192c8:	b292      	uxth	r2, r2
 80192ca:	f102 0c01 	add.w	ip, r2, #1
 80192ce:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80192d2:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 80192d6:	fb1c fc03 	smulbb	ip, ip, r3
 80192da:	ea4f 2222 	mov.w	r2, r2, asr #8
 80192de:	f801 2c06 	strb.w	r2, [r1, #-6]
 80192e2:	7d42      	ldrb	r2, [r0, #21]
 80192e4:	fb02 c205 	mla	r2, r2, r5, ip
 80192e8:	b292      	uxth	r2, r2
 80192ea:	f102 0c01 	add.w	ip, r2, #1
 80192ee:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80192f2:	ea4f 2222 	mov.w	r2, r2, asr #8
 80192f6:	f801 2c05 	strb.w	r2, [r1, #-5]
 80192fa:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80192fe:	f890 c014 	ldrb.w	ip, [r0, #20]
 8019302:	fb12 f303 	smulbb	r3, r2, r3
 8019306:	fb0c 3305 	mla	r3, ip, r5, r3
 801930a:	b29b      	uxth	r3, r3
 801930c:	f103 0201 	add.w	r2, r3, #1
 8019310:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019314:	ea4f 2323 	mov.w	r3, r3, asr #8
 8019318:	f801 3c04 	strb.w	r3, [r1, #-4]
 801931c:	d1bd      	bne.n	801929a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801931e:	e789      	b.n	8019234 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08019320 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8019320:	b510      	push	{r4, lr}
 8019322:	7d04      	ldrb	r4, [r0, #20]
 8019324:	700c      	strb	r4, [r1, #0]
 8019326:	7d41      	ldrb	r1, [r0, #21]
 8019328:	7011      	strb	r1, [r2, #0]
 801932a:	7d82      	ldrb	r2, [r0, #22]
 801932c:	701a      	strb	r2, [r3, #0]
 801932e:	9b02      	ldr	r3, [sp, #8]
 8019330:	7a42      	ldrb	r2, [r0, #9]
 8019332:	2001      	movs	r0, #1
 8019334:	701a      	strb	r2, [r3, #0]
 8019336:	bd10      	pop	{r4, pc}

08019338 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8019338:	6281      	str	r1, [r0, #40]	; 0x28
 801933a:	4770      	bx	lr

0801933c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801933c:	b513      	push	{r0, r1, r4, lr}
 801933e:	6803      	ldr	r3, [r0, #0]
 8019340:	4604      	mov	r4, r0
 8019342:	4601      	mov	r1, r0
 8019344:	4668      	mov	r0, sp
 8019346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019348:	4798      	blx	r3
 801934a:	6823      	ldr	r3, [r4, #0]
 801934c:	4669      	mov	r1, sp
 801934e:	4620      	mov	r0, r4
 8019350:	691b      	ldr	r3, [r3, #16]
 8019352:	4798      	blx	r3
 8019354:	b002      	add	sp, #8
 8019356:	bd10      	pop	{r4, pc}

08019358 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8019358:	b510      	push	{r4, lr}
 801935a:	2200      	movs	r2, #0
 801935c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8019360:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8019364:	8002      	strh	r2, [r0, #0]
 8019366:	8042      	strh	r2, [r0, #2]
 8019368:	8084      	strh	r4, [r0, #4]
 801936a:	80c1      	strh	r1, [r0, #6]
 801936c:	bd10      	pop	{r4, pc}

0801936e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801936e:	2200      	movs	r2, #0
 8019370:	8002      	strh	r2, [r0, #0]
 8019372:	8042      	strh	r2, [r0, #2]
 8019374:	8082      	strh	r2, [r0, #4]
 8019376:	80c2      	strh	r2, [r0, #6]
 8019378:	4770      	bx	lr
	...

0801937c <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 801937c:	b508      	push	{r3, lr}
 801937e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019380:	b928      	cbnz	r0, 801938e <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8019382:	4b03      	ldr	r3, [pc, #12]	; (8019390 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8019384:	2123      	movs	r1, #35	; 0x23
 8019386:	4a03      	ldr	r2, [pc, #12]	; (8019394 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8019388:	4803      	ldr	r0, [pc, #12]	; (8019398 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801938a:	f00e f90f 	bl	80275ac <__assert_func>
 801938e:	bd08      	pop	{r3, pc}
 8019390:	0802b0dc 	.word	0x0802b0dc
 8019394:	0802b1c0 	.word	0x0802b1c0
 8019398:	0802b103 	.word	0x0802b103

0801939c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801939c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a0:	b089      	sub	sp, #36	; 0x24
 80193a2:	4604      	mov	r4, r0
 80193a4:	6808      	ldr	r0, [r1, #0]
 80193a6:	f04f 0a00 	mov.w	sl, #0
 80193aa:	6849      	ldr	r1, [r1, #4]
 80193ac:	ab02      	add	r3, sp, #8
 80193ae:	f04f 0b01 	mov.w	fp, #1
 80193b2:	c303      	stmia	r3!, {r0, r1}
 80193b4:	4b3f      	ldr	r3, [pc, #252]	; (80194b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 80193b6:	4621      	mov	r1, r4
 80193b8:	a804      	add	r0, sp, #16
 80193ba:	781b      	ldrb	r3, [r3, #0]
 80193bc:	2b01      	cmp	r3, #1
 80193be:	6823      	ldr	r3, [r4, #0]
 80193c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193c2:	bf1f      	itttt	ne
 80193c4:	f10d 0906 	addne.w	r9, sp, #6
 80193c8:	ae03      	addne	r6, sp, #12
 80193ca:	f10d 050e 	addne.w	r5, sp, #14
 80193ce:	f10d 080a 	addne.w	r8, sp, #10
 80193d2:	bf01      	itttt	eq
 80193d4:	f10d 090e 	addeq.w	r9, sp, #14
 80193d8:	f10d 0606 	addeq.w	r6, sp, #6
 80193dc:	ad03      	addeq	r5, sp, #12
 80193de:	f10d 0808 	addeq.w	r8, sp, #8
 80193e2:	4798      	blx	r3
 80193e4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80193e8:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d056      	beq.n	801949e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80193f0:	4293      	cmp	r3, r2
 80193f2:	bfa8      	it	ge
 80193f4:	4613      	movge	r3, r2
 80193f6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80193fa:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80193fe:	2f00      	cmp	r7, #0
 8019400:	dd34      	ble.n	801946c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8019402:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8019406:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801940a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801940e:	4484      	add	ip, r0
 8019410:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019414:	f9b6 e000 	ldrsh.w	lr, [r6]
 8019418:	fa0f fc8c 	sxth.w	ip, ip
 801941c:	f9b9 1000 	ldrsh.w	r1, [r9]
 8019420:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019424:	4562      	cmp	r2, ip
 8019426:	f8ad 301a 	strh.w	r3, [sp, #26]
 801942a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801942e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8019432:	da29      	bge.n	8019488 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019434:	4472      	add	r2, lr
 8019436:	b212      	sxth	r2, r2
 8019438:	4290      	cmp	r0, r2
 801943a:	da25      	bge.n	8019488 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801943c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8019440:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019444:	4402      	add	r2, r0
 8019446:	b212      	sxth	r2, r2
 8019448:	4293      	cmp	r3, r2
 801944a:	da1d      	bge.n	8019488 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801944c:	440b      	add	r3, r1
 801944e:	b21b      	sxth	r3, r3
 8019450:	4298      	cmp	r0, r3
 8019452:	da19      	bge.n	8019488 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019454:	6823      	ldr	r3, [r4, #0]
 8019456:	a906      	add	r1, sp, #24
 8019458:	4620      	mov	r0, r4
 801945a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801945c:	4798      	blx	r3
 801945e:	b998      	cbnz	r0, 8019488 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019460:	107f      	asrs	r7, r7, #1
 8019462:	f04f 0a01 	mov.w	sl, #1
 8019466:	f8ad 7006 	strh.w	r7, [sp, #6]
 801946a:	e7c6      	b.n	80193fa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801946c:	d10c      	bne.n	8019488 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801946e:	f8ad b006 	strh.w	fp, [sp, #6]
 8019472:	f8b8 2000 	ldrh.w	r2, [r8]
 8019476:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801947a:	440a      	add	r2, r1
 801947c:	f8a8 2000 	strh.w	r2, [r8]
 8019480:	882b      	ldrh	r3, [r5, #0]
 8019482:	1a5b      	subs	r3, r3, r1
 8019484:	802b      	strh	r3, [r5, #0]
 8019486:	e7ad      	b.n	80193e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019488:	f1ba 0f00 	cmp.w	sl, #0
 801948c:	d0f1      	beq.n	8019472 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801948e:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8019492:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019496:	429a      	cmp	r2, r3
 8019498:	bf08      	it	eq
 801949a:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801949c:	e7e9      	b.n	8019472 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801949e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80194a2:	429a      	cmp	r2, r3
 80194a4:	bf04      	itt	eq
 80194a6:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 80194aa:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 80194ac:	b009      	add	sp, #36	; 0x24
 80194ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194b2:	bf00      	nop
 80194b4:	2000b30c 	.word	0x2000b30c

080194b8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80194b8:	2200      	movs	r2, #0
 80194ba:	2101      	movs	r1, #1
 80194bc:	8082      	strh	r2, [r0, #4]
 80194be:	80c2      	strh	r2, [r0, #6]
 80194c0:	8102      	strh	r2, [r0, #8]
 80194c2:	8142      	strh	r2, [r0, #10]
 80194c4:	8182      	strh	r2, [r0, #12]
 80194c6:	81c2      	strh	r2, [r0, #14]
 80194c8:	8202      	strh	r2, [r0, #16]
 80194ca:	8242      	strh	r2, [r0, #18]
 80194cc:	61c2      	str	r2, [r0, #28]
 80194ce:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80194d2:	6282      	str	r2, [r0, #40]	; 0x28
 80194d4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80194d8:	4905      	ldr	r1, [pc, #20]	; (80194f0 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 80194da:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80194de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80194e2:	6001      	str	r1, [r0, #0]
 80194e4:	8582      	strh	r2, [r0, #44]	; 0x2c
 80194e6:	22ff      	movs	r2, #255	; 0xff
 80194e8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80194ec:	4770      	bx	lr
 80194ee:	bf00      	nop
 80194f0:	0802b148 	.word	0x0802b148

080194f4 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80194f4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80194f8:	4770      	bx	lr

080194fa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80194fa:	b570      	push	{r4, r5, r6, lr}
 80194fc:	790b      	ldrb	r3, [r1, #4]
 80194fe:	4604      	mov	r4, r0
 8019500:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019504:	460e      	mov	r6, r1
 8019506:	2b00      	cmp	r3, #0
 8019508:	bf0c      	ite	eq
 801950a:	2301      	moveq	r3, #1
 801950c:	2300      	movne	r3, #0
 801950e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8019512:	d110      	bne.n	8019536 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019514:	b185      	cbz	r5, 8019538 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 8019516:	7933      	ldrb	r3, [r6, #4]
 8019518:	2b01      	cmp	r3, #1
 801951a:	d113      	bne.n	8019544 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801951c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801951e:	b188      	cbz	r0, 8019544 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8019520:	6803      	ldr	r3, [r0, #0]
 8019522:	68db      	ldr	r3, [r3, #12]
 8019524:	4798      	blx	r3
 8019526:	b168      	cbz	r0, 8019544 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8019528:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801952a:	4621      	mov	r1, r4
 801952c:	6803      	ldr	r3, [r0, #0]
 801952e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019532:	689b      	ldr	r3, [r3, #8]
 8019534:	4718      	bx	r3
 8019536:	b12d      	cbz	r5, 8019544 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8019538:	6823      	ldr	r3, [r4, #0]
 801953a:	4620      	mov	r0, r4
 801953c:	695b      	ldr	r3, [r3, #20]
 801953e:	4798      	blx	r3
 8019540:	2d00      	cmp	r5, #0
 8019542:	d1e8      	bne.n	8019516 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8019544:	bd70      	pop	{r4, r5, r6, pc}

08019546 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8019546:	6803      	ldr	r3, [r0, #0]
 8019548:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801954c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801954e:	4718      	bx	r3

08019550 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8019550:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019554:	2bff      	cmp	r3, #255	; 0xff
 8019556:	b510      	push	{r4, lr}
 8019558:	d104      	bne.n	8019564 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801955a:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801955c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019560:	429a      	cmp	r2, r3
 8019562:	d105      	bne.n	8019570 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8019564:	2300      	movs	r3, #0
 8019566:	8003      	strh	r3, [r0, #0]
 8019568:	8043      	strh	r3, [r0, #2]
 801956a:	8083      	strh	r3, [r0, #4]
 801956c:	80c3      	strh	r3, [r0, #6]
 801956e:	bd10      	pop	{r4, pc}
 8019570:	2300      	movs	r3, #0
 8019572:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8019576:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801957a:	8003      	strh	r3, [r0, #0]
 801957c:	8043      	strh	r3, [r0, #2]
 801957e:	8084      	strh	r4, [r0, #4]
 8019580:	80c2      	strh	r2, [r0, #6]
 8019582:	e7f4      	b.n	801956e <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08019584 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8019584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019588:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801958c:	b087      	sub	sp, #28
 801958e:	4604      	mov	r4, r0
 8019590:	4689      	mov	r9, r1
 8019592:	b363      	cbz	r3, 80195ee <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8019594:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8019596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801959a:	429a      	cmp	r2, r3
 801959c:	d027      	beq.n	80195ee <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801959e:	ad06      	add	r5, sp, #24
 80195a0:	2700      	movs	r7, #0
 80195a2:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 80195a6:	4628      	mov	r0, r5
 80195a8:	f004 f9b2 	bl	801d910 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80195ac:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80195b0:	a904      	add	r1, sp, #16
 80195b2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80195b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80195ba:	4620      	mov	r0, r4
 80195bc:	6823      	ldr	r3, [r4, #0]
 80195be:	9704      	str	r7, [sp, #16]
 80195c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195c2:	4798      	blx	r3
 80195c4:	f7f6 fb24 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 80195c8:	6803      	ldr	r3, [r0, #0]
 80195ca:	4606      	mov	r6, r0
 80195cc:	4628      	mov	r0, r5
 80195ce:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80195d2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80195d4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80195d8:	f004 fa68 	bl	801daac <_ZNK8touchgfx6Bitmap7getDataEv>
 80195dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80195e0:	4601      	mov	r1, r0
 80195e2:	9701      	str	r7, [sp, #4]
 80195e4:	aa04      	add	r2, sp, #16
 80195e6:	9300      	str	r3, [sp, #0]
 80195e8:	4630      	mov	r0, r6
 80195ea:	464b      	mov	r3, r9
 80195ec:	47c0      	blx	r8
 80195ee:	b007      	add	sp, #28
 80195f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080195f4 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 80195f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80195f6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80195fa:	460d      	mov	r5, r1
 80195fc:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8019600:	2100      	movs	r1, #0
 8019602:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019606:	4604      	mov	r4, r0
 8019608:	6803      	ldr	r3, [r0, #0]
 801960a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801960e:	6a1b      	ldr	r3, [r3, #32]
 8019610:	9100      	str	r1, [sp, #0]
 8019612:	4669      	mov	r1, sp
 8019614:	4798      	blx	r3
 8019616:	4621      	mov	r1, r4
 8019618:	a802      	add	r0, sp, #8
 801961a:	f002 fb12 	bl	801bc42 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801961e:	f7f6 faf7 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8019622:	6803      	ldr	r3, [r0, #0]
 8019624:	aa02      	add	r2, sp, #8
 8019626:	4669      	mov	r1, sp
 8019628:	695e      	ldr	r6, [r3, #20]
 801962a:	462b      	mov	r3, r5
 801962c:	47b0      	blx	r6
 801962e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019632:	2800      	cmp	r0, #0
 8019634:	bf08      	it	eq
 8019636:	461d      	moveq	r5, r3
 8019638:	84e5      	strh	r5, [r4, #38]	; 0x26
 801963a:	b004      	add	sp, #16
 801963c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019640 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8019640:	2200      	movs	r2, #0
 8019642:	8082      	strh	r2, [r0, #4]
 8019644:	80c2      	strh	r2, [r0, #6]
 8019646:	8102      	strh	r2, [r0, #8]
 8019648:	8142      	strh	r2, [r0, #10]
 801964a:	8182      	strh	r2, [r0, #12]
 801964c:	81c2      	strh	r2, [r0, #14]
 801964e:	8202      	strh	r2, [r0, #16]
 8019650:	8242      	strh	r2, [r0, #18]
 8019652:	61c2      	str	r2, [r0, #28]
 8019654:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8019658:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801965c:	2201      	movs	r2, #1
 801965e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8019662:	4a04      	ldr	r2, [pc, #16]	; (8019674 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 8019664:	6002      	str	r2, [r0, #0]
 8019666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801966a:	84c2      	strh	r2, [r0, #38]	; 0x26
 801966c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8019670:	4770      	bx	lr
 8019672:	bf00      	nop
 8019674:	0802b284 	.word	0x0802b284

08019678 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8019678:	2200      	movs	r2, #0
 801967a:	8002      	strh	r2, [r0, #0]
 801967c:	8042      	strh	r2, [r0, #2]
 801967e:	8082      	strh	r2, [r0, #4]
 8019680:	80c2      	strh	r2, [r0, #6]
 8019682:	4770      	bx	lr

08019684 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8019684:	b570      	push	{r4, r5, r6, lr}
 8019686:	6803      	ldr	r3, [r0, #0]
 8019688:	4604      	mov	r4, r0
 801968a:	4615      	mov	r5, r2
 801968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801968e:	4798      	blx	r3
 8019690:	6823      	ldr	r3, [r4, #0]
 8019692:	4629      	mov	r1, r5
 8019694:	4620      	mov	r0, r4
 8019696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801969c:	4718      	bx	r3
	...

080196a0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80196a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80196a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80196a6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80196a8:	4299      	cmp	r1, r3
 80196aa:	d029      	beq.n	8019700 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 80196ac:	4b15      	ldr	r3, [pc, #84]	; (8019704 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	b92b      	cbnz	r3, 80196be <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 80196b2:	4b15      	ldr	r3, [pc, #84]	; (8019708 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80196b4:	21b1      	movs	r1, #177	; 0xb1
 80196b6:	4a15      	ldr	r2, [pc, #84]	; (801970c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80196b8:	4815      	ldr	r0, [pc, #84]	; (8019710 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80196ba:	f00d ff77 	bl	80275ac <__assert_func>
 80196be:	4a15      	ldr	r2, [pc, #84]	; (8019714 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80196c0:	8812      	ldrh	r2, [r2, #0]
 80196c2:	428a      	cmp	r2, r1
 80196c4:	d803      	bhi.n	80196ce <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80196c6:	4b14      	ldr	r3, [pc, #80]	; (8019718 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80196c8:	21b2      	movs	r1, #178	; 0xb2
 80196ca:	4a10      	ldr	r2, [pc, #64]	; (801970c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80196cc:	e7f4      	b.n	80196b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80196ce:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80196d2:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80196d6:	4b11      	ldr	r3, [pc, #68]	; (801971c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80196d8:	7854      	ldrb	r4, [r2, #1]
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80196e0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80196e4:	682b      	ldr	r3, [r5, #0]
 80196e6:	69de      	ldr	r6, [r3, #28]
 80196e8:	4b0d      	ldr	r3, [pc, #52]	; (8019720 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80196ea:	6818      	ldr	r0, [r3, #0]
 80196ec:	f7fb faa4 	bl	8014c38 <_ZNK8touchgfx5Texts7getTextEt>
 80196f0:	2300      	movs	r3, #0
 80196f2:	4602      	mov	r2, r0
 80196f4:	4621      	mov	r1, r4
 80196f6:	9300      	str	r3, [sp, #0]
 80196f8:	4628      	mov	r0, r5
 80196fa:	47b0      	blx	r6
 80196fc:	b002      	add	sp, #8
 80196fe:	bd70      	pop	{r4, r5, r6, pc}
 8019700:	2000      	movs	r0, #0
 8019702:	e7fb      	b.n	80196fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8019704:	2000b3a4 	.word	0x2000b3a4
 8019708:	0802b2ec 	.word	0x0802b2ec
 801970c:	0802b428 	.word	0x0802b428
 8019710:	0802b32e 	.word	0x0802b32e
 8019714:	2000b3a8 	.word	0x2000b3a8
 8019718:	0802b357 	.word	0x0802b357
 801971c:	2000b3ac 	.word	0x2000b3ac
 8019720:	2000b3b0 	.word	0x2000b3b0

08019724 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8019724:	b570      	push	{r4, r5, r6, lr}
 8019726:	6803      	ldr	r3, [r0, #0]
 8019728:	4604      	mov	r4, r0
 801972a:	b28d      	uxth	r5, r1
 801972c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801972e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8019730:	4b10      	ldr	r3, [pc, #64]	; (8019774 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	b92b      	cbnz	r3, 8019742 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8019736:	4b10      	ldr	r3, [pc, #64]	; (8019778 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8019738:	21b1      	movs	r1, #177	; 0xb1
 801973a:	4a10      	ldr	r2, [pc, #64]	; (801977c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801973c:	4810      	ldr	r0, [pc, #64]	; (8019780 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801973e:	f00d ff35 	bl	80275ac <__assert_func>
 8019742:	4910      	ldr	r1, [pc, #64]	; (8019784 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8019744:	8809      	ldrh	r1, [r1, #0]
 8019746:	4291      	cmp	r1, r2
 8019748:	d803      	bhi.n	8019752 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801974a:	4b0f      	ldr	r3, [pc, #60]	; (8019788 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801974c:	21b2      	movs	r1, #178	; 0xb2
 801974e:	4a0b      	ldr	r2, [pc, #44]	; (801977c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019750:	e7f4      	b.n	801973c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8019752:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8019756:	4b0d      	ldr	r3, [pc, #52]	; (801978c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801975e:	6803      	ldr	r3, [r0, #0]
 8019760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019762:	4798      	blx	r3
 8019764:	1a29      	subs	r1, r5, r0
 8019766:	4633      	mov	r3, r6
 8019768:	4620      	mov	r0, r4
 801976a:	b209      	sxth	r1, r1
 801976c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019770:	4718      	bx	r3
 8019772:	bf00      	nop
 8019774:	2000b3a4 	.word	0x2000b3a4
 8019778:	0802b2ec 	.word	0x0802b2ec
 801977c:	0802b428 	.word	0x0802b428
 8019780:	0802b32e 	.word	0x0802b32e
 8019784:	2000b3a8 	.word	0x2000b3a8
 8019788:	0802b357 	.word	0x0802b357
 801978c:	2000b3ac 	.word	0x2000b3ac

08019790 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019798:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801979a:	b08c      	sub	sp, #48	; 0x30
 801979c:	4604      	mov	r4, r0
 801979e:	4293      	cmp	r3, r2
 80197a0:	4688      	mov	r8, r1
 80197a2:	d05f      	beq.n	8019864 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80197a4:	4e31      	ldr	r6, [pc, #196]	; (801986c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 80197a6:	6832      	ldr	r2, [r6, #0]
 80197a8:	b92a      	cbnz	r2, 80197b6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 80197aa:	4b31      	ldr	r3, [pc, #196]	; (8019870 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 80197ac:	21b1      	movs	r1, #177	; 0xb1
 80197ae:	4a31      	ldr	r2, [pc, #196]	; (8019874 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80197b0:	4831      	ldr	r0, [pc, #196]	; (8019878 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 80197b2:	f00d fefb 	bl	80275ac <__assert_func>
 80197b6:	4d31      	ldr	r5, [pc, #196]	; (801987c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 80197b8:	8829      	ldrh	r1, [r5, #0]
 80197ba:	4299      	cmp	r1, r3
 80197bc:	d803      	bhi.n	80197c6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 80197be:	4b30      	ldr	r3, [pc, #192]	; (8019880 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 80197c0:	21b2      	movs	r1, #178	; 0xb2
 80197c2:	4a2c      	ldr	r2, [pc, #176]	; (8019874 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80197c4:	e7f4      	b.n	80197b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 80197c6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80197ca:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80197ce:	4b2d      	ldr	r3, [pc, #180]	; (8019884 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80197d6:	2a00      	cmp	r2, #0
 80197d8:	d044      	beq.n	8019864 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80197da:	784b      	ldrb	r3, [r1, #1]
 80197dc:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 80197e0:	f3c3 0901 	ubfx	r9, r3, #0, #2
 80197e4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80197e8:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 80197ec:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80197f0:	4b25      	ldr	r3, [pc, #148]	; (8019888 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 80197f2:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 80197fc:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8019800:	9207      	str	r2, [sp, #28]
 8019802:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019804:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019808:	9009      	str	r0, [sp, #36]	; 0x24
 801980a:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801980e:	f88d 9020 	strb.w	r9, [sp, #32]
 8019812:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8019816:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801981a:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801981e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8019822:	b10a      	cbz	r2, 8019828 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8019824:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8019826:	b907      	cbnz	r7, 801982a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8019828:	689f      	ldr	r7, [r3, #8]
 801982a:	f10d 0914 	add.w	r9, sp, #20
 801982e:	4621      	mov	r1, r4
 8019830:	4648      	mov	r0, r9
 8019832:	f002 fa06 	bl	801bc42 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019836:	6833      	ldr	r3, [r6, #0]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d0b6      	beq.n	80197aa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801983c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801983e:	882b      	ldrh	r3, [r5, #0]
 8019840:	428b      	cmp	r3, r1
 8019842:	d9bc      	bls.n	80197be <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8019844:	4b11      	ldr	r3, [pc, #68]	; (801988c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8019846:	6818      	ldr	r0, [r3, #0]
 8019848:	f7fb f9f6 	bl	8014c38 <_ZNK8touchgfx5Texts7getTextEt>
 801984c:	2300      	movs	r3, #0
 801984e:	9001      	str	r0, [sp, #4]
 8019850:	4638      	mov	r0, r7
 8019852:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019856:	ab07      	add	r3, sp, #28
 8019858:	9300      	str	r3, [sp, #0]
 801985a:	4643      	mov	r3, r8
 801985c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8019860:	f7fb f97b 	bl	8014b5a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019864:	b00c      	add	sp, #48	; 0x30
 8019866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801986a:	bf00      	nop
 801986c:	2000b3a4 	.word	0x2000b3a4
 8019870:	0802b2ec 	.word	0x0802b2ec
 8019874:	0802b428 	.word	0x0802b428
 8019878:	0802b32e 	.word	0x0802b32e
 801987c:	2000b3a8 	.word	0x2000b3a8
 8019880:	0802b357 	.word	0x0802b357
 8019884:	2000b3ac 	.word	0x2000b3ac
 8019888:	2000b314 	.word	0x2000b314
 801988c:	2000b3b0 	.word	0x2000b3b0

08019890 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8019890:	b40e      	push	{r1, r2, r3}
 8019892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801989a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801989c:	b09b      	sub	sp, #108	; 0x6c
 801989e:	4604      	mov	r4, r0
 80198a0:	4293      	cmp	r3, r2
 80198a2:	d061      	beq.n	8019968 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 80198a4:	aa24      	add	r2, sp, #144	; 0x90
 80198a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801997c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 80198aa:	9203      	str	r2, [sp, #12]
 80198ac:	f8da 2000 	ldr.w	r2, [sl]
 80198b0:	b92a      	cbnz	r2, 80198be <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 80198b2:	4b2e      	ldr	r3, [pc, #184]	; (801996c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 80198b4:	21b1      	movs	r1, #177	; 0xb1
 80198b6:	4a2e      	ldr	r2, [pc, #184]	; (8019970 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 80198b8:	482e      	ldr	r0, [pc, #184]	; (8019974 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 80198ba:	f00d fe77 	bl	80275ac <__assert_func>
 80198be:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8019980 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 80198c2:	f8b8 1000 	ldrh.w	r1, [r8]
 80198c6:	4299      	cmp	r1, r3
 80198c8:	d803      	bhi.n	80198d2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 80198ca:	4b2b      	ldr	r3, [pc, #172]	; (8019978 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 80198cc:	21b2      	movs	r1, #178	; 0xb2
 80198ce:	4a28      	ldr	r2, [pc, #160]	; (8019970 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 80198d0:	e7f2      	b.n	80198b8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 80198d2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8019984 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 80198d6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80198da:	f8d9 3000 	ldr.w	r3, [r9]
 80198de:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80198e2:	683b      	ldr	r3, [r7, #0]
 80198e4:	4638      	mov	r0, r7
 80198e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80198e8:	4798      	blx	r3
 80198ea:	4606      	mov	r6, r0
 80198ec:	b205      	sxth	r5, r0
 80198ee:	a804      	add	r0, sp, #16
 80198f0:	f002 fe49 	bl	801c586 <_ZN8touchgfx12TextProviderC1Ev>
 80198f4:	683b      	ldr	r3, [r7, #0]
 80198f6:	4638      	mov	r0, r7
 80198f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198fa:	4798      	blx	r3
 80198fc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80198fe:	4603      	mov	r3, r0
 8019900:	9a03      	ldr	r2, [sp, #12]
 8019902:	a804      	add	r0, sp, #16
 8019904:	f002 fe84 	bl	801c610 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019908:	f8da 3000 	ldr.w	r3, [sl]
 801990c:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8019910:	2b00      	cmp	r3, #0
 8019912:	d0ce      	beq.n	80198b2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8019914:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019916:	f8b8 0000 	ldrh.w	r0, [r8]
 801991a:	4290      	cmp	r0, r2
 801991c:	d9d5      	bls.n	80198ca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801991e:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8019922:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8019926:	f8d9 3000 	ldr.w	r3, [r9]
 801992a:	787a      	ldrb	r2, [r7, #1]
 801992c:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8019930:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019934:	9700      	str	r7, [sp, #0]
 8019936:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801993a:	a804      	add	r0, sp, #16
 801993c:	f001 f8ac 	bl	801aa98 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8019940:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8019944:	b203      	sxth	r3, r0
 8019946:	18a9      	adds	r1, r5, r2
 8019948:	2900      	cmp	r1, #0
 801994a:	dd0b      	ble.n	8019964 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 801994c:	3b01      	subs	r3, #1
 801994e:	fb13 f302 	smulbb	r3, r3, r2
 8019952:	fb16 3300 	smlabb	r3, r6, r0, r3
 8019956:	b21d      	sxth	r5, r3
 8019958:	4628      	mov	r0, r5
 801995a:	b01b      	add	sp, #108	; 0x6c
 801995c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019960:	b003      	add	sp, #12
 8019962:	4770      	bx	lr
 8019964:	2b00      	cmp	r3, #0
 8019966:	dcf7      	bgt.n	8019958 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8019968:	2500      	movs	r5, #0
 801996a:	e7f5      	b.n	8019958 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801996c:	0802b2ec 	.word	0x0802b2ec
 8019970:	0802b428 	.word	0x0802b428
 8019974:	0802b32e 	.word	0x0802b32e
 8019978:	0802b357 	.word	0x0802b357
 801997c:	2000b3a4 	.word	0x2000b3a4
 8019980:	2000b3a8 	.word	0x2000b3a8
 8019984:	2000b3ac 	.word	0x2000b3ac

08019988 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8019988:	b570      	push	{r4, r5, r6, lr}
 801998a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801998e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019990:	4604      	mov	r4, r0
 8019992:	4299      	cmp	r1, r3
 8019994:	d01e      	beq.n	80199d4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8019996:	6803      	ldr	r3, [r0, #0]
 8019998:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801999a:	4b0f      	ldr	r3, [pc, #60]	; (80199d8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	b92b      	cbnz	r3, 80199ac <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 80199a0:	4b0e      	ldr	r3, [pc, #56]	; (80199dc <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 80199a2:	21b1      	movs	r1, #177	; 0xb1
 80199a4:	4a0e      	ldr	r2, [pc, #56]	; (80199e0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80199a6:	480f      	ldr	r0, [pc, #60]	; (80199e4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 80199a8:	f00d fe00 	bl	80275ac <__assert_func>
 80199ac:	4b0e      	ldr	r3, [pc, #56]	; (80199e8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 80199ae:	881b      	ldrh	r3, [r3, #0]
 80199b0:	428b      	cmp	r3, r1
 80199b2:	d803      	bhi.n	80199bc <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 80199b4:	4b0d      	ldr	r3, [pc, #52]	; (80199ec <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 80199b6:	21b2      	movs	r1, #178	; 0xb2
 80199b8:	4a09      	ldr	r2, [pc, #36]	; (80199e0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80199ba:	e7f4      	b.n	80199a6 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 80199bc:	4b0c      	ldr	r3, [pc, #48]	; (80199f0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 80199be:	6818      	ldr	r0, [r3, #0]
 80199c0:	f7fb f93a 	bl	8014c38 <_ZNK8touchgfx5Texts7getTextEt>
 80199c4:	2300      	movs	r3, #0
 80199c6:	4601      	mov	r1, r0
 80199c8:	46ac      	mov	ip, r5
 80199ca:	4620      	mov	r0, r4
 80199cc:	461a      	mov	r2, r3
 80199ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80199d2:	4760      	bx	ip
 80199d4:	2000      	movs	r0, #0
 80199d6:	bd70      	pop	{r4, r5, r6, pc}
 80199d8:	2000b3a4 	.word	0x2000b3a4
 80199dc:	0802b2ec 	.word	0x0802b2ec
 80199e0:	0802b428 	.word	0x0802b428
 80199e4:	0802b32e 	.word	0x0802b32e
 80199e8:	2000b3a8 	.word	0x2000b3a8
 80199ec:	0802b357 	.word	0x0802b357
 80199f0:	2000b3b0 	.word	0x2000b3b0

080199f4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80199f4:	b570      	push	{r4, r5, r6, lr}
 80199f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80199fa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80199fc:	4604      	mov	r4, r0
 80199fe:	429a      	cmp	r2, r3
 8019a00:	d021      	beq.n	8019a46 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8019a02:	6803      	ldr	r3, [r0, #0]
 8019a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a06:	4798      	blx	r3
 8019a08:	6823      	ldr	r3, [r4, #0]
 8019a0a:	4605      	mov	r5, r0
 8019a0c:	4620      	mov	r0, r4
 8019a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019a10:	4798      	blx	r3
 8019a12:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019a16:	4606      	mov	r6, r0
 8019a18:	b22d      	sxth	r5, r5
 8019a1a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019a1e:	6823      	ldr	r3, [r4, #0]
 8019a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a22:	d109      	bne.n	8019a38 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8019a24:	4629      	mov	r1, r5
 8019a26:	4620      	mov	r0, r4
 8019a28:	4798      	blx	r3
 8019a2a:	6823      	ldr	r3, [r4, #0]
 8019a2c:	4631      	mov	r1, r6
 8019a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a30:	4620      	mov	r0, r4
 8019a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a36:	4718      	bx	r3
 8019a38:	4601      	mov	r1, r0
 8019a3a:	4620      	mov	r0, r4
 8019a3c:	4798      	blx	r3
 8019a3e:	6823      	ldr	r3, [r4, #0]
 8019a40:	4629      	mov	r1, r5
 8019a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a44:	e7f4      	b.n	8019a30 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8019a46:	bd70      	pop	{r4, r5, r6, pc}

08019a48 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8019a48:	888a      	ldrh	r2, [r1, #4]
 8019a4a:	8582      	strh	r2, [r0, #44]	; 0x2c
 8019a4c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8019a50:	b922      	cbnz	r2, 8019a5c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8019a52:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019a56:	b90b      	cbnz	r3, 8019a5c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8019a58:	f7ff bfcc 	b.w	80199f4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8019a5c:	4770      	bx	lr

08019a5e <_ZNK8touchgfx3Box12getSolidRectEv>:
 8019a5e:	2300      	movs	r3, #0
 8019a60:	8003      	strh	r3, [r0, #0]
 8019a62:	8043      	strh	r3, [r0, #2]
 8019a64:	8083      	strh	r3, [r0, #4]
 8019a66:	80c3      	strh	r3, [r0, #6]
 8019a68:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8019a6c:	b91b      	cbnz	r3, 8019a76 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8019a6e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8019a72:	2bff      	cmp	r3, #255	; 0xff
 8019a74:	d103      	bne.n	8019a7e <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8019a76:	890b      	ldrh	r3, [r1, #8]
 8019a78:	8083      	strh	r3, [r0, #4]
 8019a7a:	894b      	ldrh	r3, [r1, #10]
 8019a7c:	80c3      	strh	r3, [r0, #6]
 8019a7e:	4770      	bx	lr

08019a80 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a82:	4604      	mov	r4, r0
 8019a84:	466b      	mov	r3, sp
 8019a86:	6808      	ldr	r0, [r1, #0]
 8019a88:	6849      	ldr	r1, [r1, #4]
 8019a8a:	c303      	stmia	r3!, {r0, r1}
 8019a8c:	6823      	ldr	r3, [r4, #0]
 8019a8e:	4669      	mov	r1, sp
 8019a90:	4620      	mov	r0, r4
 8019a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a94:	4798      	blx	r3
 8019a96:	4b08      	ldr	r3, [pc, #32]	; (8019ab8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019a9e:	b10a      	cbz	r2, 8019aa4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019aa0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019aa2:	b900      	cbnz	r0, 8019aa6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8019aa4:	6898      	ldr	r0, [r3, #8]
 8019aa6:	6803      	ldr	r3, [r0, #0]
 8019aa8:	4669      	mov	r1, sp
 8019aaa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8019aac:	699d      	ldr	r5, [r3, #24]
 8019aae:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8019ab2:	47a8      	blx	r5
 8019ab4:	b003      	add	sp, #12
 8019ab6:	bd30      	pop	{r4, r5, pc}
 8019ab8:	2000b314 	.word	0x2000b314

08019abc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8019abc:	b538      	push	{r3, r4, r5, lr}
 8019abe:	880b      	ldrh	r3, [r1, #0]
 8019ac0:	4605      	mov	r5, r0
 8019ac2:	4604      	mov	r4, r0
 8019ac4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8019ac6:	8813      	ldrh	r3, [r2, #0]
 8019ac8:	f825 3f30 	strh.w	r3, [r5, #48]!
 8019acc:	4628      	mov	r0, r5
 8019ace:	f003 ff1f 	bl	801d910 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019ad2:	8120      	strh	r0, [r4, #8]
 8019ad4:	4628      	mov	r0, r5
 8019ad6:	f003 ff55 	bl	801d984 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019ada:	8160      	strh	r0, [r4, #10]
 8019adc:	bd38      	pop	{r3, r4, r5, pc}

08019ade <_ZNK8touchgfx6Button12getSolidRectEv>:
 8019ade:	b510      	push	{r4, lr}
 8019ae0:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8019ae4:	4604      	mov	r4, r0
 8019ae6:	2bff      	cmp	r3, #255	; 0xff
 8019ae8:	d006      	beq.n	8019af8 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8019aea:	2300      	movs	r3, #0
 8019aec:	8003      	strh	r3, [r0, #0]
 8019aee:	8043      	strh	r3, [r0, #2]
 8019af0:	8083      	strh	r3, [r0, #4]
 8019af2:	80c3      	strh	r3, [r0, #6]
 8019af4:	4620      	mov	r0, r4
 8019af6:	bd10      	pop	{r4, pc}
 8019af8:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8019afc:	b11b      	cbz	r3, 8019b06 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8019afe:	3130      	adds	r1, #48	; 0x30
 8019b00:	f003 ff7a 	bl	801d9f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019b04:	e7f6      	b.n	8019af4 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8019b06:	312e      	adds	r1, #46	; 0x2e
 8019b08:	e7fa      	b.n	8019b00 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08019b0c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8019b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b10:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019b14:	b08a      	sub	sp, #40	; 0x28
 8019b16:	4604      	mov	r4, r0
 8019b18:	4688      	mov	r8, r1
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d044      	beq.n	8019ba8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8019b1e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019b20:	a805      	add	r0, sp, #20
 8019b22:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019b26:	f003 fef3 	bl	801d910 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019b2a:	4605      	mov	r5, r0
 8019b2c:	b206      	sxth	r6, r0
 8019b2e:	a805      	add	r0, sp, #20
 8019b30:	f003 ff28 	bl	801d984 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019b34:	f9b8 2000 	ldrsh.w	r2, [r8]
 8019b38:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8019b3c:	2300      	movs	r3, #0
 8019b3e:	fa0f fc80 	sxth.w	ip, r0
 8019b42:	4417      	add	r7, r2
 8019b44:	9306      	str	r3, [sp, #24]
 8019b46:	b2bf      	uxth	r7, r7
 8019b48:	fa0f fe87 	sxth.w	lr, r7
 8019b4c:	459e      	cmp	lr, r3
 8019b4e:	dd2d      	ble.n	8019bac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019b50:	4296      	cmp	r6, r2
 8019b52:	dd2b      	ble.n	8019bac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019b54:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8019b58:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8019b5c:	4419      	add	r1, r3
 8019b5e:	b289      	uxth	r1, r1
 8019b60:	fa0f f881 	sxth.w	r8, r1
 8019b64:	f1b8 0f00 	cmp.w	r8, #0
 8019b68:	dd20      	ble.n	8019bac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019b6a:	459c      	cmp	ip, r3
 8019b6c:	dd1e      	ble.n	8019bac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019b6e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8019b72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019b76:	4576      	cmp	r6, lr
 8019b78:	bfa8      	it	ge
 8019b7a:	463d      	movge	r5, r7
 8019b7c:	45c4      	cmp	ip, r8
 8019b7e:	bfa8      	it	ge
 8019b80:	4608      	movge	r0, r1
 8019b82:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019b86:	1aad      	subs	r5, r5, r2
 8019b88:	1ac0      	subs	r0, r0, r3
 8019b8a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019b8e:	f8ad 501c 	strh.w	r5, [sp, #28]
 8019b92:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019b96:	4b1f      	ldr	r3, [pc, #124]	; (8019c14 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	b953      	cbnz	r3, 8019bb2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8019b9c:	4b1e      	ldr	r3, [pc, #120]	; (8019c18 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8019b9e:	2189      	movs	r1, #137	; 0x89
 8019ba0:	4a1e      	ldr	r2, [pc, #120]	; (8019c1c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8019ba2:	481f      	ldr	r0, [pc, #124]	; (8019c20 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8019ba4:	f00d fd02 	bl	80275ac <__assert_func>
 8019ba8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019baa:	e7b9      	b.n	8019b20 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8019bac:	2300      	movs	r3, #0
 8019bae:	9307      	str	r3, [sp, #28]
 8019bb0:	e7f1      	b.n	8019b96 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8019bb2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019bba:	429a      	cmp	r2, r3
 8019bbc:	d026      	beq.n	8019c0c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019bbe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	dd22      	ble.n	8019c0c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019bc6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	dd1e      	ble.n	8019c0c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019bce:	2300      	movs	r3, #0
 8019bd0:	a908      	add	r1, sp, #32
 8019bd2:	4620      	mov	r0, r4
 8019bd4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019bd8:	6823      	ldr	r3, [r4, #0]
 8019bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bdc:	4798      	blx	r3
 8019bde:	4b11      	ldr	r3, [pc, #68]	; (8019c24 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019be6:	b10a      	cbz	r2, 8019bec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8019be8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019bea:	b900      	cbnz	r0, 8019bee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8019bec:	6898      	ldr	r0, [r3, #8]
 8019bee:	2501      	movs	r5, #1
 8019bf0:	6801      	ldr	r1, [r0, #0]
 8019bf2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019bf6:	9502      	str	r5, [sp, #8]
 8019bf8:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8019bfc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019c00:	9401      	str	r4, [sp, #4]
 8019c02:	ac06      	add	r4, sp, #24
 8019c04:	9400      	str	r4, [sp, #0]
 8019c06:	688c      	ldr	r4, [r1, #8]
 8019c08:	a905      	add	r1, sp, #20
 8019c0a:	47a0      	blx	r4
 8019c0c:	b00a      	add	sp, #40	; 0x28
 8019c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c12:	bf00      	nop
 8019c14:	2000b3dc 	.word	0x2000b3dc
 8019c18:	0802b4c0 	.word	0x0802b4c0
 8019c1c:	0802b594 	.word	0x0802b594
 8019c20:	0802b4fc 	.word	0x0802b4fc
 8019c24:	2000b314 	.word	0x2000b314

08019c28 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8019c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019c2e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019c30:	4606      	mov	r6, r0
 8019c32:	4299      	cmp	r1, r3
 8019c34:	d02a      	beq.n	8019c8c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8019c36:	4b16      	ldr	r3, [pc, #88]	; (8019c90 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	b92b      	cbnz	r3, 8019c48 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8019c3c:	4b15      	ldr	r3, [pc, #84]	; (8019c94 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8019c3e:	21b1      	movs	r1, #177	; 0xb1
 8019c40:	4a15      	ldr	r2, [pc, #84]	; (8019c98 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8019c42:	4816      	ldr	r0, [pc, #88]	; (8019c9c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8019c44:	f00d fcb2 	bl	80275ac <__assert_func>
 8019c48:	4a15      	ldr	r2, [pc, #84]	; (8019ca0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8019c4a:	8812      	ldrh	r2, [r2, #0]
 8019c4c:	428a      	cmp	r2, r1
 8019c4e:	d803      	bhi.n	8019c58 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8019c50:	4b14      	ldr	r3, [pc, #80]	; (8019ca4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8019c52:	21b2      	movs	r1, #178	; 0xb2
 8019c54:	4a10      	ldr	r2, [pc, #64]	; (8019c98 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8019c56:	e7f4      	b.n	8019c42 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8019c58:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019c5c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8019c60:	4b11      	ldr	r3, [pc, #68]	; (8019ca8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8019c62:	7854      	ldrb	r4, [r2, #1]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019c6a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8019c6e:	682b      	ldr	r3, [r5, #0]
 8019c70:	69df      	ldr	r7, [r3, #28]
 8019c72:	4b0e      	ldr	r3, [pc, #56]	; (8019cac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8019c74:	6818      	ldr	r0, [r3, #0]
 8019c76:	f7fa ffdf 	bl	8014c38 <_ZNK8touchgfx5Texts7getTextEt>
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	4602      	mov	r2, r0
 8019c7e:	4621      	mov	r1, r4
 8019c80:	9300      	str	r3, [sp, #0]
 8019c82:	4628      	mov	r0, r5
 8019c84:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8019c86:	47b8      	blx	r7
 8019c88:	b003      	add	sp, #12
 8019c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c8c:	2000      	movs	r0, #0
 8019c8e:	e7fb      	b.n	8019c88 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8019c90:	2000b3a4 	.word	0x2000b3a4
 8019c94:	0802b2ec 	.word	0x0802b2ec
 8019c98:	0802b644 	.word	0x0802b644
 8019c9c:	0802b32e 	.word	0x0802b32e
 8019ca0:	2000b3a8 	.word	0x2000b3a8
 8019ca4:	0802b357 	.word	0x0802b357
 8019ca8:	2000b3ac 	.word	0x2000b3ac
 8019cac:	2000b3b0 	.word	0x2000b3b0

08019cb0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8019cb0:	b570      	push	{r4, r5, r6, lr}
 8019cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019cb6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019cb8:	4604      	mov	r4, r0
 8019cba:	4299      	cmp	r1, r3
 8019cbc:	d01e      	beq.n	8019cfc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8019cbe:	6803      	ldr	r3, [r0, #0]
 8019cc0:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8019cc2:	4b0f      	ldr	r3, [pc, #60]	; (8019d00 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	b92b      	cbnz	r3, 8019cd4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8019cc8:	4b0e      	ldr	r3, [pc, #56]	; (8019d04 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8019cca:	21b1      	movs	r1, #177	; 0xb1
 8019ccc:	4a0e      	ldr	r2, [pc, #56]	; (8019d08 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8019cce:	480f      	ldr	r0, [pc, #60]	; (8019d0c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8019cd0:	f00d fc6c 	bl	80275ac <__assert_func>
 8019cd4:	4b0e      	ldr	r3, [pc, #56]	; (8019d10 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8019cd6:	881b      	ldrh	r3, [r3, #0]
 8019cd8:	428b      	cmp	r3, r1
 8019cda:	d803      	bhi.n	8019ce4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8019cdc:	4b0d      	ldr	r3, [pc, #52]	; (8019d14 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8019cde:	21b2      	movs	r1, #178	; 0xb2
 8019ce0:	4a09      	ldr	r2, [pc, #36]	; (8019d08 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8019ce2:	e7f4      	b.n	8019cce <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8019ce4:	4b0c      	ldr	r3, [pc, #48]	; (8019d18 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8019ce6:	6818      	ldr	r0, [r3, #0]
 8019ce8:	f7fa ffa6 	bl	8014c38 <_ZNK8touchgfx5Texts7getTextEt>
 8019cec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8019cee:	4601      	mov	r1, r0
 8019cf0:	46ac      	mov	ip, r5
 8019cf2:	4620      	mov	r0, r4
 8019cf4:	2300      	movs	r3, #0
 8019cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cfa:	4760      	bx	ip
 8019cfc:	2000      	movs	r0, #0
 8019cfe:	bd70      	pop	{r4, r5, r6, pc}
 8019d00:	2000b3a4 	.word	0x2000b3a4
 8019d04:	0802b2ec 	.word	0x0802b2ec
 8019d08:	0802b644 	.word	0x0802b644
 8019d0c:	0802b32e 	.word	0x0802b32e
 8019d10:	2000b3a8 	.word	0x2000b3a8
 8019d14:	0802b357 	.word	0x0802b357
 8019d18:	2000b3b0 	.word	0x2000b3b0

08019d1c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8019d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019d24:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019d26:	b08c      	sub	sp, #48	; 0x30
 8019d28:	4604      	mov	r4, r0
 8019d2a:	4293      	cmp	r3, r2
 8019d2c:	460e      	mov	r6, r1
 8019d2e:	d05d      	beq.n	8019dec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8019d30:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8019e10 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8019d34:	f8d8 2000 	ldr.w	r2, [r8]
 8019d38:	b92a      	cbnz	r2, 8019d46 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8019d3a:	4b2e      	ldr	r3, [pc, #184]	; (8019df4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8019d3c:	21b1      	movs	r1, #177	; 0xb1
 8019d3e:	4a2e      	ldr	r2, [pc, #184]	; (8019df8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8019d40:	482e      	ldr	r0, [pc, #184]	; (8019dfc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8019d42:	f00d fc33 	bl	80275ac <__assert_func>
 8019d46:	4f2e      	ldr	r7, [pc, #184]	; (8019e00 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8019d48:	8839      	ldrh	r1, [r7, #0]
 8019d4a:	4299      	cmp	r1, r3
 8019d4c:	d803      	bhi.n	8019d56 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8019d4e:	4b2d      	ldr	r3, [pc, #180]	; (8019e04 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8019d50:	21b2      	movs	r1, #178	; 0xb2
 8019d52:	4a29      	ldr	r2, [pc, #164]	; (8019df8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8019d54:	e7f4      	b.n	8019d40 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8019d56:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019d5a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019d5e:	4b2a      	ldr	r3, [pc, #168]	; (8019e08 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019d66:	2a00      	cmp	r2, #0
 8019d68:	d040      	beq.n	8019dec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8019d6a:	784b      	ldrb	r3, [r1, #1]
 8019d6c:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8019d70:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8019d74:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8019d78:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8019d7c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019d80:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8019d84:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8019d88:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8019d8c:	ad05      	add	r5, sp, #20
 8019d8e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019d90:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019d94:	9207      	str	r2, [sp, #28]
 8019d96:	f88d 9020 	strb.w	r9, [sp, #32]
 8019d9a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8019d9e:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8019da2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8019da6:	9009      	str	r0, [sp, #36]	; 0x24
 8019da8:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8019dac:	f7f5 ff30 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8019db0:	4621      	mov	r1, r4
 8019db2:	4681      	mov	r9, r0
 8019db4:	4628      	mov	r0, r5
 8019db6:	f001 ff44 	bl	801bc42 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019dba:	f8d8 3000 	ldr.w	r3, [r8]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d0bb      	beq.n	8019d3a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8019dc2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019dc4:	883b      	ldrh	r3, [r7, #0]
 8019dc6:	428b      	cmp	r3, r1
 8019dc8:	d9c1      	bls.n	8019d4e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8019dca:	4b10      	ldr	r3, [pc, #64]	; (8019e0c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8019dcc:	6818      	ldr	r0, [r3, #0]
 8019dce:	f7fa ff33 	bl	8014c38 <_ZNK8touchgfx5Texts7getTextEt>
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	9303      	str	r3, [sp, #12]
 8019dd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019dd8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8019ddc:	ab07      	add	r3, sp, #28
 8019dde:	4648      	mov	r0, r9
 8019de0:	9300      	str	r3, [sp, #0]
 8019de2:	4633      	mov	r3, r6
 8019de4:	e895 0006 	ldmia.w	r5, {r1, r2}
 8019de8:	f7fa feb7 	bl	8014b5a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019dec:	b00c      	add	sp, #48	; 0x30
 8019dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019df2:	bf00      	nop
 8019df4:	0802b2ec 	.word	0x0802b2ec
 8019df8:	0802b644 	.word	0x0802b644
 8019dfc:	0802b32e 	.word	0x0802b32e
 8019e00:	2000b3a8 	.word	0x2000b3a8
 8019e04:	0802b357 	.word	0x0802b357
 8019e08:	2000b3ac 	.word	0x2000b3ac
 8019e0c:	2000b3b0 	.word	0x2000b3b0
 8019e10:	2000b3a4 	.word	0x2000b3a4

08019e14 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8019e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e18:	461c      	mov	r4, r3
 8019e1a:	4606      	mov	r6, r0
 8019e1c:	9f06      	ldr	r7, [sp, #24]
 8019e1e:	f7ff fe4d 	bl	8019abc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8019e22:	8823      	ldrh	r3, [r4, #0]
 8019e24:	f04f 0802 	mov.w	r8, #2
 8019e28:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 8019e2c:	4638      	mov	r0, r7
 8019e2e:	86b3      	strh	r3, [r6, #52]	; 0x34
 8019e30:	883b      	ldrh	r3, [r7, #0]
 8019e32:	fb95 f5f8 	sdiv	r5, r5, r8
 8019e36:	86f3      	strh	r3, [r6, #54]	; 0x36
 8019e38:	b2ad      	uxth	r5, r5
 8019e3a:	f003 fd69 	bl	801d910 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019e3e:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 8019e42:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 8019e46:	fb94 f4f8 	sdiv	r4, r4, r8
 8019e4a:	b2a4      	uxth	r4, r4
 8019e4c:	8730      	strh	r0, [r6, #56]	; 0x38
 8019e4e:	4638      	mov	r0, r7
 8019e50:	f003 fd98 	bl	801d984 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019e54:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 8019e58:	8770      	strh	r0, [r6, #58]	; 0x3a
 8019e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08019e60 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 8019e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e64:	4604      	mov	r4, r0
 8019e66:	b08c      	sub	sp, #48	; 0x30
 8019e68:	460d      	mov	r5, r1
 8019e6a:	f7ff fe4f 	bl	8019b0c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8019e6e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019e72:	b33b      	cbz	r3, 8019ec4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 8019e74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019e76:	a805      	add	r0, sp, #20
 8019e78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019e7c:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 8019e80:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 8019e84:	f003 fd44 	bl	801d910 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019e88:	4606      	mov	r6, r0
 8019e8a:	a805      	add	r0, sp, #20
 8019e8c:	f003 fd7a 	bl	801d984 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019e90:	6869      	ldr	r1, [r5, #4]
 8019e92:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019e96:	ab08      	add	r3, sp, #32
 8019e98:	6828      	ldr	r0, [r5, #0]
 8019e9a:	ad08      	add	r5, sp, #32
 8019e9c:	f8ad 8018 	strh.w	r8, [sp, #24]
 8019ea0:	f8ad 701a 	strh.w	r7, [sp, #26]
 8019ea4:	f8ad 601c 	strh.w	r6, [sp, #28]
 8019ea8:	c303      	stmia	r3!, {r0, r1}
 8019eaa:	a906      	add	r1, sp, #24
 8019eac:	4628      	mov	r0, r5
 8019eae:	f7fd fd7b 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 8019eb2:	4b25      	ldr	r3, [pc, #148]	; (8019f48 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	b93b      	cbnz	r3, 8019ec8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 8019eb8:	4b24      	ldr	r3, [pc, #144]	; (8019f4c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 8019eba:	2189      	movs	r1, #137	; 0x89
 8019ebc:	4a24      	ldr	r2, [pc, #144]	; (8019f50 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 8019ebe:	4825      	ldr	r0, [pc, #148]	; (8019f54 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 8019ec0:	f00d fb74 	bl	80275ac <__assert_func>
 8019ec4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019ec6:	e7d6      	b.n	8019e76 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 8019ec8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ed0:	429a      	cmp	r2, r3
 8019ed2:	d035      	beq.n	8019f40 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8019ed4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	dd31      	ble.n	8019f40 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8019edc:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	dd2d      	ble.n	8019f40 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	a90a      	add	r1, sp, #40	; 0x28
 8019ee8:	4620      	mov	r0, r4
 8019eea:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8019eee:	6823      	ldr	r3, [r4, #0]
 8019ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ef2:	4798      	blx	r3
 8019ef4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019ef8:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8019efa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8019efe:	1a9b      	subs	r3, r3, r2
 8019f00:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019f04:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8019f06:	1ac9      	subs	r1, r1, r3
 8019f08:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8019f0c:	4912      	ldr	r1, [pc, #72]	; (8019f58 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 8019f0e:	6809      	ldr	r1, [r1, #0]
 8019f10:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 8019f14:	b108      	cbz	r0, 8019f1a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 8019f16:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8019f18:	b900      	cbnz	r0, 8019f1c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 8019f1a:	6888      	ldr	r0, [r1, #8]
 8019f1c:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8019f20:	2601      	movs	r6, #1
 8019f22:	440b      	add	r3, r1
 8019f24:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8019f28:	440a      	add	r2, r1
 8019f2a:	6801      	ldr	r1, [r0, #0]
 8019f2c:	9602      	str	r6, [sp, #8]
 8019f2e:	b21b      	sxth	r3, r3
 8019f30:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8019f34:	b212      	sxth	r2, r2
 8019f36:	e9cd 5400 	strd	r5, r4, [sp]
 8019f3a:	688c      	ldr	r4, [r1, #8]
 8019f3c:	a905      	add	r1, sp, #20
 8019f3e:	47a0      	blx	r4
 8019f40:	b00c      	add	sp, #48	; 0x30
 8019f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f46:	bf00      	nop
 8019f48:	2000b3dc 	.word	0x2000b3dc
 8019f4c:	0802b4c0 	.word	0x0802b4c0
 8019f50:	0802b6e8 	.word	0x0802b6e8
 8019f54:	0802b4fc 	.word	0x0802b4fc
 8019f58:	2000b314 	.word	0x2000b314

08019f5c <_ZN8touchgfx14ButtonWithIconC1Ev>:
 8019f5c:	2101      	movs	r1, #1
 8019f5e:	2200      	movs	r2, #0
 8019f60:	b510      	push	{r4, lr}
 8019f62:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8019f66:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8019f6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019f6e:	4c0c      	ldr	r4, [pc, #48]	; (8019fa0 <_ZN8touchgfx14ButtonWithIconC1Ev+0x44>)
 8019f70:	8082      	strh	r2, [r0, #4]
 8019f72:	80c2      	strh	r2, [r0, #6]
 8019f74:	8102      	strh	r2, [r0, #8]
 8019f76:	8142      	strh	r2, [r0, #10]
 8019f78:	8182      	strh	r2, [r0, #12]
 8019f7a:	81c2      	strh	r2, [r0, #14]
 8019f7c:	8202      	strh	r2, [r0, #16]
 8019f7e:	8242      	strh	r2, [r0, #18]
 8019f80:	61c2      	str	r2, [r0, #28]
 8019f82:	6282      	str	r2, [r0, #40]	; 0x28
 8019f84:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8019f88:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8019f8a:	8601      	strh	r1, [r0, #48]	; 0x30
 8019f8c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8019f90:	6004      	str	r4, [r0, #0]
 8019f92:	8681      	strh	r1, [r0, #52]	; 0x34
 8019f94:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019f96:	8702      	strh	r2, [r0, #56]	; 0x38
 8019f98:	8742      	strh	r2, [r0, #58]	; 0x3a
 8019f9a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019f9e:	bd10      	pop	{r4, pc}
 8019fa0:	0802b67c 	.word	0x0802b67c

08019fa4 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 8019fa4:	b510      	push	{r4, lr}
 8019fa6:	4604      	mov	r4, r0
 8019fa8:	f7ff fd99 	bl	8019ade <_ZNK8touchgfx6Button12getSolidRectEv>
 8019fac:	4620      	mov	r0, r4
 8019fae:	bd10      	pop	{r4, pc}

08019fb0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8019fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fb4:	4604      	mov	r4, r0
 8019fb6:	b08c      	sub	sp, #48	; 0x30
 8019fb8:	4688      	mov	r8, r1
 8019fba:	f7ff fda7 	bl	8019b0c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8019fbe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019fc4:	4293      	cmp	r3, r2
 8019fc6:	f000 809a 	beq.w	801a0fe <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8019fca:	4e55      	ldr	r6, [pc, #340]	; (801a120 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8019fcc:	6832      	ldr	r2, [r6, #0]
 8019fce:	b92a      	cbnz	r2, 8019fdc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 8019fd0:	4b54      	ldr	r3, [pc, #336]	; (801a124 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8019fd2:	21b1      	movs	r1, #177	; 0xb1
 8019fd4:	4a54      	ldr	r2, [pc, #336]	; (801a128 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8019fd6:	4855      	ldr	r0, [pc, #340]	; (801a12c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 8019fd8:	f00d fae8 	bl	80275ac <__assert_func>
 8019fdc:	4d54      	ldr	r5, [pc, #336]	; (801a130 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 8019fde:	8829      	ldrh	r1, [r5, #0]
 8019fe0:	4299      	cmp	r1, r3
 8019fe2:	d803      	bhi.n	8019fec <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 8019fe4:	4b53      	ldr	r3, [pc, #332]	; (801a134 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 8019fe6:	21b2      	movs	r1, #178	; 0xb2
 8019fe8:	4a4f      	ldr	r2, [pc, #316]	; (801a128 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8019fea:	e7f4      	b.n	8019fd6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 8019fec:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019ff0:	f04f 0c02 	mov.w	ip, #2
 8019ff4:	4b50      	ldr	r3, [pc, #320]	; (801a138 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 8019ff6:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a000:	f1be 0f01 	cmp.w	lr, #1
 801a004:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801a008:	f04f 0300 	mov.w	r3, #0
 801a00c:	b208      	sxth	r0, r1
 801a00e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801a012:	9303      	str	r3, [sp, #12]
 801a014:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801a018:	d074      	beq.n	801a104 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801a01a:	f1be 0f03 	cmp.w	lr, #3
 801a01e:	d071      	beq.n	801a104 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801a020:	1a52      	subs	r2, r2, r1
 801a022:	f8ad 3010 	strh.w	r3, [sp, #16]
 801a026:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a02a:	fb92 f2fc 	sdiv	r2, r2, ip
 801a02e:	f8ad 200e 	strh.w	r2, [sp, #14]
 801a032:	f10d 090c 	add.w	r9, sp, #12
 801a036:	f10d 0a14 	add.w	sl, sp, #20
 801a03a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801a03e:	e88a 0003 	stmia.w	sl, {r0, r1}
 801a042:	4641      	mov	r1, r8
 801a044:	4650      	mov	r0, sl
 801a046:	f7fd fcaf 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 801a04a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	dd55      	ble.n	801a0fe <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801a052:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801a056:	2b00      	cmp	r3, #0
 801a058:	dd51      	ble.n	801a0fe <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801a05a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a05e:	4649      	mov	r1, r9
 801a060:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801a064:	4620      	mov	r0, r4
 801a066:	1a9b      	subs	r3, r3, r2
 801a068:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801a06c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a070:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a074:	1a9b      	subs	r3, r3, r2
 801a076:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a07a:	6823      	ldr	r3, [r4, #0]
 801a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a07e:	4798      	blx	r3
 801a080:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a084:	2b00      	cmp	r3, #0
 801a086:	d047      	beq.n	801a118 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 801a088:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801a08c:	6833      	ldr	r3, [r6, #0]
 801a08e:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 801a092:	2b00      	cmp	r3, #0
 801a094:	d09c      	beq.n	8019fd0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 801a096:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801a098:	8828      	ldrh	r0, [r5, #0]
 801a09a:	4288      	cmp	r0, r1
 801a09c:	d9a2      	bls.n	8019fe4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 801a09e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801a0a2:	6812      	ldr	r2, [r2, #0]
 801a0a4:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801a0a8:	785b      	ldrb	r3, [r3, #1]
 801a0aa:	9209      	str	r2, [sp, #36]	; 0x24
 801a0ac:	f3c3 0501 	ubfx	r5, r3, #0, #2
 801a0b0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a0b4:	9707      	str	r7, [sp, #28]
 801a0b6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801a0ba:	2300      	movs	r3, #0
 801a0bc:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801a0c0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801a0c4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801a0c8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801a0cc:	4b1b      	ldr	r3, [pc, #108]	; (801a13c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 801a0ce:	f88d 5020 	strb.w	r5, [sp, #32]
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801a0d8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a0dc:	b10a      	cbz	r2, 801a0e2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 801a0de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a0e0:	b904      	cbnz	r4, 801a0e4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 801a0e2:	689c      	ldr	r4, [r3, #8]
 801a0e4:	4b16      	ldr	r3, [pc, #88]	; (801a140 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 801a0e6:	6818      	ldr	r0, [r3, #0]
 801a0e8:	f7fa fda6 	bl	8014c38 <_ZNK8touchgfx5Texts7getTextEt>
 801a0ec:	ab07      	add	r3, sp, #28
 801a0ee:	9001      	str	r0, [sp, #4]
 801a0f0:	4620      	mov	r0, r4
 801a0f2:	9300      	str	r3, [sp, #0]
 801a0f4:	4653      	mov	r3, sl
 801a0f6:	e899 0006 	ldmia.w	r9, {r1, r2}
 801a0fa:	f7fa fd2e 	bl	8014b5a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a0fe:	b00c      	add	sp, #48	; 0x30
 801a100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a104:	1a5b      	subs	r3, r3, r1
 801a106:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a10a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a10e:	fb93 f3fc 	sdiv	r3, r3, ip
 801a112:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a116:	e78c      	b.n	801a032 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 801a118:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801a11c:	e7b6      	b.n	801a08c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 801a11e:	bf00      	nop
 801a120:	2000b3a4 	.word	0x2000b3a4
 801a124:	0802b2ec 	.word	0x0802b2ec
 801a128:	0802b78c 	.word	0x0802b78c
 801a12c:	0802b32e 	.word	0x0802b32e
 801a130:	2000b3a8 	.word	0x2000b3a8
 801a134:	0802b357 	.word	0x0802b357
 801a138:	2000b3ac 	.word	0x2000b3ac
 801a13c:	2000b314 	.word	0x2000b314
 801a140:	2000b3b0 	.word	0x2000b3b0

0801a144 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801a144:	2101      	movs	r1, #1
 801a146:	2200      	movs	r2, #0
 801a148:	b510      	push	{r4, lr}
 801a14a:	4c12      	ldr	r4, [pc, #72]	; (801a194 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
 801a14c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801a150:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801a154:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a158:	6004      	str	r4, [r0, #0]
 801a15a:	4c0f      	ldr	r4, [pc, #60]	; (801a198 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 801a15c:	8082      	strh	r2, [r0, #4]
 801a15e:	80c2      	strh	r2, [r0, #6]
 801a160:	8102      	strh	r2, [r0, #8]
 801a162:	8142      	strh	r2, [r0, #10]
 801a164:	8182      	strh	r2, [r0, #12]
 801a166:	81c2      	strh	r2, [r0, #14]
 801a168:	8202      	strh	r2, [r0, #16]
 801a16a:	8242      	strh	r2, [r0, #18]
 801a16c:	61c2      	str	r2, [r0, #28]
 801a16e:	6282      	str	r2, [r0, #40]	; 0x28
 801a170:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801a174:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801a176:	8601      	strh	r1, [r0, #48]	; 0x30
 801a178:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801a17c:	6344      	str	r4, [r0, #52]	; 0x34
 801a17e:	8701      	strh	r1, [r0, #56]	; 0x38
 801a180:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801a184:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 801a188:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a18c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 801a190:	bd10      	pop	{r4, pc}
 801a192:	bf00      	nop
 801a194:	0802b724 	.word	0x0802b724
 801a198:	08028eec 	.word	0x08028eec

0801a19c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801a19c:	4b02      	ldr	r3, [pc, #8]	; (801a1a8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801a19e:	6018      	str	r0, [r3, #0]
 801a1a0:	4b02      	ldr	r3, [pc, #8]	; (801a1ac <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801a1a2:	6019      	str	r1, [r3, #0]
 801a1a4:	4770      	bx	lr
 801a1a6:	bf00      	nop
 801a1a8:	2000b31c 	.word	0x2000b31c
 801a1ac:	2000b330 	.word	0x2000b330

0801a1b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801a1b0:	b538      	push	{r3, r4, r5, lr}
 801a1b2:	4c2b      	ldr	r4, [pc, #172]	; (801a260 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801a1b4:	4b2b      	ldr	r3, [pc, #172]	; (801a264 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801a1b6:	6821      	ldr	r1, [r4, #0]
 801a1b8:	681a      	ldr	r2, [r3, #0]
 801a1ba:	4281      	cmp	r1, r0
 801a1bc:	4d2a      	ldr	r5, [pc, #168]	; (801a268 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801a1be:	492b      	ldr	r1, [pc, #172]	; (801a26c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801a1c0:	d108      	bne.n	801a1d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801a1c2:	682b      	ldr	r3, [r5, #0]
 801a1c4:	4293      	cmp	r3, r2
 801a1c6:	d105      	bne.n	801a1d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801a1c8:	6808      	ldr	r0, [r1, #0]
 801a1ca:	280f      	cmp	r0, #15
 801a1cc:	bf94      	ite	ls
 801a1ce:	2000      	movls	r0, #0
 801a1d0:	2001      	movhi	r0, #1
 801a1d2:	bd38      	pop	{r3, r4, r5, pc}
 801a1d4:	4b26      	ldr	r3, [pc, #152]	; (801a270 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801a1d6:	6020      	str	r0, [r4, #0]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	602a      	str	r2, [r5, #0]
 801a1dc:	4298      	cmp	r0, r3
 801a1de:	d905      	bls.n	801a1ec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801a1e0:	4b24      	ldr	r3, [pc, #144]	; (801a274 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801a1e2:	2137      	movs	r1, #55	; 0x37
 801a1e4:	4a24      	ldr	r2, [pc, #144]	; (801a278 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801a1e6:	4825      	ldr	r0, [pc, #148]	; (801a27c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801a1e8:	f00d f9e0 	bl	80275ac <__assert_func>
 801a1ec:	f010 0403 	ands.w	r4, r0, #3
 801a1f0:	bf1f      	itttt	ne
 801a1f2:	f1c4 0504 	rsbne	r5, r4, #4
 801a1f6:	3b04      	subne	r3, #4
 801a1f8:	1952      	addne	r2, r2, r5
 801a1fa:	191b      	addne	r3, r3, r4
 801a1fc:	4d20      	ldr	r5, [pc, #128]	; (801a280 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801a1fe:	4402      	add	r2, r0
 801a200:	1a1b      	subs	r3, r3, r0
 801a202:	3001      	adds	r0, #1
 801a204:	602a      	str	r2, [r5, #0]
 801a206:	f020 0401 	bic.w	r4, r0, #1
 801a20a:	42a3      	cmp	r3, r4
 801a20c:	d203      	bcs.n	801a216 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801a20e:	4b19      	ldr	r3, [pc, #100]	; (801a274 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801a210:	214a      	movs	r1, #74	; 0x4a
 801a212:	4a19      	ldr	r2, [pc, #100]	; (801a278 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801a214:	e7e7      	b.n	801a1e6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801a216:	f010 0002 	ands.w	r0, r0, #2
 801a21a:	bf1f      	itttt	ne
 801a21c:	f1c0 0504 	rsbne	r5, r0, #4
 801a220:	1952      	addne	r2, r2, r5
 801a222:	1f05      	subne	r5, r0, #4
 801a224:	195b      	addne	r3, r3, r5
 801a226:	4422      	add	r2, r4
 801a228:	4d16      	ldr	r5, [pc, #88]	; (801a284 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801a22a:	1b1b      	subs	r3, r3, r4
 801a22c:	602a      	str	r2, [r5, #0]
 801a22e:	429c      	cmp	r4, r3
 801a230:	d903      	bls.n	801a23a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801a232:	4b10      	ldr	r3, [pc, #64]	; (801a274 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801a234:	215d      	movs	r1, #93	; 0x5d
 801a236:	4a10      	ldr	r2, [pc, #64]	; (801a278 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801a238:	e7d5      	b.n	801a1e6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801a23a:	b120      	cbz	r0, 801a246 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801a23c:	f1c0 0504 	rsb	r5, r0, #4
 801a240:	3804      	subs	r0, #4
 801a242:	442a      	add	r2, r5
 801a244:	4403      	add	r3, r0
 801a246:	1b1b      	subs	r3, r3, r4
 801a248:	4422      	add	r2, r4
 801a24a:	480f      	ldr	r0, [pc, #60]	; (801a288 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801a24c:	2b0f      	cmp	r3, #15
 801a24e:	600b      	str	r3, [r1, #0]
 801a250:	6002      	str	r2, [r0, #0]
 801a252:	d803      	bhi.n	801a25c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801a254:	4b0d      	ldr	r3, [pc, #52]	; (801a28c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801a256:	2170      	movs	r1, #112	; 0x70
 801a258:	4a07      	ldr	r2, [pc, #28]	; (801a278 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801a25a:	e7c4      	b.n	801a1e6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801a25c:	2001      	movs	r0, #1
 801a25e:	e7b8      	b.n	801a1d2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801a260:	2000b324 	.word	0x2000b324
 801a264:	2000b31c 	.word	0x2000b31c
 801a268:	2000b32c 	.word	0x2000b32c
 801a26c:	2000b334 	.word	0x2000b334
 801a270:	2000b330 	.word	0x2000b330
 801a274:	0802b7ba 	.word	0x0802b7ba
 801a278:	0802b882 	.word	0x0802b882
 801a27c:	0802b7f3 	.word	0x0802b7f3
 801a280:	2000b338 	.word	0x2000b338
 801a284:	2000b328 	.word	0x2000b328
 801a288:	2000b320 	.word	0x2000b320
 801a28c:	0802b83d 	.word	0x0802b83d

0801a290 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801a290:	4b04      	ldr	r3, [pc, #16]	; (801a2a4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801a292:	6818      	ldr	r0, [r3, #0]
 801a294:	b120      	cbz	r0, 801a2a0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801a296:	4b04      	ldr	r3, [pc, #16]	; (801a2a8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801a298:	6818      	ldr	r0, [r3, #0]
 801a29a:	3000      	adds	r0, #0
 801a29c:	bf18      	it	ne
 801a29e:	2001      	movne	r0, #1
 801a2a0:	4770      	bx	lr
 801a2a2:	bf00      	nop
 801a2a4:	2000b31c 	.word	0x2000b31c
 801a2a8:	2000b330 	.word	0x2000b330

0801a2ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801a2ac:	4b01      	ldr	r3, [pc, #4]	; (801a2b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801a2ae:	6818      	ldr	r0, [r3, #0]
 801a2b0:	4770      	bx	lr
 801a2b2:	bf00      	nop
 801a2b4:	2000b324 	.word	0x2000b324

0801a2b8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801a2b8:	4b01      	ldr	r3, [pc, #4]	; (801a2c0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801a2ba:	6818      	ldr	r0, [r3, #0]
 801a2bc:	4770      	bx	lr
 801a2be:	bf00      	nop
 801a2c0:	2000b32c 	.word	0x2000b32c

0801a2c4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801a2c4:	4b01      	ldr	r3, [pc, #4]	; (801a2cc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801a2c6:	6818      	ldr	r0, [r3, #0]
 801a2c8:	4770      	bx	lr
 801a2ca:	bf00      	nop
 801a2cc:	2000b338 	.word	0x2000b338

0801a2d0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801a2d0:	4b01      	ldr	r3, [pc, #4]	; (801a2d8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801a2d2:	6818      	ldr	r0, [r3, #0]
 801a2d4:	4770      	bx	lr
 801a2d6:	bf00      	nop
 801a2d8:	2000b328 	.word	0x2000b328

0801a2dc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801a2dc:	4b01      	ldr	r3, [pc, #4]	; (801a2e4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801a2de:	6818      	ldr	r0, [r3, #0]
 801a2e0:	4770      	bx	lr
 801a2e2:	bf00      	nop
 801a2e4:	2000b320 	.word	0x2000b320

0801a2e8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801a2e8:	4b01      	ldr	r3, [pc, #4]	; (801a2f0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801a2ea:	6818      	ldr	r0, [r3, #0]
 801a2ec:	4770      	bx	lr
 801a2ee:	bf00      	nop
 801a2f0:	2000b334 	.word	0x2000b334

0801a2f4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a2f4:	2000      	movs	r0, #0
 801a2f6:	4770      	bx	lr

0801a2f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2fc:	b091      	sub	sp, #68	; 0x44
 801a2fe:	4699      	mov	r9, r3
 801a300:	4617      	mov	r7, r2
 801a302:	2500      	movs	r5, #0
 801a304:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801a308:	4680      	mov	r8, r0
 801a30a:	a80e      	add	r0, sp, #56	; 0x38
 801a30c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801a30e:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801a312:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801a316:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801a31a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a31e:	910d      	str	r1, [sp, #52]	; 0x34
 801a320:	950e      	str	r5, [sp, #56]	; 0x38
 801a322:	f000 fe39 	bl	801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a326:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a328:	f8d9 6000 	ldr.w	r6, [r9]
 801a32c:	6818      	ldr	r0, [r3, #0]
 801a32e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a330:	f9b4 b000 	ldrsh.w	fp, [r4]
 801a334:	1b80      	subs	r0, r0, r6
 801a336:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a33a:	eb02 0c06 	add.w	ip, r2, r6
 801a33e:	ebab 0e0c 	sub.w	lr, fp, ip
 801a342:	4570      	cmp	r0, lr
 801a344:	f340 80bc 	ble.w	801a4c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801a348:	88a1      	ldrh	r1, [r4, #4]
 801a34a:	4459      	add	r1, fp
 801a34c:	b209      	sxth	r1, r1
 801a34e:	458c      	cmp	ip, r1
 801a350:	f300 80b6 	bgt.w	801a4c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801a354:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801a358:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801a35c:	4283      	cmp	r3, r0
 801a35e:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801a362:	edd9 6a07 	vldr	s13, [r9, #28]
 801a366:	bfa8      	it	ge
 801a368:	4603      	movge	r3, r0
 801a36a:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801a36e:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801a372:	45e3      	cmp	fp, ip
 801a374:	ee07 3a90 	vmov	s15, r3
 801a378:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a37c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801a380:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a384:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a388:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a38c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a390:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a394:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a398:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a39c:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a3a0:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a3a4:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a3a8:	f340 808d 	ble.w	801a4c6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801a3ac:	fb9e f5f3 	sdiv	r5, lr, r3
 801a3b0:	ee07 5a10 	vmov	s14, r5
 801a3b4:	2d00      	cmp	r5, #0
 801a3b6:	fb03 e415 	mls	r4, r3, r5, lr
 801a3ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3be:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a3c2:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a3c6:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a3ca:	dd12      	ble.n	801a3f2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 801a3cc:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a3d0:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a3d4:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a3d8:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3e0:	bf14      	ite	ne
 801a3e2:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a3e6:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a3ea:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a3ee:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a3f2:	fb05 f703 	mul.w	r7, r5, r3
 801a3f6:	1bc0      	subs	r0, r0, r7
 801a3f8:	443e      	add	r6, r7
 801a3fa:	1997      	adds	r7, r2, r6
 801a3fc:	4407      	add	r7, r0
 801a3fe:	42b9      	cmp	r1, r7
 801a400:	bfbc      	itt	lt
 801a402:	1a88      	sublt	r0, r1, r2
 801a404:	1b80      	sublt	r0, r0, r6
 801a406:	2800      	cmp	r0, #0
 801a408:	dd5a      	ble.n	801a4c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801a40a:	fb90 f1f3 	sdiv	r1, r0, r3
 801a40e:	fb03 0211 	mls	r2, r3, r1, r0
 801a412:	b90a      	cbnz	r2, 801a418 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801a414:	3901      	subs	r1, #1
 801a416:	461a      	mov	r2, r3
 801a418:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a41c:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801a420:	44a4      	add	ip, r4
 801a422:	2900      	cmp	r1, #0
 801a424:	bfcc      	ite	gt
 801a426:	469e      	movgt	lr, r3
 801a428:	4696      	movle	lr, r2
 801a42a:	fb03 c505 	mla	r5, r3, r5, ip
 801a42e:	eef0 6a42 	vmov.f32	s13, s4
 801a432:	eeb0 7a61 	vmov.f32	s14, s3
 801a436:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a43a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a43e:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a442:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a446:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a44a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a44e:	ee17 0a90 	vmov	r0, s15
 801a452:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a456:	fb90 f6f3 	sdiv	r6, r0, r3
 801a45a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a45e:	ee17 0a90 	vmov	r0, s15
 801a462:	fb90 f7f3 	sdiv	r7, r0, r3
 801a466:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a46a:	f8d0 8000 	ldr.w	r8, [r0]
 801a46e:	900c      	str	r0, [sp, #48]	; 0x30
 801a470:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a472:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801a476:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801a47a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801a47e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801a482:	f8cd a020 	str.w	sl, [sp, #32]
 801a486:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801a48a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a48c:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801a490:	9603      	str	r6, [sp, #12]
 801a492:	44ca      	add	sl, r9
 801a494:	9506      	str	r5, [sp, #24]
 801a496:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801a49a:	ee16 0a90 	vmov	r0, s13
 801a49e:	f8cd a01c 	str.w	sl, [sp, #28]
 801a4a2:	fb07 0704 	mla	r7, r7, r4, r0
 801a4a6:	ee17 0a10 	vmov	r0, s14
 801a4aa:	fb06 0604 	mla	r6, r6, r4, r0
 801a4ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a4b0:	9702      	str	r7, [sp, #8]
 801a4b2:	e9cd 3600 	strd	r3, r6, [sp]
 801a4b6:	ebae 0304 	sub.w	r3, lr, r4
 801a4ba:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801a4be:	47a8      	blx	r5
 801a4c0:	b011      	add	sp, #68	; 0x44
 801a4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4c6:	462c      	mov	r4, r5
 801a4c8:	e797      	b.n	801a3fa <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801a4ca <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801a4ca:	b570      	push	{r4, r5, r6, lr}
 801a4cc:	4604      	mov	r4, r0
 801a4ce:	2500      	movs	r5, #0
 801a4d0:	9804      	ldr	r0, [sp, #16]
 801a4d2:	7223      	strb	r3, [r4, #8]
 801a4d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a4d8:	8025      	strh	r5, [r4, #0]
 801a4da:	6061      	str	r1, [r4, #4]
 801a4dc:	7263      	strb	r3, [r4, #9]
 801a4de:	60e0      	str	r0, [r4, #12]
 801a4e0:	8222      	strh	r2, [r4, #16]
 801a4e2:	8265      	strh	r5, [r4, #18]
 801a4e4:	82a5      	strh	r5, [r4, #20]
 801a4e6:	82e5      	strh	r5, [r4, #22]
 801a4e8:	8325      	strh	r5, [r4, #24]
 801a4ea:	8365      	strh	r5, [r4, #26]
 801a4ec:	83a5      	strh	r5, [r4, #28]
 801a4ee:	77a5      	strb	r5, [r4, #30]
 801a4f0:	6803      	ldr	r3, [r0, #0]
 801a4f2:	695b      	ldr	r3, [r3, #20]
 801a4f4:	4798      	blx	r3
 801a4f6:	4606      	mov	r6, r0
 801a4f8:	b1f8      	cbz	r0, 801a53a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801a4fa:	68e0      	ldr	r0, [r4, #12]
 801a4fc:	4631      	mov	r1, r6
 801a4fe:	6803      	ldr	r3, [r0, #0]
 801a500:	68db      	ldr	r3, [r3, #12]
 801a502:	4798      	blx	r3
 801a504:	7b43      	ldrb	r3, [r0, #13]
 801a506:	7a82      	ldrb	r2, [r0, #10]
 801a508:	4605      	mov	r5, r0
 801a50a:	005b      	lsls	r3, r3, #1
 801a50c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a510:	4313      	orrs	r3, r2
 801a512:	83a3      	strh	r3, [r4, #28]
 801a514:	7a63      	ldrb	r3, [r4, #9]
 801a516:	2b04      	cmp	r3, #4
 801a518:	d10f      	bne.n	801a53a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801a51a:	68e0      	ldr	r0, [r4, #12]
 801a51c:	462a      	mov	r2, r5
 801a51e:	4631      	mov	r1, r6
 801a520:	6803      	ldr	r3, [r0, #0]
 801a522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a524:	4798      	blx	r3
 801a526:	7b6b      	ldrb	r3, [r5, #13]
 801a528:	005b      	lsls	r3, r3, #1
 801a52a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a52e:	7aab      	ldrb	r3, [r5, #10]
 801a530:	4313      	orrs	r3, r2
 801a532:	4418      	add	r0, r3
 801a534:	8ba3      	ldrh	r3, [r4, #28]
 801a536:	4418      	add	r0, r3
 801a538:	83a0      	strh	r0, [r4, #28]
 801a53a:	4620      	mov	r0, r4
 801a53c:	bd70      	pop	{r4, r5, r6, pc}

0801a53e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a53e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a542:	2400      	movs	r4, #0
 801a544:	b085      	sub	sp, #20
 801a546:	4681      	mov	r9, r0
 801a548:	4688      	mov	r8, r1
 801a54a:	4692      	mov	sl, r2
 801a54c:	469b      	mov	fp, r3
 801a54e:	4627      	mov	r7, r4
 801a550:	4625      	mov	r5, r4
 801a552:	4626      	mov	r6, r4
 801a554:	4554      	cmp	r4, sl
 801a556:	da2a      	bge.n	801a5ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a558:	2300      	movs	r3, #0
 801a55a:	9303      	str	r3, [sp, #12]
 801a55c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a560:	429d      	cmp	r5, r3
 801a562:	d004      	beq.n	801a56e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801a564:	f242 030b 	movw	r3, #8203	; 0x200b
 801a568:	429d      	cmp	r5, r3
 801a56a:	bf18      	it	ne
 801a56c:	462f      	movne	r7, r5
 801a56e:	ab03      	add	r3, sp, #12
 801a570:	4642      	mov	r2, r8
 801a572:	4659      	mov	r1, fp
 801a574:	4648      	mov	r0, r9
 801a576:	f002 fb45 	bl	801cc04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a57a:	4605      	mov	r5, r0
 801a57c:	b1b8      	cbz	r0, 801a5ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a57e:	280a      	cmp	r0, #10
 801a580:	d015      	beq.n	801a5ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a582:	9a03      	ldr	r2, [sp, #12]
 801a584:	b18a      	cbz	r2, 801a5aa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801a586:	7b50      	ldrb	r0, [r2, #13]
 801a588:	4639      	mov	r1, r7
 801a58a:	7a93      	ldrb	r3, [r2, #10]
 801a58c:	0040      	lsls	r0, r0, #1
 801a58e:	8895      	ldrh	r5, [r2, #4]
 801a590:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a594:	4303      	orrs	r3, r0
 801a596:	4640      	mov	r0, r8
 801a598:	9301      	str	r3, [sp, #4]
 801a59a:	f8d8 3000 	ldr.w	r3, [r8]
 801a59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a5a0:	4798      	blx	r3
 801a5a2:	9b01      	ldr	r3, [sp, #4]
 801a5a4:	4418      	add	r0, r3
 801a5a6:	4406      	add	r6, r0
 801a5a8:	b2b6      	uxth	r6, r6
 801a5aa:	3401      	adds	r4, #1
 801a5ac:	e7d2      	b.n	801a554 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801a5ae:	4630      	mov	r0, r6
 801a5b0:	b005      	add	sp, #20
 801a5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a5b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a5b6:	2a02      	cmp	r2, #2
 801a5b8:	b530      	push	{r4, r5, lr}
 801a5ba:	d011      	beq.n	801a5e0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a5bc:	2a03      	cmp	r2, #3
 801a5be:	d01c      	beq.n	801a5fa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a5c0:	2a01      	cmp	r2, #1
 801a5c2:	d10c      	bne.n	801a5de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a5c4:	888b      	ldrh	r3, [r1, #4]
 801a5c6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a5ca:	8801      	ldrh	r1, [r0, #0]
 801a5cc:	1a9b      	subs	r3, r3, r2
 801a5ce:	8844      	ldrh	r4, [r0, #2]
 801a5d0:	1a5b      	subs	r3, r3, r1
 801a5d2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a5d6:	8004      	strh	r4, [r0, #0]
 801a5d8:	8043      	strh	r3, [r0, #2]
 801a5da:	8081      	strh	r1, [r0, #4]
 801a5dc:	80c2      	strh	r2, [r0, #6]
 801a5de:	bd30      	pop	{r4, r5, pc}
 801a5e0:	88cb      	ldrh	r3, [r1, #6]
 801a5e2:	88c2      	ldrh	r2, [r0, #6]
 801a5e4:	1a9b      	subs	r3, r3, r2
 801a5e6:	8842      	ldrh	r2, [r0, #2]
 801a5e8:	1a9b      	subs	r3, r3, r2
 801a5ea:	888a      	ldrh	r2, [r1, #4]
 801a5ec:	8881      	ldrh	r1, [r0, #4]
 801a5ee:	8043      	strh	r3, [r0, #2]
 801a5f0:	1a52      	subs	r2, r2, r1
 801a5f2:	8801      	ldrh	r1, [r0, #0]
 801a5f4:	1a52      	subs	r2, r2, r1
 801a5f6:	8002      	strh	r2, [r0, #0]
 801a5f8:	e7f1      	b.n	801a5de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a5fa:	88cb      	ldrh	r3, [r1, #6]
 801a5fc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a600:	8841      	ldrh	r1, [r0, #2]
 801a602:	1a9b      	subs	r3, r3, r2
 801a604:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a608:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a60c:	1a5b      	subs	r3, r3, r1
 801a60e:	8045      	strh	r5, [r0, #2]
 801a610:	8082      	strh	r2, [r0, #4]
 801a612:	8003      	strh	r3, [r0, #0]
 801a614:	80c4      	strh	r4, [r0, #6]
 801a616:	e7e2      	b.n	801a5de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a618 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a61c:	b09f      	sub	sp, #124	; 0x7c
 801a61e:	9116      	str	r1, [sp, #88]	; 0x58
 801a620:	9317      	str	r3, [sp, #92]	; 0x5c
 801a622:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a624:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a626:	8809      	ldrh	r1, [r1, #0]
 801a628:	889b      	ldrh	r3, [r3, #4]
 801a62a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801a62e:	440b      	add	r3, r1
 801a630:	9212      	str	r2, [sp, #72]	; 0x48
 801a632:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801a636:	b21b      	sxth	r3, r3
 801a638:	9011      	str	r0, [sp, #68]	; 0x44
 801a63a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801a63e:	9310      	str	r3, [sp, #64]	; 0x40
 801a640:	f8d8 3000 	ldr.w	r3, [r8]
 801a644:	7a59      	ldrb	r1, [r3, #9]
 801a646:	7a1b      	ldrb	r3, [r3, #8]
 801a648:	9114      	str	r1, [sp, #80]	; 0x50
 801a64a:	9315      	str	r3, [sp, #84]	; 0x54
 801a64c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a64e:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a652:	2a00      	cmp	r2, #0
 801a654:	d067      	beq.n	801a726 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801a656:	f898 3010 	ldrb.w	r3, [r8, #16]
 801a65a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a65c:	2b04      	cmp	r3, #4
 801a65e:	bf14      	ite	ne
 801a660:	2301      	movne	r3, #1
 801a662:	2302      	moveq	r3, #2
 801a664:	4413      	add	r3, r2
 801a666:	f04f 0900 	mov.w	r9, #0
 801a66a:	930f      	str	r3, [sp, #60]	; 0x3c
 801a66c:	464c      	mov	r4, r9
 801a66e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801a672:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801a676:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801a67a:	4293      	cmp	r3, r2
 801a67c:	f280 808c 	bge.w	801a798 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a680:	2300      	movs	r3, #0
 801a682:	931c      	str	r3, [sp, #112]	; 0x70
 801a684:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a688:	429c      	cmp	r4, r3
 801a68a:	d006      	beq.n	801a69a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801a68c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a68e:	f242 020b 	movw	r2, #8203	; 0x200b
 801a692:	4294      	cmp	r4, r2
 801a694:	bf18      	it	ne
 801a696:	4623      	movne	r3, r4
 801a698:	930d      	str	r3, [sp, #52]	; 0x34
 801a69a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a69c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801a69e:	f8d8 2000 	ldr.w	r2, [r8]
 801a6a2:	428b      	cmp	r3, r1
 801a6a4:	db41      	blt.n	801a72a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801a6a6:	6813      	ldr	r3, [r2, #0]
 801a6a8:	4610      	mov	r0, r2
 801a6aa:	695b      	ldr	r3, [r3, #20]
 801a6ac:	4798      	blx	r3
 801a6ae:	4604      	mov	r4, r0
 801a6b0:	f8d8 0000 	ldr.w	r0, [r8]
 801a6b4:	aa1d      	add	r2, sp, #116	; 0x74
 801a6b6:	4621      	mov	r1, r4
 801a6b8:	6803      	ldr	r3, [r0, #0]
 801a6ba:	689e      	ldr	r6, [r3, #8]
 801a6bc:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a6c0:	47b0      	blx	r6
 801a6c2:	901c      	str	r0, [sp, #112]	; 0x70
 801a6c4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a6c8:	429c      	cmp	r4, r3
 801a6ca:	f000 80ea 	beq.w	801a8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a6ce:	f242 030b 	movw	r3, #8203	; 0x200b
 801a6d2:	429c      	cmp	r4, r3
 801a6d4:	f000 80e5 	beq.w	801a8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a6d8:	2c00      	cmp	r4, #0
 801a6da:	f000 80f7 	beq.w	801a8cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a6de:	2c0a      	cmp	r4, #10
 801a6e0:	d060      	beq.n	801a7a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a6e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a6e4:	b36a      	cbz	r2, 801a742 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801a6e6:	8894      	ldrh	r4, [r2, #4]
 801a6e8:	f1bb 0f00 	cmp.w	fp, #0
 801a6ec:	d03b      	beq.n	801a766 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801a6ee:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a6f2:	f1bb 0f01 	cmp.w	fp, #1
 801a6f6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a6fa:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801a6fe:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a702:	ea49 0903 	orr.w	r9, r9, r3
 801a706:	d134      	bne.n	801a772 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801a708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a70a:	eba5 0509 	sub.w	r5, r5, r9
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d14f      	bne.n	801a7b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a712:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a714:	eb09 0305 	add.w	r3, r9, r5
 801a718:	4413      	add	r3, r2
 801a71a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a71c:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a720:	4293      	cmp	r3, r2
 801a722:	da51      	bge.n	801a7c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801a724:	e038      	b.n	801a798 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a726:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a728:	e79d      	b.n	801a666 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801a72a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a72e:	4659      	mov	r1, fp
 801a730:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a732:	9301      	str	r3, [sp, #4]
 801a734:	ab1d      	add	r3, sp, #116	; 0x74
 801a736:	9300      	str	r3, [sp, #0]
 801a738:	ab1c      	add	r3, sp, #112	; 0x70
 801a73a:	f002 fab7 	bl	801ccac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a73e:	4604      	mov	r4, r0
 801a740:	e7c0      	b.n	801a6c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801a742:	f8d8 0000 	ldr.w	r0, [r8]
 801a746:	6803      	ldr	r3, [r0, #0]
 801a748:	691b      	ldr	r3, [r3, #16]
 801a74a:	4798      	blx	r3
 801a74c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a750:	4298      	cmp	r0, r3
 801a752:	f000 80a6 	beq.w	801a8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a756:	f242 030b 	movw	r3, #8203	; 0x200b
 801a75a:	4298      	cmp	r0, r3
 801a75c:	f000 80a1 	beq.w	801a8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a760:	f1bb 0f00 	cmp.w	fp, #0
 801a764:	d100      	bne.n	801a768 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801a766:	444d      	add	r5, r9
 801a768:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a76a:	2a00      	cmp	r2, #0
 801a76c:	d1bf      	bne.n	801a6ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801a76e:	4691      	mov	r9, r2
 801a770:	e097      	b.n	801a8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a774:	2b00      	cmp	r3, #0
 801a776:	f000 80ab 	beq.w	801a8d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801a77a:	f1bb 0f00 	cmp.w	fp, #0
 801a77e:	d118      	bne.n	801a7b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a780:	f8d8 0000 	ldr.w	r0, [r8]
 801a784:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a786:	6803      	ldr	r3, [r0, #0]
 801a788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a78a:	4798      	blx	r3
 801a78c:	4405      	add	r5, r0
 801a78e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a790:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a792:	1aeb      	subs	r3, r5, r3
 801a794:	4293      	cmp	r3, r2
 801a796:	dd17      	ble.n	801a7c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801a798:	2c00      	cmp	r4, #0
 801a79a:	f000 8097 	beq.w	801a8cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a79e:	2c0a      	cmp	r4, #10
 801a7a0:	f040 8085 	bne.w	801a8ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801a7a4:	240a      	movs	r4, #10
 801a7a6:	fab4 f084 	clz	r0, r4
 801a7aa:	0940      	lsrs	r0, r0, #5
 801a7ac:	b01f      	add	sp, #124	; 0x7c
 801a7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7b2:	f8d8 0000 	ldr.w	r0, [r8]
 801a7b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a7b8:	6803      	ldr	r3, [r0, #0]
 801a7ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a7bc:	4798      	blx	r3
 801a7be:	f1bb 0f01 	cmp.w	fp, #1
 801a7c2:	eba5 0500 	sub.w	r5, r5, r0
 801a7c6:	d0a4      	beq.n	801a712 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801a7c8:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a7ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a7cc:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a7d0:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a7d4:	7b43      	ldrb	r3, [r0, #13]
 801a7d6:	4429      	add	r1, r5
 801a7d8:	015b      	lsls	r3, r3, #5
 801a7da:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a7de:	7983      	ldrb	r3, [r0, #6]
 801a7e0:	4313      	orrs	r3, r2
 801a7e2:	440b      	add	r3, r1
 801a7e4:	42b3      	cmp	r3, r6
 801a7e6:	db5c      	blt.n	801a8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a7e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a7ea:	4299      	cmp	r1, r3
 801a7ec:	da59      	bge.n	801a8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a7ee:	f8d8 0000 	ldr.w	r0, [r8]
 801a7f2:	42ae      	cmp	r6, r5
 801a7f4:	6803      	ldr	r3, [r0, #0]
 801a7f6:	bfcc      	ite	gt
 801a7f8:	1b76      	subgt	r6, r6, r5
 801a7fa:	2600      	movle	r6, #0
 801a7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7fe:	bfc8      	it	gt
 801a800:	b2b6      	uxthgt	r6, r6
 801a802:	4798      	blx	r3
 801a804:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a806:	7b5a      	ldrb	r2, [r3, #13]
 801a808:	00d1      	lsls	r1, r2, #3
 801a80a:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801a80e:	7a19      	ldrb	r1, [r3, #8]
 801a810:	4339      	orrs	r1, r7
 801a812:	0657      	lsls	r7, r2, #25
 801a814:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801a816:	bf48      	it	mi
 801a818:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801a81c:	4407      	add	r7, r0
 801a81e:	bf48      	it	mi
 801a820:	b209      	sxthmi	r1, r1
 801a822:	1a7f      	subs	r7, r7, r1
 801a824:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a826:	b2bf      	uxth	r7, r7
 801a828:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a82c:	fa0f fa87 	sxth.w	sl, r7
 801a830:	4551      	cmp	r1, sl
 801a832:	dd3a      	ble.n	801a8aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801a834:	0112      	lsls	r2, r2, #4
 801a836:	79d8      	ldrb	r0, [r3, #7]
 801a838:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a83c:	4302      	orrs	r2, r0
 801a83e:	4492      	add	sl, r2
 801a840:	4551      	cmp	r1, sl
 801a842:	dc2e      	bgt.n	801a8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a844:	1bcf      	subs	r7, r1, r7
 801a846:	468a      	mov	sl, r1
 801a848:	b2bf      	uxth	r7, r7
 801a84a:	9319      	str	r3, [sp, #100]	; 0x64
 801a84c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a84e:	f8d8 0000 	ldr.w	r0, [r8]
 801a852:	681a      	ldr	r2, [r3, #0]
 801a854:	6801      	ldr	r1, [r0, #0]
 801a856:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801a858:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a85a:	9313      	str	r3, [sp, #76]	; 0x4c
 801a85c:	9218      	str	r2, [sp, #96]	; 0x60
 801a85e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801a860:	4788      	blx	r1
 801a862:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a866:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a868:	910b      	str	r1, [sp, #44]	; 0x2c
 801a86a:	f898 100e 	ldrb.w	r1, [r8, #14]
 801a86e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a870:	910a      	str	r1, [sp, #40]	; 0x28
 801a872:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801a876:	9109      	str	r1, [sp, #36]	; 0x24
 801a878:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a87c:	9305      	str	r3, [sp, #20]
 801a87e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a880:	9206      	str	r2, [sp, #24]
 801a882:	e9cd a601 	strd	sl, r6, [sp, #4]
 801a886:	442e      	add	r6, r5
 801a888:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801a88c:	b236      	sxth	r6, r6
 801a88e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a890:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801a894:	9600      	str	r6, [sp, #0]
 801a896:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a898:	681a      	ldr	r2, [r3, #0]
 801a89a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a89c:	685b      	ldr	r3, [r3, #4]
 801a89e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a8a0:	47b0      	blx	r6
 801a8a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a8a4:	3301      	adds	r3, #1
 801a8a6:	930e      	str	r3, [sp, #56]	; 0x38
 801a8a8:	e6e5      	b.n	801a676 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801a8aa:	2700      	movs	r7, #0
 801a8ac:	e7cd      	b.n	801a84a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801a8ae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a8b0:	3501      	adds	r5, #1
 801a8b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a8b4:	429d      	cmp	r5, r3
 801a8b6:	f6bf af76 	bge.w	801a7a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a8ba:	4659      	mov	r1, fp
 801a8bc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a8be:	f7fa f89d 	bl	80149fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a8c2:	4604      	mov	r4, r0
 801a8c4:	b110      	cbz	r0, 801a8cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a8c6:	280a      	cmp	r0, #10
 801a8c8:	d1f2      	bne.n	801a8b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801a8ca:	e76b      	b.n	801a7a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a8cc:	2400      	movs	r4, #0
 801a8ce:	e76a      	b.n	801a7a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a8d0:	f1bb 0f00 	cmp.w	fp, #0
 801a8d4:	f43f af5b 	beq.w	801a78e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801a8d8:	e776      	b.n	801a7c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801a8da <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a8da:	b530      	push	{r4, r5, lr}
 801a8dc:	8a44      	ldrh	r4, [r0, #18]
 801a8de:	8ac5      	ldrh	r5, [r0, #22]
 801a8e0:	82c3      	strh	r3, [r0, #22]
 801a8e2:	442c      	add	r4, r5
 801a8e4:	1ae4      	subs	r4, r4, r3
 801a8e6:	8b03      	ldrh	r3, [r0, #24]
 801a8e8:	8244      	strh	r4, [r0, #18]
 801a8ea:	8a84      	ldrh	r4, [r0, #20]
 801a8ec:	4422      	add	r2, r4
 801a8ee:	440c      	add	r4, r1
 801a8f0:	1a59      	subs	r1, r3, r1
 801a8f2:	8342      	strh	r2, [r0, #26]
 801a8f4:	8284      	strh	r4, [r0, #20]
 801a8f6:	8301      	strh	r1, [r0, #24]
 801a8f8:	bd30      	pop	{r4, r5, pc}

0801a8fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801a8fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8fe:	7a43      	ldrb	r3, [r0, #9]
 801a900:	b087      	sub	sp, #28
 801a902:	4604      	mov	r4, r0
 801a904:	460f      	mov	r7, r1
 801a906:	1eda      	subs	r2, r3, #3
 801a908:	b2d2      	uxtb	r2, r2
 801a90a:	2900      	cmp	r1, #0
 801a90c:	d036      	beq.n	801a97c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801a90e:	2a01      	cmp	r2, #1
 801a910:	d932      	bls.n	801a978 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801a912:	1e58      	subs	r0, r3, #1
 801a914:	f1d0 0b00 	rsbs	fp, r0, #0
 801a918:	eb4b 0b00 	adc.w	fp, fp, r0
 801a91c:	1e99      	subs	r1, r3, #2
 801a91e:	424b      	negs	r3, r1
 801a920:	414b      	adcs	r3, r1
 801a922:	9303      	str	r3, [sp, #12]
 801a924:	2300      	movs	r3, #0
 801a926:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801a92a:	2500      	movs	r5, #0
 801a92c:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801a930:	46a9      	mov	r9, r5
 801a932:	8265      	strh	r5, [r4, #18]
 801a934:	82a5      	strh	r5, [r4, #20]
 801a936:	2300      	movs	r3, #0
 801a938:	9305      	str	r3, [sp, #20]
 801a93a:	8823      	ldrh	r3, [r4, #0]
 801a93c:	2b20      	cmp	r3, #32
 801a93e:	d02b      	beq.n	801a998 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801a940:	eba3 020a 	sub.w	r2, r3, sl
 801a944:	4256      	negs	r6, r2
 801a946:	4156      	adcs	r6, r2
 801a948:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a94c:	4293      	cmp	r3, r2
 801a94e:	d004      	beq.n	801a95a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a950:	4553      	cmp	r3, sl
 801a952:	bf16      	itet	ne
 801a954:	4699      	movne	r9, r3
 801a956:	2601      	moveq	r6, #1
 801a958:	2600      	movne	r6, #0
 801a95a:	ab05      	add	r3, sp, #20
 801a95c:	68e2      	ldr	r2, [r4, #12]
 801a95e:	7a21      	ldrb	r1, [r4, #8]
 801a960:	6860      	ldr	r0, [r4, #4]
 801a962:	f002 f94f 	bl	801cc04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a966:	8020      	strh	r0, [r4, #0]
 801a968:	b9c8      	cbnz	r0, 801a99e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801a96a:	8b22      	ldrh	r2, [r4, #24]
 801a96c:	2300      	movs	r3, #0
 801a96e:	4611      	mov	r1, r2
 801a970:	4620      	mov	r0, r4
 801a972:	f7ff ffb2 	bl	801a8da <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a976:	e066      	b.n	801aa46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a978:	468b      	mov	fp, r1
 801a97a:	e7cf      	b.n	801a91c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801a97c:	3b01      	subs	r3, #1
 801a97e:	2a01      	cmp	r2, #1
 801a980:	9103      	str	r1, [sp, #12]
 801a982:	468b      	mov	fp, r1
 801a984:	bf8c      	ite	hi
 801a986:	2200      	movhi	r2, #0
 801a988:	2201      	movls	r2, #1
 801a98a:	2b01      	cmp	r3, #1
 801a98c:	9202      	str	r2, [sp, #8]
 801a98e:	bf8c      	ite	hi
 801a990:	2300      	movhi	r3, #0
 801a992:	2301      	movls	r3, #1
 801a994:	9301      	str	r3, [sp, #4]
 801a996:	e7c8      	b.n	801a92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801a998:	4699      	mov	r9, r3
 801a99a:	2601      	movs	r6, #1
 801a99c:	e7dd      	b.n	801a95a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a99e:	8ae3      	ldrh	r3, [r4, #22]
 801a9a0:	280a      	cmp	r0, #10
 801a9a2:	f103 0301 	add.w	r3, r3, #1
 801a9a6:	82e3      	strh	r3, [r4, #22]
 801a9a8:	d0df      	beq.n	801a96a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801a9aa:	9a05      	ldr	r2, [sp, #20]
 801a9ac:	bb42      	cbnz	r2, 801aa00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801a9ae:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a9b2:	4298      	cmp	r0, r3
 801a9b4:	d001      	beq.n	801a9ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a9b6:	4550      	cmp	r0, sl
 801a9b8:	d1bd      	bne.n	801a936 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a9ba:	8823      	ldrh	r3, [r4, #0]
 801a9bc:	8b21      	ldrh	r1, [r4, #24]
 801a9be:	2b20      	cmp	r3, #32
 801a9c0:	d001      	beq.n	801a9c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801a9c2:	4553      	cmp	r3, sl
 801a9c4:	d131      	bne.n	801aa2a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801a9c6:	2e00      	cmp	r6, #0
 801a9c8:	bf0a      	itet	eq
 801a9ca:	460d      	moveq	r5, r1
 801a9cc:	4630      	movne	r0, r6
 801a9ce:	2001      	moveq	r0, #1
 801a9d0:	440a      	add	r2, r1
 801a9d2:	8aa3      	ldrh	r3, [r4, #20]
 801a9d4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a9d8:	b292      	uxth	r2, r2
 801a9da:	8322      	strh	r2, [r4, #24]
 801a9dc:	4413      	add	r3, r2
 801a9de:	2f00      	cmp	r7, #0
 801a9e0:	d03a      	beq.n	801aa58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801a9e2:	f1bb 0f00 	cmp.w	fp, #0
 801a9e6:	d102      	bne.n	801a9ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801a9e8:	9903      	ldr	r1, [sp, #12]
 801a9ea:	b301      	cbz	r1, 801aa2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a9ec:	b1f8      	cbz	r0, 801aa2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a9ee:	8ba1      	ldrh	r1, [r4, #28]
 801a9f0:	4419      	add	r1, r3
 801a9f2:	458c      	cmp	ip, r1
 801a9f4:	da2a      	bge.n	801aa4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a9f6:	8a61      	ldrh	r1, [r4, #18]
 801a9f8:	b341      	cbz	r1, 801aa4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a9fa:	4563      	cmp	r3, ip
 801a9fc:	dd9b      	ble.n	801a936 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a9fe:	e01c      	b.n	801aa3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801aa00:	8893      	ldrh	r3, [r2, #4]
 801aa02:	4649      	mov	r1, r9
 801aa04:	8023      	strh	r3, [r4, #0]
 801aa06:	f892 800d 	ldrb.w	r8, [r2, #13]
 801aa0a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801aa0e:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801aa12:	f892 800a 	ldrb.w	r8, [r2, #10]
 801aa16:	ea48 0800 	orr.w	r8, r8, r0
 801aa1a:	68e0      	ldr	r0, [r4, #12]
 801aa1c:	6803      	ldr	r3, [r0, #0]
 801aa1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa20:	4798      	blx	r3
 801aa22:	eb08 0200 	add.w	r2, r8, r0
 801aa26:	b292      	uxth	r2, r2
 801aa28:	e7c7      	b.n	801a9ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801aa2a:	2000      	movs	r0, #0
 801aa2c:	e7d0      	b.n	801a9d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801aa2e:	4563      	cmp	r3, ip
 801aa30:	dd81      	ble.n	801a936 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa32:	8a63      	ldrh	r3, [r4, #18]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	f43f af7e 	beq.w	801a936 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa3a:	2301      	movs	r3, #1
 801aa3c:	8ba2      	ldrh	r2, [r4, #28]
 801aa3e:	77a3      	strb	r3, [r4, #30]
 801aa40:	8b63      	ldrh	r3, [r4, #26]
 801aa42:	4413      	add	r3, r2
 801aa44:	8363      	strh	r3, [r4, #26]
 801aa46:	b007      	add	sp, #28
 801aa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa4c:	2300      	movs	r3, #0
 801aa4e:	4611      	mov	r1, r2
 801aa50:	4620      	mov	r0, r4
 801aa52:	f7ff ff42 	bl	801a8da <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801aa56:	e76e      	b.n	801a936 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa58:	4563      	cmp	r3, ip
 801aa5a:	dd14      	ble.n	801aa86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801aa5c:	9b02      	ldr	r3, [sp, #8]
 801aa5e:	b113      	cbz	r3, 801aa66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801aa60:	2301      	movs	r3, #1
 801aa62:	460a      	mov	r2, r1
 801aa64:	e783      	b.n	801a96e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801aa66:	9b01      	ldr	r3, [sp, #4]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	f43f af64 	beq.w	801a936 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa6e:	2800      	cmp	r0, #0
 801aa70:	f47f af61 	bne.w	801a936 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa74:	b116      	cbz	r6, 801aa7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801aa76:	2301      	movs	r3, #1
 801aa78:	462a      	mov	r2, r5
 801aa7a:	e779      	b.n	801a970 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801aa7c:	8a63      	ldrh	r3, [r4, #18]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	f43f af59 	beq.w	801a936 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa84:	e7df      	b.n	801aa46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801aa86:	2800      	cmp	r0, #0
 801aa88:	f47f af55 	bne.w	801a936 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa8c:	2e00      	cmp	r6, #0
 801aa8e:	f43f af52 	beq.w	801a936 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa92:	2301      	movs	r3, #1
 801aa94:	462a      	mov	r2, r5
 801aa96:	e7db      	b.n	801aa50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801aa98 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801aa98:	b530      	push	{r4, r5, lr}
 801aa9a:	4605      	mov	r5, r0
 801aa9c:	b08b      	sub	sp, #44	; 0x2c
 801aa9e:	b191      	cbz	r1, 801aac6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801aaa0:	2401      	movs	r4, #1
 801aaa2:	e9cd 3100 	strd	r3, r1, [sp]
 801aaa6:	4613      	mov	r3, r2
 801aaa8:	4601      	mov	r1, r0
 801aaaa:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801aaae:	a802      	add	r0, sp, #8
 801aab0:	f7ff fd0b 	bl	801a4ca <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801aab4:	2100      	movs	r1, #0
 801aab6:	a802      	add	r0, sp, #8
 801aab8:	f7ff ff1f 	bl	801a8fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801aabc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801aac0:	b163      	cbz	r3, 801aadc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801aac2:	3401      	adds	r4, #1
 801aac4:	e7f6      	b.n	801aab4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801aac6:	2401      	movs	r4, #1
 801aac8:	f002 f98e 	bl	801cde8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aacc:	280a      	cmp	r0, #10
 801aace:	4628      	mov	r0, r5
 801aad0:	bf08      	it	eq
 801aad2:	3401      	addeq	r4, #1
 801aad4:	f002 f988 	bl	801cde8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aad8:	2800      	cmp	r0, #0
 801aada:	d1f7      	bne.n	801aacc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801aadc:	b2a0      	uxth	r0, r4
 801aade:	b00b      	add	sp, #44	; 0x2c
 801aae0:	bd30      	pop	{r4, r5, pc}

0801aae2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801aae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aae6:	b0db      	sub	sp, #364	; 0x16c
 801aae8:	4689      	mov	r9, r1
 801aaea:	461c      	mov	r4, r3
 801aaec:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 801aaf0:	900a      	str	r0, [sp, #40]	; 0x28
 801aaf2:	f1ba 0f00 	cmp.w	sl, #0
 801aaf6:	f000 80a5 	beq.w	801ac44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	f000 80a1 	beq.w	801ac44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801ab02:	7ba3      	ldrb	r3, [r4, #14]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	f000 809d 	beq.w	801ac44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801ab0a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801ab0e:	6810      	ldr	r0, [r2, #0]
 801ab10:	6851      	ldr	r1, [r2, #4]
 801ab12:	2500      	movs	r5, #0
 801ab14:	4643      	mov	r3, r8
 801ab16:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801ab1a:	950e      	str	r5, [sp, #56]	; 0x38
 801ab1c:	af18      	add	r7, sp, #96	; 0x60
 801ab1e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801ab22:	79a2      	ldrb	r2, [r4, #6]
 801ab24:	c303      	stmia	r3!, {r0, r1}
 801ab26:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801ab2a:	a90e      	add	r1, sp, #56	; 0x38
 801ab2c:	4640      	mov	r0, r8
 801ab2e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ab32:	f7ff fd40 	bl	801a5b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801ab36:	a90e      	add	r1, sp, #56	; 0x38
 801ab38:	79a2      	ldrb	r2, [r4, #6]
 801ab3a:	4608      	mov	r0, r1
 801ab3c:	f7ff fd3b 	bl	801a5b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801ab40:	4638      	mov	r0, r7
 801ab42:	f001 fd20 	bl	801c586 <_ZN8touchgfx12TextProviderC1Ev>
 801ab46:	6820      	ldr	r0, [r4, #0]
 801ab48:	6803      	ldr	r3, [r0, #0]
 801ab4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab4c:	4798      	blx	r3
 801ab4e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801ab50:	4603      	mov	r3, r0
 801ab52:	4651      	mov	r1, sl
 801ab54:	4638      	mov	r0, r7
 801ab56:	f001 fd5b 	bl	801c610 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ab5a:	7923      	ldrb	r3, [r4, #4]
 801ab5c:	6820      	ldr	r0, [r4, #0]
 801ab5e:	9308      	str	r3, [sp, #32]
 801ab60:	6803      	ldr	r3, [r0, #0]
 801ab62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab64:	4798      	blx	r3
 801ab66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab6a:	181e      	adds	r6, r3, r0
 801ab6c:	42ae      	cmp	r6, r5
 801ab6e:	dd06      	ble.n	801ab7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801ab70:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801ab74:	4282      	cmp	r2, r0
 801ab76:	bfa4      	itt	ge
 801ab78:	189d      	addge	r5, r3, r2
 801ab7a:	fb95 f5f6 	sdivge	r5, r5, r6
 801ab7e:	a82e      	add	r0, sp, #184	; 0xb8
 801ab80:	f001 fd01 	bl	801c586 <_ZN8touchgfx12TextProviderC1Ev>
 801ab84:	7c23      	ldrb	r3, [r4, #16]
 801ab86:	b14b      	cbz	r3, 801ab9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 801ab88:	6820      	ldr	r0, [r4, #0]
 801ab8a:	6803      	ldr	r3, [r0, #0]
 801ab8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab8e:	4798      	blx	r3
 801ab90:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801ab92:	4603      	mov	r3, r0
 801ab94:	4651      	mov	r1, sl
 801ab96:	a82e      	add	r0, sp, #184	; 0xb8
 801ab98:	f001 fd3a 	bl	801c610 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ab9c:	7c21      	ldrb	r1, [r4, #16]
 801ab9e:	a810      	add	r0, sp, #64	; 0x40
 801aba0:	7963      	ldrb	r3, [r4, #5]
 801aba2:	9101      	str	r1, [sp, #4]
 801aba4:	6821      	ldr	r1, [r4, #0]
 801aba6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801abaa:	9100      	str	r1, [sp, #0]
 801abac:	a92e      	add	r1, sp, #184	; 0xb8
 801abae:	f7ff fc8c 	bl	801a4ca <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801abb2:	7c23      	ldrb	r3, [r4, #16]
 801abb4:	b9bb      	cbnz	r3, 801abe6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 801abb6:	fa1f fa86 	uxth.w	sl, r6
 801abba:	2d00      	cmp	r5, #0
 801abbc:	dd45      	ble.n	801ac4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801abbe:	4638      	mov	r0, r7
 801abc0:	f002 f912 	bl	801cde8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801abc4:	2800      	cmp	r0, #0
 801abc6:	d03d      	beq.n	801ac44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801abc8:	280a      	cmp	r0, #10
 801abca:	d1f6      	bne.n	801abba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801abcc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801abd0:	3d01      	subs	r5, #1
 801abd2:	4453      	add	r3, sl
 801abd4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801abd8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801abdc:	eba3 030a 	sub.w	r3, r3, sl
 801abe0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801abe4:	e7e9      	b.n	801abba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801abe6:	0073      	lsls	r3, r6, #1
 801abe8:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801abec:	fa1f fa86 	uxth.w	sl, r6
 801abf0:	9309      	str	r3, [sp, #36]	; 0x24
 801abf2:	2d00      	cmp	r5, #0
 801abf4:	dd29      	ble.n	801ac4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801abf6:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801abfa:	a810      	add	r0, sp, #64	; 0x40
 801abfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abfe:	428b      	cmp	r3, r1
 801ac00:	bfd4      	ite	le
 801ac02:	2100      	movle	r1, #0
 801ac04:	2101      	movgt	r1, #1
 801ac06:	f7ff fe78 	bl	801a8fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801ac0a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 801ac0e:	3b01      	subs	r3, #1
 801ac10:	b29b      	uxth	r3, r3
 801ac12:	455b      	cmp	r3, fp
 801ac14:	930b      	str	r3, [sp, #44]	; 0x2c
 801ac16:	d005      	beq.n	801ac24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801ac18:	7961      	ldrb	r1, [r4, #5]
 801ac1a:	4638      	mov	r0, r7
 801ac1c:	f7f9 feee 	bl	80149fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ac20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac22:	e7f4      	b.n	801ac0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 801ac24:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801ac28:	3d01      	subs	r5, #1
 801ac2a:	4453      	add	r3, sl
 801ac2c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ac30:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ac34:	eba3 030a 	sub.w	r3, r3, sl
 801ac38:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ac3c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d1d6      	bne.n	801abf2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 801ac44:	b05b      	add	sp, #364	; 0x16c
 801ac46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac4a:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801ac4e:	ad44      	add	r5, sp, #272	; 0x110
 801ac50:	f04f 0b00 	mov.w	fp, #0
 801ac54:	7c23      	ldrb	r3, [r4, #16]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d067      	beq.n	801ad2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801ac5a:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801ac5e:	a810      	add	r0, sp, #64	; 0x40
 801ac60:	458a      	cmp	sl, r1
 801ac62:	bfd4      	ite	le
 801ac64:	2100      	movle	r1, #0
 801ac66:	2101      	movgt	r1, #1
 801ac68:	f7ff fe47 	bl	801a8fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801ac6c:	9b08      	ldr	r3, [sp, #32]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d056      	beq.n	801ad20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801ac72:	7c23      	ldrb	r3, [r4, #16]
 801ac74:	2258      	movs	r2, #88	; 0x58
 801ac76:	4639      	mov	r1, r7
 801ac78:	4628      	mov	r0, r5
 801ac7a:	9309      	str	r3, [sp, #36]	; 0x24
 801ac7c:	f00c fd14 	bl	80276a8 <memcpy>
 801ac80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d059      	beq.n	801ad3a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801ac86:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801ac8a:	7922      	ldrb	r2, [r4, #4]
 801ac8c:	2a01      	cmp	r2, #1
 801ac8e:	d13d      	bne.n	801ad0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 801ac90:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801ac94:	1ac0      	subs	r0, r0, r3
 801ac96:	2302      	movs	r3, #2
 801ac98:	fb90 f0f3 	sdiv	r0, r0, r3
 801ac9c:	b200      	sxth	r0, r0
 801ac9e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801aca2:	4418      	add	r0, r3
 801aca4:	7c23      	ldrb	r3, [r4, #16]
 801aca6:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d03a      	beq.n	801ad24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801acae:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801acb2:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801acb6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801acba:	9500      	str	r5, [sp, #0]
 801acbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801acbe:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801acc2:	e9cd b703 	strd	fp, r7, [sp, #12]
 801acc6:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801acca:	464a      	mov	r2, r9
 801accc:	2100      	movs	r1, #0
 801acce:	f7ff fca3 	bl	801a618 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801acd2:	2800      	cmp	r0, #0
 801acd4:	d1b6      	bne.n	801ac44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801acd6:	b2b2      	uxth	r2, r6
 801acd8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801acdc:	4611      	mov	r1, r2
 801acde:	4413      	add	r3, r2
 801ace0:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801ace4:	b21b      	sxth	r3, r3
 801ace6:	1a52      	subs	r2, r2, r1
 801ace8:	7c21      	ldrb	r1, [r4, #16]
 801acea:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801acee:	b212      	sxth	r2, r2
 801acf0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801acf4:	b109      	cbz	r1, 801acfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801acf6:	42b2      	cmp	r2, r6
 801acf8:	dba4      	blt.n	801ac44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801acfa:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801acfe:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801ad02:	440a      	add	r2, r1
 801ad04:	b212      	sxth	r2, r2
 801ad06:	4293      	cmp	r3, r2
 801ad08:	dda4      	ble.n	801ac54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 801ad0a:	e79b      	b.n	801ac44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801ad0c:	2a02      	cmp	r2, #2
 801ad0e:	d105      	bne.n	801ad1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 801ad10:	7be2      	ldrb	r2, [r4, #15]
 801ad12:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801ad16:	1a80      	subs	r0, r0, r2
 801ad18:	1ac0      	subs	r0, r0, r3
 801ad1a:	e7bf      	b.n	801ac9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 801ad1c:	2000      	movs	r0, #0
 801ad1e:	e7be      	b.n	801ac9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801ad20:	7be0      	ldrb	r0, [r4, #15]
 801ad22:	e7bc      	b.n	801ac9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801ad24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ad28:	e7c3      	b.n	801acb2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 801ad2a:	9b08      	ldr	r3, [sp, #32]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d0f7      	beq.n	801ad20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801ad30:	2258      	movs	r2, #88	; 0x58
 801ad32:	4639      	mov	r1, r7
 801ad34:	4628      	mov	r0, r5
 801ad36:	f00c fcb7 	bl	80276a8 <memcpy>
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ad40:	6821      	ldr	r1, [r4, #0]
 801ad42:	4628      	mov	r0, r5
 801ad44:	f7ff fbfb 	bl	801a53e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801ad48:	b203      	sxth	r3, r0
 801ad4a:	e79e      	b.n	801ac8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

0801ad4c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801ad4c:	2b02      	cmp	r3, #2
 801ad4e:	b510      	push	{r4, lr}
 801ad50:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ad54:	d00b      	beq.n	801ad6e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801ad56:	2b03      	cmp	r3, #3
 801ad58:	d00e      	beq.n	801ad78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801ad5a:	2b01      	cmp	r3, #1
 801ad5c:	d001      	beq.n	801ad62 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801ad5e:	1860      	adds	r0, r4, r1
 801ad60:	bd10      	pop	{r4, pc}
 801ad62:	8880      	ldrh	r0, [r0, #4]
 801ad64:	4420      	add	r0, r4
 801ad66:	b200      	sxth	r0, r0
 801ad68:	1a80      	subs	r0, r0, r2
 801ad6a:	3801      	subs	r0, #1
 801ad6c:	e7f8      	b.n	801ad60 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801ad6e:	8880      	ldrh	r0, [r0, #4]
 801ad70:	4420      	add	r0, r4
 801ad72:	b200      	sxth	r0, r0
 801ad74:	1a40      	subs	r0, r0, r1
 801ad76:	e7f8      	b.n	801ad6a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801ad78:	18a0      	adds	r0, r4, r2
 801ad7a:	e7f1      	b.n	801ad60 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801ad7c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801ad7c:	2b02      	cmp	r3, #2
 801ad7e:	b510      	push	{r4, lr}
 801ad80:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801ad84:	d006      	beq.n	801ad94 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801ad86:	2b03      	cmp	r3, #3
 801ad88:	d00a      	beq.n	801ada0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801ad8a:	2b01      	cmp	r3, #1
 801ad8c:	bf14      	ite	ne
 801ad8e:	18a0      	addne	r0, r4, r2
 801ad90:	1860      	addeq	r0, r4, r1
 801ad92:	bd10      	pop	{r4, pc}
 801ad94:	88c0      	ldrh	r0, [r0, #6]
 801ad96:	4420      	add	r0, r4
 801ad98:	b200      	sxth	r0, r0
 801ad9a:	1a80      	subs	r0, r0, r2
 801ad9c:	3801      	subs	r0, #1
 801ad9e:	e7f8      	b.n	801ad92 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801ada0:	88c0      	ldrh	r0, [r0, #6]
 801ada2:	4420      	add	r0, r4
 801ada4:	b200      	sxth	r0, r0
 801ada6:	1a40      	subs	r0, r0, r1
 801ada8:	e7f8      	b.n	801ad9c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801adac <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801adac:	4b01      	ldr	r3, [pc, #4]	; (801adb4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801adae:	2200      	movs	r2, #0
 801adb0:	601a      	str	r2, [r3, #0]
 801adb2:	4770      	bx	lr
 801adb4:	2000b33c 	.word	0x2000b33c

0801adb8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801adb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801adba:	1e05      	subs	r5, r0, #0
 801adbc:	f04f 0601 	mov.w	r6, #1
 801adc0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801adc4:	bfba      	itte	lt
 801adc6:	f04f 37ff 	movlt.w	r7, #4294967295
 801adca:	426d      	neglt	r5, r5
 801adcc:	2701      	movge	r7, #1
 801adce:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801add2:	f1be 0f00 	cmp.w	lr, #0
 801add6:	bfbc      	itt	lt
 801add8:	f1ce 0e00 	rsblt	lr, lr, #0
 801addc:	427f      	neglt	r7, r7
 801adde:	2c00      	cmp	r4, #0
 801ade0:	fa4e f001 	asr.w	r0, lr, r1
 801ade4:	fa06 f101 	lsl.w	r1, r6, r1
 801ade8:	bfbc      	itt	lt
 801adea:	4264      	neglt	r4, r4
 801adec:	427f      	neglt	r7, r7
 801adee:	3901      	subs	r1, #1
 801adf0:	ea01 010e 	and.w	r1, r1, lr
 801adf4:	434d      	muls	r5, r1
 801adf6:	f8dc 1000 	ldr.w	r1, [ip]
 801adfa:	fb03 1300 	mla	r3, r3, r0, r1
 801adfe:	fb95 f1f4 	sdiv	r1, r5, r4
 801ae02:	fb04 5511 	mls	r5, r4, r1, r5
 801ae06:	441d      	add	r5, r3
 801ae08:	fb95 f3f4 	sdiv	r3, r5, r4
 801ae0c:	4419      	add	r1, r3
 801ae0e:	fb04 5413 	mls	r4, r4, r3, r5
 801ae12:	fb02 1000 	mla	r0, r2, r0, r1
 801ae16:	f8cc 4000 	str.w	r4, [ip]
 801ae1a:	4378      	muls	r0, r7
 801ae1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801ae20 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801ae20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae24:	4c24      	ldr	r4, [pc, #144]	; (801aeb8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801ae26:	b086      	sub	sp, #24
 801ae28:	4605      	mov	r5, r0
 801ae2a:	6807      	ldr	r7, [r0, #0]
 801ae2c:	69a3      	ldr	r3, [r4, #24]
 801ae2e:	b92b      	cbnz	r3, 801ae3c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801ae30:	6840      	ldr	r0, [r0, #4]
 801ae32:	e9c5 7000 	strd	r7, r0, [r5]
 801ae36:	b006      	add	sp, #24
 801ae38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae3c:	f04f 0802 	mov.w	r8, #2
 801ae40:	68a2      	ldr	r2, [r4, #8]
 801ae42:	ae06      	add	r6, sp, #24
 801ae44:	6820      	ldr	r0, [r4, #0]
 801ae46:	fb93 f1f8 	sdiv	r1, r3, r8
 801ae4a:	440a      	add	r2, r1
 801ae4c:	69e1      	ldr	r1, [r4, #28]
 801ae4e:	f846 2d04 	str.w	r2, [r6, #-4]!
 801ae52:	9700      	str	r7, [sp, #0]
 801ae54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ae56:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801ae5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ae5c:	f7ff ffac 	bl	801adb8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ae60:	69a3      	ldr	r3, [r4, #24]
 801ae62:	4607      	mov	r7, r0
 801ae64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ae66:	9301      	str	r3, [sp, #4]
 801ae68:	686b      	ldr	r3, [r5, #4]
 801ae6a:	6a21      	ldr	r1, [r4, #32]
 801ae6c:	9300      	str	r3, [sp, #0]
 801ae6e:	9602      	str	r6, [sp, #8]
 801ae70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ae72:	6860      	ldr	r0, [r4, #4]
 801ae74:	f7ff ffa0 	bl	801adb8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ae78:	69a2      	ldr	r2, [r4, #24]
 801ae7a:	6963      	ldr	r3, [r4, #20]
 801ae7c:	4407      	add	r7, r0
 801ae7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ae80:	68e0      	ldr	r0, [r4, #12]
 801ae82:	fb92 f8f8 	sdiv	r8, r2, r8
 801ae86:	4443      	add	r3, r8
 801ae88:	9305      	str	r3, [sp, #20]
 801ae8a:	682b      	ldr	r3, [r5, #0]
 801ae8c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801ae90:	9300      	str	r3, [sp, #0]
 801ae92:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801ae94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801ae96:	f7ff ff8f 	bl	801adb8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ae9a:	69a3      	ldr	r3, [r4, #24]
 801ae9c:	4680      	mov	r8, r0
 801ae9e:	9602      	str	r6, [sp, #8]
 801aea0:	9301      	str	r3, [sp, #4]
 801aea2:	686b      	ldr	r3, [r5, #4]
 801aea4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801aea6:	9300      	str	r3, [sp, #0]
 801aea8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801aeaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801aeac:	6920      	ldr	r0, [r4, #16]
 801aeae:	f7ff ff83 	bl	801adb8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801aeb2:	4440      	add	r0, r8
 801aeb4:	e7bd      	b.n	801ae32 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801aeb6:	bf00      	nop
 801aeb8:	2000b340 	.word	0x2000b340

0801aebc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801aebc:	4b07      	ldr	r3, [pc, #28]	; (801aedc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801aebe:	b510      	push	{r4, lr}
 801aec0:	781b      	ldrb	r3, [r3, #0]
 801aec2:	2b01      	cmp	r3, #1
 801aec4:	d108      	bne.n	801aed8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801aec6:	4b06      	ldr	r3, [pc, #24]	; (801aee0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801aec8:	880c      	ldrh	r4, [r1, #0]
 801aeca:	881b      	ldrh	r3, [r3, #0]
 801aecc:	f9b0 2000 	ldrsh.w	r2, [r0]
 801aed0:	3b01      	subs	r3, #1
 801aed2:	1b1b      	subs	r3, r3, r4
 801aed4:	8003      	strh	r3, [r0, #0]
 801aed6:	800a      	strh	r2, [r1, #0]
 801aed8:	bd10      	pop	{r4, pc}
 801aeda:	bf00      	nop
 801aedc:	2000b30c 	.word	0x2000b30c
 801aee0:	2000b310 	.word	0x2000b310

0801aee4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801aee4:	4b0a      	ldr	r3, [pc, #40]	; (801af10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801aee6:	b510      	push	{r4, lr}
 801aee8:	781b      	ldrb	r3, [r3, #0]
 801aeea:	2b01      	cmp	r3, #1
 801aeec:	d10e      	bne.n	801af0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801aeee:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801aef2:	8843      	ldrh	r3, [r0, #2]
 801aef4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801aef8:	18ca      	adds	r2, r1, r3
 801aefa:	4b06      	ldr	r3, [pc, #24]	; (801af14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801aefc:	8044      	strh	r4, [r0, #2]
 801aefe:	881b      	ldrh	r3, [r3, #0]
 801af00:	1a9b      	subs	r3, r3, r2
 801af02:	8003      	strh	r3, [r0, #0]
 801af04:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801af08:	8081      	strh	r1, [r0, #4]
 801af0a:	80c3      	strh	r3, [r0, #6]
 801af0c:	bd10      	pop	{r4, pc}
 801af0e:	bf00      	nop
 801af10:	2000b30c 	.word	0x2000b30c
 801af14:	2000b308 	.word	0x2000b308

0801af18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801af18:	4b07      	ldr	r3, [pc, #28]	; (801af38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801af1a:	b510      	push	{r4, lr}
 801af1c:	781b      	ldrb	r3, [r3, #0]
 801af1e:	2b01      	cmp	r3, #1
 801af20:	d108      	bne.n	801af34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801af22:	f9b1 3000 	ldrsh.w	r3, [r1]
 801af26:	f9b0 4000 	ldrsh.w	r4, [r0]
 801af2a:	8003      	strh	r3, [r0, #0]
 801af2c:	8893      	ldrh	r3, [r2, #4]
 801af2e:	3b01      	subs	r3, #1
 801af30:	1b1b      	subs	r3, r3, r4
 801af32:	800b      	strh	r3, [r1, #0]
 801af34:	bd10      	pop	{r4, pc}
 801af36:	bf00      	nop
 801af38:	2000b30c 	.word	0x2000b30c

0801af3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801af3c:	4b08      	ldr	r3, [pc, #32]	; (801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801af3e:	b513      	push	{r0, r1, r4, lr}
 801af40:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af44:	2400      	movs	r4, #0
 801af46:	4b07      	ldr	r3, [pc, #28]	; (801af64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801af48:	f8ad 2004 	strh.w	r2, [sp, #4]
 801af4c:	466a      	mov	r2, sp
 801af4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af52:	9400      	str	r4, [sp, #0]
 801af54:	f8ad 3006 	strh.w	r3, [sp, #6]
 801af58:	f7ff ffde 	bl	801af18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801af5c:	b002      	add	sp, #8
 801af5e:	bd10      	pop	{r4, pc}
 801af60:	2000b308 	.word	0x2000b308
 801af64:	2000b30a 	.word	0x2000b30a

0801af68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801af68:	4b0a      	ldr	r3, [pc, #40]	; (801af94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801af6a:	460a      	mov	r2, r1
 801af6c:	b510      	push	{r4, lr}
 801af6e:	781b      	ldrb	r3, [r3, #0]
 801af70:	2b01      	cmp	r3, #1
 801af72:	d10d      	bne.n	801af90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801af74:	8881      	ldrh	r1, [r0, #4]
 801af76:	8803      	ldrh	r3, [r0, #0]
 801af78:	440b      	add	r3, r1
 801af7a:	4601      	mov	r1, r0
 801af7c:	3b01      	subs	r3, #1
 801af7e:	f821 3b02 	strh.w	r3, [r1], #2
 801af82:	f7ff ffc9 	bl	801af18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801af86:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801af8a:	88c2      	ldrh	r2, [r0, #6]
 801af8c:	80c3      	strh	r3, [r0, #6]
 801af8e:	8082      	strh	r2, [r0, #4]
 801af90:	bd10      	pop	{r4, pc}
 801af92:	bf00      	nop
 801af94:	2000b30c 	.word	0x2000b30c

0801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801af98:	4b09      	ldr	r3, [pc, #36]	; (801afc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801af9a:	b507      	push	{r0, r1, r2, lr}
 801af9c:	2100      	movs	r1, #0
 801af9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801afa2:	4b08      	ldr	r3, [pc, #32]	; (801afc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801afa4:	9100      	str	r1, [sp, #0]
 801afa6:	4669      	mov	r1, sp
 801afa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801afac:	f8ad 2004 	strh.w	r2, [sp, #4]
 801afb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801afb4:	f7ff ffd8 	bl	801af68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801afb8:	b003      	add	sp, #12
 801afba:	f85d fb04 	ldr.w	pc, [sp], #4
 801afbe:	bf00      	nop
 801afc0:	2000b308 	.word	0x2000b308
 801afc4:	2000b30a 	.word	0x2000b30a

0801afc8 <_ZN8touchgfx11Application13requestRedrawEv>:
 801afc8:	4b06      	ldr	r3, [pc, #24]	; (801afe4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801afca:	2100      	movs	r1, #0
 801afcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801afd0:	4b05      	ldr	r3, [pc, #20]	; (801afe8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801afd2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801afd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801afda:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801afde:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801afe2:	4770      	bx	lr
 801afe4:	2000b308 	.word	0x2000b308
 801afe8:	2000b30a 	.word	0x2000b30a

0801afec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801afec:	4b03      	ldr	r3, [pc, #12]	; (801affc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801afee:	6818      	ldr	r0, [r3, #0]
 801aff0:	b110      	cbz	r0, 801aff8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801aff2:	6803      	ldr	r3, [r0, #0]
 801aff4:	699b      	ldr	r3, [r3, #24]
 801aff6:	4718      	bx	r3
 801aff8:	4770      	bx	lr
 801affa:	bf00      	nop
 801affc:	2000b390 	.word	0x2000b390

0801b000 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b000:	4770      	bx	lr
	...

0801b004 <_ZN8touchgfx11Application4drawEv>:
 801b004:	4b09      	ldr	r3, [pc, #36]	; (801b02c <_ZN8touchgfx11Application4drawEv+0x28>)
 801b006:	b507      	push	{r0, r1, r2, lr}
 801b008:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b00c:	2100      	movs	r1, #0
 801b00e:	4b08      	ldr	r3, [pc, #32]	; (801b030 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b010:	9100      	str	r1, [sp, #0]
 801b012:	4669      	mov	r1, sp
 801b014:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b018:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b01c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b020:	6803      	ldr	r3, [r0, #0]
 801b022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b024:	4798      	blx	r3
 801b026:	b003      	add	sp, #12
 801b028:	f85d fb04 	ldr.w	pc, [sp], #4
 801b02c:	2000b308 	.word	0x2000b308
 801b030:	2000b30a 	.word	0x2000b30a

0801b034 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b034:	4b03      	ldr	r3, [pc, #12]	; (801b044 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b036:	6818      	ldr	r0, [r3, #0]
 801b038:	b110      	cbz	r0, 801b040 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b03a:	6803      	ldr	r3, [r0, #0]
 801b03c:	69db      	ldr	r3, [r3, #28]
 801b03e:	4718      	bx	r3
 801b040:	4770      	bx	lr
 801b042:	bf00      	nop
 801b044:	2000b390 	.word	0x2000b390

0801b048 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b048:	4b03      	ldr	r3, [pc, #12]	; (801b058 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b04a:	6818      	ldr	r0, [r3, #0]
 801b04c:	b110      	cbz	r0, 801b054 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b04e:	6803      	ldr	r3, [r0, #0]
 801b050:	6a1b      	ldr	r3, [r3, #32]
 801b052:	4718      	bx	r3
 801b054:	4770      	bx	lr
 801b056:	bf00      	nop
 801b058:	2000b390 	.word	0x2000b390

0801b05c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b05c:	4b03      	ldr	r3, [pc, #12]	; (801b06c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b05e:	6818      	ldr	r0, [r3, #0]
 801b060:	b110      	cbz	r0, 801b068 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b062:	6803      	ldr	r3, [r0, #0]
 801b064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b066:	4718      	bx	r3
 801b068:	4770      	bx	lr
 801b06a:	bf00      	nop
 801b06c:	2000b390 	.word	0x2000b390

0801b070 <_ZN8touchgfx11Application15handleTickEventEv>:
 801b070:	b570      	push	{r4, r5, r6, lr}
 801b072:	4d34      	ldr	r5, [pc, #208]	; (801b144 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801b074:	4604      	mov	r4, r0
 801b076:	6828      	ldr	r0, [r5, #0]
 801b078:	b140      	cbz	r0, 801b08c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b07a:	7a03      	ldrb	r3, [r0, #8]
 801b07c:	b933      	cbnz	r3, 801b08c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b07e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801b082:	6803      	ldr	r3, [r0, #0]
 801b084:	689b      	ldr	r3, [r3, #8]
 801b086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b08a:	4718      	bx	r3
 801b08c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801b090:	b97b      	cbnz	r3, 801b0b2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b092:	b170      	cbz	r0, 801b0b2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b094:	7a03      	ldrb	r3, [r0, #8]
 801b096:	b163      	cbz	r3, 801b0b2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b098:	4b2b      	ldr	r3, [pc, #172]	; (801b148 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801b09a:	6818      	ldr	r0, [r3, #0]
 801b09c:	b110      	cbz	r0, 801b0a4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b09e:	6803      	ldr	r3, [r0, #0]
 801b0a0:	691b      	ldr	r3, [r3, #16]
 801b0a2:	4798      	blx	r3
 801b0a4:	6828      	ldr	r0, [r5, #0]
 801b0a6:	6803      	ldr	r3, [r0, #0]
 801b0a8:	68db      	ldr	r3, [r3, #12]
 801b0aa:	4798      	blx	r3
 801b0ac:	2301      	movs	r3, #1
 801b0ae:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801b0b2:	2500      	movs	r5, #0
 801b0b4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801b0b8:	42a8      	cmp	r0, r5
 801b0ba:	dd0c      	ble.n	801b0d6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801b0bc:	1963      	adds	r3, r4, r5
 801b0be:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801b0c2:	b132      	cbz	r2, 801b0d2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801b0c4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801b0c8:	4413      	add	r3, r2
 801b0ca:	6858      	ldr	r0, [r3, #4]
 801b0cc:	6803      	ldr	r3, [r0, #0]
 801b0ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b0d0:	4798      	blx	r3
 801b0d2:	3501      	adds	r5, #1
 801b0d4:	e7ee      	b.n	801b0b4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801b0d6:	2300      	movs	r3, #0
 801b0d8:	461a      	mov	r2, r3
 801b0da:	4298      	cmp	r0, r3
 801b0dc:	d114      	bne.n	801b108 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801b0de:	1d25      	adds	r5, r4, #4
 801b0e0:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801b0e4:	1e48      	subs	r0, r1, #1
 801b0e6:	b280      	uxth	r0, r0
 801b0e8:	4291      	cmp	r1, r2
 801b0ea:	dd24      	ble.n	801b136 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801b0ec:	4288      	cmp	r0, r1
 801b0ee:	d2fb      	bcs.n	801b0e8 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801b0f0:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801b0f4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801b0f8:	3304      	adds	r3, #4
 801b0fa:	428b      	cmp	r3, r1
 801b0fc:	d018      	beq.n	801b130 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801b0fe:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801b102:	f843 6c04 	str.w	r6, [r3, #-4]
 801b106:	e7f8      	b.n	801b0fa <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801b108:	18e1      	adds	r1, r4, r3
 801b10a:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801b10e:	b16d      	cbz	r5, 801b12c <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801b110:	429a      	cmp	r2, r3
 801b112:	d00a      	beq.n	801b12a <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801b114:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801b118:	4431      	add	r1, r6
 801b11a:	684e      	ldr	r6, [r1, #4]
 801b11c:	b291      	uxth	r1, r2
 801b11e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b122:	604e      	str	r6, [r1, #4]
 801b124:	18a1      	adds	r1, r4, r2
 801b126:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801b12a:	3201      	adds	r2, #1
 801b12c:	3301      	adds	r3, #1
 801b12e:	e7d4      	b.n	801b0da <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801b130:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801b134:	e7d4      	b.n	801b0e0 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801b136:	4b04      	ldr	r3, [pc, #16]	; (801b148 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801b138:	6818      	ldr	r0, [r3, #0]
 801b13a:	b110      	cbz	r0, 801b142 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801b13c:	6803      	ldr	r3, [r0, #0]
 801b13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b140:	e7a1      	b.n	801b086 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b142:	bd70      	pop	{r4, r5, r6, pc}
 801b144:	2000b394 	.word	0x2000b394
 801b148:	2000b390 	.word	0x2000b390

0801b14c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b14c:	b570      	push	{r4, r5, r6, lr}
 801b14e:	4606      	mov	r6, r0
 801b150:	460c      	mov	r4, r1
 801b152:	b929      	cbnz	r1, 801b160 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801b154:	4b0c      	ldr	r3, [pc, #48]	; (801b188 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801b156:	2165      	movs	r1, #101	; 0x65
 801b158:	4a0c      	ldr	r2, [pc, #48]	; (801b18c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801b15a:	480d      	ldr	r0, [pc, #52]	; (801b190 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801b15c:	f00c fa26 	bl	80275ac <__assert_func>
 801b160:	2300      	movs	r3, #0
 801b162:	4d0c      	ldr	r5, [pc, #48]	; (801b194 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801b164:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801b168:	6828      	ldr	r0, [r5, #0]
 801b16a:	b110      	cbz	r0, 801b172 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801b16c:	6803      	ldr	r3, [r0, #0]
 801b16e:	695b      	ldr	r3, [r3, #20]
 801b170:	4798      	blx	r3
 801b172:	602c      	str	r4, [r5, #0]
 801b174:	4620      	mov	r0, r4
 801b176:	6823      	ldr	r3, [r4, #0]
 801b178:	68db      	ldr	r3, [r3, #12]
 801b17a:	4798      	blx	r3
 801b17c:	6833      	ldr	r3, [r6, #0]
 801b17e:	4630      	mov	r0, r6
 801b180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b186:	4718      	bx	r3
 801b188:	0802b91c 	.word	0x0802b91c
 801b18c:	0802b9ec 	.word	0x0802b9ec
 801b190:	0802b926 	.word	0x0802b926
 801b194:	2000b390 	.word	0x2000b390

0801b198 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801b198:	b510      	push	{r4, lr}
 801b19a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b19e:	888a      	ldrh	r2, [r1, #4]
 801b1a0:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b1a4:	4422      	add	r2, r4
 801b1a6:	b212      	sxth	r2, r2
 801b1a8:	4293      	cmp	r3, r2
 801b1aa:	da15      	bge.n	801b1d8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b1ac:	8882      	ldrh	r2, [r0, #4]
 801b1ae:	4413      	add	r3, r2
 801b1b0:	b21b      	sxth	r3, r3
 801b1b2:	429c      	cmp	r4, r3
 801b1b4:	da10      	bge.n	801b1d8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b1b6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b1ba:	88c9      	ldrh	r1, [r1, #6]
 801b1bc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b1c0:	4419      	add	r1, r3
 801b1c2:	b209      	sxth	r1, r1
 801b1c4:	428a      	cmp	r2, r1
 801b1c6:	da07      	bge.n	801b1d8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b1c8:	88c0      	ldrh	r0, [r0, #6]
 801b1ca:	4410      	add	r0, r2
 801b1cc:	b200      	sxth	r0, r0
 801b1ce:	4283      	cmp	r3, r0
 801b1d0:	bfac      	ite	ge
 801b1d2:	2000      	movge	r0, #0
 801b1d4:	2001      	movlt	r0, #1
 801b1d6:	bd10      	pop	{r4, pc}
 801b1d8:	2000      	movs	r0, #0
 801b1da:	e7fc      	b.n	801b1d6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b1dc <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b1dc:	b570      	push	{r4, r5, r6, lr}
 801b1de:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b1e2:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b1e6:	42ac      	cmp	r4, r5
 801b1e8:	db18      	blt.n	801b21c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b1ea:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801b1ee:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b1f2:	429a      	cmp	r2, r3
 801b1f4:	db12      	blt.n	801b21c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b1f6:	8886      	ldrh	r6, [r0, #4]
 801b1f8:	4435      	add	r5, r6
 801b1fa:	888e      	ldrh	r6, [r1, #4]
 801b1fc:	4434      	add	r4, r6
 801b1fe:	b22d      	sxth	r5, r5
 801b200:	b224      	sxth	r4, r4
 801b202:	42a5      	cmp	r5, r4
 801b204:	db0a      	blt.n	801b21c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b206:	88c0      	ldrh	r0, [r0, #6]
 801b208:	4418      	add	r0, r3
 801b20a:	88cb      	ldrh	r3, [r1, #6]
 801b20c:	441a      	add	r2, r3
 801b20e:	b200      	sxth	r0, r0
 801b210:	b212      	sxth	r2, r2
 801b212:	4290      	cmp	r0, r2
 801b214:	bfb4      	ite	lt
 801b216:	2000      	movlt	r0, #0
 801b218:	2001      	movge	r0, #1
 801b21a:	bd70      	pop	{r4, r5, r6, pc}
 801b21c:	2000      	movs	r0, #0
 801b21e:	e7fc      	b.n	801b21a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801b220 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b222:	4604      	mov	r4, r0
 801b224:	4608      	mov	r0, r1
 801b226:	460d      	mov	r5, r1
 801b228:	f7fc fc01 	bl	8017a2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b22c:	b978      	cbnz	r0, 801b24e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801b22e:	4620      	mov	r0, r4
 801b230:	f7fc fbfd 	bl	8017a2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b234:	f9b5 6000 	ldrsh.w	r6, [r5]
 801b238:	b150      	cbz	r0, 801b250 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801b23a:	8026      	strh	r6, [r4, #0]
 801b23c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b240:	8063      	strh	r3, [r4, #2]
 801b242:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801b246:	80a3      	strh	r3, [r4, #4]
 801b248:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b24c:	80e3      	strh	r3, [r4, #6]
 801b24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b250:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b254:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b258:	42b1      	cmp	r1, r6
 801b25a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801b25e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801b262:	460f      	mov	r7, r1
 801b264:	88ed      	ldrh	r5, [r5, #6]
 801b266:	bfa8      	it	ge
 801b268:	4637      	movge	r7, r6
 801b26a:	4293      	cmp	r3, r2
 801b26c:	4618      	mov	r0, r3
 801b26e:	4466      	add	r6, ip
 801b270:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b274:	bfa8      	it	ge
 801b276:	4610      	movge	r0, r2
 801b278:	442a      	add	r2, r5
 801b27a:	88e5      	ldrh	r5, [r4, #6]
 801b27c:	4461      	add	r1, ip
 801b27e:	b236      	sxth	r6, r6
 801b280:	8027      	strh	r7, [r4, #0]
 801b282:	442b      	add	r3, r5
 801b284:	b209      	sxth	r1, r1
 801b286:	b212      	sxth	r2, r2
 801b288:	8060      	strh	r0, [r4, #2]
 801b28a:	b21b      	sxth	r3, r3
 801b28c:	428e      	cmp	r6, r1
 801b28e:	bfac      	ite	ge
 801b290:	ebc7 0106 	rsbge	r1, r7, r6
 801b294:	ebc7 0101 	rsblt	r1, r7, r1
 801b298:	429a      	cmp	r2, r3
 801b29a:	bfac      	ite	ge
 801b29c:	ebc0 0202 	rsbge	r2, r0, r2
 801b2a0:	ebc0 0203 	rsblt	r2, r0, r3
 801b2a4:	80a1      	strh	r1, [r4, #4]
 801b2a6:	80e2      	strh	r2, [r4, #6]
 801b2a8:	e7d1      	b.n	801b24e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801b2ac <_ZN8touchgfx11Application11getInstanceEv>:
 801b2ac:	4b01      	ldr	r3, [pc, #4]	; (801b2b4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b2ae:	6818      	ldr	r0, [r3, #0]
 801b2b0:	4770      	bx	lr
 801b2b2:	bf00      	nop
 801b2b4:	2000b3a0 	.word	0x2000b3a0

0801b2b8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801b2b8:	b570      	push	{r4, r5, r6, lr}
 801b2ba:	2300      	movs	r3, #0
 801b2bc:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801b2c0:	1d04      	adds	r4, r0, #4
 801b2c2:	b29a      	uxth	r2, r3
 801b2c4:	4296      	cmp	r6, r2
 801b2c6:	d90a      	bls.n	801b2de <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801b2c8:	f854 2b04 	ldr.w	r2, [r4], #4
 801b2cc:	428a      	cmp	r2, r1
 801b2ce:	d107      	bne.n	801b2e0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801b2d0:	18c5      	adds	r5, r0, r3
 801b2d2:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801b2d6:	b11a      	cbz	r2, 801b2e0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801b2d8:	3a01      	subs	r2, #1
 801b2da:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801b2de:	bd70      	pop	{r4, r5, r6, pc}
 801b2e0:	3301      	adds	r3, #1
 801b2e2:	e7ee      	b.n	801b2c2 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801b2e4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801b2ea:	30a8      	adds	r0, #168	; 0xa8
 801b2ec:	f820 3c24 	strh.w	r3, [r0, #-36]
 801b2f0:	f802 3b01 	strb.w	r3, [r2], #1
 801b2f4:	4282      	cmp	r2, r0
 801b2f6:	d1fb      	bne.n	801b2f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801b2f8:	4770      	bx	lr

0801b2fa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b2fa:	4603      	mov	r3, r0
 801b2fc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801b300:	2200      	movs	r2, #0
 801b302:	801a      	strh	r2, [r3, #0]
 801b304:	3308      	adds	r3, #8
 801b306:	f823 2c06 	strh.w	r2, [r3, #-6]
 801b30a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801b30e:	f823 2c02 	strh.w	r2, [r3, #-2]
 801b312:	428b      	cmp	r3, r1
 801b314:	d1f5      	bne.n	801b302 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b316:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801b31a:	4770      	bx	lr

0801b31c <_ZN8touchgfx11ApplicationC1Ev>:
 801b31c:	b570      	push	{r4, r5, r6, lr}
 801b31e:	4b1a      	ldr	r3, [pc, #104]	; (801b388 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801b320:	2500      	movs	r5, #0
 801b322:	4604      	mov	r4, r0
 801b324:	30a8      	adds	r0, #168	; 0xa8
 801b326:	f840 3ca8 	str.w	r3, [r0, #-168]
 801b32a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801b32e:	f7ff ffe4 	bl	801b2fa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b332:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801b336:	f7ff ffe0 	bl	801b2fa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b33a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801b33e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801b342:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801b346:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801b34a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801b34e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801b352:	490e      	ldr	r1, [pc, #56]	; (801b38c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801b354:	480e      	ldr	r0, [pc, #56]	; (801b390 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801b356:	f00a fc05 	bl	8025b64 <CRC_Lock>
 801b35a:	4e0e      	ldr	r6, [pc, #56]	; (801b394 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b35c:	4b0e      	ldr	r3, [pc, #56]	; (801b398 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b35e:	b158      	cbz	r0, 801b378 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801b360:	801d      	strh	r5, [r3, #0]
 801b362:	2300      	movs	r3, #0
 801b364:	4a0d      	ldr	r2, [pc, #52]	; (801b39c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b366:	4620      	mov	r0, r4
 801b368:	6013      	str	r3, [r2, #0]
 801b36a:	4a0d      	ldr	r2, [pc, #52]	; (801b3a0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801b36c:	6033      	str	r3, [r6, #0]
 801b36e:	6013      	str	r3, [r2, #0]
 801b370:	f7ff ffb8 	bl	801b2e4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801b374:	4620      	mov	r0, r4
 801b376:	bd70      	pop	{r4, r5, r6, pc}
 801b378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b37c:	2002      	movs	r0, #2
 801b37e:	801a      	strh	r2, [r3, #0]
 801b380:	6030      	str	r0, [r6, #0]
 801b382:	f000 ff83 	bl	801c28c <_ZN8touchgfx6Screen4drawEv>
 801b386:	e7ec      	b.n	801b362 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801b388:	0802b9b0 	.word	0x0802b9b0
 801b38c:	b5e8b5cd 	.word	0xb5e8b5cd
 801b390:	f407a5c2 	.word	0xf407a5c2
 801b394:	2000b390 	.word	0x2000b390
 801b398:	20000040 	.word	0x20000040
 801b39c:	2000b3a0 	.word	0x2000b3a0
 801b3a0:	2000b394 	.word	0x2000b394

0801b3a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b3a4:	2300      	movs	r3, #0
 801b3a6:	8003      	strh	r3, [r0, #0]
 801b3a8:	8043      	strh	r3, [r0, #2]
 801b3aa:	8083      	strh	r3, [r0, #4]
 801b3ac:	80c3      	strh	r3, [r0, #6]
 801b3ae:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801b3b2:	4293      	cmp	r3, r2
 801b3b4:	b530      	push	{r4, r5, lr}
 801b3b6:	d912      	bls.n	801b3de <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801b3b8:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801b3bc:	3b01      	subs	r3, #1
 801b3be:	6825      	ldr	r5, [r4, #0]
 801b3c0:	b29b      	uxth	r3, r3
 801b3c2:	6005      	str	r5, [r0, #0]
 801b3c4:	4293      	cmp	r3, r2
 801b3c6:	6865      	ldr	r5, [r4, #4]
 801b3c8:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801b3cc:	6045      	str	r5, [r0, #4]
 801b3ce:	d906      	bls.n	801b3de <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801b3d0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801b3d4:	681d      	ldr	r5, [r3, #0]
 801b3d6:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801b3da:	685d      	ldr	r5, [r3, #4]
 801b3dc:	6065      	str	r5, [r4, #4]
 801b3de:	bd30      	pop	{r4, r5, pc}

0801b3e0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801b3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b3e2:	466b      	mov	r3, sp
 801b3e4:	4604      	mov	r4, r0
 801b3e6:	e883 0006 	stmia.w	r3, {r1, r2}
 801b3ea:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801b3ee:	2a07      	cmp	r2, #7
 801b3f0:	d906      	bls.n	801b400 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801b3f2:	4b09      	ldr	r3, [pc, #36]	; (801b418 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801b3f4:	f240 118f 	movw	r1, #399	; 0x18f
 801b3f8:	4a08      	ldr	r2, [pc, #32]	; (801b41c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801b3fa:	4809      	ldr	r0, [pc, #36]	; (801b420 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801b3fc:	f00c f8d6 	bl	80275ac <__assert_func>
 801b400:	1c51      	adds	r1, r2, #1
 801b402:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801b406:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801b40a:	cb03      	ldmia	r3!, {r0, r1}
 801b40c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801b410:	6069      	str	r1, [r5, #4]
 801b412:	b003      	add	sp, #12
 801b414:	bd30      	pop	{r4, r5, pc}
 801b416:	bf00      	nop
 801b418:	0802b950 	.word	0x0802b950
 801b41c:	0802ba30 	.word	0x0802ba30
 801b420:	0802b97f 	.word	0x0802b97f

0801b424 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b428:	b089      	sub	sp, #36	; 0x24
 801b42a:	4606      	mov	r6, r0
 801b42c:	466c      	mov	r4, sp
 801b42e:	4620      	mov	r0, r4
 801b430:	e884 0006 	stmia.w	r4, {r1, r2}
 801b434:	f7fc fafb 	bl	8017a2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b438:	bbb0      	cbnz	r0, 801b4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801b43a:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801b43e:	b1fd      	cbz	r5, 801b480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801b440:	3d01      	subs	r5, #1
 801b442:	af04      	add	r7, sp, #16
 801b444:	f04f 090a 	mov.w	r9, #10
 801b448:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801b44c:	ab02      	add	r3, sp, #8
 801b44e:	fa1f f885 	uxth.w	r8, r5
 801b452:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b456:	6851      	ldr	r1, [r2, #4]
 801b458:	c303      	stmia	r3!, {r0, r1}
 801b45a:	4621      	mov	r1, r4
 801b45c:	a802      	add	r0, sp, #8
 801b45e:	f7ff febd 	bl	801b1dc <_ZNK8touchgfx4Rect8includesERKS0_>
 801b462:	bb08      	cbnz	r0, 801b4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801b464:	a902      	add	r1, sp, #8
 801b466:	4620      	mov	r0, r4
 801b468:	f7ff feb8 	bl	801b1dc <_ZNK8touchgfx4Rect8includesERKS0_>
 801b46c:	b1f8      	cbz	r0, 801b4ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801b46e:	4642      	mov	r2, r8
 801b470:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801b474:	a806      	add	r0, sp, #24
 801b476:	f7ff ff95 	bl	801b3a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b47a:	f115 35ff 	adds.w	r5, r5, #4294967295
 801b47e:	d2e3      	bcs.n	801b448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801b480:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801b484:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801b488:	2b08      	cmp	r3, #8
 801b48a:	d108      	bne.n	801b49e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801b48c:	4629      	mov	r1, r5
 801b48e:	a806      	add	r0, sp, #24
 801b490:	2207      	movs	r2, #7
 801b492:	f7ff ff87 	bl	801b3a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b496:	a906      	add	r1, sp, #24
 801b498:	4620      	mov	r0, r4
 801b49a:	f7ff fec1 	bl	801b220 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b49e:	4628      	mov	r0, r5
 801b4a0:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b4a4:	f7ff ff9c 	bl	801b3e0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b4a8:	b009      	add	sp, #36	; 0x24
 801b4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b4ae:	4621      	mov	r1, r4
 801b4b0:	a802      	add	r0, sp, #8
 801b4b2:	f7ff fe71 	bl	801b198 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b4b6:	b150      	cbz	r0, 801b4ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801b4b8:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801b4bc:	a806      	add	r0, sp, #24
 801b4be:	4642      	mov	r2, r8
 801b4c0:	f7ff ff70 	bl	801b3a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b4c4:	a902      	add	r1, sp, #8
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	f7ff feaa 	bl	801b220 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b4cc:	e7d5      	b.n	801b47a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b4ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b4d2:	e887 0003 	stmia.w	r7, {r0, r1}
 801b4d6:	a902      	add	r1, sp, #8
 801b4d8:	4638      	mov	r0, r7
 801b4da:	f7ff fea1 	bl	801b220 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b4de:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b4e2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801b4e6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801b4ea:	fb13 f302 	smulbb	r3, r3, r2
 801b4ee:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b4f2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b4f6:	fb11 f102 	smulbb	r1, r1, r2
 801b4fa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801b4fe:	fb09 f303 	mul.w	r3, r9, r3
 801b502:	fb12 1100 	smlabb	r1, r2, r0, r1
 801b506:	220b      	movs	r2, #11
 801b508:	434a      	muls	r2, r1
 801b50a:	4293      	cmp	r3, r2
 801b50c:	dab5      	bge.n	801b47a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b50e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801b512:	a806      	add	r0, sp, #24
 801b514:	4642      	mov	r2, r8
 801b516:	f7ff ff45 	bl	801b3a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b51a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b51e:	e884 0003 	stmia.w	r4, {r0, r1}
 801b522:	e7aa      	b.n	801b47a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801b524 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b524:	4b1d      	ldr	r3, [pc, #116]	; (801b59c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801b526:	b530      	push	{r4, r5, lr}
 801b528:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b52c:	b085      	sub	sp, #20
 801b52e:	4b1c      	ldr	r3, [pc, #112]	; (801b5a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801b530:	460c      	mov	r4, r1
 801b532:	2100      	movs	r1, #0
 801b534:	4605      	mov	r5, r0
 801b536:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b53a:	6820      	ldr	r0, [r4, #0]
 801b53c:	9100      	str	r1, [sp, #0]
 801b53e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b542:	ab02      	add	r3, sp, #8
 801b544:	6861      	ldr	r1, [r4, #4]
 801b546:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b54a:	c303      	stmia	r3!, {r0, r1}
 801b54c:	4669      	mov	r1, sp
 801b54e:	a802      	add	r0, sp, #8
 801b550:	f7fc fa2a 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 801b554:	ab02      	add	r3, sp, #8
 801b556:	cb03      	ldmia	r3!, {r0, r1}
 801b558:	4b12      	ldr	r3, [pc, #72]	; (801b5a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801b55a:	6020      	str	r0, [r4, #0]
 801b55c:	6818      	ldr	r0, [r3, #0]
 801b55e:	6061      	str	r1, [r4, #4]
 801b560:	b138      	cbz	r0, 801b572 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b562:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801b566:	b133      	cbz	r3, 801b576 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801b568:	6821      	ldr	r1, [r4, #0]
 801b56a:	4628      	mov	r0, r5
 801b56c:	6862      	ldr	r2, [r4, #4]
 801b56e:	f7ff ff59 	bl	801b424 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b572:	b005      	add	sp, #20
 801b574:	bd30      	pop	{r4, r5, pc}
 801b576:	6803      	ldr	r3, [r0, #0]
 801b578:	4621      	mov	r1, r4
 801b57a:	689b      	ldr	r3, [r3, #8]
 801b57c:	4798      	blx	r3
 801b57e:	4b0a      	ldr	r3, [pc, #40]	; (801b5a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801b580:	6818      	ldr	r0, [r3, #0]
 801b582:	b118      	cbz	r0, 801b58c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801b584:	6803      	ldr	r3, [r0, #0]
 801b586:	4621      	mov	r1, r4
 801b588:	689b      	ldr	r3, [r3, #8]
 801b58a:	4798      	blx	r3
 801b58c:	4b07      	ldr	r3, [pc, #28]	; (801b5ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801b58e:	4621      	mov	r1, r4
 801b590:	6818      	ldr	r0, [r3, #0]
 801b592:	6803      	ldr	r3, [r0, #0]
 801b594:	695b      	ldr	r3, [r3, #20]
 801b596:	4798      	blx	r3
 801b598:	e7eb      	b.n	801b572 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b59a:	bf00      	nop
 801b59c:	2000b308 	.word	0x2000b308
 801b5a0:	2000b30a 	.word	0x2000b30a
 801b5a4:	2000b390 	.word	0x2000b390
 801b5a8:	2000b38c 	.word	0x2000b38c
 801b5ac:	2000b314 	.word	0x2000b314

0801b5b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5b4:	4604      	mov	r4, r0
 801b5b6:	b09b      	sub	sp, #108	; 0x6c
 801b5b8:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801b5bc:	b129      	cbz	r1, 801b5ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801b5be:	2300      	movs	r3, #0
 801b5c0:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801b5c4:	b01b      	add	sp, #108	; 0x6c
 801b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ca:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801b5ce:	4630      	mov	r0, r6
 801b5d0:	f7fc fa2d 	bl	8017a2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5d4:	4605      	mov	r5, r0
 801b5d6:	b940      	cbnz	r0, 801b5ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801b5d8:	4620      	mov	r0, r4
 801b5da:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b5de:	f7ff ff21 	bl	801b424 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b5e2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801b5e6:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801b5ea:	4baf      	ldr	r3, [pc, #700]	; (801b8a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>)
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	b33b      	cbz	r3, 801b640 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b5f0:	4dae      	ldr	r5, [pc, #696]	; (801b8ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fc>)
 801b5f2:	4628      	mov	r0, r5
 801b5f4:	f7fc fa1b 	bl	8017a2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5f8:	4606      	mov	r6, r0
 801b5fa:	bb08      	cbnz	r0, 801b640 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b5fc:	4628      	mov	r0, r5
 801b5fe:	f7ff fc71 	bl	801aee4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b602:	6829      	ldr	r1, [r5, #0]
 801b604:	686a      	ldr	r2, [r5, #4]
 801b606:	4620      	mov	r0, r4
 801b608:	f7ff ff0c 	bl	801b424 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b60c:	802e      	strh	r6, [r5, #0]
 801b60e:	806e      	strh	r6, [r5, #2]
 801b610:	80ae      	strh	r6, [r5, #4]
 801b612:	80ee      	strh	r6, [r5, #6]
 801b614:	4fa6      	ldr	r7, [pc, #664]	; (801b8b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x300>)
 801b616:	a809      	add	r0, sp, #36	; 0x24
 801b618:	f7ff fe6f 	bl	801b2fa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b61c:	883d      	ldrh	r5, [r7, #0]
 801b61e:	462e      	mov	r6, r5
 801b620:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b624:	42b3      	cmp	r3, r6
 801b626:	d910      	bls.n	801b64a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801b628:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b62c:	3601      	adds	r6, #1
 801b62e:	a809      	add	r0, sp, #36	; 0x24
 801b630:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801b634:	b2b6      	uxth	r6, r6
 801b636:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801b63a:	f7ff fed1 	bl	801b3e0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b63e:	e7ef      	b.n	801b620 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801b640:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b644:	2b00      	cmp	r3, #0
 801b646:	d1e5      	bne.n	801b614 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801b648:	e7bc      	b.n	801b5c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b64a:	462e      	mov	r6, r5
 801b64c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801b650:	42b3      	cmp	r3, r6
 801b652:	d90b      	bls.n	801b66c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801b654:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b658:	3601      	adds	r6, #1
 801b65a:	4620      	mov	r0, r4
 801b65c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801b660:	b2b6      	uxth	r6, r6
 801b662:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801b666:	f7ff fedd 	bl	801b424 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b66a:	e7ef      	b.n	801b64c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801b66c:	4e91      	ldr	r6, [pc, #580]	; (801b8b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>)
 801b66e:	6833      	ldr	r3, [r6, #0]
 801b670:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b674:	2b01      	cmp	r3, #1
 801b676:	f040 8092 	bne.w	801b79e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ee>
 801b67a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b67e:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801b682:	f04f 0900 	mov.w	r9, #0
 801b686:	33aa      	adds	r3, #170	; 0xaa
 801b688:	42a8      	cmp	r0, r5
 801b68a:	f103 0308 	add.w	r3, r3, #8
 801b68e:	dd0a      	ble.n	801b6a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf6>
 801b690:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801b694:	3501      	adds	r5, #1
 801b696:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801b69a:	440a      	add	r2, r1
 801b69c:	b212      	sxth	r2, r2
 801b69e:	4591      	cmp	r9, r2
 801b6a0:	bfb8      	it	lt
 801b6a2:	4691      	movlt	r9, r2
 801b6a4:	e7f0      	b.n	801b688 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd8>
 801b6a6:	4b84      	ldr	r3, [pc, #528]	; (801b8b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x308>)
 801b6a8:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801b8c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x310>
 801b6ac:	881d      	ldrh	r5, [r3, #0]
 801b6ae:	2300      	movs	r3, #0
 801b6b0:	2d0f      	cmp	r5, #15
 801b6b2:	bf8c      	ite	hi
 801b6b4:	08ed      	lsrhi	r5, r5, #3
 801b6b6:	2501      	movls	r5, #1
 801b6b8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b6bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b6c0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801b6c4:	6830      	ldr	r0, [r6, #0]
 801b6c6:	440b      	add	r3, r1
 801b6c8:	6802      	ldr	r2, [r0, #0]
 801b6ca:	b21b      	sxth	r3, r3
 801b6cc:	4599      	cmp	r9, r3
 801b6ce:	dd49      	ble.n	801b764 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b4>
 801b6d0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801b6d4:	4798      	blx	r3
 801b6d6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b6da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b6de:	4413      	add	r3, r2
 801b6e0:	b21b      	sxth	r3, r3
 801b6e2:	195a      	adds	r2, r3, r5
 801b6e4:	4290      	cmp	r0, r2
 801b6e6:	da07      	bge.n	801b6f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 801b6e8:	4581      	cmp	r9, r0
 801b6ea:	dd05      	ble.n	801b6f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 801b6ec:	4298      	cmp	r0, r3
 801b6ee:	da33      	bge.n	801b758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	dd31      	ble.n	801b758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 801b6f4:	4648      	mov	r0, r9
 801b6f6:	e004      	b.n	801b702 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x152>
 801b6f8:	4298      	cmp	r0, r3
 801b6fa:	dbfb      	blt.n	801b6f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x144>
 801b6fc:	4548      	cmp	r0, r9
 801b6fe:	bfa8      	it	ge
 801b700:	4648      	movge	r0, r9
 801b702:	f9b8 2000 	ldrsh.w	r2, [r8]
 801b706:	2100      	movs	r1, #0
 801b708:	1ac0      	subs	r0, r0, r3
 801b70a:	f8b7 a000 	ldrh.w	sl, [r7]
 801b70e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b712:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b716:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b71a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b71e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b722:	4553      	cmp	r3, sl
 801b724:	d9ca      	bls.n	801b6bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b726:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801b72a:	ab07      	add	r3, sp, #28
 801b72c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b730:	6851      	ldr	r1, [r2, #4]
 801b732:	c303      	stmia	r3!, {r0, r1}
 801b734:	a807      	add	r0, sp, #28
 801b736:	a905      	add	r1, sp, #20
 801b738:	f7fc f936 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 801b73c:	a807      	add	r0, sp, #28
 801b73e:	f7fc f976 	bl	8017a2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b742:	b920      	cbnz	r0, 801b74e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x19e>
 801b744:	6823      	ldr	r3, [r4, #0]
 801b746:	a907      	add	r1, sp, #28
 801b748:	4620      	mov	r0, r4
 801b74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b74c:	4798      	blx	r3
 801b74e:	f10a 0a01 	add.w	sl, sl, #1
 801b752:	fa1f fa8a 	uxth.w	sl, sl
 801b756:	e7e2      	b.n	801b71e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16e>
 801b758:	6830      	ldr	r0, [r6, #0]
 801b75a:	2101      	movs	r1, #1
 801b75c:	6803      	ldr	r3, [r0, #0]
 801b75e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b760:	4798      	blx	r3
 801b762:	e7ab      	b.n	801b6bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b764:	69d3      	ldr	r3, [r2, #28]
 801b766:	4798      	blx	r3
 801b768:	4b54      	ldr	r3, [pc, #336]	; (801b8bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>)
 801b76a:	781b      	ldrb	r3, [r3, #0]
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	f43f af29 	beq.w	801b5c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b772:	2300      	movs	r3, #0
 801b774:	883d      	ldrh	r5, [r7, #0]
 801b776:	34ea      	adds	r4, #234	; 0xea
 801b778:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b77c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801b780:	42ab      	cmp	r3, r5
 801b782:	f67f af1f 	bls.w	801b5c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b786:	ab1a      	add	r3, sp, #104	; 0x68
 801b788:	4620      	mov	r0, r4
 801b78a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b78e:	3501      	adds	r5, #1
 801b790:	3b44      	subs	r3, #68	; 0x44
 801b792:	b2ad      	uxth	r5, r5
 801b794:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b798:	f7ff fe22 	bl	801b3e0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b79c:	e7ee      	b.n	801b77c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1cc>
 801b79e:	2b02      	cmp	r3, #2
 801b7a0:	d16a      	bne.n	801b878 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801b7a2:	f8df a120 	ldr.w	sl, [pc, #288]	; 801b8c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x314>
 801b7a6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b7aa:	42ab      	cmp	r3, r5
 801b7ac:	d9dc      	bls.n	801b768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801b7ae:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b7b2:	ab03      	add	r3, sp, #12
 801b7b4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b7b8:	6851      	ldr	r1, [r2, #4]
 801b7ba:	c303      	stmia	r3!, {r0, r1}
 801b7bc:	f89a 3000 	ldrb.w	r3, [sl]
 801b7c0:	2b01      	cmp	r3, #1
 801b7c2:	d102      	bne.n	801b7ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21a>
 801b7c4:	a803      	add	r0, sp, #12
 801b7c6:	f7ff fbe7 	bl	801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b7ca:	a803      	add	r0, sp, #12
 801b7cc:	f7fc f92f 	bl	8017a2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b7d0:	2800      	cmp	r0, #0
 801b7d2:	d14a      	bne.n	801b86a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ba>
 801b7d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b7d8:	f10d 0914 	add.w	r9, sp, #20
 801b7dc:	f10d 081c 	add.w	r8, sp, #28
 801b7e0:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b7e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b7e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b7ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b7f0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b7f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b7f8:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801b7fc:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801b800:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b804:	44dc      	add	ip, fp
 801b806:	6830      	ldr	r0, [r6, #0]
 801b808:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801b80c:	ebac 0c02 	sub.w	ip, ip, r2
 801b810:	f8d0 e000 	ldr.w	lr, [r0]
 801b814:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b818:	fa1f fc8c 	uxth.w	ip, ip
 801b81c:	f8cd c000 	str.w	ip, [sp]
 801b820:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801b824:	47d8      	blx	fp
 801b826:	f89a 3000 	ldrb.w	r3, [sl]
 801b82a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b82e:	2b01      	cmp	r3, #1
 801b830:	d11e      	bne.n	801b870 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c0>
 801b832:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b836:	e888 0003 	stmia.w	r8, {r0, r1}
 801b83a:	4640      	mov	r0, r8
 801b83c:	f7ff fb52 	bl	801aee4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b840:	6823      	ldr	r3, [r4, #0]
 801b842:	4641      	mov	r1, r8
 801b844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b846:	4620      	mov	r0, r4
 801b848:	4798      	blx	r3
 801b84a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b84e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b852:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801b856:	4413      	add	r3, r2
 801b858:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b85c:	440a      	add	r2, r1
 801b85e:	b21b      	sxth	r3, r3
 801b860:	b212      	sxth	r2, r2
 801b862:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b866:	4293      	cmp	r3, r2
 801b868:	dbc6      	blt.n	801b7f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x248>
 801b86a:	3501      	adds	r5, #1
 801b86c:	b2ad      	uxth	r5, r5
 801b86e:	e79a      	b.n	801b7a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 801b870:	6823      	ldr	r3, [r4, #0]
 801b872:	4649      	mov	r1, r9
 801b874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b876:	e7e6      	b.n	801b846 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x296>
 801b878:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b87c:	42ab      	cmp	r3, r5
 801b87e:	f67f af73 	bls.w	801b768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801b882:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b886:	ab07      	add	r3, sp, #28
 801b888:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b88c:	6851      	ldr	r1, [r2, #4]
 801b88e:	c303      	stmia	r3!, {r0, r1}
 801b890:	a807      	add	r0, sp, #28
 801b892:	f7fc f8cc 	bl	8017a2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b896:	b920      	cbnz	r0, 801b8a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f2>
 801b898:	6823      	ldr	r3, [r4, #0]
 801b89a:	a907      	add	r1, sp, #28
 801b89c:	4620      	mov	r0, r4
 801b89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b8a0:	4798      	blx	r3
 801b8a2:	3501      	adds	r5, #1
 801b8a4:	b2ad      	uxth	r5, r5
 801b8a6:	e7e7      	b.n	801b878 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801b8a8:	2000b38c 	.word	0x2000b38c
 801b8ac:	2000b398 	.word	0x2000b398
 801b8b0:	20000040 	.word	0x20000040
 801b8b4:	2000b314 	.word	0x2000b314
 801b8b8:	2000b30a 	.word	0x2000b30a
 801b8bc:	2000b312 	.word	0x2000b312
 801b8c0:	2000b308 	.word	0x2000b308
 801b8c4:	2000b30c 	.word	0x2000b30c

0801b8c8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b8c8:	4b03      	ldr	r3, [pc, #12]	; (801b8d8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b8ca:	2200      	movs	r2, #0
 801b8cc:	801a      	strh	r2, [r3, #0]
 801b8ce:	805a      	strh	r2, [r3, #2]
 801b8d0:	809a      	strh	r2, [r3, #4]
 801b8d2:	80da      	strh	r2, [r3, #6]
 801b8d4:	4770      	bx	lr
 801b8d6:	bf00      	nop
 801b8d8:	2000b398 	.word	0x2000b398

0801b8dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8e0:	b099      	sub	sp, #100	; 0x64
 801b8e2:	4607      	mov	r7, r0
 801b8e4:	4614      	mov	r4, r2
 801b8e6:	461d      	mov	r5, r3
 801b8e8:	a802      	add	r0, sp, #8
 801b8ea:	468a      	mov	sl, r1
 801b8ec:	f000 fe4b 	bl	801c586 <_ZN8touchgfx12TextProviderC1Ev>
 801b8f0:	683b      	ldr	r3, [r7, #0]
 801b8f2:	4638      	mov	r0, r7
 801b8f4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801b8f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b8fa:	4798      	blx	r3
 801b8fc:	462a      	mov	r2, r5
 801b8fe:	2500      	movs	r5, #0
 801b900:	4621      	mov	r1, r4
 801b902:	4603      	mov	r3, r0
 801b904:	a802      	add	r0, sp, #8
 801b906:	462c      	mov	r4, r5
 801b908:	46a9      	mov	r9, r5
 801b90a:	46a8      	mov	r8, r5
 801b90c:	f000 fe80 	bl	801c610 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b910:	2300      	movs	r3, #0
 801b912:	9301      	str	r3, [sp, #4]
 801b914:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b918:	429c      	cmp	r4, r3
 801b91a:	d002      	beq.n	801b922 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801b91c:	455c      	cmp	r4, fp
 801b91e:	bf18      	it	ne
 801b920:	4625      	movne	r5, r4
 801b922:	ab01      	add	r3, sp, #4
 801b924:	463a      	mov	r2, r7
 801b926:	4651      	mov	r1, sl
 801b928:	a802      	add	r0, sp, #8
 801b92a:	f001 f96b 	bl	801cc04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b92e:	4604      	mov	r4, r0
 801b930:	b108      	cbz	r0, 801b936 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801b932:	280a      	cmp	r0, #10
 801b934:	d10a      	bne.n	801b94c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801b936:	45c1      	cmp	r9, r8
 801b938:	bf38      	it	cc
 801b93a:	46c1      	movcc	r9, r8
 801b93c:	f04f 0800 	mov.w	r8, #0
 801b940:	2c00      	cmp	r4, #0
 801b942:	d1e5      	bne.n	801b910 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801b944:	4648      	mov	r0, r9
 801b946:	b019      	add	sp, #100	; 0x64
 801b948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b94c:	9a01      	ldr	r2, [sp, #4]
 801b94e:	2a00      	cmp	r2, #0
 801b950:	d0de      	beq.n	801b910 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801b952:	7b56      	ldrb	r6, [r2, #13]
 801b954:	4629      	mov	r1, r5
 801b956:	683b      	ldr	r3, [r7, #0]
 801b958:	0076      	lsls	r6, r6, #1
 801b95a:	8894      	ldrh	r4, [r2, #4]
 801b95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b95e:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801b962:	7a96      	ldrb	r6, [r2, #10]
 801b964:	4306      	orrs	r6, r0
 801b966:	4638      	mov	r0, r7
 801b968:	4798      	blx	r3
 801b96a:	4430      	add	r0, r6
 801b96c:	4480      	add	r8, r0
 801b96e:	fa1f f888 	uxth.w	r8, r8
 801b972:	e7e5      	b.n	801b940 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801b974 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b974:	b508      	push	{r3, lr}
 801b976:	6803      	ldr	r3, [r0, #0]
 801b978:	68db      	ldr	r3, [r3, #12]
 801b97a:	4798      	blx	r3
 801b97c:	b128      	cbz	r0, 801b98a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b97e:	7b43      	ldrb	r3, [r0, #13]
 801b980:	7a80      	ldrb	r0, [r0, #10]
 801b982:	005b      	lsls	r3, r3, #1
 801b984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b988:	4318      	orrs	r0, r3
 801b98a:	bd08      	pop	{r3, pc}

0801b98c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b98c:	b40e      	push	{r1, r2, r3}
 801b98e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b990:	b098      	sub	sp, #96	; 0x60
 801b992:	4605      	mov	r5, r0
 801b994:	ab1d      	add	r3, sp, #116	; 0x74
 801b996:	a802      	add	r0, sp, #8
 801b998:	ae18      	add	r6, sp, #96	; 0x60
 801b99a:	f853 4b04 	ldr.w	r4, [r3], #4
 801b99e:	9300      	str	r3, [sp, #0]
 801b9a0:	f000 fdf1 	bl	801c586 <_ZN8touchgfx12TextProviderC1Ev>
 801b9a4:	682b      	ldr	r3, [r5, #0]
 801b9a6:	4628      	mov	r0, r5
 801b9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9aa:	4798      	blx	r3
 801b9ac:	4621      	mov	r1, r4
 801b9ae:	2400      	movs	r4, #0
 801b9b0:	4603      	mov	r3, r0
 801b9b2:	9a00      	ldr	r2, [sp, #0]
 801b9b4:	a802      	add	r0, sp, #8
 801b9b6:	f000 fe2b 	bl	801c610 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b9ba:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801b9be:	462a      	mov	r2, r5
 801b9c0:	4633      	mov	r3, r6
 801b9c2:	4621      	mov	r1, r4
 801b9c4:	a802      	add	r0, sp, #8
 801b9c6:	f001 f91d 	bl	801cc04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b9ca:	b300      	cbz	r0, 801ba0e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801b9cc:	280a      	cmp	r0, #10
 801b9ce:	d01a      	beq.n	801ba06 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801b9d0:	9f01      	ldr	r7, [sp, #4]
 801b9d2:	b1c7      	cbz	r7, 801ba06 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801b9d4:	7b78      	ldrb	r0, [r7, #13]
 801b9d6:	7a3b      	ldrb	r3, [r7, #8]
 801b9d8:	00c1      	lsls	r1, r0, #3
 801b9da:	88aa      	ldrh	r2, [r5, #4]
 801b9dc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b9e0:	4319      	orrs	r1, r3
 801b9e2:	0643      	lsls	r3, r0, #25
 801b9e4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801b9e8:	bf48      	it	mi
 801b9ea:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801b9ee:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b9f2:	bf48      	it	mi
 801b9f4:	b219      	sxthmi	r1, r3
 801b9f6:	79fb      	ldrb	r3, [r7, #7]
 801b9f8:	4303      	orrs	r3, r0
 801b9fa:	4413      	add	r3, r2
 801b9fc:	1a5b      	subs	r3, r3, r1
 801b9fe:	b29b      	uxth	r3, r3
 801ba00:	42a3      	cmp	r3, r4
 801ba02:	bfc8      	it	gt
 801ba04:	b21c      	sxthgt	r4, r3
 801ba06:	4633      	mov	r3, r6
 801ba08:	462a      	mov	r2, r5
 801ba0a:	2100      	movs	r1, #0
 801ba0c:	e7da      	b.n	801b9c4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801ba0e:	b2a0      	uxth	r0, r4
 801ba10:	b018      	add	sp, #96	; 0x60
 801ba12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ba16:	b003      	add	sp, #12
 801ba18:	4770      	bx	lr

0801ba1a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ba1a:	b40e      	push	{r1, r2, r3}
 801ba1c:	b530      	push	{r4, r5, lr}
 801ba1e:	b098      	sub	sp, #96	; 0x60
 801ba20:	4604      	mov	r4, r0
 801ba22:	ab1b      	add	r3, sp, #108	; 0x6c
 801ba24:	a802      	add	r0, sp, #8
 801ba26:	f853 5b04 	ldr.w	r5, [r3], #4
 801ba2a:	9301      	str	r3, [sp, #4]
 801ba2c:	f000 fdab 	bl	801c586 <_ZN8touchgfx12TextProviderC1Ev>
 801ba30:	6823      	ldr	r3, [r4, #0]
 801ba32:	4620      	mov	r0, r4
 801ba34:	2401      	movs	r4, #1
 801ba36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba38:	4798      	blx	r3
 801ba3a:	9a01      	ldr	r2, [sp, #4]
 801ba3c:	4603      	mov	r3, r0
 801ba3e:	4629      	mov	r1, r5
 801ba40:	a802      	add	r0, sp, #8
 801ba42:	f000 fde5 	bl	801c610 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ba46:	a802      	add	r0, sp, #8
 801ba48:	f001 f9ce 	bl	801cde8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ba4c:	b2a3      	uxth	r3, r4
 801ba4e:	b138      	cbz	r0, 801ba60 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801ba50:	280a      	cmp	r0, #10
 801ba52:	a802      	add	r0, sp, #8
 801ba54:	bf04      	itt	eq
 801ba56:	3301      	addeq	r3, #1
 801ba58:	b21c      	sxtheq	r4, r3
 801ba5a:	f001 f9c5 	bl	801cde8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ba5e:	e7f5      	b.n	801ba4c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801ba60:	4618      	mov	r0, r3
 801ba62:	b018      	add	sp, #96	; 0x60
 801ba64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ba68:	b003      	add	sp, #12
 801ba6a:	4770      	bx	lr

0801ba6c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801ba6c:	b40e      	push	{r1, r2, r3}
 801ba6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba70:	b098      	sub	sp, #96	; 0x60
 801ba72:	4604      	mov	r4, r0
 801ba74:	26ff      	movs	r6, #255	; 0xff
 801ba76:	ab1d      	add	r3, sp, #116	; 0x74
 801ba78:	a802      	add	r0, sp, #8
 801ba7a:	f853 5b04 	ldr.w	r5, [r3], #4
 801ba7e:	9300      	str	r3, [sp, #0]
 801ba80:	f000 fd81 	bl	801c586 <_ZN8touchgfx12TextProviderC1Ev>
 801ba84:	6823      	ldr	r3, [r4, #0]
 801ba86:	4620      	mov	r0, r4
 801ba88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba8a:	4798      	blx	r3
 801ba8c:	4629      	mov	r1, r5
 801ba8e:	4603      	mov	r3, r0
 801ba90:	9a00      	ldr	r2, [sp, #0]
 801ba92:	a802      	add	r0, sp, #8
 801ba94:	ad18      	add	r5, sp, #96	; 0x60
 801ba96:	f000 fdbb 	bl	801c610 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ba9a:	2100      	movs	r1, #0
 801ba9c:	4622      	mov	r2, r4
 801ba9e:	a802      	add	r0, sp, #8
 801baa0:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801baa4:	462b      	mov	r3, r5
 801baa6:	f001 f8ad 	bl	801cc04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801baaa:	b1d8      	cbz	r0, 801bae4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801baac:	280a      	cmp	r0, #10
 801baae:	d012      	beq.n	801bad6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801bab0:	9801      	ldr	r0, [sp, #4]
 801bab2:	b180      	cbz	r0, 801bad6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801bab4:	7b47      	ldrb	r7, [r0, #13]
 801bab6:	7922      	ldrb	r2, [r4, #4]
 801bab8:	00fb      	lsls	r3, r7, #3
 801baba:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801babe:	7a03      	ldrb	r3, [r0, #8]
 801bac0:	430b      	orrs	r3, r1
 801bac2:	0679      	lsls	r1, r7, #25
 801bac4:	bf44      	itt	mi
 801bac6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801baca:	b21b      	sxthmi	r3, r3
 801bacc:	1ad3      	subs	r3, r2, r3
 801bace:	b2db      	uxtb	r3, r3
 801bad0:	429e      	cmp	r6, r3
 801bad2:	bf28      	it	cs
 801bad4:	461e      	movcs	r6, r3
 801bad6:	462b      	mov	r3, r5
 801bad8:	4622      	mov	r2, r4
 801bada:	2100      	movs	r1, #0
 801badc:	a802      	add	r0, sp, #8
 801bade:	f001 f891 	bl	801cc04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bae2:	e7e2      	b.n	801baaa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801bae4:	4630      	mov	r0, r6
 801bae6:	b018      	add	sp, #96	; 0x60
 801bae8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801baec:	b003      	add	sp, #12
 801baee:	4770      	bx	lr

0801baf0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801baf0:	b513      	push	{r0, r1, r4, lr}
 801baf2:	1d01      	adds	r1, r0, #4
 801baf4:	4603      	mov	r3, r0
 801baf6:	466a      	mov	r2, sp
 801baf8:	c903      	ldmia	r1, {r0, r1}
 801bafa:	e882 0003 	stmia.w	r2, {r0, r1}
 801bafe:	2100      	movs	r1, #0
 801bb00:	4618      	mov	r0, r3
 801bb02:	9100      	str	r1, [sp, #0]
 801bb04:	6819      	ldr	r1, [r3, #0]
 801bb06:	690c      	ldr	r4, [r1, #16]
 801bb08:	4611      	mov	r1, r2
 801bb0a:	47a0      	blx	r4
 801bb0c:	b002      	add	sp, #8
 801bb0e:	bd10      	pop	{r4, pc}

0801bb10 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801bb10:	b538      	push	{r3, r4, r5, lr}
 801bb12:	680b      	ldr	r3, [r1, #0]
 801bb14:	460c      	mov	r4, r1
 801bb16:	4605      	mov	r5, r0
 801bb18:	68db      	ldr	r3, [r3, #12]
 801bb1a:	4798      	blx	r3
 801bb1c:	6823      	ldr	r3, [r4, #0]
 801bb1e:	4620      	mov	r0, r4
 801bb20:	4629      	mov	r1, r5
 801bb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb24:	4798      	blx	r3
 801bb26:	4628      	mov	r0, r5
 801bb28:	bd38      	pop	{r3, r4, r5, pc}

0801bb2a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801bb2a:	b410      	push	{r4}
 801bb2c:	880a      	ldrh	r2, [r1, #0]
 801bb2e:	8884      	ldrh	r4, [r0, #4]
 801bb30:	4422      	add	r2, r4
 801bb32:	800a      	strh	r2, [r1, #0]
 801bb34:	884a      	ldrh	r2, [r1, #2]
 801bb36:	88c4      	ldrh	r4, [r0, #6]
 801bb38:	4422      	add	r2, r4
 801bb3a:	804a      	strh	r2, [r1, #2]
 801bb3c:	6940      	ldr	r0, [r0, #20]
 801bb3e:	b120      	cbz	r0, 801bb4a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801bb40:	6803      	ldr	r3, [r0, #0]
 801bb42:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb48:	4718      	bx	r3
 801bb4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb4e:	4770      	bx	lr

0801bb50 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801bb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb52:	460b      	mov	r3, r1
 801bb54:	b085      	sub	sp, #20
 801bb56:	4604      	mov	r4, r0
 801bb58:	b901      	cbnz	r1, 801bb5c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801bb5a:	b1fa      	cbz	r2, 801bb9c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801bb5c:	1d27      	adds	r7, r4, #4
 801bb5e:	466e      	mov	r6, sp
 801bb60:	ad02      	add	r5, sp, #8
 801bb62:	e897 0003 	ldmia.w	r7, {r0, r1}
 801bb66:	e886 0003 	stmia.w	r6, {r0, r1}
 801bb6a:	88e1      	ldrh	r1, [r4, #6]
 801bb6c:	4620      	mov	r0, r4
 801bb6e:	440a      	add	r2, r1
 801bb70:	88a1      	ldrh	r1, [r4, #4]
 801bb72:	4419      	add	r1, r3
 801bb74:	6823      	ldr	r3, [r4, #0]
 801bb76:	b212      	sxth	r2, r2
 801bb78:	b209      	sxth	r1, r1
 801bb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb7c:	4798      	blx	r3
 801bb7e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801bb82:	e885 0003 	stmia.w	r5, {r0, r1}
 801bb86:	6960      	ldr	r0, [r4, #20]
 801bb88:	b150      	cbz	r0, 801bba0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801bb8a:	6803      	ldr	r3, [r0, #0]
 801bb8c:	4631      	mov	r1, r6
 801bb8e:	691b      	ldr	r3, [r3, #16]
 801bb90:	4798      	blx	r3
 801bb92:	6960      	ldr	r0, [r4, #20]
 801bb94:	6803      	ldr	r3, [r0, #0]
 801bb96:	691b      	ldr	r3, [r3, #16]
 801bb98:	4629      	mov	r1, r5
 801bb9a:	4798      	blx	r3
 801bb9c:	b005      	add	sp, #20
 801bb9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bba0:	f7ff fb84 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 801bba4:	6803      	ldr	r3, [r0, #0]
 801bba6:	4631      	mov	r1, r6
 801bba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bbaa:	4798      	blx	r3
 801bbac:	f7ff fb7e 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 801bbb0:	6803      	ldr	r3, [r0, #0]
 801bbb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bbb4:	e7f0      	b.n	801bb98 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801bbb6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801bbb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bbb8:	8882      	ldrh	r2, [r0, #4]
 801bbba:	4605      	mov	r5, r0
 801bbbc:	880b      	ldrh	r3, [r1, #0]
 801bbbe:	460c      	mov	r4, r1
 801bbc0:	4413      	add	r3, r2
 801bbc2:	800b      	strh	r3, [r1, #0]
 801bbc4:	884b      	ldrh	r3, [r1, #2]
 801bbc6:	88c2      	ldrh	r2, [r0, #6]
 801bbc8:	4413      	add	r3, r2
 801bbca:	4602      	mov	r2, r0
 801bbcc:	804b      	strh	r3, [r1, #2]
 801bbce:	466b      	mov	r3, sp
 801bbd0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801bbd4:	6851      	ldr	r1, [r2, #4]
 801bbd6:	c303      	stmia	r3!, {r0, r1}
 801bbd8:	4621      	mov	r1, r4
 801bbda:	4668      	mov	r0, sp
 801bbdc:	f7fb fee4 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 801bbe0:	466b      	mov	r3, sp
 801bbe2:	cb03      	ldmia	r3!, {r0, r1}
 801bbe4:	6020      	str	r0, [r4, #0]
 801bbe6:	6061      	str	r1, [r4, #4]
 801bbe8:	6968      	ldr	r0, [r5, #20]
 801bbea:	b128      	cbz	r0, 801bbf8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801bbec:	6803      	ldr	r3, [r0, #0]
 801bbee:	691b      	ldr	r3, [r3, #16]
 801bbf0:	4621      	mov	r1, r4
 801bbf2:	4798      	blx	r3
 801bbf4:	b003      	add	sp, #12
 801bbf6:	bd30      	pop	{r4, r5, pc}
 801bbf8:	f7ff fb58 	bl	801b2ac <_ZN8touchgfx11Application11getInstanceEv>
 801bbfc:	6803      	ldr	r3, [r0, #0]
 801bbfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc00:	e7f6      	b.n	801bbf0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801bc02 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801bc02:	b570      	push	{r4, r5, r6, lr}
 801bc04:	8882      	ldrh	r2, [r0, #4]
 801bc06:	460c      	mov	r4, r1
 801bc08:	880b      	ldrh	r3, [r1, #0]
 801bc0a:	4605      	mov	r5, r0
 801bc0c:	4413      	add	r3, r2
 801bc0e:	800b      	strh	r3, [r1, #0]
 801bc10:	884b      	ldrh	r3, [r1, #2]
 801bc12:	88c2      	ldrh	r2, [r0, #6]
 801bc14:	4413      	add	r3, r2
 801bc16:	804b      	strh	r3, [r1, #2]
 801bc18:	1d01      	adds	r1, r0, #4
 801bc1a:	4620      	mov	r0, r4
 801bc1c:	f7fb fec4 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 801bc20:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bc24:	2b00      	cmp	r3, #0
 801bc26:	dd0b      	ble.n	801bc40 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bc28:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	dd07      	ble.n	801bc40 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bc30:	6968      	ldr	r0, [r5, #20]
 801bc32:	b128      	cbz	r0, 801bc40 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bc34:	6803      	ldr	r3, [r0, #0]
 801bc36:	4621      	mov	r1, r4
 801bc38:	6a1b      	ldr	r3, [r3, #32]
 801bc3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bc3e:	4718      	bx	r3
 801bc40:	bd70      	pop	{r4, r5, r6, pc}

0801bc42 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801bc42:	b510      	push	{r4, lr}
 801bc44:	2300      	movs	r3, #0
 801bc46:	4604      	mov	r4, r0
 801bc48:	4608      	mov	r0, r1
 801bc4a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bc4e:	8023      	strh	r3, [r4, #0]
 801bc50:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bc54:	8063      	strh	r3, [r4, #2]
 801bc56:	6803      	ldr	r3, [r0, #0]
 801bc58:	80a1      	strh	r1, [r4, #4]
 801bc5a:	4621      	mov	r1, r4
 801bc5c:	80e2      	strh	r2, [r4, #6]
 801bc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc60:	4798      	blx	r3
 801bc62:	4620      	mov	r0, r4
 801bc64:	bd10      	pop	{r4, pc}
	...

0801bc68 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801bc68:	b530      	push	{r4, r5, lr}
 801bc6a:	8083      	strh	r3, [r0, #4]
 801bc6c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801bc70:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801bc74:	7183      	strb	r3, [r0, #6]
 801bc76:	79c3      	ldrb	r3, [r0, #7]
 801bc78:	6101      	str	r1, [r0, #16]
 801bc7a:	f365 0306 	bfi	r3, r5, #0, #7
 801bc7e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801bc82:	8282      	strh	r2, [r0, #20]
 801bc84:	f365 13c7 	bfi	r3, r5, #7, #1
 801bc88:	71c3      	strb	r3, [r0, #7]
 801bc8a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801bc8e:	7203      	strb	r3, [r0, #8]
 801bc90:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801bc94:	7243      	strb	r3, [r0, #9]
 801bc96:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801bc9a:	8143      	strh	r3, [r0, #10]
 801bc9c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801bca0:	8183      	strh	r3, [r0, #12]
 801bca2:	4b01      	ldr	r3, [pc, #4]	; (801bca8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801bca4:	6003      	str	r3, [r0, #0]
 801bca6:	bd30      	pop	{r4, r5, pc}
 801bca8:	0802bb08 	.word	0x0802bb08

0801bcac <_ZNK8touchgfx9ConstFont4findEt>:
 801bcac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bcae:	6904      	ldr	r4, [r0, #16]
 801bcb0:	8a82      	ldrh	r2, [r0, #20]
 801bcb2:	88a3      	ldrh	r3, [r4, #4]
 801bcb4:	3a01      	subs	r2, #1
 801bcb6:	1acb      	subs	r3, r1, r3
 801bcb8:	d431      	bmi.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801bcba:	4293      	cmp	r3, r2
 801bcbc:	dd0c      	ble.n	801bcd8 <_ZNK8touchgfx9ConstFont4findEt+0x2c>
 801bcbe:	230e      	movs	r3, #14
 801bcc0:	fb03 4302 	mla	r3, r3, r2, r4
 801bcc4:	889b      	ldrh	r3, [r3, #4]
 801bcc6:	1a5b      	subs	r3, r3, r1
 801bcc8:	1ad3      	subs	r3, r2, r3
 801bcca:	429a      	cmp	r2, r3
 801bccc:	db27      	blt.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	bfbc      	itt	lt
 801bcd2:	2302      	movlt	r3, #2
 801bcd4:	fb92 f3f3 	sdivlt	r3, r2, r3
 801bcd8:	2500      	movs	r5, #0
 801bcda:	260e      	movs	r6, #14
 801bcdc:	4295      	cmp	r5, r2
 801bcde:	dc1e      	bgt.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801bce0:	fb06 4003 	mla	r0, r6, r3, r4
 801bce4:	8887      	ldrh	r7, [r0, #4]
 801bce6:	428f      	cmp	r7, r1
 801bce8:	d01a      	beq.n	801bd20 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801bcea:	d90d      	bls.n	801bd08 <_ZNK8touchgfx9ConstFont4findEt+0x5c>
 801bcec:	1e5a      	subs	r2, r3, #1
 801bcee:	4295      	cmp	r5, r2
 801bcf0:	dc15      	bgt.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801bcf2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801bcf6:	1a5b      	subs	r3, r3, r1
 801bcf8:	1ad3      	subs	r3, r2, r3
 801bcfa:	429a      	cmp	r2, r3
 801bcfc:	db0f      	blt.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801bcfe:	429d      	cmp	r5, r3
 801bd00:	ddec      	ble.n	801bcdc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801bd02:	1953      	adds	r3, r2, r5
 801bd04:	105b      	asrs	r3, r3, #1
 801bd06:	e7e9      	b.n	801bcdc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801bd08:	1c5d      	adds	r5, r3, #1
 801bd0a:	42aa      	cmp	r2, r5
 801bd0c:	db07      	blt.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801bd0e:	8a43      	ldrh	r3, [r0, #18]
 801bd10:	1acb      	subs	r3, r1, r3
 801bd12:	442b      	add	r3, r5
 801bd14:	429d      	cmp	r5, r3
 801bd16:	dc02      	bgt.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801bd18:	429a      	cmp	r2, r3
 801bd1a:	dadf      	bge.n	801bcdc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801bd1c:	e7f1      	b.n	801bd02 <_ZNK8touchgfx9ConstFont4findEt+0x56>
 801bd1e:	2000      	movs	r0, #0
 801bd20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bd22 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801bd22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd24:	4604      	mov	r4, r0
 801bd26:	4617      	mov	r7, r2
 801bd28:	461e      	mov	r6, r3
 801bd2a:	b911      	cbnz	r1, 801bd32 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801bd2c:	2500      	movs	r5, #0
 801bd2e:	4628      	mov	r0, r5
 801bd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd32:	290a      	cmp	r1, #10
 801bd34:	d0fa      	beq.n	801bd2c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bd36:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801bd3a:	4291      	cmp	r1, r2
 801bd3c:	d0f6      	beq.n	801bd2c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bd3e:	f242 020b 	movw	r2, #8203	; 0x200b
 801bd42:	4291      	cmp	r1, r2
 801bd44:	d0f2      	beq.n	801bd2c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bd46:	f7ff ffb1 	bl	801bcac <_ZNK8touchgfx9ConstFont4findEt>
 801bd4a:	4605      	mov	r5, r0
 801bd4c:	b950      	cbnz	r0, 801bd64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801bd4e:	6823      	ldr	r3, [r4, #0]
 801bd50:	4620      	mov	r0, r4
 801bd52:	691b      	ldr	r3, [r3, #16]
 801bd54:	4798      	blx	r3
 801bd56:	4601      	mov	r1, r0
 801bd58:	4620      	mov	r0, r4
 801bd5a:	f7ff ffa7 	bl	801bcac <_ZNK8touchgfx9ConstFont4findEt>
 801bd5e:	4605      	mov	r5, r0
 801bd60:	2800      	cmp	r0, #0
 801bd62:	d0e3      	beq.n	801bd2c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bd64:	6823      	ldr	r3, [r4, #0]
 801bd66:	4629      	mov	r1, r5
 801bd68:	4620      	mov	r0, r4
 801bd6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bd6c:	4798      	blx	r3
 801bd6e:	6038      	str	r0, [r7, #0]
 801bd70:	6823      	ldr	r3, [r4, #0]
 801bd72:	4620      	mov	r0, r4
 801bd74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd76:	4798      	blx	r3
 801bd78:	7030      	strb	r0, [r6, #0]
 801bd7a:	e7d8      	b.n	801bd2e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801bd7c <_ZN8touchgfx6memsetEPvhm>:
 801bd7c:	4402      	add	r2, r0
 801bd7e:	4290      	cmp	r0, r2
 801bd80:	d002      	beq.n	801bd88 <_ZN8touchgfx6memsetEPvhm+0xc>
 801bd82:	f800 1b01 	strb.w	r1, [r0], #1
 801bd86:	e7fa      	b.n	801bd7e <_ZN8touchgfx6memsetEPvhm+0x2>
 801bd88:	4770      	bx	lr

0801bd8a <_ZN8touchgfx3clzEl>:
 801bd8a:	b1e8      	cbz	r0, 801bdc8 <_ZN8touchgfx3clzEl+0x3e>
 801bd8c:	2800      	cmp	r0, #0
 801bd8e:	bfb8      	it	lt
 801bd90:	4240      	neglt	r0, r0
 801bd92:	0c03      	lsrs	r3, r0, #16
 801bd94:	041b      	lsls	r3, r3, #16
 801bd96:	b9ab      	cbnz	r3, 801bdc4 <_ZN8touchgfx3clzEl+0x3a>
 801bd98:	0400      	lsls	r0, r0, #16
 801bd9a:	2310      	movs	r3, #16
 801bd9c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801bda0:	bf04      	itt	eq
 801bda2:	0200      	lsleq	r0, r0, #8
 801bda4:	3308      	addeq	r3, #8
 801bda6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801bdaa:	bf04      	itt	eq
 801bdac:	0100      	lsleq	r0, r0, #4
 801bdae:	3304      	addeq	r3, #4
 801bdb0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801bdb4:	bf04      	itt	eq
 801bdb6:	0080      	lsleq	r0, r0, #2
 801bdb8:	3302      	addeq	r3, #2
 801bdba:	2800      	cmp	r0, #0
 801bdbc:	bfa8      	it	ge
 801bdbe:	3301      	addge	r3, #1
 801bdc0:	1e58      	subs	r0, r3, #1
 801bdc2:	4770      	bx	lr
 801bdc4:	2300      	movs	r3, #0
 801bdc6:	e7e9      	b.n	801bd9c <_ZN8touchgfx3clzEl+0x12>
 801bdc8:	201f      	movs	r0, #31
 801bdca:	4770      	bx	lr

0801bdcc <_ZN8touchgfx6muldivElllRl>:
 801bdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdd0:	4604      	mov	r4, r0
 801bdd2:	4698      	mov	r8, r3
 801bdd4:	2601      	movs	r6, #1
 801bdd6:	f7ff ffd8 	bl	801bd8a <_ZN8touchgfx3clzEl>
 801bdda:	2c00      	cmp	r4, #0
 801bddc:	fa04 f500 	lsl.w	r5, r4, r0
 801bde0:	fa06 f600 	lsl.w	r6, r6, r0
 801bde4:	bfba      	itte	lt
 801bde6:	f04f 37ff 	movlt.w	r7, #4294967295
 801bdea:	4264      	neglt	r4, r4
 801bdec:	2701      	movge	r7, #1
 801bdee:	2900      	cmp	r1, #0
 801bdf0:	f106 36ff 	add.w	r6, r6, #4294967295
 801bdf4:	bfbc      	itt	lt
 801bdf6:	4249      	neglt	r1, r1
 801bdf8:	427f      	neglt	r7, r7
 801bdfa:	2a00      	cmp	r2, #0
 801bdfc:	fa41 fc00 	asr.w	ip, r1, r0
 801be00:	ea01 0106 	and.w	r1, r1, r6
 801be04:	bfb8      	it	lt
 801be06:	427f      	neglt	r7, r7
 801be08:	fb04 f401 	mul.w	r4, r4, r1
 801be0c:	fb95 f3f2 	sdiv	r3, r5, r2
 801be10:	fb02 5513 	mls	r5, r2, r3, r5
 801be14:	bfb8      	it	lt
 801be16:	4252      	neglt	r2, r2
 801be18:	fb94 f0f2 	sdiv	r0, r4, r2
 801be1c:	fb02 4410 	mls	r4, r2, r0, r4
 801be20:	fb0c 4405 	mla	r4, ip, r5, r4
 801be24:	fb94 f1f2 	sdiv	r1, r4, r2
 801be28:	4408      	add	r0, r1
 801be2a:	fb02 4211 	mls	r2, r2, r1, r4
 801be2e:	fb0c 0003 	mla	r0, ip, r3, r0
 801be32:	f8c8 2000 	str.w	r2, [r8]
 801be36:	4378      	muls	r0, r7
 801be38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801be3c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801be3c:	2000      	movs	r0, #0
 801be3e:	4770      	bx	lr

0801be40 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801be40:	2001      	movs	r0, #1
 801be42:	4770      	bx	lr

0801be44 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801be44:	2002      	movs	r0, #2
 801be46:	4770      	bx	lr

0801be48 <_ZN8touchgfx12GestureEventD1Ev>:
 801be48:	4770      	bx	lr

0801be4a <_ZN8touchgfx9DragEventD1Ev>:
 801be4a:	4770      	bx	lr

0801be4c <_ZN8touchgfx10ClickEventD1Ev>:
 801be4c:	4770      	bx	lr

0801be4e <_ZN8touchgfx10ClickEventD0Ev>:
 801be4e:	b510      	push	{r4, lr}
 801be50:	4604      	mov	r4, r0
 801be52:	210c      	movs	r1, #12
 801be54:	f00b fb7e 	bl	8027554 <_ZdlPvj>
 801be58:	4620      	mov	r0, r4
 801be5a:	bd10      	pop	{r4, pc}

0801be5c <_ZN8touchgfx9DragEventD0Ev>:
 801be5c:	b510      	push	{r4, lr}
 801be5e:	4604      	mov	r4, r0
 801be60:	2110      	movs	r1, #16
 801be62:	f00b fb77 	bl	8027554 <_ZdlPvj>
 801be66:	4620      	mov	r0, r4
 801be68:	bd10      	pop	{r4, pc}

0801be6a <_ZN8touchgfx12GestureEventD0Ev>:
 801be6a:	b510      	push	{r4, lr}
 801be6c:	4604      	mov	r4, r0
 801be6e:	210c      	movs	r1, #12
 801be70:	f00b fb70 	bl	8027554 <_ZdlPvj>
 801be74:	4620      	mov	r0, r4
 801be76:	bd10      	pop	{r4, pc}

0801be78 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801be78:	b530      	push	{r4, r5, lr}
 801be7a:	460d      	mov	r5, r1
 801be7c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801be7e:	b087      	sub	sp, #28
 801be80:	4604      	mov	r4, r0
 801be82:	b301      	cbz	r1, 801bec6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801be84:	a801      	add	r0, sp, #4
 801be86:	f7ff fedc 	bl	801bc42 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801be8a:	892a      	ldrh	r2, [r5, #8]
 801be8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801be90:	7928      	ldrb	r0, [r5, #4]
 801be92:	1ad2      	subs	r2, r2, r3
 801be94:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801be96:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801be9a:	441a      	add	r2, r3
 801be9c:	896b      	ldrh	r3, [r5, #10]
 801be9e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801bea2:	f88d 0010 	strb.w	r0, [sp, #16]
 801bea6:	1b5b      	subs	r3, r3, r5
 801bea8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801beaa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801beac:	442b      	add	r3, r5
 801beae:	4d07      	ldr	r5, [pc, #28]	; (801becc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801beb0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801beb4:	a903      	add	r1, sp, #12
 801beb6:	9503      	str	r5, [sp, #12]
 801beb8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bebc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bec0:	6803      	ldr	r3, [r0, #0]
 801bec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bec4:	4798      	blx	r3
 801bec6:	b007      	add	sp, #28
 801bec8:	bd30      	pop	{r4, r5, pc}
 801beca:	bf00      	nop
 801becc:	0802bb84 	.word	0x0802bb84

0801bed0 <_ZNK8touchgfx4Rect9intersectEss>:
 801bed0:	b510      	push	{r4, lr}
 801bed2:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bed6:	428b      	cmp	r3, r1
 801bed8:	dc10      	bgt.n	801befc <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801beda:	8884      	ldrh	r4, [r0, #4]
 801bedc:	4423      	add	r3, r4
 801bede:	b21b      	sxth	r3, r3
 801bee0:	4299      	cmp	r1, r3
 801bee2:	da0b      	bge.n	801befc <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801bee4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bee8:	4293      	cmp	r3, r2
 801beea:	dc07      	bgt.n	801befc <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801beec:	88c0      	ldrh	r0, [r0, #6]
 801beee:	4418      	add	r0, r3
 801bef0:	b200      	sxth	r0, r0
 801bef2:	4282      	cmp	r2, r0
 801bef4:	bfac      	ite	ge
 801bef6:	2000      	movge	r0, #0
 801bef8:	2001      	movlt	r0, #1
 801befa:	bd10      	pop	{r4, pc}
 801befc:	2000      	movs	r0, #0
 801befe:	e7fc      	b.n	801befa <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801bf00 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801bf00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf02:	460c      	mov	r4, r1
 801bf04:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801bf06:	b089      	sub	sp, #36	; 0x24
 801bf08:	4605      	mov	r5, r0
 801bf0a:	2900      	cmp	r1, #0
 801bf0c:	d054      	beq.n	801bfb8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801bf0e:	4668      	mov	r0, sp
 801bf10:	f7ff fe97 	bl	801bc42 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bf14:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801bf16:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801bf18:	4668      	mov	r0, sp
 801bf1a:	8922      	ldrh	r2, [r4, #8]
 801bf1c:	88e1      	ldrh	r1, [r4, #6]
 801bf1e:	443a      	add	r2, r7
 801bf20:	4431      	add	r1, r6
 801bf22:	b212      	sxth	r2, r2
 801bf24:	b209      	sxth	r1, r1
 801bf26:	f7ff ffd3 	bl	801bed0 <_ZNK8touchgfx4Rect9intersectEss>
 801bf2a:	b1d0      	cbz	r0, 801bf62 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801bf2c:	89a2      	ldrh	r2, [r4, #12]
 801bf2e:	4668      	mov	r0, sp
 801bf30:	8961      	ldrh	r1, [r4, #10]
 801bf32:	443a      	add	r2, r7
 801bf34:	4431      	add	r1, r6
 801bf36:	b212      	sxth	r2, r2
 801bf38:	b209      	sxth	r1, r1
 801bf3a:	f7ff ffc9 	bl	801bed0 <_ZNK8touchgfx4Rect9intersectEss>
 801bf3e:	4603      	mov	r3, r0
 801bf40:	b978      	cbnz	r0, 801bf62 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801bf42:	4a1e      	ldr	r2, [pc, #120]	; (801bfbc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801bf44:	a904      	add	r1, sp, #16
 801bf46:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bf48:	9204      	str	r2, [sp, #16]
 801bf4a:	2202      	movs	r2, #2
 801bf4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf50:	f88d 2014 	strb.w	r2, [sp, #20]
 801bf54:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bf58:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bf5c:	6803      	ldr	r3, [r0, #0]
 801bf5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf60:	4798      	blx	r3
 801bf62:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801bf64:	a802      	add	r0, sp, #8
 801bf66:	f7ff fe6c 	bl	801bc42 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bf6a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bf6e:	88e0      	ldrh	r0, [r4, #6]
 801bf70:	8961      	ldrh	r1, [r4, #10]
 801bf72:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801bf76:	1a80      	subs	r0, r0, r2
 801bf78:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801bf7c:	1a89      	subs	r1, r1, r2
 801bf7e:	8923      	ldrh	r3, [r4, #8]
 801bf80:	4460      	add	r0, ip
 801bf82:	89a2      	ldrh	r2, [r4, #12]
 801bf84:	4461      	add	r1, ip
 801bf86:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801bf88:	eba3 030e 	sub.w	r3, r3, lr
 801bf8c:	eba2 020e 	sub.w	r2, r2, lr
 801bf90:	f8ad 0016 	strh.w	r0, [sp, #22]
 801bf94:	7927      	ldrb	r7, [r4, #4]
 801bf96:	4433      	add	r3, r6
 801bf98:	4432      	add	r2, r6
 801bf9a:	4c09      	ldr	r4, [pc, #36]	; (801bfc0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801bf9c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bf9e:	f8ad 101a 	strh.w	r1, [sp, #26]
 801bfa2:	a904      	add	r1, sp, #16
 801bfa4:	9404      	str	r4, [sp, #16]
 801bfa6:	f88d 7014 	strb.w	r7, [sp, #20]
 801bfaa:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bfae:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bfb2:	6803      	ldr	r3, [r0, #0]
 801bfb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bfb6:	4798      	blx	r3
 801bfb8:	b009      	add	sp, #36	; 0x24
 801bfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bfbc:	0802bb5c 	.word	0x0802bb5c
 801bfc0:	0802bb70 	.word	0x0802bb70

0801bfc4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801bfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfc8:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801bfcc:	b0a1      	sub	sp, #132	; 0x84
 801bfce:	4604      	mov	r4, r0
 801bfd0:	460d      	mov	r5, r1
 801bfd2:	790b      	ldrb	r3, [r1, #4]
 801bfd4:	f1b9 0f00 	cmp.w	r9, #0
 801bfd8:	d00f      	beq.n	801bffa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	f040 80a2 	bne.w	801c124 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801bfe0:	b021      	add	sp, #132	; 0x84
 801bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfe6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801bfea:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801bfee:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801bff2:	1d20      	adds	r0, r4, #4
 801bff4:	f7fb fc26 	bl	8017844 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801bff8:	e094      	b.n	801c124 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d1f0      	bne.n	801bfe0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bffe:	4b5f      	ldr	r3, [pc, #380]	; (801c17c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801c006:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801c00a:	f1ba 0f03 	cmp.w	sl, #3
 801c00e:	ddea      	ble.n	801bfe6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801c010:	f1ba 0f0c 	cmp.w	sl, #12
 801c014:	f04f 0303 	mov.w	r3, #3
 801c018:	f04f 0600 	mov.w	r6, #0
 801c01c:	4958      	ldr	r1, [pc, #352]	; (801c180 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801c01e:	bfd8      	it	le
 801c020:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801c024:	960a      	str	r6, [sp, #40]	; 0x28
 801c026:	bfd8      	it	le
 801c028:	fb92 f3f3 	sdivle	r3, r2, r3
 801c02c:	9301      	str	r3, [sp, #4]
 801c02e:	4b55      	ldr	r3, [pc, #340]	; (801c184 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801c030:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c034:	4b54      	ldr	r3, [pc, #336]	; (801c188 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801c036:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801c03a:	2248      	movs	r2, #72	; 0x48
 801c03c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c040:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c044:	ab0e      	add	r3, sp, #56	; 0x38
 801c046:	4618      	mov	r0, r3
 801c048:	f00b fb2e 	bl	80276a8 <memcpy>
 801c04c:	f04f 32ff 	mov.w	r2, #4294967295
 801c050:	f8cd a008 	str.w	sl, [sp, #8]
 801c054:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801c058:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c05c:	46b3      	mov	fp, r6
 801c05e:	fb93 f3f2 	sdiv	r3, r3, r2
 801c062:	b29b      	uxth	r3, r3
 801c064:	9303      	str	r3, [sp, #12]
 801c066:	2300      	movs	r3, #0
 801c068:	9a03      	ldr	r2, [sp, #12]
 801c06a:	88ef      	ldrh	r7, [r5, #6]
 801c06c:	a80a      	add	r0, sp, #40	; 0x28
 801c06e:	9309      	str	r3, [sp, #36]	; 0x24
 801c070:	9b07      	ldr	r3, [sp, #28]
 801c072:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801c076:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801c07a:	fb13 f302 	smulbb	r3, r3, r2
 801c07e:	b29b      	uxth	r3, r3
 801c080:	9304      	str	r3, [sp, #16]
 801c082:	9b07      	ldr	r3, [sp, #28]
 801c084:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c088:	685b      	ldr	r3, [r3, #4]
 801c08a:	fb13 f302 	smulbb	r3, r3, r2
 801c08e:	b29b      	uxth	r3, r3
 801c090:	9305      	str	r3, [sp, #20]
 801c092:	9b04      	ldr	r3, [sp, #16]
 801c094:	441f      	add	r7, r3
 801c096:	9b05      	ldr	r3, [sp, #20]
 801c098:	4498      	add	r8, r3
 801c09a:	b23f      	sxth	r7, r7
 801c09c:	fa0f f888 	sxth.w	r8, r8
 801c0a0:	4639      	mov	r1, r7
 801c0a2:	4642      	mov	r2, r8
 801c0a4:	f7ff ff14 	bl	801bed0 <_ZNK8touchgfx4Rect9intersectEss>
 801c0a8:	b380      	cbz	r0, 801c10c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801c0aa:	4639      	mov	r1, r7
 801c0ac:	ab09      	add	r3, sp, #36	; 0x24
 801c0ae:	4642      	mov	r2, r8
 801c0b0:	1d20      	adds	r0, r4, #4
 801c0b2:	f7fb fbc7 	bl	8017844 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801c0b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c0b8:	b341      	cbz	r1, 801c10c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801c0ba:	4549      	cmp	r1, r9
 801c0bc:	d026      	beq.n	801c10c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801c0be:	a80c      	add	r0, sp, #48	; 0x30
 801c0c0:	f7ff fdbf 	bl	801bc42 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c0c4:	2002      	movs	r0, #2
 801c0c6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801c0ca:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801c0ce:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c0d2:	fb92 f2f0 	sdiv	r2, r2, r0
 801c0d6:	440a      	add	r2, r1
 801c0d8:	1a99      	subs	r1, r3, r2
 801c0da:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801c0de:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801c0e2:	fb93 f3f0 	sdiv	r3, r3, r0
 801c0e6:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801c0ea:	4403      	add	r3, r0
 801c0ec:	1ad3      	subs	r3, r2, r3
 801c0ee:	9a06      	ldr	r2, [sp, #24]
 801c0f0:	435b      	muls	r3, r3
 801c0f2:	fb01 3301 	mla	r3, r1, r1, r3
 801c0f6:	4293      	cmp	r3, r2
 801c0f8:	d208      	bcs.n	801c10c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801c0fa:	9a04      	ldr	r2, [sp, #16]
 801c0fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c100:	86a2      	strh	r2, [r4, #52]	; 0x34
 801c102:	9a05      	ldr	r2, [sp, #20]
 801c104:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801c108:	86e2      	strh	r2, [r4, #54]	; 0x36
 801c10a:	9306      	str	r3, [sp, #24]
 801c10c:	f10b 0b02 	add.w	fp, fp, #2
 801c110:	f1bb 0f08 	cmp.w	fp, #8
 801c114:	dda7      	ble.n	801c066 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801c116:	9b02      	ldr	r3, [sp, #8]
 801c118:	3601      	adds	r6, #1
 801c11a:	4453      	add	r3, sl
 801c11c:	9302      	str	r3, [sp, #8]
 801c11e:	9b01      	ldr	r3, [sp, #4]
 801c120:	42b3      	cmp	r3, r6
 801c122:	d199      	bne.n	801c058 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801c124:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c126:	2900      	cmp	r1, #0
 801c128:	f43f af5a 	beq.w	801bfe0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c12c:	a80c      	add	r0, sp, #48	; 0x30
 801c12e:	2600      	movs	r6, #0
 801c130:	f7ff fd87 	bl	801bc42 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c134:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801c138:	88ea      	ldrh	r2, [r5, #6]
 801c13a:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801c13e:	1ad2      	subs	r2, r2, r3
 801c140:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c142:	7929      	ldrb	r1, [r5, #4]
 801c144:	441a      	add	r2, r3
 801c146:	892b      	ldrh	r3, [r5, #8]
 801c148:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801c14c:	a90e      	add	r1, sp, #56	; 0x38
 801c14e:	1a1b      	subs	r3, r3, r0
 801c150:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801c152:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801c156:	4403      	add	r3, r0
 801c158:	480c      	ldr	r0, [pc, #48]	; (801c18c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801c15a:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801c15e:	900e      	str	r0, [sp, #56]	; 0x38
 801c160:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c162:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801c166:	6803      	ldr	r3, [r0, #0]
 801c168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c16a:	4798      	blx	r3
 801c16c:	792b      	ldrb	r3, [r5, #4]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	f43f af36 	beq.w	801bfe0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c174:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c178:	e732      	b.n	801bfe0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c17a:	bf00      	nop
 801c17c:	2000b314 	.word	0x2000b314
 801c180:	08028e48 	.word	0x08028e48
 801c184:	2000b308 	.word	0x2000b308
 801c188:	2000b30a 	.word	0x2000b30a
 801c18c:	0802bb5c 	.word	0x0802bb5c

0801c190 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c192:	4604      	mov	r4, r0
 801c194:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c198:	3201      	adds	r2, #1
 801c19a:	d112      	bne.n	801c1c2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c19c:	2500      	movs	r5, #0
 801c19e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c1a2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c1a6:	6803      	ldr	r3, [r0, #0]
 801c1a8:	9500      	str	r5, [sp, #0]
 801c1aa:	466d      	mov	r5, sp
 801c1ac:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c1b0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c1b4:	4629      	mov	r1, r5
 801c1b6:	6a1b      	ldr	r3, [r3, #32]
 801c1b8:	4798      	blx	r3
 801c1ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c1be:	e884 0003 	stmia.w	r4, {r0, r1}
 801c1c2:	4620      	mov	r0, r4
 801c1c4:	b003      	add	sp, #12
 801c1c6:	bd30      	pop	{r4, r5, pc}

0801c1c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c1c8:	b513      	push	{r0, r1, r4, lr}
 801c1ca:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c1ce:	4604      	mov	r4, r0
 801c1d0:	3301      	adds	r3, #1
 801c1d2:	d109      	bne.n	801c1e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c1d4:	4601      	mov	r1, r0
 801c1d6:	4668      	mov	r0, sp
 801c1d8:	f7ff fd33 	bl	801bc42 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c1dc:	f8bd 3000 	ldrh.w	r3, [sp]
 801c1e0:	8423      	strh	r3, [r4, #32]
 801c1e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c1e6:	8463      	strh	r3, [r4, #34]	; 0x22
 801c1e8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c1ec:	b002      	add	sp, #8
 801c1ee:	bd10      	pop	{r4, pc}

0801c1f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c1f0:	b513      	push	{r0, r1, r4, lr}
 801c1f2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c1f6:	4604      	mov	r4, r0
 801c1f8:	3301      	adds	r3, #1
 801c1fa:	d109      	bne.n	801c210 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c1fc:	4601      	mov	r1, r0
 801c1fe:	4668      	mov	r0, sp
 801c200:	f7ff fd1f 	bl	801bc42 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c204:	f8bd 3000 	ldrh.w	r3, [sp]
 801c208:	8423      	strh	r3, [r4, #32]
 801c20a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c20e:	8463      	strh	r3, [r4, #34]	; 0x22
 801c210:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c214:	b002      	add	sp, #8
 801c216:	bd10      	pop	{r4, pc}

0801c218 <_ZN8touchgfx6ScreenC1Ev>:
 801c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c21a:	4605      	mov	r5, r0
 801c21c:	4b17      	ldr	r3, [pc, #92]	; (801c27c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c21e:	2200      	movs	r2, #0
 801c220:	4917      	ldr	r1, [pc, #92]	; (801c280 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c222:	f845 3b04 	str.w	r3, [r5], #4
 801c226:	2301      	movs	r3, #1
 801c228:	8102      	strh	r2, [r0, #8]
 801c22a:	4604      	mov	r4, r0
 801c22c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801c230:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801c234:	4b13      	ldr	r3, [pc, #76]	; (801c284 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c236:	8142      	strh	r2, [r0, #10]
 801c238:	f9b3 7000 	ldrsh.w	r7, [r3]
 801c23c:	4b12      	ldr	r3, [pc, #72]	; (801c288 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801c23e:	8182      	strh	r2, [r0, #12]
 801c240:	81c2      	strh	r2, [r0, #14]
 801c242:	8202      	strh	r2, [r0, #16]
 801c244:	8242      	strh	r2, [r0, #18]
 801c246:	8282      	strh	r2, [r0, #20]
 801c248:	82c2      	strh	r2, [r0, #22]
 801c24a:	6202      	str	r2, [r0, #32]
 801c24c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801c250:	6342      	str	r2, [r0, #52]	; 0x34
 801c252:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c256:	6041      	str	r1, [r0, #4]
 801c258:	4611      	mov	r1, r2
 801c25a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801c25e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801c262:	4628      	mov	r0, r5
 801c264:	f7f3 fbef 	bl	800fa46 <_ZN8touchgfx8Drawable5setXYEss>
 801c268:	4639      	mov	r1, r7
 801c26a:	4628      	mov	r0, r5
 801c26c:	f7f3 fc09 	bl	800fa82 <_ZN8touchgfx8Drawable8setWidthEs>
 801c270:	4628      	mov	r0, r5
 801c272:	4631      	mov	r1, r6
 801c274:	f7f3 fc14 	bl	800faa0 <_ZN8touchgfx8Drawable9setHeightEs>
 801c278:	4620      	mov	r0, r4
 801c27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c27c:	0802bb98 	.word	0x0802bb98
 801c280:	0802a74c 	.word	0x0802a74c
 801c284:	2000b308 	.word	0x2000b308
 801c288:	2000b30a 	.word	0x2000b30a

0801c28c <_ZN8touchgfx6Screen4drawEv>:
 801c28c:	4b09      	ldr	r3, [pc, #36]	; (801c2b4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c28e:	b507      	push	{r0, r1, r2, lr}
 801c290:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c294:	2100      	movs	r1, #0
 801c296:	4b08      	ldr	r3, [pc, #32]	; (801c2b8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c298:	9100      	str	r1, [sp, #0]
 801c29a:	4669      	mov	r1, sp
 801c29c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c2a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c2a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c2a8:	6803      	ldr	r3, [r0, #0]
 801c2aa:	689b      	ldr	r3, [r3, #8]
 801c2ac:	4798      	blx	r3
 801c2ae:	b003      	add	sp, #12
 801c2b0:	f85d fb04 	ldr.w	pc, [sp], #4
 801c2b4:	2000b308 	.word	0x2000b308
 801c2b8:	2000b30a 	.word	0x2000b30a

0801c2bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2c0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c2c4:	b089      	sub	sp, #36	; 0x24
 801c2c6:	4680      	mov	r8, r0
 801c2c8:	460c      	mov	r4, r1
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	4615      	mov	r5, r2
 801c2ce:	dd0e      	ble.n	801c2ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c2d0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	dd0a      	ble.n	801c2ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c2d8:	4628      	mov	r0, r5
 801c2da:	f7ff ff59 	bl	801c190 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c2de:	4621      	mov	r1, r4
 801c2e0:	f7fe ff5a 	bl	801b198 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c2e4:	69eb      	ldr	r3, [r5, #28]
 801c2e6:	b928      	cbnz	r0, 801c2f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c2e8:	461d      	mov	r5, r3
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d1f4      	bne.n	801c2d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c2ee:	b009      	add	sp, #36	; 0x24
 801c2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2f4:	ae04      	add	r6, sp, #16
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d051      	beq.n	801c39e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801c2fa:	682b      	ldr	r3, [r5, #0]
 801c2fc:	4629      	mov	r1, r5
 801c2fe:	a802      	add	r0, sp, #8
 801c300:	68db      	ldr	r3, [r3, #12]
 801c302:	4798      	blx	r3
 801c304:	4628      	mov	r0, r5
 801c306:	f7ff ff5f 	bl	801c1c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c30a:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c30e:	4407      	add	r7, r0
 801c310:	4628      	mov	r0, r5
 801c312:	f7ff ff6d 	bl	801c1f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c316:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c31a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c31e:	b23f      	sxth	r7, r7
 801c320:	4418      	add	r0, r3
 801c322:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c326:	4621      	mov	r1, r4
 801c328:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c32c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c330:	4630      	mov	r0, r6
 801c332:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c336:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c33a:	f7fb fb35 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 801c33e:	4628      	mov	r0, r5
 801c340:	f7ff ff26 	bl	801c190 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c344:	ab06      	add	r3, sp, #24
 801c346:	4602      	mov	r2, r0
 801c348:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c34c:	e883 0003 	stmia.w	r3, {r0, r1}
 801c350:	4611      	mov	r1, r2
 801c352:	4618      	mov	r0, r3
 801c354:	f7fb fb28 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 801c358:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c35c:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c360:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c364:	4299      	cmp	r1, r3
 801c366:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c36a:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c36e:	d10b      	bne.n	801c388 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801c370:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c374:	4552      	cmp	r2, sl
 801c376:	d107      	bne.n	801c388 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801c378:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c37c:	455a      	cmp	r2, fp
 801c37e:	d103      	bne.n	801c388 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801c380:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c384:	454a      	cmp	r2, r9
 801c386:	d00a      	beq.n	801c39e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801c388:	f1bb 0f00 	cmp.w	fp, #0
 801c38c:	d002      	beq.n	801c394 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 801c38e:	f1b9 0f00 	cmp.w	r9, #0
 801c392:	d12e      	bne.n	801c3f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 801c394:	69ea      	ldr	r2, [r5, #28]
 801c396:	4621      	mov	r1, r4
 801c398:	4640      	mov	r0, r8
 801c39a:	f7ff ff8f 	bl	801c2bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c39e:	4628      	mov	r0, r5
 801c3a0:	f7ff fef6 	bl	801c190 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c3a4:	6861      	ldr	r1, [r4, #4]
 801c3a6:	4602      	mov	r2, r0
 801c3a8:	4633      	mov	r3, r6
 801c3aa:	6820      	ldr	r0, [r4, #0]
 801c3ac:	c303      	stmia	r3!, {r0, r1}
 801c3ae:	4611      	mov	r1, r2
 801c3b0:	4630      	mov	r0, r6
 801c3b2:	f7fb faf9 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 801c3b6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	dd97      	ble.n	801c2ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c3be:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	dd93      	ble.n	801c2ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c3c6:	4628      	mov	r0, r5
 801c3c8:	f7ff fefe 	bl	801c1c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c3cc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c3d0:	1a18      	subs	r0, r3, r0
 801c3d2:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c3d6:	4628      	mov	r0, r5
 801c3d8:	f7ff ff0a 	bl	801c1f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c3dc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c3e0:	4631      	mov	r1, r6
 801c3e2:	1a18      	subs	r0, r3, r0
 801c3e4:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c3e8:	4628      	mov	r0, r5
 801c3ea:	682b      	ldr	r3, [r5, #0]
 801c3ec:	689b      	ldr	r3, [r3, #8]
 801c3ee:	4798      	blx	r3
 801c3f0:	e77d      	b.n	801c2ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c3f2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c3f6:	fa1f f08a 	uxth.w	r0, sl
 801c3fa:	4552      	cmp	r2, sl
 801c3fc:	9000      	str	r0, [sp, #0]
 801c3fe:	da12      	bge.n	801c426 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 801c400:	9301      	str	r3, [sp, #4]
 801c402:	9b00      	ldr	r3, [sp, #0]
 801c404:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c408:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c40c:	1a9a      	subs	r2, r3, r2
 801c40e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c412:	4631      	mov	r1, r6
 801c414:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c418:	4640      	mov	r0, r8
 801c41a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c41e:	69ea      	ldr	r2, [r5, #28]
 801c420:	f7ff ff4c 	bl	801c2bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c424:	9b01      	ldr	r3, [sp, #4]
 801c426:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c42a:	b29f      	uxth	r7, r3
 801c42c:	429a      	cmp	r2, r3
 801c42e:	da0d      	bge.n	801c44c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 801c430:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c434:	1aba      	subs	r2, r7, r2
 801c436:	f8ad a012 	strh.w	sl, [sp, #18]
 801c43a:	4631      	mov	r1, r6
 801c43c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c440:	4640      	mov	r0, r8
 801c442:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c446:	69ea      	ldr	r2, [r5, #28]
 801c448:	f7ff ff38 	bl	801c2bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c44c:	8822      	ldrh	r2, [r4, #0]
 801c44e:	445f      	add	r7, fp
 801c450:	88a3      	ldrh	r3, [r4, #4]
 801c452:	b2bf      	uxth	r7, r7
 801c454:	4413      	add	r3, r2
 801c456:	b23a      	sxth	r2, r7
 801c458:	b29b      	uxth	r3, r3
 801c45a:	b219      	sxth	r1, r3
 801c45c:	4291      	cmp	r1, r2
 801c45e:	dd0d      	ble.n	801c47c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 801c460:	1bdb      	subs	r3, r3, r7
 801c462:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c466:	f8ad a012 	strh.w	sl, [sp, #18]
 801c46a:	4631      	mov	r1, r6
 801c46c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c470:	4640      	mov	r0, r8
 801c472:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c476:	69ea      	ldr	r2, [r5, #28]
 801c478:	f7ff ff20 	bl	801c2bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c47c:	88e2      	ldrh	r2, [r4, #6]
 801c47e:	8863      	ldrh	r3, [r4, #2]
 801c480:	4413      	add	r3, r2
 801c482:	9a00      	ldr	r2, [sp, #0]
 801c484:	444a      	add	r2, r9
 801c486:	b29b      	uxth	r3, r3
 801c488:	fa1f f982 	uxth.w	r9, r2
 801c48c:	b219      	sxth	r1, r3
 801c48e:	fa0f f289 	sxth.w	r2, r9
 801c492:	428a      	cmp	r2, r1
 801c494:	da83      	bge.n	801c39e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801c496:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c49a:	eba3 0309 	sub.w	r3, r3, r9
 801c49e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c4a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c4a6:	4631      	mov	r1, r6
 801c4a8:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c4ac:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c4b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c4b4:	69ea      	ldr	r2, [r5, #28]
 801c4b6:	e76f      	b.n	801c398 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

0801c4b8 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c4b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c4ba:	2300      	movs	r3, #0
 801c4bc:	aa02      	add	r2, sp, #8
 801c4be:	4604      	mov	r4, r0
 801c4c0:	3004      	adds	r0, #4
 801c4c2:	f842 3d04 	str.w	r3, [r2, #-4]!
 801c4c6:	460d      	mov	r5, r1
 801c4c8:	f7fb fb46 	bl	8017b58 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c4cc:	9a01      	ldr	r2, [sp, #4]
 801c4ce:	b11a      	cbz	r2, 801c4d8 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801c4d0:	4629      	mov	r1, r5
 801c4d2:	4620      	mov	r0, r4
 801c4d4:	f7ff fef2 	bl	801c2bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c4d8:	b003      	add	sp, #12
 801c4da:	bd30      	pop	{r4, r5, pc}

0801c4dc <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c4dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c4de:	4602      	mov	r2, r0
 801c4e0:	4604      	mov	r4, r0
 801c4e2:	460d      	mov	r5, r1
 801c4e4:	466b      	mov	r3, sp
 801c4e6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c4ea:	6851      	ldr	r1, [r2, #4]
 801c4ec:	c303      	stmia	r3!, {r0, r1}
 801c4ee:	4629      	mov	r1, r5
 801c4f0:	4668      	mov	r0, sp
 801c4f2:	f7fb fa59 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 801c4f6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c4fa:	4669      	mov	r1, sp
 801c4fc:	b123      	cbz	r3, 801c508 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801c4fe:	4620      	mov	r0, r4
 801c500:	f7ff ffda 	bl	801c4b8 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c504:	b003      	add	sp, #12
 801c506:	bd30      	pop	{r4, r5, pc}
 801c508:	1d20      	adds	r0, r4, #4
 801c50a:	f7fb faec 	bl	8017ae6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c50e:	e7f9      	b.n	801c504 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801c510 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c510:	460b      	mov	r3, r1
 801c512:	680a      	ldr	r2, [r1, #0]
 801c514:	1d01      	adds	r1, r0, #4
 801c516:	6952      	ldr	r2, [r2, #20]
 801c518:	4618      	mov	r0, r3
 801c51a:	4710      	bx	r2

0801c51c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801c51c:	b510      	push	{r4, lr}
 801c51e:	4298      	cmp	r0, r3
 801c520:	eb01 0402 	add.w	r4, r1, r2
 801c524:	b224      	sxth	r4, r4
 801c526:	d22c      	bcs.n	801c582 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801c528:	b35b      	cbz	r3, 801c582 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801c52a:	ee07 0a90 	vmov	s15, r0
 801c52e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801c532:	ee07 3a90 	vmov	s15, r3
 801c536:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801c53a:	ee07 2a90 	vmov	s15, r2
 801c53e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801c542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c546:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801c54a:	ee07 1a90 	vmov	s15, r1
 801c54e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c552:	ee37 7a66 	vsub.f32	s14, s14, s13
 801c556:	ee67 5a07 	vmul.f32	s11, s14, s14
 801c55a:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c55e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c562:	eee6 7a26 	vfma.f32	s15, s12, s13
 801c566:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c56e:	bfcc      	ite	gt
 801c570:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801c574:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801c578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c57c:	ee17 3a90 	vmov	r3, s15
 801c580:	b21c      	sxth	r4, r3
 801c582:	4620      	mov	r0, r4
 801c584:	bd10      	pop	{r4, pc}

0801c586 <_ZN8touchgfx12TextProviderC1Ev>:
 801c586:	2300      	movs	r3, #0
 801c588:	2201      	movs	r2, #1
 801c58a:	b510      	push	{r4, lr}
 801c58c:	4604      	mov	r4, r0
 801c58e:	60c3      	str	r3, [r0, #12]
 801c590:	7403      	strb	r3, [r0, #16]
 801c592:	82c3      	strh	r3, [r0, #22]
 801c594:	8303      	strh	r3, [r0, #24]
 801c596:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801c598:	8603      	strh	r3, [r0, #48]	; 0x30
 801c59a:	86c3      	strh	r3, [r0, #54]	; 0x36
 801c59c:	8703      	strh	r3, [r0, #56]	; 0x38
 801c59e:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c5a0:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801c5a4:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801c5a8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801c5ac:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801c5b0:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801c5b4:	e9c0 3300 	strd	r3, r3, [r0]
 801c5b8:	f7f8 fac4 	bl	8014b44 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c5bc:	4620      	mov	r0, r4
 801c5be:	bd10      	pop	{r4, pc}

0801c5c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c5c0:	b530      	push	{r4, r5, lr}
 801c5c2:	2500      	movs	r5, #0
 801c5c4:	2401      	movs	r4, #1
 801c5c6:	6843      	ldr	r3, [r0, #4]
 801c5c8:	b913      	cbnz	r3, 801c5d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c5ca:	6803      	ldr	r3, [r0, #0]
 801c5cc:	b1f3      	cbz	r3, 801c60c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c5ce:	6043      	str	r3, [r0, #4]
 801c5d0:	7c03      	ldrb	r3, [r0, #16]
 801c5d2:	b143      	cbz	r3, 801c5e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c5d4:	68c3      	ldr	r3, [r0, #12]
 801c5d6:	b12b      	cbz	r3, 801c5e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c5d8:	881a      	ldrh	r2, [r3, #0]
 801c5da:	b11a      	cbz	r2, 801c5e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c5dc:	1c9a      	adds	r2, r3, #2
 801c5de:	60c2      	str	r2, [r0, #12]
 801c5e0:	8818      	ldrh	r0, [r3, #0]
 801c5e2:	bd30      	pop	{r4, r5, pc}
 801c5e4:	7405      	strb	r5, [r0, #16]
 801c5e6:	6843      	ldr	r3, [r0, #4]
 801c5e8:	8819      	ldrh	r1, [r3, #0]
 801c5ea:	b179      	cbz	r1, 801c60c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c5ec:	1c9a      	adds	r2, r3, #2
 801c5ee:	2902      	cmp	r1, #2
 801c5f0:	6042      	str	r2, [r0, #4]
 801c5f2:	d1f5      	bne.n	801c5e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c5f4:	6883      	ldr	r3, [r0, #8]
 801c5f6:	1d1a      	adds	r2, r3, #4
 801c5f8:	6082      	str	r2, [r0, #8]
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	60c3      	str	r3, [r0, #12]
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d0e1      	beq.n	801c5c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c602:	881b      	ldrh	r3, [r3, #0]
 801c604:	2b00      	cmp	r3, #0
 801c606:	d0de      	beq.n	801c5c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c608:	7404      	strb	r4, [r0, #16]
 801c60a:	e7dc      	b.n	801c5c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c60c:	2000      	movs	r0, #0
 801c60e:	e7e8      	b.n	801c5e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c610 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801c610:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c612:	2300      	movs	r3, #0
 801c614:	6082      	str	r2, [r0, #8]
 801c616:	6001      	str	r1, [r0, #0]
 801c618:	6043      	str	r3, [r0, #4]
 801c61a:	60c3      	str	r3, [r0, #12]
 801c61c:	7403      	strb	r3, [r0, #16]
 801c61e:	8603      	strh	r3, [r0, #48]	; 0x30
 801c620:	8303      	strh	r3, [r0, #24]
 801c622:	8703      	strh	r3, [r0, #56]	; 0x38
 801c624:	b410      	push	{r4}
 801c626:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c62a:	f7f8 ba8b 	b.w	8014b44 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c62e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c62e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c630:	4605      	mov	r5, r0
 801c632:	4608      	mov	r0, r1
 801c634:	b1f1      	cbz	r1, 801c674 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801c636:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801c63a:	460b      	mov	r3, r1
 801c63c:	f101 0708 	add.w	r7, r1, #8
 801c640:	4622      	mov	r2, r4
 801c642:	6818      	ldr	r0, [r3, #0]
 801c644:	3308      	adds	r3, #8
 801c646:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c64a:	4626      	mov	r6, r4
 801c64c:	42bb      	cmp	r3, r7
 801c64e:	c603      	stmia	r6!, {r0, r1}
 801c650:	4634      	mov	r4, r6
 801c652:	d1f6      	bne.n	801c642 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c654:	6818      	ldr	r0, [r3, #0]
 801c656:	6030      	str	r0, [r6, #0]
 801c658:	4610      	mov	r0, r2
 801c65a:	889b      	ldrh	r3, [r3, #4]
 801c65c:	80b3      	strh	r3, [r6, #4]
 801c65e:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801c662:	015b      	lsls	r3, r3, #5
 801c664:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c668:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801c66c:	430b      	orrs	r3, r1
 801c66e:	425b      	negs	r3, r3
 801c670:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801c674:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c676 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c676:	b538      	push	{r3, r4, r5, lr}
 801c678:	460c      	mov	r4, r1
 801c67a:	6811      	ldr	r1, [r2, #0]
 801c67c:	4610      	mov	r0, r2
 801c67e:	68cd      	ldr	r5, [r1, #12]
 801c680:	4619      	mov	r1, r3
 801c682:	47a8      	blx	r5
 801c684:	2800      	cmp	r0, #0
 801c686:	bf08      	it	eq
 801c688:	4620      	moveq	r0, r4
 801c68a:	bd38      	pop	{r3, r4, r5, pc}

0801c68c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c68e:	4604      	mov	r4, r0
 801c690:	4615      	mov	r5, r2
 801c692:	4608      	mov	r0, r1
 801c694:	b93a      	cbnz	r2, 801c6a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c696:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801c69a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801c69e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801c6a2:	4628      	mov	r0, r5
 801c6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6a6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801c6aa:	8893      	ldrh	r3, [r2, #4]
 801c6ac:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801c6b0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c6b4:	79ee      	ldrb	r6, [r5, #7]
 801c6b6:	4316      	orrs	r6, r2
 801c6b8:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801c6bc:	189a      	adds	r2, r3, r2
 801c6be:	b2b7      	uxth	r7, r6
 801c6c0:	b291      	uxth	r1, r2
 801c6c2:	291d      	cmp	r1, #29
 801c6c4:	f200 8084 	bhi.w	801c7d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c6c8:	2201      	movs	r2, #1
 801c6ca:	10f6      	asrs	r6, r6, #3
 801c6cc:	408a      	lsls	r2, r1
 801c6ce:	4978      	ldr	r1, [pc, #480]	; (801c8b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801c6d0:	420a      	tst	r2, r1
 801c6d2:	d12e      	bne.n	801c732 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801c6d4:	f412 7f60 	tst.w	r2, #896	; 0x380
 801c6d8:	d07a      	beq.n	801c7d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c6da:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801c6de:	462b      	mov	r3, r5
 801c6e0:	f105 0e08 	add.w	lr, r5, #8
 801c6e4:	4615      	mov	r5, r2
 801c6e6:	6818      	ldr	r0, [r3, #0]
 801c6e8:	3308      	adds	r3, #8
 801c6ea:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c6ee:	4694      	mov	ip, r2
 801c6f0:	4573      	cmp	r3, lr
 801c6f2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c6f6:	4662      	mov	r2, ip
 801c6f8:	d1f5      	bne.n	801c6e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801c6fa:	6818      	ldr	r0, [r3, #0]
 801c6fc:	f8cc 0000 	str.w	r0, [ip]
 801c700:	889b      	ldrh	r3, [r3, #4]
 801c702:	f8ac 3004 	strh.w	r3, [ip, #4]
 801c706:	b2b3      	uxth	r3, r6
 801c708:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801c70c:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801c710:	1aca      	subs	r2, r1, r3
 801c712:	1bcf      	subs	r7, r1, r7
 801c714:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801c718:	b292      	uxth	r2, r2
 801c71a:	1afb      	subs	r3, r7, r3
 801c71c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801c720:	10d2      	asrs	r2, r2, #3
 801c722:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801c726:	4302      	orrs	r2, r0
 801c728:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801c72c:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801c730:	e7b7      	b.n	801c6a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c732:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c734:	b92b      	cbnz	r3, 801c742 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801c736:	4b5f      	ldr	r3, [pc, #380]	; (801c8b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801c738:	21c0      	movs	r1, #192	; 0xc0
 801c73a:	4a5f      	ldr	r2, [pc, #380]	; (801c8b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801c73c:	485f      	ldr	r0, [pc, #380]	; (801c8bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801c73e:	f00a ff35 	bl	80275ac <__assert_func>
 801c742:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801c744:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c748:	8b59      	ldrh	r1, [r3, #26]
 801c74a:	f640 6333 	movw	r3, #3635	; 0xe33
 801c74e:	4299      	cmp	r1, r3
 801c750:	d110      	bne.n	801c774 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801c752:	6803      	ldr	r3, [r0, #0]
 801c754:	68db      	ldr	r3, [r3, #12]
 801c756:	4798      	blx	r3
 801c758:	7b41      	ldrb	r1, [r0, #13]
 801c75a:	00cb      	lsls	r3, r1, #3
 801c75c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c760:	7a03      	ldrb	r3, [r0, #8]
 801c762:	0648      	lsls	r0, r1, #25
 801c764:	ea43 0302 	orr.w	r3, r3, r2
 801c768:	bf44      	itt	mi
 801c76a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c76e:	b21b      	sxthmi	r3, r3
 801c770:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c774:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801c778:	462a      	mov	r2, r5
 801c77a:	f105 0c08 	add.w	ip, r5, #8
 801c77e:	443b      	add	r3, r7
 801c780:	4433      	add	r3, r6
 801c782:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801c786:	b29b      	uxth	r3, r3
 801c788:	4635      	mov	r5, r6
 801c78a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c78e:	6810      	ldr	r0, [r2, #0]
 801c790:	3208      	adds	r2, #8
 801c792:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801c796:	4637      	mov	r7, r6
 801c798:	4562      	cmp	r2, ip
 801c79a:	c703      	stmia	r7!, {r0, r1}
 801c79c:	463e      	mov	r6, r7
 801c79e:	d1f6      	bne.n	801c78e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801c7a0:	6810      	ldr	r0, [r2, #0]
 801c7a2:	6038      	str	r0, [r7, #0]
 801c7a4:	8892      	ldrh	r2, [r2, #4]
 801c7a6:	80ba      	strh	r2, [r7, #4]
 801c7a8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c7ac:	10db      	asrs	r3, r3, #3
 801c7ae:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c7b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c7b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c7ba:	4313      	orrs	r3, r2
 801c7bc:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801c7c0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c7c4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801c7c8:	1a9b      	subs	r3, r3, r2
 801c7ca:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801c7ce:	e768      	b.n	801c6a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c7d0:	f023 0204 	bic.w	r2, r3, #4
 801c7d4:	f640 611b 	movw	r1, #3611	; 0xe1b
 801c7d8:	428a      	cmp	r2, r1
 801c7da:	d003      	beq.n	801c7e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801c7dc:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c7e0:	4293      	cmp	r3, r2
 801c7e2:	d120      	bne.n	801c826 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801c7e4:	3b01      	subs	r3, #1
 801c7e6:	4602      	mov	r2, r0
 801c7e8:	4629      	mov	r1, r5
 801c7ea:	4620      	mov	r0, r4
 801c7ec:	b29b      	uxth	r3, r3
 801c7ee:	f7ff ff42 	bl	801c676 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c7f2:	7b41      	ldrb	r1, [r0, #13]
 801c7f4:	00cb      	lsls	r3, r1, #3
 801c7f6:	0649      	lsls	r1, r1, #25
 801c7f8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c7fc:	7a03      	ldrb	r3, [r0, #8]
 801c7fe:	ea43 0302 	orr.w	r3, r3, r2
 801c802:	bf44      	itt	mi
 801c804:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c808:	b21b      	sxthmi	r3, r3
 801c80a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c80e:	7b6b      	ldrb	r3, [r5, #13]
 801c810:	7aaa      	ldrb	r2, [r5, #10]
 801c812:	005b      	lsls	r3, r3, #1
 801c814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c818:	4313      	orrs	r3, r2
 801c81a:	115a      	asrs	r2, r3, #5
 801c81c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c820:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c824:	e035      	b.n	801c892 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801c826:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801c82a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801c82e:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801c832:	7a2a      	ldrb	r2, [r5, #8]
 801c834:	ea42 0201 	orr.w	r2, r2, r1
 801c838:	f640 6109 	movw	r1, #3593	; 0xe09
 801c83c:	bf1c      	itt	ne
 801c83e:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801c842:	b212      	sxthne	r2, r2
 801c844:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801c848:	f023 0210 	bic.w	r2, r3, #16
 801c84c:	428a      	cmp	r2, r1
 801c84e:	d003      	beq.n	801c858 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801c850:	f640 6213 	movw	r2, #3603	; 0xe13
 801c854:	4293      	cmp	r3, r2
 801c856:	d129      	bne.n	801c8ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801c858:	7b6e      	ldrb	r6, [r5, #13]
 801c85a:	4629      	mov	r1, r5
 801c85c:	0076      	lsls	r6, r6, #1
 801c85e:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c862:	7aae      	ldrb	r6, [r5, #10]
 801c864:	4316      	orrs	r6, r2
 801c866:	f640 6213 	movw	r2, #3603	; 0xe13
 801c86a:	4293      	cmp	r3, r2
 801c86c:	4602      	mov	r2, r0
 801c86e:	4620      	mov	r0, r4
 801c870:	bf16      	itet	ne
 801c872:	f103 33ff 	addne.w	r3, r3, #4294967295
 801c876:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c87a:	b29b      	uxthne	r3, r3
 801c87c:	f7ff fefb 	bl	801c676 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c880:	7b43      	ldrb	r3, [r0, #13]
 801c882:	7a82      	ldrb	r2, [r0, #10]
 801c884:	005b      	lsls	r3, r3, #1
 801c886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c88a:	4313      	orrs	r3, r2
 801c88c:	1af6      	subs	r6, r6, r3
 801c88e:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801c892:	7b69      	ldrb	r1, [r5, #13]
 801c894:	00cb      	lsls	r3, r1, #3
 801c896:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c89a:	7a2b      	ldrb	r3, [r5, #8]
 801c89c:	4313      	orrs	r3, r2
 801c89e:	064a      	lsls	r2, r1, #25
 801c8a0:	bf44      	itt	mi
 801c8a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c8a6:	b21b      	sxthmi	r3, r3
 801c8a8:	1bdb      	subs	r3, r3, r7
 801c8aa:	e73f      	b.n	801c72c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801c8ac:	2300      	movs	r3, #0
 801c8ae:	e7b7      	b.n	801c820 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801c8b0:	3fc00079 	.word	0x3fc00079
 801c8b4:	0802bbc4 	.word	0x0802bbc4
 801c8b8:	0802be36 	.word	0x0802be36
 801c8bc:	0802bbcd 	.word	0x0802bbcd

0801c8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c8c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c8c4:	4604      	mov	r4, r0
 801c8c6:	b942      	cbnz	r2, 801c8da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c8c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c8cc:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801c8d0:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801c8d4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c8d8:	e046      	b.n	801c968 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c8da:	7b51      	ldrb	r1, [r2, #13]
 801c8dc:	8893      	ldrh	r3, [r2, #4]
 801c8de:	010f      	lsls	r7, r1, #4
 801c8e0:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c8e4:	79d7      	ldrb	r7, [r2, #7]
 801c8e6:	4307      	orrs	r7, r0
 801c8e8:	2f04      	cmp	r7, #4
 801c8ea:	b2bd      	uxth	r5, r7
 801c8ec:	bfcc      	ite	gt
 801c8ee:	08bf      	lsrgt	r7, r7, #2
 801c8f0:	2701      	movle	r7, #1
 801c8f2:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801c8f6:	f200 80ab 	bhi.w	801ca50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801c8fa:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801c8fe:	4283      	cmp	r3, r0
 801c900:	d216      	bcs.n	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c902:	f240 605b 	movw	r0, #1627	; 0x65b
 801c906:	4283      	cmp	r3, r0
 801c908:	d859      	bhi.n	801c9be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801c90a:	f240 6057 	movw	r0, #1623	; 0x657
 801c90e:	4283      	cmp	r3, r0
 801c910:	d20e      	bcs.n	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c912:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c916:	d24a      	bcs.n	801c9ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801c918:	f240 604e 	movw	r0, #1614	; 0x64e
 801c91c:	4283      	cmp	r3, r0
 801c91e:	d207      	bcs.n	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c920:	f240 601a 	movw	r0, #1562	; 0x61a
 801c924:	4283      	cmp	r3, r0
 801c926:	d02a      	beq.n	801c97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c928:	d821      	bhi.n	801c96e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801c92a:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801c92e:	d35b      	bcc.n	801c9e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c930:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801c934:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c938:	f040 80d0 	bne.w	801cadc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c93c:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801c940:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c944:	f040 80ca 	bne.w	801cadc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c948:	00cb      	lsls	r3, r1, #3
 801c94a:	0649      	lsls	r1, r1, #25
 801c94c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c950:	7a13      	ldrb	r3, [r2, #8]
 801c952:	ea43 0300 	orr.w	r3, r3, r0
 801c956:	bf44      	itt	mi
 801c958:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c95c:	b21b      	sxthmi	r3, r3
 801c95e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c962:	1b5d      	subs	r5, r3, r5
 801c964:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c968:	4610      	mov	r0, r2
 801c96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c96e:	f240 604b 	movw	r0, #1611	; 0x64b
 801c972:	4283      	cmp	r3, r0
 801c974:	d338      	bcc.n	801c9e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c976:	f240 604c 	movw	r0, #1612	; 0x64c
 801c97a:	4283      	cmp	r3, r0
 801c97c:	d9d8      	bls.n	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c97e:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801c982:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801c986:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c98a:	f040 80f2 	bne.w	801cb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801c98e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c992:	f040 80ee 	bne.w	801cb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801c996:	00cb      	lsls	r3, r1, #3
 801c998:	064e      	lsls	r6, r1, #25
 801c99a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c99e:	7a13      	ldrb	r3, [r2, #8]
 801c9a0:	ea43 0300 	orr.w	r3, r3, r0
 801c9a4:	bf44      	itt	mi
 801c9a6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c9aa:	b21b      	sxthmi	r3, r3
 801c9ac:	e7d9      	b.n	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801c9ae:	f240 6054 	movw	r0, #1620	; 0x654
 801c9b2:	4283      	cmp	r3, r0
 801c9b4:	d8e3      	bhi.n	801c97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c9b6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c9ba:	d9e0      	bls.n	801c97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c9bc:	e7b8      	b.n	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c9be:	f240 6074 	movw	r0, #1652	; 0x674
 801c9c2:	4283      	cmp	r3, r0
 801c9c4:	d0b4      	beq.n	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c9c6:	d82d      	bhi.n	801ca24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801c9c8:	f240 605e 	movw	r0, #1630	; 0x65e
 801c9cc:	4283      	cmp	r3, r0
 801c9ce:	d804      	bhi.n	801c9da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801c9d0:	f240 605d 	movw	r0, #1629	; 0x65d
 801c9d4:	4283      	cmp	r3, r0
 801c9d6:	d3d2      	bcc.n	801c97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c9d8:	e7aa      	b.n	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c9da:	f240 605f 	movw	r0, #1631	; 0x65f
 801c9de:	4283      	cmp	r3, r0
 801c9e0:	d0cd      	beq.n	801c97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c9e2:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801c9e6:	d0a3      	beq.n	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c9e8:	00cb      	lsls	r3, r1, #3
 801c9ea:	0649      	lsls	r1, r1, #25
 801c9ec:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c9f0:	7a13      	ldrb	r3, [r2, #8]
 801c9f2:	ea43 0300 	orr.w	r3, r3, r0
 801c9f6:	bf44      	itt	mi
 801c9f8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c9fc:	b21b      	sxthmi	r3, r3
 801c9fe:	1b5d      	subs	r5, r3, r5
 801ca00:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801ca04:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801ca08:	7b53      	ldrb	r3, [r2, #13]
 801ca0a:	015b      	lsls	r3, r3, #5
 801ca0c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ca10:	7993      	ldrb	r3, [r2, #6]
 801ca12:	430b      	orrs	r3, r1
 801ca14:	2105      	movs	r1, #5
 801ca16:	005b      	lsls	r3, r3, #1
 801ca18:	fb93 f3f1 	sdiv	r3, r3, r1
 801ca1c:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801ca20:	440b      	add	r3, r1
 801ca22:	e757      	b.n	801c8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801ca24:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801ca28:	4283      	cmp	r3, r0
 801ca2a:	d809      	bhi.n	801ca40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801ca2c:	f240 60df 	movw	r0, #1759	; 0x6df
 801ca30:	4283      	cmp	r3, r0
 801ca32:	f4bf af7d 	bcs.w	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca36:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ca3a:	2b05      	cmp	r3, #5
 801ca3c:	d8d4      	bhi.n	801c9e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ca3e:	e777      	b.n	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca40:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ca44:	4283      	cmp	r3, r0
 801ca46:	d09a      	beq.n	801c97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca48:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ca4c:	4283      	cmp	r3, r0
 801ca4e:	e7ca      	b.n	801c9e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801ca50:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801ca54:	d22b      	bcs.n	801caae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801ca56:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ca5a:	4283      	cmp	r3, r0
 801ca5c:	d28f      	bcs.n	801c97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca5e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ca62:	4283      	cmp	r3, r0
 801ca64:	d816      	bhi.n	801ca94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801ca66:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ca6a:	4283      	cmp	r3, r0
 801ca6c:	f4bf af60 	bcs.w	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca70:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ca74:	4283      	cmp	r3, r0
 801ca76:	d80a      	bhi.n	801ca8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801ca78:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ca7c:	4283      	cmp	r3, r0
 801ca7e:	f4bf af57 	bcs.w	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca82:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ca86:	4283      	cmp	r3, r0
 801ca88:	f43f af79 	beq.w	801c97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca8c:	e7ac      	b.n	801c9e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ca8e:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ca92:	e7f8      	b.n	801ca86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801ca94:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801ca98:	4283      	cmp	r3, r0
 801ca9a:	d802      	bhi.n	801caa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801ca9c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801caa0:	e798      	b.n	801c9d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801caa2:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801caa6:	4283      	cmp	r3, r0
 801caa8:	f47f af42 	bne.w	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801caac:	e767      	b.n	801c97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801caae:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801cab2:	4283      	cmp	r3, r0
 801cab4:	f43f af63 	beq.w	801c97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cab8:	d802      	bhi.n	801cac0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801caba:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801cabe:	e7f2      	b.n	801caa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801cac0:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801cac4:	4283      	cmp	r3, r0
 801cac6:	d805      	bhi.n	801cad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801cac8:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801cacc:	4283      	cmp	r3, r0
 801cace:	f4ff af2f 	bcc.w	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cad2:	e754      	b.n	801c97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cad4:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801cad8:	4283      	cmp	r3, r0
 801cada:	e7af      	b.n	801ca3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801cadc:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801cae0:	4617      	mov	r7, r2
 801cae2:	f102 0808 	add.w	r8, r2, #8
 801cae6:	4666      	mov	r6, ip
 801cae8:	6838      	ldr	r0, [r7, #0]
 801caea:	3708      	adds	r7, #8
 801caec:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801caf0:	46e6      	mov	lr, ip
 801caf2:	4547      	cmp	r7, r8
 801caf4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801caf8:	46f4      	mov	ip, lr
 801cafa:	d1f5      	bne.n	801cae8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801cafc:	6838      	ldr	r0, [r7, #0]
 801cafe:	f8ce 0000 	str.w	r0, [lr]
 801cb02:	88b9      	ldrh	r1, [r7, #4]
 801cb04:	f8ae 1004 	strh.w	r1, [lr, #4]
 801cb08:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801cb0c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cb10:	d009      	beq.n	801cb26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801cb12:	7b51      	ldrb	r1, [r2, #13]
 801cb14:	7992      	ldrb	r2, [r2, #6]
 801cb16:	0149      	lsls	r1, r1, #5
 801cb18:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cb1c:	4311      	orrs	r1, r2
 801cb1e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cb22:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801cb26:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cb2a:	d00d      	beq.n	801cb48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801cb2c:	442b      	add	r3, r5
 801cb2e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801cb32:	b29b      	uxth	r3, r3
 801cb34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cb38:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801cb3c:	10db      	asrs	r3, r3, #3
 801cb3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cb42:	4313      	orrs	r3, r2
 801cb44:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801cb48:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801cb4c:	00cb      	lsls	r3, r1, #3
 801cb4e:	064f      	lsls	r7, r1, #25
 801cb50:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cb54:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801cb58:	ea43 0302 	orr.w	r3, r3, r2
 801cb5c:	bf44      	itt	mi
 801cb5e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cb62:	b21b      	sxthmi	r3, r3
 801cb64:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801cb68:	1b5d      	subs	r5, r3, r5
 801cb6a:	4632      	mov	r2, r6
 801cb6c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801cb70:	e6fa      	b.n	801c968 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801cb72:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801cb76:	4694      	mov	ip, r2
 801cb78:	f102 0908 	add.w	r9, r2, #8
 801cb7c:	4676      	mov	r6, lr
 801cb7e:	f8dc 0000 	ldr.w	r0, [ip]
 801cb82:	f10c 0c08 	add.w	ip, ip, #8
 801cb86:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801cb8a:	46f0      	mov	r8, lr
 801cb8c:	45cc      	cmp	ip, r9
 801cb8e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801cb92:	46c6      	mov	lr, r8
 801cb94:	d1f3      	bne.n	801cb7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801cb96:	f8dc 0000 	ldr.w	r0, [ip]
 801cb9a:	f8c8 0000 	str.w	r0, [r8]
 801cb9e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801cba2:	f8a8 1004 	strh.w	r1, [r8, #4]
 801cba6:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801cbaa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cbae:	d009      	beq.n	801cbc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801cbb0:	7b51      	ldrb	r1, [r2, #13]
 801cbb2:	7992      	ldrb	r2, [r2, #6]
 801cbb4:	0149      	lsls	r1, r1, #5
 801cbb6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cbba:	4311      	orrs	r1, r2
 801cbbc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cbc0:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801cbc4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cbc8:	d00d      	beq.n	801cbe6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801cbca:	1bdb      	subs	r3, r3, r7
 801cbcc:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801cbd0:	b29b      	uxth	r3, r3
 801cbd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cbd6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801cbda:	10db      	asrs	r3, r3, #3
 801cbdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cbe0:	4313      	orrs	r3, r2
 801cbe2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801cbe6:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801cbea:	00cb      	lsls	r3, r1, #3
 801cbec:	0648      	lsls	r0, r1, #25
 801cbee:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cbf2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801cbf6:	ea43 0302 	orr.w	r3, r3, r2
 801cbfa:	bf44      	itt	mi
 801cbfc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cc00:	b21b      	sxthmi	r3, r3
 801cc02:	e7b1      	b.n	801cb68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801cc04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801cc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc08:	461d      	mov	r5, r3
 801cc0a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801cc0c:	4604      	mov	r4, r0
 801cc0e:	4617      	mov	r7, r2
 801cc10:	b92b      	cbnz	r3, 801cc1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801cc12:	4b23      	ldr	r3, [pc, #140]	; (801cca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x9c>)
 801cc14:	21c0      	movs	r1, #192	; 0xc0
 801cc16:	4a23      	ldr	r2, [pc, #140]	; (801cca4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa0>)
 801cc18:	4823      	ldr	r0, [pc, #140]	; (801cca8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801cc1a:	f00a fcc7 	bl	80275ac <__assert_func>
 801cc1e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801cc20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cc24:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801cc28:	f7f7 fee8 	bl	80149fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cc2c:	683b      	ldr	r3, [r7, #0]
 801cc2e:	4601      	mov	r1, r0
 801cc30:	4606      	mov	r6, r0
 801cc32:	4638      	mov	r0, r7
 801cc34:	68db      	ldr	r3, [r3, #12]
 801cc36:	4798      	blx	r3
 801cc38:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801cc3c:	4602      	mov	r2, r0
 801cc3e:	6028      	str	r0, [r5, #0]
 801cc40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cc44:	d215      	bcs.n	801cc72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801cc46:	4643      	mov	r3, r8
 801cc48:	4639      	mov	r1, r7
 801cc4a:	4620      	mov	r0, r4
 801cc4c:	f7ff fe38 	bl	801c8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cc50:	6028      	str	r0, [r5, #0]
 801cc52:	682b      	ldr	r3, [r5, #0]
 801cc54:	b143      	cbz	r3, 801cc68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801cc56:	7b5a      	ldrb	r2, [r3, #13]
 801cc58:	7a9b      	ldrb	r3, [r3, #10]
 801cc5a:	0052      	lsls	r2, r2, #1
 801cc5c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cc60:	4313      	orrs	r3, r2
 801cc62:	bf0c      	ite	eq
 801cc64:	2301      	moveq	r3, #1
 801cc66:	2300      	movne	r3, #0
 801cc68:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801cc6c:	4630      	mov	r0, r6
 801cc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc72:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801cc76:	b29b      	uxth	r3, r3
 801cc78:	2b7f      	cmp	r3, #127	; 0x7f
 801cc7a:	d804      	bhi.n	801cc86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x82>
 801cc7c:	4639      	mov	r1, r7
 801cc7e:	4620      	mov	r0, r4
 801cc80:	f7ff fd04 	bl	801c68c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cc84:	e7e4      	b.n	801cc50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801cc86:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	d0e1      	beq.n	801cc52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801cc8e:	f640 1302 	movw	r3, #2306	; 0x902
 801cc92:	429e      	cmp	r6, r3
 801cc94:	d1dd      	bne.n	801cc52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801cc96:	4601      	mov	r1, r0
 801cc98:	4620      	mov	r0, r4
 801cc9a:	f7ff fcc8 	bl	801c62e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cc9e:	e7d7      	b.n	801cc50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801cca0:	0802bbc4 	.word	0x0802bbc4
 801cca4:	0802be36 	.word	0x0802be36
 801cca8:	0802bbcd 	.word	0x0802bbcd

0801ccac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ccac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ccb0:	461d      	mov	r5, r3
 801ccb2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801ccb4:	4604      	mov	r4, r0
 801ccb6:	4617      	mov	r7, r2
 801ccb8:	b92b      	cbnz	r3, 801ccc6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801ccba:	4b25      	ldr	r3, [pc, #148]	; (801cd50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa4>)
 801ccbc:	21c0      	movs	r1, #192	; 0xc0
 801ccbe:	4a25      	ldr	r2, [pc, #148]	; (801cd54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801ccc0:	4825      	ldr	r0, [pc, #148]	; (801cd58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801ccc2:	f00a fc73 	bl	80275ac <__assert_func>
 801ccc6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ccc8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cccc:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801ccd0:	f7f7 fe94 	bl	80149fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ccd4:	683b      	ldr	r3, [r7, #0]
 801ccd6:	4601      	mov	r1, r0
 801ccd8:	4606      	mov	r6, r0
 801ccda:	4638      	mov	r0, r7
 801ccdc:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801cce0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cce4:	47c8      	blx	r9
 801cce6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ccea:	4602      	mov	r2, r0
 801ccec:	6028      	str	r0, [r5, #0]
 801ccee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ccf2:	d215      	bcs.n	801cd20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ccf4:	4643      	mov	r3, r8
 801ccf6:	4639      	mov	r1, r7
 801ccf8:	4620      	mov	r0, r4
 801ccfa:	f7ff fde1 	bl	801c8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ccfe:	6028      	str	r0, [r5, #0]
 801cd00:	682b      	ldr	r3, [r5, #0]
 801cd02:	b143      	cbz	r3, 801cd16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801cd04:	7b5a      	ldrb	r2, [r3, #13]
 801cd06:	7a9b      	ldrb	r3, [r3, #10]
 801cd08:	0052      	lsls	r2, r2, #1
 801cd0a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cd0e:	4313      	orrs	r3, r2
 801cd10:	bf0c      	ite	eq
 801cd12:	2301      	moveq	r3, #1
 801cd14:	2300      	movne	r3, #0
 801cd16:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801cd1a:	4630      	mov	r0, r6
 801cd1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd20:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801cd24:	b29b      	uxth	r3, r3
 801cd26:	2b7f      	cmp	r3, #127	; 0x7f
 801cd28:	d804      	bhi.n	801cd34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x88>
 801cd2a:	4639      	mov	r1, r7
 801cd2c:	4620      	mov	r0, r4
 801cd2e:	f7ff fcad 	bl	801c68c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cd32:	e7e4      	b.n	801ccfe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801cd34:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d0e1      	beq.n	801cd00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801cd3c:	f640 1302 	movw	r3, #2306	; 0x902
 801cd40:	429e      	cmp	r6, r3
 801cd42:	d1dd      	bne.n	801cd00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801cd44:	4601      	mov	r1, r0
 801cd46:	4620      	mov	r0, r4
 801cd48:	f7ff fc71 	bl	801c62e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cd4c:	e7d7      	b.n	801ccfe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801cd4e:	bf00      	nop
 801cd50:	0802bbc4 	.word	0x0802bbc4
 801cd54:	0802be36 	.word	0x0802be36
 801cd58:	0802bbcd 	.word	0x0802bbcd

0801cd5c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801cd5c:	b510      	push	{r4, lr}
 801cd5e:	4604      	mov	r4, r0
 801cd60:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801cd62:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cd64:	b9d9      	cbnz	r1, 801cd9e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801cd66:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cd68:	2b0a      	cmp	r3, #10
 801cd6a:	d036      	beq.n	801cdda <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801cd6c:	4620      	mov	r0, r4
 801cd6e:	f7ff fc27 	bl	801c5c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801cd72:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cd74:	2b09      	cmp	r3, #9
 801cd76:	d906      	bls.n	801cd86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801cd78:	4b18      	ldr	r3, [pc, #96]	; (801cddc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801cd7a:	f44f 7182 	mov.w	r1, #260	; 0x104
 801cd7e:	4a18      	ldr	r2, [pc, #96]	; (801cde0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801cd80:	4818      	ldr	r0, [pc, #96]	; (801cde4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801cd82:	f00a fc13 	bl	80275ac <__assert_func>
 801cd86:	1c5a      	adds	r2, r3, #1
 801cd88:	8622      	strh	r2, [r4, #48]	; 0x30
 801cd8a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801cd8c:	4413      	add	r3, r2
 801cd8e:	b29b      	uxth	r3, r3
 801cd90:	2b09      	cmp	r3, #9
 801cd92:	bf88      	it	hi
 801cd94:	3b0a      	subhi	r3, #10
 801cd96:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cd9a:	8358      	strh	r0, [r3, #26]
 801cd9c:	e7e3      	b.n	801cd66 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801cd9e:	2b0a      	cmp	r3, #10
 801cda0:	d01b      	beq.n	801cdda <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801cda2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cda4:	3901      	subs	r1, #1
 801cda6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801cdaa:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801cdac:	8721      	strh	r1, [r4, #56]	; 0x38
 801cdae:	1c51      	adds	r1, r2, #1
 801cdb0:	b289      	uxth	r1, r1
 801cdb2:	2901      	cmp	r1, #1
 801cdb4:	bf8a      	itet	hi
 801cdb6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801cdba:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801cdbc:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801cdbe:	2b09      	cmp	r3, #9
 801cdc0:	d8da      	bhi.n	801cd78 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801cdc2:	1c5a      	adds	r2, r3, #1
 801cdc4:	8622      	strh	r2, [r4, #48]	; 0x30
 801cdc6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801cdc8:	4413      	add	r3, r2
 801cdca:	b29b      	uxth	r3, r3
 801cdcc:	2b09      	cmp	r3, #9
 801cdce:	bf88      	it	hi
 801cdd0:	3b0a      	subhi	r3, #10
 801cdd2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cdd6:	8358      	strh	r0, [r3, #26]
 801cdd8:	e7c2      	b.n	801cd60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801cdda:	bd10      	pop	{r4, pc}
 801cddc:	0802bbf9 	.word	0x0802bbf9
 801cde0:	0802bf8c 	.word	0x0802bf8c
 801cde4:	0802bbcd 	.word	0x0802bbcd

0801cde8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801cde8:	b538      	push	{r3, r4, r5, lr}
 801cdea:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801cdec:	4604      	mov	r4, r0
 801cdee:	b92a      	cbnz	r2, 801cdfc <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801cdf0:	4b13      	ldr	r3, [pc, #76]	; (801ce40 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801cdf2:	21d5      	movs	r1, #213	; 0xd5
 801cdf4:	4a13      	ldr	r2, [pc, #76]	; (801ce44 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801cdf6:	4814      	ldr	r0, [pc, #80]	; (801ce48 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801cdf8:	f00a fbd8 	bl	80275ac <__assert_func>
 801cdfc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801cdfe:	3a01      	subs	r2, #1
 801ce00:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801ce04:	8b4d      	ldrh	r5, [r1, #26]
 801ce06:	8602      	strh	r2, [r0, #48]	; 0x30
 801ce08:	1c5a      	adds	r2, r3, #1
 801ce0a:	b292      	uxth	r2, r2
 801ce0c:	2a09      	cmp	r2, #9
 801ce0e:	bf8a      	itet	hi
 801ce10:	3b09      	subhi	r3, #9
 801ce12:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801ce14:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801ce16:	f7ff ffa1 	bl	801cd5c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ce1a:	8b23      	ldrh	r3, [r4, #24]
 801ce1c:	2b01      	cmp	r3, #1
 801ce1e:	bf9c      	itt	ls
 801ce20:	3301      	addls	r3, #1
 801ce22:	8323      	strhls	r3, [r4, #24]
 801ce24:	8ae3      	ldrh	r3, [r4, #22]
 801ce26:	b90b      	cbnz	r3, 801ce2c <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801ce28:	2302      	movs	r3, #2
 801ce2a:	82e3      	strh	r3, [r4, #22]
 801ce2c:	8ae3      	ldrh	r3, [r4, #22]
 801ce2e:	4628      	mov	r0, r5
 801ce30:	3b01      	subs	r3, #1
 801ce32:	b29b      	uxth	r3, r3
 801ce34:	82e3      	strh	r3, [r4, #22]
 801ce36:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ce3a:	8265      	strh	r5, [r4, #18]
 801ce3c:	bd38      	pop	{r3, r4, r5, pc}
 801ce3e:	bf00      	nop
 801ce40:	0802bbc4 	.word	0x0802bbc4
 801ce44:	0802bee1 	.word	0x0802bee1
 801ce48:	0802bbcd 	.word	0x0802bbcd

0801ce4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ce4c:	428a      	cmp	r2, r1
 801ce4e:	b538      	push	{r3, r4, r5, lr}
 801ce50:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801ce52:	d90c      	bls.n	801ce6e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801ce54:	b92c      	cbnz	r4, 801ce62 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801ce56:	4b1c      	ldr	r3, [pc, #112]	; (801cec8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801ce58:	21e1      	movs	r1, #225	; 0xe1
 801ce5a:	4a1c      	ldr	r2, [pc, #112]	; (801cecc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801ce5c:	481c      	ldr	r0, [pc, #112]	; (801ced0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801ce5e:	f00a fba5 	bl	80275ac <__assert_func>
 801ce62:	3c01      	subs	r4, #1
 801ce64:	4b1b      	ldr	r3, [pc, #108]	; (801ced4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801ce66:	4a1c      	ldr	r2, [pc, #112]	; (801ced8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801ce68:	21c5      	movs	r1, #197	; 0xc5
 801ce6a:	8604      	strh	r4, [r0, #48]	; 0x30
 801ce6c:	e7f6      	b.n	801ce5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ce6e:	428c      	cmp	r4, r1
 801ce70:	d203      	bcs.n	801ce7a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801ce72:	4b1a      	ldr	r3, [pc, #104]	; (801cedc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801ce74:	21cb      	movs	r1, #203	; 0xcb
 801ce76:	4a1a      	ldr	r2, [pc, #104]	; (801cee0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801ce78:	e7f0      	b.n	801ce5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ce7a:	1a64      	subs	r4, r4, r1
 801ce7c:	250a      	movs	r5, #10
 801ce7e:	8604      	strh	r4, [r0, #48]	; 0x30
 801ce80:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801ce82:	4421      	add	r1, r4
 801ce84:	b289      	uxth	r1, r1
 801ce86:	2909      	cmp	r1, #9
 801ce88:	bf88      	it	hi
 801ce8a:	390a      	subhi	r1, #10
 801ce8c:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801ce8e:	b1ba      	cbz	r2, 801cec0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801ce90:	3a01      	subs	r2, #1
 801ce92:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801ce94:	b292      	uxth	r2, r2
 801ce96:	2909      	cmp	r1, #9
 801ce98:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ce9c:	d903      	bls.n	801cea6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801ce9e:	4b11      	ldr	r3, [pc, #68]	; (801cee4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801cea0:	21e6      	movs	r1, #230	; 0xe6
 801cea2:	4a11      	ldr	r2, [pc, #68]	; (801cee8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801cea4:	e7da      	b.n	801ce5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801cea6:	3101      	adds	r1, #1
 801cea8:	8601      	strh	r1, [r0, #48]	; 0x30
 801ceaa:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801ceac:	b901      	cbnz	r1, 801ceb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801ceae:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801ceb0:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801ceb2:	3901      	subs	r1, #1
 801ceb4:	b289      	uxth	r1, r1
 801ceb6:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801ceb8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801cebc:	834c      	strh	r4, [r1, #26]
 801cebe:	e7e6      	b.n	801ce8e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801cec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cec4:	f7ff bf4a 	b.w	801cd5c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801cec8:	0802bbc4 	.word	0x0802bbc4
 801cecc:	0802bcba 	.word	0x0802bcba
 801ced0:	0802bbcd 	.word	0x0802bbcd
 801ced4:	0802bc05 	.word	0x0802bc05
 801ced8:	0802bd64 	.word	0x0802bd64
 801cedc:	0802bc13 	.word	0x0802bc13
 801cee0:	0802c03b 	.word	0x0802c03b
 801cee4:	0802bc1f 	.word	0x0802bc1f
 801cee8:	0802bc32 	.word	0x0802bc32

0801ceec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ceec:	3a01      	subs	r2, #1
 801ceee:	b570      	push	{r4, r5, r6, lr}
 801cef0:	b292      	uxth	r2, r2
 801cef2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801cef6:	42b2      	cmp	r2, r6
 801cef8:	d019      	beq.n	801cf2e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801cefa:	8b04      	ldrh	r4, [r0, #24]
 801cefc:	f831 5b02 	ldrh.w	r5, [r1], #2
 801cf00:	4294      	cmp	r4, r2
 801cf02:	d805      	bhi.n	801cf10 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801cf04:	4b19      	ldr	r3, [pc, #100]	; (801cf6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801cf06:	4a1a      	ldr	r2, [pc, #104]	; (801cf70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801cf08:	21c5      	movs	r1, #197	; 0xc5
 801cf0a:	481a      	ldr	r0, [pc, #104]	; (801cf74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801cf0c:	f00a fb4e 	bl	80275ac <__assert_func>
 801cf10:	8ac4      	ldrh	r4, [r0, #22]
 801cf12:	4414      	add	r4, r2
 801cf14:	3a01      	subs	r2, #1
 801cf16:	b2a4      	uxth	r4, r4
 801cf18:	b292      	uxth	r2, r2
 801cf1a:	2c01      	cmp	r4, #1
 801cf1c:	bf88      	it	hi
 801cf1e:	3c02      	subhi	r4, #2
 801cf20:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801cf24:	8a64      	ldrh	r4, [r4, #18]
 801cf26:	42ac      	cmp	r4, r5
 801cf28:	d0e5      	beq.n	801cef6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801cf2a:	2000      	movs	r0, #0
 801cf2c:	bd70      	pop	{r4, r5, r6, pc}
 801cf2e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cf32:	2400      	movs	r4, #0
 801cf34:	4413      	add	r3, r2
 801cf36:	b2a2      	uxth	r2, r4
 801cf38:	429a      	cmp	r2, r3
 801cf3a:	da14      	bge.n	801cf66 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801cf3c:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801cf3e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801cf42:	4296      	cmp	r6, r2
 801cf44:	d802      	bhi.n	801cf4c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801cf46:	4b09      	ldr	r3, [pc, #36]	; (801cf6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801cf48:	4a0b      	ldr	r2, [pc, #44]	; (801cf78 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801cf4a:	e7dd      	b.n	801cf08 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801cf4c:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801cf4e:	3401      	adds	r4, #1
 801cf50:	4432      	add	r2, r6
 801cf52:	b292      	uxth	r2, r2
 801cf54:	2a09      	cmp	r2, #9
 801cf56:	bf88      	it	hi
 801cf58:	3a0a      	subhi	r2, #10
 801cf5a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801cf5e:	8b52      	ldrh	r2, [r2, #26]
 801cf60:	42aa      	cmp	r2, r5
 801cf62:	d0e8      	beq.n	801cf36 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801cf64:	e7e1      	b.n	801cf2a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801cf66:	2001      	movs	r0, #1
 801cf68:	e7e0      	b.n	801cf2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801cf6a:	bf00      	nop
 801cf6c:	0802bc05 	.word	0x0802bc05
 801cf70:	0802c0bf 	.word	0x0802c0bf
 801cf74:	0802bbcd 	.word	0x0802bbcd
 801cf78:	0802bd64 	.word	0x0802bd64

0801cf7c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801cf7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf80:	4605      	mov	r5, r0
 801cf82:	4616      	mov	r6, r2
 801cf84:	1c8c      	adds	r4, r1, #2
 801cf86:	8809      	ldrh	r1, [r1, #0]
 801cf88:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801cf8c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801cf90:	42b3      	cmp	r3, r6
 801cf92:	d124      	bne.n	801cfde <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801cf94:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801cf98:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801cf9c:	f001 070f 	and.w	r7, r1, #15
 801cfa0:	4652      	mov	r2, sl
 801cfa2:	f8cd 8000 	str.w	r8, [sp]
 801cfa6:	464b      	mov	r3, r9
 801cfa8:	4621      	mov	r1, r4
 801cfaa:	4628      	mov	r0, r5
 801cfac:	f7ff ff9e 	bl	801ceec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801cfb0:	4683      	mov	fp, r0
 801cfb2:	b168      	cbz	r0, 801cfd0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801cfb4:	eb0a 0109 	add.w	r1, sl, r9
 801cfb8:	463a      	mov	r2, r7
 801cfba:	4628      	mov	r0, r5
 801cfbc:	4441      	add	r1, r8
 801cfbe:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801cfc2:	4649      	mov	r1, r9
 801cfc4:	f7ff ff42 	bl	801ce4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801cfc8:	4658      	mov	r0, fp
 801cfca:	b003      	add	sp, #12
 801cfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfd0:	eb07 010a 	add.w	r1, r7, sl
 801cfd4:	4449      	add	r1, r9
 801cfd6:	4441      	add	r1, r8
 801cfd8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801cfdc:	e7d2      	b.n	801cf84 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801cfde:	f04f 0b00 	mov.w	fp, #0
 801cfe2:	e7f1      	b.n	801cfc8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801cfe4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801cfe4:	b570      	push	{r4, r5, r6, lr}
 801cfe6:	8810      	ldrh	r0, [r2, #0]
 801cfe8:	4298      	cmp	r0, r3
 801cfea:	d817      	bhi.n	801d01c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cfec:	1e48      	subs	r0, r1, #1
 801cfee:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801cff2:	4298      	cmp	r0, r3
 801cff4:	d312      	bcc.n	801d01c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cff6:	2400      	movs	r4, #0
 801cff8:	428c      	cmp	r4, r1
 801cffa:	d20f      	bcs.n	801d01c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cffc:	1860      	adds	r0, r4, r1
 801cffe:	1040      	asrs	r0, r0, #1
 801d000:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d004:	0085      	lsls	r5, r0, #2
 801d006:	42b3      	cmp	r3, r6
 801d008:	d902      	bls.n	801d010 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d00a:	3001      	adds	r0, #1
 801d00c:	b284      	uxth	r4, r0
 801d00e:	e7f3      	b.n	801cff8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d010:	d201      	bcs.n	801d016 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d012:	b281      	uxth	r1, r0
 801d014:	e7f0      	b.n	801cff8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d016:	442a      	add	r2, r5
 801d018:	8850      	ldrh	r0, [r2, #2]
 801d01a:	bd70      	pop	{r4, r5, r6, pc}
 801d01c:	2000      	movs	r0, #0
 801d01e:	e7fc      	b.n	801d01a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d020 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d024:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801d026:	4604      	mov	r4, r0
 801d028:	260b      	movs	r6, #11
 801d02a:	886f      	ldrh	r7, [r5, #2]
 801d02c:	087f      	lsrs	r7, r7, #1
 801d02e:	3e01      	subs	r6, #1
 801d030:	d01b      	beq.n	801d06a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d032:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801d034:	b92b      	cbnz	r3, 801d042 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801d036:	4b0e      	ldr	r3, [pc, #56]	; (801d070 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801d038:	21c0      	movs	r1, #192	; 0xc0
 801d03a:	4a0e      	ldr	r2, [pc, #56]	; (801d074 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801d03c:	480e      	ldr	r0, [pc, #56]	; (801d078 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801d03e:	f00a fab5 	bl	80275ac <__assert_func>
 801d042:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801d044:	462a      	mov	r2, r5
 801d046:	4639      	mov	r1, r7
 801d048:	4620      	mov	r0, r4
 801d04a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d04e:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801d052:	4643      	mov	r3, r8
 801d054:	f7ff ffc6 	bl	801cfe4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d058:	b138      	cbz	r0, 801d06a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d05a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d05e:	4642      	mov	r2, r8
 801d060:	4620      	mov	r0, r4
 801d062:	f7ff ff8b 	bl	801cf7c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d066:	2800      	cmp	r0, #0
 801d068:	d1e1      	bne.n	801d02e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d06e:	bf00      	nop
 801d070:	0802bbc4 	.word	0x0802bbc4
 801d074:	0802be36 	.word	0x0802be36
 801d078:	0802bbcd 	.word	0x0802bbcd

0801d07c <_ZN8touchgfx7Unicode6strlenEPKt>:
 801d07c:	4602      	mov	r2, r0
 801d07e:	b148      	cbz	r0, 801d094 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801d080:	2300      	movs	r3, #0
 801d082:	b298      	uxth	r0, r3
 801d084:	3301      	adds	r3, #1
 801d086:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d08a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801d08e:	2900      	cmp	r1, #0
 801d090:	d1f7      	bne.n	801d082 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801d092:	4770      	bx	lr
 801d094:	4770      	bx	lr

0801d096 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801d096:	b530      	push	{r4, r5, lr}
 801d098:	4604      	mov	r4, r0
 801d09a:	b159      	cbz	r1, 801d0b4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801d09c:	b148      	cbz	r0, 801d0b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d09e:	2300      	movs	r3, #0
 801d0a0:	b298      	uxth	r0, r3
 801d0a2:	4282      	cmp	r2, r0
 801d0a4:	d905      	bls.n	801d0b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d0a6:	5ccd      	ldrb	r5, [r1, r3]
 801d0a8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d0ac:	3301      	adds	r3, #1
 801d0ae:	2d00      	cmp	r5, #0
 801d0b0:	d1f6      	bne.n	801d0a0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801d0b2:	bd30      	pop	{r4, r5, pc}
 801d0b4:	4608      	mov	r0, r1
 801d0b6:	e7fc      	b.n	801d0b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801d0b8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801d0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0ba:	468c      	mov	ip, r1
 801d0bc:	b08b      	sub	sp, #44	; 0x2c
 801d0be:	2100      	movs	r1, #0
 801d0c0:	ae01      	add	r6, sp, #4
 801d0c2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d0c6:	211f      	movs	r1, #31
 801d0c8:	fbb0 f7f3 	udiv	r7, r0, r3
 801d0cc:	fb03 0517 	mls	r5, r3, r7, r0
 801d0d0:	4638      	mov	r0, r7
 801d0d2:	b2ec      	uxtb	r4, r5
 801d0d4:	2d09      	cmp	r5, #9
 801d0d6:	bfd4      	ite	le
 801d0d8:	3430      	addle	r4, #48	; 0x30
 801d0da:	3457      	addgt	r4, #87	; 0x57
 801d0dc:	b2e4      	uxtb	r4, r4
 801d0de:	558c      	strb	r4, [r1, r6]
 801d0e0:	1e4c      	subs	r4, r1, #1
 801d0e2:	b92f      	cbnz	r7, 801d0f0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801d0e4:	4431      	add	r1, r6
 801d0e6:	4660      	mov	r0, ip
 801d0e8:	f7ff ffd5 	bl	801d096 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d0ec:	b00b      	add	sp, #44	; 0x2c
 801d0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0f0:	4621      	mov	r1, r4
 801d0f2:	e7e9      	b.n	801d0c8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801d0f4 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801d0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0f6:	4607      	mov	r7, r0
 801d0f8:	b08b      	sub	sp, #44	; 0x2c
 801d0fa:	4608      	mov	r0, r1
 801d0fc:	b341      	cbz	r1, 801d150 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d0fe:	1e99      	subs	r1, r3, #2
 801d100:	290e      	cmp	r1, #14
 801d102:	d825      	bhi.n	801d150 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d104:	2100      	movs	r1, #0
 801d106:	463c      	mov	r4, r7
 801d108:	261f      	movs	r6, #31
 801d10a:	f10d 0c04 	add.w	ip, sp, #4
 801d10e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d112:	1e71      	subs	r1, r6, #1
 801d114:	fb94 fef3 	sdiv	lr, r4, r3
 801d118:	fb03 441e 	mls	r4, r3, lr, r4
 801d11c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801d120:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801d124:	b2ec      	uxtb	r4, r5
 801d126:	2d09      	cmp	r5, #9
 801d128:	bfd4      	ite	le
 801d12a:	3430      	addle	r4, #48	; 0x30
 801d12c:	3457      	addgt	r4, #87	; 0x57
 801d12e:	b2e4      	uxtb	r4, r4
 801d130:	f80c 4006 	strb.w	r4, [ip, r6]
 801d134:	4674      	mov	r4, lr
 801d136:	b96c      	cbnz	r4, 801d154 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801d138:	2f00      	cmp	r7, #0
 801d13a:	da05      	bge.n	801d148 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801d13c:	ab0a      	add	r3, sp, #40	; 0x28
 801d13e:	4419      	add	r1, r3
 801d140:	232d      	movs	r3, #45	; 0x2d
 801d142:	f801 3c24 	strb.w	r3, [r1, #-36]
 801d146:	1eb1      	subs	r1, r6, #2
 801d148:	3101      	adds	r1, #1
 801d14a:	4461      	add	r1, ip
 801d14c:	f7ff ffa3 	bl	801d096 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d150:	b00b      	add	sp, #44	; 0x2c
 801d152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d154:	460e      	mov	r6, r1
 801d156:	e7dc      	b.n	801d112 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801d158 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d15c:	b085      	sub	sp, #20
 801d15e:	4691      	mov	r9, r2
 801d160:	6802      	ldr	r2, [r0, #0]
 801d162:	4688      	mov	r8, r1
 801d164:	461c      	mov	r4, r3
 801d166:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801d16a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d16e:	4683      	mov	fp, r0
 801d170:	4610      	mov	r0, r2
 801d172:	9103      	str	r1, [sp, #12]
 801d174:	9302      	str	r3, [sp, #8]
 801d176:	9201      	str	r2, [sp, #4]
 801d178:	f7ff ff80 	bl	801d07c <_ZN8touchgfx7Unicode6strlenEPKt>
 801d17c:	f1b8 0f00 	cmp.w	r8, #0
 801d180:	bf0c      	ite	eq
 801d182:	4684      	moveq	ip, r0
 801d184:	f100 0c01 	addne.w	ip, r0, #1
 801d188:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801d18c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801d190:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d192:	fa1f fc8c 	uxth.w	ip, ip
 801d196:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d198:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801d19c:	9903      	ldr	r1, [sp, #12]
 801d19e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d1a2:	d041      	beq.n	801d228 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d1a4:	d834      	bhi.n	801d210 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801d1a6:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801d1aa:	d059      	beq.n	801d260 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801d1ac:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801d1b0:	d03a      	beq.n	801d228 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d1b2:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801d1b6:	d034      	beq.n	801d222 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d1b8:	2400      	movs	r4, #0
 801d1ba:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801d1be:	3a01      	subs	r2, #1
 801d1c0:	b169      	cbz	r1, 801d1de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d1c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d1c4:	458c      	cmp	ip, r1
 801d1c6:	da09      	bge.n	801d1dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d1c8:	eba1 010c 	sub.w	r1, r1, ip
 801d1cc:	b289      	uxth	r1, r1
 801d1ce:	b933      	cbnz	r3, 801d1de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d1d0:	2e00      	cmp	r6, #0
 801d1d2:	d051      	beq.n	801d278 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d1d4:	2800      	cmp	r0, #0
 801d1d6:	d04f      	beq.n	801d278 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d1d8:	440c      	add	r4, r1
 801d1da:	b2a4      	uxth	r4, r4
 801d1dc:	2100      	movs	r1, #0
 801d1de:	682b      	ldr	r3, [r5, #0]
 801d1e0:	4293      	cmp	r3, r2
 801d1e2:	da07      	bge.n	801d1f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d1e4:	f1b8 0f00 	cmp.w	r8, #0
 801d1e8:	d004      	beq.n	801d1f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d1ea:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801d1ee:	682b      	ldr	r3, [r5, #0]
 801d1f0:	3301      	adds	r3, #1
 801d1f2:	602b      	str	r3, [r5, #0]
 801d1f4:	2730      	movs	r7, #48	; 0x30
 801d1f6:	2c00      	cmp	r4, #0
 801d1f8:	d04e      	beq.n	801d298 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d1fa:	682e      	ldr	r6, [r5, #0]
 801d1fc:	3c01      	subs	r4, #1
 801d1fe:	42b2      	cmp	r2, r6
 801d200:	b2a4      	uxth	r4, r4
 801d202:	dd49      	ble.n	801d298 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d204:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d208:	682b      	ldr	r3, [r5, #0]
 801d20a:	3301      	adds	r3, #1
 801d20c:	602b      	str	r3, [r5, #0]
 801d20e:	e7f2      	b.n	801d1f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801d210:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801d214:	d01d      	beq.n	801d252 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801d216:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801d21a:	d002      	beq.n	801d222 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d21c:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801d220:	e7c9      	b.n	801d1b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801d222:	4684      	mov	ip, r0
 801d224:	f04f 0800 	mov.w	r8, #0
 801d228:	2c00      	cmp	r4, #0
 801d22a:	d0c6      	beq.n	801d1ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d22c:	b947      	cbnz	r7, 801d240 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d22e:	2801      	cmp	r0, #1
 801d230:	d106      	bne.n	801d240 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d232:	8814      	ldrh	r4, [r2, #0]
 801d234:	2c30      	cmp	r4, #48	; 0x30
 801d236:	bf02      	ittt	eq
 801d238:	3202      	addeq	r2, #2
 801d23a:	4638      	moveq	r0, r7
 801d23c:	f8cb 2000 	streq.w	r2, [fp]
 801d240:	45bc      	cmp	ip, r7
 801d242:	da14      	bge.n	801d26e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801d244:	b2bf      	uxth	r7, r7
 801d246:	eba7 040c 	sub.w	r4, r7, ip
 801d24a:	46bc      	mov	ip, r7
 801d24c:	b2a4      	uxth	r4, r4
 801d24e:	2600      	movs	r6, #0
 801d250:	e7b3      	b.n	801d1ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d252:	4684      	mov	ip, r0
 801d254:	b16c      	cbz	r4, 801d272 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801d256:	42b8      	cmp	r0, r7
 801d258:	dd00      	ble.n	801d25c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801d25a:	b2b8      	uxth	r0, r7
 801d25c:	2400      	movs	r4, #0
 801d25e:	e003      	b.n	801d268 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801d260:	f04f 0c01 	mov.w	ip, #1
 801d264:	2400      	movs	r4, #0
 801d266:	4660      	mov	r0, ip
 801d268:	4626      	mov	r6, r4
 801d26a:	46a0      	mov	r8, r4
 801d26c:	e7a5      	b.n	801d1ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d26e:	2400      	movs	r4, #0
 801d270:	e7ed      	b.n	801d24e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801d272:	4626      	mov	r6, r4
 801d274:	46a0      	mov	r8, r4
 801d276:	e7a0      	b.n	801d1ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d278:	2900      	cmp	r1, #0
 801d27a:	d0b0      	beq.n	801d1de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d27c:	2720      	movs	r7, #32
 801d27e:	682e      	ldr	r6, [r5, #0]
 801d280:	2900      	cmp	r1, #0
 801d282:	d0ac      	beq.n	801d1de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d284:	3901      	subs	r1, #1
 801d286:	4296      	cmp	r6, r2
 801d288:	b289      	uxth	r1, r1
 801d28a:	daa7      	bge.n	801d1dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d28c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d290:	682b      	ldr	r3, [r5, #0]
 801d292:	3301      	adds	r3, #1
 801d294:	602b      	str	r3, [r5, #0]
 801d296:	e7f2      	b.n	801d27e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801d298:	b188      	cbz	r0, 801d2be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d29a:	682b      	ldr	r3, [r5, #0]
 801d29c:	3801      	subs	r0, #1
 801d29e:	429a      	cmp	r2, r3
 801d2a0:	b280      	uxth	r0, r0
 801d2a2:	dd0c      	ble.n	801d2be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d2a4:	f8db 3000 	ldr.w	r3, [fp]
 801d2a8:	1c9c      	adds	r4, r3, #2
 801d2aa:	f8cb 4000 	str.w	r4, [fp]
 801d2ae:	881c      	ldrh	r4, [r3, #0]
 801d2b0:	682b      	ldr	r3, [r5, #0]
 801d2b2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801d2b6:	682b      	ldr	r3, [r5, #0]
 801d2b8:	3301      	adds	r3, #1
 801d2ba:	602b      	str	r3, [r5, #0]
 801d2bc:	e7ec      	b.n	801d298 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d2be:	2620      	movs	r6, #32
 801d2c0:	b151      	cbz	r1, 801d2d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d2c2:	6828      	ldr	r0, [r5, #0]
 801d2c4:	3901      	subs	r1, #1
 801d2c6:	4282      	cmp	r2, r0
 801d2c8:	b289      	uxth	r1, r1
 801d2ca:	dd05      	ble.n	801d2d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d2cc:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801d2d0:	682b      	ldr	r3, [r5, #0]
 801d2d2:	3301      	adds	r3, #1
 801d2d4:	602b      	str	r3, [r5, #0]
 801d2d6:	e7f3      	b.n	801d2c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801d2d8:	b005      	add	sp, #20
 801d2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d2de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801d2de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d2e2:	2400      	movs	r4, #0
 801d2e4:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801d2e8:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801d2ec:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801d2f0:	8014      	strh	r4, [r2, #0]
 801d2f2:	701c      	strb	r4, [r3, #0]
 801d2f4:	f888 4000 	strb.w	r4, [r8]
 801d2f8:	f88c 4000 	strb.w	r4, [ip]
 801d2fc:	f88e 4000 	strb.w	r4, [lr]
 801d300:	703c      	strb	r4, [r7, #0]
 801d302:	6804      	ldr	r4, [r0, #0]
 801d304:	b1a4      	cbz	r4, 801d330 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801d306:	8824      	ldrh	r4, [r4, #0]
 801d308:	f04f 0901 	mov.w	r9, #1
 801d30c:	b314      	cbz	r4, 801d354 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d30e:	2c2b      	cmp	r4, #43	; 0x2b
 801d310:	d001      	beq.n	801d316 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801d312:	2c20      	cmp	r4, #32
 801d314:	d110      	bne.n	801d338 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801d316:	8014      	strh	r4, [r2, #0]
 801d318:	6804      	ldr	r4, [r0, #0]
 801d31a:	b10c      	cbz	r4, 801d320 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801d31c:	3402      	adds	r4, #2
 801d31e:	6004      	str	r4, [r0, #0]
 801d320:	680c      	ldr	r4, [r1, #0]
 801d322:	b10c      	cbz	r4, 801d328 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801d324:	3401      	adds	r4, #1
 801d326:	600c      	str	r4, [r1, #0]
 801d328:	6804      	ldr	r4, [r0, #0]
 801d32a:	b17c      	cbz	r4, 801d34c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801d32c:	8824      	ldrh	r4, [r4, #0]
 801d32e:	e7ed      	b.n	801d30c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d330:	680c      	ldr	r4, [r1, #0]
 801d332:	b17c      	cbz	r4, 801d354 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d334:	7824      	ldrb	r4, [r4, #0]
 801d336:	e7e7      	b.n	801d308 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801d338:	2c2d      	cmp	r4, #45	; 0x2d
 801d33a:	d102      	bne.n	801d342 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801d33c:	f883 9000 	strb.w	r9, [r3]
 801d340:	e7ea      	b.n	801d318 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d342:	2c23      	cmp	r4, #35	; 0x23
 801d344:	d107      	bne.n	801d356 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801d346:	f888 9000 	strb.w	r9, [r8]
 801d34a:	e7e5      	b.n	801d318 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d34c:	680c      	ldr	r4, [r1, #0]
 801d34e:	b10c      	cbz	r4, 801d354 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d350:	7824      	ldrb	r4, [r4, #0]
 801d352:	e7db      	b.n	801d30c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d354:	2400      	movs	r4, #0
 801d356:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801d35a:	2b09      	cmp	r3, #9
 801d35c:	d901      	bls.n	801d362 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801d35e:	2c2a      	cmp	r4, #42	; 0x2a
 801d360:	d122      	bne.n	801d3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d362:	2301      	movs	r3, #1
 801d364:	2c30      	cmp	r4, #48	; 0x30
 801d366:	f88e 3000 	strb.w	r3, [lr]
 801d36a:	d10d      	bne.n	801d388 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d36c:	f88c 3000 	strb.w	r3, [ip]
 801d370:	6803      	ldr	r3, [r0, #0]
 801d372:	b10b      	cbz	r3, 801d378 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801d374:	3302      	adds	r3, #2
 801d376:	6003      	str	r3, [r0, #0]
 801d378:	680b      	ldr	r3, [r1, #0]
 801d37a:	b10b      	cbz	r3, 801d380 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801d37c:	3301      	adds	r3, #1
 801d37e:	600b      	str	r3, [r1, #0]
 801d380:	6803      	ldr	r3, [r0, #0]
 801d382:	2b00      	cmp	r3, #0
 801d384:	d02f      	beq.n	801d3e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801d386:	881c      	ldrh	r4, [r3, #0]
 801d388:	2c2a      	cmp	r4, #42	; 0x2a
 801d38a:	d135      	bne.n	801d3f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d38c:	f04f 33ff 	mov.w	r3, #4294967295
 801d390:	6033      	str	r3, [r6, #0]
 801d392:	6803      	ldr	r3, [r0, #0]
 801d394:	b10b      	cbz	r3, 801d39a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801d396:	3302      	adds	r3, #2
 801d398:	6003      	str	r3, [r0, #0]
 801d39a:	680b      	ldr	r3, [r1, #0]
 801d39c:	b10b      	cbz	r3, 801d3a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801d39e:	3301      	adds	r3, #1
 801d3a0:	600b      	str	r3, [r1, #0]
 801d3a2:	6803      	ldr	r3, [r0, #0]
 801d3a4:	b31b      	cbz	r3, 801d3ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801d3a6:	881c      	ldrh	r4, [r3, #0]
 801d3a8:	2c2e      	cmp	r4, #46	; 0x2e
 801d3aa:	d11a      	bne.n	801d3e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d3ac:	2301      	movs	r3, #1
 801d3ae:	703b      	strb	r3, [r7, #0]
 801d3b0:	6803      	ldr	r3, [r0, #0]
 801d3b2:	b10b      	cbz	r3, 801d3b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801d3b4:	3302      	adds	r3, #2
 801d3b6:	6003      	str	r3, [r0, #0]
 801d3b8:	680b      	ldr	r3, [r1, #0]
 801d3ba:	b10b      	cbz	r3, 801d3c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801d3bc:	3301      	adds	r3, #1
 801d3be:	600b      	str	r3, [r1, #0]
 801d3c0:	6803      	ldr	r3, [r0, #0]
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d036      	beq.n	801d434 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801d3c6:	881b      	ldrh	r3, [r3, #0]
 801d3c8:	2b2a      	cmp	r3, #42	; 0x2a
 801d3ca:	d137      	bne.n	801d43c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d3cc:	f04f 33ff 	mov.w	r3, #4294967295
 801d3d0:	602b      	str	r3, [r5, #0]
 801d3d2:	6803      	ldr	r3, [r0, #0]
 801d3d4:	b10b      	cbz	r3, 801d3da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801d3d6:	3302      	adds	r3, #2
 801d3d8:	6003      	str	r3, [r0, #0]
 801d3da:	680b      	ldr	r3, [r1, #0]
 801d3dc:	b10b      	cbz	r3, 801d3e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d3de:	3301      	adds	r3, #1
 801d3e0:	600b      	str	r3, [r1, #0]
 801d3e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d3e6:	680c      	ldr	r4, [r1, #0]
 801d3e8:	b134      	cbz	r4, 801d3f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d3ea:	7824      	ldrb	r4, [r4, #0]
 801d3ec:	e7cc      	b.n	801d388 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d3ee:	680b      	ldr	r3, [r1, #0]
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d0f6      	beq.n	801d3e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d3f4:	781c      	ldrb	r4, [r3, #0]
 801d3f6:	e7d7      	b.n	801d3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d3f8:	2300      	movs	r3, #0
 801d3fa:	220a      	movs	r2, #10
 801d3fc:	6033      	str	r3, [r6, #0]
 801d3fe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d402:	fa1f f38c 	uxth.w	r3, ip
 801d406:	2b09      	cmp	r3, #9
 801d408:	d8ce      	bhi.n	801d3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d40a:	6833      	ldr	r3, [r6, #0]
 801d40c:	fb02 c303 	mla	r3, r2, r3, ip
 801d410:	6033      	str	r3, [r6, #0]
 801d412:	6803      	ldr	r3, [r0, #0]
 801d414:	b10b      	cbz	r3, 801d41a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801d416:	3302      	adds	r3, #2
 801d418:	6003      	str	r3, [r0, #0]
 801d41a:	680b      	ldr	r3, [r1, #0]
 801d41c:	b10b      	cbz	r3, 801d422 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801d41e:	3301      	adds	r3, #1
 801d420:	600b      	str	r3, [r1, #0]
 801d422:	6803      	ldr	r3, [r0, #0]
 801d424:	b10b      	cbz	r3, 801d42a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801d426:	881c      	ldrh	r4, [r3, #0]
 801d428:	e7e9      	b.n	801d3fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d42a:	680c      	ldr	r4, [r1, #0]
 801d42c:	2c00      	cmp	r4, #0
 801d42e:	d0e6      	beq.n	801d3fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d430:	7824      	ldrb	r4, [r4, #0]
 801d432:	e7e4      	b.n	801d3fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d434:	680b      	ldr	r3, [r1, #0]
 801d436:	b10b      	cbz	r3, 801d43c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d438:	781b      	ldrb	r3, [r3, #0]
 801d43a:	e7c5      	b.n	801d3c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801d43c:	2200      	movs	r2, #0
 801d43e:	240a      	movs	r4, #10
 801d440:	602a      	str	r2, [r5, #0]
 801d442:	3b30      	subs	r3, #48	; 0x30
 801d444:	682a      	ldr	r2, [r5, #0]
 801d446:	b29e      	uxth	r6, r3
 801d448:	2e09      	cmp	r6, #9
 801d44a:	d813      	bhi.n	801d474 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801d44c:	fb04 3302 	mla	r3, r4, r2, r3
 801d450:	602b      	str	r3, [r5, #0]
 801d452:	6803      	ldr	r3, [r0, #0]
 801d454:	b10b      	cbz	r3, 801d45a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801d456:	3302      	adds	r3, #2
 801d458:	6003      	str	r3, [r0, #0]
 801d45a:	680b      	ldr	r3, [r1, #0]
 801d45c:	b10b      	cbz	r3, 801d462 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801d45e:	3301      	adds	r3, #1
 801d460:	600b      	str	r3, [r1, #0]
 801d462:	6803      	ldr	r3, [r0, #0]
 801d464:	b10b      	cbz	r3, 801d46a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801d466:	881b      	ldrh	r3, [r3, #0]
 801d468:	e7eb      	b.n	801d442 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d46a:	680b      	ldr	r3, [r1, #0]
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	d0e8      	beq.n	801d442 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d470:	781b      	ldrb	r3, [r3, #0]
 801d472:	e7e6      	b.n	801d442 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d474:	2a06      	cmp	r2, #6
 801d476:	bfa8      	it	ge
 801d478:	2206      	movge	r2, #6
 801d47a:	602a      	str	r2, [r5, #0]
 801d47c:	e7b1      	b.n	801d3e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801d47e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801d47e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d482:	b0a3      	sub	sp, #140	; 0x8c
 801d484:	2600      	movs	r6, #0
 801d486:	4607      	mov	r7, r0
 801d488:	4688      	mov	r8, r1
 801d48a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801d48e:	4631      	mov	r1, r6
 801d490:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801d492:	4648      	mov	r0, r9
 801d494:	960d      	str	r6, [sp, #52]	; 0x34
 801d496:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d49a:	2242      	movs	r2, #66	; 0x42
 801d49c:	f7fe fc6e 	bl	801bd7c <_ZN8touchgfx6memsetEPvhm>
 801d4a0:	b15f      	cbz	r7, 801d4ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801d4a2:	f108 3aff 	add.w	sl, r8, #4294967295
 801d4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d4a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d4aa:	b152      	cbz	r2, 801d4c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801d4ac:	8812      	ldrh	r2, [r2, #0]
 801d4ae:	b10a      	cbz	r2, 801d4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d4b0:	459a      	cmp	sl, r3
 801d4b2:	dc2e      	bgt.n	801d512 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d4ba:	4638      	mov	r0, r7
 801d4bc:	b023      	add	sp, #140	; 0x8c
 801d4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4c2:	9a08      	ldr	r2, [sp, #32]
 801d4c4:	2a00      	cmp	r2, #0
 801d4c6:	d0f5      	beq.n	801d4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d4c8:	7812      	ldrb	r2, [r2, #0]
 801d4ca:	e7f0      	b.n	801d4ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801d4cc:	2d00      	cmp	r5, #0
 801d4ce:	d0ea      	beq.n	801d4a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d4d0:	782a      	ldrb	r2, [r5, #0]
 801d4d2:	b142      	cbz	r2, 801d4e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801d4d4:	2a25      	cmp	r2, #37	; 0x25
 801d4d6:	d001      	beq.n	801d4dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801d4d8:	459a      	cmp	sl, r3
 801d4da:	dc08      	bgt.n	801d4ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801d4dc:	f1bb 0f00 	cmp.w	fp, #0
 801d4e0:	d121      	bne.n	801d526 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801d4e2:	2d00      	cmp	r5, #0
 801d4e4:	d0df      	beq.n	801d4a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d4e6:	782a      	ldrb	r2, [r5, #0]
 801d4e8:	f04f 0b00 	mov.w	fp, #0
 801d4ec:	e01d      	b.n	801d52a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801d4ee:	f1bb 0f00 	cmp.w	fp, #0
 801d4f2:	d077      	beq.n	801d5e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801d4f4:	f8bb 2000 	ldrh.w	r2, [fp]
 801d4f8:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d4fc:	f1bb 0f00 	cmp.w	fp, #0
 801d500:	d002      	beq.n	801d508 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801d502:	f10b 0202 	add.w	r2, fp, #2
 801d506:	9209      	str	r2, [sp, #36]	; 0x24
 801d508:	b10d      	cbz	r5, 801d50e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801d50a:	3501      	adds	r5, #1
 801d50c:	9508      	str	r5, [sp, #32]
 801d50e:	3301      	adds	r3, #1
 801d510:	930d      	str	r3, [sp, #52]	; 0x34
 801d512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d514:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801d518:	f1bb 0f00 	cmp.w	fp, #0
 801d51c:	d0d6      	beq.n	801d4cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801d51e:	f8bb 2000 	ldrh.w	r2, [fp]
 801d522:	2a00      	cmp	r2, #0
 801d524:	d1d6      	bne.n	801d4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801d526:	f8bb 2000 	ldrh.w	r2, [fp]
 801d52a:	2a00      	cmp	r2, #0
 801d52c:	d0bb      	beq.n	801d4a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d52e:	459a      	cmp	sl, r3
 801d530:	ddb9      	ble.n	801d4a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d532:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801d536:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801d53a:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801d53e:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801d542:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801d546:	960e      	str	r6, [sp, #56]	; 0x38
 801d548:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801d54c:	960f      	str	r6, [sp, #60]	; 0x3c
 801d54e:	f1bb 0f00 	cmp.w	fp, #0
 801d552:	d002      	beq.n	801d55a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801d554:	f10b 0302 	add.w	r3, fp, #2
 801d558:	9309      	str	r3, [sp, #36]	; 0x24
 801d55a:	b10d      	cbz	r5, 801d560 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801d55c:	1c6b      	adds	r3, r5, #1
 801d55e:	9308      	str	r3, [sp, #32]
 801d560:	ab0f      	add	r3, sp, #60	; 0x3c
 801d562:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801d566:	a908      	add	r1, sp, #32
 801d568:	a809      	add	r0, sp, #36	; 0x24
 801d56a:	9305      	str	r3, [sp, #20]
 801d56c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801d570:	9304      	str	r3, [sp, #16]
 801d572:	ab0e      	add	r3, sp, #56	; 0x38
 801d574:	9303      	str	r3, [sp, #12]
 801d576:	ab0c      	add	r3, sp, #48	; 0x30
 801d578:	9302      	str	r3, [sp, #8]
 801d57a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801d57e:	9301      	str	r3, [sp, #4]
 801d580:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801d584:	9300      	str	r3, [sp, #0]
 801d586:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801d58a:	f7ff fea8 	bl	801d2de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801d58e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d590:	2b00      	cmp	r3, #0
 801d592:	bfbf      	itttt	lt
 801d594:	6823      	ldrlt	r3, [r4, #0]
 801d596:	3404      	addlt	r4, #4
 801d598:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d59c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d59e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	bfbe      	ittt	lt
 801d5a4:	6823      	ldrlt	r3, [r4, #0]
 801d5a6:	3404      	addlt	r4, #4
 801d5a8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d5ac:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d5b0:	bfb8      	it	lt
 801d5b2:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801d5b4:	b1d9      	cbz	r1, 801d5ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801d5b6:	880b      	ldrh	r3, [r1, #0]
 801d5b8:	2b69      	cmp	r3, #105	; 0x69
 801d5ba:	d01f      	beq.n	801d5fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d5bc:	d82f      	bhi.n	801d61e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801d5be:	2b58      	cmp	r3, #88	; 0x58
 801d5c0:	d01c      	beq.n	801d5fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d5c2:	d818      	bhi.n	801d5f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801d5c4:	2b25      	cmp	r3, #37	; 0x25
 801d5c6:	d034      	beq.n	801d632 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801d5c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d5ca:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801d5ce:	f1bb 0f00 	cmp.w	fp, #0
 801d5d2:	f000 80b7 	beq.w	801d744 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801d5d6:	f8bb 5000 	ldrh.w	r5, [fp]
 801d5da:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801d5de:	3301      	adds	r3, #1
 801d5e0:	930d      	str	r3, [sp, #52]	; 0x34
 801d5e2:	e029      	b.n	801d638 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d5e4:	b10d      	cbz	r5, 801d5ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801d5e6:	782a      	ldrb	r2, [r5, #0]
 801d5e8:	e786      	b.n	801d4f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d5ea:	462a      	mov	r2, r5
 801d5ec:	e784      	b.n	801d4f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d5ee:	2a00      	cmp	r2, #0
 801d5f0:	d0ea      	beq.n	801d5c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d5f2:	7813      	ldrb	r3, [r2, #0]
 801d5f4:	e7e0      	b.n	801d5b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801d5f6:	3b63      	subs	r3, #99	; 0x63
 801d5f8:	2b01      	cmp	r3, #1
 801d5fa:	d8e5      	bhi.n	801d5c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d5fc:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801d600:	b329      	cbz	r1, 801d64e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801d602:	880b      	ldrh	r3, [r1, #0]
 801d604:	2b69      	cmp	r3, #105	; 0x69
 801d606:	d063      	beq.n	801d6d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d608:	d825      	bhi.n	801d656 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801d60a:	2b63      	cmp	r3, #99	; 0x63
 801d60c:	d038      	beq.n	801d680 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801d60e:	2b64      	cmp	r3, #100	; 0x64
 801d610:	d05e      	beq.n	801d6d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d612:	2b58      	cmp	r3, #88	; 0x58
 801d614:	d07a      	beq.n	801d70c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801d616:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801d61a:	4625      	mov	r5, r4
 801d61c:	e036      	b.n	801d68c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d61e:	2b73      	cmp	r3, #115	; 0x73
 801d620:	d0ec      	beq.n	801d5fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d622:	d802      	bhi.n	801d62a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801d624:	2b6f      	cmp	r3, #111	; 0x6f
 801d626:	d1cf      	bne.n	801d5c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d628:	e7e8      	b.n	801d5fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d62a:	2b75      	cmp	r3, #117	; 0x75
 801d62c:	d0e6      	beq.n	801d5fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d62e:	2b78      	cmp	r3, #120	; 0x78
 801d630:	e7f9      	b.n	801d626 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801d632:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d634:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801d638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d63a:	b10b      	cbz	r3, 801d640 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801d63c:	3302      	adds	r3, #2
 801d63e:	9309      	str	r3, [sp, #36]	; 0x24
 801d640:	9b08      	ldr	r3, [sp, #32]
 801d642:	2b00      	cmp	r3, #0
 801d644:	f43f af2f 	beq.w	801d4a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d648:	3301      	adds	r3, #1
 801d64a:	9308      	str	r3, [sp, #32]
 801d64c:	e72b      	b.n	801d4a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d64e:	2a00      	cmp	r2, #0
 801d650:	d0e1      	beq.n	801d616 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d652:	7813      	ldrb	r3, [r2, #0]
 801d654:	e7d6      	b.n	801d604 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801d656:	2b73      	cmp	r3, #115	; 0x73
 801d658:	d036      	beq.n	801d6c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801d65a:	d807      	bhi.n	801d66c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801d65c:	2b6f      	cmp	r3, #111	; 0x6f
 801d65e:	d1da      	bne.n	801d616 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d662:	1d25      	adds	r5, r4, #4
 801d664:	2308      	movs	r3, #8
 801d666:	eba8 0202 	sub.w	r2, r8, r2
 801d66a:	e049      	b.n	801d700 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d66c:	2b75      	cmp	r3, #117	; 0x75
 801d66e:	d042      	beq.n	801d6f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801d670:	2b78      	cmp	r3, #120	; 0x78
 801d672:	d1d0      	bne.n	801d616 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d676:	1d25      	adds	r5, r4, #4
 801d678:	2310      	movs	r3, #16
 801d67a:	eba8 0202 	sub.w	r2, r8, r2
 801d67e:	e03f      	b.n	801d700 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d680:	7823      	ldrb	r3, [r4, #0]
 801d682:	1d25      	adds	r5, r4, #4
 801d684:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801d688:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d68e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801d692:	2b00      	cmp	r3, #0
 801d694:	d051      	beq.n	801d73a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801d696:	881a      	ldrh	r2, [r3, #0]
 801d698:	a80d      	add	r0, sp, #52	; 0x34
 801d69a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801d69e:	462c      	mov	r4, r5
 801d6a0:	9005      	str	r0, [sp, #20]
 801d6a2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801d6a6:	9004      	str	r0, [sp, #16]
 801d6a8:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d6aa:	9003      	str	r0, [sp, #12]
 801d6ac:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801d6b0:	9002      	str	r0, [sp, #8]
 801d6b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d6b4:	9001      	str	r0, [sp, #4]
 801d6b6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801d6ba:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801d6be:	9000      	str	r0, [sp, #0]
 801d6c0:	a810      	add	r0, sp, #64	; 0x40
 801d6c2:	f7ff fd49 	bl	801d158 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801d6c6:	e7b7      	b.n	801d638 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d6c8:	1d25      	adds	r5, r4, #4
 801d6ca:	6823      	ldr	r3, [r4, #0]
 801d6cc:	9310      	str	r3, [sp, #64]	; 0x40
 801d6ce:	e7dd      	b.n	801d68c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d6d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d6d2:	230a      	movs	r3, #10
 801d6d4:	4649      	mov	r1, r9
 801d6d6:	6820      	ldr	r0, [r4, #0]
 801d6d8:	eba8 0202 	sub.w	r2, r8, r2
 801d6dc:	1d25      	adds	r5, r4, #4
 801d6de:	b292      	uxth	r2, r2
 801d6e0:	f7ff fd08 	bl	801d0f4 <_ZN8touchgfx7Unicode4itoaElPtti>
 801d6e4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801d6e8:	2b2d      	cmp	r3, #45	; 0x2d
 801d6ea:	d1cf      	bne.n	801d68c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d6ec:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d6f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d6f2:	3302      	adds	r3, #2
 801d6f4:	e7ea      	b.n	801d6cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801d6f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d6f8:	1d25      	adds	r5, r4, #4
 801d6fa:	230a      	movs	r3, #10
 801d6fc:	eba8 0202 	sub.w	r2, r8, r2
 801d700:	b292      	uxth	r2, r2
 801d702:	4649      	mov	r1, r9
 801d704:	6820      	ldr	r0, [r4, #0]
 801d706:	f7ff fcd7 	bl	801d0b8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d70a:	e7bf      	b.n	801d68c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d70c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d70e:	2310      	movs	r3, #16
 801d710:	4649      	mov	r1, r9
 801d712:	6820      	ldr	r0, [r4, #0]
 801d714:	eba8 0202 	sub.w	r2, r8, r2
 801d718:	1d25      	adds	r5, r4, #4
 801d71a:	b292      	uxth	r2, r2
 801d71c:	f7ff fccc 	bl	801d0b8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d720:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801d724:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d0af      	beq.n	801d68c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d72c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801d730:	2919      	cmp	r1, #25
 801d732:	d8f7      	bhi.n	801d724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801d734:	3b20      	subs	r3, #32
 801d736:	8013      	strh	r3, [r2, #0]
 801d738:	e7f4      	b.n	801d724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801d73a:	9a08      	ldr	r2, [sp, #32]
 801d73c:	2a00      	cmp	r2, #0
 801d73e:	d0ab      	beq.n	801d698 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801d740:	7812      	ldrb	r2, [r2, #0]
 801d742:	e7a9      	b.n	801d698 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801d744:	2d00      	cmp	r5, #0
 801d746:	f43f af48 	beq.w	801d5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801d74a:	782d      	ldrb	r5, [r5, #0]
 801d74c:	e745      	b.n	801d5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801d74e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801d74e:	b507      	push	{r0, r1, r2, lr}
 801d750:	9300      	str	r3, [sp, #0]
 801d752:	4613      	mov	r3, r2
 801d754:	2200      	movs	r2, #0
 801d756:	f7ff fe92 	bl	801d47e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801d75a:	b003      	add	sp, #12
 801d75c:	f85d fb04 	ldr.w	pc, [sp], #4

0801d760 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801d760:	b40c      	push	{r2, r3}
 801d762:	b507      	push	{r0, r1, r2, lr}
 801d764:	ab04      	add	r3, sp, #16
 801d766:	f853 2b04 	ldr.w	r2, [r3], #4
 801d76a:	9301      	str	r3, [sp, #4]
 801d76c:	f7ff ffef 	bl	801d74e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801d770:	b003      	add	sp, #12
 801d772:	f85d eb04 	ldr.w	lr, [sp], #4
 801d776:	b002      	add	sp, #8
 801d778:	4770      	bx	lr
	...

0801d77c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801d77c:	4b01      	ldr	r3, [pc, #4]	; (801d784 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801d77e:	6018      	str	r0, [r3, #0]
 801d780:	4770      	bx	lr
 801d782:	bf00      	nop
 801d784:	2000b3b4 	.word	0x2000b3b4

0801d788 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801d788:	4b07      	ldr	r3, [pc, #28]	; (801d7a8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801d78a:	881a      	ldrh	r2, [r3, #0]
 801d78c:	4282      	cmp	r2, r0
 801d78e:	d809      	bhi.n	801d7a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801d790:	4b06      	ldr	r3, [pc, #24]	; (801d7ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801d792:	881b      	ldrh	r3, [r3, #0]
 801d794:	4413      	add	r3, r2
 801d796:	4298      	cmp	r0, r3
 801d798:	da04      	bge.n	801d7a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801d79a:	4b05      	ldr	r3, [pc, #20]	; (801d7b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801d7a2:	4770      	bx	lr
 801d7a4:	2000      	movs	r0, #0
 801d7a6:	4770      	bx	lr
 801d7a8:	2000b3d4 	.word	0x2000b3d4
 801d7ac:	2000b3d8 	.word	0x2000b3d8
 801d7b0:	2000b3b8 	.word	0x2000b3b8

0801d7b4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801d7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7b8:	4d28      	ldr	r5, [pc, #160]	; (801d85c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801d7ba:	682b      	ldr	r3, [r5, #0]
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d04a      	beq.n	801d856 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801d7c0:	4a27      	ldr	r2, [pc, #156]	; (801d860 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801d7c2:	4e28      	ldr	r6, [pc, #160]	; (801d864 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801d7c4:	8810      	ldrh	r0, [r2, #0]
 801d7c6:	f8b6 8000 	ldrh.w	r8, [r6]
 801d7ca:	4c27      	ldr	r4, [pc, #156]	; (801d868 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801d7cc:	4440      	add	r0, r8
 801d7ce:	4f27      	ldr	r7, [pc, #156]	; (801d86c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801d7d0:	1c41      	adds	r1, r0, #1
 801d7d2:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801d7d6:	f021 0101 	bic.w	r1, r1, #1
 801d7da:	eb03 020e 	add.w	r2, r3, lr
 801d7de:	0409      	lsls	r1, r1, #16
 801d7e0:	6022      	str	r2, [r4, #0]
 801d7e2:	0c09      	lsrs	r1, r1, #16
 801d7e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801d7e8:	eb0e 010c 	add.w	r1, lr, ip
 801d7ec:	185a      	adds	r2, r3, r1
 801d7ee:	603a      	str	r2, [r7, #0]
 801d7f0:	220e      	movs	r2, #14
 801d7f2:	fb02 f208 	mul.w	r2, r2, r8
 801d7f6:	3203      	adds	r2, #3
 801d7f8:	f022 0203 	bic.w	r2, r2, #3
 801d7fc:	4411      	add	r1, r2
 801d7fe:	440b      	add	r3, r1
 801d800:	491b      	ldr	r1, [pc, #108]	; (801d870 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801d802:	600b      	str	r3, [r1, #0]
 801d804:	2300      	movs	r3, #0
 801d806:	491b      	ldr	r1, [pc, #108]	; (801d874 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801d808:	800b      	strh	r3, [r1, #0]
 801d80a:	491b      	ldr	r1, [pc, #108]	; (801d878 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801d80c:	6809      	ldr	r1, [r1, #0]
 801d80e:	eba1 010e 	sub.w	r1, r1, lr
 801d812:	eba1 010c 	sub.w	r1, r1, ip
 801d816:	469c      	mov	ip, r3
 801d818:	1a8a      	subs	r2, r1, r2
 801d81a:	4918      	ldr	r1, [pc, #96]	; (801d87c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801d81c:	600a      	str	r2, [r1, #0]
 801d81e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d822:	4a17      	ldr	r2, [pc, #92]	; (801d880 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801d824:	8013      	strh	r3, [r2, #0]
 801d826:	4283      	cmp	r3, r0
 801d828:	d10d      	bne.n	801d846 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801d82a:	8835      	ldrh	r5, [r6, #0]
 801d82c:	2300      	movs	r3, #0
 801d82e:	6838      	ldr	r0, [r7, #0]
 801d830:	240e      	movs	r4, #14
 801d832:	429d      	cmp	r5, r3
 801d834:	d90f      	bls.n	801d856 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801d836:	fb04 0203 	mla	r2, r4, r3, r0
 801d83a:	3301      	adds	r3, #1
 801d83c:	7b11      	ldrb	r1, [r2, #12]
 801d83e:	f36f 1145 	bfc	r1, #5, #1
 801d842:	7311      	strb	r1, [r2, #12]
 801d844:	e7f5      	b.n	801d832 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801d846:	682a      	ldr	r2, [r5, #0]
 801d848:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801d84c:	6822      	ldr	r2, [r4, #0]
 801d84e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801d852:	3301      	adds	r3, #1
 801d854:	e7e7      	b.n	801d826 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801d856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d85a:	bf00      	nop
 801d85c:	2000b3b8 	.word	0x2000b3b8
 801d860:	2000b3d4 	.word	0x2000b3d4
 801d864:	2000b3d8 	.word	0x2000b3d8
 801d868:	2000b3cc 	.word	0x2000b3cc
 801d86c:	2000b3bc 	.word	0x2000b3bc
 801d870:	2000b3c4 	.word	0x2000b3c4
 801d874:	2000b3d6 	.word	0x2000b3d6
 801d878:	2000b3c0 	.word	0x2000b3c0
 801d87c:	2000b3d0 	.word	0x2000b3d0
 801d880:	2000b3c8 	.word	0x2000b3c8

0801d884 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801d884:	4b10      	ldr	r3, [pc, #64]	; (801d8c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801d886:	b510      	push	{r4, lr}
 801d888:	681b      	ldr	r3, [r3, #0]
 801d88a:	b9db      	cbnz	r3, 801d8c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801d88c:	b1d1      	cbz	r1, 801d8c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801d88e:	4b0f      	ldr	r3, [pc, #60]	; (801d8cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801d890:	240e      	movs	r4, #14
 801d892:	801a      	strh	r2, [r3, #0]
 801d894:	b292      	uxth	r2, r2
 801d896:	4b0e      	ldr	r3, [pc, #56]	; (801d8d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801d898:	881b      	ldrh	r3, [r3, #0]
 801d89a:	4413      	add	r3, r2
 801d89c:	4362      	muls	r2, r4
 801d89e:	2406      	movs	r4, #6
 801d8a0:	fb04 2203 	mla	r2, r4, r3, r2
 801d8a4:	428a      	cmp	r2, r1
 801d8a6:	d305      	bcc.n	801d8b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801d8a8:	4b0a      	ldr	r3, [pc, #40]	; (801d8d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801d8aa:	2137      	movs	r1, #55	; 0x37
 801d8ac:	4a0a      	ldr	r2, [pc, #40]	; (801d8d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801d8ae:	480b      	ldr	r0, [pc, #44]	; (801d8dc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801d8b0:	f009 fe7c 	bl	80275ac <__assert_func>
 801d8b4:	4b0a      	ldr	r3, [pc, #40]	; (801d8e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801d8b6:	6019      	str	r1, [r3, #0]
 801d8b8:	4b0a      	ldr	r3, [pc, #40]	; (801d8e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801d8ba:	6018      	str	r0, [r3, #0]
 801d8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d8c0:	f7ff bf78 	b.w	801d7b4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801d8c4:	bd10      	pop	{r4, pc}
 801d8c6:	bf00      	nop
 801d8c8:	2000b3c4 	.word	0x2000b3c4
 801d8cc:	2000b3d8 	.word	0x2000b3d8
 801d8d0:	2000b3d4 	.word	0x2000b3d4
 801d8d4:	0802c1ed 	.word	0x0802c1ed
 801d8d8:	0802c246 	.word	0x0802c246
 801d8dc:	0802c1c8 	.word	0x0802c1c8
 801d8e0:	2000b3c0 	.word	0x2000b3c0
 801d8e4:	2000b3b8 	.word	0x2000b3b8

0801d8e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801d8e8:	b470      	push	{r4, r5, r6}
 801d8ea:	4c07      	ldr	r4, [pc, #28]	; (801d908 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801d8ec:	4605      	mov	r5, r0
 801d8ee:	4610      	mov	r0, r2
 801d8f0:	9a03      	ldr	r2, [sp, #12]
 801d8f2:	6826      	ldr	r6, [r4, #0]
 801d8f4:	b936      	cbnz	r6, 801d904 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801d8f6:	6025      	str	r5, [r4, #0]
 801d8f8:	4c04      	ldr	r4, [pc, #16]	; (801d90c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801d8fa:	8021      	strh	r1, [r4, #0]
 801d8fc:	4619      	mov	r1, r3
 801d8fe:	bc70      	pop	{r4, r5, r6}
 801d900:	f7ff bfc0 	b.w	801d884 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801d904:	bc70      	pop	{r4, r5, r6}
 801d906:	4770      	bx	lr
 801d908:	2000b3dc 	.word	0x2000b3dc
 801d90c:	2000b3d4 	.word	0x2000b3d4

0801d910 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801d910:	b508      	push	{r3, lr}
 801d912:	4b14      	ldr	r3, [pc, #80]	; (801d964 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801d914:	6819      	ldr	r1, [r3, #0]
 801d916:	b931      	cbnz	r1, 801d926 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801d918:	4b13      	ldr	r3, [pc, #76]	; (801d968 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801d91a:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 801d91e:	4a13      	ldr	r2, [pc, #76]	; (801d96c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801d920:	4813      	ldr	r0, [pc, #76]	; (801d970 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801d922:	f009 fe43 	bl	80275ac <__assert_func>
 801d926:	4a13      	ldr	r2, [pc, #76]	; (801d974 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801d928:	8803      	ldrh	r3, [r0, #0]
 801d92a:	8812      	ldrh	r2, [r2, #0]
 801d92c:	4293      	cmp	r3, r2
 801d92e:	d204      	bcs.n	801d93a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801d930:	2214      	movs	r2, #20
 801d932:	fb02 1303 	mla	r3, r2, r3, r1
 801d936:	8918      	ldrh	r0, [r3, #8]
 801d938:	bd08      	pop	{r3, pc}
 801d93a:	490f      	ldr	r1, [pc, #60]	; (801d978 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801d93c:	8809      	ldrh	r1, [r1, #0]
 801d93e:	4411      	add	r1, r2
 801d940:	428b      	cmp	r3, r1
 801d942:	da06      	bge.n	801d952 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801d944:	1a9b      	subs	r3, r3, r2
 801d946:	4a0d      	ldr	r2, [pc, #52]	; (801d97c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801d948:	210e      	movs	r1, #14
 801d94a:	6812      	ldr	r2, [r2, #0]
 801d94c:	fb01 2303 	mla	r3, r1, r3, r2
 801d950:	e7f1      	b.n	801d936 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801d952:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d956:	4293      	cmp	r3, r2
 801d958:	bf0a      	itet	eq
 801d95a:	4b09      	ldreq	r3, [pc, #36]	; (801d980 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801d95c:	2000      	movne	r0, #0
 801d95e:	8818      	ldrheq	r0, [r3, #0]
 801d960:	e7ea      	b.n	801d938 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801d962:	bf00      	nop
 801d964:	2000b3dc 	.word	0x2000b3dc
 801d968:	0802b4c0 	.word	0x0802b4c0
 801d96c:	0802c2f3 	.word	0x0802c2f3
 801d970:	0802c1c8 	.word	0x0802c1c8
 801d974:	2000b3d4 	.word	0x2000b3d4
 801d978:	2000b3d8 	.word	0x2000b3d8
 801d97c:	2000b3bc 	.word	0x2000b3bc
 801d980:	2000b308 	.word	0x2000b308

0801d984 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801d984:	b508      	push	{r3, lr}
 801d986:	4b14      	ldr	r3, [pc, #80]	; (801d9d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801d988:	6819      	ldr	r1, [r3, #0]
 801d98a:	b931      	cbnz	r1, 801d99a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801d98c:	4b13      	ldr	r3, [pc, #76]	; (801d9dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801d98e:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801d992:	4a13      	ldr	r2, [pc, #76]	; (801d9e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801d994:	4813      	ldr	r0, [pc, #76]	; (801d9e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801d996:	f009 fe09 	bl	80275ac <__assert_func>
 801d99a:	4a13      	ldr	r2, [pc, #76]	; (801d9e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801d99c:	8803      	ldrh	r3, [r0, #0]
 801d99e:	8812      	ldrh	r2, [r2, #0]
 801d9a0:	4293      	cmp	r3, r2
 801d9a2:	d204      	bcs.n	801d9ae <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801d9a4:	2214      	movs	r2, #20
 801d9a6:	fb02 1303 	mla	r3, r2, r3, r1
 801d9aa:	8958      	ldrh	r0, [r3, #10]
 801d9ac:	bd08      	pop	{r3, pc}
 801d9ae:	490f      	ldr	r1, [pc, #60]	; (801d9ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801d9b0:	8809      	ldrh	r1, [r1, #0]
 801d9b2:	4411      	add	r1, r2
 801d9b4:	428b      	cmp	r3, r1
 801d9b6:	da06      	bge.n	801d9c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801d9b8:	1a9b      	subs	r3, r3, r2
 801d9ba:	4a0d      	ldr	r2, [pc, #52]	; (801d9f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801d9bc:	210e      	movs	r1, #14
 801d9be:	6812      	ldr	r2, [r2, #0]
 801d9c0:	fb01 2303 	mla	r3, r1, r3, r2
 801d9c4:	e7f1      	b.n	801d9aa <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801d9c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d9ca:	4293      	cmp	r3, r2
 801d9cc:	bf0a      	itet	eq
 801d9ce:	4b09      	ldreq	r3, [pc, #36]	; (801d9f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801d9d0:	2000      	movne	r0, #0
 801d9d2:	8818      	ldrheq	r0, [r3, #0]
 801d9d4:	e7ea      	b.n	801d9ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801d9d6:	bf00      	nop
 801d9d8:	2000b3dc 	.word	0x2000b3dc
 801d9dc:	0802b4c0 	.word	0x0802b4c0
 801d9e0:	0802c31f 	.word	0x0802c31f
 801d9e4:	0802c1c8 	.word	0x0802c1c8
 801d9e8:	2000b3d4 	.word	0x2000b3d4
 801d9ec:	2000b3d8 	.word	0x2000b3d8
 801d9f0:	2000b3bc 	.word	0x2000b3bc
 801d9f4:	2000b30a 	.word	0x2000b30a

0801d9f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801d9f8:	4b23      	ldr	r3, [pc, #140]	; (801da88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801d9fa:	b510      	push	{r4, lr}
 801d9fc:	681c      	ldr	r4, [r3, #0]
 801d9fe:	b934      	cbnz	r4, 801da0e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801da00:	4b22      	ldr	r3, [pc, #136]	; (801da8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801da02:	f44f 7148 	mov.w	r1, #800	; 0x320
 801da06:	4a22      	ldr	r2, [pc, #136]	; (801da90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801da08:	4822      	ldr	r0, [pc, #136]	; (801da94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801da0a:	f009 fdcf 	bl	80275ac <__assert_func>
 801da0e:	4a22      	ldr	r2, [pc, #136]	; (801da98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801da10:	880b      	ldrh	r3, [r1, #0]
 801da12:	8812      	ldrh	r2, [r2, #0]
 801da14:	4293      	cmp	r3, r2
 801da16:	d211      	bcs.n	801da3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801da18:	2214      	movs	r2, #20
 801da1a:	fb02 4303 	mla	r3, r2, r3, r4
 801da1e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801da22:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801da26:	8a1a      	ldrh	r2, [r3, #16]
 801da28:	8a5b      	ldrh	r3, [r3, #18]
 801da2a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801da2e:	8004      	strh	r4, [r0, #0]
 801da30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801da34:	8041      	strh	r1, [r0, #2]
 801da36:	8082      	strh	r2, [r0, #4]
 801da38:	80c3      	strh	r3, [r0, #6]
 801da3a:	e00e      	b.n	801da5a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801da3c:	4917      	ldr	r1, [pc, #92]	; (801da9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801da3e:	8809      	ldrh	r1, [r1, #0]
 801da40:	4411      	add	r1, r2
 801da42:	428b      	cmp	r3, r1
 801da44:	da0a      	bge.n	801da5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801da46:	1a9b      	subs	r3, r3, r2
 801da48:	4a15      	ldr	r2, [pc, #84]	; (801daa0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801da4a:	210e      	movs	r1, #14
 801da4c:	6812      	ldr	r2, [r2, #0]
 801da4e:	fb01 2303 	mla	r3, r1, r3, r2
 801da52:	681a      	ldr	r2, [r3, #0]
 801da54:	6002      	str	r2, [r0, #0]
 801da56:	685a      	ldr	r2, [r3, #4]
 801da58:	6042      	str	r2, [r0, #4]
 801da5a:	bd10      	pop	{r4, pc}
 801da5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801da60:	4293      	cmp	r3, r2
 801da62:	d10b      	bne.n	801da7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801da64:	4b0f      	ldr	r3, [pc, #60]	; (801daa4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801da66:	f9b3 1000 	ldrsh.w	r1, [r3]
 801da6a:	4b0f      	ldr	r3, [pc, #60]	; (801daa8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801da6c:	8081      	strh	r1, [r0, #4]
 801da6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801da72:	2300      	movs	r3, #0
 801da74:	80c2      	strh	r2, [r0, #6]
 801da76:	8003      	strh	r3, [r0, #0]
 801da78:	8043      	strh	r3, [r0, #2]
 801da7a:	e7ee      	b.n	801da5a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801da7c:	2300      	movs	r3, #0
 801da7e:	8003      	strh	r3, [r0, #0]
 801da80:	8043      	strh	r3, [r0, #2]
 801da82:	8083      	strh	r3, [r0, #4]
 801da84:	e7d8      	b.n	801da38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801da86:	bf00      	nop
 801da88:	2000b3dc 	.word	0x2000b3dc
 801da8c:	0802b4c0 	.word	0x0802b4c0
 801da90:	0802c28c 	.word	0x0802c28c
 801da94:	0802c1c8 	.word	0x0802c1c8
 801da98:	2000b3d4 	.word	0x2000b3d4
 801da9c:	2000b3d8 	.word	0x2000b3d8
 801daa0:	2000b3bc 	.word	0x2000b3bc
 801daa4:	2000b308 	.word	0x2000b308
 801daa8:	2000b30a 	.word	0x2000b30a

0801daac <_ZNK8touchgfx6Bitmap7getDataEv>:
 801daac:	b508      	push	{r3, lr}
 801daae:	4b12      	ldr	r3, [pc, #72]	; (801daf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801dab0:	6819      	ldr	r1, [r3, #0]
 801dab2:	b931      	cbnz	r1, 801dac2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801dab4:	4b11      	ldr	r3, [pc, #68]	; (801dafc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801dab6:	f44f 7151 	mov.w	r1, #836	; 0x344
 801daba:	4a11      	ldr	r2, [pc, #68]	; (801db00 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801dabc:	4811      	ldr	r0, [pc, #68]	; (801db04 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801dabe:	f009 fd75 	bl	80275ac <__assert_func>
 801dac2:	8803      	ldrh	r3, [r0, #0]
 801dac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dac8:	4293      	cmp	r3, r2
 801daca:	d012      	beq.n	801daf2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801dacc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dad0:	4293      	cmp	r3, r2
 801dad2:	d103      	bne.n	801dadc <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801dad4:	4b0c      	ldr	r3, [pc, #48]	; (801db08 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801dada:	bd08      	pop	{r3, pc}
 801dadc:	4a0b      	ldr	r2, [pc, #44]	; (801db0c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801dade:	6812      	ldr	r2, [r2, #0]
 801dae0:	b11a      	cbz	r2, 801daea <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801dae2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801dae6:	2800      	cmp	r0, #0
 801dae8:	d1f7      	bne.n	801dada <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801daea:	2214      	movs	r2, #20
 801daec:	4353      	muls	r3, r2
 801daee:	58c8      	ldr	r0, [r1, r3]
 801daf0:	e7f3      	b.n	801dada <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801daf2:	2000      	movs	r0, #0
 801daf4:	e7f1      	b.n	801dada <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801daf6:	bf00      	nop
 801daf8:	2000b3dc 	.word	0x2000b3dc
 801dafc:	0802b4c0 	.word	0x0802b4c0
 801db00:	0802c2c2 	.word	0x0802c2c2
 801db04:	0802c1c8 	.word	0x0802c1c8
 801db08:	2000b314 	.word	0x2000b314
 801db0c:	2000b3b8 	.word	0x2000b3b8

0801db10 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801db10:	8802      	ldrh	r2, [r0, #0]
 801db12:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801db16:	429a      	cmp	r2, r3
 801db18:	d840      	bhi.n	801db9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801db1a:	4b21      	ldr	r3, [pc, #132]	; (801dba0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801db1c:	881b      	ldrh	r3, [r3, #0]
 801db1e:	429a      	cmp	r2, r3
 801db20:	d220      	bcs.n	801db64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801db22:	4b20      	ldr	r3, [pc, #128]	; (801dba4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801db24:	6819      	ldr	r1, [r3, #0]
 801db26:	2314      	movs	r3, #20
 801db28:	fb03 1302 	mla	r3, r3, r2, r1
 801db2c:	6858      	ldr	r0, [r3, #4]
 801db2e:	2800      	cmp	r0, #0
 801db30:	d035      	beq.n	801db9e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801db32:	491d      	ldr	r1, [pc, #116]	; (801dba8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801db34:	6809      	ldr	r1, [r1, #0]
 801db36:	2900      	cmp	r1, #0
 801db38:	d031      	beq.n	801db9e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801db3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801db3e:	b371      	cbz	r1, 801db9e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801db40:	895a      	ldrh	r2, [r3, #10]
 801db42:	8918      	ldrh	r0, [r3, #8]
 801db44:	4350      	muls	r0, r2
 801db46:	7c5a      	ldrb	r2, [r3, #17]
 801db48:	7cdb      	ldrb	r3, [r3, #19]
 801db4a:	0952      	lsrs	r2, r2, #5
 801db4c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801db50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801db54:	2b0b      	cmp	r3, #11
 801db56:	bf18      	it	ne
 801db58:	0040      	lslne	r0, r0, #1
 801db5a:	3003      	adds	r0, #3
 801db5c:	f020 0003 	bic.w	r0, r0, #3
 801db60:	4408      	add	r0, r1
 801db62:	4770      	bx	lr
 801db64:	4911      	ldr	r1, [pc, #68]	; (801dbac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801db66:	8809      	ldrh	r1, [r1, #0]
 801db68:	4419      	add	r1, r3
 801db6a:	428a      	cmp	r2, r1
 801db6c:	da16      	bge.n	801db9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801db6e:	4910      	ldr	r1, [pc, #64]	; (801dbb0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801db70:	1ad3      	subs	r3, r2, r3
 801db72:	200e      	movs	r0, #14
 801db74:	6809      	ldr	r1, [r1, #0]
 801db76:	fb00 1303 	mla	r3, r0, r3, r1
 801db7a:	7b19      	ldrb	r1, [r3, #12]
 801db7c:	f001 011f 	and.w	r1, r1, #31
 801db80:	290b      	cmp	r1, #11
 801db82:	d10b      	bne.n	801db9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801db84:	8919      	ldrh	r1, [r3, #8]
 801db86:	8958      	ldrh	r0, [r3, #10]
 801db88:	4b07      	ldr	r3, [pc, #28]	; (801dba8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801db8a:	4348      	muls	r0, r1
 801db8c:	6819      	ldr	r1, [r3, #0]
 801db8e:	3003      	adds	r0, #3
 801db90:	f020 0303 	bic.w	r3, r0, #3
 801db94:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801db98:	4418      	add	r0, r3
 801db9a:	4770      	bx	lr
 801db9c:	2000      	movs	r0, #0
 801db9e:	4770      	bx	lr
 801dba0:	2000b3d4 	.word	0x2000b3d4
 801dba4:	2000b3dc 	.word	0x2000b3dc
 801dba8:	2000b3b8 	.word	0x2000b3b8
 801dbac:	2000b3d8 	.word	0x2000b3d8
 801dbb0:	2000b3bc 	.word	0x2000b3bc

0801dbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801dbb4:	4b19      	ldr	r3, [pc, #100]	; (801dc1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801dbb6:	6819      	ldr	r1, [r3, #0]
 801dbb8:	8803      	ldrh	r3, [r0, #0]
 801dbba:	b1e9      	cbz	r1, 801dbf8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801dbbc:	4a18      	ldr	r2, [pc, #96]	; (801dc20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801dbbe:	8812      	ldrh	r2, [r2, #0]
 801dbc0:	429a      	cmp	r2, r3
 801dbc2:	d90a      	bls.n	801dbda <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801dbc4:	2214      	movs	r2, #20
 801dbc6:	fb02 1303 	mla	r3, r2, r3, r1
 801dbca:	7c58      	ldrb	r0, [r3, #17]
 801dbcc:	0942      	lsrs	r2, r0, #5
 801dbce:	7cd8      	ldrb	r0, [r3, #19]
 801dbd0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801dbd4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801dbd8:	4770      	bx	lr
 801dbda:	4912      	ldr	r1, [pc, #72]	; (801dc24 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801dbdc:	8809      	ldrh	r1, [r1, #0]
 801dbde:	4411      	add	r1, r2
 801dbe0:	428b      	cmp	r3, r1
 801dbe2:	da09      	bge.n	801dbf8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801dbe4:	1a9b      	subs	r3, r3, r2
 801dbe6:	4a10      	ldr	r2, [pc, #64]	; (801dc28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801dbe8:	210e      	movs	r1, #14
 801dbea:	6812      	ldr	r2, [r2, #0]
 801dbec:	fb01 2303 	mla	r3, r1, r3, r2
 801dbf0:	7b18      	ldrb	r0, [r3, #12]
 801dbf2:	f000 001f 	and.w	r0, r0, #31
 801dbf6:	4770      	bx	lr
 801dbf8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dbfc:	4293      	cmp	r3, r2
 801dbfe:	d10a      	bne.n	801dc16 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801dc00:	4b0a      	ldr	r3, [pc, #40]	; (801dc2c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801dc02:	681b      	ldr	r3, [r3, #0]
 801dc04:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801dc08:	b10a      	cbz	r2, 801dc0e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801dc0a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801dc0c:	b900      	cbnz	r0, 801dc10 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801dc0e:	6898      	ldr	r0, [r3, #8]
 801dc10:	6803      	ldr	r3, [r0, #0]
 801dc12:	6a1b      	ldr	r3, [r3, #32]
 801dc14:	4718      	bx	r3
 801dc16:	2000      	movs	r0, #0
 801dc18:	4770      	bx	lr
 801dc1a:	bf00      	nop
 801dc1c:	2000b3dc 	.word	0x2000b3dc
 801dc20:	2000b3d4 	.word	0x2000b3d4
 801dc24:	2000b3d8 	.word	0x2000b3d8
 801dc28:	2000b3bc 	.word	0x2000b3bc
 801dc2c:	2000b314 	.word	0x2000b314

0801dc30 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801dc30:	2018      	movs	r0, #24
 801dc32:	4770      	bx	lr

0801dc34 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801dc34:	2001      	movs	r0, #1
 801dc36:	4770      	bx	lr

0801dc38 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801dc38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801dc3c:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801dc40:	4770      	bx	lr

0801dc42 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801dc42:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801dc46:	4770      	bx	lr

0801dc48 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801dc48:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801dc4c:	4770      	bx	lr

0801dc4e <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801dc4e:	b2c8      	uxtb	r0, r1
 801dc50:	4770      	bx	lr

0801dc52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801dc52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc56:	b085      	sub	sp, #20
 801dc58:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801dc5a:	9203      	str	r2, [sp, #12]
 801dc5c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801dc60:	6878      	ldr	r0, [r7, #4]
 801dc62:	9201      	str	r2, [sp, #4]
 801dc64:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801dc66:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801dc6a:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801dc6e:	fa1f fc84 	uxth.w	ip, r4
 801dc72:	43e4      	mvns	r4, r4
 801dc74:	9100      	str	r1, [sp, #0]
 801dc76:	b2e4      	uxtb	r4, r4
 801dc78:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801dc7c:	fb00 2505 	mla	r5, r0, r5, r2
 801dc80:	683a      	ldr	r2, [r7, #0]
 801dc82:	6877      	ldr	r7, [r6, #4]
 801dc84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dc88:	3704      	adds	r7, #4
 801dc8a:	4415      	add	r5, r2
 801dc8c:	6832      	ldr	r2, [r6, #0]
 801dc8e:	9202      	str	r2, [sp, #8]
 801dc90:	9a00      	ldr	r2, [sp, #0]
 801dc92:	2a00      	cmp	r2, #0
 801dc94:	dc03      	bgt.n	801dc9e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801dc96:	9a03      	ldr	r2, [sp, #12]
 801dc98:	2a00      	cmp	r2, #0
 801dc9a:	f340 8116 	ble.w	801deca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801dc9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dca0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dca6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	dd0f      	ble.n	801dcce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801dcae:	1406      	asrs	r6, r0, #16
 801dcb0:	d406      	bmi.n	801dcc0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801dcb2:	4546      	cmp	r6, r8
 801dcb4:	da04      	bge.n	801dcc0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801dcb6:	1416      	asrs	r6, r2, #16
 801dcb8:	d402      	bmi.n	801dcc0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801dcba:	9901      	ldr	r1, [sp, #4]
 801dcbc:	428e      	cmp	r6, r1
 801dcbe:	db07      	blt.n	801dcd0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801dcc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 801dcc2:	3b01      	subs	r3, #1
 801dcc4:	3503      	adds	r5, #3
 801dcc6:	4408      	add	r0, r1
 801dcc8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dcca:	440a      	add	r2, r1
 801dccc:	e7ed      	b.n	801dcaa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801dcce:	d011      	beq.n	801dcf4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801dcd0:	1e5e      	subs	r6, r3, #1
 801dcd2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801dcd4:	fb01 0e06 	mla	lr, r1, r6, r0
 801dcd8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801dcdc:	d548      	bpl.n	801dd70 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801dcde:	4699      	mov	r9, r3
 801dce0:	462e      	mov	r6, r5
 801dce2:	f1b9 0f00 	cmp.w	r9, #0
 801dce6:	f300 809e 	bgt.w	801de26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801dcea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dcee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dcf2:	441d      	add	r5, r3
 801dcf4:	9b00      	ldr	r3, [sp, #0]
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	f340 80e7 	ble.w	801deca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801dcfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dd00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd02:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd06:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd0a:	eef0 6a62 	vmov.f32	s13, s5
 801dd0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dd12:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dd1a:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801dd1e:	eef0 6a43 	vmov.f32	s13, s6
 801dd22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dd26:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801dd2a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd2e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd32:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd36:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd3a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dd3e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dd42:	ee12 2a90 	vmov	r2, s5
 801dd46:	eef0 2a47 	vmov.f32	s5, s14
 801dd4a:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd4e:	ee13 2a10 	vmov	r2, s6
 801dd52:	9311      	str	r3, [sp, #68]	; 0x44
 801dd54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd56:	eeb0 3a67 	vmov.f32	s6, s15
 801dd5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd5e:	9312      	str	r3, [sp, #72]	; 0x48
 801dd60:	9b00      	ldr	r3, [sp, #0]
 801dd62:	9a03      	ldr	r2, [sp, #12]
 801dd64:	3b01      	subs	r3, #1
 801dd66:	9300      	str	r3, [sp, #0]
 801dd68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd6a:	bf08      	it	eq
 801dd6c:	4613      	moveq	r3, r2
 801dd6e:	e78f      	b.n	801dc90 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801dd70:	45c6      	cmp	lr, r8
 801dd72:	dab4      	bge.n	801dcde <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801dd74:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dd76:	fb01 2606 	mla	r6, r1, r6, r2
 801dd7a:	1436      	asrs	r6, r6, #16
 801dd7c:	d4af      	bmi.n	801dcde <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801dd7e:	9901      	ldr	r1, [sp, #4]
 801dd80:	428e      	cmp	r6, r1
 801dd82:	daac      	bge.n	801dcde <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801dd84:	1cee      	adds	r6, r5, #3
 801dd86:	4699      	mov	r9, r3
 801dd88:	f1b9 0f00 	cmp.w	r9, #0
 801dd8c:	f106 0603 	add.w	r6, r6, #3
 801dd90:	ddab      	ble.n	801dcea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801dd92:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801dd96:	9902      	ldr	r1, [sp, #8]
 801dd98:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801dd9c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801dda0:	fb08 1e0e 	mla	lr, r8, lr, r1
 801dda4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801dda6:	fb1b fb04 	smulbb	fp, fp, r4
 801ddaa:	f109 39ff 	add.w	r9, r9, #4294967295
 801ddae:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801ddb2:	4408      	add	r0, r1
 801ddb4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ddb6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ddba:	440a      	add	r2, r1
 801ddbc:	eb07 0a0e 	add.w	sl, r7, lr
 801ddc0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ddc4:	fb0e be0c 	mla	lr, lr, ip, fp
 801ddc8:	fa1f fe8e 	uxth.w	lr, lr
 801ddcc:	f10e 0b01 	add.w	fp, lr, #1
 801ddd0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ddd4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801ddd8:	fb1b fb04 	smulbb	fp, fp, r4
 801dddc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801dde0:	f806 ec06 	strb.w	lr, [r6, #-6]
 801dde4:	f89a e001 	ldrb.w	lr, [sl, #1]
 801dde8:	fb0e be0c 	mla	lr, lr, ip, fp
 801ddec:	fa1f fe8e 	uxth.w	lr, lr
 801ddf0:	f10e 0b01 	add.w	fp, lr, #1
 801ddf4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ddf8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ddfc:	f806 ec05 	strb.w	lr, [r6, #-5]
 801de00:	f89a e002 	ldrb.w	lr, [sl, #2]
 801de04:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801de08:	fb1a fa04 	smulbb	sl, sl, r4
 801de0c:	fb0e ae0c 	mla	lr, lr, ip, sl
 801de10:	fa1f fe8e 	uxth.w	lr, lr
 801de14:	f10e 0a01 	add.w	sl, lr, #1
 801de18:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801de1c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801de20:	f806 ec04 	strb.w	lr, [r6, #-4]
 801de24:	e7b0      	b.n	801dd88 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801de26:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801de2a:	d446      	bmi.n	801deba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801de2c:	45c2      	cmp	sl, r8
 801de2e:	da44      	bge.n	801deba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801de30:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801de34:	d441      	bmi.n	801deba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801de36:	9901      	ldr	r1, [sp, #4]
 801de38:	458e      	cmp	lr, r1
 801de3a:	da3e      	bge.n	801deba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801de3c:	9902      	ldr	r1, [sp, #8]
 801de3e:	f896 b000 	ldrb.w	fp, [r6]
 801de42:	fb08 1e0e 	mla	lr, r8, lr, r1
 801de46:	fb1b fb04 	smulbb	fp, fp, r4
 801de4a:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801de4e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801de52:	eb07 0a0e 	add.w	sl, r7, lr
 801de56:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801de5a:	fb0e be0c 	mla	lr, lr, ip, fp
 801de5e:	fa1f fe8e 	uxth.w	lr, lr
 801de62:	f10e 0b01 	add.w	fp, lr, #1
 801de66:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801de6a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801de6e:	fb1b fb04 	smulbb	fp, fp, r4
 801de72:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801de76:	f886 e000 	strb.w	lr, [r6]
 801de7a:	f89a e001 	ldrb.w	lr, [sl, #1]
 801de7e:	fb0e be0c 	mla	lr, lr, ip, fp
 801de82:	fa1f fe8e 	uxth.w	lr, lr
 801de86:	f10e 0b01 	add.w	fp, lr, #1
 801de8a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801de8e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801de92:	f886 e001 	strb.w	lr, [r6, #1]
 801de96:	f89a e002 	ldrb.w	lr, [sl, #2]
 801de9a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801de9e:	fb1a fa04 	smulbb	sl, sl, r4
 801dea2:	fb0e ae0c 	mla	lr, lr, ip, sl
 801dea6:	fa1f fe8e 	uxth.w	lr, lr
 801deaa:	f10e 0a01 	add.w	sl, lr, #1
 801deae:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801deb2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801deb6:	f886 e002 	strb.w	lr, [r6, #2]
 801deba:	9911      	ldr	r1, [sp, #68]	; 0x44
 801debc:	3603      	adds	r6, #3
 801debe:	f109 39ff 	add.w	r9, r9, #4294967295
 801dec2:	4408      	add	r0, r1
 801dec4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dec6:	440a      	add	r2, r1
 801dec8:	e70b      	b.n	801dce2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801deca:	b005      	add	sp, #20
 801decc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ded0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ded0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ded4:	b085      	sub	sp, #20
 801ded6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801deda:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801dedc:	9203      	str	r2, [sp, #12]
 801dede:	6870      	ldr	r0, [r6, #4]
 801dee0:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801dee2:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801dee6:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801deea:	9101      	str	r1, [sp, #4]
 801deec:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801def0:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801def4:	fb00 2404 	mla	r4, r0, r4, r2
 801def8:	6832      	ldr	r2, [r6, #0]
 801defa:	686e      	ldr	r6, [r5, #4]
 801defc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801df00:	3604      	adds	r6, #4
 801df02:	4414      	add	r4, r2
 801df04:	682a      	ldr	r2, [r5, #0]
 801df06:	9202      	str	r2, [sp, #8]
 801df08:	9a01      	ldr	r2, [sp, #4]
 801df0a:	2a00      	cmp	r2, #0
 801df0c:	dc03      	bgt.n	801df16 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801df0e:	9a03      	ldr	r2, [sp, #12]
 801df10:	2a00      	cmp	r2, #0
 801df12:	f340 80b2 	ble.w	801e07a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801df16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801df18:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801df1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801df1e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801df22:	2b00      	cmp	r3, #0
 801df24:	dd0c      	ble.n	801df40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801df26:	1405      	asrs	r5, r0, #16
 801df28:	d405      	bmi.n	801df36 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801df2a:	4575      	cmp	r5, lr
 801df2c:	da03      	bge.n	801df36 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801df2e:	1415      	asrs	r5, r2, #16
 801df30:	d401      	bmi.n	801df36 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801df32:	4545      	cmp	r5, r8
 801df34:	db05      	blt.n	801df42 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801df36:	4460      	add	r0, ip
 801df38:	443a      	add	r2, r7
 801df3a:	3b01      	subs	r3, #1
 801df3c:	3403      	adds	r4, #3
 801df3e:	e7f0      	b.n	801df22 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801df40:	d03d      	beq.n	801dfbe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801df42:	1e5d      	subs	r5, r3, #1
 801df44:	fb0c 0905 	mla	r9, ip, r5, r0
 801df48:	ea5f 4929 	movs.w	r9, r9, asr #16
 801df4c:	d42c      	bmi.n	801dfa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801df4e:	45f1      	cmp	r9, lr
 801df50:	da2a      	bge.n	801dfa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801df52:	fb07 2505 	mla	r5, r7, r5, r2
 801df56:	142d      	asrs	r5, r5, #16
 801df58:	d426      	bmi.n	801dfa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801df5a:	4545      	cmp	r5, r8
 801df5c:	da24      	bge.n	801dfa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801df5e:	1ce5      	adds	r5, r4, #3
 801df60:	469a      	mov	sl, r3
 801df62:	f1ba 0f00 	cmp.w	sl, #0
 801df66:	f105 0503 	add.w	r5, r5, #3
 801df6a:	dd23      	ble.n	801dfb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801df6c:	ea4f 4922 	mov.w	r9, r2, asr #16
 801df70:	9902      	ldr	r1, [sp, #8]
 801df72:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801df76:	443a      	add	r2, r7
 801df78:	fb0e 1909 	mla	r9, lr, r9, r1
 801df7c:	4460      	add	r0, ip
 801df7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801df82:	f819 900b 	ldrb.w	r9, [r9, fp]
 801df86:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801df8a:	eb06 0b09 	add.w	fp, r6, r9
 801df8e:	f816 9009 	ldrb.w	r9, [r6, r9]
 801df92:	f805 9c06 	strb.w	r9, [r5, #-6]
 801df96:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801df9a:	f805 9c05 	strb.w	r9, [r5, #-5]
 801df9e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801dfa2:	f805 9c04 	strb.w	r9, [r5, #-4]
 801dfa6:	e7dc      	b.n	801df62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801dfa8:	2500      	movs	r5, #0
 801dfaa:	eba3 0905 	sub.w	r9, r3, r5
 801dfae:	f1b9 0f00 	cmp.w	r9, #0
 801dfb2:	dc3c      	bgt.n	801e02e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801dfb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dfb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dfbc:	441c      	add	r4, r3
 801dfbe:	9b01      	ldr	r3, [sp, #4]
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	dd5a      	ble.n	801e07a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801dfc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dfc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dfca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dfce:	eeb0 6a62 	vmov.f32	s12, s5
 801dfd2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dfd6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dfda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dfde:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801dfe2:	eeb0 6a43 	vmov.f32	s12, s6
 801dfe6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dfea:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801dfee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dff2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dff6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dffa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dffe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e002:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e006:	ee12 2a90 	vmov	r2, s5
 801e00a:	eef0 2a47 	vmov.f32	s5, s14
 801e00e:	fb92 fcf3 	sdiv	ip, r2, r3
 801e012:	ee13 2a10 	vmov	r2, s6
 801e016:	eeb0 3a67 	vmov.f32	s6, s15
 801e01a:	fb92 f7f3 	sdiv	r7, r2, r3
 801e01e:	9b01      	ldr	r3, [sp, #4]
 801e020:	9a03      	ldr	r2, [sp, #12]
 801e022:	3b01      	subs	r3, #1
 801e024:	9301      	str	r3, [sp, #4]
 801e026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e028:	bf08      	it	eq
 801e02a:	4613      	moveq	r3, r2
 801e02c:	e76c      	b.n	801df08 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801e02e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801e032:	d41e      	bmi.n	801e072 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801e034:	45f2      	cmp	sl, lr
 801e036:	da1c      	bge.n	801e072 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801e038:	ea5f 4922 	movs.w	r9, r2, asr #16
 801e03c:	d419      	bmi.n	801e072 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801e03e:	45c1      	cmp	r9, r8
 801e040:	da17      	bge.n	801e072 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801e042:	9902      	ldr	r1, [sp, #8]
 801e044:	fb0e 1909 	mla	r9, lr, r9, r1
 801e048:	f819 900a 	ldrb.w	r9, [r9, sl]
 801e04c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e050:	f816 b009 	ldrb.w	fp, [r6, r9]
 801e054:	eb06 0a09 	add.w	sl, r6, r9
 801e058:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801e05c:	f804 b009 	strb.w	fp, [r4, r9]
 801e060:	44a1      	add	r9, r4
 801e062:	f89a b001 	ldrb.w	fp, [sl, #1]
 801e066:	f889 b001 	strb.w	fp, [r9, #1]
 801e06a:	f89a a002 	ldrb.w	sl, [sl, #2]
 801e06e:	f889 a002 	strb.w	sl, [r9, #2]
 801e072:	4460      	add	r0, ip
 801e074:	443a      	add	r2, r7
 801e076:	3501      	adds	r5, #1
 801e078:	e797      	b.n	801dfaa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801e07a:	b005      	add	sp, #20
 801e07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e080 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e084:	b087      	sub	sp, #28
 801e086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e08a:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801e08c:	9204      	str	r2, [sp, #16]
 801e08e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801e092:	6870      	ldr	r0, [r6, #4]
 801e094:	9205      	str	r2, [sp, #20]
 801e096:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e098:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801e09c:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801e0a0:	9101      	str	r1, [sp, #4]
 801e0a2:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801e0a6:	fb00 2505 	mla	r5, r0, r5, r2
 801e0aa:	6832      	ldr	r2, [r6, #0]
 801e0ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e0b0:	4415      	add	r5, r2
 801e0b2:	6822      	ldr	r2, [r4, #0]
 801e0b4:	9202      	str	r2, [sp, #8]
 801e0b6:	6862      	ldr	r2, [r4, #4]
 801e0b8:	3204      	adds	r2, #4
 801e0ba:	9203      	str	r2, [sp, #12]
 801e0bc:	9a01      	ldr	r2, [sp, #4]
 801e0be:	2a00      	cmp	r2, #0
 801e0c0:	dc03      	bgt.n	801e0ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801e0c2:	9a04      	ldr	r2, [sp, #16]
 801e0c4:	2a00      	cmp	r2, #0
 801e0c6:	f340 8124 	ble.w	801e312 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e0ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e0cc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e0d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e0d2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e0d6:	2b00      	cmp	r3, #0
 801e0d8:	dd0e      	ble.n	801e0f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801e0da:	1422      	asrs	r2, r4, #16
 801e0dc:	d405      	bmi.n	801e0ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801e0de:	4572      	cmp	r2, lr
 801e0e0:	da03      	bge.n	801e0ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801e0e2:	1402      	asrs	r2, r0, #16
 801e0e4:	d401      	bmi.n	801e0ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801e0e6:	4542      	cmp	r2, r8
 801e0e8:	db07      	blt.n	801e0fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e0ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e0ec:	3b01      	subs	r3, #1
 801e0ee:	3503      	adds	r5, #3
 801e0f0:	4414      	add	r4, r2
 801e0f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e0f4:	4410      	add	r0, r2
 801e0f6:	e7ee      	b.n	801e0d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801e0f8:	d010      	beq.n	801e11c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801e0fa:	1e5a      	subs	r2, r3, #1
 801e0fc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e0fe:	fb06 4602 	mla	r6, r6, r2, r4
 801e102:	1436      	asrs	r6, r6, #16
 801e104:	d546      	bpl.n	801e194 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801e106:	4699      	mov	r9, r3
 801e108:	462f      	mov	r7, r5
 801e10a:	f1b9 0f00 	cmp.w	r9, #0
 801e10e:	f300 80a5 	bgt.w	801e25c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801e112:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e116:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e11a:	441d      	add	r5, r3
 801e11c:	9b01      	ldr	r3, [sp, #4]
 801e11e:	2b00      	cmp	r3, #0
 801e120:	f340 80f7 	ble.w	801e312 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e124:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e128:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e12a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e12e:	eeb0 6a62 	vmov.f32	s12, s5
 801e132:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e136:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e13a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e13e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e142:	eeb0 6a43 	vmov.f32	s12, s6
 801e146:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e14a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e14e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e152:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e156:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e15a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e15e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e162:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e166:	ee12 2a90 	vmov	r2, s5
 801e16a:	eef0 2a47 	vmov.f32	s5, s14
 801e16e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e172:	ee13 2a10 	vmov	r2, s6
 801e176:	9313      	str	r3, [sp, #76]	; 0x4c
 801e178:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e17a:	eeb0 3a67 	vmov.f32	s6, s15
 801e17e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e182:	9314      	str	r3, [sp, #80]	; 0x50
 801e184:	9b01      	ldr	r3, [sp, #4]
 801e186:	9a04      	ldr	r2, [sp, #16]
 801e188:	3b01      	subs	r3, #1
 801e18a:	9301      	str	r3, [sp, #4]
 801e18c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e18e:	bf08      	it	eq
 801e190:	4613      	moveq	r3, r2
 801e192:	e793      	b.n	801e0bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801e194:	4576      	cmp	r6, lr
 801e196:	dab6      	bge.n	801e106 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801e198:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e19a:	fb06 0202 	mla	r2, r6, r2, r0
 801e19e:	1412      	asrs	r2, r2, #16
 801e1a0:	d4b1      	bmi.n	801e106 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801e1a2:	4542      	cmp	r2, r8
 801e1a4:	daaf      	bge.n	801e106 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801e1a6:	1cef      	adds	r7, r5, #3
 801e1a8:	4699      	mov	r9, r3
 801e1aa:	f1b9 0f00 	cmp.w	r9, #0
 801e1ae:	ddb0      	ble.n	801e112 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801e1b0:	9902      	ldr	r1, [sp, #8]
 801e1b2:	1402      	asrs	r2, r0, #16
 801e1b4:	1426      	asrs	r6, r4, #16
 801e1b6:	fb0e 1202 	mla	r2, lr, r2, r1
 801e1ba:	9903      	ldr	r1, [sp, #12]
 801e1bc:	5d92      	ldrb	r2, [r2, r6]
 801e1be:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801e1c2:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801e1c6:	d041      	beq.n	801e24c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801e1c8:	9a05      	ldr	r2, [sp, #20]
 801e1ca:	fa5f fb86 	uxtb.w	fp, r6
 801e1ce:	fb02 fc0c 	mul.w	ip, r2, ip
 801e1d2:	f10c 0201 	add.w	r2, ip, #1
 801e1d6:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801e1da:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801e1de:	1212      	asrs	r2, r2, #8
 801e1e0:	fa1f fa82 	uxth.w	sl, r2
 801e1e4:	43d2      	mvns	r2, r2
 801e1e6:	fb1b fb0a 	smulbb	fp, fp, sl
 801e1ea:	b2d2      	uxtb	r2, r2
 801e1ec:	fb0c bc02 	mla	ip, ip, r2, fp
 801e1f0:	fa1f fc8c 	uxth.w	ip, ip
 801e1f4:	f10c 0b01 	add.w	fp, ip, #1
 801e1f8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e1fc:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801e200:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e204:	fb1b fb0a 	smulbb	fp, fp, sl
 801e208:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e20c:	fb16 fa0a 	smulbb	sl, r6, sl
 801e210:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801e214:	f807 cc03 	strb.w	ip, [r7, #-3]
 801e218:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801e21c:	fb06 aa02 	mla	sl, r6, r2, sl
 801e220:	fb0c bc02 	mla	ip, ip, r2, fp
 801e224:	fa1f fa8a 	uxth.w	sl, sl
 801e228:	fa1f fc8c 	uxth.w	ip, ip
 801e22c:	f10a 0601 	add.w	r6, sl, #1
 801e230:	f10c 0b01 	add.w	fp, ip, #1
 801e234:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801e238:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e23c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e240:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e244:	f807 ac01 	strb.w	sl, [r7, #-1]
 801e248:	f807 cc02 	strb.w	ip, [r7, #-2]
 801e24c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e24e:	3703      	adds	r7, #3
 801e250:	f109 39ff 	add.w	r9, r9, #4294967295
 801e254:	4414      	add	r4, r2
 801e256:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e258:	4410      	add	r0, r2
 801e25a:	e7a6      	b.n	801e1aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801e25c:	1426      	asrs	r6, r4, #16
 801e25e:	d450      	bmi.n	801e302 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801e260:	4576      	cmp	r6, lr
 801e262:	da4e      	bge.n	801e302 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801e264:	1402      	asrs	r2, r0, #16
 801e266:	d44c      	bmi.n	801e302 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801e268:	4542      	cmp	r2, r8
 801e26a:	da4a      	bge.n	801e302 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801e26c:	9902      	ldr	r1, [sp, #8]
 801e26e:	fb0e 1202 	mla	r2, lr, r2, r1
 801e272:	9903      	ldr	r1, [sp, #12]
 801e274:	5d92      	ldrb	r2, [r2, r6]
 801e276:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801e27a:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801e27e:	d040      	beq.n	801e302 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801e280:	9a05      	ldr	r2, [sp, #20]
 801e282:	fa5f fb86 	uxtb.w	fp, r6
 801e286:	fb02 fc0c 	mul.w	ip, r2, ip
 801e28a:	f10c 0201 	add.w	r2, ip, #1
 801e28e:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801e292:	f897 c000 	ldrb.w	ip, [r7]
 801e296:	1212      	asrs	r2, r2, #8
 801e298:	fa1f fa82 	uxth.w	sl, r2
 801e29c:	43d2      	mvns	r2, r2
 801e29e:	fb1b fb0a 	smulbb	fp, fp, sl
 801e2a2:	b2d2      	uxtb	r2, r2
 801e2a4:	fb0c bc02 	mla	ip, ip, r2, fp
 801e2a8:	fa1f fc8c 	uxth.w	ip, ip
 801e2ac:	f10c 0b01 	add.w	fp, ip, #1
 801e2b0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e2b4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801e2b8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e2bc:	fb1b fb0a 	smulbb	fp, fp, sl
 801e2c0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e2c4:	fb16 fa0a 	smulbb	sl, r6, sl
 801e2c8:	78be      	ldrb	r6, [r7, #2]
 801e2ca:	f887 c000 	strb.w	ip, [r7]
 801e2ce:	f897 c001 	ldrb.w	ip, [r7, #1]
 801e2d2:	fb06 aa02 	mla	sl, r6, r2, sl
 801e2d6:	fb0c bc02 	mla	ip, ip, r2, fp
 801e2da:	fa1f fa8a 	uxth.w	sl, sl
 801e2de:	fa1f fc8c 	uxth.w	ip, ip
 801e2e2:	f10a 0601 	add.w	r6, sl, #1
 801e2e6:	f10c 0b01 	add.w	fp, ip, #1
 801e2ea:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801e2ee:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e2f2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e2f6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e2fa:	f887 a002 	strb.w	sl, [r7, #2]
 801e2fe:	f887 c001 	strb.w	ip, [r7, #1]
 801e302:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e304:	3703      	adds	r7, #3
 801e306:	f109 39ff 	add.w	r9, r9, #4294967295
 801e30a:	4414      	add	r4, r2
 801e30c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e30e:	4410      	add	r0, r2
 801e310:	e6fb      	b.n	801e10a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e312:	b007      	add	sp, #28
 801e314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e318 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e31c:	b085      	sub	sp, #20
 801e31e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e322:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e324:	9203      	str	r2, [sp, #12]
 801e326:	6870      	ldr	r0, [r6, #4]
 801e328:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801e32a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e32e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801e332:	9100      	str	r1, [sp, #0]
 801e334:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e338:	fb00 2404 	mla	r4, r0, r4, r2
 801e33c:	6832      	ldr	r2, [r6, #0]
 801e33e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e342:	4414      	add	r4, r2
 801e344:	682a      	ldr	r2, [r5, #0]
 801e346:	9201      	str	r2, [sp, #4]
 801e348:	686a      	ldr	r2, [r5, #4]
 801e34a:	3204      	adds	r2, #4
 801e34c:	9202      	str	r2, [sp, #8]
 801e34e:	9a00      	ldr	r2, [sp, #0]
 801e350:	2a00      	cmp	r2, #0
 801e352:	dc03      	bgt.n	801e35c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801e354:	9a03      	ldr	r2, [sp, #12]
 801e356:	2a00      	cmp	r2, #0
 801e358:	f340 8131 	ble.w	801e5be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801e35c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e35e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e362:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e364:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e368:	2b00      	cmp	r3, #0
 801e36a:	dd0e      	ble.n	801e38a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801e36c:	1405      	asrs	r5, r0, #16
 801e36e:	d405      	bmi.n	801e37c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e370:	4575      	cmp	r5, lr
 801e372:	da03      	bge.n	801e37c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e374:	1415      	asrs	r5, r2, #16
 801e376:	d401      	bmi.n	801e37c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e378:	4545      	cmp	r5, r8
 801e37a:	db07      	blt.n	801e38c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801e37c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e37e:	3b01      	subs	r3, #1
 801e380:	3403      	adds	r4, #3
 801e382:	4428      	add	r0, r5
 801e384:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e386:	442a      	add	r2, r5
 801e388:	e7ee      	b.n	801e368 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801e38a:	d06f      	beq.n	801e46c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801e38c:	1e5d      	subs	r5, r3, #1
 801e38e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e390:	fb06 0605 	mla	r6, r6, r5, r0
 801e394:	1436      	asrs	r6, r6, #16
 801e396:	d460      	bmi.n	801e45a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e398:	4576      	cmp	r6, lr
 801e39a:	da5e      	bge.n	801e45a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e39c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e39e:	fb06 2505 	mla	r5, r6, r5, r2
 801e3a2:	142d      	asrs	r5, r5, #16
 801e3a4:	d459      	bmi.n	801e45a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e3a6:	4545      	cmp	r5, r8
 801e3a8:	da57      	bge.n	801e45a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e3aa:	1ce5      	adds	r5, r4, #3
 801e3ac:	469a      	mov	sl, r3
 801e3ae:	f1ba 0f00 	cmp.w	sl, #0
 801e3b2:	dd56      	ble.n	801e462 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801e3b4:	9901      	ldr	r1, [sp, #4]
 801e3b6:	1416      	asrs	r6, r2, #16
 801e3b8:	1407      	asrs	r7, r0, #16
 801e3ba:	fb0e 1606 	mla	r6, lr, r6, r1
 801e3be:	9902      	ldr	r1, [sp, #8]
 801e3c0:	5df6      	ldrb	r6, [r6, r7]
 801e3c2:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801e3c6:	0e37      	lsrs	r7, r6, #24
 801e3c8:	2fff      	cmp	r7, #255	; 0xff
 801e3ca:	f000 80ef 	beq.w	801e5ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801e3ce:	fa5f fc87 	uxtb.w	ip, r7
 801e3d2:	b3d7      	cbz	r7, 801e44a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801e3d4:	fa1f f78c 	uxth.w	r7, ip
 801e3d8:	ea6f 0c0c 	mvn.w	ip, ip
 801e3dc:	fa5f fb86 	uxtb.w	fp, r6
 801e3e0:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801e3e4:	fa5f fc8c 	uxtb.w	ip, ip
 801e3e8:	fb1b fb07 	smulbb	fp, fp, r7
 801e3ec:	fb09 b90c 	mla	r9, r9, ip, fp
 801e3f0:	fa1f f989 	uxth.w	r9, r9
 801e3f4:	f109 0b01 	add.w	fp, r9, #1
 801e3f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e3fc:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e400:	fb1b fb0c 	smulbb	fp, fp, ip
 801e404:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e408:	f805 9c03 	strb.w	r9, [r5, #-3]
 801e40c:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801e410:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e414:	fb09 b907 	mla	r9, r9, r7, fp
 801e418:	fa1f f989 	uxth.w	r9, r9
 801e41c:	f109 0b01 	add.w	fp, r9, #1
 801e420:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e424:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e428:	f805 9c02 	strb.w	r9, [r5, #-2]
 801e42c:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801e430:	fb19 fc0c 	smulbb	ip, r9, ip
 801e434:	fb06 c607 	mla	r6, r6, r7, ip
 801e438:	b2b6      	uxth	r6, r6
 801e43a:	f106 0c01 	add.w	ip, r6, #1
 801e43e:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801e442:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e446:	f805 cc01 	strb.w	ip, [r5, #-1]
 801e44a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e44c:	3503      	adds	r5, #3
 801e44e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e452:	4408      	add	r0, r1
 801e454:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e456:	440a      	add	r2, r1
 801e458:	e7a9      	b.n	801e3ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801e45a:	2600      	movs	r6, #0
 801e45c:	1b9d      	subs	r5, r3, r6
 801e45e:	2d00      	cmp	r5, #0
 801e460:	dc40      	bgt.n	801e4e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801e462:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e466:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e46a:	441c      	add	r4, r3
 801e46c:	9b00      	ldr	r3, [sp, #0]
 801e46e:	2b00      	cmp	r3, #0
 801e470:	f340 80a5 	ble.w	801e5be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801e474:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e47a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e47e:	eeb0 6a62 	vmov.f32	s12, s5
 801e482:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e486:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e48a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e48e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e492:	eeb0 6a43 	vmov.f32	s12, s6
 801e496:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e49a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e49e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e4a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e4a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e4aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e4ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e4b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e4b6:	ee12 2a90 	vmov	r2, s5
 801e4ba:	eef0 2a47 	vmov.f32	s5, s14
 801e4be:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4c2:	ee13 2a10 	vmov	r2, s6
 801e4c6:	9311      	str	r3, [sp, #68]	; 0x44
 801e4c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4ca:	eeb0 3a67 	vmov.f32	s6, s15
 801e4ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4d2:	9312      	str	r3, [sp, #72]	; 0x48
 801e4d4:	9b00      	ldr	r3, [sp, #0]
 801e4d6:	9a03      	ldr	r2, [sp, #12]
 801e4d8:	3b01      	subs	r3, #1
 801e4da:	9300      	str	r3, [sp, #0]
 801e4dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4de:	bf08      	it	eq
 801e4e0:	4613      	moveq	r3, r2
 801e4e2:	e734      	b.n	801e34e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801e4e4:	1407      	asrs	r7, r0, #16
 801e4e6:	d450      	bmi.n	801e58a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e4e8:	4577      	cmp	r7, lr
 801e4ea:	da4e      	bge.n	801e58a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e4ec:	1415      	asrs	r5, r2, #16
 801e4ee:	d44c      	bmi.n	801e58a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e4f0:	4545      	cmp	r5, r8
 801e4f2:	da4a      	bge.n	801e58a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e4f4:	9901      	ldr	r1, [sp, #4]
 801e4f6:	fb0e 1505 	mla	r5, lr, r5, r1
 801e4fa:	9902      	ldr	r1, [sp, #8]
 801e4fc:	5ded      	ldrb	r5, [r5, r7]
 801e4fe:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801e502:	0e2f      	lsrs	r7, r5, #24
 801e504:	2fff      	cmp	r7, #255	; 0xff
 801e506:	d046      	beq.n	801e596 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801e508:	fa5f f987 	uxtb.w	r9, r7
 801e50c:	b3ef      	cbz	r7, 801e58a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e50e:	fa1f fc89 	uxth.w	ip, r9
 801e512:	ea6f 0909 	mvn.w	r9, r9
 801e516:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e51a:	fa5f fb85 	uxtb.w	fp, r5
 801e51e:	f814 a007 	ldrb.w	sl, [r4, r7]
 801e522:	fa5f f989 	uxtb.w	r9, r9
 801e526:	fb1b fb0c 	smulbb	fp, fp, ip
 801e52a:	fb0a ba09 	mla	sl, sl, r9, fp
 801e52e:	fa1f fa8a 	uxth.w	sl, sl
 801e532:	f10a 0b01 	add.w	fp, sl, #1
 801e536:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801e53a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e53e:	f804 a007 	strb.w	sl, [r4, r7]
 801e542:	4427      	add	r7, r4
 801e544:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e548:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801e54c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e550:	fb1b fb09 	smulbb	fp, fp, r9
 801e554:	fb0a ba0c 	mla	sl, sl, ip, fp
 801e558:	fa1f fa8a 	uxth.w	sl, sl
 801e55c:	f10a 0b01 	add.w	fp, sl, #1
 801e560:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801e564:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e568:	f887 a001 	strb.w	sl, [r7, #1]
 801e56c:	f897 a002 	ldrb.w	sl, [r7, #2]
 801e570:	fb1a f909 	smulbb	r9, sl, r9
 801e574:	fb05 950c 	mla	r5, r5, ip, r9
 801e578:	b2ad      	uxth	r5, r5
 801e57a:	f105 0901 	add.w	r9, r5, #1
 801e57e:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801e582:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e586:	f887 9002 	strb.w	r9, [r7, #2]
 801e58a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e58c:	3601      	adds	r6, #1
 801e58e:	4408      	add	r0, r1
 801e590:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e592:	440a      	add	r2, r1
 801e594:	e762      	b.n	801e45c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801e596:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e59a:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801e59e:	55e5      	strb	r5, [r4, r7]
 801e5a0:	4427      	add	r7, r4
 801e5a2:	0c2d      	lsrs	r5, r5, #16
 801e5a4:	f887 c001 	strb.w	ip, [r7, #1]
 801e5a8:	70bd      	strb	r5, [r7, #2]
 801e5aa:	e7ee      	b.n	801e58a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e5ac:	0a37      	lsrs	r7, r6, #8
 801e5ae:	f805 6c03 	strb.w	r6, [r5, #-3]
 801e5b2:	0c36      	lsrs	r6, r6, #16
 801e5b4:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e5b8:	f805 6c01 	strb.w	r6, [r5, #-1]
 801e5bc:	e745      	b.n	801e44a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801e5be:	b005      	add	sp, #20
 801e5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e5c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e5c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5c8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e5ca:	9201      	str	r2, [sp, #4]
 801e5cc:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801e5d0:	6870      	ldr	r0, [r6, #4]
 801e5d2:	9200      	str	r2, [sp, #0]
 801e5d4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801e5d8:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801e5dc:	fa1f fc85 	uxth.w	ip, r5
 801e5e0:	43ed      	mvns	r5, r5
 801e5e2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801e5e6:	b2ed      	uxtb	r5, r5
 801e5e8:	fb00 2404 	mla	r4, r0, r4, r2
 801e5ec:	6832      	ldr	r2, [r6, #0]
 801e5ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e5f2:	4414      	add	r4, r2
 801e5f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e5f6:	f8d2 8000 	ldr.w	r8, [r2]
 801e5fa:	2900      	cmp	r1, #0
 801e5fc:	dc03      	bgt.n	801e606 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801e5fe:	9a01      	ldr	r2, [sp, #4]
 801e600:	2a00      	cmp	r2, #0
 801e602:	f340 8104 	ble.w	801e80e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801e606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e608:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e60c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e60e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e612:	2b00      	cmp	r3, #0
 801e614:	dd0f      	ble.n	801e636 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801e616:	1406      	asrs	r6, r0, #16
 801e618:	d406      	bmi.n	801e628 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e61a:	4576      	cmp	r6, lr
 801e61c:	da04      	bge.n	801e628 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e61e:	1416      	asrs	r6, r2, #16
 801e620:	d402      	bmi.n	801e628 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e622:	9f00      	ldr	r7, [sp, #0]
 801e624:	42be      	cmp	r6, r7
 801e626:	db07      	blt.n	801e638 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801e628:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e62a:	3b01      	subs	r3, #1
 801e62c:	3403      	adds	r4, #3
 801e62e:	4430      	add	r0, r6
 801e630:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e632:	4432      	add	r2, r6
 801e634:	e7ed      	b.n	801e612 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801e636:	d05f      	beq.n	801e6f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801e638:	1e5e      	subs	r6, r3, #1
 801e63a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e63c:	fb07 0706 	mla	r7, r7, r6, r0
 801e640:	143f      	asrs	r7, r7, #16
 801e642:	d450      	bmi.n	801e6e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801e644:	4577      	cmp	r7, lr
 801e646:	da4e      	bge.n	801e6e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801e648:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e64a:	fb07 2606 	mla	r6, r7, r6, r2
 801e64e:	1436      	asrs	r6, r6, #16
 801e650:	d449      	bmi.n	801e6e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801e652:	9f00      	ldr	r7, [sp, #0]
 801e654:	42be      	cmp	r6, r7
 801e656:	da46      	bge.n	801e6e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801e658:	1ce6      	adds	r6, r4, #3
 801e65a:	4699      	mov	r9, r3
 801e65c:	f1b9 0f00 	cmp.w	r9, #0
 801e660:	f106 0603 	add.w	r6, r6, #3
 801e664:	dd43      	ble.n	801e6ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801e666:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e66a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801e66e:	1417      	asrs	r7, r2, #16
 801e670:	f109 39ff 	add.w	r9, r9, #4294967295
 801e674:	fb1b fb05 	smulbb	fp, fp, r5
 801e678:	fb0e a707 	mla	r7, lr, r7, sl
 801e67c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e680:	eb08 0a07 	add.w	sl, r8, r7
 801e684:	f818 7007 	ldrb.w	r7, [r8, r7]
 801e688:	fb07 b70c 	mla	r7, r7, ip, fp
 801e68c:	b2bf      	uxth	r7, r7
 801e68e:	f107 0b01 	add.w	fp, r7, #1
 801e692:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e696:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801e69a:	fb1b fb05 	smulbb	fp, fp, r5
 801e69e:	123f      	asrs	r7, r7, #8
 801e6a0:	f806 7c06 	strb.w	r7, [r6, #-6]
 801e6a4:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801e6a8:	fb07 b70c 	mla	r7, r7, ip, fp
 801e6ac:	b2bf      	uxth	r7, r7
 801e6ae:	f107 0b01 	add.w	fp, r7, #1
 801e6b2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e6b6:	123f      	asrs	r7, r7, #8
 801e6b8:	f806 7c05 	strb.w	r7, [r6, #-5]
 801e6bc:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801e6c0:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801e6c4:	fb1a fa05 	smulbb	sl, sl, r5
 801e6c8:	fb07 a70c 	mla	r7, r7, ip, sl
 801e6cc:	b2bf      	uxth	r7, r7
 801e6ce:	f107 0a01 	add.w	sl, r7, #1
 801e6d2:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801e6d6:	123f      	asrs	r7, r7, #8
 801e6d8:	f806 7c04 	strb.w	r7, [r6, #-4]
 801e6dc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e6de:	4438      	add	r0, r7
 801e6e0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e6e2:	443a      	add	r2, r7
 801e6e4:	e7ba      	b.n	801e65c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801e6e6:	2700      	movs	r7, #0
 801e6e8:	1bde      	subs	r6, r3, r7
 801e6ea:	2e00      	cmp	r6, #0
 801e6ec:	dc3f      	bgt.n	801e76e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801e6ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e6f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e6f6:	441c      	add	r4, r3
 801e6f8:	2900      	cmp	r1, #0
 801e6fa:	f340 8088 	ble.w	801e80e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801e6fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e704:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e708:	3901      	subs	r1, #1
 801e70a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e70e:	eef0 6a62 	vmov.f32	s13, s5
 801e712:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e716:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e71a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e71e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801e722:	eef0 6a43 	vmov.f32	s13, s6
 801e726:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e72a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801e72e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e732:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e736:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e73a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e73e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e742:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e746:	ee12 2a90 	vmov	r2, s5
 801e74a:	eef0 2a47 	vmov.f32	s5, s14
 801e74e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e752:	ee13 2a10 	vmov	r2, s6
 801e756:	930f      	str	r3, [sp, #60]	; 0x3c
 801e758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e75a:	eeb0 3a67 	vmov.f32	s6, s15
 801e75e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e762:	9a01      	ldr	r2, [sp, #4]
 801e764:	9310      	str	r3, [sp, #64]	; 0x40
 801e766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e768:	bf08      	it	eq
 801e76a:	4613      	moveq	r3, r2
 801e76c:	e745      	b.n	801e5fa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801e76e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801e772:	d446      	bmi.n	801e802 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e774:	45f2      	cmp	sl, lr
 801e776:	da44      	bge.n	801e802 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e778:	ea5f 4922 	movs.w	r9, r2, asr #16
 801e77c:	d441      	bmi.n	801e802 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e77e:	9e00      	ldr	r6, [sp, #0]
 801e780:	45b1      	cmp	r9, r6
 801e782:	da3e      	bge.n	801e802 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e784:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801e788:	fb0e a909 	mla	r9, lr, r9, sl
 801e78c:	f814 b006 	ldrb.w	fp, [r4, r6]
 801e790:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e794:	fb1b fb05 	smulbb	fp, fp, r5
 801e798:	eb08 0a09 	add.w	sl, r8, r9
 801e79c:	f818 9009 	ldrb.w	r9, [r8, r9]
 801e7a0:	fb09 b90c 	mla	r9, r9, ip, fp
 801e7a4:	fa1f f989 	uxth.w	r9, r9
 801e7a8:	f109 0b01 	add.w	fp, r9, #1
 801e7ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e7b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e7b4:	f804 9006 	strb.w	r9, [r4, r6]
 801e7b8:	4426      	add	r6, r4
 801e7ba:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801e7be:	f896 b001 	ldrb.w	fp, [r6, #1]
 801e7c2:	fb1b fb05 	smulbb	fp, fp, r5
 801e7c6:	fb09 b90c 	mla	r9, r9, ip, fp
 801e7ca:	fa1f f989 	uxth.w	r9, r9
 801e7ce:	f109 0b01 	add.w	fp, r9, #1
 801e7d2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e7d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e7da:	f886 9001 	strb.w	r9, [r6, #1]
 801e7de:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801e7e2:	f896 a002 	ldrb.w	sl, [r6, #2]
 801e7e6:	fb1a fa05 	smulbb	sl, sl, r5
 801e7ea:	fb09 a90c 	mla	r9, r9, ip, sl
 801e7ee:	fa1f f989 	uxth.w	r9, r9
 801e7f2:	f109 0a01 	add.w	sl, r9, #1
 801e7f6:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e7fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e7fe:	f886 9002 	strb.w	r9, [r6, #2]
 801e802:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e804:	3701      	adds	r7, #1
 801e806:	4430      	add	r0, r6
 801e808:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e80a:	4432      	add	r2, r6
 801e80c:	e76c      	b.n	801e6e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801e80e:	b003      	add	sp, #12
 801e810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e814 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e818:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e81a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e81e:	9201      	str	r2, [sp, #4]
 801e820:	6868      	ldr	r0, [r5, #4]
 801e822:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801e826:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801e82a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801e82e:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801e832:	fb00 2404 	mla	r4, r0, r4, r2
 801e836:	682a      	ldr	r2, [r5, #0]
 801e838:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e83c:	4414      	add	r4, r2
 801e83e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e840:	f8d2 9000 	ldr.w	r9, [r2]
 801e844:	2900      	cmp	r1, #0
 801e846:	dc03      	bgt.n	801e850 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801e848:	9a01      	ldr	r2, [sp, #4]
 801e84a:	2a00      	cmp	r2, #0
 801e84c:	f340 80a8 	ble.w	801e9a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801e850:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e852:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e858:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	dd0c      	ble.n	801e87a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801e860:	1405      	asrs	r5, r0, #16
 801e862:	d405      	bmi.n	801e870 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e864:	4565      	cmp	r5, ip
 801e866:	da03      	bge.n	801e870 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e868:	1415      	asrs	r5, r2, #16
 801e86a:	d401      	bmi.n	801e870 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e86c:	4575      	cmp	r5, lr
 801e86e:	db05      	blt.n	801e87c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801e870:	4438      	add	r0, r7
 801e872:	4432      	add	r2, r6
 801e874:	3b01      	subs	r3, #1
 801e876:	3403      	adds	r4, #3
 801e878:	e7f0      	b.n	801e85c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801e87a:	d03a      	beq.n	801e8f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801e87c:	1e5d      	subs	r5, r3, #1
 801e87e:	fb07 0805 	mla	r8, r7, r5, r0
 801e882:	ea5f 4828 	movs.w	r8, r8, asr #16
 801e886:	d429      	bmi.n	801e8dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e888:	45e0      	cmp	r8, ip
 801e88a:	da27      	bge.n	801e8dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e88c:	fb06 2505 	mla	r5, r6, r5, r2
 801e890:	142d      	asrs	r5, r5, #16
 801e892:	d423      	bmi.n	801e8dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e894:	4575      	cmp	r5, lr
 801e896:	da21      	bge.n	801e8dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e898:	f104 0803 	add.w	r8, r4, #3
 801e89c:	469a      	mov	sl, r3
 801e89e:	f1ba 0f00 	cmp.w	sl, #0
 801e8a2:	f108 0803 	add.w	r8, r8, #3
 801e8a6:	dd1f      	ble.n	801e8e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801e8a8:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801e8ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e8b0:	1415      	asrs	r5, r2, #16
 801e8b2:	4438      	add	r0, r7
 801e8b4:	4432      	add	r2, r6
 801e8b6:	fb0c b505 	mla	r5, ip, r5, fp
 801e8ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e8be:	eb09 0b05 	add.w	fp, r9, r5
 801e8c2:	f819 5005 	ldrb.w	r5, [r9, r5]
 801e8c6:	f808 5c06 	strb.w	r5, [r8, #-6]
 801e8ca:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801e8ce:	f808 5c05 	strb.w	r5, [r8, #-5]
 801e8d2:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801e8d6:	f808 5c04 	strb.w	r5, [r8, #-4]
 801e8da:	e7e0      	b.n	801e89e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e8dc:	2500      	movs	r5, #0
 801e8de:	eba3 0805 	sub.w	r8, r3, r5
 801e8e2:	f1b8 0f00 	cmp.w	r8, #0
 801e8e6:	dc38      	bgt.n	801e95a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801e8e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e8f0:	441c      	add	r4, r3
 801e8f2:	2900      	cmp	r1, #0
 801e8f4:	dd54      	ble.n	801e9a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801e8f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e8fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e900:	3901      	subs	r1, #1
 801e902:	eeb0 6a62 	vmov.f32	s12, s5
 801e906:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e90a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e90e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e912:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801e916:	eeb0 6a43 	vmov.f32	s12, s6
 801e91a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e91e:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801e922:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e926:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e92a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e92e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e932:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e936:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e93a:	ee12 2a90 	vmov	r2, s5
 801e93e:	eef0 2a47 	vmov.f32	s5, s14
 801e942:	fb92 f7f3 	sdiv	r7, r2, r3
 801e946:	ee13 2a10 	vmov	r2, s6
 801e94a:	eeb0 3a67 	vmov.f32	s6, s15
 801e94e:	fb92 f6f3 	sdiv	r6, r2, r3
 801e952:	9a01      	ldr	r2, [sp, #4]
 801e954:	bf08      	it	eq
 801e956:	4613      	moveq	r3, r2
 801e958:	e774      	b.n	801e844 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801e95a:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801e95e:	d41b      	bmi.n	801e998 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801e960:	45e2      	cmp	sl, ip
 801e962:	da19      	bge.n	801e998 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801e964:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e968:	d416      	bmi.n	801e998 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801e96a:	45f0      	cmp	r8, lr
 801e96c:	da14      	bge.n	801e998 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801e96e:	fb0c a808 	mla	r8, ip, r8, sl
 801e972:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e976:	f819 b008 	ldrb.w	fp, [r9, r8]
 801e97a:	eb09 0a08 	add.w	sl, r9, r8
 801e97e:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801e982:	f804 b008 	strb.w	fp, [r4, r8]
 801e986:	44a0      	add	r8, r4
 801e988:	f89a b001 	ldrb.w	fp, [sl, #1]
 801e98c:	f888 b001 	strb.w	fp, [r8, #1]
 801e990:	f89a a002 	ldrb.w	sl, [sl, #2]
 801e994:	f888 a002 	strb.w	sl, [r8, #2]
 801e998:	4438      	add	r0, r7
 801e99a:	4432      	add	r2, r6
 801e99c:	3501      	adds	r5, #1
 801e99e:	e79e      	b.n	801e8de <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801e9a0:	b003      	add	sp, #12
 801e9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e9a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e9a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9aa:	b085      	sub	sp, #20
 801e9ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e9b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e9b2:	9202      	str	r2, [sp, #8]
 801e9b4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e9b8:	6860      	ldr	r0, [r4, #4]
 801e9ba:	9203      	str	r2, [sp, #12]
 801e9bc:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e9c0:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801e9c4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801e9c8:	fb00 2505 	mla	r5, r0, r5, r2
 801e9cc:	6822      	ldr	r2, [r4, #0]
 801e9ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e9d2:	4415      	add	r5, r2
 801e9d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e9d6:	6812      	ldr	r2, [r2, #0]
 801e9d8:	9201      	str	r2, [sp, #4]
 801e9da:	2900      	cmp	r1, #0
 801e9dc:	dc03      	bgt.n	801e9e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801e9de:	9a02      	ldr	r2, [sp, #8]
 801e9e0:	2a00      	cmp	r2, #0
 801e9e2:	f340 811c 	ble.w	801ec1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801e9e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e9e8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e9ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e9ee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	dd0e      	ble.n	801ea14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e9f6:	1422      	asrs	r2, r4, #16
 801e9f8:	d405      	bmi.n	801ea06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801e9fa:	4572      	cmp	r2, lr
 801e9fc:	da03      	bge.n	801ea06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801e9fe:	1402      	asrs	r2, r0, #16
 801ea00:	d401      	bmi.n	801ea06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801ea02:	4542      	cmp	r2, r8
 801ea04:	db07      	blt.n	801ea16 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801ea06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ea08:	3b01      	subs	r3, #1
 801ea0a:	3503      	adds	r5, #3
 801ea0c:	4414      	add	r4, r2
 801ea0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ea10:	4410      	add	r0, r2
 801ea12:	e7ee      	b.n	801e9f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801ea14:	d072      	beq.n	801eafc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801ea16:	1e5a      	subs	r2, r3, #1
 801ea18:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ea1a:	fb06 4602 	mla	r6, r6, r2, r4
 801ea1e:	1436      	asrs	r6, r6, #16
 801ea20:	d461      	bmi.n	801eae6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801ea22:	4576      	cmp	r6, lr
 801ea24:	da5f      	bge.n	801eae6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801ea26:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ea28:	fb06 0202 	mla	r2, r6, r2, r0
 801ea2c:	1412      	asrs	r2, r2, #16
 801ea2e:	d45a      	bmi.n	801eae6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801ea30:	4542      	cmp	r2, r8
 801ea32:	da58      	bge.n	801eae6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801ea34:	1cef      	adds	r7, r5, #3
 801ea36:	4699      	mov	r9, r3
 801ea38:	f1b9 0f00 	cmp.w	r9, #0
 801ea3c:	dd59      	ble.n	801eaf2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801ea3e:	1426      	asrs	r6, r4, #16
 801ea40:	1402      	asrs	r2, r0, #16
 801ea42:	fb0e 6202 	mla	r2, lr, r2, r6
 801ea46:	9e01      	ldr	r6, [sp, #4]
 801ea48:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ea4c:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801ea50:	d041      	beq.n	801ead6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801ea52:	9a03      	ldr	r2, [sp, #12]
 801ea54:	fa5f fb86 	uxtb.w	fp, r6
 801ea58:	fb02 fc0c 	mul.w	ip, r2, ip
 801ea5c:	f10c 0201 	add.w	r2, ip, #1
 801ea60:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801ea64:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801ea68:	1212      	asrs	r2, r2, #8
 801ea6a:	fa1f fa82 	uxth.w	sl, r2
 801ea6e:	43d2      	mvns	r2, r2
 801ea70:	fb1b fb0a 	smulbb	fp, fp, sl
 801ea74:	b2d2      	uxtb	r2, r2
 801ea76:	fb0c bc02 	mla	ip, ip, r2, fp
 801ea7a:	fa1f fc8c 	uxth.w	ip, ip
 801ea7e:	f10c 0b01 	add.w	fp, ip, #1
 801ea82:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ea86:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ea8a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ea8e:	fb1b fb0a 	smulbb	fp, fp, sl
 801ea92:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ea96:	fb16 fa0a 	smulbb	sl, r6, sl
 801ea9a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ea9e:	f807 cc03 	strb.w	ip, [r7, #-3]
 801eaa2:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801eaa6:	fb06 aa02 	mla	sl, r6, r2, sl
 801eaaa:	fb0c bc02 	mla	ip, ip, r2, fp
 801eaae:	fa1f fa8a 	uxth.w	sl, sl
 801eab2:	fa1f fc8c 	uxth.w	ip, ip
 801eab6:	f10a 0601 	add.w	r6, sl, #1
 801eaba:	f10c 0b01 	add.w	fp, ip, #1
 801eabe:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801eac2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801eac6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801eaca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eace:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ead2:	f807 cc02 	strb.w	ip, [r7, #-2]
 801ead6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ead8:	3703      	adds	r7, #3
 801eada:	f109 39ff 	add.w	r9, r9, #4294967295
 801eade:	4414      	add	r4, r2
 801eae0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eae2:	4410      	add	r0, r2
 801eae4:	e7a8      	b.n	801ea38 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801eae6:	f04f 0c00 	mov.w	ip, #0
 801eaea:	eba3 020c 	sub.w	r2, r3, ip
 801eaee:	2a00      	cmp	r2, #0
 801eaf0:	dc3d      	bgt.n	801eb6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801eaf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eaf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eafa:	441d      	add	r5, r3
 801eafc:	2900      	cmp	r1, #0
 801eafe:	f340 808e 	ble.w	801ec1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801eb02:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb08:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb0c:	3901      	subs	r1, #1
 801eb0e:	eeb0 6a62 	vmov.f32	s12, s5
 801eb12:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb16:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb1e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801eb22:	eeb0 6a43 	vmov.f32	s12, s6
 801eb26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb2a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eb2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb32:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb36:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb46:	ee12 2a90 	vmov	r2, s5
 801eb4a:	eef0 2a47 	vmov.f32	s5, s14
 801eb4e:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb52:	ee13 2a10 	vmov	r2, s6
 801eb56:	9311      	str	r3, [sp, #68]	; 0x44
 801eb58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb5a:	eeb0 3a67 	vmov.f32	s6, s15
 801eb5e:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb62:	9a02      	ldr	r2, [sp, #8]
 801eb64:	9312      	str	r3, [sp, #72]	; 0x48
 801eb66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb68:	bf08      	it	eq
 801eb6a:	4613      	moveq	r3, r2
 801eb6c:	e735      	b.n	801e9da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801eb6e:	1426      	asrs	r6, r4, #16
 801eb70:	d44e      	bmi.n	801ec10 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801eb72:	4576      	cmp	r6, lr
 801eb74:	da4c      	bge.n	801ec10 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801eb76:	1402      	asrs	r2, r0, #16
 801eb78:	d44a      	bmi.n	801ec10 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801eb7a:	4542      	cmp	r2, r8
 801eb7c:	da48      	bge.n	801ec10 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801eb7e:	fb0e 6202 	mla	r2, lr, r2, r6
 801eb82:	9e01      	ldr	r6, [sp, #4]
 801eb84:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801eb88:	0e3a      	lsrs	r2, r7, #24
 801eb8a:	d041      	beq.n	801ec10 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801eb8c:	9e03      	ldr	r6, [sp, #12]
 801eb8e:	fa5f fb87 	uxtb.w	fp, r7
 801eb92:	4372      	muls	r2, r6
 801eb94:	1c56      	adds	r6, r2, #1
 801eb96:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801eb9a:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801eb9e:	1212      	asrs	r2, r2, #8
 801eba0:	f815 9006 	ldrb.w	r9, [r5, r6]
 801eba4:	fa1f fa82 	uxth.w	sl, r2
 801eba8:	43d2      	mvns	r2, r2
 801ebaa:	fb1b fb0a 	smulbb	fp, fp, sl
 801ebae:	b2d2      	uxtb	r2, r2
 801ebb0:	fb09 b902 	mla	r9, r9, r2, fp
 801ebb4:	fa1f f989 	uxth.w	r9, r9
 801ebb8:	f109 0b01 	add.w	fp, r9, #1
 801ebbc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ebc0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ebc4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ebc8:	fb1b fb0a 	smulbb	fp, fp, sl
 801ebcc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ebd0:	fb17 fa0a 	smulbb	sl, r7, sl
 801ebd4:	f805 9006 	strb.w	r9, [r5, r6]
 801ebd8:	442e      	add	r6, r5
 801ebda:	78b7      	ldrb	r7, [r6, #2]
 801ebdc:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ebe0:	fb07 aa02 	mla	sl, r7, r2, sl
 801ebe4:	fb09 b902 	mla	r9, r9, r2, fp
 801ebe8:	fa1f fa8a 	uxth.w	sl, sl
 801ebec:	fa1f f989 	uxth.w	r9, r9
 801ebf0:	f10a 0701 	add.w	r7, sl, #1
 801ebf4:	f109 0b01 	add.w	fp, r9, #1
 801ebf8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ebfc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ec00:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ec04:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ec08:	f886 a002 	strb.w	sl, [r6, #2]
 801ec0c:	f886 9001 	strb.w	r9, [r6, #1]
 801ec10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ec12:	f10c 0c01 	add.w	ip, ip, #1
 801ec16:	4414      	add	r4, r2
 801ec18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ec1a:	4410      	add	r0, r2
 801ec1c:	e765      	b.n	801eaea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801ec1e:	b005      	add	sp, #20
 801ec20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec24 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ec24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec28:	b085      	sub	sp, #20
 801ec2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec2e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ec30:	9203      	str	r2, [sp, #12]
 801ec32:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ec36:	6860      	ldr	r0, [r4, #4]
 801ec38:	9201      	str	r2, [sp, #4]
 801ec3a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ec3e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ec42:	fb00 2505 	mla	r5, r0, r5, r2
 801ec46:	6822      	ldr	r2, [r4, #0]
 801ec48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec4c:	4415      	add	r5, r2
 801ec4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ec50:	6812      	ldr	r2, [r2, #0]
 801ec52:	9202      	str	r2, [sp, #8]
 801ec54:	2900      	cmp	r1, #0
 801ec56:	dc03      	bgt.n	801ec60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801ec58:	9a03      	ldr	r2, [sp, #12]
 801ec5a:	2a00      	cmp	r2, #0
 801ec5c:	f340 8122 	ble.w	801eea4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ec60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ec62:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ec66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ec68:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	dd0f      	ble.n	801ec90 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801ec70:	1422      	asrs	r2, r4, #16
 801ec72:	d406      	bmi.n	801ec82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ec74:	4572      	cmp	r2, lr
 801ec76:	da04      	bge.n	801ec82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ec78:	1402      	asrs	r2, r0, #16
 801ec7a:	d402      	bmi.n	801ec82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ec7c:	9e01      	ldr	r6, [sp, #4]
 801ec7e:	42b2      	cmp	r2, r6
 801ec80:	db07      	blt.n	801ec92 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ec82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ec84:	3b01      	subs	r3, #1
 801ec86:	3503      	adds	r5, #3
 801ec88:	4414      	add	r4, r2
 801ec8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ec8c:	4410      	add	r0, r2
 801ec8e:	e7ed      	b.n	801ec6c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801ec90:	d06e      	beq.n	801ed70 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801ec92:	1e5a      	subs	r2, r3, #1
 801ec94:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ec96:	fb06 4602 	mla	r6, r6, r2, r4
 801ec9a:	1436      	asrs	r6, r6, #16
 801ec9c:	d45d      	bmi.n	801ed5a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ec9e:	4576      	cmp	r6, lr
 801eca0:	da5b      	bge.n	801ed5a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801eca2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801eca4:	fb06 0202 	mla	r2, r6, r2, r0
 801eca8:	1412      	asrs	r2, r2, #16
 801ecaa:	d456      	bmi.n	801ed5a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ecac:	9e01      	ldr	r6, [sp, #4]
 801ecae:	42b2      	cmp	r2, r6
 801ecb0:	da53      	bge.n	801ed5a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ecb2:	1cee      	adds	r6, r5, #3
 801ecb4:	469a      	mov	sl, r3
 801ecb6:	f1ba 0f00 	cmp.w	sl, #0
 801ecba:	dd54      	ble.n	801ed66 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801ecbc:	1427      	asrs	r7, r4, #16
 801ecbe:	1402      	asrs	r2, r0, #16
 801ecc0:	fb0e 7202 	mla	r2, lr, r2, r7
 801ecc4:	9f02      	ldr	r7, [sp, #8]
 801ecc6:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801ecca:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801ecce:	d03c      	beq.n	801ed4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801ecd0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ecd4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ecd8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ecdc:	fa5f f28c 	uxtb.w	r2, ip
 801ece0:	b2ff      	uxtb	r7, r7
 801ece2:	f000 80d8 	beq.w	801ee96 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ece6:	fa1f f882 	uxth.w	r8, r2
 801ecea:	43d2      	mvns	r2, r2
 801ecec:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801ecf0:	fb17 f708 	smulbb	r7, r7, r8
 801ecf4:	b2d2      	uxtb	r2, r2
 801ecf6:	fb19 f908 	smulbb	r9, r9, r8
 801ecfa:	fb0c 7702 	mla	r7, ip, r2, r7
 801ecfe:	fb1b f808 	smulbb	r8, fp, r8
 801ed02:	b2bf      	uxth	r7, r7
 801ed04:	f107 0c01 	add.w	ip, r7, #1
 801ed08:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ed0c:	123f      	asrs	r7, r7, #8
 801ed0e:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ed12:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801ed16:	fb07 9902 	mla	r9, r7, r2, r9
 801ed1a:	fa1f f989 	uxth.w	r9, r9
 801ed1e:	f109 0701 	add.w	r7, r9, #1
 801ed22:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ed26:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ed2a:	fb07 8802 	mla	r8, r7, r2, r8
 801ed2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ed32:	fa1f f888 	uxth.w	r8, r8
 801ed36:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ed3a:	f108 0201 	add.w	r2, r8, #1
 801ed3e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ed42:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ed46:	f806 8c01 	strb.w	r8, [r6, #-1]
 801ed4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ed4c:	3603      	adds	r6, #3
 801ed4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ed52:	4414      	add	r4, r2
 801ed54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ed56:	4410      	add	r0, r2
 801ed58:	e7ad      	b.n	801ecb6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801ed5a:	f04f 0c00 	mov.w	ip, #0
 801ed5e:	eba3 020c 	sub.w	r2, r3, ip
 801ed62:	2a00      	cmp	r2, #0
 801ed64:	dc3d      	bgt.n	801ede2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801ed66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed6e:	441d      	add	r5, r3
 801ed70:	2900      	cmp	r1, #0
 801ed72:	f340 8097 	ble.w	801eea4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ed76:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed80:	3901      	subs	r1, #1
 801ed82:	eeb0 6a62 	vmov.f32	s12, s5
 801ed86:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ed8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed92:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ed96:	eeb0 6a43 	vmov.f32	s12, s6
 801ed9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed9e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eda2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eda6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801edaa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801edae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801edb2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801edb6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801edba:	ee12 2a90 	vmov	r2, s5
 801edbe:	eef0 2a47 	vmov.f32	s5, s14
 801edc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801edc6:	ee13 2a10 	vmov	r2, s6
 801edca:	9311      	str	r3, [sp, #68]	; 0x44
 801edcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edce:	eeb0 3a67 	vmov.f32	s6, s15
 801edd2:	fb92 f3f3 	sdiv	r3, r2, r3
 801edd6:	9a03      	ldr	r2, [sp, #12]
 801edd8:	9312      	str	r3, [sp, #72]	; 0x48
 801edda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eddc:	bf08      	it	eq
 801edde:	4613      	moveq	r3, r2
 801ede0:	e738      	b.n	801ec54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801ede2:	1426      	asrs	r6, r4, #16
 801ede4:	d448      	bmi.n	801ee78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ede6:	4576      	cmp	r6, lr
 801ede8:	da46      	bge.n	801ee78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801edea:	1402      	asrs	r2, r0, #16
 801edec:	d444      	bmi.n	801ee78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801edee:	9f01      	ldr	r7, [sp, #4]
 801edf0:	42ba      	cmp	r2, r7
 801edf2:	da41      	bge.n	801ee78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801edf4:	fb0e 6202 	mla	r2, lr, r2, r6
 801edf8:	9e02      	ldr	r6, [sp, #8]
 801edfa:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801edfe:	0e3a      	lsrs	r2, r7, #24
 801ee00:	d03a      	beq.n	801ee78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ee02:	2aff      	cmp	r2, #255	; 0xff
 801ee04:	b2d6      	uxtb	r6, r2
 801ee06:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ee0a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801ee0e:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801ee12:	b2ff      	uxtb	r7, r7
 801ee14:	d037      	beq.n	801ee86 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801ee16:	fa1f f986 	uxth.w	r9, r6
 801ee1a:	4462      	add	r2, ip
 801ee1c:	43f6      	mvns	r6, r6
 801ee1e:	f815 8002 	ldrb.w	r8, [r5, r2]
 801ee22:	fb17 f709 	smulbb	r7, r7, r9
 801ee26:	fb1a fa09 	smulbb	sl, sl, r9
 801ee2a:	b2f6      	uxtb	r6, r6
 801ee2c:	fb1b f909 	smulbb	r9, fp, r9
 801ee30:	fb08 7706 	mla	r7, r8, r6, r7
 801ee34:	b2bf      	uxth	r7, r7
 801ee36:	f107 0801 	add.w	r8, r7, #1
 801ee3a:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801ee3e:	123f      	asrs	r7, r7, #8
 801ee40:	54af      	strb	r7, [r5, r2]
 801ee42:	442a      	add	r2, r5
 801ee44:	7857      	ldrb	r7, [r2, #1]
 801ee46:	fb07 aa06 	mla	sl, r7, r6, sl
 801ee4a:	fa1f fa8a 	uxth.w	sl, sl
 801ee4e:	f10a 0701 	add.w	r7, sl, #1
 801ee52:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ee56:	7897      	ldrb	r7, [r2, #2]
 801ee58:	fb07 9906 	mla	r9, r7, r6, r9
 801ee5c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ee60:	fa1f f989 	uxth.w	r9, r9
 801ee64:	f882 a001 	strb.w	sl, [r2, #1]
 801ee68:	f109 0601 	add.w	r6, r9, #1
 801ee6c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801ee70:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ee74:	f882 9002 	strb.w	r9, [r2, #2]
 801ee78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ee7a:	f10c 0c01 	add.w	ip, ip, #1
 801ee7e:	4414      	add	r4, r2
 801ee80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ee82:	4410      	add	r0, r2
 801ee84:	e76b      	b.n	801ed5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801ee86:	4462      	add	r2, ip
 801ee88:	54af      	strb	r7, [r5, r2]
 801ee8a:	442a      	add	r2, r5
 801ee8c:	f882 a001 	strb.w	sl, [r2, #1]
 801ee90:	f882 b002 	strb.w	fp, [r2, #2]
 801ee94:	e7f0      	b.n	801ee78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ee96:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ee9a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ee9e:	f806 bc01 	strb.w	fp, [r6, #-1]
 801eea2:	e752      	b.n	801ed4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801eea4:	b005      	add	sp, #20
 801eea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801eeac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801eeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeb0:	b087      	sub	sp, #28
 801eeb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eeb6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801eeb8:	9204      	str	r2, [sp, #16]
 801eeba:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801eebe:	6860      	ldr	r0, [r4, #4]
 801eec0:	9205      	str	r2, [sp, #20]
 801eec2:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801eec6:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801eeca:	9101      	str	r1, [sp, #4]
 801eecc:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801eed0:	fb00 2505 	mla	r5, r0, r5, r2
 801eed4:	6822      	ldr	r2, [r4, #0]
 801eed6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eeda:	4415      	add	r5, r2
 801eedc:	f10e 0201 	add.w	r2, lr, #1
 801eee0:	f022 0201 	bic.w	r2, r2, #1
 801eee4:	9202      	str	r2, [sp, #8]
 801eee6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801eee8:	6812      	ldr	r2, [r2, #0]
 801eeea:	9203      	str	r2, [sp, #12]
 801eeec:	9a01      	ldr	r2, [sp, #4]
 801eeee:	2a00      	cmp	r2, #0
 801eef0:	dc03      	bgt.n	801eefa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801eef2:	9a04      	ldr	r2, [sp, #16]
 801eef4:	2a00      	cmp	r2, #0
 801eef6:	f340 8132 	ble.w	801f15e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801eefa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801eefc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ef00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ef02:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ef06:	2b00      	cmp	r3, #0
 801ef08:	dd0e      	ble.n	801ef28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801ef0a:	1422      	asrs	r2, r4, #16
 801ef0c:	d405      	bmi.n	801ef1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ef0e:	4596      	cmp	lr, r2
 801ef10:	dd03      	ble.n	801ef1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ef12:	1402      	asrs	r2, r0, #16
 801ef14:	d401      	bmi.n	801ef1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ef16:	4542      	cmp	r2, r8
 801ef18:	db07      	blt.n	801ef2a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801ef1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ef1c:	3b01      	subs	r3, #1
 801ef1e:	3503      	adds	r5, #3
 801ef20:	4414      	add	r4, r2
 801ef22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ef24:	4410      	add	r0, r2
 801ef26:	e7ee      	b.n	801ef06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801ef28:	d010      	beq.n	801ef4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801ef2a:	1e5a      	subs	r2, r3, #1
 801ef2c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ef2e:	fb06 4602 	mla	r6, r6, r2, r4
 801ef32:	1436      	asrs	r6, r6, #16
 801ef34:	d546      	bpl.n	801efc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801ef36:	4699      	mov	r9, r3
 801ef38:	462e      	mov	r6, r5
 801ef3a:	f1b9 0f00 	cmp.w	r9, #0
 801ef3e:	f300 80ac 	bgt.w	801f09a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801ef42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ef46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef4a:	441d      	add	r5, r3
 801ef4c:	9b01      	ldr	r3, [sp, #4]
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	f340 8105 	ble.w	801f15e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801ef54:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef5e:	eeb0 6a62 	vmov.f32	s12, s5
 801ef62:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ef66:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ef6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef6e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ef72:	eeb0 6a43 	vmov.f32	s12, s6
 801ef76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef7a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ef7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef82:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef86:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ef8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ef8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ef92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ef96:	ee12 2a90 	vmov	r2, s5
 801ef9a:	eef0 2a47 	vmov.f32	s5, s14
 801ef9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801efa2:	ee13 2a10 	vmov	r2, s6
 801efa6:	9313      	str	r3, [sp, #76]	; 0x4c
 801efa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801efaa:	eeb0 3a67 	vmov.f32	s6, s15
 801efae:	fb92 f3f3 	sdiv	r3, r2, r3
 801efb2:	9314      	str	r3, [sp, #80]	; 0x50
 801efb4:	9b01      	ldr	r3, [sp, #4]
 801efb6:	9a04      	ldr	r2, [sp, #16]
 801efb8:	3b01      	subs	r3, #1
 801efba:	9301      	str	r3, [sp, #4]
 801efbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801efbe:	bf08      	it	eq
 801efc0:	4613      	moveq	r3, r2
 801efc2:	e793      	b.n	801eeec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801efc4:	45b6      	cmp	lr, r6
 801efc6:	ddb6      	ble.n	801ef36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801efc8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801efca:	fb06 0202 	mla	r2, r6, r2, r0
 801efce:	1412      	asrs	r2, r2, #16
 801efd0:	d4b1      	bmi.n	801ef36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801efd2:	4542      	cmp	r2, r8
 801efd4:	daaf      	bge.n	801ef36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801efd6:	1cee      	adds	r6, r5, #3
 801efd8:	4699      	mov	r9, r3
 801efda:	f1b9 0f00 	cmp.w	r9, #0
 801efde:	ddb0      	ble.n	801ef42 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801efe0:	1422      	asrs	r2, r4, #16
 801efe2:	9902      	ldr	r1, [sp, #8]
 801efe4:	1407      	asrs	r7, r0, #16
 801efe6:	fb01 2707 	mla	r7, r1, r7, r2
 801efea:	9903      	ldr	r1, [sp, #12]
 801efec:	087a      	lsrs	r2, r7, #1
 801efee:	5c8a      	ldrb	r2, [r1, r2]
 801eff0:	07f9      	lsls	r1, r7, #31
 801eff2:	bf54      	ite	pl
 801eff4:	f002 020f 	andpl.w	r2, r2, #15
 801eff8:	1112      	asrmi	r2, r2, #4
 801effa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801effe:	b2d2      	uxtb	r2, r2
 801f000:	2a00      	cmp	r2, #0
 801f002:	d042      	beq.n	801f08a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801f004:	4957      	ldr	r1, [pc, #348]	; (801f164 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801f006:	680f      	ldr	r7, [r1, #0]
 801f008:	9905      	ldr	r1, [sp, #20]
 801f00a:	fa5f fb87 	uxtb.w	fp, r7
 801f00e:	434a      	muls	r2, r1
 801f010:	f102 0c01 	add.w	ip, r2, #1
 801f014:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801f018:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801f01c:	1212      	asrs	r2, r2, #8
 801f01e:	fa1f fa82 	uxth.w	sl, r2
 801f022:	43d2      	mvns	r2, r2
 801f024:	fb1b fb0a 	smulbb	fp, fp, sl
 801f028:	b2d2      	uxtb	r2, r2
 801f02a:	fb0c bc02 	mla	ip, ip, r2, fp
 801f02e:	fa1f fc8c 	uxth.w	ip, ip
 801f032:	f10c 0b01 	add.w	fp, ip, #1
 801f036:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f03a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801f03e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801f042:	fb1b fb0a 	smulbb	fp, fp, sl
 801f046:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f04a:	fb17 fa0a 	smulbb	sl, r7, sl
 801f04e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801f052:	f806 cc03 	strb.w	ip, [r6, #-3]
 801f056:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801f05a:	fb07 aa02 	mla	sl, r7, r2, sl
 801f05e:	fb0c bc02 	mla	ip, ip, r2, fp
 801f062:	fa1f fa8a 	uxth.w	sl, sl
 801f066:	fa1f fc8c 	uxth.w	ip, ip
 801f06a:	f10a 0701 	add.w	r7, sl, #1
 801f06e:	f10c 0b01 	add.w	fp, ip, #1
 801f072:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f076:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f07a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f07e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f082:	f806 ac01 	strb.w	sl, [r6, #-1]
 801f086:	f806 cc02 	strb.w	ip, [r6, #-2]
 801f08a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f08c:	3603      	adds	r6, #3
 801f08e:	f109 39ff 	add.w	r9, r9, #4294967295
 801f092:	4414      	add	r4, r2
 801f094:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f096:	4410      	add	r0, r2
 801f098:	e79f      	b.n	801efda <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801f09a:	1422      	asrs	r2, r4, #16
 801f09c:	d457      	bmi.n	801f14e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801f09e:	4596      	cmp	lr, r2
 801f0a0:	dd55      	ble.n	801f14e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801f0a2:	1407      	asrs	r7, r0, #16
 801f0a4:	d453      	bmi.n	801f14e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801f0a6:	4547      	cmp	r7, r8
 801f0a8:	da51      	bge.n	801f14e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801f0aa:	9902      	ldr	r1, [sp, #8]
 801f0ac:	fb07 2701 	mla	r7, r7, r1, r2
 801f0b0:	9903      	ldr	r1, [sp, #12]
 801f0b2:	087a      	lsrs	r2, r7, #1
 801f0b4:	07ff      	lsls	r7, r7, #31
 801f0b6:	5c8a      	ldrb	r2, [r1, r2]
 801f0b8:	bf54      	ite	pl
 801f0ba:	f002 020f 	andpl.w	r2, r2, #15
 801f0be:	1112      	asrmi	r2, r2, #4
 801f0c0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f0c4:	b2d2      	uxtb	r2, r2
 801f0c6:	2a00      	cmp	r2, #0
 801f0c8:	d041      	beq.n	801f14e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801f0ca:	4926      	ldr	r1, [pc, #152]	; (801f164 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801f0cc:	680f      	ldr	r7, [r1, #0]
 801f0ce:	9905      	ldr	r1, [sp, #20]
 801f0d0:	fa5f fb87 	uxtb.w	fp, r7
 801f0d4:	434a      	muls	r2, r1
 801f0d6:	f102 0c01 	add.w	ip, r2, #1
 801f0da:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801f0de:	f896 c000 	ldrb.w	ip, [r6]
 801f0e2:	1212      	asrs	r2, r2, #8
 801f0e4:	fa1f fa82 	uxth.w	sl, r2
 801f0e8:	43d2      	mvns	r2, r2
 801f0ea:	fb1b fb0a 	smulbb	fp, fp, sl
 801f0ee:	b2d2      	uxtb	r2, r2
 801f0f0:	fb0c bc02 	mla	ip, ip, r2, fp
 801f0f4:	fa1f fc8c 	uxth.w	ip, ip
 801f0f8:	f10c 0b01 	add.w	fp, ip, #1
 801f0fc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f100:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801f104:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801f108:	fb1b fb0a 	smulbb	fp, fp, sl
 801f10c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f110:	fb17 fa0a 	smulbb	sl, r7, sl
 801f114:	78b7      	ldrb	r7, [r6, #2]
 801f116:	f886 c000 	strb.w	ip, [r6]
 801f11a:	f896 c001 	ldrb.w	ip, [r6, #1]
 801f11e:	fb07 aa02 	mla	sl, r7, r2, sl
 801f122:	fb0c bc02 	mla	ip, ip, r2, fp
 801f126:	fa1f fa8a 	uxth.w	sl, sl
 801f12a:	fa1f fc8c 	uxth.w	ip, ip
 801f12e:	f10a 0701 	add.w	r7, sl, #1
 801f132:	f10c 0b01 	add.w	fp, ip, #1
 801f136:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f13a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f13e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f142:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f146:	f886 a002 	strb.w	sl, [r6, #2]
 801f14a:	f886 c001 	strb.w	ip, [r6, #1]
 801f14e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f150:	3603      	adds	r6, #3
 801f152:	f109 39ff 	add.w	r9, r9, #4294967295
 801f156:	4414      	add	r4, r2
 801f158:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f15a:	4410      	add	r0, r2
 801f15c:	e6ed      	b.n	801ef3a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801f15e:	b007      	add	sp, #28
 801f160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f164:	2000b33c 	.word	0x2000b33c

0801f168 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f16c:	b087      	sub	sp, #28
 801f16e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f172:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f174:	9205      	str	r2, [sp, #20]
 801f176:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801f17a:	6860      	ldr	r0, [r4, #4]
 801f17c:	9202      	str	r2, [sp, #8]
 801f17e:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801f182:	9101      	str	r1, [sp, #4]
 801f184:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801f188:	fb00 2606 	mla	r6, r0, r6, r2
 801f18c:	6822      	ldr	r2, [r4, #0]
 801f18e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f192:	4416      	add	r6, r2
 801f194:	f108 0201 	add.w	r2, r8, #1
 801f198:	f022 0201 	bic.w	r2, r2, #1
 801f19c:	9203      	str	r2, [sp, #12]
 801f19e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f1a0:	6812      	ldr	r2, [r2, #0]
 801f1a2:	9204      	str	r2, [sp, #16]
 801f1a4:	9a01      	ldr	r2, [sp, #4]
 801f1a6:	2a00      	cmp	r2, #0
 801f1a8:	dc03      	bgt.n	801f1b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801f1aa:	9a05      	ldr	r2, [sp, #20]
 801f1ac:	2a00      	cmp	r2, #0
 801f1ae:	f340 813a 	ble.w	801f426 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801f1b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f1b4:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801f1b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f1ba:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	dd0f      	ble.n	801f1e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f1c2:	142a      	asrs	r2, r5, #16
 801f1c4:	d406      	bmi.n	801f1d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f1c6:	4590      	cmp	r8, r2
 801f1c8:	dd04      	ble.n	801f1d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f1ca:	1422      	asrs	r2, r4, #16
 801f1cc:	d402      	bmi.n	801f1d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f1ce:	9802      	ldr	r0, [sp, #8]
 801f1d0:	4282      	cmp	r2, r0
 801f1d2:	db07      	blt.n	801f1e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801f1d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f1d6:	3b01      	subs	r3, #1
 801f1d8:	3603      	adds	r6, #3
 801f1da:	4415      	add	r5, r2
 801f1dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f1de:	4414      	add	r4, r2
 801f1e0:	e7ed      	b.n	801f1be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801f1e2:	d073      	beq.n	801f2cc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801f1e4:	1e5a      	subs	r2, r3, #1
 801f1e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f1e8:	fb00 5002 	mla	r0, r0, r2, r5
 801f1ec:	1400      	asrs	r0, r0, #16
 801f1ee:	d464      	bmi.n	801f2ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801f1f0:	4580      	cmp	r8, r0
 801f1f2:	dd62      	ble.n	801f2ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801f1f4:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f1f6:	fb00 4202 	mla	r2, r0, r2, r4
 801f1fa:	1412      	asrs	r2, r2, #16
 801f1fc:	d45d      	bmi.n	801f2ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801f1fe:	9802      	ldr	r0, [sp, #8]
 801f200:	4282      	cmp	r2, r0
 801f202:	da5a      	bge.n	801f2ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801f204:	1cf0      	adds	r0, r6, #3
 801f206:	469a      	mov	sl, r3
 801f208:	f1ba 0f00 	cmp.w	sl, #0
 801f20c:	dd59      	ble.n	801f2c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801f20e:	142a      	asrs	r2, r5, #16
 801f210:	9903      	ldr	r1, [sp, #12]
 801f212:	1427      	asrs	r7, r4, #16
 801f214:	fb01 2707 	mla	r7, r1, r7, r2
 801f218:	9904      	ldr	r1, [sp, #16]
 801f21a:	087a      	lsrs	r2, r7, #1
 801f21c:	5c8a      	ldrb	r2, [r1, r2]
 801f21e:	07f9      	lsls	r1, r7, #31
 801f220:	bf54      	ite	pl
 801f222:	f002 020f 	andpl.w	r2, r2, #15
 801f226:	1112      	asrmi	r2, r2, #4
 801f228:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f22c:	b2d2      	uxtb	r2, r2
 801f22e:	2a00      	cmp	r2, #0
 801f230:	d03b      	beq.n	801f2aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f232:	497e      	ldr	r1, [pc, #504]	; (801f42c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801f234:	2aff      	cmp	r2, #255	; 0xff
 801f236:	680f      	ldr	r7, [r1, #0]
 801f238:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801f23c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801f240:	b2ff      	uxtb	r7, r7
 801f242:	f000 80e9 	beq.w	801f418 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f246:	fa1f fe82 	uxth.w	lr, r2
 801f24a:	43d2      	mvns	r2, r2
 801f24c:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801f250:	fb17 f70e 	smulbb	r7, r7, lr
 801f254:	b2d2      	uxtb	r2, r2
 801f256:	fb19 f90e 	smulbb	r9, r9, lr
 801f25a:	fb0c 7702 	mla	r7, ip, r2, r7
 801f25e:	fb1b fe0e 	smulbb	lr, fp, lr
 801f262:	b2bf      	uxth	r7, r7
 801f264:	f107 0c01 	add.w	ip, r7, #1
 801f268:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f26c:	123f      	asrs	r7, r7, #8
 801f26e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f272:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801f276:	fb07 9902 	mla	r9, r7, r2, r9
 801f27a:	fa1f f989 	uxth.w	r9, r9
 801f27e:	f109 0701 	add.w	r7, r9, #1
 801f282:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f286:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801f28a:	fb07 ee02 	mla	lr, r7, r2, lr
 801f28e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f292:	fa1f fe8e 	uxth.w	lr, lr
 801f296:	f800 9c02 	strb.w	r9, [r0, #-2]
 801f29a:	f10e 0201 	add.w	r2, lr, #1
 801f29e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801f2a2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f2a6:	f800 ec01 	strb.w	lr, [r0, #-1]
 801f2aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f2ac:	3003      	adds	r0, #3
 801f2ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f2b2:	4415      	add	r5, r2
 801f2b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f2b6:	4414      	add	r4, r2
 801f2b8:	e7a6      	b.n	801f208 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801f2ba:	2700      	movs	r7, #0
 801f2bc:	1bda      	subs	r2, r3, r7
 801f2be:	2a00      	cmp	r2, #0
 801f2c0:	dc40      	bgt.n	801f344 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801f2c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f2c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f2ca:	441e      	add	r6, r3
 801f2cc:	9b01      	ldr	r3, [sp, #4]
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	f340 80a9 	ble.w	801f426 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801f2d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f2d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f2da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f2de:	eeb0 6a62 	vmov.f32	s12, s5
 801f2e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f2e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f2ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f2ee:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f2f2:	eeb0 6a43 	vmov.f32	s12, s6
 801f2f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f2fa:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f2fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f302:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f306:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f30a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f30e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f312:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f316:	ee12 2a90 	vmov	r2, s5
 801f31a:	eef0 2a47 	vmov.f32	s5, s14
 801f31e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f322:	ee13 2a10 	vmov	r2, s6
 801f326:	9313      	str	r3, [sp, #76]	; 0x4c
 801f328:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f32a:	eeb0 3a67 	vmov.f32	s6, s15
 801f32e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f332:	9314      	str	r3, [sp, #80]	; 0x50
 801f334:	9b01      	ldr	r3, [sp, #4]
 801f336:	9a05      	ldr	r2, [sp, #20]
 801f338:	3b01      	subs	r3, #1
 801f33a:	9301      	str	r3, [sp, #4]
 801f33c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f33e:	bf08      	it	eq
 801f340:	4613      	moveq	r3, r2
 801f342:	e72f      	b.n	801f1a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801f344:	142a      	asrs	r2, r5, #16
 801f346:	d458      	bmi.n	801f3fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f348:	4590      	cmp	r8, r2
 801f34a:	dd56      	ble.n	801f3fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f34c:	1420      	asrs	r0, r4, #16
 801f34e:	d454      	bmi.n	801f3fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f350:	9902      	ldr	r1, [sp, #8]
 801f352:	4288      	cmp	r0, r1
 801f354:	da51      	bge.n	801f3fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f356:	9903      	ldr	r1, [sp, #12]
 801f358:	fb00 2001 	mla	r0, r0, r1, r2
 801f35c:	9904      	ldr	r1, [sp, #16]
 801f35e:	0842      	lsrs	r2, r0, #1
 801f360:	07c0      	lsls	r0, r0, #31
 801f362:	5c8a      	ldrb	r2, [r1, r2]
 801f364:	bf54      	ite	pl
 801f366:	f002 020f 	andpl.w	r2, r2, #15
 801f36a:	1112      	asrmi	r2, r2, #4
 801f36c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f370:	b2d2      	uxtb	r2, r2
 801f372:	2a00      	cmp	r2, #0
 801f374:	d041      	beq.n	801f3fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f376:	492d      	ldr	r1, [pc, #180]	; (801f42c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801f378:	2aff      	cmp	r2, #255	; 0xff
 801f37a:	6808      	ldr	r0, [r1, #0]
 801f37c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801f380:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f384:	fa5f fc80 	uxtb.w	ip, r0
 801f388:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801f38c:	d03b      	beq.n	801f406 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801f38e:	fa1f f982 	uxth.w	r9, r2
 801f392:	4438      	add	r0, r7
 801f394:	43d2      	mvns	r2, r2
 801f396:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f39a:	fb1c fc09 	smulbb	ip, ip, r9
 801f39e:	fb1a fa09 	smulbb	sl, sl, r9
 801f3a2:	b2d2      	uxtb	r2, r2
 801f3a4:	fb1b f909 	smulbb	r9, fp, r9
 801f3a8:	fb0e cc02 	mla	ip, lr, r2, ip
 801f3ac:	fa1f fc8c 	uxth.w	ip, ip
 801f3b0:	f10c 0e01 	add.w	lr, ip, #1
 801f3b4:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801f3b8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f3bc:	f806 c000 	strb.w	ip, [r6, r0]
 801f3c0:	4430      	add	r0, r6
 801f3c2:	f890 c001 	ldrb.w	ip, [r0, #1]
 801f3c6:	fb0c aa02 	mla	sl, ip, r2, sl
 801f3ca:	fa1f fa8a 	uxth.w	sl, sl
 801f3ce:	f10a 0c01 	add.w	ip, sl, #1
 801f3d2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f3d6:	f890 c002 	ldrb.w	ip, [r0, #2]
 801f3da:	fb0c 9902 	mla	r9, ip, r2, r9
 801f3de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f3e2:	fa1f f989 	uxth.w	r9, r9
 801f3e6:	f880 a001 	strb.w	sl, [r0, #1]
 801f3ea:	f109 0201 	add.w	r2, r9, #1
 801f3ee:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801f3f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f3f6:	f880 9002 	strb.w	r9, [r0, #2]
 801f3fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f3fc:	3701      	adds	r7, #1
 801f3fe:	4415      	add	r5, r2
 801f400:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f402:	4414      	add	r4, r2
 801f404:	e75a      	b.n	801f2bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801f406:	4438      	add	r0, r7
 801f408:	f806 c000 	strb.w	ip, [r6, r0]
 801f40c:	4430      	add	r0, r6
 801f40e:	f880 a001 	strb.w	sl, [r0, #1]
 801f412:	f880 b002 	strb.w	fp, [r0, #2]
 801f416:	e7f0      	b.n	801f3fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f418:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f41c:	f800 9c02 	strb.w	r9, [r0, #-2]
 801f420:	f800 bc01 	strb.w	fp, [r0, #-1]
 801f424:	e741      	b.n	801f2aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f426:	b007      	add	sp, #28
 801f428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f42c:	2000b33c 	.word	0x2000b33c

0801f430 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f430:	4770      	bx	lr

0801f432 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f432:	4770      	bx	lr

0801f434 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f434:	4770      	bx	lr

0801f436 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f436:	4770      	bx	lr

0801f438 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f438:	4770      	bx	lr

0801f43a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f43a:	4770      	bx	lr

0801f43c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f43c:	4770      	bx	lr

0801f43e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f43e:	4770      	bx	lr

0801f440 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f440:	4770      	bx	lr

0801f442 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f442:	4770      	bx	lr

0801f444 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f444:	4770      	bx	lr

0801f446 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f446:	4770      	bx	lr

0801f448 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f448:	4770      	bx	lr

0801f44a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f44a:	4770      	bx	lr

0801f44c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f44c:	4770      	bx	lr

0801f44e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f44e:	4770      	bx	lr

0801f450 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f450:	4770      	bx	lr

0801f452 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f452:	4770      	bx	lr

0801f454 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f454:	4770      	bx	lr

0801f456 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f456:	4770      	bx	lr

0801f458 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f458:	2bff      	cmp	r3, #255	; 0xff
 801f45a:	b508      	push	{r3, lr}
 801f45c:	d04f      	beq.n	801f4fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801f45e:	2a2c      	cmp	r2, #44	; 0x2c
 801f460:	d032      	beq.n	801f4c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801f462:	d80f      	bhi.n	801f484 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801f464:	2a08      	cmp	r2, #8
 801f466:	d046      	beq.n	801f4f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f468:	d805      	bhi.n	801f476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801f46a:	2a04      	cmp	r2, #4
 801f46c:	d041      	beq.n	801f4f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f46e:	2a05      	cmp	r2, #5
 801f470:	d03d      	beq.n	801f4ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801f472:	2000      	movs	r0, #0
 801f474:	e027      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f476:	2a0a      	cmp	r2, #10
 801f478:	d03d      	beq.n	801f4f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f47a:	d301      	bcc.n	801f480 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801f47c:	2a0b      	cmp	r2, #11
 801f47e:	d1f8      	bne.n	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f480:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f482:	e020      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f484:	2a30      	cmp	r2, #48	; 0x30
 801f486:	d038      	beq.n	801f4fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f488:	d808      	bhi.n	801f49c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801f48a:	2a2e      	cmp	r2, #46	; 0x2e
 801f48c:	684b      	ldr	r3, [r1, #4]
 801f48e:	d029      	beq.n	801f4e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801f490:	d90b      	bls.n	801f4aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801f492:	781b      	ldrb	r3, [r3, #0]
 801f494:	2b00      	cmp	r3, #0
 801f496:	d1ec      	bne.n	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f498:	6a00      	ldr	r0, [r0, #32]
 801f49a:	e014      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f49c:	2a32      	cmp	r2, #50	; 0x32
 801f49e:	d02c      	beq.n	801f4fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f4a0:	d301      	bcc.n	801f4a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801f4a2:	2a33      	cmp	r2, #51	; 0x33
 801f4a4:	d1e5      	bne.n	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f4a6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801f4a8:	e00d      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f4aa:	781b      	ldrb	r3, [r3, #0]
 801f4ac:	2b01      	cmp	r3, #1
 801f4ae:	d009      	beq.n	801f4c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801f4b0:	d3f2      	bcc.n	801f498 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801f4b2:	2b02      	cmp	r3, #2
 801f4b4:	d1dd      	bne.n	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f4b6:	4b39      	ldr	r3, [pc, #228]	; (801f59c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801f4b8:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 801f4bc:	4a38      	ldr	r2, [pc, #224]	; (801f5a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801f4be:	4839      	ldr	r0, [pc, #228]	; (801f5a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801f4c0:	f008 f874 	bl	80275ac <__assert_func>
 801f4c4:	6900      	ldr	r0, [r0, #16]
 801f4c6:	bd08      	pop	{r3, pc}
 801f4c8:	684b      	ldr	r3, [r1, #4]
 801f4ca:	781b      	ldrb	r3, [r3, #0]
 801f4cc:	2b01      	cmp	r3, #1
 801f4ce:	d007      	beq.n	801f4e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801f4d0:	d30b      	bcc.n	801f4ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801f4d2:	2b02      	cmp	r3, #2
 801f4d4:	d1cd      	bne.n	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f4d6:	4b31      	ldr	r3, [pc, #196]	; (801f59c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801f4d8:	f44f 6181 	mov.w	r1, #1032	; 0x408
 801f4dc:	4a30      	ldr	r2, [pc, #192]	; (801f5a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801f4de:	e7ee      	b.n	801f4be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f4e0:	6880      	ldr	r0, [r0, #8]
 801f4e2:	e7f0      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f4e4:	781b      	ldrb	r3, [r3, #0]
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	d1c3      	bne.n	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f4ea:	6980      	ldr	r0, [r0, #24]
 801f4ec:	e7eb      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f4ee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801f4f0:	e7e9      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f4f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801f4f4:	e7e7      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f4f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801f4f8:	e7e5      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f4fa:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801f4fc:	e7e3      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f4fe:	2a2c      	cmp	r2, #44	; 0x2c
 801f500:	d030      	beq.n	801f564 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801f502:	d80f      	bhi.n	801f524 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801f504:	2a08      	cmp	r2, #8
 801f506:	d044      	beq.n	801f592 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f508:	d805      	bhi.n	801f516 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801f50a:	2a04      	cmp	r2, #4
 801f50c:	d03f      	beq.n	801f58e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801f50e:	2a05      	cmp	r2, #5
 801f510:	d1af      	bne.n	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f512:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801f514:	e7d7      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f516:	2a0a      	cmp	r2, #10
 801f518:	d03b      	beq.n	801f592 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f51a:	d301      	bcc.n	801f520 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801f51c:	2a0b      	cmp	r2, #11
 801f51e:	d1a8      	bne.n	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f520:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801f522:	e7d0      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f524:	2a30      	cmp	r2, #48	; 0x30
 801f526:	d036      	beq.n	801f596 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f528:	d808      	bhi.n	801f53c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801f52a:	2a2e      	cmp	r2, #46	; 0x2e
 801f52c:	684b      	ldr	r3, [r1, #4]
 801f52e:	d028      	beq.n	801f582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801f530:	d90b      	bls.n	801f54a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801f532:	781b      	ldrb	r3, [r3, #0]
 801f534:	2b00      	cmp	r3, #0
 801f536:	d19c      	bne.n	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f538:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f53a:	e7c4      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f53c:	2a32      	cmp	r2, #50	; 0x32
 801f53e:	d02a      	beq.n	801f596 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f540:	d301      	bcc.n	801f546 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801f542:	2a33      	cmp	r2, #51	; 0x33
 801f544:	d195      	bne.n	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f546:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801f548:	e7bd      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f54a:	781b      	ldrb	r3, [r3, #0]
 801f54c:	2b01      	cmp	r3, #1
 801f54e:	d007      	beq.n	801f560 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801f550:	d3f2      	bcc.n	801f538 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801f552:	2b02      	cmp	r3, #2
 801f554:	d18d      	bne.n	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f556:	4b11      	ldr	r3, [pc, #68]	; (801f59c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801f558:	f240 4139 	movw	r1, #1081	; 0x439
 801f55c:	4a10      	ldr	r2, [pc, #64]	; (801f5a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801f55e:	e7ae      	b.n	801f4be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f560:	6940      	ldr	r0, [r0, #20]
 801f562:	e7b0      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f564:	684b      	ldr	r3, [r1, #4]
 801f566:	781b      	ldrb	r3, [r3, #0]
 801f568:	2b01      	cmp	r3, #1
 801f56a:	d008      	beq.n	801f57e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801f56c:	d30d      	bcc.n	801f58a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f56e:	2b02      	cmp	r3, #2
 801f570:	f47f af7f 	bne.w	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f574:	4b09      	ldr	r3, [pc, #36]	; (801f59c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801f576:	f240 4145 	movw	r1, #1093	; 0x445
 801f57a:	4a09      	ldr	r2, [pc, #36]	; (801f5a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801f57c:	e79f      	b.n	801f4be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f57e:	68c0      	ldr	r0, [r0, #12]
 801f580:	e7a1      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f582:	781b      	ldrb	r3, [r3, #0]
 801f584:	2b00      	cmp	r3, #0
 801f586:	f47f af74 	bne.w	801f472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f58a:	69c0      	ldr	r0, [r0, #28]
 801f58c:	e79b      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f58e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801f590:	e799      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f592:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801f594:	e797      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f596:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801f598:	e795      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f59a:	bf00      	nop
 801f59c:	0802c503 	.word	0x0802c503
 801f5a0:	0802ccb3 	.word	0x0802ccb3
 801f5a4:	0802c54f 	.word	0x0802c54f

0801f5a8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801f5a8:	b508      	push	{r3, lr}
 801f5aa:	4b06      	ldr	r3, [pc, #24]	; (801f5c4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801f5ac:	8818      	ldrh	r0, [r3, #0]
 801f5ae:	b928      	cbnz	r0, 801f5bc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801f5b0:	4b05      	ldr	r3, [pc, #20]	; (801f5c8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801f5b2:	2155      	movs	r1, #85	; 0x55
 801f5b4:	4a05      	ldr	r2, [pc, #20]	; (801f5cc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801f5b6:	4806      	ldr	r0, [pc, #24]	; (801f5d0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801f5b8:	f007 fff8 	bl	80275ac <__assert_func>
 801f5bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f5c0:	b280      	uxth	r0, r0
 801f5c2:	bd08      	pop	{r3, pc}
 801f5c4:	2000b30e 	.word	0x2000b30e
 801f5c8:	0802c79c 	.word	0x0802c79c
 801f5cc:	0802cc78 	.word	0x0802cc78
 801f5d0:	0802c7de 	.word	0x0802c7de

0801f5d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5d8:	4616      	mov	r6, r2
 801f5da:	b087      	sub	sp, #28
 801f5dc:	461f      	mov	r7, r3
 801f5de:	b34b      	cbz	r3, 801f634 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f5e0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	dd25      	ble.n	801f634 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f5e8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f5ec:	2b00      	cmp	r3, #0
 801f5ee:	dd21      	ble.n	801f634 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f5f0:	6808      	ldr	r0, [r1, #0]
 801f5f2:	ab04      	add	r3, sp, #16
 801f5f4:	6849      	ldr	r1, [r1, #4]
 801f5f6:	4c5a      	ldr	r4, [pc, #360]	; (801f760 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801f5f8:	c303      	stmia	r3!, {r0, r1}
 801f5fa:	a804      	add	r0, sp, #16
 801f5fc:	f7fb fccc 	bl	801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f600:	6820      	ldr	r0, [r4, #0]
 801f602:	6803      	ldr	r3, [r0, #0]
 801f604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f606:	4798      	blx	r3
 801f608:	2fff      	cmp	r7, #255	; 0xff
 801f60a:	4623      	mov	r3, r4
 801f60c:	d015      	beq.n	801f63a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801f60e:	f010 0f08 	tst.w	r0, #8
 801f612:	d015      	beq.n	801f640 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801f614:	6818      	ldr	r0, [r3, #0]
 801f616:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801f61a:	6801      	ldr	r1, [r0, #0]
 801f61c:	9401      	str	r4, [sp, #4]
 801f61e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801f622:	9702      	str	r7, [sp, #8]
 801f624:	9400      	str	r4, [sp, #0]
 801f626:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f62a:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801f62c:	4631      	mov	r1, r6
 801f62e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f632:	47a0      	blx	r4
 801f634:	b007      	add	sp, #28
 801f636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f63a:	f010 0f02 	tst.w	r0, #2
 801f63e:	e7e8      	b.n	801f612 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3e>
 801f640:	6818      	ldr	r0, [r3, #0]
 801f642:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801f646:	6803      	ldr	r3, [r0, #0]
 801f648:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801f64c:	6a1b      	ldr	r3, [r3, #32]
 801f64e:	4798      	blx	r3
 801f650:	4944      	ldr	r1, [pc, #272]	; (801f764 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>)
 801f652:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801f656:	2fff      	cmp	r7, #255	; 0xff
 801f658:	f8b1 c000 	ldrh.w	ip, [r1]
 801f65c:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801f660:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f664:	4688      	mov	r8, r1
 801f666:	fb0c 2303 	mla	r3, ip, r3, r2
 801f66a:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801f66e:	b2f2      	uxtb	r2, r6
 801f670:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801f674:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f678:	4418      	add	r0, r3
 801f67a:	d112      	bne.n	801f6a2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xce>
 801f67c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f680:	2100      	movs	r1, #0
 801f682:	42a9      	cmp	r1, r5
 801f684:	da66      	bge.n	801f754 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801f686:	4603      	mov	r3, r0
 801f688:	2700      	movs	r7, #0
 801f68a:	42a7      	cmp	r7, r4
 801f68c:	f103 0303 	add.w	r3, r3, #3
 801f690:	da57      	bge.n	801f742 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801f692:	f803 2c03 	strb.w	r2, [r3, #-3]
 801f696:	3701      	adds	r7, #1
 801f698:	f803 ec02 	strb.w	lr, [r3, #-2]
 801f69c:	f803 cc01 	strb.w	ip, [r3, #-1]
 801f6a0:	e7f3      	b.n	801f68a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801f6a2:	b2bb      	uxth	r3, r7
 801f6a4:	f04f 0800 	mov.w	r8, #0
 801f6a8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f6ac:	fb0c fc03 	mul.w	ip, ip, r3
 801f6b0:	fb0e fe03 	mul.w	lr, lr, r3
 801f6b4:	435a      	muls	r2, r3
 801f6b6:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801f6ba:	460f      	mov	r7, r1
 801f6bc:	b29b      	uxth	r3, r3
 801f6be:	45a8      	cmp	r8, r5
 801f6c0:	da48      	bge.n	801f754 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801f6c2:	4601      	mov	r1, r0
 801f6c4:	f04f 0a00 	mov.w	sl, #0
 801f6c8:	45a2      	cmp	sl, r4
 801f6ca:	f101 0103 	add.w	r1, r1, #3
 801f6ce:	da2f      	bge.n	801f730 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>
 801f6d0:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801f6d4:	f10a 0a01 	add.w	sl, sl, #1
 801f6d8:	fb19 f903 	smulbb	r9, r9, r3
 801f6dc:	4491      	add	r9, r2
 801f6de:	fa1f f989 	uxth.w	r9, r9
 801f6e2:	f109 0b01 	add.w	fp, r9, #1
 801f6e6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f6ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f6ee:	f801 9c03 	strb.w	r9, [r1, #-3]
 801f6f2:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801f6f6:	fb19 f903 	smulbb	r9, r9, r3
 801f6fa:	44f1      	add	r9, lr
 801f6fc:	fa1f f989 	uxth.w	r9, r9
 801f700:	f109 0b01 	add.w	fp, r9, #1
 801f704:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f708:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f70c:	f801 9c02 	strb.w	r9, [r1, #-2]
 801f710:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801f714:	fb19 f903 	smulbb	r9, r9, r3
 801f718:	44e1      	add	r9, ip
 801f71a:	fa1f f989 	uxth.w	r9, r9
 801f71e:	f109 0b01 	add.w	fp, r9, #1
 801f722:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f726:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f72a:	f801 9c01 	strb.w	r9, [r1, #-1]
 801f72e:	e7cb      	b.n	801f6c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf4>
 801f730:	8839      	ldrh	r1, [r7, #0]
 801f732:	f108 0801 	add.w	r8, r8, #1
 801f736:	1b09      	subs	r1, r1, r4
 801f738:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f73c:	4431      	add	r1, r6
 801f73e:	4408      	add	r0, r1
 801f740:	e7bd      	b.n	801f6be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xea>
 801f742:	f8b8 3000 	ldrh.w	r3, [r8]
 801f746:	3101      	adds	r1, #1
 801f748:	1b1b      	subs	r3, r3, r4
 801f74a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f74e:	4433      	add	r3, r6
 801f750:	4418      	add	r0, r3
 801f752:	e796      	b.n	801f682 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xae>
 801f754:	4b02      	ldr	r3, [pc, #8]	; (801f760 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801f756:	6818      	ldr	r0, [r3, #0]
 801f758:	6803      	ldr	r3, [r0, #0]
 801f75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f75c:	4798      	blx	r3
 801f75e:	e769      	b.n	801f634 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f760:	2000b314 	.word	0x2000b314
 801f764:	2000b30e 	.word	0x2000b30e

0801f768 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f76c:	b08d      	sub	sp, #52	; 0x34
 801f76e:	460c      	mov	r4, r1
 801f770:	4617      	mov	r7, r2
 801f772:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801f776:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801f77a:	2e00      	cmp	r6, #0
 801f77c:	d04a      	beq.n	801f814 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801f77e:	6810      	ldr	r0, [r2, #0]
 801f780:	ad08      	add	r5, sp, #32
 801f782:	6851      	ldr	r1, [r2, #4]
 801f784:	c503      	stmia	r5!, {r0, r1}
 801f786:	6818      	ldr	r0, [r3, #0]
 801f788:	ad0a      	add	r5, sp, #40	; 0x28
 801f78a:	6859      	ldr	r1, [r3, #4]
 801f78c:	c503      	stmia	r5!, {r0, r1}
 801f78e:	a808      	add	r0, sp, #32
 801f790:	f7fb fc02 	bl	801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f794:	4639      	mov	r1, r7
 801f796:	a80a      	add	r0, sp, #40	; 0x28
 801f798:	4f59      	ldr	r7, [pc, #356]	; (801f900 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801f79a:	f7fb fbe5 	bl	801af68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f79e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f7a2:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801f7a6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801f7aa:	6838      	ldr	r0, [r7, #0]
 801f7ac:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f7b0:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801f7b4:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801f7b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f7bc:	440c      	add	r4, r1
 801f7be:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801f7c2:	440a      	add	r2, r1
 801f7c4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f7c8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801f7cc:	4413      	add	r3, r2
 801f7ce:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f7d2:	6803      	ldr	r3, [r0, #0]
 801f7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f7d6:	4798      	blx	r3
 801f7d8:	2eff      	cmp	r6, #255	; 0xff
 801f7da:	f000 8089 	beq.w	801f8f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801f7de:	0743      	lsls	r3, r0, #29
 801f7e0:	d405      	bmi.n	801f7ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801f7e2:	f1b9 0f00 	cmp.w	r9, #0
 801f7e6:	d018      	beq.n	801f81a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801f7e8:	f010 0f10 	tst.w	r0, #16
 801f7ec:	d015      	beq.n	801f81a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801f7ee:	6838      	ldr	r0, [r7, #0]
 801f7f0:	b2ad      	uxth	r5, r5
 801f7f2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f7f6:	6801      	ldr	r1, [r0, #0]
 801f7f8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f7fc:	9500      	str	r5, [sp, #0]
 801f7fe:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801f802:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801f806:	9602      	str	r6, [sp, #8]
 801f808:	fa1f f688 	uxth.w	r6, r8
 801f80c:	9601      	str	r6, [sp, #4]
 801f80e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801f810:	4621      	mov	r1, r4
 801f812:	47a8      	blx	r5
 801f814:	b00d      	add	sp, #52	; 0x34
 801f816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f81a:	6838      	ldr	r0, [r7, #0]
 801f81c:	6803      	ldr	r3, [r0, #0]
 801f81e:	6a1b      	ldr	r3, [r3, #32]
 801f820:	4798      	blx	r3
 801f822:	4a38      	ldr	r2, [pc, #224]	; (801f904 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801f824:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801f828:	2eff      	cmp	r6, #255	; 0xff
 801f82a:	8813      	ldrh	r3, [r2, #0]
 801f82c:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801f830:	fb0c 1303 	mla	r3, ip, r3, r1
 801f834:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801f838:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f83c:	4418      	add	r0, r3
 801f83e:	d032      	beq.n	801f8a6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801f840:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801f844:	f04f 0c00 	mov.w	ip, #0
 801f848:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801f84c:	9306      	str	r3, [sp, #24]
 801f84e:	45c4      	cmp	ip, r8
 801f850:	da49      	bge.n	801f8e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801f852:	4686      	mov	lr, r0
 801f854:	46a1      	mov	r9, r4
 801f856:	eba9 0304 	sub.w	r3, r9, r4
 801f85a:	428b      	cmp	r3, r1
 801f85c:	da13      	bge.n	801f886 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801f85e:	f819 3b01 	ldrb.w	r3, [r9], #1
 801f862:	f89e b000 	ldrb.w	fp, [lr]
 801f866:	9307      	str	r3, [sp, #28]
 801f868:	9b06      	ldr	r3, [sp, #24]
 801f86a:	fb1b fb03 	smulbb	fp, fp, r3
 801f86e:	9b07      	ldr	r3, [sp, #28]
 801f870:	fb03 b306 	mla	r3, r3, r6, fp
 801f874:	b29b      	uxth	r3, r3
 801f876:	f103 0b01 	add.w	fp, r3, #1
 801f87a:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801f87e:	121b      	asrs	r3, r3, #8
 801f880:	f80e 3b01 	strb.w	r3, [lr], #1
 801f884:	e7e7      	b.n	801f856 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801f886:	8813      	ldrh	r3, [r2, #0]
 801f888:	f10c 0c01 	add.w	ip, ip, #1
 801f88c:	1b5b      	subs	r3, r3, r5
 801f88e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f892:	4453      	add	r3, sl
 801f894:	4418      	add	r0, r3
 801f896:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801f89a:	1b5b      	subs	r3, r3, r5
 801f89c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8a0:	4453      	add	r3, sl
 801f8a2:	441c      	add	r4, r3
 801f8a4:	e7d3      	b.n	801f84e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801f8a6:	2600      	movs	r6, #0
 801f8a8:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801f8ac:	4546      	cmp	r6, r8
 801f8ae:	da1a      	bge.n	801f8e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801f8b0:	f100 3eff 	add.w	lr, r0, #4294967295
 801f8b4:	4623      	mov	r3, r4
 801f8b6:	eba3 0904 	sub.w	r9, r3, r4
 801f8ba:	4589      	cmp	r9, r1
 801f8bc:	da04      	bge.n	801f8c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801f8be:	f813 9b01 	ldrb.w	r9, [r3], #1
 801f8c2:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801f8c6:	e7f6      	b.n	801f8b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801f8c8:	8813      	ldrh	r3, [r2, #0]
 801f8ca:	3601      	adds	r6, #1
 801f8cc:	1b5b      	subs	r3, r3, r5
 801f8ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8d2:	4463      	add	r3, ip
 801f8d4:	4418      	add	r0, r3
 801f8d6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801f8da:	1b5b      	subs	r3, r3, r5
 801f8dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8e0:	4463      	add	r3, ip
 801f8e2:	441c      	add	r4, r3
 801f8e4:	e7e2      	b.n	801f8ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801f8e6:	6838      	ldr	r0, [r7, #0]
 801f8e8:	6803      	ldr	r3, [r0, #0]
 801f8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8ec:	4798      	blx	r3
 801f8ee:	e791      	b.n	801f814 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801f8f0:	f1b9 0f00 	cmp.w	r9, #0
 801f8f4:	f47f af78 	bne.w	801f7e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801f8f8:	f010 0f01 	tst.w	r0, #1
 801f8fc:	e776      	b.n	801f7ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801f8fe:	bf00      	nop
 801f900:	2000b314 	.word	0x2000b314
 801f904:	2000b30e 	.word	0x2000b30e

0801f908 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f908:	b510      	push	{r4, lr}
 801f90a:	4604      	mov	r4, r0
 801f90c:	2104      	movs	r1, #4
 801f90e:	f007 fe21 	bl	8027554 <_ZdlPvj>
 801f912:	4620      	mov	r0, r4
 801f914:	bd10      	pop	{r4, pc}

0801f916 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f916:	b510      	push	{r4, lr}
 801f918:	4604      	mov	r4, r0
 801f91a:	2104      	movs	r1, #4
 801f91c:	f007 fe1a 	bl	8027554 <_ZdlPvj>
 801f920:	4620      	mov	r0, r4
 801f922:	bd10      	pop	{r4, pc}

0801f924 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f924:	b510      	push	{r4, lr}
 801f926:	4604      	mov	r4, r0
 801f928:	2104      	movs	r1, #4
 801f92a:	f007 fe13 	bl	8027554 <_ZdlPvj>
 801f92e:	4620      	mov	r0, r4
 801f930:	bd10      	pop	{r4, pc}

0801f932 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f932:	b510      	push	{r4, lr}
 801f934:	4604      	mov	r4, r0
 801f936:	2104      	movs	r1, #4
 801f938:	f007 fe0c 	bl	8027554 <_ZdlPvj>
 801f93c:	4620      	mov	r0, r4
 801f93e:	bd10      	pop	{r4, pc}

0801f940 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f940:	b510      	push	{r4, lr}
 801f942:	4604      	mov	r4, r0
 801f944:	2104      	movs	r1, #4
 801f946:	f007 fe05 	bl	8027554 <_ZdlPvj>
 801f94a:	4620      	mov	r0, r4
 801f94c:	bd10      	pop	{r4, pc}

0801f94e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f94e:	b510      	push	{r4, lr}
 801f950:	4604      	mov	r4, r0
 801f952:	2104      	movs	r1, #4
 801f954:	f007 fdfe 	bl	8027554 <_ZdlPvj>
 801f958:	4620      	mov	r0, r4
 801f95a:	bd10      	pop	{r4, pc}

0801f95c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f95c:	b510      	push	{r4, lr}
 801f95e:	4604      	mov	r4, r0
 801f960:	2104      	movs	r1, #4
 801f962:	f007 fdf7 	bl	8027554 <_ZdlPvj>
 801f966:	4620      	mov	r0, r4
 801f968:	bd10      	pop	{r4, pc}

0801f96a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f96a:	b510      	push	{r4, lr}
 801f96c:	4604      	mov	r4, r0
 801f96e:	2104      	movs	r1, #4
 801f970:	f007 fdf0 	bl	8027554 <_ZdlPvj>
 801f974:	4620      	mov	r0, r4
 801f976:	bd10      	pop	{r4, pc}

0801f978 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f978:	b510      	push	{r4, lr}
 801f97a:	4604      	mov	r4, r0
 801f97c:	2104      	movs	r1, #4
 801f97e:	f007 fde9 	bl	8027554 <_ZdlPvj>
 801f982:	4620      	mov	r0, r4
 801f984:	bd10      	pop	{r4, pc}

0801f986 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f986:	b510      	push	{r4, lr}
 801f988:	4604      	mov	r4, r0
 801f98a:	2104      	movs	r1, #4
 801f98c:	f007 fde2 	bl	8027554 <_ZdlPvj>
 801f990:	4620      	mov	r0, r4
 801f992:	bd10      	pop	{r4, pc}

0801f994 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f994:	b510      	push	{r4, lr}
 801f996:	4604      	mov	r4, r0
 801f998:	2104      	movs	r1, #4
 801f99a:	f007 fddb 	bl	8027554 <_ZdlPvj>
 801f99e:	4620      	mov	r0, r4
 801f9a0:	bd10      	pop	{r4, pc}

0801f9a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f9a2:	b510      	push	{r4, lr}
 801f9a4:	4604      	mov	r4, r0
 801f9a6:	2104      	movs	r1, #4
 801f9a8:	f007 fdd4 	bl	8027554 <_ZdlPvj>
 801f9ac:	4620      	mov	r0, r4
 801f9ae:	bd10      	pop	{r4, pc}

0801f9b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f9b0:	b510      	push	{r4, lr}
 801f9b2:	4604      	mov	r4, r0
 801f9b4:	2104      	movs	r1, #4
 801f9b6:	f007 fdcd 	bl	8027554 <_ZdlPvj>
 801f9ba:	4620      	mov	r0, r4
 801f9bc:	bd10      	pop	{r4, pc}

0801f9be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f9be:	b510      	push	{r4, lr}
 801f9c0:	4604      	mov	r4, r0
 801f9c2:	2104      	movs	r1, #4
 801f9c4:	f007 fdc6 	bl	8027554 <_ZdlPvj>
 801f9c8:	4620      	mov	r0, r4
 801f9ca:	bd10      	pop	{r4, pc}

0801f9cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f9cc:	b510      	push	{r4, lr}
 801f9ce:	4604      	mov	r4, r0
 801f9d0:	2104      	movs	r1, #4
 801f9d2:	f007 fdbf 	bl	8027554 <_ZdlPvj>
 801f9d6:	4620      	mov	r0, r4
 801f9d8:	bd10      	pop	{r4, pc}

0801f9da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f9da:	b510      	push	{r4, lr}
 801f9dc:	4604      	mov	r4, r0
 801f9de:	2104      	movs	r1, #4
 801f9e0:	f007 fdb8 	bl	8027554 <_ZdlPvj>
 801f9e4:	4620      	mov	r0, r4
 801f9e6:	bd10      	pop	{r4, pc}

0801f9e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801f9e8:	b510      	push	{r4, lr}
 801f9ea:	4604      	mov	r4, r0
 801f9ec:	2104      	movs	r1, #4
 801f9ee:	f007 fdb1 	bl	8027554 <_ZdlPvj>
 801f9f2:	4620      	mov	r0, r4
 801f9f4:	bd10      	pop	{r4, pc}

0801f9f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801f9f6:	b510      	push	{r4, lr}
 801f9f8:	4604      	mov	r4, r0
 801f9fa:	2104      	movs	r1, #4
 801f9fc:	f007 fdaa 	bl	8027554 <_ZdlPvj>
 801fa00:	4620      	mov	r0, r4
 801fa02:	bd10      	pop	{r4, pc}

0801fa04 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801fa04:	b510      	push	{r4, lr}
 801fa06:	4604      	mov	r4, r0
 801fa08:	2104      	movs	r1, #4
 801fa0a:	f007 fda3 	bl	8027554 <_ZdlPvj>
 801fa0e:	4620      	mov	r0, r4
 801fa10:	bd10      	pop	{r4, pc}

0801fa12 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801fa12:	b510      	push	{r4, lr}
 801fa14:	4604      	mov	r4, r0
 801fa16:	2104      	movs	r1, #4
 801fa18:	f007 fd9c 	bl	8027554 <_ZdlPvj>
 801fa1c:	4620      	mov	r0, r4
 801fa1e:	bd10      	pop	{r4, pc}

0801fa20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa24:	4d9e      	ldr	r5, [pc, #632]	; (801fca0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801fa26:	4690      	mov	r8, r2
 801fa28:	b08f      	sub	sp, #60	; 0x3c
 801fa2a:	4604      	mov	r4, r0
 801fa2c:	682a      	ldr	r2, [r5, #0]
 801fa2e:	4689      	mov	r9, r1
 801fa30:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801fa34:	2a02      	cmp	r2, #2
 801fa36:	d106      	bne.n	801fa46 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801fa38:	4b9a      	ldr	r3, [pc, #616]	; (801fca4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801fa3a:	f240 11ef 	movw	r1, #495	; 0x1ef
 801fa3e:	4a9a      	ldr	r2, [pc, #616]	; (801fca8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801fa40:	489a      	ldr	r0, [pc, #616]	; (801fcac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801fa42:	f007 fdb3 	bl	80275ac <__assert_func>
 801fa46:	ae0e      	add	r6, sp, #56	; 0x38
 801fa48:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801fa4c:	4630      	mov	r0, r6
 801fa4e:	f7fe f8b1 	bl	801dbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fa52:	6823      	ldr	r3, [r4, #0]
 801fa54:	4607      	mov	r7, r0
 801fa56:	4620      	mov	r0, r4
 801fa58:	6a1b      	ldr	r3, [r3, #32]
 801fa5a:	4798      	blx	r3
 801fa5c:	4287      	cmp	r7, r0
 801fa5e:	d004      	beq.n	801fa6a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801fa60:	4b93      	ldr	r3, [pc, #588]	; (801fcb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801fa62:	f240 11f1 	movw	r1, #497	; 0x1f1
 801fa66:	4a90      	ldr	r2, [pc, #576]	; (801fca8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801fa68:	e7ea      	b.n	801fa40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801fa6a:	4630      	mov	r0, r6
 801fa6c:	f7fe f81e 	bl	801daac <_ZNK8touchgfx6Bitmap7getDataEv>
 801fa70:	4607      	mov	r7, r0
 801fa72:	b920      	cbnz	r0, 801fa7e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801fa74:	4b8f      	ldr	r3, [pc, #572]	; (801fcb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801fa76:	f240 11f3 	movw	r1, #499	; 0x1f3
 801fa7a:	4a8b      	ldr	r2, [pc, #556]	; (801fca8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801fa7c:	e7e0      	b.n	801fa40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801fa7e:	f8d8 0000 	ldr.w	r0, [r8]
 801fa82:	ab06      	add	r3, sp, #24
 801fa84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fa88:	f9b8 a000 	ldrsh.w	sl, [r8]
 801fa8c:	c303      	stmia	r3!, {r0, r1}
 801fa8e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801fa92:	ab08      	add	r3, sp, #32
 801fa94:	f8d9 0000 	ldr.w	r0, [r9]
 801fa98:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801fa9c:	c303      	stmia	r3!, {r0, r1}
 801fa9e:	4630      	mov	r0, r6
 801faa0:	f7fd ff36 	bl	801d910 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801faa4:	4680      	mov	r8, r0
 801faa6:	4630      	mov	r0, r6
 801faa8:	4e83      	ldr	r6, [pc, #524]	; (801fcb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801faaa:	f7fd ff6b 	bl	801d984 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801faae:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801fab2:	f10d 0920 	add.w	r9, sp, #32
 801fab6:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801faba:	a806      	add	r0, sp, #24
 801fabc:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801fac0:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801fac4:	f7fb fa68 	bl	801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fac8:	4648      	mov	r0, r9
 801faca:	f7fb fa65 	bl	801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801face:	a80a      	add	r0, sp, #40	; 0x28
 801fad0:	f7fb fa62 	bl	801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fad4:	4b79      	ldr	r3, [pc, #484]	; (801fcbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801fad6:	2100      	movs	r1, #0
 801fad8:	f9b6 2000 	ldrsh.w	r2, [r6]
 801fadc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fae0:	4648      	mov	r0, r9
 801fae2:	910c      	str	r1, [sp, #48]	; 0x30
 801fae4:	a90c      	add	r1, sp, #48	; 0x30
 801fae6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801faea:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801faee:	f7f7 ff5b 	bl	80179a8 <_ZN8touchgfx4RectaNERKS0_>
 801faf2:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801faf6:	9602      	str	r6, [sp, #8]
 801faf8:	f1bc 0f00 	cmp.w	ip, #0
 801fafc:	f340 80a4 	ble.w	801fc48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fb00:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801fb04:	2e00      	cmp	r6, #0
 801fb06:	f340 809f 	ble.w	801fc48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fb0a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801fb0e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801fb12:	4288      	cmp	r0, r1
 801fb14:	db36      	blt.n	801fb84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801fb16:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801fb1a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801fb1e:	429a      	cmp	r2, r3
 801fb20:	db30      	blt.n	801fb84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801fb22:	4460      	add	r0, ip
 801fb24:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801fb28:	4461      	add	r1, ip
 801fb2a:	b200      	sxth	r0, r0
 801fb2c:	b209      	sxth	r1, r1
 801fb2e:	4288      	cmp	r0, r1
 801fb30:	dc28      	bgt.n	801fb84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801fb32:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801fb36:	4432      	add	r2, r6
 801fb38:	440b      	add	r3, r1
 801fb3a:	b212      	sxth	r2, r2
 801fb3c:	b21b      	sxth	r3, r3
 801fb3e:	429a      	cmp	r2, r3
 801fb40:	dc20      	bgt.n	801fb84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801fb42:	6823      	ldr	r3, [r4, #0]
 801fb44:	4620      	mov	r0, r4
 801fb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb48:	4798      	blx	r3
 801fb4a:	4682      	mov	sl, r0
 801fb4c:	6828      	ldr	r0, [r5, #0]
 801fb4e:	6803      	ldr	r3, [r0, #0]
 801fb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fb52:	4798      	blx	r3
 801fb54:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801fb58:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801fb5c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801fb60:	9303      	str	r3, [sp, #12]
 801fb62:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801fb66:	1a9b      	subs	r3, r3, r2
 801fb68:	b29b      	uxth	r3, r3
 801fb6a:	b21c      	sxth	r4, r3
 801fb6c:	2c00      	cmp	r4, #0
 801fb6e:	dc0e      	bgt.n	801fb8e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801fb70:	b134      	cbz	r4, 801fb80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801fb72:	f8ad 2020 	strh.w	r2, [sp, #32]
 801fb76:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801fb7a:	4413      	add	r3, r2
 801fb7c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801fb80:	463c      	mov	r4, r7
 801fb82:	e00b      	b.n	801fb9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801fb84:	4b4e      	ldr	r3, [pc, #312]	; (801fcc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801fb86:	f240 2101 	movw	r1, #513	; 0x201
 801fb8a:	4a47      	ldr	r2, [pc, #284]	; (801fca8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801fb8c:	e758      	b.n	801fa40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801fb8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fb92:	ebab 0303 	sub.w	r3, fp, r3
 801fb96:	443c      	add	r4, r7
 801fb98:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801fb9c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801fba0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801fba4:	1a9b      	subs	r3, r3, r2
 801fba6:	b29b      	uxth	r3, r3
 801fba8:	b219      	sxth	r1, r3
 801fbaa:	2900      	cmp	r1, #0
 801fbac:	dd50      	ble.n	801fc50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801fbae:	9a03      	ldr	r2, [sp, #12]
 801fbb0:	fb02 4401 	mla	r4, r2, r1, r4
 801fbb4:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801fbb8:	1ad3      	subs	r3, r2, r3
 801fbba:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801fbbe:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801fbc2:	f1bc 0f00 	cmp.w	ip, #0
 801fbc6:	dd3f      	ble.n	801fc48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fbc8:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801fbcc:	2e00      	cmp	r6, #0
 801fbce:	dd3b      	ble.n	801fc48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fbd0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801fbd4:	2203      	movs	r2, #3
 801fbd6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801fbda:	fb0a f801 	mul.w	r8, sl, r1
 801fbde:	fb13 8802 	smlabb	r8, r3, r2, r8
 801fbe2:	9a02      	ldr	r2, [sp, #8]
 801fbe4:	4480      	add	r8, r0
 801fbe6:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801fbea:	8812      	ldrh	r2, [r2, #0]
 801fbec:	4584      	cmp	ip, r0
 801fbee:	eba2 0303 	sub.w	r3, r2, r3
 801fbf2:	bfa8      	it	ge
 801fbf4:	4684      	movge	ip, r0
 801fbf6:	459c      	cmp	ip, r3
 801fbf8:	bfa8      	it	ge
 801fbfa:	469c      	movge	ip, r3
 801fbfc:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801fc00:	429e      	cmp	r6, r3
 801fc02:	bfa8      	it	ge
 801fc04:	461e      	movge	r6, r3
 801fc06:	4b2d      	ldr	r3, [pc, #180]	; (801fcbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801fc08:	881b      	ldrh	r3, [r3, #0]
 801fc0a:	1a59      	subs	r1, r3, r1
 801fc0c:	4633      	mov	r3, r6
 801fc0e:	428e      	cmp	r6, r1
 801fc10:	bfa8      	it	ge
 801fc12:	460b      	movge	r3, r1
 801fc14:	4562      	cmp	r2, ip
 801fc16:	9302      	str	r3, [sp, #8]
 801fc18:	d12d      	bne.n	801fc76 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801fc1a:	455a      	cmp	r2, fp
 801fc1c:	d12b      	bne.n	801fc76 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801fc1e:	6828      	ldr	r0, [r5, #0]
 801fc20:	6803      	ldr	r3, [r0, #0]
 801fc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fc24:	4798      	blx	r3
 801fc26:	07c3      	lsls	r3, r0, #31
 801fc28:	d51b      	bpl.n	801fc62 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801fc2a:	6828      	ldr	r0, [r5, #0]
 801fc2c:	9b02      	ldr	r3, [sp, #8]
 801fc2e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801fc32:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801fc36:	6803      	ldr	r3, [r0, #0]
 801fc38:	f8cd b000 	str.w	fp, [sp]
 801fc3c:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801fc3e:	4623      	mov	r3, r4
 801fc40:	e899 0006 	ldmia.w	r9, {r1, r2}
 801fc44:	47a8      	blx	r5
 801fc46:	4607      	mov	r7, r0
 801fc48:	4638      	mov	r0, r7
 801fc4a:	b00f      	add	sp, #60	; 0x3c
 801fc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc50:	bf1f      	itttt	ne
 801fc52:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801fc56:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801fc5a:	189b      	addne	r3, r3, r2
 801fc5c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801fc60:	e7ad      	b.n	801fbbe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801fc62:	6828      	ldr	r0, [r5, #0]
 801fc64:	4642      	mov	r2, r8
 801fc66:	4621      	mov	r1, r4
 801fc68:	6803      	ldr	r3, [r0, #0]
 801fc6a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801fc6c:	9b02      	ldr	r3, [sp, #8]
 801fc6e:	fb03 f30a 	mul.w	r3, r3, sl
 801fc72:	47a8      	blx	r5
 801fc74:	e7e8      	b.n	801fc48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fc76:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801fc7a:	f04f 0900 	mov.w	r9, #0
 801fc7e:	9b02      	ldr	r3, [sp, #8]
 801fc80:	454b      	cmp	r3, r9
 801fc82:	dde1      	ble.n	801fc48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fc84:	6828      	ldr	r0, [r5, #0]
 801fc86:	4642      	mov	r2, r8
 801fc88:	4621      	mov	r1, r4
 801fc8a:	44d0      	add	r8, sl
 801fc8c:	6803      	ldr	r3, [r0, #0]
 801fc8e:	f109 0901 	add.w	r9, r9, #1
 801fc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fc94:	461e      	mov	r6, r3
 801fc96:	465b      	mov	r3, fp
 801fc98:	47b0      	blx	r6
 801fc9a:	9b03      	ldr	r3, [sp, #12]
 801fc9c:	441c      	add	r4, r3
 801fc9e:	e7ee      	b.n	801fc7e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801fca0:	2000b314 	.word	0x2000b314
 801fca4:	0802c581 	.word	0x0802c581
 801fca8:	0802cd5d 	.word	0x0802cd5d
 801fcac:	0802c54f 	.word	0x0802c54f
 801fcb0:	0802c633 	.word	0x0802c633
 801fcb4:	0802c688 	.word	0x0802c688
 801fcb8:	2000b30e 	.word	0x2000b30e
 801fcbc:	2000b310 	.word	0x2000b310
 801fcc0:	0802c6c6 	.word	0x0802c6c6

0801fcc4 <_ZN8touchgfx8LCD24bppC1Ev>:
 801fcc4:	4a0b      	ldr	r2, [pc, #44]	; (801fcf4 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801fcc6:	6002      	str	r2, [r0, #0]
 801fcc8:	2200      	movs	r2, #0
 801fcca:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801fcce:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801fcd2:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801fcd6:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801fcda:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801fcde:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801fce2:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801fce6:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801fcea:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801fcee:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801fcf2:	4770      	bx	lr
 801fcf4:	0802c9ac 	.word	0x0802c9ac

0801fcf8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801fcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcfc:	b093      	sub	sp, #76	; 0x4c
 801fcfe:	880c      	ldrh	r4, [r1, #0]
 801fd00:	4605      	mov	r5, r0
 801fd02:	460f      	mov	r7, r1
 801fd04:	4691      	mov	r9, r2
 801fd06:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801fd0a:	b12c      	cbz	r4, 801fd18 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801fd0c:	4b71      	ldr	r3, [pc, #452]	; (801fed4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801fd0e:	2168      	movs	r1, #104	; 0x68
 801fd10:	4a71      	ldr	r2, [pc, #452]	; (801fed8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801fd12:	4872      	ldr	r0, [pc, #456]	; (801fedc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801fd14:	f007 fc4a 	bl	80275ac <__assert_func>
 801fd18:	6810      	ldr	r0, [r2, #0]
 801fd1a:	ae0e      	add	r6, sp, #56	; 0x38
 801fd1c:	6851      	ldr	r1, [r2, #4]
 801fd1e:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801fee4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801fd22:	c603      	stmia	r6!, {r0, r1}
 801fd24:	6818      	ldr	r0, [r3, #0]
 801fd26:	ae10      	add	r6, sp, #64	; 0x40
 801fd28:	6859      	ldr	r1, [r3, #4]
 801fd2a:	c603      	stmia	r6!, {r0, r1}
 801fd2c:	a80e      	add	r0, sp, #56	; 0x38
 801fd2e:	f7fb f933 	bl	801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fd32:	4649      	mov	r1, r9
 801fd34:	a810      	add	r0, sp, #64	; 0x40
 801fd36:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801fee0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801fd3a:	f7fb f915 	bl	801af68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fd3e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801fd42:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801fd46:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801fd4a:	f8d9 0000 	ldr.w	r0, [r9]
 801fd4e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fd52:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801fd56:	440d      	add	r5, r1
 801fd58:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801fd5c:	440a      	add	r2, r1
 801fd5e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801fd62:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801fd66:	4413      	add	r3, r2
 801fd68:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801fd6c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801fd70:	930b      	str	r3, [sp, #44]	; 0x2c
 801fd72:	6803      	ldr	r3, [r0, #0]
 801fd74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801fd78:	4798      	blx	r3
 801fd7a:	2801      	cmp	r0, #1
 801fd7c:	d11e      	bne.n	801fdbc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801fd7e:	220b      	movs	r2, #11
 801fd80:	9008      	str	r0, [sp, #32]
 801fd82:	b2b6      	uxth	r6, r6
 801fd84:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801fd88:	9207      	str	r2, [sp, #28]
 801fd8a:	4629      	mov	r1, r5
 801fd8c:	f8ba 2000 	ldrh.w	r2, [sl]
 801fd90:	f8cd 8010 	str.w	r8, [sp, #16]
 801fd94:	9601      	str	r6, [sp, #4]
 801fd96:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801fd9a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801fd9e:	9203      	str	r2, [sp, #12]
 801fda0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801fda4:	9202      	str	r2, [sp, #8]
 801fda6:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801fdaa:	9200      	str	r2, [sp, #0]
 801fdac:	463a      	mov	r2, r7
 801fdae:	f8d9 0000 	ldr.w	r0, [r9]
 801fdb2:	f7f8 fa47 	bl	8018244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801fdb6:	b013      	add	sp, #76	; 0x4c
 801fdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdbc:	f8d9 0000 	ldr.w	r0, [r9]
 801fdc0:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801fdc4:	6803      	ldr	r3, [r0, #0]
 801fdc6:	6a1b      	ldr	r3, [r3, #32]
 801fdc8:	4798      	blx	r3
 801fdca:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801fdce:	f8ba 3000 	ldrh.w	r3, [sl]
 801fdd2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801fdd6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801fdda:	fb01 2303 	mla	r3, r1, r3, r2
 801fdde:	4621      	mov	r1, r4
 801fde0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fde4:	4418      	add	r0, r3
 801fde6:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801fdea:	930c      	str	r3, [sp, #48]	; 0x30
 801fdec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fdee:	4299      	cmp	r1, r3
 801fdf0:	da6a      	bge.n	801fec8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801fdf2:	1cc2      	adds	r2, r0, #3
 801fdf4:	46aa      	mov	sl, r5
 801fdf6:	ebaa 0305 	sub.w	r3, sl, r5
 801fdfa:	429e      	cmp	r6, r3
 801fdfc:	dd55      	ble.n	801feaa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801fdfe:	2404      	movs	r4, #4
 801fe00:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801fe04:	fb14 4303 	smlabb	r3, r4, r3, r4
 801fe08:	eb07 0e03 	add.w	lr, r7, r3
 801fe0c:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801fe10:	b184      	cbz	r4, 801fe34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801fe12:	2cff      	cmp	r4, #255	; 0xff
 801fe14:	f817 b003 	ldrb.w	fp, [r7, r3]
 801fe18:	d10e      	bne.n	801fe38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801fe1a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fe1e:	d10b      	bne.n	801fe38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801fe20:	f802 bc03 	strb.w	fp, [r2, #-3]
 801fe24:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801fe28:	f802 3c02 	strb.w	r3, [r2, #-2]
 801fe2c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801fe30:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fe34:	3203      	adds	r2, #3
 801fe36:	e7de      	b.n	801fdf6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801fe38:	fb08 f404 	mul.w	r4, r8, r4
 801fe3c:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801fe40:	1c63      	adds	r3, r4, #1
 801fe42:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801fe46:	121b      	asrs	r3, r3, #8
 801fe48:	b29c      	uxth	r4, r3
 801fe4a:	43db      	mvns	r3, r3
 801fe4c:	fb1b fb04 	smulbb	fp, fp, r4
 801fe50:	b2db      	uxtb	r3, r3
 801fe52:	fb0c bc03 	mla	ip, ip, r3, fp
 801fe56:	fa1f fc8c 	uxth.w	ip, ip
 801fe5a:	f10c 0b01 	add.w	fp, ip, #1
 801fe5e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fe62:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801fe66:	fb1b fb03 	smulbb	fp, fp, r3
 801fe6a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fe6e:	f802 cc03 	strb.w	ip, [r2, #-3]
 801fe72:	f89e c001 	ldrb.w	ip, [lr, #1]
 801fe76:	fb0c bc04 	mla	ip, ip, r4, fp
 801fe7a:	fa1f fc8c 	uxth.w	ip, ip
 801fe7e:	f10c 0b01 	add.w	fp, ip, #1
 801fe82:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fe86:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fe8a:	f802 cc02 	strb.w	ip, [r2, #-2]
 801fe8e:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801fe92:	f89e e002 	ldrb.w	lr, [lr, #2]
 801fe96:	fb1c f303 	smulbb	r3, ip, r3
 801fe9a:	fb0e 3304 	mla	r3, lr, r4, r3
 801fe9e:	b29b      	uxth	r3, r3
 801fea0:	1c5c      	adds	r4, r3, #1
 801fea2:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801fea6:	121b      	asrs	r3, r3, #8
 801fea8:	e7c2      	b.n	801fe30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801feaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801feac:	3101      	adds	r1, #1
 801feae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801feb0:	881b      	ldrh	r3, [r3, #0]
 801feb2:	1b9b      	subs	r3, r3, r6
 801feb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801feb8:	4413      	add	r3, r2
 801feba:	4418      	add	r0, r3
 801febc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801fec0:	1b9b      	subs	r3, r3, r6
 801fec2:	444b      	add	r3, r9
 801fec4:	441d      	add	r5, r3
 801fec6:	e791      	b.n	801fdec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801fec8:	4b05      	ldr	r3, [pc, #20]	; (801fee0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801feca:	6818      	ldr	r0, [r3, #0]
 801fecc:	6803      	ldr	r3, [r0, #0]
 801fece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fed0:	4798      	blx	r3
 801fed2:	e770      	b.n	801fdb6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801fed4:	0802c4b3 	.word	0x0802c4b3
 801fed8:	0802cb7f 	.word	0x0802cb7f
 801fedc:	0802c54f 	.word	0x0802c54f
 801fee0:	2000b314 	.word	0x2000b314
 801fee4:	2000b30e 	.word	0x2000b30e

0801fee8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801fee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801feec:	4614      	mov	r4, r2
 801feee:	880a      	ldrh	r2, [r1, #0]
 801fef0:	b091      	sub	sp, #68	; 0x44
 801fef2:	4680      	mov	r8, r0
 801fef4:	2a01      	cmp	r2, #1
 801fef6:	460e      	mov	r6, r1
 801fef8:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801fefc:	d005      	beq.n	801ff0a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801fefe:	4b6d      	ldr	r3, [pc, #436]	; (80200b4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801ff00:	21b6      	movs	r1, #182	; 0xb6
 801ff02:	4a6d      	ldr	r2, [pc, #436]	; (80200b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801ff04:	486d      	ldr	r0, [pc, #436]	; (80200bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801ff06:	f007 fb51 	bl	80275ac <__assert_func>
 801ff0a:	6820      	ldr	r0, [r4, #0]
 801ff0c:	ad0c      	add	r5, sp, #48	; 0x30
 801ff0e:	6861      	ldr	r1, [r4, #4]
 801ff10:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80200c0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801ff14:	c503      	stmia	r5!, {r0, r1}
 801ff16:	6818      	ldr	r0, [r3, #0]
 801ff18:	ad0e      	add	r5, sp, #56	; 0x38
 801ff1a:	6859      	ldr	r1, [r3, #4]
 801ff1c:	c503      	stmia	r5!, {r0, r1}
 801ff1e:	a80c      	add	r0, sp, #48	; 0x30
 801ff20:	f7fb f83a 	bl	801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ff24:	4621      	mov	r1, r4
 801ff26:	a80e      	add	r0, sp, #56	; 0x38
 801ff28:	f7fb f81e 	bl	801af68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ff2c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ff30:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ff34:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ff38:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801ff3c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ff40:	eb08 0401 	add.w	r4, r8, r1
 801ff44:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801ff48:	f8df 8178 	ldr.w	r8, [pc, #376]	; 80200c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801ff4c:	440a      	add	r2, r1
 801ff4e:	f8d8 0000 	ldr.w	r0, [r8]
 801ff52:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801ff56:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ff5a:	4413      	add	r3, r2
 801ff5c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ff60:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801ff64:	930a      	str	r3, [sp, #40]	; 0x28
 801ff66:	6803      	ldr	r3, [r0, #0]
 801ff68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ff6c:	4798      	blx	r3
 801ff6e:	2801      	cmp	r0, #1
 801ff70:	d11e      	bne.n	801ffb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801ff72:	220b      	movs	r2, #11
 801ff74:	9008      	str	r0, [sp, #32]
 801ff76:	b2ad      	uxth	r5, r5
 801ff78:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ff7c:	9207      	str	r2, [sp, #28]
 801ff7e:	4621      	mov	r1, r4
 801ff80:	f8b9 2000 	ldrh.w	r2, [r9]
 801ff84:	9501      	str	r5, [sp, #4]
 801ff86:	9206      	str	r2, [sp, #24]
 801ff88:	2200      	movs	r2, #0
 801ff8a:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801ff8e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ff92:	9203      	str	r2, [sp, #12]
 801ff94:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ff98:	9202      	str	r2, [sp, #8]
 801ff9a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ff9e:	9200      	str	r2, [sp, #0]
 801ffa0:	4632      	mov	r2, r6
 801ffa2:	f8d8 0000 	ldr.w	r0, [r8]
 801ffa6:	f7f8 f94d 	bl	8018244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ffaa:	b011      	add	sp, #68	; 0x44
 801ffac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffb0:	f8d8 0000 	ldr.w	r0, [r8]
 801ffb4:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801ffb8:	6803      	ldr	r3, [r0, #0]
 801ffba:	6a1b      	ldr	r3, [r3, #32]
 801ffbc:	4798      	blx	r3
 801ffbe:	f8b9 3000 	ldrh.w	r3, [r9]
 801ffc2:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801ffc6:	f04f 0e00 	mov.w	lr, #0
 801ffca:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ffce:	fa1f f987 	uxth.w	r9, r7
 801ffd2:	fb01 2303 	mla	r3, r1, r3, r2
 801ffd6:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801ffda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ffde:	b289      	uxth	r1, r1
 801ffe0:	4418      	add	r0, r3
 801ffe2:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801ffe6:	930b      	str	r3, [sp, #44]	; 0x2c
 801ffe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffea:	459e      	cmp	lr, r3
 801ffec:	da5c      	bge.n	80200a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801ffee:	1cc3      	adds	r3, r0, #3
 801fff0:	46a2      	mov	sl, r4
 801fff2:	ebaa 0204 	sub.w	r2, sl, r4
 801fff6:	4295      	cmp	r5, r2
 801fff8:	dd46      	ble.n	8020088 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801fffa:	f04f 0c03 	mov.w	ip, #3
 801fffe:	f04f 0b04 	mov.w	fp, #4
 8020002:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8020006:	2fff      	cmp	r7, #255	; 0xff
 8020008:	fb1c b202 	smlabb	r2, ip, r2, fp
 802000c:	eb06 0c02 	add.w	ip, r6, r2
 8020010:	f816 b002 	ldrb.w	fp, [r6, r2]
 8020014:	d02f      	beq.n	8020076 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 8020016:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 802001a:	fb12 f201 	smulbb	r2, r2, r1
 802001e:	fb0b 2209 	mla	r2, fp, r9, r2
 8020022:	b292      	uxth	r2, r2
 8020024:	f102 0b01 	add.w	fp, r2, #1
 8020028:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802002c:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 8020030:	fb1b fb01 	smulbb	fp, fp, r1
 8020034:	1212      	asrs	r2, r2, #8
 8020036:	f803 2c03 	strb.w	r2, [r3, #-3]
 802003a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802003e:	fb02 b209 	mla	r2, r2, r9, fp
 8020042:	b292      	uxth	r2, r2
 8020044:	f102 0b01 	add.w	fp, r2, #1
 8020048:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802004c:	1212      	asrs	r2, r2, #8
 802004e:	f803 2c02 	strb.w	r2, [r3, #-2]
 8020052:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8020056:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 802005a:	fb1c fc01 	smulbb	ip, ip, r1
 802005e:	fb02 c209 	mla	r2, r2, r9, ip
 8020062:	b292      	uxth	r2, r2
 8020064:	f102 0c01 	add.w	ip, r2, #1
 8020068:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802006c:	1212      	asrs	r2, r2, #8
 802006e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8020072:	3303      	adds	r3, #3
 8020074:	e7bd      	b.n	801fff2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 8020076:	f803 bc03 	strb.w	fp, [r3, #-3]
 802007a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802007e:	f803 2c02 	strb.w	r2, [r3, #-2]
 8020082:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8020086:	e7f2      	b.n	802006e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 8020088:	4b0d      	ldr	r3, [pc, #52]	; (80200c0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 802008a:	f10e 0e01 	add.w	lr, lr, #1
 802008e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020090:	881b      	ldrh	r3, [r3, #0]
 8020092:	1b5b      	subs	r3, r3, r5
 8020094:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020098:	4413      	add	r3, r2
 802009a:	4418      	add	r0, r3
 802009c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80200a0:	1b5b      	subs	r3, r3, r5
 80200a2:	4443      	add	r3, r8
 80200a4:	441c      	add	r4, r3
 80200a6:	e79f      	b.n	801ffe8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 80200a8:	4b06      	ldr	r3, [pc, #24]	; (80200c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80200aa:	6818      	ldr	r0, [r3, #0]
 80200ac:	6803      	ldr	r3, [r0, #0]
 80200ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80200b0:	4798      	blx	r3
 80200b2:	e77a      	b.n	801ffaa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 80200b4:	0802c397 	.word	0x0802c397
 80200b8:	0802ca72 	.word	0x0802ca72
 80200bc:	0802c54f 	.word	0x0802c54f
 80200c0:	2000b30e 	.word	0x2000b30e
 80200c4:	2000b314 	.word	0x2000b314

080200c8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80200c8:	b570      	push	{r4, r5, r6, lr}
 80200ca:	780d      	ldrb	r5, [r1, #0]
 80200cc:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80200d0:	2d01      	cmp	r5, #1
 80200d2:	d00d      	beq.n	80200f0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 80200d4:	d307      	bcc.n	80200e6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 80200d6:	2d02      	cmp	r5, #2
 80200d8:	d10f      	bne.n	80200fa <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 80200da:	4b08      	ldr	r3, [pc, #32]	; (80200fc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 80200dc:	215b      	movs	r1, #91	; 0x5b
 80200de:	4a08      	ldr	r2, [pc, #32]	; (8020100 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 80200e0:	4808      	ldr	r0, [pc, #32]	; (8020104 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 80200e2:	f007 fa63 	bl	80275ac <__assert_func>
 80200e6:	9404      	str	r4, [sp, #16]
 80200e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80200ec:	f7ff be04 	b.w	801fcf8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80200f0:	9404      	str	r4, [sp, #16]
 80200f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80200f6:	f7ff bef7 	b.w	801fee8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80200fa:	bd70      	pop	{r4, r5, r6, pc}
 80200fc:	0802c34c 	.word	0x0802c34c
 8020100:	0802c9f0 	.word	0x0802c9f0
 8020104:	0802c54f 	.word	0x0802c54f

08020108 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8020108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802010c:	4605      	mov	r5, r0
 802010e:	b08f      	sub	sp, #60	; 0x3c
 8020110:	460c      	mov	r4, r1
 8020112:	461f      	mov	r7, r3
 8020114:	2b00      	cmp	r3, #0
 8020116:	d04e      	beq.n	80201b6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 8020118:	6808      	ldr	r0, [r1, #0]
 802011a:	ab0a      	add	r3, sp, #40	; 0x28
 802011c:	6849      	ldr	r1, [r1, #4]
 802011e:	4e81      	ldr	r6, [pc, #516]	; (8020324 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 8020120:	c303      	stmia	r3!, {r0, r1}
 8020122:	6810      	ldr	r0, [r2, #0]
 8020124:	ab0c      	add	r3, sp, #48	; 0x30
 8020126:	6851      	ldr	r1, [r2, #4]
 8020128:	c303      	stmia	r3!, {r0, r1}
 802012a:	a80a      	add	r0, sp, #40	; 0x28
 802012c:	f7fa ff34 	bl	801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020130:	4621      	mov	r1, r4
 8020132:	a80c      	add	r0, sp, #48	; 0x30
 8020134:	f7fa ff18 	bl	801af68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020138:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802013c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8020140:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8020144:	6830      	ldr	r0, [r6, #0]
 8020146:	fb11 2103 	smlabb	r1, r1, r3, r2
 802014a:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 802014e:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
 8020152:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8020156:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 802015a:	440a      	add	r2, r1
 802015c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8020160:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8020164:	4413      	add	r3, r2
 8020166:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802016a:	6803      	ldr	r3, [r0, #0]
 802016c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802016e:	4798      	blx	r3
 8020170:	2fff      	cmp	r7, #255	; 0xff
 8020172:	4633      	mov	r3, r6
 8020174:	4e6c      	ldr	r6, [pc, #432]	; (8020328 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 8020176:	d021      	beq.n	80201bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 8020178:	f010 0f04 	tst.w	r0, #4
 802017c:	6818      	ldr	r0, [r3, #0]
 802017e:	d020      	beq.n	80201c2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 8020180:	2100      	movs	r1, #0
 8020182:	f04f 0e01 	mov.w	lr, #1
 8020186:	f8d0 c000 	ldr.w	ip, [r0]
 802018a:	b2a4      	uxth	r4, r4
 802018c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8020190:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8020194:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 8020198:	8836      	ldrh	r6, [r6, #0]
 802019a:	9703      	str	r7, [sp, #12]
 802019c:	9400      	str	r4, [sp, #0]
 802019e:	e9cd 1604 	strd	r1, r6, [sp, #16]
 80201a2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80201a6:	9102      	str	r1, [sp, #8]
 80201a8:	fa1f f188 	uxth.w	r1, r8
 80201ac:	9101      	str	r1, [sp, #4]
 80201ae:	4629      	mov	r1, r5
 80201b0:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 80201b4:	47a0      	blx	r4
 80201b6:	b00f      	add	sp, #60	; 0x3c
 80201b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201bc:	f010 0f01 	tst.w	r0, #1
 80201c0:	e7dc      	b.n	802017c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x74>
 80201c2:	6803      	ldr	r3, [r0, #0]
 80201c4:	6a1b      	ldr	r3, [r3, #32]
 80201c6:	4798      	blx	r3
 80201c8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80201cc:	8833      	ldrh	r3, [r6, #0]
 80201ce:	2fff      	cmp	r7, #255	; 0xff
 80201d0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 80201d4:	fb01 2303 	mla	r3, r1, r3, r2
 80201d8:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 80201dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80201e0:	4418      	add	r0, r3
 80201e2:	d128      	bne.n	8020236 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x12e>
 80201e4:	0051      	lsls	r1, r2, #1
 80201e6:	2700      	movs	r7, #0
 80201e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80201ec:	4547      	cmp	r7, r8
 80201ee:	f280 8092 	bge.w	8020316 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 80201f2:	4684      	mov	ip, r0
 80201f4:	f04f 0e00 	mov.w	lr, #0
 80201f8:	45a6      	cmp	lr, r4
 80201fa:	f10c 0c03 	add.w	ip, ip, #3
 80201fe:	da7c      	bge.n	80202fa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1f2>
 8020200:	f835 901e 	ldrh.w	r9, [r5, lr, lsl #1]
 8020204:	f10e 0e01 	add.w	lr, lr, #1
 8020208:	ea4f 2a29 	mov.w	sl, r9, asr #8
 802020c:	f3c9 0b82 	ubfx	fp, r9, #2, #3
 8020210:	ea4f 03e9 	mov.w	r3, r9, asr #3
 8020214:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8020218:	ea4b 09c9 	orr.w	r9, fp, r9, lsl #3
 802021c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020220:	ea4a 1a5a 	orr.w	sl, sl, sl, lsr #5
 8020224:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8020228:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802022c:	f80c ac01 	strb.w	sl, [ip, #-1]
 8020230:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8020234:	e7e0      	b.n	80201f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xf0>
 8020236:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 802023a:	ea6f 0c07 	mvn.w	ip, r7
 802023e:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 8020242:	f04f 0900 	mov.w	r9, #0
 8020246:	9309      	str	r3, [sp, #36]	; 0x24
 8020248:	fa5f fc8c 	uxtb.w	ip, ip
 802024c:	b2bb      	uxth	r3, r7
 802024e:	45c1      	cmp	r9, r8
 8020250:	da61      	bge.n	8020316 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 8020252:	4601      	mov	r1, r0
 8020254:	f04f 0e00 	mov.w	lr, #0
 8020258:	45a6      	cmp	lr, r4
 802025a:	f101 0103 	add.w	r1, r1, #3
 802025e:	da3b      	bge.n	80202d8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d0>
 8020260:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 8020264:	f10e 0e01 	add.w	lr, lr, #1
 8020268:	f3c2 0b82 	ubfx	fp, r2, #2, #3
 802026c:	1216      	asrs	r6, r2, #8
 802026e:	10d7      	asrs	r7, r2, #3
 8020270:	ea4b 02c2 	orr.w	r2, fp, r2, lsl #3
 8020274:	f811 bc03 	ldrb.w	fp, [r1, #-3]
 8020278:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802027c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020280:	fb1b fb0c 	smulbb	fp, fp, ip
 8020284:	b2d2      	uxtb	r2, r2
 8020286:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 802028a:	fb02 b203 	mla	r2, r2, r3, fp
 802028e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020292:	fb17 f703 	smulbb	r7, r7, r3
 8020296:	fb16 f603 	smulbb	r6, r6, r3
 802029a:	b292      	uxth	r2, r2
 802029c:	f102 0b01 	add.w	fp, r2, #1
 80202a0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80202a4:	1212      	asrs	r2, r2, #8
 80202a6:	f801 2c03 	strb.w	r2, [r1, #-3]
 80202aa:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80202ae:	fb02 770c 	mla	r7, r2, ip, r7
 80202b2:	b2bf      	uxth	r7, r7
 80202b4:	1c7a      	adds	r2, r7, #1
 80202b6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80202ba:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80202be:	fb02 660c 	mla	r6, r2, ip, r6
 80202c2:	123f      	asrs	r7, r7, #8
 80202c4:	b2b6      	uxth	r6, r6
 80202c6:	f801 7c02 	strb.w	r7, [r1, #-2]
 80202ca:	1c72      	adds	r2, r6, #1
 80202cc:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80202d0:	1236      	asrs	r6, r6, #8
 80202d2:	f801 6c01 	strb.w	r6, [r1, #-1]
 80202d6:	e7bf      	b.n	8020258 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x150>
 80202d8:	4a13      	ldr	r2, [pc, #76]	; (8020328 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 80202da:	f109 0901 	add.w	r9, r9, #1
 80202de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80202e0:	8812      	ldrh	r2, [r2, #0]
 80202e2:	1b12      	subs	r2, r2, r4
 80202e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80202e8:	440a      	add	r2, r1
 80202ea:	4410      	add	r0, r2
 80202ec:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80202f0:	1b12      	subs	r2, r2, r4
 80202f2:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 80202f6:	4415      	add	r5, r2
 80202f8:	e7a9      	b.n	802024e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x146>
 80202fa:	8833      	ldrh	r3, [r6, #0]
 80202fc:	3701      	adds	r7, #1
 80202fe:	1b1b      	subs	r3, r3, r4
 8020300:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020304:	4413      	add	r3, r2
 8020306:	4418      	add	r0, r3
 8020308:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802030c:	1b1b      	subs	r3, r3, r4
 802030e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8020312:	441d      	add	r5, r3
 8020314:	e76a      	b.n	80201ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xe4>
 8020316:	4b03      	ldr	r3, [pc, #12]	; (8020324 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 8020318:	6818      	ldr	r0, [r3, #0]
 802031a:	6803      	ldr	r3, [r0, #0]
 802031c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802031e:	4798      	blx	r3
 8020320:	e749      	b.n	80201b6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 8020322:	bf00      	nop
 8020324:	2000b314 	.word	0x2000b314
 8020328:	2000b30e 	.word	0x2000b30e

0802032c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 802032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020330:	b08b      	sub	sp, #44	; 0x2c
 8020332:	460c      	mov	r4, r1
 8020334:	4680      	mov	r8, r0
 8020336:	469a      	mov	sl, r3
 8020338:	6808      	ldr	r0, [r1, #0]
 802033a:	ab06      	add	r3, sp, #24
 802033c:	6849      	ldr	r1, [r1, #4]
 802033e:	c303      	stmia	r3!, {r0, r1}
 8020340:	6810      	ldr	r0, [r2, #0]
 8020342:	ab08      	add	r3, sp, #32
 8020344:	6851      	ldr	r1, [r2, #4]
 8020346:	c303      	stmia	r3!, {r0, r1}
 8020348:	a806      	add	r0, sp, #24
 802034a:	f7fa fe25 	bl	801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802034e:	4621      	mov	r1, r4
 8020350:	a808      	add	r0, sp, #32
 8020352:	4c61      	ldr	r4, [pc, #388]	; (80204d8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 8020354:	f7fa fe08 	bl	801af68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020358:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802035c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020360:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8020364:	6820      	ldr	r0, [r4, #0]
 8020366:	fb11 2103 	smlabb	r1, r1, r3, r2
 802036a:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 802036e:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 8020372:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 8020376:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802037a:	440a      	add	r2, r1
 802037c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020380:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020384:	4413      	add	r3, r2
 8020386:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 802038a:	6803      	ldr	r3, [r0, #0]
 802038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802038e:	4798      	blx	r3
 8020390:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020394:	d118      	bne.n	80203c8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8020396:	f010 0f20 	tst.w	r0, #32
 802039a:	6820      	ldr	r0, [r4, #0]
 802039c:	d017      	beq.n	80203ce <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 802039e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80203a2:	b2bf      	uxth	r7, r7
 80203a4:	6801      	ldr	r1, [r0, #0]
 80203a6:	9402      	str	r4, [sp, #8]
 80203a8:	fa1f f489 	uxth.w	r4, r9
 80203ac:	f8cd a00c 	str.w	sl, [sp, #12]
 80203b0:	9401      	str	r4, [sp, #4]
 80203b2:	9700      	str	r7, [sp, #0]
 80203b4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80203b8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80203ba:	4641      	mov	r1, r8
 80203bc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80203c0:	47a0      	blx	r4
 80203c2:	b00b      	add	sp, #44	; 0x2c
 80203c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80203cc:	e7e5      	b.n	802039a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80203ce:	6803      	ldr	r3, [r0, #0]
 80203d0:	6a1b      	ldr	r3, [r3, #32]
 80203d2:	4798      	blx	r3
 80203d4:	4b41      	ldr	r3, [pc, #260]	; (80204dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 80203d6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80203da:	f04f 0c00 	mov.w	ip, #0
 80203de:	881a      	ldrh	r2, [r3, #0]
 80203e0:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80203e4:	fb04 1202 	mla	r2, r4, r2, r1
 80203e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80203ec:	4410      	add	r0, r2
 80203ee:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 80203f2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80203f6:	0092      	lsls	r2, r2, #2
 80203f8:	9105      	str	r1, [sp, #20]
 80203fa:	9204      	str	r2, [sp, #16]
 80203fc:	45cc      	cmp	ip, r9
 80203fe:	da65      	bge.n	80204cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 8020400:	1cc4      	adds	r4, r0, #3
 8020402:	f108 0504 	add.w	r5, r8, #4
 8020406:	f04f 0e00 	mov.w	lr, #0
 802040a:	45be      	cmp	lr, r7
 802040c:	da4d      	bge.n	80204aa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 802040e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020412:	b181      	cbz	r1, 8020436 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8020414:	29ff      	cmp	r1, #255	; 0xff
 8020416:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 802041a:	d111      	bne.n	8020440 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 802041c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020420:	d10e      	bne.n	8020440 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8020422:	f804 bc03 	strb.w	fp, [r4, #-3]
 8020426:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 802042a:	f804 2c02 	strb.w	r2, [r4, #-2]
 802042e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8020432:	f804 2c01 	strb.w	r2, [r4, #-1]
 8020436:	f10e 0e01 	add.w	lr, lr, #1
 802043a:	3403      	adds	r4, #3
 802043c:	3504      	adds	r5, #4
 802043e:	e7e4      	b.n	802040a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8020440:	fb0a f101 	mul.w	r1, sl, r1
 8020444:	1c4a      	adds	r2, r1, #1
 8020446:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802044a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802044e:	1212      	asrs	r2, r2, #8
 8020450:	b296      	uxth	r6, r2
 8020452:	43d2      	mvns	r2, r2
 8020454:	fb1b fb06 	smulbb	fp, fp, r6
 8020458:	b2d2      	uxtb	r2, r2
 802045a:	fb01 b102 	mla	r1, r1, r2, fp
 802045e:	b289      	uxth	r1, r1
 8020460:	f101 0b01 	add.w	fp, r1, #1
 8020464:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8020468:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 802046c:	fb1b fb02 	smulbb	fp, fp, r2
 8020470:	1209      	asrs	r1, r1, #8
 8020472:	f804 1c03 	strb.w	r1, [r4, #-3]
 8020476:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 802047a:	fb01 b106 	mla	r1, r1, r6, fp
 802047e:	b289      	uxth	r1, r1
 8020480:	f101 0b01 	add.w	fp, r1, #1
 8020484:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8020488:	1209      	asrs	r1, r1, #8
 802048a:	f804 1c02 	strb.w	r1, [r4, #-2]
 802048e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8020492:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8020496:	fb11 f202 	smulbb	r2, r1, r2
 802049a:	fb0b 2206 	mla	r2, fp, r6, r2
 802049e:	b292      	uxth	r2, r2
 80204a0:	1c56      	adds	r6, r2, #1
 80204a2:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80204a6:	1212      	asrs	r2, r2, #8
 80204a8:	e7c3      	b.n	8020432 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 80204aa:	881a      	ldrh	r2, [r3, #0]
 80204ac:	f10c 0c01 	add.w	ip, ip, #1
 80204b0:	9905      	ldr	r1, [sp, #20]
 80204b2:	1bd2      	subs	r2, r2, r7
 80204b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80204b8:	440a      	add	r2, r1
 80204ba:	9904      	ldr	r1, [sp, #16]
 80204bc:	4410      	add	r0, r2
 80204be:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80204c2:	1bd2      	subs	r2, r2, r7
 80204c4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80204c8:	4490      	add	r8, r2
 80204ca:	e797      	b.n	80203fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 80204cc:	4b02      	ldr	r3, [pc, #8]	; (80204d8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 80204ce:	6818      	ldr	r0, [r3, #0]
 80204d0:	6803      	ldr	r3, [r0, #0]
 80204d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80204d4:	4798      	blx	r3
 80204d6:	e774      	b.n	80203c2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80204d8:	2000b314 	.word	0x2000b314
 80204dc:	2000b30e 	.word	0x2000b30e

080204e0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80204e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80204e4:	b085      	sub	sp, #20
 80204e6:	4606      	mov	r6, r0
 80204e8:	460c      	mov	r4, r1
 80204ea:	4691      	mov	r9, r2
 80204ec:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80204f0:	4698      	mov	r8, r3
 80204f2:	b3a5      	cbz	r5, 802055e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 80204f4:	4608      	mov	r0, r1
 80204f6:	f7fd fa0b 	bl	801d910 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80204fa:	4607      	mov	r7, r0
 80204fc:	4620      	mov	r0, r4
 80204fe:	f7fd fa41 	bl	801d984 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020502:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020506:	4620      	mov	r0, r4
 8020508:	f8ad 9008 	strh.w	r9, [sp, #8]
 802050c:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020510:	f8ad 700c 	strh.w	r7, [sp, #12]
 8020514:	f7fd fb4e 	bl	801dbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020518:	b1a0      	cbz	r0, 8020544 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 802051a:	4620      	mov	r0, r4
 802051c:	f7fd fb4a 	bl	801dbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020520:	2801      	cmp	r0, #1
 8020522:	d00f      	beq.n	8020544 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 8020524:	4620      	mov	r0, r4
 8020526:	f7fd fb45 	bl	801dbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802052a:	2802      	cmp	r0, #2
 802052c:	d00a      	beq.n	8020544 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 802052e:	4620      	mov	r0, r4
 8020530:	f7fd fb40 	bl	801dbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020534:	280b      	cmp	r0, #11
 8020536:	d005      	beq.n	8020544 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 8020538:	4b21      	ldr	r3, [pc, #132]	; (80205c0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>)
 802053a:	213f      	movs	r1, #63	; 0x3f
 802053c:	4a21      	ldr	r2, [pc, #132]	; (80205c4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>)
 802053e:	4822      	ldr	r0, [pc, #136]	; (80205c8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe8>)
 8020540:	f007 f834 	bl	80275ac <__assert_func>
 8020544:	4620      	mov	r0, r4
 8020546:	f7fd fb35 	bl	801dbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802054a:	2802      	cmp	r0, #2
 802054c:	4620      	mov	r0, r4
 802054e:	d109      	bne.n	8020564 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 8020550:	f7fd faac 	bl	801daac <_ZNK8touchgfx6Bitmap7getDataEv>
 8020554:	462b      	mov	r3, r5
 8020556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020558:	a902      	add	r1, sp, #8
 802055a:	f7ff fee7 	bl	802032c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802055e:	b005      	add	sp, #20
 8020560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020564:	f7fd fb26 	bl	801dbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020568:	280b      	cmp	r0, #11
 802056a:	4620      	mov	r0, r4
 802056c:	d10d      	bne.n	802058a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 802056e:	f7fd fa9d 	bl	801daac <_ZNK8touchgfx6Bitmap7getDataEv>
 8020572:	4606      	mov	r6, r0
 8020574:	4620      	mov	r0, r4
 8020576:	f7fd facb 	bl	801db10 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802057a:	9500      	str	r5, [sp, #0]
 802057c:	4601      	mov	r1, r0
 802057e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020580:	aa02      	add	r2, sp, #8
 8020582:	4630      	mov	r0, r6
 8020584:	f7ff fda0 	bl	80200c8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020588:	e7e9      	b.n	802055e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 802058a:	f7fd fb13 	bl	801dbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802058e:	b940      	cbnz	r0, 80205a2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc2>
 8020590:	4620      	mov	r0, r4
 8020592:	f7fd fa8b 	bl	801daac <_ZNK8touchgfx6Bitmap7getDataEv>
 8020596:	462b      	mov	r3, r5
 8020598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802059a:	a902      	add	r1, sp, #8
 802059c:	f7ff fdb4 	bl	8020108 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80205a0:	e7dd      	b.n	802055e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 80205a2:	6833      	ldr	r3, [r6, #0]
 80205a4:	4620      	mov	r0, r4
 80205a6:	68df      	ldr	r7, [r3, #12]
 80205a8:	f7fd fa80 	bl	801daac <_ZNK8touchgfx6Bitmap7getDataEv>
 80205ac:	2300      	movs	r3, #0
 80205ae:	4601      	mov	r1, r0
 80205b0:	aa02      	add	r2, sp, #8
 80205b2:	4630      	mov	r0, r6
 80205b4:	e9cd 5300 	strd	r5, r3, [sp]
 80205b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80205ba:	47b8      	blx	r7
 80205bc:	e7cf      	b.n	802055e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 80205be:	bf00      	nop
 80205c0:	0802c3e5 	.word	0x0802c3e5
 80205c4:	0802cafb 	.word	0x0802cafb
 80205c8:	0802c54f 	.word	0x0802c54f

080205cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80205cc:	b570      	push	{r4, r5, r6, lr}
 80205ce:	9d04      	ldr	r5, [sp, #16]
 80205d0:	460c      	mov	r4, r1
 80205d2:	4619      	mov	r1, r3
 80205d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80205d8:	2a0c      	cmp	r2, #12
 80205da:	d826      	bhi.n	802062a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 80205dc:	e8df f002 	tbb	[pc, r2]
 80205e0:	200e1407 	.word	0x200e1407
 80205e4:	20202020 	.word	0x20202020
 80205e8:	20202020 	.word	0x20202020
 80205ec:	20          	.byte	0x20
 80205ed:	00          	.byte	0x00
 80205ee:	4b0f      	ldr	r3, [pc, #60]	; (802062c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80205f0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80205f4:	4a0e      	ldr	r2, [pc, #56]	; (8020630 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80205f6:	480f      	ldr	r0, [pc, #60]	; (8020634 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80205f8:	f006 ffd8 	bl	80275ac <__assert_func>
 80205fc:	462a      	mov	r2, r5
 80205fe:	4620      	mov	r0, r4
 8020600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020604:	f7ff be92 	b.w	802032c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020608:	6802      	ldr	r2, [r0, #0]
 802060a:	2600      	movs	r6, #0
 802060c:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8020610:	68d6      	ldr	r6, [r2, #12]
 8020612:	462b      	mov	r3, r5
 8020614:	460a      	mov	r2, r1
 8020616:	4621      	mov	r1, r4
 8020618:	46b4      	mov	ip, r6
 802061a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802061e:	4760      	bx	ip
 8020620:	4b05      	ldr	r3, [pc, #20]	; (8020638 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8020622:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8020626:	4a02      	ldr	r2, [pc, #8]	; (8020630 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8020628:	e7e5      	b.n	80205f6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 802062a:	bd70      	pop	{r4, r5, r6, pc}
 802062c:	0802c726 	.word	0x0802c726
 8020630:	0802cde3 	.word	0x0802cde3
 8020634:	0802c54f 	.word	0x0802c54f
 8020638:	0802c767 	.word	0x0802c767

0802063c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 802063c:	b158      	cbz	r0, 8020656 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 802063e:	2902      	cmp	r1, #2
 8020640:	d00f      	beq.n	8020662 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 8020642:	2903      	cmp	r1, #3
 8020644:	d010      	beq.n	8020668 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8020646:	2901      	cmp	r1, #1
 8020648:	d101      	bne.n	802064e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 802064a:	2001      	movs	r0, #1
 802064c:	4770      	bx	lr
 802064e:	4b08      	ldr	r3, [pc, #32]	; (8020670 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8020650:	8819      	ldrh	r1, [r3, #0]
 8020652:	4248      	negs	r0, r1
 8020654:	4770      	bx	lr
 8020656:	2902      	cmp	r1, #2
 8020658:	d006      	beq.n	8020668 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 802065a:	2903      	cmp	r1, #3
 802065c:	d0f7      	beq.n	802064e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 802065e:	2901      	cmp	r1, #1
 8020660:	d1f3      	bne.n	802064a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8020662:	4b03      	ldr	r3, [pc, #12]	; (8020670 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8020664:	8818      	ldrh	r0, [r3, #0]
 8020666:	4770      	bx	lr
 8020668:	f04f 30ff 	mov.w	r0, #4294967295
 802066c:	4770      	bx	lr
 802066e:	bf00      	nop
 8020670:	2000b30e 	.word	0x2000b30e

08020674 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8020674:	b170      	cbz	r0, 8020694 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 8020676:	2902      	cmp	r1, #2
 8020678:	d012      	beq.n	80206a0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 802067a:	2903      	cmp	r1, #3
 802067c:	d006      	beq.n	802068c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 802067e:	2901      	cmp	r1, #1
 8020680:	d001      	beq.n	8020686 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8020682:	2001      	movs	r0, #1
 8020684:	4770      	bx	lr
 8020686:	4b08      	ldr	r3, [pc, #32]	; (80206a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8020688:	8818      	ldrh	r0, [r3, #0]
 802068a:	4770      	bx	lr
 802068c:	4b06      	ldr	r3, [pc, #24]	; (80206a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 802068e:	8818      	ldrh	r0, [r3, #0]
 8020690:	4240      	negs	r0, r0
 8020692:	4770      	bx	lr
 8020694:	2902      	cmp	r1, #2
 8020696:	d0f9      	beq.n	802068c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8020698:	2903      	cmp	r1, #3
 802069a:	d0f2      	beq.n	8020682 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 802069c:	2901      	cmp	r1, #1
 802069e:	d1f2      	bne.n	8020686 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80206a0:	f04f 30ff 	mov.w	r0, #4294967295
 80206a4:	4770      	bx	lr
 80206a6:	bf00      	nop
 80206a8:	2000b30e 	.word	0x2000b30e

080206ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80206ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206b0:	b097      	sub	sp, #92	; 0x5c
 80206b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80206b4:	a912      	add	r1, sp, #72	; 0x48
 80206b6:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 80206ba:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80206be:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80206c2:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80206c6:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80206ca:	e881 000c 	stmia.w	r1, {r2, r3}
 80206ce:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80206d2:	9308      	str	r3, [sp, #32]
 80206d4:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80206d8:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80206dc:	9310      	str	r3, [sp, #64]	; 0x40
 80206de:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80206e2:	798d      	ldrb	r5, [r1, #6]
 80206e4:	930c      	str	r3, [sp, #48]	; 0x30
 80206e6:	7b4b      	ldrb	r3, [r1, #13]
 80206e8:	0158      	lsls	r0, r3, #5
 80206ea:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80206ee:	4328      	orrs	r0, r5
 80206f0:	9007      	str	r0, [sp, #28]
 80206f2:	f000 8184 	beq.w	80209fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 80206f6:	011b      	lsls	r3, r3, #4
 80206f8:	79c8      	ldrb	r0, [r1, #7]
 80206fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80206fe:	4303      	orrs	r3, r0
 8020700:	9309      	str	r3, [sp, #36]	; 0x24
 8020702:	f000 817c 	beq.w	80209fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8020706:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802070a:	b29b      	uxth	r3, r3
 802070c:	2f00      	cmp	r7, #0
 802070e:	f000 8122 	beq.w	8020956 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8020712:	1aff      	subs	r7, r7, r3
 8020714:	b2bf      	uxth	r7, r7
 8020716:	043b      	lsls	r3, r7, #16
 8020718:	d502      	bpl.n	8020720 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802071a:	1bf6      	subs	r6, r6, r7
 802071c:	2700      	movs	r7, #0
 802071e:	b236      	sxth	r6, r6
 8020720:	f9b2 1000 	ldrsh.w	r1, [r2]
 8020724:	a812      	add	r0, sp, #72	; 0x48
 8020726:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 802072a:	428e      	cmp	r6, r1
 802072c:	b28b      	uxth	r3, r1
 802072e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 8020732:	bfbf      	itttt	lt
 8020734:	18ff      	addlt	r7, r7, r3
 8020736:	1bbe      	sublt	r6, r7, r6
 8020738:	b2b7      	uxthlt	r7, r6
 802073a:	460e      	movlt	r6, r1
 802073c:	8891      	ldrh	r1, [r2, #4]
 802073e:	440b      	add	r3, r1
 8020740:	4631      	mov	r1, r6
 8020742:	b21b      	sxth	r3, r3
 8020744:	930f      	str	r3, [sp, #60]	; 0x3c
 8020746:	88d3      	ldrh	r3, [r2, #6]
 8020748:	9a08      	ldr	r2, [sp, #32]
 802074a:	449a      	add	sl, r3
 802074c:	fa0f f38a 	sxth.w	r3, sl
 8020750:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 8020754:	930e      	str	r3, [sp, #56]	; 0x38
 8020756:	4bb2      	ldr	r3, [pc, #712]	; (8020a20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8020758:	f893 b000 	ldrb.w	fp, [r3]
 802075c:	f10b 3cff 	add.w	ip, fp, #4294967295
 8020760:	f1dc 0300 	rsbs	r3, ip, #0
 8020764:	eb43 030c 	adc.w	r3, r3, ip
 8020768:	930d      	str	r3, [sp, #52]	; 0x34
 802076a:	464b      	mov	r3, r9
 802076c:	f7fa faee 	bl	801ad4c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8020770:	4631      	mov	r1, r6
 8020772:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8020776:	464b      	mov	r3, r9
 8020778:	9a08      	ldr	r2, [sp, #32]
 802077a:	a812      	add	r0, sp, #72	; 0x48
 802077c:	f7fa fafe 	bl	801ad7c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8020780:	a916      	add	r1, sp, #88	; 0x58
 8020782:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8020786:	a815      	add	r0, sp, #84	; 0x54
 8020788:	f7fa fbd8 	bl	801af3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802078c:	f1b9 0f00 	cmp.w	r9, #0
 8020790:	f040 80e4 	bne.w	802095c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b0>
 8020794:	f1bb 0f01 	cmp.w	fp, #1
 8020798:	f040 80e8 	bne.w	802096c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c0>
 802079c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802079e:	2b00      	cmp	r3, #0
 80207a0:	f040 8132 	bne.w	8020a08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 80207a4:	4b9f      	ldr	r3, [pc, #636]	; (8020a24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 80207a6:	6818      	ldr	r0, [r3, #0]
 80207a8:	6803      	ldr	r3, [r0, #0]
 80207aa:	6a1b      	ldr	r3, [r3, #32]
 80207ac:	4798      	blx	r3
 80207ae:	4a9e      	ldr	r2, [pc, #632]	; (8020a28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 80207b0:	f1b8 0f01 	cmp.w	r8, #1
 80207b4:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80207b8:	8811      	ldrh	r1, [r2, #0]
 80207ba:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80207be:	fb01 2303 	mla	r3, r1, r3, r2
 80207c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207c6:	4403      	add	r3, r0
 80207c8:	9309      	str	r3, [sp, #36]	; 0x24
 80207ca:	f04f 0301 	mov.w	r3, #1
 80207ce:	fa03 f308 	lsl.w	r3, r3, r8
 80207d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80207d6:	b2db      	uxtb	r3, r3
 80207d8:	9311      	str	r3, [sp, #68]	; 0x44
 80207da:	f000 8117 	beq.w	8020a0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 80207de:	f1b8 0f02 	cmp.w	r8, #2
 80207e2:	f000 8115 	beq.w	8020a10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x364>
 80207e6:	f1b8 0f04 	cmp.w	r8, #4
 80207ea:	bf14      	ite	ne
 80207ec:	2301      	movne	r3, #1
 80207ee:	2311      	moveq	r3, #17
 80207f0:	930a      	str	r3, [sp, #40]	; 0x28
 80207f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80207f4:	b153      	cbz	r3, 802080c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 80207f6:	2508      	movs	r5, #8
 80207f8:	9a07      	ldr	r2, [sp, #28]
 80207fa:	fb95 f3f8 	sdiv	r3, r5, r8
 80207fe:	1e5d      	subs	r5, r3, #1
 8020800:	4415      	add	r5, r2
 8020802:	fb95 f5f3 	sdiv	r5, r5, r3
 8020806:	fb15 f503 	smulbb	r5, r5, r3
 802080a:	b2ad      	uxth	r5, r5
 802080c:	b907      	cbnz	r7, 8020810 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x164>
 802080e:	b174      	cbz	r4, 802082e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x182>
 8020810:	fb15 7304 	smlabb	r3, r5, r4, r7
 8020814:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020816:	ebaa 0a04 	sub.w	sl, sl, r4
 802081a:	fb13 f308 	smulbb	r3, r3, r8
 802081e:	fa1f fa8a 	uxth.w	sl, sl
 8020822:	b29b      	uxth	r3, r3
 8020824:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8020828:	f003 0407 	and.w	r4, r3, #7
 802082c:	9226      	str	r2, [sp, #152]	; 0x98
 802082e:	4649      	mov	r1, r9
 8020830:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020832:	f7ff ff03 	bl	802063c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8020836:	4649      	mov	r1, r9
 8020838:	4683      	mov	fp, r0
 802083a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802083c:	f7ff ff1a 	bl	8020674 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8020840:	9a08      	ldr	r2, [sp, #32]
 8020842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020844:	1bf6      	subs	r6, r6, r7
 8020846:	1a9b      	subs	r3, r3, r2
 8020848:	459a      	cmp	sl, r3
 802084a:	bfa8      	it	ge
 802084c:	469a      	movge	sl, r3
 802084e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020850:	1b9e      	subs	r6, r3, r6
 8020852:	9b07      	ldr	r3, [sp, #28]
 8020854:	429e      	cmp	r6, r3
 8020856:	bfd4      	ite	le
 8020858:	ebc7 0706 	rsble	r7, r7, r6
 802085c:	ebc7 0703 	rsbgt	r7, r7, r3
 8020860:	1bed      	subs	r5, r5, r7
 8020862:	fb0b 0017 	mls	r0, fp, r7, r0
 8020866:	fb08 f305 	mul.w	r3, r8, r5
 802086a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802086e:	9308      	str	r3, [sp, #32]
 8020870:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020872:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8020876:	930d      	str	r3, [sp, #52]	; 0x34
 8020878:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802087a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802087e:	930e      	str	r3, [sp, #56]	; 0x38
 8020880:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020882:	b2de      	uxtb	r6, r3
 8020884:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020886:	781a      	ldrb	r2, [r3, #0]
 8020888:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 802088c:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 8020890:	4122      	asrs	r2, r4
 8020892:	9307      	str	r3, [sp, #28]
 8020894:	fb03 0b0b 	mla	fp, r3, fp, r0
 8020898:	b2d2      	uxtb	r2, r2
 802089a:	f1ba 0f00 	cmp.w	sl, #0
 802089e:	f340 80d8 	ble.w	8020a52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a6>
 80208a2:	46be      	mov	lr, r7
 80208a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80208a6:	f1be 0f00 	cmp.w	lr, #0
 80208aa:	f340 80bf 	ble.w	8020a2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80208ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80208b0:	4013      	ands	r3, r2
 80208b2:	d03e      	beq.n	8020932 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 80208b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80208b6:	fb13 f300 	smulbb	r3, r3, r0
 80208ba:	2bfe      	cmp	r3, #254	; 0xfe
 80208bc:	dd03      	ble.n	80208c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21a>
 80208be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80208c0:	28ff      	cmp	r0, #255	; 0xff
 80208c2:	f000 80a7 	beq.w	8020a14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x368>
 80208c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80208c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80208ca:	fb10 f303 	smulbb	r3, r0, r3
 80208ce:	b29b      	uxth	r3, r3
 80208d0:	1c58      	adds	r0, r3, #1
 80208d2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80208d6:	7808      	ldrb	r0, [r1, #0]
 80208d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80208dc:	fa1f fc83 	uxth.w	ip, r3
 80208e0:	43db      	mvns	r3, r3
 80208e2:	fb16 f90c 	smulbb	r9, r6, ip
 80208e6:	b2db      	uxtb	r3, r3
 80208e8:	fb00 9003 	mla	r0, r0, r3, r9
 80208ec:	b280      	uxth	r0, r0
 80208ee:	f100 0901 	add.w	r9, r0, #1
 80208f2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80208f6:	fb15 f90c 	smulbb	r9, r5, ip
 80208fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80208fc:	1200      	asrs	r0, r0, #8
 80208fe:	fb15 fc0c 	smulbb	ip, r5, ip
 8020902:	7008      	strb	r0, [r1, #0]
 8020904:	7848      	ldrb	r0, [r1, #1]
 8020906:	fb00 9003 	mla	r0, r0, r3, r9
 802090a:	b280      	uxth	r0, r0
 802090c:	f100 0901 	add.w	r9, r0, #1
 8020910:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8020914:	1200      	asrs	r0, r0, #8
 8020916:	7048      	strb	r0, [r1, #1]
 8020918:	7888      	ldrb	r0, [r1, #2]
 802091a:	fb00 cc03 	mla	ip, r0, r3, ip
 802091e:	fa1f fc8c 	uxth.w	ip, ip
 8020922:	f10c 0301 	add.w	r3, ip, #1
 8020926:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802092a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802092e:	f881 c002 	strb.w	ip, [r1, #2]
 8020932:	4444      	add	r4, r8
 8020934:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020938:	b2a4      	uxth	r4, r4
 802093a:	2c07      	cmp	r4, #7
 802093c:	bf89      	itett	hi
 802093e:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8020940:	fa42 f208 	asrls.w	r2, r2, r8
 8020944:	2400      	movhi	r4, #0
 8020946:	785a      	ldrbhi	r2, [r3, #1]
 8020948:	bf8a      	itet	hi
 802094a:	3301      	addhi	r3, #1
 802094c:	b2d2      	uxtbls	r2, r2
 802094e:	9326      	strhi	r3, [sp, #152]	; 0x98
 8020950:	9b07      	ldr	r3, [sp, #28]
 8020952:	4419      	add	r1, r3
 8020954:	e7a7      	b.n	80208a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8020956:	441e      	add	r6, r3
 8020958:	b236      	sxth	r6, r6
 802095a:	e6e1      	b.n	8020720 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802095c:	f1b9 0f01 	cmp.w	r9, #1
 8020960:	f47f af1c 	bne.w	802079c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020964:	f1bb 0f01 	cmp.w	fp, #1
 8020968:	f47f af18 	bne.w	802079c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802096c:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8020a24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8020970:	f8db 0000 	ldr.w	r0, [fp]
 8020974:	6803      	ldr	r3, [r0, #0]
 8020976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020978:	4798      	blx	r3
 802097a:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 802097e:	465a      	mov	r2, fp
 8020980:	d006      	beq.n	8020990 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8020982:	f1b8 0f04 	cmp.w	r8, #4
 8020986:	d13d      	bne.n	8020a04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x358>
 8020988:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802098a:	3300      	adds	r3, #0
 802098c:	bf18      	it	ne
 802098e:	2301      	movne	r3, #1
 8020990:	05c0      	lsls	r0, r0, #23
 8020992:	d567      	bpl.n	8020a64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 8020994:	f1b8 0f08 	cmp.w	r8, #8
 8020998:	d164      	bne.n	8020a64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 802099a:	2b00      	cmp	r3, #0
 802099c:	bf0c      	ite	eq
 802099e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80209a2:	2180      	movne	r1, #128	; 0x80
 80209a4:	2f00      	cmp	r7, #0
 80209a6:	f47f aef9 	bne.w	802079c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80209aa:	2c00      	cmp	r4, #0
 80209ac:	f47f aef6 	bne.w	802079c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80209b0:	9b07      	ldr	r3, [sp, #28]
 80209b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80209b4:	18f3      	adds	r3, r6, r3
 80209b6:	4283      	cmp	r3, r0
 80209b8:	f73f aef0 	bgt.w	802079c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80209bc:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 80209c0:	4403      	add	r3, r0
 80209c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80209c4:	4283      	cmp	r3, r0
 80209c6:	f73f aee9 	bgt.w	802079c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80209ca:	f1b8 0f08 	cmp.w	r8, #8
 80209ce:	6810      	ldr	r0, [r2, #0]
 80209d0:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80209d4:	bf18      	it	ne
 80209d6:	3501      	addne	r5, #1
 80209d8:	6804      	ldr	r4, [r0, #0]
 80209da:	9105      	str	r1, [sp, #20]
 80209dc:	bf18      	it	ne
 80209de:	f025 0501 	bicne.w	r5, r5, #1
 80209e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80209e4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80209e8:	bf18      	it	ne
 80209ea:	b2ad      	uxthne	r5, r5
 80209ec:	9104      	str	r1, [sp, #16]
 80209ee:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80209f0:	e9cd 5a00 	strd	r5, sl, [sp]
 80209f4:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80209f8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80209fa:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80209fc:	47a0      	blx	r4
 80209fe:	b017      	add	sp, #92	; 0x5c
 8020a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a04:	2300      	movs	r3, #0
 8020a06:	e7c3      	b.n	8020990 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8020a08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020a0a:	e6d0      	b.n	80207ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8020a0c:	23ff      	movs	r3, #255	; 0xff
 8020a0e:	e6ef      	b.n	80207f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 8020a10:	2355      	movs	r3, #85	; 0x55
 8020a12:	e6ed      	b.n	80207f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 8020a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020a16:	700e      	strb	r6, [r1, #0]
 8020a18:	704b      	strb	r3, [r1, #1]
 8020a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a1c:	708b      	strb	r3, [r1, #2]
 8020a1e:	e788      	b.n	8020932 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8020a20:	2000b30c 	.word	0x2000b30c
 8020a24:	2000b314 	.word	0x2000b314
 8020a28:	2000b30e 	.word	0x2000b30e
 8020a2c:	9b08      	ldr	r3, [sp, #32]
 8020a2e:	b153      	cbz	r3, 8020a46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8020a30:	441c      	add	r4, r3
 8020a32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020a34:	b2a4      	uxth	r4, r4
 8020a36:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8020a3a:	f004 0407 	and.w	r4, r4, #7
 8020a3e:	781a      	ldrb	r2, [r3, #0]
 8020a40:	9326      	str	r3, [sp, #152]	; 0x98
 8020a42:	4122      	asrs	r2, r4
 8020a44:	b2d2      	uxtb	r2, r2
 8020a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020a4c:	445b      	add	r3, fp
 8020a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8020a50:	e723      	b.n	802089a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8020a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a54:	2b00      	cmp	r3, #0
 8020a56:	d1d2      	bne.n	80209fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8020a58:	4b05      	ldr	r3, [pc, #20]	; (8020a70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c4>)
 8020a5a:	6818      	ldr	r0, [r3, #0]
 8020a5c:	6803      	ldr	r3, [r0, #0]
 8020a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a60:	4798      	blx	r3
 8020a62:	e7cc      	b.n	80209fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	f43f ae99 	beq.w	802079c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020a6a:	2180      	movs	r1, #128	; 0x80
 8020a6c:	e79a      	b.n	80209a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8020a6e:	bf00      	nop
 8020a70:	2000b314 	.word	0x2000b314

08020a74 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8020a74:	b538      	push	{r3, r4, r5, lr}
 8020a76:	4c15      	ldr	r4, [pc, #84]	; (8020acc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8020a78:	4605      	mov	r5, r0
 8020a7a:	7823      	ldrb	r3, [r4, #0]
 8020a7c:	f3bf 8f5b 	dmb	ish
 8020a80:	07da      	lsls	r2, r3, #31
 8020a82:	d40b      	bmi.n	8020a9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020a84:	4620      	mov	r0, r4
 8020a86:	f006 fd67 	bl	8027558 <__cxa_guard_acquire>
 8020a8a:	b138      	cbz	r0, 8020a9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020a8c:	4620      	mov	r0, r4
 8020a8e:	f006 fd6f 	bl	8027570 <__cxa_guard_release>
 8020a92:	4a0f      	ldr	r2, [pc, #60]	; (8020ad0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020a94:	490f      	ldr	r1, [pc, #60]	; (8020ad4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8020a96:	4810      	ldr	r0, [pc, #64]	; (8020ad8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020a98:	f006 fd54 	bl	8027544 <__aeabi_atexit>
 8020a9c:	4c0f      	ldr	r4, [pc, #60]	; (8020adc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8020a9e:	7823      	ldrb	r3, [r4, #0]
 8020aa0:	f3bf 8f5b 	dmb	ish
 8020aa4:	07db      	lsls	r3, r3, #31
 8020aa6:	d40b      	bmi.n	8020ac0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020aa8:	4620      	mov	r0, r4
 8020aaa:	f006 fd55 	bl	8027558 <__cxa_guard_acquire>
 8020aae:	b138      	cbz	r0, 8020ac0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020ab0:	4620      	mov	r0, r4
 8020ab2:	f006 fd5d 	bl	8027570 <__cxa_guard_release>
 8020ab6:	4a06      	ldr	r2, [pc, #24]	; (8020ad0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020ab8:	4909      	ldr	r1, [pc, #36]	; (8020ae0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8020aba:	480a      	ldr	r0, [pc, #40]	; (8020ae4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020abc:	f006 fd42 	bl	8027544 <__aeabi_atexit>
 8020ac0:	4b05      	ldr	r3, [pc, #20]	; (8020ad8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020ac2:	612b      	str	r3, [r5, #16]
 8020ac4:	4b07      	ldr	r3, [pc, #28]	; (8020ae4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020ac6:	616b      	str	r3, [r5, #20]
 8020ac8:	bd38      	pop	{r3, r4, r5, pc}
 8020aca:	bf00      	nop
 8020acc:	2000b420 	.word	0x2000b420
 8020ad0:	20000000 	.word	0x20000000
 8020ad4:	0801f453 	.word	0x0801f453
 8020ad8:	20000084 	.word	0x20000084
 8020adc:	2000b424 	.word	0x2000b424
 8020ae0:	0801f451 	.word	0x0801f451
 8020ae4:	20000088 	.word	0x20000088

08020ae8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8020ae8:	b538      	push	{r3, r4, r5, lr}
 8020aea:	4c15      	ldr	r4, [pc, #84]	; (8020b40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8020aec:	4605      	mov	r5, r0
 8020aee:	7823      	ldrb	r3, [r4, #0]
 8020af0:	f3bf 8f5b 	dmb	ish
 8020af4:	07da      	lsls	r2, r3, #31
 8020af6:	d40b      	bmi.n	8020b10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020af8:	4620      	mov	r0, r4
 8020afa:	f006 fd2d 	bl	8027558 <__cxa_guard_acquire>
 8020afe:	b138      	cbz	r0, 8020b10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020b00:	4620      	mov	r0, r4
 8020b02:	f006 fd35 	bl	8027570 <__cxa_guard_release>
 8020b06:	4a0f      	ldr	r2, [pc, #60]	; (8020b44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020b08:	490f      	ldr	r1, [pc, #60]	; (8020b48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8020b0a:	4810      	ldr	r0, [pc, #64]	; (8020b4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020b0c:	f006 fd1a 	bl	8027544 <__aeabi_atexit>
 8020b10:	4c0f      	ldr	r4, [pc, #60]	; (8020b50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8020b12:	7823      	ldrb	r3, [r4, #0]
 8020b14:	f3bf 8f5b 	dmb	ish
 8020b18:	07db      	lsls	r3, r3, #31
 8020b1a:	d40b      	bmi.n	8020b34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020b1c:	4620      	mov	r0, r4
 8020b1e:	f006 fd1b 	bl	8027558 <__cxa_guard_acquire>
 8020b22:	b138      	cbz	r0, 8020b34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020b24:	4620      	mov	r0, r4
 8020b26:	f006 fd23 	bl	8027570 <__cxa_guard_release>
 8020b2a:	4a06      	ldr	r2, [pc, #24]	; (8020b44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020b2c:	4909      	ldr	r1, [pc, #36]	; (8020b54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8020b2e:	480a      	ldr	r0, [pc, #40]	; (8020b58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020b30:	f006 fd08 	bl	8027544 <__aeabi_atexit>
 8020b34:	4b05      	ldr	r3, [pc, #20]	; (8020b4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020b36:	60ab      	str	r3, [r5, #8]
 8020b38:	4b07      	ldr	r3, [pc, #28]	; (8020b58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020b3a:	60eb      	str	r3, [r5, #12]
 8020b3c:	bd38      	pop	{r3, r4, r5, pc}
 8020b3e:	bf00      	nop
 8020b40:	2000b400 	.word	0x2000b400
 8020b44:	20000000 	.word	0x20000000
 8020b48:	0801f457 	.word	0x0801f457
 8020b4c:	20000064 	.word	0x20000064
 8020b50:	2000b404 	.word	0x2000b404
 8020b54:	0801f455 	.word	0x0801f455
 8020b58:	20000068 	.word	0x20000068

08020b5c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8020b5c:	b510      	push	{r4, lr}
 8020b5e:	4604      	mov	r4, r0
 8020b60:	f7ff ff88 	bl	8020a74 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8020b64:	4620      	mov	r0, r4
 8020b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020b6a:	f7ff bfbd 	b.w	8020ae8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08020b70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8020b70:	b538      	push	{r3, r4, r5, lr}
 8020b72:	4c15      	ldr	r4, [pc, #84]	; (8020bc8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8020b74:	4605      	mov	r5, r0
 8020b76:	7823      	ldrb	r3, [r4, #0]
 8020b78:	f3bf 8f5b 	dmb	ish
 8020b7c:	07da      	lsls	r2, r3, #31
 8020b7e:	d40b      	bmi.n	8020b98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020b80:	4620      	mov	r0, r4
 8020b82:	f006 fce9 	bl	8027558 <__cxa_guard_acquire>
 8020b86:	b138      	cbz	r0, 8020b98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020b88:	4620      	mov	r0, r4
 8020b8a:	f006 fcf1 	bl	8027570 <__cxa_guard_release>
 8020b8e:	4a0f      	ldr	r2, [pc, #60]	; (8020bcc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020b90:	490f      	ldr	r1, [pc, #60]	; (8020bd0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8020b92:	4810      	ldr	r0, [pc, #64]	; (8020bd4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020b94:	f006 fcd6 	bl	8027544 <__aeabi_atexit>
 8020b98:	4c0f      	ldr	r4, [pc, #60]	; (8020bd8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8020b9a:	7823      	ldrb	r3, [r4, #0]
 8020b9c:	f3bf 8f5b 	dmb	ish
 8020ba0:	07db      	lsls	r3, r3, #31
 8020ba2:	d40b      	bmi.n	8020bbc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020ba4:	4620      	mov	r0, r4
 8020ba6:	f006 fcd7 	bl	8027558 <__cxa_guard_acquire>
 8020baa:	b138      	cbz	r0, 8020bbc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020bac:	4620      	mov	r0, r4
 8020bae:	f006 fcdf 	bl	8027570 <__cxa_guard_release>
 8020bb2:	4a06      	ldr	r2, [pc, #24]	; (8020bcc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020bb4:	4909      	ldr	r1, [pc, #36]	; (8020bdc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8020bb6:	480a      	ldr	r0, [pc, #40]	; (8020be0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020bb8:	f006 fcc4 	bl	8027544 <__aeabi_atexit>
 8020bbc:	4b05      	ldr	r3, [pc, #20]	; (8020bd4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020bbe:	622b      	str	r3, [r5, #32]
 8020bc0:	4b07      	ldr	r3, [pc, #28]	; (8020be0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020bc2:	626b      	str	r3, [r5, #36]	; 0x24
 8020bc4:	bd38      	pop	{r3, r4, r5, pc}
 8020bc6:	bf00      	nop
 8020bc8:	2000b428 	.word	0x2000b428
 8020bcc:	20000000 	.word	0x20000000
 8020bd0:	0801f44b 	.word	0x0801f44b
 8020bd4:	2000008c 	.word	0x2000008c
 8020bd8:	2000b42c 	.word	0x2000b42c
 8020bdc:	0801f449 	.word	0x0801f449
 8020be0:	20000090 	.word	0x20000090

08020be4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8020be4:	b538      	push	{r3, r4, r5, lr}
 8020be6:	4c15      	ldr	r4, [pc, #84]	; (8020c3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8020be8:	4605      	mov	r5, r0
 8020bea:	7823      	ldrb	r3, [r4, #0]
 8020bec:	f3bf 8f5b 	dmb	ish
 8020bf0:	07da      	lsls	r2, r3, #31
 8020bf2:	d40b      	bmi.n	8020c0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020bf4:	4620      	mov	r0, r4
 8020bf6:	f006 fcaf 	bl	8027558 <__cxa_guard_acquire>
 8020bfa:	b138      	cbz	r0, 8020c0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020bfc:	4620      	mov	r0, r4
 8020bfe:	f006 fcb7 	bl	8027570 <__cxa_guard_release>
 8020c02:	4a0f      	ldr	r2, [pc, #60]	; (8020c40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020c04:	490f      	ldr	r1, [pc, #60]	; (8020c44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8020c06:	4810      	ldr	r0, [pc, #64]	; (8020c48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020c08:	f006 fc9c 	bl	8027544 <__aeabi_atexit>
 8020c0c:	4c0f      	ldr	r4, [pc, #60]	; (8020c4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8020c0e:	7823      	ldrb	r3, [r4, #0]
 8020c10:	f3bf 8f5b 	dmb	ish
 8020c14:	07db      	lsls	r3, r3, #31
 8020c16:	d40b      	bmi.n	8020c30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020c18:	4620      	mov	r0, r4
 8020c1a:	f006 fc9d 	bl	8027558 <__cxa_guard_acquire>
 8020c1e:	b138      	cbz	r0, 8020c30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020c20:	4620      	mov	r0, r4
 8020c22:	f006 fca5 	bl	8027570 <__cxa_guard_release>
 8020c26:	4a06      	ldr	r2, [pc, #24]	; (8020c40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020c28:	4909      	ldr	r1, [pc, #36]	; (8020c50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8020c2a:	480a      	ldr	r0, [pc, #40]	; (8020c54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020c2c:	f006 fc8a 	bl	8027544 <__aeabi_atexit>
 8020c30:	4b05      	ldr	r3, [pc, #20]	; (8020c48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020c32:	61ab      	str	r3, [r5, #24]
 8020c34:	4b07      	ldr	r3, [pc, #28]	; (8020c54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020c36:	61eb      	str	r3, [r5, #28]
 8020c38:	bd38      	pop	{r3, r4, r5, pc}
 8020c3a:	bf00      	nop
 8020c3c:	2000b408 	.word	0x2000b408
 8020c40:	20000000 	.word	0x20000000
 8020c44:	0801f44f 	.word	0x0801f44f
 8020c48:	2000006c 	.word	0x2000006c
 8020c4c:	2000b40c 	.word	0x2000b40c
 8020c50:	0801f44d 	.word	0x0801f44d
 8020c54:	20000070 	.word	0x20000070

08020c58 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8020c58:	b510      	push	{r4, lr}
 8020c5a:	4604      	mov	r4, r0
 8020c5c:	f7ff ff88 	bl	8020b70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8020c60:	4620      	mov	r0, r4
 8020c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020c66:	f7ff bfbd 	b.w	8020be4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08020c6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8020c6c:	b538      	push	{r3, r4, r5, lr}
 8020c6e:	4c15      	ldr	r4, [pc, #84]	; (8020cc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8020c70:	4605      	mov	r5, r0
 8020c72:	7823      	ldrb	r3, [r4, #0]
 8020c74:	f3bf 8f5b 	dmb	ish
 8020c78:	07da      	lsls	r2, r3, #31
 8020c7a:	d40b      	bmi.n	8020c94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8020c7c:	4620      	mov	r0, r4
 8020c7e:	f006 fc6b 	bl	8027558 <__cxa_guard_acquire>
 8020c82:	b138      	cbz	r0, 8020c94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8020c84:	4620      	mov	r0, r4
 8020c86:	f006 fc73 	bl	8027570 <__cxa_guard_release>
 8020c8a:	4a0f      	ldr	r2, [pc, #60]	; (8020cc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8020c8c:	490f      	ldr	r1, [pc, #60]	; (8020ccc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8020c8e:	4810      	ldr	r0, [pc, #64]	; (8020cd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8020c90:	f006 fc58 	bl	8027544 <__aeabi_atexit>
 8020c94:	4c0f      	ldr	r4, [pc, #60]	; (8020cd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8020c96:	7823      	ldrb	r3, [r4, #0]
 8020c98:	f3bf 8f5b 	dmb	ish
 8020c9c:	07db      	lsls	r3, r3, #31
 8020c9e:	d40b      	bmi.n	8020cb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8020ca0:	4620      	mov	r0, r4
 8020ca2:	f006 fc59 	bl	8027558 <__cxa_guard_acquire>
 8020ca6:	b138      	cbz	r0, 8020cb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8020ca8:	4620      	mov	r0, r4
 8020caa:	f006 fc61 	bl	8027570 <__cxa_guard_release>
 8020cae:	4a06      	ldr	r2, [pc, #24]	; (8020cc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8020cb0:	4909      	ldr	r1, [pc, #36]	; (8020cd8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8020cb2:	480a      	ldr	r0, [pc, #40]	; (8020cdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8020cb4:	f006 fc46 	bl	8027544 <__aeabi_atexit>
 8020cb8:	4b05      	ldr	r3, [pc, #20]	; (8020cd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8020cba:	632b      	str	r3, [r5, #48]	; 0x30
 8020cbc:	4b07      	ldr	r3, [pc, #28]	; (8020cdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8020cbe:	636b      	str	r3, [r5, #52]	; 0x34
 8020cc0:	bd38      	pop	{r3, r4, r5, pc}
 8020cc2:	bf00      	nop
 8020cc4:	2000b410 	.word	0x2000b410
 8020cc8:	20000000 	.word	0x20000000
 8020ccc:	0801f443 	.word	0x0801f443
 8020cd0:	20000074 	.word	0x20000074
 8020cd4:	2000b414 	.word	0x2000b414
 8020cd8:	0801f441 	.word	0x0801f441
 8020cdc:	20000078 	.word	0x20000078

08020ce0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8020ce0:	b538      	push	{r3, r4, r5, lr}
 8020ce2:	4c15      	ldr	r4, [pc, #84]	; (8020d38 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8020ce4:	4605      	mov	r5, r0
 8020ce6:	7823      	ldrb	r3, [r4, #0]
 8020ce8:	f3bf 8f5b 	dmb	ish
 8020cec:	07da      	lsls	r2, r3, #31
 8020cee:	d40b      	bmi.n	8020d08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8020cf0:	4620      	mov	r0, r4
 8020cf2:	f006 fc31 	bl	8027558 <__cxa_guard_acquire>
 8020cf6:	b138      	cbz	r0, 8020d08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8020cf8:	4620      	mov	r0, r4
 8020cfa:	f006 fc39 	bl	8027570 <__cxa_guard_release>
 8020cfe:	4a0f      	ldr	r2, [pc, #60]	; (8020d3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8020d00:	490f      	ldr	r1, [pc, #60]	; (8020d40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8020d02:	4810      	ldr	r0, [pc, #64]	; (8020d44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8020d04:	f006 fc1e 	bl	8027544 <__aeabi_atexit>
 8020d08:	4c0f      	ldr	r4, [pc, #60]	; (8020d48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8020d0a:	7823      	ldrb	r3, [r4, #0]
 8020d0c:	f3bf 8f5b 	dmb	ish
 8020d10:	07db      	lsls	r3, r3, #31
 8020d12:	d40b      	bmi.n	8020d2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8020d14:	4620      	mov	r0, r4
 8020d16:	f006 fc1f 	bl	8027558 <__cxa_guard_acquire>
 8020d1a:	b138      	cbz	r0, 8020d2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8020d1c:	4620      	mov	r0, r4
 8020d1e:	f006 fc27 	bl	8027570 <__cxa_guard_release>
 8020d22:	4a06      	ldr	r2, [pc, #24]	; (8020d3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8020d24:	4909      	ldr	r1, [pc, #36]	; (8020d4c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8020d26:	480a      	ldr	r0, [pc, #40]	; (8020d50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8020d28:	f006 fc0c 	bl	8027544 <__aeabi_atexit>
 8020d2c:	4b05      	ldr	r3, [pc, #20]	; (8020d44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8020d2e:	62ab      	str	r3, [r5, #40]	; 0x28
 8020d30:	4b07      	ldr	r3, [pc, #28]	; (8020d50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8020d32:	62eb      	str	r3, [r5, #44]	; 0x2c
 8020d34:	bd38      	pop	{r3, r4, r5, pc}
 8020d36:	bf00      	nop
 8020d38:	2000b3e8 	.word	0x2000b3e8
 8020d3c:	20000000 	.word	0x20000000
 8020d40:	0801f447 	.word	0x0801f447
 8020d44:	2000004c 	.word	0x2000004c
 8020d48:	2000b3ec 	.word	0x2000b3ec
 8020d4c:	0801f445 	.word	0x0801f445
 8020d50:	20000050 	.word	0x20000050

08020d54 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8020d54:	b510      	push	{r4, lr}
 8020d56:	4604      	mov	r4, r0
 8020d58:	f7ff ff88 	bl	8020c6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8020d5c:	4620      	mov	r0, r4
 8020d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020d62:	f7ff bfbd 	b.w	8020ce0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08020d68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8020d68:	b538      	push	{r3, r4, r5, lr}
 8020d6a:	4c15      	ldr	r4, [pc, #84]	; (8020dc0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8020d6c:	4605      	mov	r5, r0
 8020d6e:	7823      	ldrb	r3, [r4, #0]
 8020d70:	f3bf 8f5b 	dmb	ish
 8020d74:	07da      	lsls	r2, r3, #31
 8020d76:	d40b      	bmi.n	8020d90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020d78:	4620      	mov	r0, r4
 8020d7a:	f006 fbed 	bl	8027558 <__cxa_guard_acquire>
 8020d7e:	b138      	cbz	r0, 8020d90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020d80:	4620      	mov	r0, r4
 8020d82:	f006 fbf5 	bl	8027570 <__cxa_guard_release>
 8020d86:	4a0f      	ldr	r2, [pc, #60]	; (8020dc4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8020d88:	490f      	ldr	r1, [pc, #60]	; (8020dc8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8020d8a:	4810      	ldr	r0, [pc, #64]	; (8020dcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8020d8c:	f006 fbda 	bl	8027544 <__aeabi_atexit>
 8020d90:	4c0f      	ldr	r4, [pc, #60]	; (8020dd0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8020d92:	7823      	ldrb	r3, [r4, #0]
 8020d94:	f3bf 8f5b 	dmb	ish
 8020d98:	07db      	lsls	r3, r3, #31
 8020d9a:	d40b      	bmi.n	8020db4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020d9c:	4620      	mov	r0, r4
 8020d9e:	f006 fbdb 	bl	8027558 <__cxa_guard_acquire>
 8020da2:	b138      	cbz	r0, 8020db4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020da4:	4620      	mov	r0, r4
 8020da6:	f006 fbe3 	bl	8027570 <__cxa_guard_release>
 8020daa:	4a06      	ldr	r2, [pc, #24]	; (8020dc4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8020dac:	4909      	ldr	r1, [pc, #36]	; (8020dd4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8020dae:	480a      	ldr	r0, [pc, #40]	; (8020dd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8020db0:	f006 fbc8 	bl	8027544 <__aeabi_atexit>
 8020db4:	4b05      	ldr	r3, [pc, #20]	; (8020dcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8020db6:	642b      	str	r3, [r5, #64]	; 0x40
 8020db8:	4b07      	ldr	r3, [pc, #28]	; (8020dd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8020dba:	646b      	str	r3, [r5, #68]	; 0x44
 8020dbc:	bd38      	pop	{r3, r4, r5, pc}
 8020dbe:	bf00      	nop
 8020dc0:	2000b418 	.word	0x2000b418
 8020dc4:	20000000 	.word	0x20000000
 8020dc8:	0801f43b 	.word	0x0801f43b
 8020dcc:	2000007c 	.word	0x2000007c
 8020dd0:	2000b41c 	.word	0x2000b41c
 8020dd4:	0801f439 	.word	0x0801f439
 8020dd8:	20000080 	.word	0x20000080

08020ddc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8020ddc:	b538      	push	{r3, r4, r5, lr}
 8020dde:	4c15      	ldr	r4, [pc, #84]	; (8020e34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8020de0:	4605      	mov	r5, r0
 8020de2:	7823      	ldrb	r3, [r4, #0]
 8020de4:	f3bf 8f5b 	dmb	ish
 8020de8:	07da      	lsls	r2, r3, #31
 8020dea:	d40b      	bmi.n	8020e04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020dec:	4620      	mov	r0, r4
 8020dee:	f006 fbb3 	bl	8027558 <__cxa_guard_acquire>
 8020df2:	b138      	cbz	r0, 8020e04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020df4:	4620      	mov	r0, r4
 8020df6:	f006 fbbb 	bl	8027570 <__cxa_guard_release>
 8020dfa:	4a0f      	ldr	r2, [pc, #60]	; (8020e38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020dfc:	490f      	ldr	r1, [pc, #60]	; (8020e3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8020dfe:	4810      	ldr	r0, [pc, #64]	; (8020e40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8020e00:	f006 fba0 	bl	8027544 <__aeabi_atexit>
 8020e04:	4c0f      	ldr	r4, [pc, #60]	; (8020e44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8020e06:	7823      	ldrb	r3, [r4, #0]
 8020e08:	f3bf 8f5b 	dmb	ish
 8020e0c:	07db      	lsls	r3, r3, #31
 8020e0e:	d40b      	bmi.n	8020e28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020e10:	4620      	mov	r0, r4
 8020e12:	f006 fba1 	bl	8027558 <__cxa_guard_acquire>
 8020e16:	b138      	cbz	r0, 8020e28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020e18:	4620      	mov	r0, r4
 8020e1a:	f006 fba9 	bl	8027570 <__cxa_guard_release>
 8020e1e:	4a06      	ldr	r2, [pc, #24]	; (8020e38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020e20:	4909      	ldr	r1, [pc, #36]	; (8020e48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8020e22:	480a      	ldr	r0, [pc, #40]	; (8020e4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8020e24:	f006 fb8e 	bl	8027544 <__aeabi_atexit>
 8020e28:	4b05      	ldr	r3, [pc, #20]	; (8020e40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8020e2a:	63ab      	str	r3, [r5, #56]	; 0x38
 8020e2c:	4b07      	ldr	r3, [pc, #28]	; (8020e4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8020e2e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8020e30:	bd38      	pop	{r3, r4, r5, pc}
 8020e32:	bf00      	nop
 8020e34:	2000b3f8 	.word	0x2000b3f8
 8020e38:	20000000 	.word	0x20000000
 8020e3c:	0801f43f 	.word	0x0801f43f
 8020e40:	2000005c 	.word	0x2000005c
 8020e44:	2000b3fc 	.word	0x2000b3fc
 8020e48:	0801f43d 	.word	0x0801f43d
 8020e4c:	20000060 	.word	0x20000060

08020e50 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8020e50:	b510      	push	{r4, lr}
 8020e52:	4604      	mov	r4, r0
 8020e54:	f7ff ff88 	bl	8020d68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8020e58:	4620      	mov	r0, r4
 8020e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020e5e:	f7ff bfbd 	b.w	8020ddc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08020e64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8020e64:	b538      	push	{r3, r4, r5, lr}
 8020e66:	4c15      	ldr	r4, [pc, #84]	; (8020ebc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8020e68:	4605      	mov	r5, r0
 8020e6a:	7823      	ldrb	r3, [r4, #0]
 8020e6c:	f3bf 8f5b 	dmb	ish
 8020e70:	07da      	lsls	r2, r3, #31
 8020e72:	d40b      	bmi.n	8020e8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020e74:	4620      	mov	r0, r4
 8020e76:	f006 fb6f 	bl	8027558 <__cxa_guard_acquire>
 8020e7a:	b138      	cbz	r0, 8020e8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020e7c:	4620      	mov	r0, r4
 8020e7e:	f006 fb77 	bl	8027570 <__cxa_guard_release>
 8020e82:	4a0f      	ldr	r2, [pc, #60]	; (8020ec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020e84:	490f      	ldr	r1, [pc, #60]	; (8020ec4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8020e86:	4810      	ldr	r0, [pc, #64]	; (8020ec8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020e88:	f006 fb5c 	bl	8027544 <__aeabi_atexit>
 8020e8c:	4c0f      	ldr	r4, [pc, #60]	; (8020ecc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8020e8e:	7823      	ldrb	r3, [r4, #0]
 8020e90:	f3bf 8f5b 	dmb	ish
 8020e94:	07db      	lsls	r3, r3, #31
 8020e96:	d40b      	bmi.n	8020eb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020e98:	4620      	mov	r0, r4
 8020e9a:	f006 fb5d 	bl	8027558 <__cxa_guard_acquire>
 8020e9e:	b138      	cbz	r0, 8020eb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020ea0:	4620      	mov	r0, r4
 8020ea2:	f006 fb65 	bl	8027570 <__cxa_guard_release>
 8020ea6:	4a06      	ldr	r2, [pc, #24]	; (8020ec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020ea8:	4909      	ldr	r1, [pc, #36]	; (8020ed0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8020eaa:	480a      	ldr	r0, [pc, #40]	; (8020ed4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8020eac:	f006 fb4a 	bl	8027544 <__aeabi_atexit>
 8020eb0:	4b05      	ldr	r3, [pc, #20]	; (8020ec8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020eb2:	652b      	str	r3, [r5, #80]	; 0x50
 8020eb4:	4b07      	ldr	r3, [pc, #28]	; (8020ed4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8020eb6:	656b      	str	r3, [r5, #84]	; 0x54
 8020eb8:	bd38      	pop	{r3, r4, r5, pc}
 8020eba:	bf00      	nop
 8020ebc:	2000b3f0 	.word	0x2000b3f0
 8020ec0:	20000000 	.word	0x20000000
 8020ec4:	0801f433 	.word	0x0801f433
 8020ec8:	20000054 	.word	0x20000054
 8020ecc:	2000b3f4 	.word	0x2000b3f4
 8020ed0:	0801f431 	.word	0x0801f431
 8020ed4:	20000058 	.word	0x20000058

08020ed8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8020ed8:	b538      	push	{r3, r4, r5, lr}
 8020eda:	4c15      	ldr	r4, [pc, #84]	; (8020f30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8020edc:	4605      	mov	r5, r0
 8020ede:	7823      	ldrb	r3, [r4, #0]
 8020ee0:	f3bf 8f5b 	dmb	ish
 8020ee4:	07da      	lsls	r2, r3, #31
 8020ee6:	d40b      	bmi.n	8020f00 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020ee8:	4620      	mov	r0, r4
 8020eea:	f006 fb35 	bl	8027558 <__cxa_guard_acquire>
 8020eee:	b138      	cbz	r0, 8020f00 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020ef0:	4620      	mov	r0, r4
 8020ef2:	f006 fb3d 	bl	8027570 <__cxa_guard_release>
 8020ef6:	4a0f      	ldr	r2, [pc, #60]	; (8020f34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8020ef8:	490f      	ldr	r1, [pc, #60]	; (8020f38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8020efa:	4810      	ldr	r0, [pc, #64]	; (8020f3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8020efc:	f006 fb22 	bl	8027544 <__aeabi_atexit>
 8020f00:	4c0f      	ldr	r4, [pc, #60]	; (8020f40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8020f02:	7823      	ldrb	r3, [r4, #0]
 8020f04:	f3bf 8f5b 	dmb	ish
 8020f08:	07db      	lsls	r3, r3, #31
 8020f0a:	d40b      	bmi.n	8020f24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020f0c:	4620      	mov	r0, r4
 8020f0e:	f006 fb23 	bl	8027558 <__cxa_guard_acquire>
 8020f12:	b138      	cbz	r0, 8020f24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020f14:	4620      	mov	r0, r4
 8020f16:	f006 fb2b 	bl	8027570 <__cxa_guard_release>
 8020f1a:	4a06      	ldr	r2, [pc, #24]	; (8020f34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8020f1c:	4909      	ldr	r1, [pc, #36]	; (8020f44 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8020f1e:	480a      	ldr	r0, [pc, #40]	; (8020f48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8020f20:	f006 fb10 	bl	8027544 <__aeabi_atexit>
 8020f24:	4b05      	ldr	r3, [pc, #20]	; (8020f3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8020f26:	64ab      	str	r3, [r5, #72]	; 0x48
 8020f28:	4b07      	ldr	r3, [pc, #28]	; (8020f48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8020f2a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8020f2c:	bd38      	pop	{r3, r4, r5, pc}
 8020f2e:	bf00      	nop
 8020f30:	2000b3e0 	.word	0x2000b3e0
 8020f34:	20000000 	.word	0x20000000
 8020f38:	0801f437 	.word	0x0801f437
 8020f3c:	20000044 	.word	0x20000044
 8020f40:	2000b3e4 	.word	0x2000b3e4
 8020f44:	0801f435 	.word	0x0801f435
 8020f48:	20000048 	.word	0x20000048

08020f4c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8020f4c:	b510      	push	{r4, lr}
 8020f4e:	4604      	mov	r4, r0
 8020f50:	f7ff ff88 	bl	8020e64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8020f54:	4620      	mov	r0, r4
 8020f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020f5a:	f7ff bfbd 	b.w	8020ed8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08020f5e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8020f5e:	b510      	push	{r4, lr}
 8020f60:	4604      	mov	r4, r0
 8020f62:	f7ff fff3 	bl	8020f4c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8020f66:	4620      	mov	r0, r4
 8020f68:	f7ff ff72 	bl	8020e50 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8020f6c:	4620      	mov	r0, r4
 8020f6e:	f7ff fe73 	bl	8020c58 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8020f72:	4620      	mov	r0, r4
 8020f74:	f7ff fdf2 	bl	8020b5c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8020f78:	4620      	mov	r0, r4
 8020f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020f7e:	f7ff bee9 	b.w	8020d54 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08020f84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8020f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f88:	b087      	sub	sp, #28
 8020f8a:	7888      	ldrb	r0, [r1, #2]
 8020f8c:	4616      	mov	r6, r2
 8020f8e:	9001      	str	r0, [sp, #4]
 8020f90:	7848      	ldrb	r0, [r1, #1]
 8020f92:	9100      	str	r1, [sp, #0]
 8020f94:	9002      	str	r0, [sp, #8]
 8020f96:	7808      	ldrb	r0, [r1, #0]
 8020f98:	9901      	ldr	r1, [sp, #4]
 8020f9a:	9003      	str	r0, [sp, #12]
 8020f9c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020fa0:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8020fa4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8020fa8:	9902      	ldr	r1, [sp, #8]
 8020faa:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8020fae:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8020fb2:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8020fb6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8020fba:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8020fbe:	9005      	str	r0, [sp, #20]
 8020fc0:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8020fc4:	fb05 ca0e 	mla	sl, r5, lr, ip
 8020fc8:	2d00      	cmp	r5, #0
 8020fca:	eb06 080a 	add.w	r8, r6, sl
 8020fce:	db4a      	blt.n	8021066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8020fd0:	45a9      	cmp	r9, r5
 8020fd2:	dd48      	ble.n	8021066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8020fd4:	f1bc 0f00 	cmp.w	ip, #0
 8020fd8:	db43      	blt.n	8021062 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8020fda:	45e6      	cmp	lr, ip
 8020fdc:	dd41      	ble.n	8021062 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8020fde:	f816 600a 	ldrb.w	r6, [r6, sl]
 8020fe2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020fe6:	441e      	add	r6, r3
 8020fe8:	f11c 0001 	adds.w	r0, ip, #1
 8020fec:	d43e      	bmi.n	802106c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8020fee:	4586      	cmp	lr, r0
 8020ff0:	dd3c      	ble.n	802106c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8020ff2:	2a00      	cmp	r2, #0
 8020ff4:	d03a      	beq.n	802106c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8020ff6:	f898 0001 	ldrb.w	r0, [r8, #1]
 8020ffa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020ffe:	4418      	add	r0, r3
 8021000:	3501      	adds	r5, #1
 8021002:	d437      	bmi.n	8021074 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8021004:	45a9      	cmp	r9, r5
 8021006:	dd35      	ble.n	8021074 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8021008:	b3a4      	cbz	r4, 8021074 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 802100a:	f1bc 0f00 	cmp.w	ip, #0
 802100e:	db2f      	blt.n	8021070 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8021010:	45e6      	cmp	lr, ip
 8021012:	dd2d      	ble.n	8021070 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8021014:	f818 500e 	ldrb.w	r5, [r8, lr]
 8021018:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802101c:	441d      	add	r5, r3
 802101e:	f11c 0c01 	adds.w	ip, ip, #1
 8021022:	d42a      	bmi.n	802107a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8021024:	45e6      	cmp	lr, ip
 8021026:	dd28      	ble.n	802107a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8021028:	b33a      	cbz	r2, 802107a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 802102a:	44c6      	add	lr, r8
 802102c:	f89e c001 	ldrb.w	ip, [lr, #1]
 8021030:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021034:	4463      	add	r3, ip
 8021036:	ea6f 0c07 	mvn.w	ip, r7
 802103a:	2a0f      	cmp	r2, #15
 802103c:	f896 a000 	ldrb.w	sl, [r6]
 8021040:	fa5f fc8c 	uxtb.w	ip, ip
 8021044:	f890 b000 	ldrb.w	fp, [r0]
 8021048:	f895 9000 	ldrb.w	r9, [r5]
 802104c:	7819      	ldrb	r1, [r3, #0]
 802104e:	d801      	bhi.n	8021054 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 8021050:	2c0f      	cmp	r4, #15
 8021052:	d914      	bls.n	802107e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 8021054:	4b40      	ldr	r3, [pc, #256]	; (8021158 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8021056:	f240 11a5 	movw	r1, #421	; 0x1a5
 802105a:	4a40      	ldr	r2, [pc, #256]	; (802115c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 802105c:	4840      	ldr	r0, [pc, #256]	; (8021160 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 802105e:	f006 faa5 	bl	80275ac <__assert_func>
 8021062:	ae05      	add	r6, sp, #20
 8021064:	e7c0      	b.n	8020fe8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 8021066:	a805      	add	r0, sp, #20
 8021068:	4606      	mov	r6, r0
 802106a:	e7c9      	b.n	8021000 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 802106c:	a805      	add	r0, sp, #20
 802106e:	e7c7      	b.n	8021000 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8021070:	ad05      	add	r5, sp, #20
 8021072:	e7d4      	b.n	802101e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 8021074:	ab05      	add	r3, sp, #20
 8021076:	461d      	mov	r5, r3
 8021078:	e7dd      	b.n	8021036 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 802107a:	ab05      	add	r3, sp, #20
 802107c:	e7db      	b.n	8021036 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 802107e:	b292      	uxth	r2, r2
 8021080:	b2a4      	uxth	r4, r4
 8021082:	fa1f fc8c 	uxth.w	ip, ip
 8021086:	fb02 f804 	mul.w	r8, r2, r4
 802108a:	0112      	lsls	r2, r2, #4
 802108c:	b2bf      	uxth	r7, r7
 802108e:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8021092:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8021096:	eba2 0208 	sub.w	r2, r2, r8
 802109a:	b2a4      	uxth	r4, r4
 802109c:	b292      	uxth	r2, r2
 802109e:	ebae 0e04 	sub.w	lr, lr, r4
 80210a2:	fb02 fb0b 	mul.w	fp, r2, fp
 80210a6:	fa1f fe8e 	uxth.w	lr, lr
 80210aa:	fb0e ba0a 	mla	sl, lr, sl, fp
 80210ae:	fb04 aa09 	mla	sl, r4, r9, sl
 80210b2:	fb08 aa01 	mla	sl, r8, r1, sl
 80210b6:	9903      	ldr	r1, [sp, #12]
 80210b8:	fb11 f90c 	smulbb	r9, r1, ip
 80210bc:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80210c0:	9900      	ldr	r1, [sp, #0]
 80210c2:	fb0a 9a07 	mla	sl, sl, r7, r9
 80210c6:	fa1f fa8a 	uxth.w	sl, sl
 80210ca:	f10a 0901 	add.w	r9, sl, #1
 80210ce:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 80210d2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80210d6:	f881 a000 	strb.w	sl, [r1]
 80210da:	f890 a001 	ldrb.w	sl, [r0, #1]
 80210de:	f896 9001 	ldrb.w	r9, [r6, #1]
 80210e2:	fb02 fa0a 	mul.w	sl, r2, sl
 80210e6:	9902      	ldr	r1, [sp, #8]
 80210e8:	fb0e aa09 	mla	sl, lr, r9, sl
 80210ec:	f895 9001 	ldrb.w	r9, [r5, #1]
 80210f0:	fb04 aa09 	mla	sl, r4, r9, sl
 80210f4:	f893 9001 	ldrb.w	r9, [r3, #1]
 80210f8:	fb08 a909 	mla	r9, r8, r9, sl
 80210fc:	fb11 fa0c 	smulbb	sl, r1, ip
 8021100:	9900      	ldr	r1, [sp, #0]
 8021102:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8021106:	fb09 a907 	mla	r9, r9, r7, sl
 802110a:	fa1f f989 	uxth.w	r9, r9
 802110e:	f109 0a01 	add.w	sl, r9, #1
 8021112:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8021116:	ea4f 2929 	mov.w	r9, r9, asr #8
 802111a:	f881 9001 	strb.w	r9, [r1, #1]
 802111e:	7880      	ldrb	r0, [r0, #2]
 8021120:	78b6      	ldrb	r6, [r6, #2]
 8021122:	4342      	muls	r2, r0
 8021124:	78a8      	ldrb	r0, [r5, #2]
 8021126:	789b      	ldrb	r3, [r3, #2]
 8021128:	fb0e 2206 	mla	r2, lr, r6, r2
 802112c:	fb04 2400 	mla	r4, r4, r0, r2
 8021130:	fb08 4803 	mla	r8, r8, r3, r4
 8021134:	9b01      	ldr	r3, [sp, #4]
 8021136:	fb13 fc0c 	smulbb	ip, r3, ip
 802113a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802113e:	fb08 c707 	mla	r7, r8, r7, ip
 8021142:	b2bf      	uxth	r7, r7
 8021144:	f107 0c01 	add.w	ip, r7, #1
 8021148:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 802114c:	123f      	asrs	r7, r7, #8
 802114e:	708f      	strb	r7, [r1, #2]
 8021150:	b007      	add	sp, #28
 8021152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021156:	bf00      	nop
 8021158:	0802c715 	.word	0x0802c715
 802115c:	0802cc0a 	.word	0x0802cc0a
 8021160:	0802c7de 	.word	0x0802c7de

08021164 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021168:	ed2d 8b08 	vpush	{d8-d11}
 802116c:	b095      	sub	sp, #84	; 0x54
 802116e:	eeb0 aa40 	vmov.f32	s20, s0
 8021172:	eef0 9a60 	vmov.f32	s19, s1
 8021176:	930a      	str	r3, [sp, #40]	; 0x28
 8021178:	eeb0 9a41 	vmov.f32	s18, s2
 802117c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8021180:	eeb0 8a62 	vmov.f32	s16, s5
 8021184:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8021186:	eef0 8a43 	vmov.f32	s17, s6
 802118a:	930c      	str	r3, [sp, #48]	; 0x30
 802118c:	eef0 ba44 	vmov.f32	s23, s8
 8021190:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8021194:	eeb0 ba64 	vmov.f32	s22, s9
 8021198:	9013      	str	r0, [sp, #76]	; 0x4c
 802119a:	eef0 aa45 	vmov.f32	s21, s10
 802119e:	9310      	str	r3, [sp, #64]	; 0x40
 80211a0:	6860      	ldr	r0, [r4, #4]
 80211a2:	910f      	str	r1, [sp, #60]	; 0x3c
 80211a4:	9212      	str	r2, [sp, #72]	; 0x48
 80211a6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80211a8:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 80211ac:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80211b0:	fb00 1303 	mla	r3, r0, r3, r1
 80211b4:	6821      	ldr	r1, [r4, #0]
 80211b6:	6854      	ldr	r4, [r2, #4]
 80211b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80211bc:	18cb      	adds	r3, r1, r3
 80211be:	930b      	str	r3, [sp, #44]	; 0x2c
 80211c0:	6813      	ldr	r3, [r2, #0]
 80211c2:	930e      	str	r3, [sp, #56]	; 0x38
 80211c4:	1d23      	adds	r3, r4, #4
 80211c6:	9309      	str	r3, [sp, #36]	; 0x24
 80211c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80211ca:	43db      	mvns	r3, r3
 80211cc:	b2db      	uxtb	r3, r3
 80211ce:	930d      	str	r3, [sp, #52]	; 0x34
 80211d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80211d2:	2b00      	cmp	r3, #0
 80211d4:	dc03      	bgt.n	80211de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80211d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80211d8:	2b00      	cmp	r3, #0
 80211da:	f340 823c 	ble.w	8021656 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 80211de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211e0:	2b00      	cmp	r3, #0
 80211e2:	f340 8115 	ble.w	8021410 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80211e6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80211e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80211ea:	1412      	asrs	r2, r2, #16
 80211ec:	ea4f 4323 	mov.w	r3, r3, asr #16
 80211f0:	d431      	bmi.n	8021256 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80211f2:	1c51      	adds	r1, r2, #1
 80211f4:	428d      	cmp	r5, r1
 80211f6:	dd31      	ble.n	802125c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	db2f      	blt.n	802125c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80211fc:	1c59      	adds	r1, r3, #1
 80211fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021200:	4288      	cmp	r0, r1
 8021202:	dd2b      	ble.n	802125c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021206:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021208:	3b01      	subs	r3, #1
 802120a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 802120c:	fb02 1203 	mla	r2, r2, r3, r1
 8021210:	1412      	asrs	r2, r2, #16
 8021212:	d42d      	bmi.n	8021270 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8021214:	3201      	adds	r2, #1
 8021216:	4295      	cmp	r5, r2
 8021218:	dd2a      	ble.n	8021270 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802121a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802121c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802121e:	fb02 1303 	mla	r3, r2, r3, r1
 8021222:	141b      	asrs	r3, r3, #16
 8021224:	d424      	bmi.n	8021270 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8021226:	3301      	adds	r3, #1
 8021228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802122a:	429a      	cmp	r2, r3
 802122c:	dd20      	ble.n	8021270 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802122e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021230:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8021234:	f103 0c03 	add.w	ip, r3, #3
 8021238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802123a:	9311      	str	r3, [sp, #68]	; 0x44
 802123c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802123e:	2b00      	cmp	r3, #0
 8021240:	f300 814f 	bgt.w	80214e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 8021244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021246:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021248:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802124c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021250:	441a      	add	r2, r3
 8021252:	920b      	str	r2, [sp, #44]	; 0x2c
 8021254:	e0de      	b.n	8021414 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8021256:	1c51      	adds	r1, r2, #1
 8021258:	f040 80cb 	bne.w	80213f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802125c:	42aa      	cmp	r2, r5
 802125e:	f280 80c8 	bge.w	80213f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8021262:	1c5f      	adds	r7, r3, #1
 8021264:	f2c0 80c5 	blt.w	80213f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8021268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802126a:	4293      	cmp	r3, r2
 802126c:	f280 80c1 	bge.w	80213f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8021270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021272:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021274:	9311      	str	r3, [sp, #68]	; 0x44
 8021276:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021278:	2b00      	cmp	r3, #0
 802127a:	dde3      	ble.n	8021244 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802127c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802127e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021280:	141a      	asrs	r2, r3, #16
 8021282:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021284:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021286:	1400      	asrs	r0, r0, #16
 8021288:	f3c1 3103 	ubfx	r1, r1, #12, #4
 802128c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021290:	f100 810e 	bmi.w	80214b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8021294:	1c46      	adds	r6, r0, #1
 8021296:	42b5      	cmp	r5, r6
 8021298:	f340 810c 	ble.w	80214b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 802129c:	2a00      	cmp	r2, #0
 802129e:	f2c0 8109 	blt.w	80214b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80212a2:	1c56      	adds	r6, r2, #1
 80212a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80212a6:	42b4      	cmp	r4, r6
 80212a8:	f340 8104 	ble.w	80214b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80212ac:	fb02 0005 	mla	r0, r2, r5, r0
 80212b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80212b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80212b4:	f814 e000 	ldrb.w	lr, [r4, r0]
 80212b8:	4402      	add	r2, r0
 80212ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80212bc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80212c0:	eb00 080e 	add.w	r8, r0, lr
 80212c4:	2b00      	cmp	r3, #0
 80212c6:	f000 80e4 	beq.w	8021492 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 80212ca:	f892 c001 	ldrb.w	ip, [r2, #1]
 80212ce:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80212d2:	4484      	add	ip, r0
 80212d4:	2900      	cmp	r1, #0
 80212d6:	f000 80e5 	beq.w	80214a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 80212da:	1950      	adds	r0, r2, r5
 80212dc:	5d52      	ldrb	r2, [r2, r5]
 80212de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80212e0:	7840      	ldrb	r0, [r0, #1]
 80212e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80212e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80212ea:	4422      	add	r2, r4
 80212ec:	4420      	add	r0, r4
 80212ee:	b29b      	uxth	r3, r3
 80212f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80212f2:	b289      	uxth	r1, r1
 80212f4:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 80212f8:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80212fc:	fb03 fa01 	mul.w	sl, r3, r1
 8021300:	011b      	lsls	r3, r3, #4
 8021302:	f89c e000 	ldrb.w	lr, [ip]
 8021306:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 802130a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 802130e:	eba3 030a 	sub.w	r3, r3, sl
 8021312:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021314:	b289      	uxth	r1, r1
 8021316:	b29b      	uxth	r3, r3
 8021318:	eba9 0901 	sub.w	r9, r9, r1
 802131c:	fb03 fe0e 	mul.w	lr, r3, lr
 8021320:	fa1f f989 	uxth.w	r9, r9
 8021324:	fb09 ee0b 	mla	lr, r9, fp, lr
 8021328:	f892 b000 	ldrb.w	fp, [r2]
 802132c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021330:	f890 b000 	ldrb.w	fp, [r0]
 8021334:	fb0a ee0b 	mla	lr, sl, fp, lr
 8021338:	f897 b000 	ldrb.w	fp, [r7]
 802133c:	fb1b fb04 	smulbb	fp, fp, r4
 8021340:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8021344:	fb0e be06 	mla	lr, lr, r6, fp
 8021348:	fa1f fe8e 	uxth.w	lr, lr
 802134c:	f10e 0b01 	add.w	fp, lr, #1
 8021350:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 8021354:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8021358:	f887 b000 	strb.w	fp, [r7]
 802135c:	f89c e001 	ldrb.w	lr, [ip, #1]
 8021360:	f898 b001 	ldrb.w	fp, [r8, #1]
 8021364:	fb03 fe0e 	mul.w	lr, r3, lr
 8021368:	fb09 ee0b 	mla	lr, r9, fp, lr
 802136c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021370:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021374:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021378:	fb0a ee0b 	mla	lr, sl, fp, lr
 802137c:	f897 b001 	ldrb.w	fp, [r7, #1]
 8021380:	fb1b fb04 	smulbb	fp, fp, r4
 8021384:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8021388:	fb0e be06 	mla	lr, lr, r6, fp
 802138c:	fa1f fe8e 	uxth.w	lr, lr
 8021390:	f10e 0b01 	add.w	fp, lr, #1
 8021394:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021398:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802139c:	f887 e001 	strb.w	lr, [r7, #1]
 80213a0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80213a4:	f898 e002 	ldrb.w	lr, [r8, #2]
 80213a8:	fb03 f30c 	mul.w	r3, r3, ip
 80213ac:	fb09 330e 	mla	r3, r9, lr, r3
 80213b0:	f892 e002 	ldrb.w	lr, [r2, #2]
 80213b4:	7882      	ldrb	r2, [r0, #2]
 80213b6:	fb01 310e 	mla	r1, r1, lr, r3
 80213ba:	fb0a 1a02 	mla	sl, sl, r2, r1
 80213be:	78b9      	ldrb	r1, [r7, #2]
 80213c0:	fb11 f104 	smulbb	r1, r1, r4
 80213c4:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80213c8:	fb0a 1606 	mla	r6, sl, r6, r1
 80213cc:	b2b6      	uxth	r6, r6
 80213ce:	1c73      	adds	r3, r6, #1
 80213d0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80213d4:	1236      	asrs	r6, r6, #8
 80213d6:	70be      	strb	r6, [r7, #2]
 80213d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80213da:	3703      	adds	r7, #3
 80213dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80213de:	4413      	add	r3, r2
 80213e0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80213e2:	9327      	str	r3, [sp, #156]	; 0x9c
 80213e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213e6:	4413      	add	r3, r2
 80213e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80213ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80213ec:	3b01      	subs	r3, #1
 80213ee:	9311      	str	r3, [sp, #68]	; 0x44
 80213f0:	e741      	b.n	8021276 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 80213f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80213f4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80213f6:	4413      	add	r3, r2
 80213f8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80213fa:	9327      	str	r3, [sp, #156]	; 0x9c
 80213fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213fe:	4413      	add	r3, r2
 8021400:	9328      	str	r3, [sp, #160]	; 0xa0
 8021402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021404:	3b01      	subs	r3, #1
 8021406:	930a      	str	r3, [sp, #40]	; 0x28
 8021408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802140a:	3303      	adds	r3, #3
 802140c:	930b      	str	r3, [sp, #44]	; 0x2c
 802140e:	e6e6      	b.n	80211de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021410:	f47f aef8 	bne.w	8021204 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8021414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021416:	2b00      	cmp	r3, #0
 8021418:	f340 811d 	ble.w	8021656 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 802141c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021420:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021422:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021426:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802142a:	eef0 6a48 	vmov.f32	s13, s16
 802142e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021432:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021436:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802143a:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 802143e:	eef0 6a68 	vmov.f32	s13, s17
 8021442:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021446:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 802144a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802144e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021452:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021456:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802145a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802145e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021462:	ee18 2a10 	vmov	r2, s16
 8021466:	eeb0 8a47 	vmov.f32	s16, s14
 802146a:	fb92 f3f3 	sdiv	r3, r2, r3
 802146e:	ee18 2a90 	vmov	r2, s17
 8021472:	9329      	str	r3, [sp, #164]	; 0xa4
 8021474:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021476:	eef0 8a67 	vmov.f32	s17, s15
 802147a:	fb92 f3f3 	sdiv	r3, r2, r3
 802147e:	932a      	str	r3, [sp, #168]	; 0xa8
 8021480:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021482:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021484:	3b01      	subs	r3, #1
 8021486:	930f      	str	r3, [sp, #60]	; 0x3c
 8021488:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802148a:	bf08      	it	eq
 802148c:	4613      	moveq	r3, r2
 802148e:	930a      	str	r3, [sp, #40]	; 0x28
 8021490:	e69e      	b.n	80211d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8021492:	b151      	cbz	r1, 80214aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8021494:	5d52      	ldrb	r2, [r2, r5]
 8021496:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021498:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802149c:	4402      	add	r2, r0
 802149e:	4640      	mov	r0, r8
 80214a0:	46c4      	mov	ip, r8
 80214a2:	e724      	b.n	80212ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 80214a4:	4640      	mov	r0, r8
 80214a6:	4642      	mov	r2, r8
 80214a8:	e721      	b.n	80212ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 80214aa:	4640      	mov	r0, r8
 80214ac:	4642      	mov	r2, r8
 80214ae:	e7f7      	b.n	80214a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 80214b0:	1c46      	adds	r6, r0, #1
 80214b2:	d191      	bne.n	80213d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80214b4:	4285      	cmp	r5, r0
 80214b6:	dd8f      	ble.n	80213d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80214b8:	1c54      	adds	r4, r2, #1
 80214ba:	db8d      	blt.n	80213d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80214bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80214be:	4294      	cmp	r4, r2
 80214c0:	dd8a      	ble.n	80213d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80214c2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80214c4:	9002      	str	r0, [sp, #8]
 80214c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80214c8:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80214cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80214ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80214d0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80214d4:	e9cd 5300 	strd	r5, r3, [sp]
 80214d8:	4639      	mov	r1, r7
 80214da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214dc:	f7ff fd52 	bl	8020f84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80214e0:	e77a      	b.n	80213d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80214e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80214e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80214e6:	1410      	asrs	r0, r2, #16
 80214e8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80214ec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80214ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80214f0:	1412      	asrs	r2, r2, #16
 80214f2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80214f6:	fb05 2000 	mla	r0, r5, r0, r2
 80214fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80214fc:	f814 8000 	ldrb.w	r8, [r4, r0]
 8021500:	4402      	add	r2, r0
 8021502:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021504:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021508:	eb00 0708 	add.w	r7, r0, r8
 802150c:	2b00      	cmp	r3, #0
 802150e:	f000 8093 	beq.w	8021638 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8021512:	7856      	ldrb	r6, [r2, #1]
 8021514:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021518:	4406      	add	r6, r0
 802151a:	2900      	cmp	r1, #0
 802151c:	f000 8095 	beq.w	802164a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8021520:	1950      	adds	r0, r2, r5
 8021522:	5d52      	ldrb	r2, [r2, r5]
 8021524:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021526:	7840      	ldrb	r0, [r0, #1]
 8021528:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802152c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021530:	4422      	add	r2, r4
 8021532:	4420      	add	r0, r4
 8021534:	b29b      	uxth	r3, r3
 8021536:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021538:	b289      	uxth	r1, r1
 802153a:	f10c 0c03 	add.w	ip, ip, #3
 802153e:	f814 b008 	ldrb.w	fp, [r4, r8]
 8021542:	fb03 f901 	mul.w	r9, r3, r1
 8021546:	011b      	lsls	r3, r3, #4
 8021548:	f896 8000 	ldrb.w	r8, [r6]
 802154c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021550:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021554:	eba3 0309 	sub.w	r3, r3, r9
 8021558:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802155a:	b289      	uxth	r1, r1
 802155c:	b29b      	uxth	r3, r3
 802155e:	ebae 0e01 	sub.w	lr, lr, r1
 8021562:	fb03 f808 	mul.w	r8, r3, r8
 8021566:	fa1f fe8e 	uxth.w	lr, lr
 802156a:	fb0e 880b 	mla	r8, lr, fp, r8
 802156e:	f892 b000 	ldrb.w	fp, [r2]
 8021572:	fb01 880b 	mla	r8, r1, fp, r8
 8021576:	f890 b000 	ldrb.w	fp, [r0]
 802157a:	fb09 880b 	mla	r8, r9, fp, r8
 802157e:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 8021582:	fb1b fb04 	smulbb	fp, fp, r4
 8021586:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802158a:	fb08 b80a 	mla	r8, r8, sl, fp
 802158e:	fa1f f888 	uxth.w	r8, r8
 8021592:	f108 0b01 	add.w	fp, r8, #1
 8021596:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802159a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802159e:	f80c 8c06 	strb.w	r8, [ip, #-6]
 80215a2:	f896 8001 	ldrb.w	r8, [r6, #1]
 80215a6:	f897 b001 	ldrb.w	fp, [r7, #1]
 80215aa:	fb03 f808 	mul.w	r8, r3, r8
 80215ae:	fb0e 880b 	mla	r8, lr, fp, r8
 80215b2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80215b6:	fb01 880b 	mla	r8, r1, fp, r8
 80215ba:	f890 b001 	ldrb.w	fp, [r0, #1]
 80215be:	fb09 880b 	mla	r8, r9, fp, r8
 80215c2:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 80215c6:	fb1b fb04 	smulbb	fp, fp, r4
 80215ca:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80215ce:	fb08 b80a 	mla	r8, r8, sl, fp
 80215d2:	fa1f f888 	uxth.w	r8, r8
 80215d6:	f108 0b01 	add.w	fp, r8, #1
 80215da:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80215de:	ea4f 2828 	mov.w	r8, r8, asr #8
 80215e2:	f80c 8c05 	strb.w	r8, [ip, #-5]
 80215e6:	78b6      	ldrb	r6, [r6, #2]
 80215e8:	78bf      	ldrb	r7, [r7, #2]
 80215ea:	4373      	muls	r3, r6
 80215ec:	7896      	ldrb	r6, [r2, #2]
 80215ee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80215f0:	fb0e 3307 	mla	r3, lr, r7, r3
 80215f4:	fb01 3306 	mla	r3, r1, r6, r3
 80215f8:	7886      	ldrb	r6, [r0, #2]
 80215fa:	fb09 3906 	mla	r9, r9, r6, r3
 80215fe:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 8021602:	fb13 f304 	smulbb	r3, r3, r4
 8021606:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802160a:	fb09 390a 	mla	r9, r9, sl, r3
 802160e:	fa1f f989 	uxth.w	r9, r9
 8021612:	f109 0301 	add.w	r3, r9, #1
 8021616:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 802161a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802161c:	4413      	add	r3, r2
 802161e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021620:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021624:	9327      	str	r3, [sp, #156]	; 0x9c
 8021626:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021628:	f80c 9c04 	strb.w	r9, [ip, #-4]
 802162c:	4413      	add	r3, r2
 802162e:	9328      	str	r3, [sp, #160]	; 0xa0
 8021630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021632:	3b01      	subs	r3, #1
 8021634:	9311      	str	r3, [sp, #68]	; 0x44
 8021636:	e601      	b.n	802123c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021638:	b151      	cbz	r1, 8021650 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 802163a:	5d52      	ldrb	r2, [r2, r5]
 802163c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802163e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021642:	4402      	add	r2, r0
 8021644:	4638      	mov	r0, r7
 8021646:	463e      	mov	r6, r7
 8021648:	e774      	b.n	8021534 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 802164a:	4638      	mov	r0, r7
 802164c:	463a      	mov	r2, r7
 802164e:	e771      	b.n	8021534 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8021650:	4638      	mov	r0, r7
 8021652:	463a      	mov	r2, r7
 8021654:	e7f7      	b.n	8021646 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8021656:	b015      	add	sp, #84	; 0x54
 8021658:	ecbd 8b08 	vpop	{d8-d11}
 802165c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021660 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8021660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021664:	780d      	ldrb	r5, [r1, #0]
 8021666:	f891 9002 	ldrb.w	r9, [r1, #2]
 802166a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 802166e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8021672:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8021676:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 802167a:	f891 9001 	ldrb.w	r9, [r1, #1]
 802167e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8021682:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8021686:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802168a:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 802168e:	9501      	str	r5, [sp, #4]
 8021690:	fb06 470c 	mla	r7, r6, ip, r4
 8021694:	2e00      	cmp	r6, #0
 8021696:	eb02 0e07 	add.w	lr, r2, r7
 802169a:	db46      	blt.n	802172a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 802169c:	45b0      	cmp	r8, r6
 802169e:	dd44      	ble.n	802172a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 80216a0:	2c00      	cmp	r4, #0
 80216a2:	db40      	blt.n	8021726 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 80216a4:	45a4      	cmp	ip, r4
 80216a6:	dd3e      	ble.n	8021726 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 80216a8:	5dd7      	ldrb	r7, [r2, r7]
 80216aa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80216ae:	441f      	add	r7, r3
 80216b0:	1c62      	adds	r2, r4, #1
 80216b2:	d43d      	bmi.n	8021730 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80216b4:	4594      	cmp	ip, r2
 80216b6:	dd3b      	ble.n	8021730 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80216b8:	f1ba 0f00 	cmp.w	sl, #0
 80216bc:	d038      	beq.n	8021730 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80216be:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80216c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80216c6:	441d      	add	r5, r3
 80216c8:	3601      	adds	r6, #1
 80216ca:	d435      	bmi.n	8021738 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80216cc:	45b0      	cmp	r8, r6
 80216ce:	dd33      	ble.n	8021738 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80216d0:	b390      	cbz	r0, 8021738 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80216d2:	2c00      	cmp	r4, #0
 80216d4:	db2e      	blt.n	8021734 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80216d6:	45a4      	cmp	ip, r4
 80216d8:	dd2c      	ble.n	8021734 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80216da:	f81e 600c 	ldrb.w	r6, [lr, ip]
 80216de:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80216e2:	441e      	add	r6, r3
 80216e4:	1c62      	adds	r2, r4, #1
 80216e6:	d42a      	bmi.n	802173e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80216e8:	4594      	cmp	ip, r2
 80216ea:	dd28      	ble.n	802173e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80216ec:	f1ba 0f00 	cmp.w	sl, #0
 80216f0:	d025      	beq.n	802173e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80216f2:	44f4      	add	ip, lr
 80216f4:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80216f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80216fc:	4413      	add	r3, r2
 80216fe:	f1ba 0f0f 	cmp.w	sl, #15
 8021702:	f897 8000 	ldrb.w	r8, [r7]
 8021706:	f895 9000 	ldrb.w	r9, [r5]
 802170a:	f896 e000 	ldrb.w	lr, [r6]
 802170e:	f893 c000 	ldrb.w	ip, [r3]
 8021712:	d801      	bhi.n	8021718 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 8021714:	280f      	cmp	r0, #15
 8021716:	d914      	bls.n	8021742 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8021718:	4b29      	ldr	r3, [pc, #164]	; (80217c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 802171a:	f240 11a5 	movw	r1, #421	; 0x1a5
 802171e:	4a29      	ldr	r2, [pc, #164]	; (80217c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8021720:	4829      	ldr	r0, [pc, #164]	; (80217c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 8021722:	f005 ff43 	bl	80275ac <__assert_func>
 8021726:	af01      	add	r7, sp, #4
 8021728:	e7c2      	b.n	80216b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 802172a:	ad01      	add	r5, sp, #4
 802172c:	462f      	mov	r7, r5
 802172e:	e7cb      	b.n	80216c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8021730:	ad01      	add	r5, sp, #4
 8021732:	e7c9      	b.n	80216c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8021734:	ae01      	add	r6, sp, #4
 8021736:	e7d5      	b.n	80216e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 8021738:	ab01      	add	r3, sp, #4
 802173a:	461e      	mov	r6, r3
 802173c:	e7df      	b.n	80216fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 802173e:	ab01      	add	r3, sp, #4
 8021740:	e7dd      	b.n	80216fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8021742:	fa1f f48a 	uxth.w	r4, sl
 8021746:	b280      	uxth	r0, r0
 8021748:	fb04 fa00 	mul.w	sl, r4, r0
 802174c:	0124      	lsls	r4, r4, #4
 802174e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021752:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8021756:	b282      	uxth	r2, r0
 8021758:	eba4 000a 	sub.w	r0, r4, sl
 802175c:	ebab 0b02 	sub.w	fp, fp, r2
 8021760:	b280      	uxth	r0, r0
 8021762:	fa1f fb8b 	uxth.w	fp, fp
 8021766:	fb00 f909 	mul.w	r9, r0, r9
 802176a:	fb0b 9808 	mla	r8, fp, r8, r9
 802176e:	fb02 8e0e 	mla	lr, r2, lr, r8
 8021772:	fb0a ec0c 	mla	ip, sl, ip, lr
 8021776:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802177a:	f881 c000 	strb.w	ip, [r1]
 802177e:	786c      	ldrb	r4, [r5, #1]
 8021780:	f897 c001 	ldrb.w	ip, [r7, #1]
 8021784:	4344      	muls	r4, r0
 8021786:	fb0b 4c0c 	mla	ip, fp, ip, r4
 802178a:	7874      	ldrb	r4, [r6, #1]
 802178c:	fb02 cc04 	mla	ip, r2, r4, ip
 8021790:	785c      	ldrb	r4, [r3, #1]
 8021792:	fb0a c404 	mla	r4, sl, r4, ip
 8021796:	1224      	asrs	r4, r4, #8
 8021798:	704c      	strb	r4, [r1, #1]
 802179a:	78ad      	ldrb	r5, [r5, #2]
 802179c:	78bc      	ldrb	r4, [r7, #2]
 802179e:	4368      	muls	r0, r5
 80217a0:	fb0b 0b04 	mla	fp, fp, r4, r0
 80217a4:	78b0      	ldrb	r0, [r6, #2]
 80217a6:	fb02 b000 	mla	r0, r2, r0, fp
 80217aa:	789a      	ldrb	r2, [r3, #2]
 80217ac:	fb0a 0a02 	mla	sl, sl, r2, r0
 80217b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80217b4:	f881 a002 	strb.w	sl, [r1, #2]
 80217b8:	b003      	add	sp, #12
 80217ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217be:	bf00      	nop
 80217c0:	0802c715 	.word	0x0802c715
 80217c4:	0802cc0a 	.word	0x0802cc0a
 80217c8:	0802c7de 	.word	0x0802c7de

080217cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80217cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217d0:	ed2d 8b0a 	vpush	{d8-d12}
 80217d4:	b08f      	sub	sp, #60	; 0x3c
 80217d6:	eeb0 aa40 	vmov.f32	s20, s0
 80217da:	eef0 9a60 	vmov.f32	s19, s1
 80217de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80217e0:	eeb0 9a41 	vmov.f32	s18, s2
 80217e4:	9307      	str	r3, [sp, #28]
 80217e6:	eeb0 8a62 	vmov.f32	s16, s5
 80217ea:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 80217ee:	eef0 8a43 	vmov.f32	s17, s6
 80217f2:	900d      	str	r0, [sp, #52]	; 0x34
 80217f4:	eeb0 ca44 	vmov.f32	s24, s8
 80217f8:	6860      	ldr	r0, [r4, #4]
 80217fa:	eef0 ba64 	vmov.f32	s23, s9
 80217fe:	9309      	str	r3, [sp, #36]	; 0x24
 8021800:	eeb0 ba45 	vmov.f32	s22, s10
 8021804:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8021808:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 802180c:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8021810:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8021814:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021816:	fb00 1303 	mla	r3, r0, r3, r1
 802181a:	6821      	ldr	r1, [r4, #0]
 802181c:	6854      	ldr	r4, [r2, #4]
 802181e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021822:	3404      	adds	r4, #4
 8021824:	18cb      	adds	r3, r1, r3
 8021826:	9308      	str	r3, [sp, #32]
 8021828:	6813      	ldr	r3, [r2, #0]
 802182a:	930a      	str	r3, [sp, #40]	; 0x28
 802182c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802182e:	2b00      	cmp	r3, #0
 8021830:	dc03      	bgt.n	802183a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021834:	2b00      	cmp	r3, #0
 8021836:	f340 81d2 	ble.w	8021bde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 802183a:	9b07      	ldr	r3, [sp, #28]
 802183c:	2b00      	cmp	r3, #0
 802183e:	f340 80e3 	ble.w	8021a08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8021842:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021844:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021846:	1412      	asrs	r2, r2, #16
 8021848:	ea4f 4323 	mov.w	r3, r3, asr #16
 802184c:	d42f      	bmi.n	80218ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802184e:	1c51      	adds	r1, r2, #1
 8021850:	428d      	cmp	r5, r1
 8021852:	dd2f      	ble.n	80218b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8021854:	2b00      	cmp	r3, #0
 8021856:	db2d      	blt.n	80218b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8021858:	1c59      	adds	r1, r3, #1
 802185a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802185c:	4288      	cmp	r0, r1
 802185e:	dd29      	ble.n	80218b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8021860:	9b07      	ldr	r3, [sp, #28]
 8021862:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021864:	3b01      	subs	r3, #1
 8021866:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8021868:	fb02 1203 	mla	r2, r2, r3, r1
 802186c:	1412      	asrs	r2, r2, #16
 802186e:	d42b      	bmi.n	80218c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021870:	3201      	adds	r2, #1
 8021872:	4295      	cmp	r5, r2
 8021874:	dd28      	ble.n	80218c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021876:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021878:	9924      	ldr	r1, [sp, #144]	; 0x90
 802187a:	fb02 1303 	mla	r3, r2, r3, r1
 802187e:	141b      	asrs	r3, r3, #16
 8021880:	d422      	bmi.n	80218c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021882:	3301      	adds	r3, #1
 8021884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021886:	429a      	cmp	r2, r3
 8021888:	dd1e      	ble.n	80218c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802188a:	9b08      	ldr	r3, [sp, #32]
 802188c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021890:	f103 0803 	add.w	r8, r3, #3
 8021894:	f1ba 0f00 	cmp.w	sl, #0
 8021898:	f300 8119 	bgt.w	8021ace <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 802189c:	9b07      	ldr	r3, [sp, #28]
 802189e:	9a08      	ldr	r2, [sp, #32]
 80218a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80218a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218a8:	441a      	add	r2, r3
 80218aa:	9208      	str	r2, [sp, #32]
 80218ac:	e0ae      	b.n	8021a0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 80218ae:	1c51      	adds	r1, r2, #1
 80218b0:	f040 809b 	bne.w	80219ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80218b4:	42aa      	cmp	r2, r5
 80218b6:	f280 8098 	bge.w	80219ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80218ba:	1c5a      	adds	r2, r3, #1
 80218bc:	f2c0 8095 	blt.w	80219ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80218c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80218c2:	4293      	cmp	r3, r2
 80218c4:	f280 8091 	bge.w	80219ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80218c8:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 80218cc:	f1bb 0f00 	cmp.w	fp, #0
 80218d0:	dde4      	ble.n	802189c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80218d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80218d4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80218d6:	141a      	asrs	r2, r3, #16
 80218d8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80218da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80218dc:	1400      	asrs	r0, r0, #16
 80218de:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80218e2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80218e6:	f100 80dc 	bmi.w	8021aa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 80218ea:	1c47      	adds	r7, r0, #1
 80218ec:	42bd      	cmp	r5, r7
 80218ee:	f340 80da 	ble.w	8021aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 80218f2:	2a00      	cmp	r2, #0
 80218f4:	f2c0 80d7 	blt.w	8021aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 80218f8:	f102 0c01 	add.w	ip, r2, #1
 80218fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80218fe:	4567      	cmp	r7, ip
 8021900:	f340 80d1 	ble.w	8021aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8021904:	fb02 0005 	mla	r0, r2, r5, r0
 8021908:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802190a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802190c:	f817 8000 	ldrb.w	r8, [r7, r0]
 8021910:	4402      	add	r2, r0
 8021912:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021916:	eb04 0c08 	add.w	ip, r4, r8
 802191a:	2b00      	cmp	r3, #0
 802191c:	f000 80b3 	beq.w	8021a86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8021920:	7857      	ldrb	r7, [r2, #1]
 8021922:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021926:	4427      	add	r7, r4
 8021928:	2900      	cmp	r1, #0
 802192a:	f000 80b4 	beq.w	8021a96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 802192e:	1950      	adds	r0, r2, r5
 8021930:	5d52      	ldrb	r2, [r2, r5]
 8021932:	7840      	ldrb	r0, [r0, #1]
 8021934:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021938:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802193c:	4422      	add	r2, r4
 802193e:	4420      	add	r0, r4
 8021940:	b29b      	uxth	r3, r3
 8021942:	f814 a008 	ldrb.w	sl, [r4, r8]
 8021946:	b289      	uxth	r1, r1
 8021948:	f897 8000 	ldrb.w	r8, [r7]
 802194c:	fb03 f901 	mul.w	r9, r3, r1
 8021950:	011b      	lsls	r3, r3, #4
 8021952:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021956:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802195a:	eba3 0309 	sub.w	r3, r3, r9
 802195e:	b289      	uxth	r1, r1
 8021960:	b29b      	uxth	r3, r3
 8021962:	ebae 0e01 	sub.w	lr, lr, r1
 8021966:	fb03 f808 	mul.w	r8, r3, r8
 802196a:	fa1f fe8e 	uxth.w	lr, lr
 802196e:	fb0e 880a 	mla	r8, lr, sl, r8
 8021972:	f892 a000 	ldrb.w	sl, [r2]
 8021976:	fb01 880a 	mla	r8, r1, sl, r8
 802197a:	f890 a000 	ldrb.w	sl, [r0]
 802197e:	fb09 880a 	mla	r8, r9, sl, r8
 8021982:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021986:	f886 8000 	strb.w	r8, [r6]
 802198a:	f897 8001 	ldrb.w	r8, [r7, #1]
 802198e:	f89c a001 	ldrb.w	sl, [ip, #1]
 8021992:	fb03 f808 	mul.w	r8, r3, r8
 8021996:	fb0e 880a 	mla	r8, lr, sl, r8
 802199a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802199e:	fb01 880a 	mla	r8, r1, sl, r8
 80219a2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80219a6:	fb09 880a 	mla	r8, r9, sl, r8
 80219aa:	ea4f 2828 	mov.w	r8, r8, asr #8
 80219ae:	f886 8001 	strb.w	r8, [r6, #1]
 80219b2:	78bf      	ldrb	r7, [r7, #2]
 80219b4:	f89c c002 	ldrb.w	ip, [ip, #2]
 80219b8:	437b      	muls	r3, r7
 80219ba:	7892      	ldrb	r2, [r2, #2]
 80219bc:	fb0e 330c 	mla	r3, lr, ip, r3
 80219c0:	fb01 3102 	mla	r1, r1, r2, r3
 80219c4:	7882      	ldrb	r2, [r0, #2]
 80219c6:	fb09 1902 	mla	r9, r9, r2, r1
 80219ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 80219ce:	f886 9002 	strb.w	r9, [r6, #2]
 80219d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80219d4:	3603      	adds	r6, #3
 80219d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80219d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80219dc:	4413      	add	r3, r2
 80219de:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80219e0:	9323      	str	r3, [sp, #140]	; 0x8c
 80219e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80219e4:	4413      	add	r3, r2
 80219e6:	9324      	str	r3, [sp, #144]	; 0x90
 80219e8:	e770      	b.n	80218cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 80219ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80219ec:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80219ee:	4413      	add	r3, r2
 80219f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80219f2:	9323      	str	r3, [sp, #140]	; 0x8c
 80219f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80219f6:	4413      	add	r3, r2
 80219f8:	9324      	str	r3, [sp, #144]	; 0x90
 80219fa:	9b07      	ldr	r3, [sp, #28]
 80219fc:	3b01      	subs	r3, #1
 80219fe:	9307      	str	r3, [sp, #28]
 8021a00:	9b08      	ldr	r3, [sp, #32]
 8021a02:	3303      	adds	r3, #3
 8021a04:	9308      	str	r3, [sp, #32]
 8021a06:	e718      	b.n	802183a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021a08:	f47f af2a 	bne.w	8021860 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8021a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a0e:	2b00      	cmp	r3, #0
 8021a10:	f340 80e5 	ble.w	8021bde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8021a14:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021a1a:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021a1e:	eef0 6a48 	vmov.f32	s13, s16
 8021a22:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021a26:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021a2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021a2e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8021a32:	eef0 6a68 	vmov.f32	s13, s17
 8021a36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021a3a:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 8021a3e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021a42:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021a46:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021a4a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021a4e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021a52:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021a56:	ee18 2a10 	vmov	r2, s16
 8021a5a:	eeb0 8a47 	vmov.f32	s16, s14
 8021a5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a62:	ee18 2a90 	vmov	r2, s17
 8021a66:	9325      	str	r3, [sp, #148]	; 0x94
 8021a68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021a6a:	eef0 8a67 	vmov.f32	s17, s15
 8021a6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a72:	9326      	str	r3, [sp, #152]	; 0x98
 8021a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021a78:	3b01      	subs	r3, #1
 8021a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8021a7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021a7e:	bf08      	it	eq
 8021a80:	4613      	moveq	r3, r2
 8021a82:	9307      	str	r3, [sp, #28]
 8021a84:	e6d2      	b.n	802182c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8021a86:	b149      	cbz	r1, 8021a9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8021a88:	5d52      	ldrb	r2, [r2, r5]
 8021a8a:	4660      	mov	r0, ip
 8021a8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021a90:	4422      	add	r2, r4
 8021a92:	4667      	mov	r7, ip
 8021a94:	e754      	b.n	8021940 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8021a96:	4660      	mov	r0, ip
 8021a98:	4662      	mov	r2, ip
 8021a9a:	e751      	b.n	8021940 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8021a9c:	4660      	mov	r0, ip
 8021a9e:	4662      	mov	r2, ip
 8021aa0:	e7f7      	b.n	8021a92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8021aa2:	1c47      	adds	r7, r0, #1
 8021aa4:	d195      	bne.n	80219d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021aa6:	4285      	cmp	r5, r0
 8021aa8:	dd93      	ble.n	80219d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021aaa:	1c57      	adds	r7, r2, #1
 8021aac:	db91      	blt.n	80219d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021aae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021ab0:	4297      	cmp	r7, r2
 8021ab2:	dd8e      	ble.n	80219d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021ab4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8021ab8:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8021abc:	e9cd 5700 	strd	r5, r7, [sp]
 8021ac0:	4623      	mov	r3, r4
 8021ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021ac4:	4631      	mov	r1, r6
 8021ac6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021ac8:	f7ff fdca 	bl	8021660 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8021acc:	e781      	b.n	80219d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021ace:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021ad0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021ad2:	1410      	asrs	r0, r2, #16
 8021ad4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021ad8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021ada:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021adc:	1412      	asrs	r2, r2, #16
 8021ade:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021ae2:	fb05 2000 	mla	r0, r5, r0, r2
 8021ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021ae8:	f816 e000 	ldrb.w	lr, [r6, r0]
 8021aec:	4402      	add	r2, r0
 8021aee:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021af2:	eb04 070e 	add.w	r7, r4, lr
 8021af6:	2b00      	cmp	r3, #0
 8021af8:	d063      	beq.n	8021bc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8021afa:	7856      	ldrb	r6, [r2, #1]
 8021afc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021b00:	4426      	add	r6, r4
 8021b02:	2900      	cmp	r1, #0
 8021b04:	d065      	beq.n	8021bd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8021b06:	1950      	adds	r0, r2, r5
 8021b08:	5d52      	ldrb	r2, [r2, r5]
 8021b0a:	7840      	ldrb	r0, [r0, #1]
 8021b0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021b10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021b14:	4422      	add	r2, r4
 8021b16:	4420      	add	r0, r4
 8021b18:	b29b      	uxth	r3, r3
 8021b1a:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8021b1e:	b289      	uxth	r1, r1
 8021b20:	f896 e000 	ldrb.w	lr, [r6]
 8021b24:	f108 0803 	add.w	r8, r8, #3
 8021b28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021b2c:	fb03 f901 	mul.w	r9, r3, r1
 8021b30:	011b      	lsls	r3, r3, #4
 8021b32:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021b36:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8021b3a:	eba3 0309 	sub.w	r3, r3, r9
 8021b3e:	b289      	uxth	r1, r1
 8021b40:	b29b      	uxth	r3, r3
 8021b42:	ebac 0c01 	sub.w	ip, ip, r1
 8021b46:	fb03 fe0e 	mul.w	lr, r3, lr
 8021b4a:	fa1f fc8c 	uxth.w	ip, ip
 8021b4e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8021b52:	f892 b000 	ldrb.w	fp, [r2]
 8021b56:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021b5a:	f890 b000 	ldrb.w	fp, [r0]
 8021b5e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8021b62:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021b66:	f808 ec06 	strb.w	lr, [r8, #-6]
 8021b6a:	f896 e001 	ldrb.w	lr, [r6, #1]
 8021b6e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8021b72:	fb03 fe0e 	mul.w	lr, r3, lr
 8021b76:	fb0c ee0b 	mla	lr, ip, fp, lr
 8021b7a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021b7e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021b82:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021b86:	fb09 ee0b 	mla	lr, r9, fp, lr
 8021b8a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021b8e:	f808 ec05 	strb.w	lr, [r8, #-5]
 8021b92:	78b6      	ldrb	r6, [r6, #2]
 8021b94:	78bf      	ldrb	r7, [r7, #2]
 8021b96:	4373      	muls	r3, r6
 8021b98:	7896      	ldrb	r6, [r2, #2]
 8021b9a:	7882      	ldrb	r2, [r0, #2]
 8021b9c:	fb0c 3307 	mla	r3, ip, r7, r3
 8021ba0:	fb01 3306 	mla	r3, r1, r6, r3
 8021ba4:	fb09 3902 	mla	r9, r9, r2, r3
 8021ba8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021baa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021bac:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021bb0:	4413      	add	r3, r2
 8021bb2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021bb4:	f808 9c04 	strb.w	r9, [r8, #-4]
 8021bb8:	9323      	str	r3, [sp, #140]	; 0x8c
 8021bba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021bbc:	4413      	add	r3, r2
 8021bbe:	9324      	str	r3, [sp, #144]	; 0x90
 8021bc0:	e668      	b.n	8021894 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8021bc2:	b149      	cbz	r1, 8021bd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8021bc4:	5d52      	ldrb	r2, [r2, r5]
 8021bc6:	4638      	mov	r0, r7
 8021bc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021bcc:	4422      	add	r2, r4
 8021bce:	463e      	mov	r6, r7
 8021bd0:	e7a2      	b.n	8021b18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8021bd2:	4638      	mov	r0, r7
 8021bd4:	463a      	mov	r2, r7
 8021bd6:	e79f      	b.n	8021b18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8021bd8:	4638      	mov	r0, r7
 8021bda:	463a      	mov	r2, r7
 8021bdc:	e7f7      	b.n	8021bce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 8021bde:	b00f      	add	sp, #60	; 0x3c
 8021be0:	ecbd 8b0a 	vpop	{d8-d12}
 8021be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021be8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8021be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bec:	b087      	sub	sp, #28
 8021bee:	7888      	ldrb	r0, [r1, #2]
 8021bf0:	9002      	str	r0, [sp, #8]
 8021bf2:	7848      	ldrb	r0, [r1, #1]
 8021bf4:	9e02      	ldr	r6, [sp, #8]
 8021bf6:	9003      	str	r0, [sp, #12]
 8021bf8:	7808      	ldrb	r0, [r1, #0]
 8021bfa:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8021bfe:	9004      	str	r0, [sp, #16]
 8021c00:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021c04:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8021c08:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8021c0c:	9e03      	ldr	r6, [sp, #12]
 8021c0e:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8021c12:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8021c16:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8021c1a:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 8021c1e:	fb04 7508 	mla	r5, r4, r8, r7
 8021c22:	2c00      	cmp	r4, #0
 8021c24:	eb02 0905 	add.w	r9, r2, r5
 8021c28:	db45      	blt.n	8021cb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8021c2a:	45a2      	cmp	sl, r4
 8021c2c:	dd43      	ble.n	8021cb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8021c2e:	2f00      	cmp	r7, #0
 8021c30:	db3f      	blt.n	8021cb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8021c32:	45b8      	cmp	r8, r7
 8021c34:	dd3d      	ble.n	8021cb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8021c36:	5d52      	ldrb	r2, [r2, r5]
 8021c38:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8021c3c:	1c7a      	adds	r2, r7, #1
 8021c3e:	d43d      	bmi.n	8021cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8021c40:	4590      	cmp	r8, r2
 8021c42:	dd3b      	ble.n	8021cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8021c44:	f1bc 0f00 	cmp.w	ip, #0
 8021c48:	d038      	beq.n	8021cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8021c4a:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021c4e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8021c52:	3401      	adds	r4, #1
 8021c54:	d436      	bmi.n	8021cc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8021c56:	45a2      	cmp	sl, r4
 8021c58:	dd34      	ble.n	8021cc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8021c5a:	f1be 0f00 	cmp.w	lr, #0
 8021c5e:	d031      	beq.n	8021cc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8021c60:	2f00      	cmp	r7, #0
 8021c62:	db2d      	blt.n	8021cc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8021c64:	45b8      	cmp	r8, r7
 8021c66:	dd2b      	ble.n	8021cc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8021c68:	f819 2008 	ldrb.w	r2, [r9, r8]
 8021c6c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8021c70:	3701      	adds	r7, #1
 8021c72:	d409      	bmi.n	8021c88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8021c74:	45b8      	cmp	r8, r7
 8021c76:	dd07      	ble.n	8021c88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8021c78:	f1bc 0f00 	cmp.w	ip, #0
 8021c7c:	d004      	beq.n	8021c88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8021c7e:	44c8      	add	r8, r9
 8021c80:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021c84:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021c88:	f1bc 0f0f 	cmp.w	ip, #15
 8021c8c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8021c90:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8021c94:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021c98:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021c9c:	d802      	bhi.n	8021ca4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8021c9e:	f1be 0f0f 	cmp.w	lr, #15
 8021ca2:	d911      	bls.n	8021cc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8021ca4:	4b77      	ldr	r3, [pc, #476]	; (8021e84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8021ca6:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021caa:	4a77      	ldr	r2, [pc, #476]	; (8021e88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8021cac:	4877      	ldr	r0, [pc, #476]	; (8021e8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 8021cae:	f005 fc7d 	bl	80275ac <__assert_func>
 8021cb2:	4606      	mov	r6, r0
 8021cb4:	e7c2      	b.n	8021c3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8021cb6:	4605      	mov	r5, r0
 8021cb8:	4606      	mov	r6, r0
 8021cba:	e7ca      	b.n	8021c52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8021cbc:	4605      	mov	r5, r0
 8021cbe:	e7c8      	b.n	8021c52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8021cc0:	4604      	mov	r4, r0
 8021cc2:	e7d5      	b.n	8021c70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8021cc4:	4604      	mov	r4, r0
 8021cc6:	e7df      	b.n	8021c88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8021cc8:	fa1f fc8c 	uxth.w	ip, ip
 8021ccc:	fa1f f28e 	uxth.w	r2, lr
 8021cd0:	fb02 fe0c 	mul.w	lr, r2, ip
 8021cd4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021cd8:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8021cdc:	ebac 070e 	sub.w	r7, ip, lr
 8021ce0:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8021ce4:	b292      	uxth	r2, r2
 8021ce6:	b2bf      	uxth	r7, r7
 8021ce8:	1a9b      	subs	r3, r3, r2
 8021cea:	fb07 fc0a 	mul.w	ip, r7, sl
 8021cee:	b29b      	uxth	r3, r3
 8021cf0:	fb03 cc0b 	mla	ip, r3, fp, ip
 8021cf4:	9301      	str	r3, [sp, #4]
 8021cf6:	fb02 cc09 	mla	ip, r2, r9, ip
 8021cfa:	fb0e cc08 	mla	ip, lr, r8, ip
 8021cfe:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021d02:	9305      	str	r3, [sp, #20]
 8021d04:	2b00      	cmp	r3, #0
 8021d06:	f000 80b9 	beq.w	8021e7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 8021d0a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021d0e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d12:	fb0b fc0c 	mul.w	ip, fp, ip
 8021d16:	fb0b f606 	mul.w	r6, fp, r6
 8021d1a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8021d1e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021d22:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8021d26:	44dc      	add	ip, fp
 8021d28:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021d2c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021d30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d34:	fb0a fb0b 	mul.w	fp, sl, fp
 8021d38:	fb0a fa05 	mul.w	sl, sl, r5
 8021d3c:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8021d40:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8021d44:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8021d48:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021d4c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8021d50:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021d54:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8021d58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d5c:	0a36      	lsrs	r6, r6, #8
 8021d5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d62:	44dc      	add	ip, fp
 8021d64:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021d68:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021d6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021d70:	fb09 fb0b 	mul.w	fp, r9, fp
 8021d74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d78:	fb09 f904 	mul.w	r9, r9, r4
 8021d7c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d80:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8021d84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d88:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8021d8c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021d90:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021d94:	fb0c fc07 	mul.w	ip, ip, r7
 8021d98:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021d9c:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8021da0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021da4:	445d      	add	r5, fp
 8021da6:	fb08 f404 	mul.w	r4, r8, r4
 8021daa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021dae:	fb08 f800 	mul.w	r8, r8, r0
 8021db2:	0a2d      	lsrs	r5, r5, #8
 8021db4:	0a20      	lsrs	r0, r4, #8
 8021db6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8021dba:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021dbe:	fb07 f70a 	mul.w	r7, r7, sl
 8021dc2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021dc6:	4404      	add	r4, r0
 8021dc8:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8021dcc:	0a24      	lsrs	r4, r4, #8
 8021dce:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8021dd2:	9801      	ldr	r0, [sp, #4]
 8021dd4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021dd8:	fb03 cc00 	mla	ip, r3, r0, ip
 8021ddc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021de0:	fb00 7606 	mla	r6, r0, r6, r7
 8021de4:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8021de8:	fb04 cc0e 	mla	ip, r4, lr, ip
 8021dec:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021df0:	b280      	uxth	r0, r0
 8021df2:	9c04      	ldr	r4, [sp, #16]
 8021df4:	fb05 cc02 	mla	ip, r5, r2, ip
 8021df8:	fb0e 6e08 	mla	lr, lr, r8, r6
 8021dfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e00:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8021e04:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8021e08:	fb02 ec0c 	mla	ip, r2, ip, lr
 8021e0c:	9a05      	ldr	r2, [sp, #20]
 8021e0e:	4342      	muls	r2, r0
 8021e10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e14:	1c53      	adds	r3, r2, #1
 8021e16:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021e1a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021e1e:	ea45 0c0c 	orr.w	ip, r5, ip
 8021e22:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021e26:	fa5f f28c 	uxtb.w	r2, ip
 8021e2a:	b2db      	uxtb	r3, r3
 8021e2c:	fb14 f403 	smulbb	r4, r4, r3
 8021e30:	fb02 4200 	mla	r2, r2, r0, r4
 8021e34:	b292      	uxth	r2, r2
 8021e36:	1c54      	adds	r4, r2, #1
 8021e38:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8021e3c:	9c03      	ldr	r4, [sp, #12]
 8021e3e:	fb14 f403 	smulbb	r4, r4, r3
 8021e42:	1212      	asrs	r2, r2, #8
 8021e44:	700a      	strb	r2, [r1, #0]
 8021e46:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8021e4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021e4e:	fb02 4200 	mla	r2, r2, r0, r4
 8021e52:	b292      	uxth	r2, r2
 8021e54:	1c54      	adds	r4, r2, #1
 8021e56:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8021e5a:	1212      	asrs	r2, r2, #8
 8021e5c:	704a      	strb	r2, [r1, #1]
 8021e5e:	9a02      	ldr	r2, [sp, #8]
 8021e60:	fb12 f303 	smulbb	r3, r2, r3
 8021e64:	fb0c 3c00 	mla	ip, ip, r0, r3
 8021e68:	fa1f fc8c 	uxth.w	ip, ip
 8021e6c:	f10c 0301 	add.w	r3, ip, #1
 8021e70:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021e74:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021e78:	f881 c002 	strb.w	ip, [r1, #2]
 8021e7c:	b007      	add	sp, #28
 8021e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e82:	bf00      	nop
 8021e84:	0802c715 	.word	0x0802c715
 8021e88:	0802cc0a 	.word	0x0802cc0a
 8021e8c:	0802c7de 	.word	0x0802c7de

08021e90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e94:	ed2d 8b08 	vpush	{d8-d11}
 8021e98:	b09b      	sub	sp, #108	; 0x6c
 8021e9a:	eeb0 aa40 	vmov.f32	s20, s0
 8021e9e:	eef0 9a60 	vmov.f32	s19, s1
 8021ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8021ea4:	eeb0 9a41 	vmov.f32	s18, s2
 8021ea8:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8021eac:	eeb0 8a62 	vmov.f32	s16, s5
 8021eb0:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8021eb2:	eef0 8a43 	vmov.f32	s17, s6
 8021eb6:	9312      	str	r3, [sp, #72]	; 0x48
 8021eb8:	eef0 ba44 	vmov.f32	s23, s8
 8021ebc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8021ec0:	eeb0 ba64 	vmov.f32	s22, s9
 8021ec4:	9019      	str	r0, [sp, #100]	; 0x64
 8021ec6:	eef0 aa45 	vmov.f32	s21, s10
 8021eca:	9114      	str	r1, [sp, #80]	; 0x50
 8021ecc:	9317      	str	r3, [sp, #92]	; 0x5c
 8021ece:	6868      	ldr	r0, [r5, #4]
 8021ed0:	9218      	str	r2, [sp, #96]	; 0x60
 8021ed2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8021ed4:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8021ed8:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8021edc:	fb00 1303 	mla	r3, r0, r3, r1
 8021ee0:	6829      	ldr	r1, [r5, #0]
 8021ee2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ee6:	18cb      	adds	r3, r1, r3
 8021ee8:	930d      	str	r3, [sp, #52]	; 0x34
 8021eea:	6813      	ldr	r3, [r2, #0]
 8021eec:	9313      	str	r3, [sp, #76]	; 0x4c
 8021eee:	6853      	ldr	r3, [r2, #4]
 8021ef0:	3304      	adds	r3, #4
 8021ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8021ef4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	dc03      	bgt.n	8021f02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8021efa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021efc:	2b00      	cmp	r3, #0
 8021efe:	f340 8352 	ble.w	80225a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8021f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f04:	2b00      	cmp	r3, #0
 8021f06:	f340 81a2 	ble.w	802224e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 8021f0a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021f0c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021f0e:	1412      	asrs	r2, r2, #16
 8021f10:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021f14:	d431      	bmi.n	8021f7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8021f16:	1c51      	adds	r1, r2, #1
 8021f18:	428c      	cmp	r4, r1
 8021f1a:	dd31      	ble.n	8021f80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8021f1c:	2b00      	cmp	r3, #0
 8021f1e:	db2f      	blt.n	8021f80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8021f20:	1c59      	adds	r1, r3, #1
 8021f22:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021f24:	4288      	cmp	r0, r1
 8021f26:	dd2b      	ble.n	8021f80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8021f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f2a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021f2c:	3b01      	subs	r3, #1
 8021f2e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8021f30:	fb02 1203 	mla	r2, r2, r3, r1
 8021f34:	1412      	asrs	r2, r2, #16
 8021f36:	d42d      	bmi.n	8021f94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8021f38:	3201      	adds	r2, #1
 8021f3a:	4294      	cmp	r4, r2
 8021f3c:	dd2a      	ble.n	8021f94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8021f3e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8021f40:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8021f42:	fb02 1303 	mla	r3, r2, r3, r1
 8021f46:	141b      	asrs	r3, r3, #16
 8021f48:	d424      	bmi.n	8021f94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8021f4a:	3301      	adds	r3, #1
 8021f4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021f4e:	429a      	cmp	r2, r3
 8021f50:	dd20      	ble.n	8021f94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8021f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021f54:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8021f58:	f103 0e03 	add.w	lr, r3, #3
 8021f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f5e:	9315      	str	r3, [sp, #84]	; 0x54
 8021f60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021f62:	2b00      	cmp	r3, #0
 8021f64:	f300 81de 	bgt.w	8022324 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8021f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021f6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021f70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f74:	441a      	add	r2, r3
 8021f76:	920d      	str	r2, [sp, #52]	; 0x34
 8021f78:	e16b      	b.n	8022252 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 8021f7a:	1c51      	adds	r1, r2, #1
 8021f7c:	f040 8158 	bne.w	8022230 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8021f80:	42a2      	cmp	r2, r4
 8021f82:	f280 8155 	bge.w	8022230 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8021f86:	1c5a      	adds	r2, r3, #1
 8021f88:	f2c0 8152 	blt.w	8022230 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8021f8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021f8e:	4293      	cmp	r3, r2
 8021f90:	f280 814e 	bge.w	8022230 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8021f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f96:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021f98:	9316      	str	r3, [sp, #88]	; 0x58
 8021f9a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8021f9e:	9315      	str	r3, [sp, #84]	; 0x54
 8021fa0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021fa2:	2b00      	cmp	r3, #0
 8021fa4:	dde0      	ble.n	8021f68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021fa6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021fa8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021faa:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8021fae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021fb0:	141b      	asrs	r3, r3, #16
 8021fb2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021fb6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021fb8:	1412      	asrs	r2, r2, #16
 8021fba:	f100 819a 	bmi.w	80222f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8021fbe:	1c55      	adds	r5, r2, #1
 8021fc0:	42ac      	cmp	r4, r5
 8021fc2:	f340 8198 	ble.w	80222f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021fc6:	2b00      	cmp	r3, #0
 8021fc8:	f2c0 8195 	blt.w	80222f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021fcc:	1c5d      	adds	r5, r3, #1
 8021fce:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021fd0:	42af      	cmp	r7, r5
 8021fd2:	f340 8190 	ble.w	80222f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021fd6:	fb03 2304 	mla	r3, r3, r4, r2
 8021fda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021fdc:	18d5      	adds	r5, r2, r3
 8021fde:	5cd3      	ldrb	r3, [r2, r3]
 8021fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021fe6:	0e1f      	lsrs	r7, r3, #24
 8021fe8:	2800      	cmp	r0, #0
 8021fea:	f000 8171 	beq.w	80222d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8021fee:	f895 c001 	ldrb.w	ip, [r5, #1]
 8021ff2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8021ff6:	920e      	str	r2, [sp, #56]	; 0x38
 8021ff8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021ffc:	2900      	cmp	r1, #0
 8021ffe:	f000 8172 	beq.w	80222e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8022002:	eb05 0c04 	add.w	ip, r5, r4
 8022006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022008:	5d2d      	ldrb	r5, [r5, r4]
 802200a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 802200e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022012:	950b      	str	r5, [sp, #44]	; 0x2c
 8022014:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022018:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802201a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802201e:	0e15      	lsrs	r5, r2, #24
 8022020:	920f      	str	r2, [sp, #60]	; 0x3c
 8022022:	b280      	uxth	r0, r0
 8022024:	b289      	uxth	r1, r1
 8022026:	fb00 fa01 	mul.w	sl, r0, r1
 802202a:	0100      	lsls	r0, r0, #4
 802202c:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8022030:	eba0 080a 	sub.w	r8, r0, sl
 8022034:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8022038:	b289      	uxth	r1, r1
 802203a:	fa1f f888 	uxth.w	r8, r8
 802203e:	1a52      	subs	r2, r2, r1
 8022040:	fb08 f00e 	mul.w	r0, r8, lr
 8022044:	b292      	uxth	r2, r2
 8022046:	fb02 0007 	mla	r0, r2, r7, r0
 802204a:	fb01 0009 	mla	r0, r1, r9, r0
 802204e:	fb0a 0005 	mla	r0, sl, r5, r0
 8022052:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022056:	2800      	cmp	r0, #0
 8022058:	f000 80dd 	beq.w	8022216 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802205c:	2fff      	cmp	r7, #255	; 0xff
 802205e:	d01a      	beq.n	8022096 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022060:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022064:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022068:	fb07 fc0c 	mul.w	ip, r7, ip
 802206c:	435f      	muls	r7, r3
 802206e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022072:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022076:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 802207a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802207e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8022082:	4463      	add	r3, ip
 8022084:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022088:	0a1b      	lsrs	r3, r3, #8
 802208a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802208e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022092:	ea43 030b 	orr.w	r3, r3, fp
 8022096:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802209a:	d01e      	beq.n	80220da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 802209c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802209e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80220a2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80220a6:	fb0e fb0b 	mul.w	fp, lr, fp
 80220aa:	fb0e fe07 	mul.w	lr, lr, r7
 80220ae:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80220b2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80220b6:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80220ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80220be:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80220c2:	44dc      	add	ip, fp
 80220c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80220c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80220cc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80220d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80220d4:	ea4c 070e 	orr.w	r7, ip, lr
 80220d8:	970e      	str	r7, [sp, #56]	; 0x38
 80220da:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80220de:	d01e      	beq.n	802211e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80220e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80220e2:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80220e6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80220ea:	fb09 fe0e 	mul.w	lr, r9, lr
 80220ee:	fb09 f907 	mul.w	r9, r9, r7
 80220f2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80220f6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80220fa:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80220fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022102:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022106:	44f4      	add	ip, lr
 8022108:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802210c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022110:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022114:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022118:	ea4c 0709 	orr.w	r7, ip, r9
 802211c:	970b      	str	r7, [sp, #44]	; 0x2c
 802211e:	2dff      	cmp	r5, #255	; 0xff
 8022120:	d01c      	beq.n	802215c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8022122:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022124:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022128:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802212c:	fb05 fe0e 	mul.w	lr, r5, lr
 8022130:	437d      	muls	r5, r7
 8022132:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022136:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802213a:	f505 7780 	add.w	r7, r5, #256	; 0x100
 802213e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022142:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8022146:	44f4      	add	ip, lr
 8022148:	0a2d      	lsrs	r5, r5, #8
 802214a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802214e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022152:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022156:	ea4c 0505 	orr.w	r5, ip, r5
 802215a:	950f      	str	r5, [sp, #60]	; 0x3c
 802215c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802215e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022162:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022166:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802216a:	fb08 f505 	mul.w	r5, r8, r5
 802216e:	fb02 5507 	mla	r5, r2, r7, r5
 8022172:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022174:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022178:	fb01 5507 	mla	r5, r1, r7, r5
 802217c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802217e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022182:	fb0a 5507 	mla	r5, sl, r7, r5
 8022186:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022188:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802218c:	0a2d      	lsrs	r5, r5, #8
 802218e:	fb08 f807 	mul.w	r8, r8, r7
 8022192:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022196:	fb02 8303 	mla	r3, r2, r3, r8
 802219a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802219c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80221a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80221a2:	fb01 330c 	mla	r3, r1, ip, r3
 80221a6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80221aa:	fb0a 3a01 	mla	sl, sl, r1, r3
 80221ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80221b0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80221b2:	4343      	muls	r3, r0
 80221b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80221b8:	1c58      	adds	r0, r3, #1
 80221ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80221be:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80221c2:	ea45 050a 	orr.w	r5, r5, sl
 80221c6:	7833      	ldrb	r3, [r6, #0]
 80221c8:	b2ea      	uxtb	r2, r5
 80221ca:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80221ce:	fb12 f201 	smulbb	r2, r2, r1
 80221d2:	b2c0      	uxtb	r0, r0
 80221d4:	fb03 2300 	mla	r3, r3, r0, r2
 80221d8:	b29b      	uxth	r3, r3
 80221da:	1c5a      	adds	r2, r3, #1
 80221dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80221e0:	7872      	ldrb	r2, [r6, #1]
 80221e2:	fb12 f200 	smulbb	r2, r2, r0
 80221e6:	121b      	asrs	r3, r3, #8
 80221e8:	7033      	strb	r3, [r6, #0]
 80221ea:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80221ee:	0c2d      	lsrs	r5, r5, #16
 80221f0:	fb03 2301 	mla	r3, r3, r1, r2
 80221f4:	b29b      	uxth	r3, r3
 80221f6:	1c5a      	adds	r2, r3, #1
 80221f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80221fc:	121b      	asrs	r3, r3, #8
 80221fe:	7073      	strb	r3, [r6, #1]
 8022200:	78b3      	ldrb	r3, [r6, #2]
 8022202:	fb13 f000 	smulbb	r0, r3, r0
 8022206:	fb05 0501 	mla	r5, r5, r1, r0
 802220a:	b2ad      	uxth	r5, r5
 802220c:	1c6b      	adds	r3, r5, #1
 802220e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022212:	122d      	asrs	r5, r5, #8
 8022214:	70b5      	strb	r5, [r6, #2]
 8022216:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022218:	3603      	adds	r6, #3
 802221a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802221c:	4413      	add	r3, r2
 802221e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022220:	932d      	str	r3, [sp, #180]	; 0xb4
 8022222:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022224:	4413      	add	r3, r2
 8022226:	932e      	str	r3, [sp, #184]	; 0xb8
 8022228:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802222a:	3b01      	subs	r3, #1
 802222c:	9316      	str	r3, [sp, #88]	; 0x58
 802222e:	e6b7      	b.n	8021fa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8022230:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022232:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022234:	4413      	add	r3, r2
 8022236:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022238:	932d      	str	r3, [sp, #180]	; 0xb4
 802223a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802223c:	4413      	add	r3, r2
 802223e:	932e      	str	r3, [sp, #184]	; 0xb8
 8022240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022242:	3b01      	subs	r3, #1
 8022244:	930a      	str	r3, [sp, #40]	; 0x28
 8022246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022248:	3303      	adds	r3, #3
 802224a:	930d      	str	r3, [sp, #52]	; 0x34
 802224c:	e659      	b.n	8021f02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802224e:	f47f ae6b 	bne.w	8021f28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8022252:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022254:	2b00      	cmp	r3, #0
 8022256:	f340 81a6 	ble.w	80225a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 802225a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802225e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022260:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022264:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022268:	eef0 6a48 	vmov.f32	s13, s16
 802226c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022270:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022274:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022278:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 802227c:	eef0 6a68 	vmov.f32	s13, s17
 8022280:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022284:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8022288:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802228c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022290:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022294:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022298:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802229c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80222a0:	ee18 2a10 	vmov	r2, s16
 80222a4:	eeb0 8a47 	vmov.f32	s16, s14
 80222a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80222ac:	ee18 2a90 	vmov	r2, s17
 80222b0:	932f      	str	r3, [sp, #188]	; 0xbc
 80222b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80222b4:	eef0 8a67 	vmov.f32	s17, s15
 80222b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80222bc:	9330      	str	r3, [sp, #192]	; 0xc0
 80222be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80222c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80222c2:	3b01      	subs	r3, #1
 80222c4:	9314      	str	r3, [sp, #80]	; 0x50
 80222c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80222c8:	bf08      	it	eq
 80222ca:	4613      	moveq	r3, r2
 80222cc:	930a      	str	r3, [sp, #40]	; 0x28
 80222ce:	e611      	b.n	8021ef4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80222d0:	b161      	cbz	r1, 80222ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 80222d2:	5d2a      	ldrb	r2, [r5, r4]
 80222d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80222d6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80222da:	25ff      	movs	r5, #255	; 0xff
 80222dc:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80222e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80222e2:	46ae      	mov	lr, r5
 80222e4:	e69d      	b.n	8022022 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80222e6:	25ff      	movs	r5, #255	; 0xff
 80222e8:	46a9      	mov	r9, r5
 80222ea:	e69a      	b.n	8022022 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80222ec:	25ff      	movs	r5, #255	; 0xff
 80222ee:	46a9      	mov	r9, r5
 80222f0:	e7f7      	b.n	80222e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 80222f2:	1c57      	adds	r7, r2, #1
 80222f4:	d18f      	bne.n	8022216 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80222f6:	4294      	cmp	r4, r2
 80222f8:	dd8d      	ble.n	8022216 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80222fa:	1c5d      	adds	r5, r3, #1
 80222fc:	db8b      	blt.n	8022216 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80222fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022300:	429d      	cmp	r5, r3
 8022302:	dd88      	ble.n	8022216 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8022304:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8022306:	9202      	str	r2, [sp, #8]
 8022308:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802230a:	e9cd 3003 	strd	r3, r0, [sp, #12]
 802230e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022310:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022312:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8022316:	e9cd 4300 	strd	r4, r3, [sp]
 802231a:	4631      	mov	r1, r6
 802231c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802231e:	f7ff fc63 	bl	8021be8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8022322:	e778      	b.n	8022216 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8022324:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022326:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022328:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802232c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802232e:	1412      	asrs	r2, r2, #16
 8022330:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8022334:	141b      	asrs	r3, r3, #16
 8022336:	fb04 2303 	mla	r3, r4, r3, r2
 802233a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802233c:	18d5      	adds	r5, r2, r3
 802233e:	5cd3      	ldrb	r3, [r2, r3]
 8022340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022346:	0e1e      	lsrs	r6, r3, #24
 8022348:	2900      	cmp	r1, #0
 802234a:	f000 811b 	beq.w	8022584 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 802234e:	786a      	ldrb	r2, [r5, #1]
 8022350:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022352:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8022356:	9210      	str	r2, [sp, #64]	; 0x40
 8022358:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802235c:	2800      	cmp	r0, #0
 802235e:	f000 811c 	beq.w	802259a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 8022362:	192a      	adds	r2, r5, r4
 8022364:	5d2d      	ldrb	r5, [r5, r4]
 8022366:	7852      	ldrb	r2, [r2, #1]
 8022368:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 802236c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8022370:	950c      	str	r5, [sp, #48]	; 0x30
 8022372:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022376:	0e15      	lsrs	r5, r2, #24
 8022378:	9211      	str	r2, [sp, #68]	; 0x44
 802237a:	b289      	uxth	r1, r1
 802237c:	b280      	uxth	r0, r0
 802237e:	fb01 fa00 	mul.w	sl, r1, r0
 8022382:	0109      	lsls	r1, r1, #4
 8022384:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022388:	eba1 080a 	sub.w	r8, r1, sl
 802238c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8022390:	b280      	uxth	r0, r0
 8022392:	fa1f f888 	uxth.w	r8, r8
 8022396:	1a12      	subs	r2, r2, r0
 8022398:	fb08 f10c 	mul.w	r1, r8, ip
 802239c:	b292      	uxth	r2, r2
 802239e:	fb02 1106 	mla	r1, r2, r6, r1
 80223a2:	fb00 1109 	mla	r1, r0, r9, r1
 80223a6:	fb0a 1105 	mla	r1, sl, r5, r1
 80223aa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80223ae:	2900      	cmp	r1, #0
 80223b0:	f000 80da 	beq.w	8022568 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 80223b4:	2eff      	cmp	r6, #255	; 0xff
 80223b6:	d016      	beq.n	80223e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 80223b8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80223bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80223c0:	4377      	muls	r7, r6
 80223c2:	435e      	muls	r6, r3
 80223c4:	0a3b      	lsrs	r3, r7, #8
 80223c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80223ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80223ce:	443b      	add	r3, r7
 80223d0:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80223d4:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80223d8:	0a1b      	lsrs	r3, r3, #8
 80223da:	0a3f      	lsrs	r7, r7, #8
 80223dc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80223e0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80223e4:	433b      	orrs	r3, r7
 80223e6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80223ea:	d01d      	beq.n	8022428 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 80223ec:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80223ee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80223f0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80223f4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80223f8:	fb0c f606 	mul.w	r6, ip, r6
 80223fc:	fb0c fc07 	mul.w	ip, ip, r7
 8022400:	0a37      	lsrs	r7, r6, #8
 8022402:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022406:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802240a:	4437      	add	r7, r6
 802240c:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8022410:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8022414:	0a3f      	lsrs	r7, r7, #8
 8022416:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802241a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802241e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022422:	ea47 060c 	orr.w	r6, r7, ip
 8022426:	9610      	str	r6, [sp, #64]	; 0x40
 8022428:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802242c:	d01d      	beq.n	802246a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 802242e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022430:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022434:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022438:	fb09 fc0c 	mul.w	ip, r9, ip
 802243c:	fb09 f906 	mul.w	r9, r9, r6
 8022440:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022444:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022448:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802244c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022450:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022454:	4467      	add	r7, ip
 8022456:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802245a:	0a3f      	lsrs	r7, r7, #8
 802245c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022460:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022464:	ea47 0609 	orr.w	r6, r7, r9
 8022468:	960c      	str	r6, [sp, #48]	; 0x30
 802246a:	2dff      	cmp	r5, #255	; 0xff
 802246c:	d01a      	beq.n	80224a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 802246e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022470:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022474:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022478:	fb05 fc0c 	mul.w	ip, r5, ip
 802247c:	4375      	muls	r5, r6
 802247e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022482:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022486:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802248a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802248e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022492:	4467      	add	r7, ip
 8022494:	0a2d      	lsrs	r5, r5, #8
 8022496:	0a3f      	lsrs	r7, r7, #8
 8022498:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802249c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80224a0:	433d      	orrs	r5, r7
 80224a2:	9511      	str	r5, [sp, #68]	; 0x44
 80224a4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80224a6:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80224aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80224ae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80224b2:	fb08 f505 	mul.w	r5, r8, r5
 80224b6:	fb02 5506 	mla	r5, r2, r6, r5
 80224ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80224bc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80224c0:	fb00 5506 	mla	r5, r0, r6, r5
 80224c4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80224c6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80224ca:	fb0a 5506 	mla	r5, sl, r6, r5
 80224ce:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80224d0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80224d4:	0a2d      	lsrs	r5, r5, #8
 80224d6:	fb08 f806 	mul.w	r8, r8, r6
 80224da:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80224de:	fb02 8303 	mla	r3, r2, r3, r8
 80224e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80224e4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80224e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80224ea:	fb00 3307 	mla	r3, r0, r7, r3
 80224ee:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80224f2:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80224f6:	fb01 f30b 	mul.w	r3, r1, fp
 80224fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80224fe:	1c59      	adds	r1, r3, #1
 8022500:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022504:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022508:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802250c:	ea45 050c 	orr.w	r5, r5, ip
 8022510:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022514:	b2ea      	uxtb	r2, r5
 8022516:	b2c9      	uxtb	r1, r1
 8022518:	fb12 f20b 	smulbb	r2, r2, fp
 802251c:	fb03 2301 	mla	r3, r3, r1, r2
 8022520:	b29b      	uxth	r3, r3
 8022522:	1c5a      	adds	r2, r3, #1
 8022524:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022528:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802252c:	fb12 f201 	smulbb	r2, r2, r1
 8022530:	121b      	asrs	r3, r3, #8
 8022532:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022536:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802253a:	0c2d      	lsrs	r5, r5, #16
 802253c:	fb03 230b 	mla	r3, r3, fp, r2
 8022540:	b29b      	uxth	r3, r3
 8022542:	1c5a      	adds	r2, r3, #1
 8022544:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022548:	121b      	asrs	r3, r3, #8
 802254a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802254e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022552:	fb13 f101 	smulbb	r1, r3, r1
 8022556:	fb05 150b 	mla	r5, r5, fp, r1
 802255a:	b2ad      	uxth	r5, r5
 802255c:	1c69      	adds	r1, r5, #1
 802255e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022562:	122d      	asrs	r5, r5, #8
 8022564:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022568:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802256a:	f10e 0e03 	add.w	lr, lr, #3
 802256e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022570:	4413      	add	r3, r2
 8022572:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022574:	932d      	str	r3, [sp, #180]	; 0xb4
 8022576:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022578:	4413      	add	r3, r2
 802257a:	932e      	str	r3, [sp, #184]	; 0xb8
 802257c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802257e:	3b01      	subs	r3, #1
 8022580:	9315      	str	r3, [sp, #84]	; 0x54
 8022582:	e4ed      	b.n	8021f60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8022584:	b160      	cbz	r0, 80225a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 8022586:	5d2a      	ldrb	r2, [r5, r4]
 8022588:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802258a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802258e:	25ff      	movs	r5, #255	; 0xff
 8022590:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8022594:	920c      	str	r2, [sp, #48]	; 0x30
 8022596:	46ac      	mov	ip, r5
 8022598:	e6ef      	b.n	802237a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 802259a:	25ff      	movs	r5, #255	; 0xff
 802259c:	46a9      	mov	r9, r5
 802259e:	e6ec      	b.n	802237a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80225a0:	25ff      	movs	r5, #255	; 0xff
 80225a2:	46a9      	mov	r9, r5
 80225a4:	e7f7      	b.n	8022596 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 80225a6:	b01b      	add	sp, #108	; 0x6c
 80225a8:	ecbd 8b08 	vpop	{d8-d11}
 80225ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080225b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80225b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225b4:	b085      	sub	sp, #20
 80225b6:	7888      	ldrb	r0, [r1, #2]
 80225b8:	4692      	mov	sl, r2
 80225ba:	4698      	mov	r8, r3
 80225bc:	9000      	str	r0, [sp, #0]
 80225be:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80225c2:	7848      	ldrb	r0, [r1, #1]
 80225c4:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80225c8:	9001      	str	r0, [sp, #4]
 80225ca:	7808      	ldrb	r0, [r1, #0]
 80225cc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80225d0:	9002      	str	r0, [sp, #8]
 80225d2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80225d6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80225da:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80225de:	fb04 560c 	mla	r6, r4, ip, r5
 80225e2:	2c00      	cmp	r4, #0
 80225e4:	eb02 0e06 	add.w	lr, r2, r6
 80225e8:	9a00      	ldr	r2, [sp, #0]
 80225ea:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80225ee:	9a01      	ldr	r2, [sp, #4]
 80225f0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80225f4:	db3e      	blt.n	8022674 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 80225f6:	45a1      	cmp	r9, r4
 80225f8:	dd3c      	ble.n	8022674 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 80225fa:	2d00      	cmp	r5, #0
 80225fc:	db38      	blt.n	8022670 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 80225fe:	45ac      	cmp	ip, r5
 8022600:	dd36      	ble.n	8022670 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8022602:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8022606:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 802260a:	1c6e      	adds	r6, r5, #1
 802260c:	d435      	bmi.n	802267a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 802260e:	45b4      	cmp	ip, r6
 8022610:	dd33      	ble.n	802267a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8022612:	b393      	cbz	r3, 802267a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8022614:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8022618:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 802261c:	3401      	adds	r4, #1
 802261e:	d430      	bmi.n	8022682 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8022620:	45a1      	cmp	r9, r4
 8022622:	dd2e      	ble.n	8022682 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8022624:	b36f      	cbz	r7, 8022682 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8022626:	2d00      	cmp	r5, #0
 8022628:	db29      	blt.n	802267e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802262a:	45ac      	cmp	ip, r5
 802262c:	dd27      	ble.n	802267e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802262e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8022632:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8022636:	3501      	adds	r5, #1
 8022638:	d407      	bmi.n	802264a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802263a:	45ac      	cmp	ip, r5
 802263c:	dd05      	ble.n	802264a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802263e:	b123      	cbz	r3, 802264a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8022640:	44f4      	add	ip, lr
 8022642:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8022646:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 802264a:	2b0f      	cmp	r3, #15
 802264c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022650:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022654:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022658:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802265c:	d801      	bhi.n	8022662 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 802265e:	2f0f      	cmp	r7, #15
 8022660:	d911      	bls.n	8022686 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 8022662:	4b76      	ldr	r3, [pc, #472]	; (802283c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8022664:	f240 11a5 	movw	r1, #421	; 0x1a5
 8022668:	4a75      	ldr	r2, [pc, #468]	; (8022840 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 802266a:	4876      	ldr	r0, [pc, #472]	; (8022844 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 802266c:	f004 ff9e 	bl	80275ac <__assert_func>
 8022670:	4602      	mov	r2, r0
 8022672:	e7ca      	b.n	802260a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 8022674:	4606      	mov	r6, r0
 8022676:	4602      	mov	r2, r0
 8022678:	e7d0      	b.n	802261c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 802267a:	4606      	mov	r6, r0
 802267c:	e7ce      	b.n	802261c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 802267e:	4604      	mov	r4, r0
 8022680:	e7d9      	b.n	8022636 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 8022682:	4604      	mov	r4, r0
 8022684:	e7e1      	b.n	802264a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8022686:	b29b      	uxth	r3, r3
 8022688:	b2bf      	uxth	r7, r7
 802268a:	fb07 fe03 	mul.w	lr, r7, r3
 802268e:	011b      	lsls	r3, r3, #4
 8022690:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022694:	eba3 0c0e 	sub.w	ip, r3, lr
 8022698:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802269c:	b2bf      	uxth	r7, r7
 802269e:	fa1f fc8c 	uxth.w	ip, ip
 80226a2:	1bed      	subs	r5, r5, r7
 80226a4:	fb0c f30a 	mul.w	r3, ip, sl
 80226a8:	b2ad      	uxth	r5, r5
 80226aa:	fb05 330b 	mla	r3, r5, fp, r3
 80226ae:	fb07 3309 	mla	r3, r7, r9, r3
 80226b2:	fb0e 3308 	mla	r3, lr, r8, r3
 80226b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80226ba:	9303      	str	r3, [sp, #12]
 80226bc:	2b00      	cmp	r3, #0
 80226be:	f000 80b9 	beq.w	8022834 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 80226c2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80226c6:	d018      	beq.n	80226fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 80226c8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80226cc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80226d0:	fb0b f303 	mul.w	r3, fp, r3
 80226d4:	fb0b fb02 	mul.w	fp, fp, r2
 80226d8:	0a1a      	lsrs	r2, r3, #8
 80226da:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80226de:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80226e2:	441a      	add	r2, r3
 80226e4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80226e8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80226ec:	0a12      	lsrs	r2, r2, #8
 80226ee:	0a1b      	lsrs	r3, r3, #8
 80226f0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80226f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80226f8:	431a      	orrs	r2, r3
 80226fa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80226fe:	d019      	beq.n	8022734 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8022700:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8022704:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022708:	fb0a fb0b 	mul.w	fp, sl, fp
 802270c:	fb0a fa06 	mul.w	sl, sl, r6
 8022710:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8022714:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022718:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802271c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022720:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022724:	445e      	add	r6, fp
 8022726:	0a1b      	lsrs	r3, r3, #8
 8022728:	0a36      	lsrs	r6, r6, #8
 802272a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802272e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022732:	431e      	orrs	r6, r3
 8022734:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022738:	d019      	beq.n	802276e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 802273a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802273e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022742:	fb09 fa0a 	mul.w	sl, r9, sl
 8022746:	fb09 f904 	mul.w	r9, r9, r4
 802274a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802274e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022752:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8022756:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802275a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802275e:	4454      	add	r4, sl
 8022760:	0a1b      	lsrs	r3, r3, #8
 8022762:	0a24      	lsrs	r4, r4, #8
 8022764:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022768:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802276c:	431c      	orrs	r4, r3
 802276e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022772:	d019      	beq.n	80227a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 8022774:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022778:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802277c:	fb08 f909 	mul.w	r9, r8, r9
 8022780:	fb08 f800 	mul.w	r8, r8, r0
 8022784:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8022788:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802278c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8022790:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022794:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022798:	4448      	add	r0, r9
 802279a:	0a1b      	lsrs	r3, r3, #8
 802279c:	0a00      	lsrs	r0, r0, #8
 802279e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80227a2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80227a6:	4318      	orrs	r0, r3
 80227a8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80227ac:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80227b0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80227b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80227b8:	fb0c f808 	mul.w	r8, ip, r8
 80227bc:	fb0c f606 	mul.w	r6, ip, r6
 80227c0:	fb05 8803 	mla	r8, r5, r3, r8
 80227c4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80227c8:	fb05 6202 	mla	r2, r5, r2, r6
 80227cc:	fb07 8803 	mla	r8, r7, r3, r8
 80227d0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80227d4:	fb0e 8303 	mla	r3, lr, r3, r8
 80227d8:	0a1b      	lsrs	r3, r3, #8
 80227da:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80227de:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80227e2:	9c02      	ldr	r4, [sp, #8]
 80227e4:	fb07 2703 	mla	r7, r7, r3, r2
 80227e8:	9a03      	ldr	r2, [sp, #12]
 80227ea:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80227ee:	43d2      	mvns	r2, r2
 80227f0:	fb0e 7303 	mla	r3, lr, r3, r7
 80227f4:	b2d2      	uxtb	r2, r2
 80227f6:	0a1b      	lsrs	r3, r3, #8
 80227f8:	4354      	muls	r4, r2
 80227fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80227fe:	1c60      	adds	r0, r4, #1
 8022800:	ea48 0303 	orr.w	r3, r8, r3
 8022804:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8022808:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802280c:	7008      	strb	r0, [r1, #0]
 802280e:	9801      	ldr	r0, [sp, #4]
 8022810:	4350      	muls	r0, r2
 8022812:	1c44      	adds	r4, r0, #1
 8022814:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8022818:	0a18      	lsrs	r0, r3, #8
 802281a:	0c1b      	lsrs	r3, r3, #16
 802281c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8022820:	7048      	strb	r0, [r1, #1]
 8022822:	9800      	ldr	r0, [sp, #0]
 8022824:	4350      	muls	r0, r2
 8022826:	4602      	mov	r2, r0
 8022828:	3001      	adds	r0, #1
 802282a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802282e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022832:	708b      	strb	r3, [r1, #2]
 8022834:	b005      	add	sp, #20
 8022836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802283a:	bf00      	nop
 802283c:	0802c715 	.word	0x0802c715
 8022840:	0802cc0a 	.word	0x0802cc0a
 8022844:	0802c7de 	.word	0x0802c7de

08022848 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802284c:	ed2d 8b08 	vpush	{d8-d11}
 8022850:	b097      	sub	sp, #92	; 0x5c
 8022852:	eeb0 aa40 	vmov.f32	s20, s0
 8022856:	eef0 9a60 	vmov.f32	s19, s1
 802285a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 802285c:	eeb0 9a41 	vmov.f32	s18, s2
 8022860:	9308      	str	r3, [sp, #32]
 8022862:	eeb0 8a62 	vmov.f32	s16, s5
 8022866:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802286a:	eef0 8a43 	vmov.f32	s17, s6
 802286e:	9015      	str	r0, [sp, #84]	; 0x54
 8022870:	eef0 ba44 	vmov.f32	s23, s8
 8022874:	6868      	ldr	r0, [r5, #4]
 8022876:	eeb0 ba64 	vmov.f32	s22, s9
 802287a:	9112      	str	r1, [sp, #72]	; 0x48
 802287c:	eef0 aa45 	vmov.f32	s21, s10
 8022880:	9310      	str	r3, [sp, #64]	; 0x40
 8022882:	9214      	str	r2, [sp, #80]	; 0x50
 8022884:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8022886:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 802288a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802288e:	fb00 1303 	mla	r3, r0, r3, r1
 8022892:	6829      	ldr	r1, [r5, #0]
 8022894:	6855      	ldr	r5, [r2, #4]
 8022896:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802289a:	3504      	adds	r5, #4
 802289c:	18cb      	adds	r3, r1, r3
 802289e:	930b      	str	r3, [sp, #44]	; 0x2c
 80228a0:	6813      	ldr	r3, [r2, #0]
 80228a2:	9311      	str	r3, [sp, #68]	; 0x44
 80228a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	dc03      	bgt.n	80228b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80228aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80228ac:	2b00      	cmp	r3, #0
 80228ae:	f340 8333 	ble.w	8022f18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 80228b2:	9b08      	ldr	r3, [sp, #32]
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	f340 8190 	ble.w	8022bda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80228ba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80228bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80228be:	1412      	asrs	r2, r2, #16
 80228c0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80228c4:	d42f      	bmi.n	8022926 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80228c6:	1c51      	adds	r1, r2, #1
 80228c8:	428c      	cmp	r4, r1
 80228ca:	dd2f      	ble.n	802292c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	db2d      	blt.n	802292c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80228d0:	1c59      	adds	r1, r3, #1
 80228d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80228d4:	4288      	cmp	r0, r1
 80228d6:	dd29      	ble.n	802292c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80228d8:	9b08      	ldr	r3, [sp, #32]
 80228da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80228dc:	3b01      	subs	r3, #1
 80228de:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80228e0:	fb02 1203 	mla	r2, r2, r3, r1
 80228e4:	1412      	asrs	r2, r2, #16
 80228e6:	d42b      	bmi.n	8022940 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80228e8:	3201      	adds	r2, #1
 80228ea:	4294      	cmp	r4, r2
 80228ec:	dd28      	ble.n	8022940 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80228ee:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80228f0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80228f2:	fb02 1303 	mla	r3, r2, r3, r1
 80228f6:	141b      	asrs	r3, r3, #16
 80228f8:	d422      	bmi.n	8022940 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80228fa:	3301      	adds	r3, #1
 80228fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80228fe:	429a      	cmp	r2, r3
 8022900:	dd1e      	ble.n	8022940 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022904:	f103 0803 	add.w	r8, r3, #3
 8022908:	9b08      	ldr	r3, [sp, #32]
 802290a:	9307      	str	r3, [sp, #28]
 802290c:	9b07      	ldr	r3, [sp, #28]
 802290e:	2b00      	cmp	r3, #0
 8022910:	f300 81ca 	bgt.w	8022ca8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8022914:	9b08      	ldr	r3, [sp, #32]
 8022916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022918:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802291c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022920:	441a      	add	r2, r3
 8022922:	920b      	str	r2, [sp, #44]	; 0x2c
 8022924:	e15b      	b.n	8022bde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8022926:	1c51      	adds	r1, r2, #1
 8022928:	f040 8148 	bne.w	8022bbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802292c:	42a2      	cmp	r2, r4
 802292e:	f280 8145 	bge.w	8022bbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8022932:	1c5a      	adds	r2, r3, #1
 8022934:	f2c0 8142 	blt.w	8022bbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8022938:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802293a:	4293      	cmp	r3, r2
 802293c:	f280 813e 	bge.w	8022bbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8022940:	9b08      	ldr	r3, [sp, #32]
 8022942:	9313      	str	r3, [sp, #76]	; 0x4c
 8022944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022946:	9307      	str	r3, [sp, #28]
 8022948:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802294a:	2b00      	cmp	r3, #0
 802294c:	dde2      	ble.n	8022914 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802294e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022950:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022952:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022956:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022958:	141b      	asrs	r3, r3, #16
 802295a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802295e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022960:	1412      	asrs	r2, r2, #16
 8022962:	f100 818b 	bmi.w	8022c7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8022966:	1c56      	adds	r6, r2, #1
 8022968:	42b4      	cmp	r4, r6
 802296a:	f340 8189 	ble.w	8022c80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802296e:	2b00      	cmp	r3, #0
 8022970:	f2c0 8186 	blt.w	8022c80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8022974:	1c5e      	adds	r6, r3, #1
 8022976:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022978:	42b7      	cmp	r7, r6
 802297a:	f340 8181 	ble.w	8022c80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802297e:	fb03 2304 	mla	r3, r3, r4, r2
 8022982:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022984:	18d6      	adds	r6, r2, r3
 8022986:	5cd3      	ldrb	r3, [r2, r3]
 8022988:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802298c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022990:	2900      	cmp	r1, #0
 8022992:	f000 8163 	beq.w	8022c5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8022996:	7872      	ldrb	r2, [r6, #1]
 8022998:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802299c:	920c      	str	r2, [sp, #48]	; 0x30
 802299e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80229a2:	2800      	cmp	r0, #0
 80229a4:	f000 8164 	beq.w	8022c70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 80229a8:	1932      	adds	r2, r6, r4
 80229aa:	5d36      	ldrb	r6, [r6, r4]
 80229ac:	7852      	ldrb	r2, [r2, #1]
 80229ae:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80229b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80229b6:	9609      	str	r6, [sp, #36]	; 0x24
 80229b8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80229bc:	0e16      	lsrs	r6, r2, #24
 80229be:	920d      	str	r2, [sp, #52]	; 0x34
 80229c0:	b289      	uxth	r1, r1
 80229c2:	b280      	uxth	r0, r0
 80229c4:	fb01 fb00 	mul.w	fp, r1, r0
 80229c8:	0109      	lsls	r1, r1, #4
 80229ca:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80229ce:	eba1 090b 	sub.w	r9, r1, fp
 80229d2:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80229d6:	b280      	uxth	r0, r0
 80229d8:	fa1f f989 	uxth.w	r9, r9
 80229dc:	1a12      	subs	r2, r2, r0
 80229de:	fb09 f108 	mul.w	r1, r9, r8
 80229e2:	b292      	uxth	r2, r2
 80229e4:	fb02 110c 	mla	r1, r2, ip, r1
 80229e8:	fb00 110a 	mla	r1, r0, sl, r1
 80229ec:	fb0b 1106 	mla	r1, fp, r6, r1
 80229f0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80229f4:	2900      	cmp	r1, #0
 80229f6:	f000 80d2 	beq.w	8022b9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80229fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80229fe:	d01b      	beq.n	8022a38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8022a00:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022a04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a08:	fb0c fe0e 	mul.w	lr, ip, lr
 8022a0c:	fb0c fc03 	mul.w	ip, ip, r3
 8022a10:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8022a14:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022a18:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a1c:	4473      	add	r3, lr
 8022a1e:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8022a22:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8022a26:	0a1b      	lsrs	r3, r3, #8
 8022a28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022a2c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a30:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022a34:	ea43 030e 	orr.w	r3, r3, lr
 8022a38:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022a3c:	d01e      	beq.n	8022a7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8022a3e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022a40:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022a44:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8022a48:	fb08 fc0c 	mul.w	ip, r8, ip
 8022a4c:	fb08 f80e 	mul.w	r8, r8, lr
 8022a50:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022a54:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022a58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022a5c:	44e6      	add	lr, ip
 8022a5e:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8022a62:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8022a66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022a6a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022a6e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022a72:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022a76:	ea4e 0708 	orr.w	r7, lr, r8
 8022a7a:	970c      	str	r7, [sp, #48]	; 0x30
 8022a7c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022a80:	d01e      	beq.n	8022ac0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8022a82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022a84:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8022a88:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022a8c:	fb0a f808 	mul.w	r8, sl, r8
 8022a90:	fb0a fa0c 	mul.w	sl, sl, ip
 8022a94:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022a98:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022a9c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022aa0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022aa4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022aa8:	44c6      	add	lr, r8
 8022aaa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022aae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ab2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022ab6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022aba:	ea4e 070a 	orr.w	r7, lr, sl
 8022abe:	9709      	str	r7, [sp, #36]	; 0x24
 8022ac0:	2eff      	cmp	r6, #255	; 0xff
 8022ac2:	d01d      	beq.n	8022b00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8022ac4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022ac6:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8022aca:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022ace:	fb06 f808 	mul.w	r8, r6, r8
 8022ad2:	fb06 f60c 	mul.w	r6, r6, ip
 8022ad6:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022ada:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022ade:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8022ae2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ae6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022aea:	44c6      	add	lr, r8
 8022aec:	0a36      	lsrs	r6, r6, #8
 8022aee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022af2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022af6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022afa:	ea4e 0606 	orr.w	r6, lr, r6
 8022afe:	960d      	str	r6, [sp, #52]	; 0x34
 8022b00:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022b02:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022b06:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022b08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b0c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b10:	43c9      	mvns	r1, r1
 8022b12:	fb09 f606 	mul.w	r6, r9, r6
 8022b16:	b2c9      	uxtb	r1, r1
 8022b18:	fb02 660c 	mla	r6, r2, ip, r6
 8022b1c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022b20:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022b22:	fb00 660c 	mla	r6, r0, ip, r6
 8022b26:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022b2a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022b2c:	fb0b 660c 	mla	r6, fp, ip, r6
 8022b30:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022b34:	fb09 f90c 	mul.w	r9, r9, ip
 8022b38:	0a36      	lsrs	r6, r6, #8
 8022b3a:	fb02 9303 	mla	r3, r2, r3, r9
 8022b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022b40:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b44:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8022b48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022b4a:	fb00 330e 	mla	r3, r0, lr, r3
 8022b4e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8022b52:	fb0b 3b00 	mla	fp, fp, r0, r3
 8022b56:	9b07      	ldr	r3, [sp, #28]
 8022b58:	781b      	ldrb	r3, [r3, #0]
 8022b5a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022b5e:	fb03 f201 	mul.w	r2, r3, r1
 8022b62:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022b66:	1c53      	adds	r3, r2, #1
 8022b68:	ea46 060b 	orr.w	r6, r6, fp
 8022b6c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022b70:	9a07      	ldr	r2, [sp, #28]
 8022b72:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8022b76:	7013      	strb	r3, [r2, #0]
 8022b78:	7853      	ldrb	r3, [r2, #1]
 8022b7a:	434b      	muls	r3, r1
 8022b7c:	1c5a      	adds	r2, r3, #1
 8022b7e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022b82:	0a33      	lsrs	r3, r6, #8
 8022b84:	0c36      	lsrs	r6, r6, #16
 8022b86:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022b8a:	9a07      	ldr	r2, [sp, #28]
 8022b8c:	7053      	strb	r3, [r2, #1]
 8022b8e:	7893      	ldrb	r3, [r2, #2]
 8022b90:	4359      	muls	r1, r3
 8022b92:	1c4b      	adds	r3, r1, #1
 8022b94:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022b98:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8022b9c:	7096      	strb	r6, [r2, #2]
 8022b9e:	9b07      	ldr	r3, [sp, #28]
 8022ba0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022ba2:	3303      	adds	r3, #3
 8022ba4:	9307      	str	r3, [sp, #28]
 8022ba6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022ba8:	4413      	add	r3, r2
 8022baa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022bac:	9329      	str	r3, [sp, #164]	; 0xa4
 8022bae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022bb0:	4413      	add	r3, r2
 8022bb2:	932a      	str	r3, [sp, #168]	; 0xa8
 8022bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022bb6:	3b01      	subs	r3, #1
 8022bb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8022bba:	e6c5      	b.n	8022948 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8022bbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022bbe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022bc0:	4413      	add	r3, r2
 8022bc2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022bc4:	9329      	str	r3, [sp, #164]	; 0xa4
 8022bc6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022bc8:	4413      	add	r3, r2
 8022bca:	932a      	str	r3, [sp, #168]	; 0xa8
 8022bcc:	9b08      	ldr	r3, [sp, #32]
 8022bce:	3b01      	subs	r3, #1
 8022bd0:	9308      	str	r3, [sp, #32]
 8022bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022bd4:	3303      	adds	r3, #3
 8022bd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8022bd8:	e66b      	b.n	80228b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8022bda:	f47f ae7d 	bne.w	80228d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8022bde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022be0:	2b00      	cmp	r3, #0
 8022be2:	f340 8199 	ble.w	8022f18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8022be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022bea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022bec:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022bf0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022bf4:	eef0 6a48 	vmov.f32	s13, s16
 8022bf8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022bfc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022c00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c04:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022c08:	eef0 6a68 	vmov.f32	s13, s17
 8022c0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c10:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8022c14:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022c18:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022c1c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022c20:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022c24:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022c28:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022c2c:	ee18 2a10 	vmov	r2, s16
 8022c30:	eeb0 8a47 	vmov.f32	s16, s14
 8022c34:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c38:	ee18 2a90 	vmov	r2, s17
 8022c3c:	932b      	str	r3, [sp, #172]	; 0xac
 8022c3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c40:	eef0 8a67 	vmov.f32	s17, s15
 8022c44:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c48:	932c      	str	r3, [sp, #176]	; 0xb0
 8022c4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022c4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022c4e:	3b01      	subs	r3, #1
 8022c50:	9312      	str	r3, [sp, #72]	; 0x48
 8022c52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c54:	bf08      	it	eq
 8022c56:	4613      	moveq	r3, r2
 8022c58:	9308      	str	r3, [sp, #32]
 8022c5a:	e623      	b.n	80228a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8022c5c:	b158      	cbz	r0, 8022c76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022c5e:	5d32      	ldrb	r2, [r6, r4]
 8022c60:	26ff      	movs	r6, #255	; 0xff
 8022c62:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022c66:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8022c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8022c6c:	46b0      	mov	r8, r6
 8022c6e:	e6a7      	b.n	80229c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8022c70:	26ff      	movs	r6, #255	; 0xff
 8022c72:	46b2      	mov	sl, r6
 8022c74:	e6a4      	b.n	80229c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8022c76:	26ff      	movs	r6, #255	; 0xff
 8022c78:	46b2      	mov	sl, r6
 8022c7a:	e7f7      	b.n	8022c6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022c7c:	1c57      	adds	r7, r2, #1
 8022c7e:	d18e      	bne.n	8022b9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022c80:	4294      	cmp	r4, r2
 8022c82:	dd8c      	ble.n	8022b9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022c84:	1c5e      	adds	r6, r3, #1
 8022c86:	db8a      	blt.n	8022b9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022c88:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022c8a:	429e      	cmp	r6, r3
 8022c8c:	dd87      	ble.n	8022b9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022c8e:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8022c92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022c96:	e9cd 4600 	strd	r4, r6, [sp]
 8022c9a:	462b      	mov	r3, r5
 8022c9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022c9e:	9907      	ldr	r1, [sp, #28]
 8022ca0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022ca2:	f7ff fc85 	bl	80225b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8022ca6:	e77a      	b.n	8022b9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022ca8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022caa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022cac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022cb0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022cb2:	1409      	asrs	r1, r1, #16
 8022cb4:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8022cb8:	141b      	asrs	r3, r3, #16
 8022cba:	fb04 1303 	mla	r3, r4, r3, r1
 8022cbe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022cc0:	18ce      	adds	r6, r1, r3
 8022cc2:	5ccb      	ldrb	r3, [r1, r3]
 8022cc4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8022cc8:	0e1f      	lsrs	r7, r3, #24
 8022cca:	2a00      	cmp	r2, #0
 8022ccc:	f000 8114 	beq.w	8022ef8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8022cd0:	7871      	ldrb	r1, [r6, #1]
 8022cd2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8022cd6:	910e      	str	r1, [sp, #56]	; 0x38
 8022cd8:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022cdc:	2800      	cmp	r0, #0
 8022cde:	f000 8115 	beq.w	8022f0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8022ce2:	1931      	adds	r1, r6, r4
 8022ce4:	5d36      	ldrb	r6, [r6, r4]
 8022ce6:	7849      	ldrb	r1, [r1, #1]
 8022ce8:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8022cec:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8022cf0:	960a      	str	r6, [sp, #40]	; 0x28
 8022cf2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022cf6:	0e0e      	lsrs	r6, r1, #24
 8022cf8:	910f      	str	r1, [sp, #60]	; 0x3c
 8022cfa:	b292      	uxth	r2, r2
 8022cfc:	b280      	uxth	r0, r0
 8022cfe:	fb02 fb00 	mul.w	fp, r2, r0
 8022d02:	0112      	lsls	r2, r2, #4
 8022d04:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8022d08:	eba2 090b 	sub.w	r9, r2, fp
 8022d0c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022d10:	b280      	uxth	r0, r0
 8022d12:	fa1f f989 	uxth.w	r9, r9
 8022d16:	1a09      	subs	r1, r1, r0
 8022d18:	fb09 f20e 	mul.w	r2, r9, lr
 8022d1c:	b289      	uxth	r1, r1
 8022d1e:	fb01 2207 	mla	r2, r1, r7, r2
 8022d22:	fb00 220a 	mla	r2, r0, sl, r2
 8022d26:	fb0b 2206 	mla	r2, fp, r6, r2
 8022d2a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022d2e:	9213      	str	r2, [sp, #76]	; 0x4c
 8022d30:	2a00      	cmp	r2, #0
 8022d32:	f000 80d4 	beq.w	8022ede <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8022d36:	2fff      	cmp	r7, #255	; 0xff
 8022d38:	d01a      	beq.n	8022d70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8022d3a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022d3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022d42:	fb07 fc0c 	mul.w	ip, r7, ip
 8022d46:	435f      	muls	r7, r3
 8022d48:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022d4c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022d50:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022d54:	4463      	add	r3, ip
 8022d56:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8022d5a:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8022d5e:	0a1b      	lsrs	r3, r3, #8
 8022d60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d64:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022d68:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022d6c:	ea43 030c 	orr.w	r3, r3, ip
 8022d70:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022d74:	d01f      	beq.n	8022db6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8022d76:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022d78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022d7a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022d7e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022d82:	fb0e f707 	mul.w	r7, lr, r7
 8022d86:	fb0e fe0c 	mul.w	lr, lr, ip
 8022d8a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022d8e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022d92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022d96:	44bc      	add	ip, r7
 8022d98:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022d9c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022da0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022da4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022da8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022dac:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022db0:	ea4c 020e 	orr.w	r2, ip, lr
 8022db4:	920e      	str	r2, [sp, #56]	; 0x38
 8022db6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022dba:	d01e      	beq.n	8022dfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8022dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022dbe:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022dc2:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022dc6:	fb0a fe0e 	mul.w	lr, sl, lr
 8022dca:	fb0a fa07 	mul.w	sl, sl, r7
 8022dce:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022dd2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022dd6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022dda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022dde:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022de2:	44f4      	add	ip, lr
 8022de4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022de8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022dec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022df0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022df4:	ea4c 020a 	orr.w	r2, ip, sl
 8022df8:	920a      	str	r2, [sp, #40]	; 0x28
 8022dfa:	2eff      	cmp	r6, #255	; 0xff
 8022dfc:	d01c      	beq.n	8022e38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8022dfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022e00:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022e04:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022e08:	fb06 fe0e 	mul.w	lr, r6, lr
 8022e0c:	437e      	muls	r6, r7
 8022e0e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022e12:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022e16:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022e1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e1e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022e22:	44f4      	add	ip, lr
 8022e24:	0a36      	lsrs	r6, r6, #8
 8022e26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e2a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022e2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e32:	ea4c 0206 	orr.w	r2, ip, r6
 8022e36:	920f      	str	r2, [sp, #60]	; 0x3c
 8022e38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022e3a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022e3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e42:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8022e46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022e48:	fb09 f606 	mul.w	r6, r9, r6
 8022e4c:	fb01 6607 	mla	r6, r1, r7, r6
 8022e50:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8022e54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022e56:	fb00 6607 	mla	r6, r0, r7, r6
 8022e5a:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8022e5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022e60:	fb0b 6607 	mla	r6, fp, r7, r6
 8022e64:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022e6a:	fb09 f907 	mul.w	r9, r9, r7
 8022e6e:	0a36      	lsrs	r6, r6, #8
 8022e70:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022e74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022e76:	fb01 9303 	mla	r3, r1, r3, r9
 8022e7a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022e7e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8022e82:	fb00 330c 	mla	r3, r0, ip, r3
 8022e86:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8022e8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022e8c:	43da      	mvns	r2, r3
 8022e8e:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8022e92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e96:	b2d2      	uxtb	r2, r2
 8022e98:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022e9c:	fb03 f102 	mul.w	r1, r3, r2
 8022ea0:	ea46 060e 	orr.w	r6, r6, lr
 8022ea4:	1c4b      	adds	r3, r1, #1
 8022ea6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022eaa:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8022eae:	f808 3c03 	strb.w	r3, [r8, #-3]
 8022eb2:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8022eb6:	4353      	muls	r3, r2
 8022eb8:	1c59      	adds	r1, r3, #1
 8022eba:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022ebe:	0a33      	lsrs	r3, r6, #8
 8022ec0:	0c36      	lsrs	r6, r6, #16
 8022ec2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022ec6:	f808 3c02 	strb.w	r3, [r8, #-2]
 8022eca:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8022ece:	435a      	muls	r2, r3
 8022ed0:	1c53      	adds	r3, r2, #1
 8022ed2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022ed6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022eda:	f808 6c01 	strb.w	r6, [r8, #-1]
 8022ede:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022ee0:	f108 0803 	add.w	r8, r8, #3
 8022ee4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022ee6:	4413      	add	r3, r2
 8022ee8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022eea:	9329      	str	r3, [sp, #164]	; 0xa4
 8022eec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022eee:	4413      	add	r3, r2
 8022ef0:	932a      	str	r3, [sp, #168]	; 0xa8
 8022ef2:	9b07      	ldr	r3, [sp, #28]
 8022ef4:	3b01      	subs	r3, #1
 8022ef6:	e508      	b.n	802290a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8022ef8:	b158      	cbz	r0, 8022f12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8022efa:	5d31      	ldrb	r1, [r6, r4]
 8022efc:	26ff      	movs	r6, #255	; 0xff
 8022efe:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8022f02:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8022f06:	910a      	str	r1, [sp, #40]	; 0x28
 8022f08:	46b6      	mov	lr, r6
 8022f0a:	e6f6      	b.n	8022cfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8022f0c:	26ff      	movs	r6, #255	; 0xff
 8022f0e:	46b2      	mov	sl, r6
 8022f10:	e6f3      	b.n	8022cfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8022f12:	26ff      	movs	r6, #255	; 0xff
 8022f14:	46b2      	mov	sl, r6
 8022f16:	e7f7      	b.n	8022f08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8022f18:	b017      	add	sp, #92	; 0x5c
 8022f1a:	ecbd 8b08 	vpop	{d8-d11}
 8022f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022f24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8022f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f28:	b08d      	sub	sp, #52	; 0x34
 8022f2a:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8022f2e:	9103      	str	r1, [sp, #12]
 8022f30:	fb07 5803 	mla	r8, r7, r3, r5
 8022f34:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8022f38:	9803      	ldr	r0, [sp, #12]
 8022f3a:	2f00      	cmp	r7, #0
 8022f3c:	910b      	str	r1, [sp, #44]	; 0x2c
 8022f3e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022f42:	9903      	ldr	r1, [sp, #12]
 8022f44:	9c03      	ldr	r4, [sp, #12]
 8022f46:	eb02 0608 	add.w	r6, r2, r8
 8022f4a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8022f4e:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8022f52:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8022f56:	7809      	ldrb	r1, [r1, #0]
 8022f58:	7840      	ldrb	r0, [r0, #1]
 8022f5a:	78a4      	ldrb	r4, [r4, #2]
 8022f5c:	db51      	blt.n	8023002 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8022f5e:	45be      	cmp	lr, r7
 8022f60:	dd4f      	ble.n	8023002 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8022f62:	2d00      	cmp	r5, #0
 8022f64:	db49      	blt.n	8022ffa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8022f66:	42ab      	cmp	r3, r5
 8022f68:	dd47      	ble.n	8022ffa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8022f6a:	f812 2008 	ldrb.w	r2, [r2, r8]
 8022f6e:	9204      	str	r2, [sp, #16]
 8022f70:	7872      	ldrb	r2, [r6, #1]
 8022f72:	9205      	str	r2, [sp, #20]
 8022f74:	78b2      	ldrb	r2, [r6, #2]
 8022f76:	9206      	str	r2, [sp, #24]
 8022f78:	1c6a      	adds	r2, r5, #1
 8022f7a:	d449      	bmi.n	8023010 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8022f7c:	4293      	cmp	r3, r2
 8022f7e:	dd47      	ble.n	8023010 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8022f80:	f1bc 0f00 	cmp.w	ip, #0
 8022f84:	d044      	beq.n	8023010 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8022f86:	7972      	ldrb	r2, [r6, #5]
 8022f88:	f896 b003 	ldrb.w	fp, [r6, #3]
 8022f8c:	f896 a004 	ldrb.w	sl, [r6, #4]
 8022f90:	9201      	str	r2, [sp, #4]
 8022f92:	3701      	adds	r7, #1
 8022f94:	d444      	bmi.n	8023020 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8022f96:	45be      	cmp	lr, r7
 8022f98:	dd42      	ble.n	8023020 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8022f9a:	f1b9 0f00 	cmp.w	r9, #0
 8022f9e:	f000 80c1 	beq.w	8023124 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8022fa2:	2d00      	cmp	r5, #0
 8022fa4:	db38      	blt.n	8023018 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8022fa6:	42ab      	cmp	r3, r5
 8022fa8:	dd36      	ble.n	8023018 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8022faa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8022fae:	f816 8002 	ldrb.w	r8, [r6, r2]
 8022fb2:	2203      	movs	r2, #3
 8022fb4:	fb03 6702 	mla	r7, r3, r2, r6
 8022fb8:	fb03 6202 	mla	r2, r3, r2, r6
 8022fbc:	787f      	ldrb	r7, [r7, #1]
 8022fbe:	f892 e002 	ldrb.w	lr, [r2, #2]
 8022fc2:	9702      	str	r7, [sp, #8]
 8022fc4:	3501      	adds	r5, #1
 8022fc6:	d432      	bmi.n	802302e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8022fc8:	42ab      	cmp	r3, r5
 8022fca:	dd30      	ble.n	802302e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8022fcc:	f1bc 0f00 	cmp.w	ip, #0
 8022fd0:	d031      	beq.n	8023036 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8022fd2:	2703      	movs	r7, #3
 8022fd4:	fb13 7207 	smlabb	r2, r3, r7, r7
 8022fd8:	5cb5      	ldrb	r5, [r6, r2]
 8022fda:	fb03 6207 	mla	r2, r3, r7, r6
 8022fde:	fb03 6307 	mla	r3, r3, r7, r6
 8022fe2:	7912      	ldrb	r2, [r2, #4]
 8022fe4:	795e      	ldrb	r6, [r3, #5]
 8022fe6:	f1bc 0f0f 	cmp.w	ip, #15
 8022fea:	d927      	bls.n	802303c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8022fec:	4b53      	ldr	r3, [pc, #332]	; (802313c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8022fee:	f240 11a5 	movw	r1, #421	; 0x1a5
 8022ff2:	4a53      	ldr	r2, [pc, #332]	; (8023140 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8022ff4:	4853      	ldr	r0, [pc, #332]	; (8023144 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8022ff6:	f004 fad9 	bl	80275ac <__assert_func>
 8022ffa:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8022ffe:	9104      	str	r1, [sp, #16]
 8023000:	e7ba      	b.n	8022f78 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8023002:	9401      	str	r4, [sp, #4]
 8023004:	4682      	mov	sl, r0
 8023006:	468b      	mov	fp, r1
 8023008:	9104      	str	r1, [sp, #16]
 802300a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802300e:	e7c0      	b.n	8022f92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8023010:	9401      	str	r4, [sp, #4]
 8023012:	4682      	mov	sl, r0
 8023014:	468b      	mov	fp, r1
 8023016:	e7bc      	b.n	8022f92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8023018:	46a6      	mov	lr, r4
 802301a:	9002      	str	r0, [sp, #8]
 802301c:	4688      	mov	r8, r1
 802301e:	e7d1      	b.n	8022fc4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8023020:	4626      	mov	r6, r4
 8023022:	4602      	mov	r2, r0
 8023024:	460d      	mov	r5, r1
 8023026:	46a6      	mov	lr, r4
 8023028:	9002      	str	r0, [sp, #8]
 802302a:	4688      	mov	r8, r1
 802302c:	e7db      	b.n	8022fe6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802302e:	4626      	mov	r6, r4
 8023030:	4602      	mov	r2, r0
 8023032:	460d      	mov	r5, r1
 8023034:	e7d7      	b.n	8022fe6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8023036:	4626      	mov	r6, r4
 8023038:	4602      	mov	r2, r0
 802303a:	460d      	mov	r5, r1
 802303c:	f1b9 0f0f 	cmp.w	r9, #15
 8023040:	d8d4      	bhi.n	8022fec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8023042:	fa1f f38c 	uxth.w	r3, ip
 8023046:	fa1f fc89 	uxth.w	ip, r9
 802304a:	fb03 f70c 	mul.w	r7, r3, ip
 802304e:	011b      	lsls	r3, r3, #4
 8023050:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8023054:	9707      	str	r7, [sp, #28]
 8023056:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802305a:	fa1f fc8c 	uxth.w	ip, ip
 802305e:	eba7 070c 	sub.w	r7, r7, ip
 8023062:	b2bf      	uxth	r7, r7
 8023064:	9709      	str	r7, [sp, #36]	; 0x24
 8023066:	9f07      	ldr	r7, [sp, #28]
 8023068:	1bdb      	subs	r3, r3, r7
 802306a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802306e:	b29b      	uxth	r3, r3
 8023070:	9708      	str	r7, [sp, #32]
 8023072:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023074:	930a      	str	r3, [sp, #40]	; 0x28
 8023076:	ea6f 0907 	mvn.w	r9, r7
 802307a:	fb03 fb0b 	mul.w	fp, r3, fp
 802307e:	9f04      	ldr	r7, [sp, #16]
 8023080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023082:	fa5f f989 	uxtb.w	r9, r9
 8023086:	fb03 bb07 	mla	fp, r3, r7, fp
 802308a:	9f07      	ldr	r7, [sp, #28]
 802308c:	fb11 f109 	smulbb	r1, r1, r9
 8023090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023092:	fb0c b808 	mla	r8, ip, r8, fp
 8023096:	fb10 f009 	smulbb	r0, r0, r9
 802309a:	fb14 f409 	smulbb	r4, r4, r9
 802309e:	fb07 8805 	mla	r8, r7, r5, r8
 80230a2:	9d08      	ldr	r5, [sp, #32]
 80230a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80230a6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80230aa:	fb08 1805 	mla	r8, r8, r5, r1
 80230ae:	9d05      	ldr	r5, [sp, #20]
 80230b0:	fa1f f888 	uxth.w	r8, r8
 80230b4:	f108 0101 	add.w	r1, r8, #1
 80230b8:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80230bc:	9903      	ldr	r1, [sp, #12]
 80230be:	ea4f 2828 	mov.w	r8, r8, asr #8
 80230c2:	f881 8000 	strb.w	r8, [r1]
 80230c6:	fb03 f10a 	mul.w	r1, r3, sl
 80230ca:	fb07 1105 	mla	r1, r7, r5, r1
 80230ce:	9d02      	ldr	r5, [sp, #8]
 80230d0:	fb0c 1105 	mla	r1, ip, r5, r1
 80230d4:	9d07      	ldr	r5, [sp, #28]
 80230d6:	fb05 1102 	mla	r1, r5, r2, r1
 80230da:	9a08      	ldr	r2, [sp, #32]
 80230dc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80230e0:	fb01 0102 	mla	r1, r1, r2, r0
 80230e4:	9a03      	ldr	r2, [sp, #12]
 80230e6:	b289      	uxth	r1, r1
 80230e8:	1c48      	adds	r0, r1, #1
 80230ea:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80230ee:	1209      	asrs	r1, r1, #8
 80230f0:	7051      	strb	r1, [r2, #1]
 80230f2:	9a01      	ldr	r2, [sp, #4]
 80230f4:	4353      	muls	r3, r2
 80230f6:	9a06      	ldr	r2, [sp, #24]
 80230f8:	fb07 3702 	mla	r7, r7, r2, r3
 80230fc:	9b08      	ldr	r3, [sp, #32]
 80230fe:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8023102:	fb05 c606 	mla	r6, r5, r6, ip
 8023106:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802310a:	fb06 4603 	mla	r6, r6, r3, r4
 802310e:	9b03      	ldr	r3, [sp, #12]
 8023110:	b2b6      	uxth	r6, r6
 8023112:	f106 0e01 	add.w	lr, r6, #1
 8023116:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802311a:	1236      	asrs	r6, r6, #8
 802311c:	709e      	strb	r6, [r3, #2]
 802311e:	b00d      	add	sp, #52	; 0x34
 8023120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023124:	f1bc 0f0f 	cmp.w	ip, #15
 8023128:	f63f af60 	bhi.w	8022fec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802312c:	4626      	mov	r6, r4
 802312e:	4602      	mov	r2, r0
 8023130:	460d      	mov	r5, r1
 8023132:	46a6      	mov	lr, r4
 8023134:	9002      	str	r0, [sp, #8]
 8023136:	4688      	mov	r8, r1
 8023138:	e783      	b.n	8023042 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 802313a:	bf00      	nop
 802313c:	0802c715 	.word	0x0802c715
 8023140:	0802cc0a 	.word	0x0802cc0a
 8023144:	0802c7de 	.word	0x0802c7de

08023148 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802314c:	ed2d 8b08 	vpush	{d8-d11}
 8023150:	b0a1      	sub	sp, #132	; 0x84
 8023152:	eeb0 aa40 	vmov.f32	s20, s0
 8023156:	eef0 9a60 	vmov.f32	s19, s1
 802315a:	9307      	str	r3, [sp, #28]
 802315c:	eeb0 9a41 	vmov.f32	s18, s2
 8023160:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8023164:	eeb0 8a62 	vmov.f32	s16, s5
 8023168:	9210      	str	r2, [sp, #64]	; 0x40
 802316a:	eef0 8a43 	vmov.f32	s17, s6
 802316e:	9308      	str	r3, [sp, #32]
 8023170:	eef0 ba44 	vmov.f32	s23, s8
 8023174:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8023178:	eeb0 ba64 	vmov.f32	s22, s9
 802317c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 802317e:	eef0 aa45 	vmov.f32	s21, s10
 8023182:	930a      	str	r3, [sp, #40]	; 0x28
 8023184:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8023188:	901f      	str	r0, [sp, #124]	; 0x7c
 802318a:	930f      	str	r3, [sp, #60]	; 0x3c
 802318c:	6850      	ldr	r0, [r2, #4]
 802318e:	910e      	str	r1, [sp, #56]	; 0x38
 8023190:	6812      	ldr	r2, [r2, #0]
 8023192:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8023196:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 802319a:	fb00 1303 	mla	r3, r0, r3, r1
 802319e:	9908      	ldr	r1, [sp, #32]
 80231a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80231a4:	18d3      	adds	r3, r2, r3
 80231a6:	2203      	movs	r2, #3
 80231a8:	9309      	str	r3, [sp, #36]	; 0x24
 80231aa:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80231ac:	681b      	ldr	r3, [r3, #0]
 80231ae:	930c      	str	r3, [sp, #48]	; 0x30
 80231b0:	f06f 0304 	mvn.w	r3, #4
 80231b4:	fb11 3302 	smlabb	r3, r1, r2, r3
 80231b8:	930d      	str	r3, [sp, #52]	; 0x34
 80231ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80231bc:	43db      	mvns	r3, r3
 80231be:	b2db      	uxtb	r3, r3
 80231c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80231c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80231c4:	2b00      	cmp	r3, #0
 80231c6:	dc03      	bgt.n	80231d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80231c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80231ca:	2b00      	cmp	r3, #0
 80231cc:	f340 81df 	ble.w	802358e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80231d0:	9b07      	ldr	r3, [sp, #28]
 80231d2:	2b00      	cmp	r3, #0
 80231d4:	f340 80f2 	ble.w	80233bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80231d8:	ea5f 4228 	movs.w	r2, r8, asr #16
 80231dc:	ea4f 432b 	mov.w	r3, fp, asr #16
 80231e0:	d430      	bmi.n	8023244 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80231e2:	1c51      	adds	r1, r2, #1
 80231e4:	9808      	ldr	r0, [sp, #32]
 80231e6:	4281      	cmp	r1, r0
 80231e8:	da2f      	bge.n	802324a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80231ea:	2b00      	cmp	r3, #0
 80231ec:	db2d      	blt.n	802324a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80231ee:	1c59      	adds	r1, r3, #1
 80231f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80231f2:	4288      	cmp	r0, r1
 80231f4:	dd29      	ble.n	802324a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80231f6:	9b07      	ldr	r3, [sp, #28]
 80231f8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80231fa:	3b01      	subs	r3, #1
 80231fc:	fb02 8203 	mla	r2, r2, r3, r8
 8023200:	1412      	asrs	r2, r2, #16
 8023202:	d42d      	bmi.n	8023260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8023204:	3201      	adds	r2, #1
 8023206:	9908      	ldr	r1, [sp, #32]
 8023208:	4291      	cmp	r1, r2
 802320a:	dd29      	ble.n	8023260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802320c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802320e:	fb02 b303 	mla	r3, r2, r3, fp
 8023212:	141b      	asrs	r3, r3, #16
 8023214:	d424      	bmi.n	8023260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8023216:	3301      	adds	r3, #1
 8023218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802321a:	429a      	cmp	r2, r3
 802321c:	dd20      	ble.n	8023260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802321e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023220:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8023224:	1cde      	adds	r6, r3, #3
 8023226:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802322a:	f1bc 0f00 	cmp.w	ip, #0
 802322e:	f300 811f 	bgt.w	8023470 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8023232:	9b07      	ldr	r3, [sp, #28]
 8023234:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802323a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802323e:	4423      	add	r3, r4
 8023240:	9309      	str	r3, [sp, #36]	; 0x24
 8023242:	e0bd      	b.n	80233c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8023244:	1c57      	adds	r7, r2, #1
 8023246:	f040 80ae 	bne.w	80233a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802324a:	9908      	ldr	r1, [sp, #32]
 802324c:	428a      	cmp	r2, r1
 802324e:	f280 80aa 	bge.w	80233a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8023252:	1c5e      	adds	r6, r3, #1
 8023254:	f2c0 80a7 	blt.w	80233a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8023258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802325a:	4293      	cmp	r3, r2
 802325c:	f280 80a3 	bge.w	80233a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8023260:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8023264:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023266:	f1ba 0f00 	cmp.w	sl, #0
 802326a:	dde2      	ble.n	8023232 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 802326c:	ea5f 4028 	movs.w	r0, r8, asr #16
 8023270:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8023274:	ea4f 412b 	mov.w	r1, fp, asr #16
 8023278:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802327c:	f100 80df 	bmi.w	802343e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8023280:	1c45      	adds	r5, r0, #1
 8023282:	9f08      	ldr	r7, [sp, #32]
 8023284:	42af      	cmp	r7, r5
 8023286:	f340 80dc 	ble.w	8023442 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802328a:	2900      	cmp	r1, #0
 802328c:	f2c0 80d9 	blt.w	8023442 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8023290:	1c4d      	adds	r5, r1, #1
 8023292:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023294:	42af      	cmp	r7, r5
 8023296:	f340 80d4 	ble.w	8023442 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802329a:	9d08      	ldr	r5, [sp, #32]
 802329c:	fb05 0101 	mla	r1, r5, r1, r0
 80232a0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80232a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80232a6:	1845      	adds	r5, r0, r1
 80232a8:	5c40      	ldrb	r0, [r0, r1]
 80232aa:	792f      	ldrb	r7, [r5, #4]
 80232ac:	7869      	ldrb	r1, [r5, #1]
 80232ae:	9711      	str	r7, [sp, #68]	; 0x44
 80232b0:	796f      	ldrb	r7, [r5, #5]
 80232b2:	f895 e002 	ldrb.w	lr, [r5, #2]
 80232b6:	f895 9003 	ldrb.w	r9, [r5, #3]
 80232ba:	9712      	str	r7, [sp, #72]	; 0x48
 80232bc:	b17a      	cbz	r2, 80232de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 80232be:	3505      	adds	r5, #5
 80232c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80232c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80232c4:	19ef      	adds	r7, r5, r7
 80232c6:	5d2d      	ldrb	r5, [r5, r4]
 80232c8:	787c      	ldrb	r4, [r7, #1]
 80232ca:	9513      	str	r5, [sp, #76]	; 0x4c
 80232cc:	9415      	str	r4, [sp, #84]	; 0x54
 80232ce:	78bc      	ldrb	r4, [r7, #2]
 80232d0:	9417      	str	r4, [sp, #92]	; 0x5c
 80232d2:	78fc      	ldrb	r4, [r7, #3]
 80232d4:	9414      	str	r4, [sp, #80]	; 0x50
 80232d6:	793c      	ldrb	r4, [r7, #4]
 80232d8:	9416      	str	r4, [sp, #88]	; 0x58
 80232da:	797c      	ldrb	r4, [r7, #5]
 80232dc:	9418      	str	r4, [sp, #96]	; 0x60
 80232de:	b29b      	uxth	r3, r3
 80232e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80232e2:	b292      	uxth	r2, r2
 80232e4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80232e8:	fb03 f702 	mul.w	r7, r3, r2
 80232ec:	011b      	lsls	r3, r3, #4
 80232ee:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 80232f2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80232f6:	1bdb      	subs	r3, r3, r7
 80232f8:	b292      	uxth	r2, r2
 80232fa:	b29b      	uxth	r3, r3
 80232fc:	ebac 0c02 	sub.w	ip, ip, r2
 8023300:	fb03 f909 	mul.w	r9, r3, r9
 8023304:	fa1f fc8c 	uxth.w	ip, ip
 8023308:	fb0c 9000 	mla	r0, ip, r0, r9
 802330c:	f896 9000 	ldrb.w	r9, [r6]
 8023310:	fb02 0004 	mla	r0, r2, r4, r0
 8023314:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023316:	fb07 0004 	mla	r0, r7, r4, r0
 802331a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802331c:	fb19 f904 	smulbb	r9, r9, r4
 8023320:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023324:	fb00 9005 	mla	r0, r0, r5, r9
 8023328:	b280      	uxth	r0, r0
 802332a:	f100 0901 	add.w	r9, r0, #1
 802332e:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8023332:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023334:	4358      	muls	r0, r3
 8023336:	ea4f 2929 	mov.w	r9, r9, asr #8
 802333a:	fb0c 0101 	mla	r1, ip, r1, r0
 802333e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023340:	f886 9000 	strb.w	r9, [r6]
 8023344:	fb02 1100 	mla	r1, r2, r0, r1
 8023348:	9816      	ldr	r0, [sp, #88]	; 0x58
 802334a:	fb07 1100 	mla	r1, r7, r0, r1
 802334e:	7870      	ldrb	r0, [r6, #1]
 8023350:	fb10 f004 	smulbb	r0, r0, r4
 8023354:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023358:	fb01 0105 	mla	r1, r1, r5, r0
 802335c:	b289      	uxth	r1, r1
 802335e:	1c48      	adds	r0, r1, #1
 8023360:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023364:	1209      	asrs	r1, r1, #8
 8023366:	7071      	strb	r1, [r6, #1]
 8023368:	9912      	ldr	r1, [sp, #72]	; 0x48
 802336a:	434b      	muls	r3, r1
 802336c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802336e:	fb0c 330e 	mla	r3, ip, lr, r3
 8023372:	fb02 3201 	mla	r2, r2, r1, r3
 8023376:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023378:	fb07 2703 	mla	r7, r7, r3, r2
 802337c:	78b2      	ldrb	r2, [r6, #2]
 802337e:	fb12 f204 	smulbb	r2, r2, r4
 8023382:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023386:	fb07 2505 	mla	r5, r7, r5, r2
 802338a:	b2ad      	uxth	r5, r5
 802338c:	1c6f      	adds	r7, r5, #1
 802338e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8023392:	122d      	asrs	r5, r5, #8
 8023394:	70b5      	strb	r5, [r6, #2]
 8023396:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8023398:	3603      	adds	r6, #3
 802339a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802339e:	4498      	add	r8, r3
 80233a0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80233a2:	449b      	add	fp, r3
 80233a4:	e75f      	b.n	8023266 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80233a6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80233a8:	4498      	add	r8, r3
 80233aa:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80233ac:	449b      	add	fp, r3
 80233ae:	9b07      	ldr	r3, [sp, #28]
 80233b0:	3b01      	subs	r3, #1
 80233b2:	9307      	str	r3, [sp, #28]
 80233b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233b6:	3303      	adds	r3, #3
 80233b8:	9309      	str	r3, [sp, #36]	; 0x24
 80233ba:	e709      	b.n	80231d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80233bc:	f47f af1b 	bne.w	80231f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 80233c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80233c2:	2b00      	cmp	r3, #0
 80233c4:	f340 80e3 	ble.w	802358e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80233c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80233cc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80233ce:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80233d2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80233d6:	eef0 6a48 	vmov.f32	s13, s16
 80233da:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80233de:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80233e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233e6:	ee16 8a90 	vmov	r8, s13
 80233ea:	eef0 6a68 	vmov.f32	s13, s17
 80233ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233f2:	ee16 ba90 	vmov	fp, s13
 80233f6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80233fa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80233fe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023402:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023406:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802340a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802340e:	ee18 2a10 	vmov	r2, s16
 8023412:	eeb0 8a47 	vmov.f32	s16, s14
 8023416:	fb92 f3f3 	sdiv	r3, r2, r3
 802341a:	ee18 2a90 	vmov	r2, s17
 802341e:	9335      	str	r3, [sp, #212]	; 0xd4
 8023420:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023422:	eef0 8a67 	vmov.f32	s17, s15
 8023426:	fb92 f3f3 	sdiv	r3, r2, r3
 802342a:	9336      	str	r3, [sp, #216]	; 0xd8
 802342c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802342e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023430:	3b01      	subs	r3, #1
 8023432:	930e      	str	r3, [sp, #56]	; 0x38
 8023434:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023436:	bf08      	it	eq
 8023438:	4613      	moveq	r3, r2
 802343a:	9307      	str	r3, [sp, #28]
 802343c:	e6c1      	b.n	80231c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802343e:	1c45      	adds	r5, r0, #1
 8023440:	d1a9      	bne.n	8023396 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8023442:	9c08      	ldr	r4, [sp, #32]
 8023444:	42a0      	cmp	r0, r4
 8023446:	daa6      	bge.n	8023396 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8023448:	1c4c      	adds	r4, r1, #1
 802344a:	dba4      	blt.n	8023396 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802344c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802344e:	428c      	cmp	r4, r1
 8023450:	dda1      	ble.n	8023396 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8023452:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023454:	9001      	str	r0, [sp, #4]
 8023456:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023458:	e9cd 1302 	strd	r1, r3, [sp, #8]
 802345c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802345e:	4631      	mov	r1, r6
 8023460:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8023464:	9300      	str	r3, [sp, #0]
 8023466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023468:	9b08      	ldr	r3, [sp, #32]
 802346a:	f7ff fd5b 	bl	8022f24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 802346e:	e792      	b.n	8023396 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8023470:	ea4f 4228 	mov.w	r2, r8, asr #16
 8023474:	9c08      	ldr	r4, [sp, #32]
 8023476:	ea4f 402b 	mov.w	r0, fp, asr #16
 802347a:	f3cb 3103 	ubfx	r1, fp, #12, #4
 802347e:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8023482:	fb04 2000 	mla	r0, r4, r0, r2
 8023486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023488:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802348a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802348e:	4402      	add	r2, r0
 8023490:	5c25      	ldrb	r5, [r4, r0]
 8023492:	7894      	ldrb	r4, [r2, #2]
 8023494:	7850      	ldrb	r0, [r2, #1]
 8023496:	9411      	str	r4, [sp, #68]	; 0x44
 8023498:	7954      	ldrb	r4, [r2, #5]
 802349a:	f892 a003 	ldrb.w	sl, [r2, #3]
 802349e:	f892 9004 	ldrb.w	r9, [r2, #4]
 80234a2:	9412      	str	r4, [sp, #72]	; 0x48
 80234a4:	b171      	cbz	r1, 80234c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80234a6:	3205      	adds	r2, #5
 80234a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80234aa:	1917      	adds	r7, r2, r4
 80234ac:	5d12      	ldrb	r2, [r2, r4]
 80234ae:	9219      	str	r2, [sp, #100]	; 0x64
 80234b0:	787a      	ldrb	r2, [r7, #1]
 80234b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80234b4:	78ba      	ldrb	r2, [r7, #2]
 80234b6:	921d      	str	r2, [sp, #116]	; 0x74
 80234b8:	78fa      	ldrb	r2, [r7, #3]
 80234ba:	921a      	str	r2, [sp, #104]	; 0x68
 80234bc:	793a      	ldrb	r2, [r7, #4]
 80234be:	921c      	str	r2, [sp, #112]	; 0x70
 80234c0:	797a      	ldrb	r2, [r7, #5]
 80234c2:	921e      	str	r2, [sp, #120]	; 0x78
 80234c4:	b29b      	uxth	r3, r3
 80234c6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80234c8:	b289      	uxth	r1, r1
 80234ca:	3603      	adds	r6, #3
 80234cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80234d0:	fb03 f201 	mul.w	r2, r3, r1
 80234d4:	011b      	lsls	r3, r3, #4
 80234d6:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 80234da:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80234de:	1a9b      	subs	r3, r3, r2
 80234e0:	b289      	uxth	r1, r1
 80234e2:	b29b      	uxth	r3, r3
 80234e4:	1a7f      	subs	r7, r7, r1
 80234e6:	fb03 fa0a 	mul.w	sl, r3, sl
 80234ea:	b2bf      	uxth	r7, r7
 80234ec:	fb03 f909 	mul.w	r9, r3, r9
 80234f0:	fb07 a505 	mla	r5, r7, r5, sl
 80234f4:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 80234f8:	fb07 9000 	mla	r0, r7, r0, r9
 80234fc:	fb01 5504 	mla	r5, r1, r4, r5
 8023500:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8023502:	fb02 5504 	mla	r5, r2, r4, r5
 8023506:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023508:	fb1a fa04 	smulbb	sl, sl, r4
 802350c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023510:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8023512:	fb05 a50e 	mla	r5, r5, lr, sl
 8023516:	fb01 0004 	mla	r0, r1, r4, r0
 802351a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802351c:	b2ad      	uxth	r5, r5
 802351e:	fb02 0004 	mla	r0, r2, r4, r0
 8023522:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023524:	f105 0a01 	add.w	sl, r5, #1
 8023528:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802352c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8023530:	122d      	asrs	r5, r5, #8
 8023532:	f806 5c06 	strb.w	r5, [r6, #-6]
 8023536:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 802353a:	fb15 f504 	smulbb	r5, r5, r4
 802353e:	fb00 500e 	mla	r0, r0, lr, r5
 8023542:	b280      	uxth	r0, r0
 8023544:	1c45      	adds	r5, r0, #1
 8023546:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802354a:	1200      	asrs	r0, r0, #8
 802354c:	f806 0c05 	strb.w	r0, [r6, #-5]
 8023550:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023552:	4343      	muls	r3, r0
 8023554:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023556:	fb07 3300 	mla	r3, r7, r0, r3
 802355a:	981d      	ldr	r0, [sp, #116]	; 0x74
 802355c:	fb01 3100 	mla	r1, r1, r0, r3
 8023560:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023562:	fb02 1203 	mla	r2, r2, r3, r1
 8023566:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 802356a:	fb11 f104 	smulbb	r1, r1, r4
 802356e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023572:	fb02 120e 	mla	r2, r2, lr, r1
 8023576:	b292      	uxth	r2, r2
 8023578:	1c53      	adds	r3, r2, #1
 802357a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802357e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8023580:	1212      	asrs	r2, r2, #8
 8023582:	4498      	add	r8, r3
 8023584:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023586:	f806 2c04 	strb.w	r2, [r6, #-4]
 802358a:	449b      	add	fp, r3
 802358c:	e64d      	b.n	802322a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802358e:	b021      	add	sp, #132	; 0x84
 8023590:	ecbd 8b08 	vpop	{d8-d11}
 8023594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023598 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8023598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802359c:	b085      	sub	sp, #20
 802359e:	784d      	ldrb	r5, [r1, #1]
 80235a0:	788e      	ldrb	r6, [r1, #2]
 80235a2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80235a6:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80235aa:	9403      	str	r4, [sp, #12]
 80235ac:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80235b0:	780c      	ldrb	r4, [r1, #0]
 80235b2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80235b6:	fb07 ce03 	mla	lr, r7, r3, ip
 80235ba:	2f00      	cmp	r7, #0
 80235bc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80235c0:	eb02 0b0e 	add.w	fp, r2, lr
 80235c4:	db56      	blt.n	8023674 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80235c6:	45b9      	cmp	r9, r7
 80235c8:	dd54      	ble.n	8023674 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80235ca:	f1bc 0f00 	cmp.w	ip, #0
 80235ce:	db4d      	blt.n	802366c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80235d0:	4563      	cmp	r3, ip
 80235d2:	dd4b      	ble.n	802366c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80235d4:	f812 200e 	ldrb.w	r2, [r2, lr]
 80235d8:	9200      	str	r2, [sp, #0]
 80235da:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80235de:	9201      	str	r2, [sp, #4]
 80235e0:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80235e4:	9202      	str	r2, [sp, #8]
 80235e6:	f11c 0201 	adds.w	r2, ip, #1
 80235ea:	d44a      	bmi.n	8023682 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80235ec:	4293      	cmp	r3, r2
 80235ee:	dd48      	ble.n	8023682 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80235f0:	2800      	cmp	r0, #0
 80235f2:	d046      	beq.n	8023682 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80235f4:	f89b e003 	ldrb.w	lr, [fp, #3]
 80235f8:	f89b 8004 	ldrb.w	r8, [fp, #4]
 80235fc:	f89b a005 	ldrb.w	sl, [fp, #5]
 8023600:	3701      	adds	r7, #1
 8023602:	d446      	bmi.n	8023692 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8023604:	45b9      	cmp	r9, r7
 8023606:	dd44      	ble.n	8023692 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8023608:	9a03      	ldr	r2, [sp, #12]
 802360a:	2a00      	cmp	r2, #0
 802360c:	d045      	beq.n	802369a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 802360e:	f1bc 0f00 	cmp.w	ip, #0
 8023612:	db3a      	blt.n	802368a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8023614:	4563      	cmp	r3, ip
 8023616:	dd38      	ble.n	802368a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8023618:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802361c:	f04f 0903 	mov.w	r9, #3
 8023620:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8023624:	fb03 b209 	mla	r2, r3, r9, fp
 8023628:	fb03 b909 	mla	r9, r3, r9, fp
 802362c:	7852      	ldrb	r2, [r2, #1]
 802362e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8023632:	f11c 0c01 	adds.w	ip, ip, #1
 8023636:	d40d      	bmi.n	8023654 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8023638:	4563      	cmp	r3, ip
 802363a:	dd0b      	ble.n	8023654 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802363c:	b160      	cbz	r0, 8023658 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 802363e:	2603      	movs	r6, #3
 8023640:	fb13 6406 	smlabb	r4, r3, r6, r6
 8023644:	fb03 b506 	mla	r5, r3, r6, fp
 8023648:	fb03 b306 	mla	r3, r3, r6, fp
 802364c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8023650:	792d      	ldrb	r5, [r5, #4]
 8023652:	795e      	ldrb	r6, [r3, #5]
 8023654:	280f      	cmp	r0, #15
 8023656:	d802      	bhi.n	802365e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8023658:	9b03      	ldr	r3, [sp, #12]
 802365a:	2b0f      	cmp	r3, #15
 802365c:	d922      	bls.n	80236a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 802365e:	4b2f      	ldr	r3, [pc, #188]	; (802371c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8023660:	f240 11a5 	movw	r1, #421	; 0x1a5
 8023664:	4a2e      	ldr	r2, [pc, #184]	; (8023720 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8023666:	482f      	ldr	r0, [pc, #188]	; (8023724 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8023668:	f003 ffa0 	bl	80275ac <__assert_func>
 802366c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8023670:	9400      	str	r4, [sp, #0]
 8023672:	e7b8      	b.n	80235e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8023674:	46b2      	mov	sl, r6
 8023676:	46a8      	mov	r8, r5
 8023678:	46a6      	mov	lr, r4
 802367a:	9400      	str	r4, [sp, #0]
 802367c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8023680:	e7be      	b.n	8023600 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8023682:	46b2      	mov	sl, r6
 8023684:	46a8      	mov	r8, r5
 8023686:	46a6      	mov	lr, r4
 8023688:	e7ba      	b.n	8023600 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 802368a:	46b1      	mov	r9, r6
 802368c:	462a      	mov	r2, r5
 802368e:	4627      	mov	r7, r4
 8023690:	e7cf      	b.n	8023632 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8023692:	46b1      	mov	r9, r6
 8023694:	462a      	mov	r2, r5
 8023696:	4627      	mov	r7, r4
 8023698:	e7dc      	b.n	8023654 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802369a:	280f      	cmp	r0, #15
 802369c:	d8df      	bhi.n	802365e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 802369e:	46b1      	mov	r9, r6
 80236a0:	462a      	mov	r2, r5
 80236a2:	4627      	mov	r7, r4
 80236a4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80236a8:	b280      	uxth	r0, r0
 80236aa:	fb00 f30b 	mul.w	r3, r0, fp
 80236ae:	0100      	lsls	r0, r0, #4
 80236b0:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80236b4:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80236b8:	1ac0      	subs	r0, r0, r3
 80236ba:	fa1f fb8b 	uxth.w	fp, fp
 80236be:	b280      	uxth	r0, r0
 80236c0:	ebac 0c0b 	sub.w	ip, ip, fp
 80236c4:	9003      	str	r0, [sp, #12]
 80236c6:	fa1f fc8c 	uxth.w	ip, ip
 80236ca:	fb00 fe0e 	mul.w	lr, r0, lr
 80236ce:	9800      	ldr	r0, [sp, #0]
 80236d0:	fb0c ee00 	mla	lr, ip, r0, lr
 80236d4:	9803      	ldr	r0, [sp, #12]
 80236d6:	fb00 f808 	mul.w	r8, r0, r8
 80236da:	9801      	ldr	r0, [sp, #4]
 80236dc:	fb0b ee07 	mla	lr, fp, r7, lr
 80236e0:	fb0c 8800 	mla	r8, ip, r0, r8
 80236e4:	fb03 ee04 	mla	lr, r3, r4, lr
 80236e8:	fb0b 8202 	mla	r2, fp, r2, r8
 80236ec:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80236f0:	fb03 2505 	mla	r5, r3, r5, r2
 80236f4:	9a03      	ldr	r2, [sp, #12]
 80236f6:	f881 e000 	strb.w	lr, [r1]
 80236fa:	fb02 f00a 	mul.w	r0, r2, sl
 80236fe:	9a02      	ldr	r2, [sp, #8]
 8023700:	122d      	asrs	r5, r5, #8
 8023702:	fb0c 0c02 	mla	ip, ip, r2, r0
 8023706:	704d      	strb	r5, [r1, #1]
 8023708:	fb0b c909 	mla	r9, fp, r9, ip
 802370c:	fb03 9606 	mla	r6, r3, r6, r9
 8023710:	1236      	asrs	r6, r6, #8
 8023712:	708e      	strb	r6, [r1, #2]
 8023714:	b005      	add	sp, #20
 8023716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802371a:	bf00      	nop
 802371c:	0802c715 	.word	0x0802c715
 8023720:	0802cc0a 	.word	0x0802cc0a
 8023724:	0802c7de 	.word	0x0802c7de

08023728 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802372c:	ed2d 8b0a 	vpush	{d8-d12}
 8023730:	b09d      	sub	sp, #116	; 0x74
 8023732:	eeb0 aa40 	vmov.f32	s20, s0
 8023736:	eef0 9a60 	vmov.f32	s19, s1
 802373a:	9306      	str	r3, [sp, #24]
 802373c:	eeb0 9a41 	vmov.f32	s18, s2
 8023740:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8023744:	eeb0 8a62 	vmov.f32	s16, s5
 8023748:	901b      	str	r0, [sp, #108]	; 0x6c
 802374a:	eef0 8a43 	vmov.f32	s17, s6
 802374e:	9307      	str	r3, [sp, #28]
 8023750:	eeb0 ca44 	vmov.f32	s24, s8
 8023754:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8023758:	eef0 ba64 	vmov.f32	s23, s9
 802375c:	eeb0 ba45 	vmov.f32	s22, s10
 8023760:	9309      	str	r3, [sp, #36]	; 0x24
 8023762:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8023766:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 802376a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802376c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8023770:	6850      	ldr	r0, [r2, #4]
 8023772:	6812      	ldr	r2, [r2, #0]
 8023774:	fb00 1303 	mla	r3, r0, r3, r1
 8023778:	9907      	ldr	r1, [sp, #28]
 802377a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802377e:	18d3      	adds	r3, r2, r3
 8023780:	2203      	movs	r2, #3
 8023782:	9308      	str	r3, [sp, #32]
 8023784:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8023786:	681b      	ldr	r3, [r3, #0]
 8023788:	930a      	str	r3, [sp, #40]	; 0x28
 802378a:	f06f 0304 	mvn.w	r3, #4
 802378e:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8023792:	fb11 3302 	smlabb	r3, r1, r2, r3
 8023796:	930b      	str	r3, [sp, #44]	; 0x2c
 8023798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802379a:	2b00      	cmp	r3, #0
 802379c:	dc03      	bgt.n	80237a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802379e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	f340 8193 	ble.w	8023acc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80237a6:	9b06      	ldr	r3, [sp, #24]
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	f340 80d0 	ble.w	802394e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 80237ae:	1432      	asrs	r2, r6, #16
 80237b0:	ea4f 4325 	mov.w	r3, r5, asr #16
 80237b4:	d42f      	bmi.n	8023816 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80237b6:	1c51      	adds	r1, r2, #1
 80237b8:	9807      	ldr	r0, [sp, #28]
 80237ba:	4281      	cmp	r1, r0
 80237bc:	da2e      	bge.n	802381c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80237be:	2b00      	cmp	r3, #0
 80237c0:	db2c      	blt.n	802381c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80237c2:	1c59      	adds	r1, r3, #1
 80237c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80237c6:	4288      	cmp	r0, r1
 80237c8:	dd28      	ble.n	802381c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80237ca:	9b06      	ldr	r3, [sp, #24]
 80237cc:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80237ce:	3b01      	subs	r3, #1
 80237d0:	fb02 6203 	mla	r2, r2, r3, r6
 80237d4:	1412      	asrs	r2, r2, #16
 80237d6:	d42c      	bmi.n	8023832 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80237d8:	3201      	adds	r2, #1
 80237da:	9907      	ldr	r1, [sp, #28]
 80237dc:	4291      	cmp	r1, r2
 80237de:	dd28      	ble.n	8023832 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80237e0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80237e2:	fb02 5303 	mla	r3, r2, r3, r5
 80237e6:	141b      	asrs	r3, r3, #16
 80237e8:	d423      	bmi.n	8023832 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80237ea:	3301      	adds	r3, #1
 80237ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80237ee:	429a      	cmp	r2, r3
 80237f0:	dd1f      	ble.n	8023832 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80237f2:	9b08      	ldr	r3, [sp, #32]
 80237f4:	f8dd e018 	ldr.w	lr, [sp, #24]
 80237f8:	f103 0c03 	add.w	ip, r3, #3
 80237fc:	f1be 0f00 	cmp.w	lr, #0
 8023800:	f300 80fa 	bgt.w	80239f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8023804:	9b06      	ldr	r3, [sp, #24]
 8023806:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802380a:	9b08      	ldr	r3, [sp, #32]
 802380c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023810:	4423      	add	r3, r4
 8023812:	9308      	str	r3, [sp, #32]
 8023814:	e09d      	b.n	8023952 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8023816:	1c51      	adds	r1, r2, #1
 8023818:	f040 808e 	bne.w	8023938 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802381c:	9907      	ldr	r1, [sp, #28]
 802381e:	428a      	cmp	r2, r1
 8023820:	f280 808a 	bge.w	8023938 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8023824:	1c5f      	adds	r7, r3, #1
 8023826:	f2c0 8087 	blt.w	8023938 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802382a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802382c:	4293      	cmp	r3, r2
 802382e:	f280 8083 	bge.w	8023938 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8023832:	9f06      	ldr	r7, [sp, #24]
 8023834:	f8dd a020 	ldr.w	sl, [sp, #32]
 8023838:	2f00      	cmp	r7, #0
 802383a:	dde3      	ble.n	8023804 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 802383c:	1432      	asrs	r2, r6, #16
 802383e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023842:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023846:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 802384a:	f100 80bf 	bmi.w	80239cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 802384e:	1c50      	adds	r0, r2, #1
 8023850:	9c07      	ldr	r4, [sp, #28]
 8023852:	4284      	cmp	r4, r0
 8023854:	f340 80bc 	ble.w	80239d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8023858:	2b00      	cmp	r3, #0
 802385a:	f2c0 80b9 	blt.w	80239d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802385e:	1c58      	adds	r0, r3, #1
 8023860:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023862:	4284      	cmp	r4, r0
 8023864:	f340 80b4 	ble.w	80239d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8023868:	9807      	ldr	r0, [sp, #28]
 802386a:	fb00 2303 	mla	r3, r0, r3, r2
 802386e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023870:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023872:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023876:	441a      	add	r2, r3
 8023878:	f810 c003 	ldrb.w	ip, [r0, r3]
 802387c:	7953      	ldrb	r3, [r2, #5]
 802387e:	7850      	ldrb	r0, [r2, #1]
 8023880:	f892 e002 	ldrb.w	lr, [r2, #2]
 8023884:	f892 9003 	ldrb.w	r9, [r2, #3]
 8023888:	f892 8004 	ldrb.w	r8, [r2, #4]
 802388c:	930e      	str	r3, [sp, #56]	; 0x38
 802388e:	f1bb 0f00 	cmp.w	fp, #0
 8023892:	d00f      	beq.n	80238b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8023894:	3205      	adds	r2, #5
 8023896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023898:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802389a:	18d3      	adds	r3, r2, r3
 802389c:	5d12      	ldrb	r2, [r2, r4]
 802389e:	920f      	str	r2, [sp, #60]	; 0x3c
 80238a0:	785a      	ldrb	r2, [r3, #1]
 80238a2:	9211      	str	r2, [sp, #68]	; 0x44
 80238a4:	789a      	ldrb	r2, [r3, #2]
 80238a6:	9213      	str	r2, [sp, #76]	; 0x4c
 80238a8:	78da      	ldrb	r2, [r3, #3]
 80238aa:	9210      	str	r2, [sp, #64]	; 0x40
 80238ac:	791a      	ldrb	r2, [r3, #4]
 80238ae:	795b      	ldrb	r3, [r3, #5]
 80238b0:	9212      	str	r2, [sp, #72]	; 0x48
 80238b2:	9314      	str	r3, [sp, #80]	; 0x50
 80238b4:	b28b      	uxth	r3, r1
 80238b6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80238b8:	fa1f f28b 	uxth.w	r2, fp
 80238bc:	fb03 fb02 	mul.w	fp, r3, r2
 80238c0:	011b      	lsls	r3, r3, #4
 80238c2:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80238c6:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80238ca:	eba3 030b 	sub.w	r3, r3, fp
 80238ce:	b292      	uxth	r2, r2
 80238d0:	b29b      	uxth	r3, r3
 80238d2:	1a89      	subs	r1, r1, r2
 80238d4:	fb03 f808 	mul.w	r8, r3, r8
 80238d8:	b289      	uxth	r1, r1
 80238da:	fb03 f909 	mul.w	r9, r3, r9
 80238de:	fb01 8800 	mla	r8, r1, r0, r8
 80238e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80238e4:	fb01 990c 	mla	r9, r1, ip, r9
 80238e8:	fb02 8800 	mla	r8, r2, r0, r8
 80238ec:	9812      	ldr	r0, [sp, #72]	; 0x48
 80238ee:	fb02 9904 	mla	r9, r2, r4, r9
 80238f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80238f4:	fb0b 8800 	mla	r8, fp, r0, r8
 80238f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80238fa:	fb0b 9904 	mla	r9, fp, r4, r9
 80238fe:	4343      	muls	r3, r0
 8023900:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023904:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023908:	fb01 330e 	mla	r3, r1, lr, r3
 802390c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802390e:	f88a 9000 	strb.w	r9, [sl]
 8023912:	fb02 3201 	mla	r2, r2, r1, r3
 8023916:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023918:	f88a 8001 	strb.w	r8, [sl, #1]
 802391c:	fb0b 2b03 	mla	fp, fp, r3, r2
 8023920:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8023924:	f88a b002 	strb.w	fp, [sl, #2]
 8023928:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802392a:	f10a 0a03 	add.w	sl, sl, #3
 802392e:	3f01      	subs	r7, #1
 8023930:	441e      	add	r6, r3
 8023932:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023934:	441d      	add	r5, r3
 8023936:	e77f      	b.n	8023838 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8023938:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802393a:	441e      	add	r6, r3
 802393c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802393e:	441d      	add	r5, r3
 8023940:	9b06      	ldr	r3, [sp, #24]
 8023942:	3b01      	subs	r3, #1
 8023944:	9306      	str	r3, [sp, #24]
 8023946:	9b08      	ldr	r3, [sp, #32]
 8023948:	3303      	adds	r3, #3
 802394a:	9308      	str	r3, [sp, #32]
 802394c:	e72b      	b.n	80237a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802394e:	f47f af3c 	bne.w	80237ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8023952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023954:	2b00      	cmp	r3, #0
 8023956:	f340 80b9 	ble.w	8023acc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802395a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802395e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023960:	ee79 9aab 	vadd.f32	s19, s19, s23
 8023964:	eef0 6a48 	vmov.f32	s13, s16
 8023968:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802396c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8023970:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023974:	ee16 6a90 	vmov	r6, s13
 8023978:	eef0 6a68 	vmov.f32	s13, s17
 802397c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023980:	ee16 5a90 	vmov	r5, s13
 8023984:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023988:	ee69 7a27 	vmul.f32	s15, s18, s15
 802398c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023990:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023994:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023998:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802399c:	ee18 2a10 	vmov	r2, s16
 80239a0:	eeb0 8a47 	vmov.f32	s16, s14
 80239a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80239a8:	ee18 2a90 	vmov	r2, s17
 80239ac:	9333      	str	r3, [sp, #204]	; 0xcc
 80239ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80239b0:	eef0 8a67 	vmov.f32	s17, s15
 80239b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80239b8:	9334      	str	r3, [sp, #208]	; 0xd0
 80239ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80239bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80239be:	3b01      	subs	r3, #1
 80239c0:	930c      	str	r3, [sp, #48]	; 0x30
 80239c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80239c4:	bf08      	it	eq
 80239c6:	4613      	moveq	r3, r2
 80239c8:	9306      	str	r3, [sp, #24]
 80239ca:	e6e5      	b.n	8023798 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80239cc:	1c54      	adds	r4, r2, #1
 80239ce:	d1ab      	bne.n	8023928 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80239d0:	9807      	ldr	r0, [sp, #28]
 80239d2:	4282      	cmp	r2, r0
 80239d4:	daa8      	bge.n	8023928 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80239d6:	1c58      	adds	r0, r3, #1
 80239d8:	dba6      	blt.n	8023928 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80239da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80239dc:	4298      	cmp	r0, r3
 80239de:	dda3      	ble.n	8023928 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80239e0:	9000      	str	r0, [sp, #0]
 80239e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80239e4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80239e8:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 80239ec:	9b07      	ldr	r3, [sp, #28]
 80239ee:	4651      	mov	r1, sl
 80239f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80239f2:	f7ff fdd1 	bl	8023598 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80239f6:	e797      	b.n	8023928 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80239f8:	1431      	asrs	r1, r6, #16
 80239fa:	9c07      	ldr	r4, [sp, #28]
 80239fc:	1428      	asrs	r0, r5, #16
 80239fe:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023a02:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8023a06:	fb04 1000 	mla	r0, r4, r0, r1
 8023a0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023a0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023a0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023a12:	4401      	add	r1, r0
 8023a14:	5c20      	ldrb	r0, [r4, r0]
 8023a16:	f891 8002 	ldrb.w	r8, [r1, #2]
 8023a1a:	900e      	str	r0, [sp, #56]	; 0x38
 8023a1c:	f891 a003 	ldrb.w	sl, [r1, #3]
 8023a20:	7848      	ldrb	r0, [r1, #1]
 8023a22:	f891 9004 	ldrb.w	r9, [r1, #4]
 8023a26:	f891 b005 	ldrb.w	fp, [r1, #5]
 8023a2a:	b172      	cbz	r2, 8023a4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8023a2c:	3105      	adds	r1, #5
 8023a2e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023a30:	190f      	adds	r7, r1, r4
 8023a32:	5d09      	ldrb	r1, [r1, r4]
 8023a34:	9115      	str	r1, [sp, #84]	; 0x54
 8023a36:	7879      	ldrb	r1, [r7, #1]
 8023a38:	9117      	str	r1, [sp, #92]	; 0x5c
 8023a3a:	78b9      	ldrb	r1, [r7, #2]
 8023a3c:	9119      	str	r1, [sp, #100]	; 0x64
 8023a3e:	78f9      	ldrb	r1, [r7, #3]
 8023a40:	9116      	str	r1, [sp, #88]	; 0x58
 8023a42:	7939      	ldrb	r1, [r7, #4]
 8023a44:	9118      	str	r1, [sp, #96]	; 0x60
 8023a46:	7979      	ldrb	r1, [r7, #5]
 8023a48:	911a      	str	r1, [sp, #104]	; 0x68
 8023a4a:	b29b      	uxth	r3, r3
 8023a4c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023a4e:	b292      	uxth	r2, r2
 8023a50:	f10c 0c03 	add.w	ip, ip, #3
 8023a54:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023a58:	fb03 f102 	mul.w	r1, r3, r2
 8023a5c:	011b      	lsls	r3, r3, #4
 8023a5e:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8023a62:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8023a66:	1a5b      	subs	r3, r3, r1
 8023a68:	b292      	uxth	r2, r2
 8023a6a:	b29b      	uxth	r3, r3
 8023a6c:	1abf      	subs	r7, r7, r2
 8023a6e:	fb03 f909 	mul.w	r9, r3, r9
 8023a72:	b2bf      	uxth	r7, r7
 8023a74:	fb03 fa0a 	mul.w	sl, r3, sl
 8023a78:	fb03 f30b 	mul.w	r3, r3, fp
 8023a7c:	fb07 9900 	mla	r9, r7, r0, r9
 8023a80:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023a82:	fb07 aa04 	mla	sl, r7, r4, sl
 8023a86:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023a88:	fb02 9900 	mla	r9, r2, r0, r9
 8023a8c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8023a8e:	fb07 3308 	mla	r3, r7, r8, r3
 8023a92:	fb01 9900 	mla	r9, r1, r0, r9
 8023a96:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023a98:	fb02 aa04 	mla	sl, r2, r4, sl
 8023a9c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023a9e:	fb02 3200 	mla	r2, r2, r0, r3
 8023aa2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023aa4:	fb01 aa04 	mla	sl, r1, r4, sl
 8023aa8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023aac:	fb01 2103 	mla	r1, r1, r3, r2
 8023ab0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023ab2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023ab6:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8023aba:	1209      	asrs	r1, r1, #8
 8023abc:	441e      	add	r6, r3
 8023abe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023ac0:	f80c ac06 	strb.w	sl, [ip, #-6]
 8023ac4:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8023ac8:	441d      	add	r5, r3
 8023aca:	e697      	b.n	80237fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8023acc:	b01d      	add	sp, #116	; 0x74
 8023ace:	ecbd 8b0a 	vpop	{d8-d12}
 8023ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023ad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8023ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023adc:	b085      	sub	sp, #20
 8023ade:	7888      	ldrb	r0, [r1, #2]
 8023ae0:	4691      	mov	r9, r2
 8023ae2:	9000      	str	r0, [sp, #0]
 8023ae4:	7848      	ldrb	r0, [r1, #1]
 8023ae6:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8023aea:	9001      	str	r0, [sp, #4]
 8023aec:	7808      	ldrb	r0, [r1, #0]
 8023aee:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8023af2:	9002      	str	r0, [sp, #8]
 8023af4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8023af8:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8023afc:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8023b00:	fb04 c603 	mla	r6, r4, r3, ip
 8023b04:	2c00      	cmp	r4, #0
 8023b06:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8023b0a:	9a00      	ldr	r2, [sp, #0]
 8023b0c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8023b10:	9a01      	ldr	r2, [sp, #4]
 8023b12:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023b16:	db3a      	blt.n	8023b8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8023b18:	45a0      	cmp	r8, r4
 8023b1a:	dd38      	ble.n	8023b8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8023b1c:	f1bc 0f00 	cmp.w	ip, #0
 8023b20:	db33      	blt.n	8023b8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8023b22:	4563      	cmp	r3, ip
 8023b24:	dd31      	ble.n	8023b8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8023b26:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8023b2a:	f11c 0601 	adds.w	r6, ip, #1
 8023b2e:	d431      	bmi.n	8023b94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8023b30:	42b3      	cmp	r3, r6
 8023b32:	dd2f      	ble.n	8023b94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8023b34:	b375      	cbz	r5, 8023b94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8023b36:	f8de 6004 	ldr.w	r6, [lr, #4]
 8023b3a:	3401      	adds	r4, #1
 8023b3c:	d42e      	bmi.n	8023b9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8023b3e:	45a0      	cmp	r8, r4
 8023b40:	dd2c      	ble.n	8023b9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8023b42:	b35f      	cbz	r7, 8023b9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8023b44:	f1bc 0f00 	cmp.w	ip, #0
 8023b48:	db26      	blt.n	8023b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8023b4a:	4563      	cmp	r3, ip
 8023b4c:	dd24      	ble.n	8023b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8023b4e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8023b52:	f11c 0c01 	adds.w	ip, ip, #1
 8023b56:	d405      	bmi.n	8023b64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8023b58:	4563      	cmp	r3, ip
 8023b5a:	dd03      	ble.n	8023b64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8023b5c:	b115      	cbz	r5, 8023b64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8023b5e:	3301      	adds	r3, #1
 8023b60:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8023b64:	2d0f      	cmp	r5, #15
 8023b66:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8023b6a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023b6e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023b72:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8023b76:	d801      	bhi.n	8023b7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8023b78:	2f0f      	cmp	r7, #15
 8023b7a:	d911      	bls.n	8023ba0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8023b7c:	4b80      	ldr	r3, [pc, #512]	; (8023d80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8023b7e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8023b82:	4a80      	ldr	r2, [pc, #512]	; (8023d84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8023b84:	4880      	ldr	r0, [pc, #512]	; (8023d88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8023b86:	f003 fd11 	bl	80275ac <__assert_func>
 8023b8a:	4602      	mov	r2, r0
 8023b8c:	e7cd      	b.n	8023b2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8023b8e:	4606      	mov	r6, r0
 8023b90:	4602      	mov	r2, r0
 8023b92:	e7d2      	b.n	8023b3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8023b94:	4606      	mov	r6, r0
 8023b96:	e7d0      	b.n	8023b3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8023b98:	4604      	mov	r4, r0
 8023b9a:	e7da      	b.n	8023b52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8023b9c:	4604      	mov	r4, r0
 8023b9e:	e7e1      	b.n	8023b64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8023ba0:	b2ab      	uxth	r3, r5
 8023ba2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023ba6:	b2bf      	uxth	r7, r7
 8023ba8:	fb03 fe07 	mul.w	lr, r3, r7
 8023bac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8023bb0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023bb4:	eba3 0c0e 	sub.w	ip, r3, lr
 8023bb8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8023bbc:	b2bf      	uxth	r7, r7
 8023bbe:	fa1f fc8c 	uxth.w	ip, ip
 8023bc2:	eba5 0507 	sub.w	r5, r5, r7
 8023bc6:	fb0c f30a 	mul.w	r3, ip, sl
 8023bca:	b2ad      	uxth	r5, r5
 8023bcc:	fb05 330b 	mla	r3, r5, fp, r3
 8023bd0:	fb07 3309 	mla	r3, r7, r9, r3
 8023bd4:	fb0e 3308 	mla	r3, lr, r8, r3
 8023bd8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023bdc:	9303      	str	r3, [sp, #12]
 8023bde:	d018      	beq.n	8023c12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8023be0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023be4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023be8:	fb0b f303 	mul.w	r3, fp, r3
 8023bec:	fb0b fb02 	mul.w	fp, fp, r2
 8023bf0:	0a1a      	lsrs	r2, r3, #8
 8023bf2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8023bf6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023bfa:	441a      	add	r2, r3
 8023bfc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8023c00:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8023c04:	0a12      	lsrs	r2, r2, #8
 8023c06:	0a1b      	lsrs	r3, r3, #8
 8023c08:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023c0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c10:	431a      	orrs	r2, r3
 8023c12:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023c16:	d019      	beq.n	8023c4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8023c18:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8023c1c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023c20:	fb0a fb0b 	mul.w	fp, sl, fp
 8023c24:	fb0a fa06 	mul.w	sl, sl, r6
 8023c28:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8023c2c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c30:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8023c34:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023c38:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023c3c:	445e      	add	r6, fp
 8023c3e:	0a1b      	lsrs	r3, r3, #8
 8023c40:	0a36      	lsrs	r6, r6, #8
 8023c42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c46:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023c4a:	431e      	orrs	r6, r3
 8023c4c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023c50:	d019      	beq.n	8023c86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8023c52:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8023c56:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023c5a:	fb09 fa0a 	mul.w	sl, r9, sl
 8023c5e:	fb09 f904 	mul.w	r9, r9, r4
 8023c62:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8023c66:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023c6a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8023c6e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023c72:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8023c76:	4454      	add	r4, sl
 8023c78:	0a1b      	lsrs	r3, r3, #8
 8023c7a:	0a24      	lsrs	r4, r4, #8
 8023c7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c80:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023c84:	431c      	orrs	r4, r3
 8023c86:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023c8a:	d019      	beq.n	8023cc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8023c8c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8023c90:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023c94:	fb08 f909 	mul.w	r9, r8, r9
 8023c98:	fb08 f800 	mul.w	r8, r8, r0
 8023c9c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8023ca0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023ca4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8023ca8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023cac:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8023cb0:	4448      	add	r0, r9
 8023cb2:	0a1b      	lsrs	r3, r3, #8
 8023cb4:	0a00      	lsrs	r0, r0, #8
 8023cb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023cba:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023cbe:	4318      	orrs	r0, r3
 8023cc0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023cc4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023cc8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023ccc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023cd0:	fb0c f808 	mul.w	r8, ip, r8
 8023cd4:	fb0c f606 	mul.w	r6, ip, r6
 8023cd8:	fb05 8803 	mla	r8, r5, r3, r8
 8023cdc:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8023ce0:	fb05 6202 	mla	r2, r5, r2, r6
 8023ce4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023ce8:	fb07 8803 	mla	r8, r7, r3, r8
 8023cec:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023cf0:	fb07 2704 	mla	r7, r7, r4, r2
 8023cf4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023cf8:	fb0e 8303 	mla	r3, lr, r3, r8
 8023cfc:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8023d00:	fb0e 7e00 	mla	lr, lr, r0, r7
 8023d04:	9803      	ldr	r0, [sp, #12]
 8023d06:	b292      	uxth	r2, r2
 8023d08:	9c02      	ldr	r4, [sp, #8]
 8023d0a:	0a1b      	lsrs	r3, r3, #8
 8023d0c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d10:	4350      	muls	r0, r2
 8023d12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023d16:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023d1a:	ea43 0e0e 	orr.w	lr, r3, lr
 8023d1e:	1c43      	adds	r3, r0, #1
 8023d20:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023d24:	fa5f f08e 	uxtb.w	r0, lr
 8023d28:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8023d2c:	b2db      	uxtb	r3, r3
 8023d2e:	fb14 f403 	smulbb	r4, r4, r3
 8023d32:	fb00 4002 	mla	r0, r0, r2, r4
 8023d36:	b280      	uxth	r0, r0
 8023d38:	1c44      	adds	r4, r0, #1
 8023d3a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8023d3e:	9c01      	ldr	r4, [sp, #4]
 8023d40:	fb14 f403 	smulbb	r4, r4, r3
 8023d44:	1200      	asrs	r0, r0, #8
 8023d46:	7008      	strb	r0, [r1, #0]
 8023d48:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8023d4c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8023d50:	fb00 4002 	mla	r0, r0, r2, r4
 8023d54:	b280      	uxth	r0, r0
 8023d56:	1c44      	adds	r4, r0, #1
 8023d58:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8023d5c:	1200      	asrs	r0, r0, #8
 8023d5e:	7048      	strb	r0, [r1, #1]
 8023d60:	9800      	ldr	r0, [sp, #0]
 8023d62:	fb10 f303 	smulbb	r3, r0, r3
 8023d66:	fb0e 3202 	mla	r2, lr, r2, r3
 8023d6a:	b292      	uxth	r2, r2
 8023d6c:	f102 0e01 	add.w	lr, r2, #1
 8023d70:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8023d74:	1212      	asrs	r2, r2, #8
 8023d76:	708a      	strb	r2, [r1, #2]
 8023d78:	b005      	add	sp, #20
 8023d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d7e:	bf00      	nop
 8023d80:	0802c715 	.word	0x0802c715
 8023d84:	0802cc0a 	.word	0x0802cc0a
 8023d88:	0802c7de 	.word	0x0802c7de

08023d8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d90:	ed2d 8b08 	vpush	{d8-d11}
 8023d94:	b099      	sub	sp, #100	; 0x64
 8023d96:	eeb0 aa40 	vmov.f32	s20, s0
 8023d9a:	eef0 9a60 	vmov.f32	s19, s1
 8023d9e:	9306      	str	r3, [sp, #24]
 8023da0:	eeb0 9a41 	vmov.f32	s18, s2
 8023da4:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8023da8:	eeb0 8a62 	vmov.f32	s16, s5
 8023dac:	9216      	str	r2, [sp, #88]	; 0x58
 8023dae:	eef0 8a43 	vmov.f32	s17, s6
 8023db2:	9307      	str	r3, [sp, #28]
 8023db4:	eef0 ba44 	vmov.f32	s23, s8
 8023db8:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8023dbc:	eeb0 ba64 	vmov.f32	s22, s9
 8023dc0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023dc2:	eef0 aa45 	vmov.f32	s21, s10
 8023dc6:	9310      	str	r3, [sp, #64]	; 0x40
 8023dc8:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8023dcc:	9017      	str	r0, [sp, #92]	; 0x5c
 8023dce:	9112      	str	r1, [sp, #72]	; 0x48
 8023dd0:	6850      	ldr	r0, [r2, #4]
 8023dd2:	9315      	str	r3, [sp, #84]	; 0x54
 8023dd4:	6812      	ldr	r2, [r2, #0]
 8023dd6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8023dd8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8023ddc:	fb00 1303 	mla	r3, r0, r3, r1
 8023de0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023de4:	18d3      	adds	r3, r2, r3
 8023de6:	930a      	str	r3, [sp, #40]	; 0x28
 8023de8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023dea:	681b      	ldr	r3, [r3, #0]
 8023dec:	9311      	str	r3, [sp, #68]	; 0x44
 8023dee:	9b07      	ldr	r3, [sp, #28]
 8023df0:	009b      	lsls	r3, r3, #2
 8023df2:	930e      	str	r3, [sp, #56]	; 0x38
 8023df4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023df6:	2b00      	cmp	r3, #0
 8023df8:	dc03      	bgt.n	8023e02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8023dfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023dfc:	2b00      	cmp	r3, #0
 8023dfe:	f340 833b 	ble.w	8024478 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8023e02:	9b06      	ldr	r3, [sp, #24]
 8023e04:	2b00      	cmp	r3, #0
 8023e06:	f340 8197 	ble.w	8024138 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8023e0a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023e0c:	1423      	asrs	r3, r4, #16
 8023e0e:	1412      	asrs	r2, r2, #16
 8023e10:	d432      	bmi.n	8023e78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8023e12:	1c51      	adds	r1, r2, #1
 8023e14:	9807      	ldr	r0, [sp, #28]
 8023e16:	4288      	cmp	r0, r1
 8023e18:	dd31      	ble.n	8023e7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8023e1a:	2b00      	cmp	r3, #0
 8023e1c:	db2f      	blt.n	8023e7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8023e1e:	1c59      	adds	r1, r3, #1
 8023e20:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023e22:	4288      	cmp	r0, r1
 8023e24:	dd2b      	ble.n	8023e7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8023e26:	9b06      	ldr	r3, [sp, #24]
 8023e28:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023e2a:	3b01      	subs	r3, #1
 8023e2c:	992b      	ldr	r1, [sp, #172]	; 0xac
 8023e2e:	fb02 1203 	mla	r2, r2, r3, r1
 8023e32:	1412      	asrs	r2, r2, #16
 8023e34:	d42e      	bmi.n	8023e94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8023e36:	3201      	adds	r2, #1
 8023e38:	9907      	ldr	r1, [sp, #28]
 8023e3a:	4291      	cmp	r1, r2
 8023e3c:	dd2a      	ble.n	8023e94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8023e3e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023e40:	fb02 4303 	mla	r3, r2, r3, r4
 8023e44:	141b      	asrs	r3, r3, #16
 8023e46:	d425      	bmi.n	8023e94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8023e48:	3301      	adds	r3, #1
 8023e4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023e4c:	429a      	cmp	r2, r3
 8023e4e:	dd21      	ble.n	8023e94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8023e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e52:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8023e56:	f103 0e03 	add.w	lr, r3, #3
 8023e5a:	9b06      	ldr	r3, [sp, #24]
 8023e5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8023e5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	f300 81d2 	bgt.w	802420a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8023e66:	9b06      	ldr	r3, [sp, #24]
 8023e68:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023e72:	4423      	add	r3, r4
 8023e74:	930a      	str	r3, [sp, #40]	; 0x28
 8023e76:	e161      	b.n	802413c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8023e78:	1c51      	adds	r1, r2, #1
 8023e7a:	f040 8150 	bne.w	802411e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023e7e:	9907      	ldr	r1, [sp, #28]
 8023e80:	428a      	cmp	r2, r1
 8023e82:	f280 814c 	bge.w	802411e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023e86:	1c5a      	adds	r2, r3, #1
 8023e88:	f2c0 8149 	blt.w	802411e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023e8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023e8e:	4293      	cmp	r3, r2
 8023e90:	f280 8145 	bge.w	802411e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023e94:	9b06      	ldr	r3, [sp, #24]
 8023e96:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8023e98:	9314      	str	r3, [sp, #80]	; 0x50
 8023e9a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8023e9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8023ea0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023ea2:	2b00      	cmp	r3, #0
 8023ea4:	dddf      	ble.n	8023e66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8023ea6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023ea8:	1423      	asrs	r3, r4, #16
 8023eaa:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023eae:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8023eb2:	1412      	asrs	r2, r2, #16
 8023eb4:	f100 8190 	bmi.w	80241d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8023eb8:	1c55      	adds	r5, r2, #1
 8023eba:	9f07      	ldr	r7, [sp, #28]
 8023ebc:	42af      	cmp	r7, r5
 8023ebe:	f340 818d 	ble.w	80241dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8023ec2:	2b00      	cmp	r3, #0
 8023ec4:	f2c0 818a 	blt.w	80241dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8023ec8:	1c5d      	adds	r5, r3, #1
 8023eca:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023ecc:	42af      	cmp	r7, r5
 8023ece:	f340 8185 	ble.w	80241dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8023ed2:	9d07      	ldr	r5, [sp, #28]
 8023ed4:	fb03 2305 	mla	r3, r3, r5, r2
 8023ed8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023eda:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8023ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023ee2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023ee6:	2800      	cmp	r0, #0
 8023ee8:	f000 8167 	beq.w	80241ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023eec:	686a      	ldr	r2, [r5, #4]
 8023eee:	920b      	str	r2, [sp, #44]	; 0x2c
 8023ef0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023ef4:	2900      	cmp	r1, #0
 8023ef6:	f000 8169 	beq.w	80241cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8023efa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023efc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8023efe:	18aa      	adds	r2, r5, r2
 8023f00:	59ed      	ldr	r5, [r5, r7]
 8023f02:	6852      	ldr	r2, [r2, #4]
 8023f04:	9508      	str	r5, [sp, #32]
 8023f06:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8023f0a:	0e15      	lsrs	r5, r2, #24
 8023f0c:	920c      	str	r2, [sp, #48]	; 0x30
 8023f0e:	b280      	uxth	r0, r0
 8023f10:	b289      	uxth	r1, r1
 8023f12:	fb00 fb01 	mul.w	fp, r0, r1
 8023f16:	0100      	lsls	r0, r0, #4
 8023f18:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8023f1c:	eba0 090b 	sub.w	r9, r0, fp
 8023f20:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8023f24:	b289      	uxth	r1, r1
 8023f26:	fa1f f989 	uxth.w	r9, r9
 8023f2a:	1a52      	subs	r2, r2, r1
 8023f2c:	fb09 f008 	mul.w	r0, r9, r8
 8023f30:	b292      	uxth	r2, r2
 8023f32:	fb02 000c 	mla	r0, r2, ip, r0
 8023f36:	fb01 000a 	mla	r0, r1, sl, r0
 8023f3a:	fb0b 0005 	mla	r0, fp, r5, r0
 8023f3e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023f42:	2800      	cmp	r0, #0
 8023f44:	f000 80e0 	beq.w	8024108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023f48:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023f4c:	d01b      	beq.n	8023f86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8023f4e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023f52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023f56:	fb0c fe0e 	mul.w	lr, ip, lr
 8023f5a:	fb0c fc03 	mul.w	ip, ip, r3
 8023f5e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8023f62:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023f66:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023f6a:	4473      	add	r3, lr
 8023f6c:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8023f70:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8023f74:	0a1b      	lsrs	r3, r3, #8
 8023f76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f7a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023f7e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023f82:	ea43 030e 	orr.w	r3, r3, lr
 8023f86:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023f8a:	d01e      	beq.n	8023fca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8023f8c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023f8e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023f92:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8023f96:	fb08 fc0c 	mul.w	ip, r8, ip
 8023f9a:	fb08 f80e 	mul.w	r8, r8, lr
 8023f9e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023fa2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023fa6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023faa:	44e6      	add	lr, ip
 8023fac:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8023fb0:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8023fb4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023fb8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023fbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023fc0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023fc4:	ea4e 0708 	orr.w	r7, lr, r8
 8023fc8:	970b      	str	r7, [sp, #44]	; 0x2c
 8023fca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023fce:	d01e      	beq.n	802400e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023fd0:	9f08      	ldr	r7, [sp, #32]
 8023fd2:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8023fd6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023fda:	fb0a f808 	mul.w	r8, sl, r8
 8023fde:	fb0a fa0c 	mul.w	sl, sl, ip
 8023fe2:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8023fe6:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8023fea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023fee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ff2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023ff6:	44c6      	add	lr, r8
 8023ff8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ffc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024000:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024004:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024008:	ea4e 070a 	orr.w	r7, lr, sl
 802400c:	9708      	str	r7, [sp, #32]
 802400e:	2dff      	cmp	r5, #255	; 0xff
 8024010:	d01d      	beq.n	802404e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8024012:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024014:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8024018:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802401c:	fb05 f808 	mul.w	r8, r5, r8
 8024020:	fb05 f50c 	mul.w	r5, r5, ip
 8024024:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8024028:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802402c:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024030:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024034:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8024038:	44c6      	add	lr, r8
 802403a:	0a2d      	lsrs	r5, r5, #8
 802403c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024040:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024044:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024048:	ea4e 0505 	orr.w	r5, lr, r5
 802404c:	950c      	str	r5, [sp, #48]	; 0x30
 802404e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024050:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024054:	9f08      	ldr	r7, [sp, #32]
 8024056:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802405a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802405e:	fb09 f505 	mul.w	r5, r9, r5
 8024062:	fb02 550c 	mla	r5, r2, ip, r5
 8024066:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802406a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802406c:	fb01 550c 	mla	r5, r1, ip, r5
 8024070:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024074:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024076:	fb0b 550c 	mla	r5, fp, ip, r5
 802407a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802407e:	fb09 f90c 	mul.w	r9, r9, ip
 8024082:	0a2d      	lsrs	r5, r5, #8
 8024084:	fb02 9303 	mla	r3, r2, r3, r9
 8024088:	9a08      	ldr	r2, [sp, #32]
 802408a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802408e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8024092:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024094:	fb01 330e 	mla	r3, r1, lr, r3
 8024098:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802409c:	fb0b 3b01 	mla	fp, fp, r1, r3
 80240a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80240a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80240a4:	4343      	muls	r3, r0
 80240a6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80240aa:	1c58      	adds	r0, r3, #1
 80240ac:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80240b0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80240b4:	ea45 050b 	orr.w	r5, r5, fp
 80240b8:	7833      	ldrb	r3, [r6, #0]
 80240ba:	b2ea      	uxtb	r2, r5
 80240bc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80240c0:	fb12 f201 	smulbb	r2, r2, r1
 80240c4:	b2c0      	uxtb	r0, r0
 80240c6:	fb03 2300 	mla	r3, r3, r0, r2
 80240ca:	b29b      	uxth	r3, r3
 80240cc:	1c5a      	adds	r2, r3, #1
 80240ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80240d2:	7872      	ldrb	r2, [r6, #1]
 80240d4:	fb12 f200 	smulbb	r2, r2, r0
 80240d8:	121b      	asrs	r3, r3, #8
 80240da:	7033      	strb	r3, [r6, #0]
 80240dc:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80240e0:	0c2d      	lsrs	r5, r5, #16
 80240e2:	fb03 2301 	mla	r3, r3, r1, r2
 80240e6:	b29b      	uxth	r3, r3
 80240e8:	1c5a      	adds	r2, r3, #1
 80240ea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80240ee:	121b      	asrs	r3, r3, #8
 80240f0:	7073      	strb	r3, [r6, #1]
 80240f2:	78b3      	ldrb	r3, [r6, #2]
 80240f4:	fb13 f000 	smulbb	r0, r3, r0
 80240f8:	fb05 0501 	mla	r5, r5, r1, r0
 80240fc:	b2ad      	uxth	r5, r5
 80240fe:	1c6b      	adds	r3, r5, #1
 8024100:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024104:	122d      	asrs	r5, r5, #8
 8024106:	70b5      	strb	r5, [r6, #2]
 8024108:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802410a:	3603      	adds	r6, #3
 802410c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802410e:	4413      	add	r3, r2
 8024110:	932b      	str	r3, [sp, #172]	; 0xac
 8024112:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024114:	441c      	add	r4, r3
 8024116:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024118:	3b01      	subs	r3, #1
 802411a:	9314      	str	r3, [sp, #80]	; 0x50
 802411c:	e6c0      	b.n	8023ea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 802411e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024120:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024122:	4413      	add	r3, r2
 8024124:	932b      	str	r3, [sp, #172]	; 0xac
 8024126:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024128:	441c      	add	r4, r3
 802412a:	9b06      	ldr	r3, [sp, #24]
 802412c:	3b01      	subs	r3, #1
 802412e:	9306      	str	r3, [sp, #24]
 8024130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024132:	3303      	adds	r3, #3
 8024134:	930a      	str	r3, [sp, #40]	; 0x28
 8024136:	e664      	b.n	8023e02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8024138:	f47f ae75 	bne.w	8023e26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 802413c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802413e:	2b00      	cmp	r3, #0
 8024140:	f340 819a 	ble.w	8024478 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8024144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024148:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802414a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802414e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024152:	eef0 6a48 	vmov.f32	s13, s16
 8024156:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802415a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802415e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024162:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8024166:	eef0 6a68 	vmov.f32	s13, s17
 802416a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802416e:	ee16 4a90 	vmov	r4, s13
 8024172:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024176:	ee69 7a27 	vmul.f32	s15, s18, s15
 802417a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802417e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024182:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024186:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802418a:	ee18 2a10 	vmov	r2, s16
 802418e:	eeb0 8a47 	vmov.f32	s16, s14
 8024192:	fb92 f3f3 	sdiv	r3, r2, r3
 8024196:	ee18 2a90 	vmov	r2, s17
 802419a:	932d      	str	r3, [sp, #180]	; 0xb4
 802419c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802419e:	eef0 8a67 	vmov.f32	s17, s15
 80241a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80241a6:	932e      	str	r3, [sp, #184]	; 0xb8
 80241a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80241aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80241ac:	3b01      	subs	r3, #1
 80241ae:	9312      	str	r3, [sp, #72]	; 0x48
 80241b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80241b2:	bf08      	it	eq
 80241b4:	4613      	moveq	r3, r2
 80241b6:	9306      	str	r3, [sp, #24]
 80241b8:	e61c      	b.n	8023df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80241ba:	b151      	cbz	r1, 80241d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80241bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80241be:	58aa      	ldr	r2, [r5, r2]
 80241c0:	25ff      	movs	r5, #255	; 0xff
 80241c2:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80241c6:	9208      	str	r2, [sp, #32]
 80241c8:	46a8      	mov	r8, r5
 80241ca:	e6a0      	b.n	8023f0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80241cc:	25ff      	movs	r5, #255	; 0xff
 80241ce:	46aa      	mov	sl, r5
 80241d0:	e69d      	b.n	8023f0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80241d2:	25ff      	movs	r5, #255	; 0xff
 80241d4:	46aa      	mov	sl, r5
 80241d6:	e7f7      	b.n	80241c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 80241d8:	1c57      	adds	r7, r2, #1
 80241da:	d195      	bne.n	8024108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80241dc:	9d07      	ldr	r5, [sp, #28]
 80241de:	4295      	cmp	r5, r2
 80241e0:	dd92      	ble.n	8024108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80241e2:	1c5d      	adds	r5, r3, #1
 80241e4:	db90      	blt.n	8024108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80241e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80241e8:	429d      	cmp	r5, r3
 80241ea:	dd8d      	ble.n	8024108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80241ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80241ee:	9201      	str	r2, [sp, #4]
 80241f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80241f2:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80241f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80241f8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80241fa:	9300      	str	r3, [sp, #0]
 80241fc:	9b07      	ldr	r3, [sp, #28]
 80241fe:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8024202:	4631      	mov	r1, r6
 8024204:	f7ff fc68 	bl	8023ad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8024208:	e77e      	b.n	8024108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802420a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802420c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024210:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024212:	9d07      	ldr	r5, [sp, #28]
 8024214:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024218:	1412      	asrs	r2, r2, #16
 802421a:	1423      	asrs	r3, r4, #16
 802421c:	fb05 2303 	mla	r3, r5, r3, r2
 8024220:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024222:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8024226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802422a:	0e1e      	lsrs	r6, r3, #24
 802422c:	2900      	cmp	r1, #0
 802422e:	f000 8114 	beq.w	802445a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8024232:	686a      	ldr	r2, [r5, #4]
 8024234:	920d      	str	r2, [sp, #52]	; 0x34
 8024236:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802423a:	2800      	cmp	r0, #0
 802423c:	f000 8116 	beq.w	802446c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8024240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024242:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8024244:	18aa      	adds	r2, r5, r2
 8024246:	59ed      	ldr	r5, [r5, r7]
 8024248:	6852      	ldr	r2, [r2, #4]
 802424a:	9509      	str	r5, [sp, #36]	; 0x24
 802424c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8024250:	0e15      	lsrs	r5, r2, #24
 8024252:	920f      	str	r2, [sp, #60]	; 0x3c
 8024254:	b289      	uxth	r1, r1
 8024256:	b280      	uxth	r0, r0
 8024258:	fb01 fa00 	mul.w	sl, r1, r0
 802425c:	0109      	lsls	r1, r1, #4
 802425e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024262:	eba1 080a 	sub.w	r8, r1, sl
 8024266:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802426a:	b280      	uxth	r0, r0
 802426c:	fa1f f888 	uxth.w	r8, r8
 8024270:	1a12      	subs	r2, r2, r0
 8024272:	fb08 f10c 	mul.w	r1, r8, ip
 8024276:	b292      	uxth	r2, r2
 8024278:	fb02 1106 	mla	r1, r2, r6, r1
 802427c:	fb00 1109 	mla	r1, r0, r9, r1
 8024280:	fb0a 1105 	mla	r1, sl, r5, r1
 8024284:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024288:	2900      	cmp	r1, #0
 802428a:	f000 80da 	beq.w	8024442 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 802428e:	2eff      	cmp	r6, #255	; 0xff
 8024290:	d016      	beq.n	80242c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8024292:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8024296:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802429a:	4377      	muls	r7, r6
 802429c:	435e      	muls	r6, r3
 802429e:	0a3b      	lsrs	r3, r7, #8
 80242a0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80242a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80242a8:	443b      	add	r3, r7
 80242aa:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80242ae:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80242b2:	0a1b      	lsrs	r3, r3, #8
 80242b4:	0a3f      	lsrs	r7, r7, #8
 80242b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80242ba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80242be:	433b      	orrs	r3, r7
 80242c0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80242c4:	d01d      	beq.n	8024302 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 80242c6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80242c8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80242ca:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80242ce:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80242d2:	fb0c f606 	mul.w	r6, ip, r6
 80242d6:	fb0c fc07 	mul.w	ip, ip, r7
 80242da:	0a37      	lsrs	r7, r6, #8
 80242dc:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80242e0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80242e4:	4437      	add	r7, r6
 80242e6:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80242ea:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80242ee:	0a3f      	lsrs	r7, r7, #8
 80242f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242f4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80242f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80242fc:	ea47 060c 	orr.w	r6, r7, ip
 8024300:	960d      	str	r6, [sp, #52]	; 0x34
 8024302:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024306:	d01d      	beq.n	8024344 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8024308:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802430a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802430e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024312:	fb09 fc0c 	mul.w	ip, r9, ip
 8024316:	fb09 f906 	mul.w	r9, r9, r6
 802431a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802431e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024322:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8024326:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802432a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802432e:	4467      	add	r7, ip
 8024330:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024334:	0a3f      	lsrs	r7, r7, #8
 8024336:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802433a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802433e:	ea47 0609 	orr.w	r6, r7, r9
 8024342:	9609      	str	r6, [sp, #36]	; 0x24
 8024344:	2dff      	cmp	r5, #255	; 0xff
 8024346:	d01a      	beq.n	802437e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8024348:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802434a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802434e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024352:	fb05 fc0c 	mul.w	ip, r5, ip
 8024356:	4375      	muls	r5, r6
 8024358:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802435c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024360:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8024364:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024368:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802436c:	4467      	add	r7, ip
 802436e:	0a2d      	lsrs	r5, r5, #8
 8024370:	0a3f      	lsrs	r7, r7, #8
 8024372:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024376:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802437a:	433d      	orrs	r5, r7
 802437c:	950f      	str	r5, [sp, #60]	; 0x3c
 802437e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024380:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8024384:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024388:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802438c:	fb08 f505 	mul.w	r5, r8, r5
 8024390:	fb02 5506 	mla	r5, r2, r6, r5
 8024394:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024396:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802439a:	fb00 5506 	mla	r5, r0, r6, r5
 802439e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80243a0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80243a4:	fb0a 5506 	mla	r5, sl, r6, r5
 80243a8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80243aa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80243ae:	0a2d      	lsrs	r5, r5, #8
 80243b0:	fb08 f806 	mul.w	r8, r8, r6
 80243b4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80243b8:	fb02 8303 	mla	r3, r2, r3, r8
 80243bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80243be:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80243c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80243c4:	fb00 3307 	mla	r3, r0, r7, r3
 80243c8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80243cc:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80243d0:	fb01 f30b 	mul.w	r3, r1, fp
 80243d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80243d8:	1c59      	adds	r1, r3, #1
 80243da:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80243de:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80243e2:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80243e6:	ea45 050c 	orr.w	r5, r5, ip
 80243ea:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80243ee:	b2ea      	uxtb	r2, r5
 80243f0:	b2c9      	uxtb	r1, r1
 80243f2:	fb12 f20b 	smulbb	r2, r2, fp
 80243f6:	fb03 2301 	mla	r3, r3, r1, r2
 80243fa:	b29b      	uxth	r3, r3
 80243fc:	1c5a      	adds	r2, r3, #1
 80243fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024402:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8024406:	fb12 f201 	smulbb	r2, r2, r1
 802440a:	121b      	asrs	r3, r3, #8
 802440c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8024410:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8024414:	0c2d      	lsrs	r5, r5, #16
 8024416:	fb03 230b 	mla	r3, r3, fp, r2
 802441a:	b29b      	uxth	r3, r3
 802441c:	1c5a      	adds	r2, r3, #1
 802441e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024422:	121b      	asrs	r3, r3, #8
 8024424:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8024428:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802442c:	fb13 f101 	smulbb	r1, r3, r1
 8024430:	fb05 150b 	mla	r5, r5, fp, r1
 8024434:	b2ad      	uxth	r5, r5
 8024436:	1c69      	adds	r1, r5, #1
 8024438:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802443c:	122d      	asrs	r5, r5, #8
 802443e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8024442:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024444:	f10e 0e03 	add.w	lr, lr, #3
 8024448:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802444a:	4413      	add	r3, r2
 802444c:	932b      	str	r3, [sp, #172]	; 0xac
 802444e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024450:	441c      	add	r4, r3
 8024452:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024454:	3b01      	subs	r3, #1
 8024456:	9313      	str	r3, [sp, #76]	; 0x4c
 8024458:	e501      	b.n	8023e5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802445a:	b150      	cbz	r0, 8024472 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 802445c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802445e:	58aa      	ldr	r2, [r5, r2]
 8024460:	25ff      	movs	r5, #255	; 0xff
 8024462:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8024466:	9209      	str	r2, [sp, #36]	; 0x24
 8024468:	46ac      	mov	ip, r5
 802446a:	e6f3      	b.n	8024254 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 802446c:	25ff      	movs	r5, #255	; 0xff
 802446e:	46a9      	mov	r9, r5
 8024470:	e6f0      	b.n	8024254 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8024472:	25ff      	movs	r5, #255	; 0xff
 8024474:	46a9      	mov	r9, r5
 8024476:	e7f7      	b.n	8024468 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8024478:	b019      	add	sp, #100	; 0x64
 802447a:	ecbd 8b08 	vpop	{d8-d11}
 802447e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024484 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8024484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024488:	b085      	sub	sp, #20
 802448a:	7888      	ldrb	r0, [r1, #2]
 802448c:	4691      	mov	r9, r2
 802448e:	9000      	str	r0, [sp, #0]
 8024490:	7848      	ldrb	r0, [r1, #1]
 8024492:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8024496:	9001      	str	r0, [sp, #4]
 8024498:	7808      	ldrb	r0, [r1, #0]
 802449a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802449e:	9002      	str	r0, [sp, #8]
 80244a0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80244a4:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80244a8:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80244ac:	fb04 c603 	mla	r6, r4, r3, ip
 80244b0:	2c00      	cmp	r4, #0
 80244b2:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80244b6:	9a00      	ldr	r2, [sp, #0]
 80244b8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80244bc:	9a01      	ldr	r2, [sp, #4]
 80244be:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80244c2:	db3a      	blt.n	802453a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80244c4:	45a0      	cmp	r8, r4
 80244c6:	dd38      	ble.n	802453a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80244c8:	f1bc 0f00 	cmp.w	ip, #0
 80244cc:	db33      	blt.n	8024536 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80244ce:	4563      	cmp	r3, ip
 80244d0:	dd31      	ble.n	8024536 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80244d2:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80244d6:	f11c 0601 	adds.w	r6, ip, #1
 80244da:	d431      	bmi.n	8024540 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80244dc:	42b3      	cmp	r3, r6
 80244de:	dd2f      	ble.n	8024540 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80244e0:	b375      	cbz	r5, 8024540 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80244e2:	f8de 6004 	ldr.w	r6, [lr, #4]
 80244e6:	3401      	adds	r4, #1
 80244e8:	d42e      	bmi.n	8024548 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80244ea:	45a0      	cmp	r8, r4
 80244ec:	dd2c      	ble.n	8024548 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80244ee:	b35f      	cbz	r7, 8024548 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80244f0:	f1bc 0f00 	cmp.w	ip, #0
 80244f4:	db26      	blt.n	8024544 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 80244f6:	4563      	cmp	r3, ip
 80244f8:	dd24      	ble.n	8024544 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 80244fa:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80244fe:	f11c 0c01 	adds.w	ip, ip, #1
 8024502:	d405      	bmi.n	8024510 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024504:	4563      	cmp	r3, ip
 8024506:	dd03      	ble.n	8024510 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024508:	b115      	cbz	r5, 8024510 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802450a:	3301      	adds	r3, #1
 802450c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8024510:	2d0f      	cmp	r5, #15
 8024512:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024516:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802451a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802451e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8024522:	d801      	bhi.n	8024528 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8024524:	2f0f      	cmp	r7, #15
 8024526:	d911      	bls.n	802454c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8024528:	4b77      	ldr	r3, [pc, #476]	; (8024708 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 802452a:	f240 11a5 	movw	r1, #421	; 0x1a5
 802452e:	4a77      	ldr	r2, [pc, #476]	; (802470c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8024530:	4877      	ldr	r0, [pc, #476]	; (8024710 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8024532:	f003 f83b 	bl	80275ac <__assert_func>
 8024536:	4602      	mov	r2, r0
 8024538:	e7cd      	b.n	80244d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 802453a:	4606      	mov	r6, r0
 802453c:	4602      	mov	r2, r0
 802453e:	e7d2      	b.n	80244e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8024540:	4606      	mov	r6, r0
 8024542:	e7d0      	b.n	80244e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8024544:	4604      	mov	r4, r0
 8024546:	e7da      	b.n	80244fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8024548:	4604      	mov	r4, r0
 802454a:	e7e1      	b.n	8024510 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802454c:	b2ab      	uxth	r3, r5
 802454e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024552:	b2bf      	uxth	r7, r7
 8024554:	fb03 fe07 	mul.w	lr, r3, r7
 8024558:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802455c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024560:	eba3 0c0e 	sub.w	ip, r3, lr
 8024564:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8024568:	b2bf      	uxth	r7, r7
 802456a:	fa1f fc8c 	uxth.w	ip, ip
 802456e:	eba5 0507 	sub.w	r5, r5, r7
 8024572:	fb0c f30a 	mul.w	r3, ip, sl
 8024576:	b2ad      	uxth	r5, r5
 8024578:	fb05 330b 	mla	r3, r5, fp, r3
 802457c:	fb07 3309 	mla	r3, r7, r9, r3
 8024580:	fb0e 3308 	mla	r3, lr, r8, r3
 8024584:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024588:	9303      	str	r3, [sp, #12]
 802458a:	d018      	beq.n	80245be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 802458c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024590:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024594:	fb0b f303 	mul.w	r3, fp, r3
 8024598:	fb0b fb02 	mul.w	fp, fp, r2
 802459c:	0a1a      	lsrs	r2, r3, #8
 802459e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80245a2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80245a6:	441a      	add	r2, r3
 80245a8:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80245ac:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80245b0:	0a12      	lsrs	r2, r2, #8
 80245b2:	0a1b      	lsrs	r3, r3, #8
 80245b4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80245b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80245bc:	431a      	orrs	r2, r3
 80245be:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80245c2:	d019      	beq.n	80245f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 80245c4:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80245c8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80245cc:	fb0a fb0b 	mul.w	fp, sl, fp
 80245d0:	fb0a fa06 	mul.w	sl, sl, r6
 80245d4:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80245d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80245dc:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80245e0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80245e4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80245e8:	445e      	add	r6, fp
 80245ea:	0a1b      	lsrs	r3, r3, #8
 80245ec:	0a36      	lsrs	r6, r6, #8
 80245ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80245f2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80245f6:	431e      	orrs	r6, r3
 80245f8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80245fc:	d019      	beq.n	8024632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 80245fe:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024602:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024606:	fb09 fa0a 	mul.w	sl, r9, sl
 802460a:	fb09 f904 	mul.w	r9, r9, r4
 802460e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024612:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024616:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802461a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802461e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8024622:	4454      	add	r4, sl
 8024624:	0a1b      	lsrs	r3, r3, #8
 8024626:	0a24      	lsrs	r4, r4, #8
 8024628:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802462c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024630:	431c      	orrs	r4, r3
 8024632:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024636:	d019      	beq.n	802466c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8024638:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 802463c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024640:	fb08 f909 	mul.w	r9, r8, r9
 8024644:	fb08 f800 	mul.w	r8, r8, r0
 8024648:	ea4f 2019 	mov.w	r0, r9, lsr #8
 802464c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024650:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8024654:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024658:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802465c:	4448      	add	r0, r9
 802465e:	0a1b      	lsrs	r3, r3, #8
 8024660:	0a00      	lsrs	r0, r0, #8
 8024662:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024666:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802466a:	4318      	orrs	r0, r3
 802466c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024670:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024674:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024678:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802467c:	fb0c f808 	mul.w	r8, ip, r8
 8024680:	fb0c f606 	mul.w	r6, ip, r6
 8024684:	fb05 8803 	mla	r8, r5, r3, r8
 8024688:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802468c:	fb05 6202 	mla	r2, r5, r2, r6
 8024690:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024694:	fb07 8803 	mla	r8, r7, r3, r8
 8024698:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802469c:	fb07 2704 	mla	r7, r7, r4, r2
 80246a0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80246a4:	fb0e 8303 	mla	r3, lr, r3, r8
 80246a8:	fb0e 7e00 	mla	lr, lr, r0, r7
 80246ac:	9802      	ldr	r0, [sp, #8]
 80246ae:	0a1b      	lsrs	r3, r3, #8
 80246b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80246b8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80246bc:	ea43 0e0e 	orr.w	lr, r3, lr
 80246c0:	9b03      	ldr	r3, [sp, #12]
 80246c2:	43db      	mvns	r3, r3
 80246c4:	b2db      	uxtb	r3, r3
 80246c6:	4358      	muls	r0, r3
 80246c8:	1c42      	adds	r2, r0, #1
 80246ca:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80246ce:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80246d2:	700a      	strb	r2, [r1, #0]
 80246d4:	9a01      	ldr	r2, [sp, #4]
 80246d6:	435a      	muls	r2, r3
 80246d8:	1c50      	adds	r0, r2, #1
 80246da:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80246de:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80246e2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80246e6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80246ea:	704a      	strb	r2, [r1, #1]
 80246ec:	9a00      	ldr	r2, [sp, #0]
 80246ee:	435a      	muls	r2, r3
 80246f0:	4613      	mov	r3, r2
 80246f2:	3201      	adds	r2, #1
 80246f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80246f8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80246fc:	f881 e002 	strb.w	lr, [r1, #2]
 8024700:	b005      	add	sp, #20
 8024702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024706:	bf00      	nop
 8024708:	0802c715 	.word	0x0802c715
 802470c:	0802cc0a 	.word	0x0802cc0a
 8024710:	0802c7de 	.word	0x0802c7de

08024714 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024718:	ed2d 8b08 	vpush	{d8-d11}
 802471c:	b097      	sub	sp, #92	; 0x5c
 802471e:	eeb0 aa40 	vmov.f32	s20, s0
 8024722:	eef0 9a60 	vmov.f32	s19, s1
 8024726:	9306      	str	r3, [sp, #24]
 8024728:	eeb0 9a41 	vmov.f32	s18, s2
 802472c:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8024730:	eeb0 8a62 	vmov.f32	s16, s5
 8024734:	9214      	str	r2, [sp, #80]	; 0x50
 8024736:	eef0 8a43 	vmov.f32	s17, s6
 802473a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802473c:	eef0 ba44 	vmov.f32	s23, s8
 8024740:	9307      	str	r3, [sp, #28]
 8024742:	eeb0 ba64 	vmov.f32	s22, s9
 8024746:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802474a:	eef0 aa45 	vmov.f32	s21, s10
 802474e:	9015      	str	r0, [sp, #84]	; 0x54
 8024750:	9112      	str	r1, [sp, #72]	; 0x48
 8024752:	6850      	ldr	r0, [r2, #4]
 8024754:	9310      	str	r3, [sp, #64]	; 0x40
 8024756:	6812      	ldr	r2, [r2, #0]
 8024758:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802475a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802475e:	fb00 1303 	mla	r3, r0, r3, r1
 8024762:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024766:	18d3      	adds	r3, r2, r3
 8024768:	930a      	str	r3, [sp, #40]	; 0x28
 802476a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802476c:	681b      	ldr	r3, [r3, #0]
 802476e:	9311      	str	r3, [sp, #68]	; 0x44
 8024770:	9b07      	ldr	r3, [sp, #28]
 8024772:	009b      	lsls	r3, r3, #2
 8024774:	930e      	str	r3, [sp, #56]	; 0x38
 8024776:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024778:	2b00      	cmp	r3, #0
 802477a:	dc03      	bgt.n	8024784 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802477c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802477e:	2b00      	cmp	r3, #0
 8024780:	f340 832e 	ble.w	8024de0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8024784:	9b06      	ldr	r3, [sp, #24]
 8024786:	2b00      	cmp	r3, #0
 8024788:	f340 8186 	ble.w	8024a98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 802478c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802478e:	1423      	asrs	r3, r4, #16
 8024790:	1412      	asrs	r2, r2, #16
 8024792:	d42f      	bmi.n	80247f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8024794:	1c51      	adds	r1, r2, #1
 8024796:	9807      	ldr	r0, [sp, #28]
 8024798:	4288      	cmp	r0, r1
 802479a:	dd2e      	ble.n	80247fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802479c:	2b00      	cmp	r3, #0
 802479e:	db2c      	blt.n	80247fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80247a0:	1c59      	adds	r1, r3, #1
 80247a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80247a4:	4288      	cmp	r0, r1
 80247a6:	dd28      	ble.n	80247fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80247a8:	9b06      	ldr	r3, [sp, #24]
 80247aa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80247ac:	3b01      	subs	r3, #1
 80247ae:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80247b0:	fb02 1203 	mla	r2, r2, r3, r1
 80247b4:	1412      	asrs	r2, r2, #16
 80247b6:	d42b      	bmi.n	8024810 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80247b8:	3201      	adds	r2, #1
 80247ba:	9907      	ldr	r1, [sp, #28]
 80247bc:	4291      	cmp	r1, r2
 80247be:	dd27      	ble.n	8024810 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80247c0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80247c2:	fb02 4303 	mla	r3, r2, r3, r4
 80247c6:	141b      	asrs	r3, r3, #16
 80247c8:	d422      	bmi.n	8024810 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80247ca:	3301      	adds	r3, #1
 80247cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80247ce:	429a      	cmp	r2, r3
 80247d0:	dd1e      	ble.n	8024810 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80247d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247d4:	f8dd b018 	ldr.w	fp, [sp, #24]
 80247d8:	1cdd      	adds	r5, r3, #3
 80247da:	f1bb 0f00 	cmp.w	fp, #0
 80247de:	f300 81c4 	bgt.w	8024b6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 80247e2:	9b06      	ldr	r3, [sp, #24]
 80247e4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80247e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80247ee:	4423      	add	r3, r4
 80247f0:	930a      	str	r3, [sp, #40]	; 0x28
 80247f2:	e153      	b.n	8024a9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 80247f4:	1c51      	adds	r1, r2, #1
 80247f6:	f040 8142 	bne.w	8024a7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80247fa:	9907      	ldr	r1, [sp, #28]
 80247fc:	428a      	cmp	r2, r1
 80247fe:	f280 813e 	bge.w	8024a7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8024802:	1c5a      	adds	r2, r3, #1
 8024804:	f2c0 813b 	blt.w	8024a7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8024808:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802480a:	4293      	cmp	r3, r2
 802480c:	f280 8137 	bge.w	8024a7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8024810:	9b06      	ldr	r3, [sp, #24]
 8024812:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024814:	9313      	str	r3, [sp, #76]	; 0x4c
 8024816:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024818:	2b00      	cmp	r3, #0
 802481a:	dde2      	ble.n	80247e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 802481c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802481e:	1423      	asrs	r3, r4, #16
 8024820:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024822:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024826:	1409      	asrs	r1, r1, #16
 8024828:	f3c2 3203 	ubfx	r2, r2, #12, #4
 802482c:	f100 8187 	bmi.w	8024b3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8024830:	1c4e      	adds	r6, r1, #1
 8024832:	9f07      	ldr	r7, [sp, #28]
 8024834:	42b7      	cmp	r7, r6
 8024836:	f340 8184 	ble.w	8024b42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802483a:	2b00      	cmp	r3, #0
 802483c:	f2c0 8181 	blt.w	8024b42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8024840:	1c5e      	adds	r6, r3, #1
 8024842:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8024844:	42b7      	cmp	r7, r6
 8024846:	f340 817c 	ble.w	8024b42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802484a:	9e07      	ldr	r6, [sp, #28]
 802484c:	fb03 1306 	mla	r3, r3, r6, r1
 8024850:	9911      	ldr	r1, [sp, #68]	; 0x44
 8024852:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8024856:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802485a:	0e1f      	lsrs	r7, r3, #24
 802485c:	2a00      	cmp	r2, #0
 802485e:	f000 815c 	beq.w	8024b1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8024862:	6871      	ldr	r1, [r6, #4]
 8024864:	910b      	str	r1, [sp, #44]	; 0x2c
 8024866:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802486a:	2800      	cmp	r0, #0
 802486c:	f000 815e 	beq.w	8024b2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8024870:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024872:	eb06 0c01 	add.w	ip, r6, r1
 8024876:	5876      	ldr	r6, [r6, r1]
 8024878:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802487c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8024880:	9608      	str	r6, [sp, #32]
 8024882:	0e0e      	lsrs	r6, r1, #24
 8024884:	910c      	str	r1, [sp, #48]	; 0x30
 8024886:	b292      	uxth	r2, r2
 8024888:	b280      	uxth	r0, r0
 802488a:	fb02 fa00 	mul.w	sl, r2, r0
 802488e:	0112      	lsls	r2, r2, #4
 8024890:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024894:	eba2 080a 	sub.w	r8, r2, sl
 8024898:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802489c:	b280      	uxth	r0, r0
 802489e:	fa1f f888 	uxth.w	r8, r8
 80248a2:	1a09      	subs	r1, r1, r0
 80248a4:	fb08 f20e 	mul.w	r2, r8, lr
 80248a8:	b289      	uxth	r1, r1
 80248aa:	fb01 2207 	mla	r2, r1, r7, r2
 80248ae:	fb00 2209 	mla	r2, r0, r9, r2
 80248b2:	fb0a 2206 	mla	r2, sl, r6, r2
 80248b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80248ba:	2a00      	cmp	r2, #0
 80248bc:	f000 80d4 	beq.w	8024a68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80248c0:	2fff      	cmp	r7, #255	; 0xff
 80248c2:	d01a      	beq.n	80248fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 80248c4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80248c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248cc:	fb07 fc0c 	mul.w	ip, r7, ip
 80248d0:	435f      	muls	r7, r3
 80248d2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80248d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80248da:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80248de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80248e2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80248e6:	4463      	add	r3, ip
 80248e8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80248ec:	0a1b      	lsrs	r3, r3, #8
 80248ee:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80248f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80248f6:	ea43 030b 	orr.w	r3, r3, fp
 80248fa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80248fe:	d01e      	beq.n	802493e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8024900:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024902:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8024906:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802490a:	fb0e fb0b 	mul.w	fp, lr, fp
 802490e:	fb0e fe07 	mul.w	lr, lr, r7
 8024912:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024916:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802491a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802491e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024922:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8024926:	44dc      	add	ip, fp
 8024928:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802492c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024930:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024934:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024938:	ea4c 070e 	orr.w	r7, ip, lr
 802493c:	970b      	str	r7, [sp, #44]	; 0x2c
 802493e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024942:	d01e      	beq.n	8024982 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024944:	9f08      	ldr	r7, [sp, #32]
 8024946:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802494a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802494e:	fb09 fe0e 	mul.w	lr, r9, lr
 8024952:	fb09 f907 	mul.w	r9, r9, r7
 8024956:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802495a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802495e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8024962:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024966:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802496a:	44f4      	add	ip, lr
 802496c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024970:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024974:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024978:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802497c:	ea4c 0709 	orr.w	r7, ip, r9
 8024980:	9708      	str	r7, [sp, #32]
 8024982:	2eff      	cmp	r6, #255	; 0xff
 8024984:	d01c      	beq.n	80249c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8024986:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024988:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802498c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024990:	fb06 fe0e 	mul.w	lr, r6, lr
 8024994:	437e      	muls	r6, r7
 8024996:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802499a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802499e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80249a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249a6:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80249aa:	44f4      	add	ip, lr
 80249ac:	0a36      	lsrs	r6, r6, #8
 80249ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249b2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80249b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249ba:	ea4c 0606 	orr.w	r6, ip, r6
 80249be:	960c      	str	r6, [sp, #48]	; 0x30
 80249c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80249c2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80249c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80249ca:	2aff      	cmp	r2, #255	; 0xff
 80249cc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80249d0:	fb08 f606 	mul.w	r6, r8, r6
 80249d4:	fb01 6607 	mla	r6, r1, r7, r6
 80249d8:	9f08      	ldr	r7, [sp, #32]
 80249da:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80249de:	fb00 6607 	mla	r6, r0, r7, r6
 80249e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80249e4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80249e8:	fb0a 6607 	mla	r6, sl, r7, r6
 80249ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80249ee:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80249f2:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80249f6:	fb08 f807 	mul.w	r8, r8, r7
 80249fa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80249fe:	fb01 8303 	mla	r3, r1, r3, r8
 8024a02:	9908      	ldr	r1, [sp, #32]
 8024a04:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024a08:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024a0a:	fb00 330c 	mla	r3, r0, ip, r3
 8024a0e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8024a12:	fb0a 3a00 	mla	sl, sl, r0, r3
 8024a16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a1a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a1e:	ea46 060a 	orr.w	r6, r6, sl
 8024a22:	b2f0      	uxtb	r0, r6
 8024a24:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8024a28:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8024a2c:	f000 8084 	beq.w	8024b38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8024a30:	43d2      	mvns	r2, r2
 8024a32:	782b      	ldrb	r3, [r5, #0]
 8024a34:	b2d2      	uxtb	r2, r2
 8024a36:	fb03 f702 	mul.w	r7, r3, r2
 8024a3a:	1c7b      	adds	r3, r7, #1
 8024a3c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024a40:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024a44:	702b      	strb	r3, [r5, #0]
 8024a46:	786b      	ldrb	r3, [r5, #1]
 8024a48:	fb03 f002 	mul.w	r0, r3, r2
 8024a4c:	1c43      	adds	r3, r0, #1
 8024a4e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024a52:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024a56:	706b      	strb	r3, [r5, #1]
 8024a58:	78ab      	ldrb	r3, [r5, #2]
 8024a5a:	4353      	muls	r3, r2
 8024a5c:	1c5a      	adds	r2, r3, #1
 8024a5e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024a62:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8024a66:	70ae      	strb	r6, [r5, #2]
 8024a68:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024a6a:	3503      	adds	r5, #3
 8024a6c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024a6e:	4413      	add	r3, r2
 8024a70:	9329      	str	r3, [sp, #164]	; 0xa4
 8024a72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024a74:	441c      	add	r4, r3
 8024a76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024a78:	3b01      	subs	r3, #1
 8024a7a:	9313      	str	r3, [sp, #76]	; 0x4c
 8024a7c:	e6cb      	b.n	8024816 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8024a7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024a80:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024a82:	4413      	add	r3, r2
 8024a84:	9329      	str	r3, [sp, #164]	; 0xa4
 8024a86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024a88:	441c      	add	r4, r3
 8024a8a:	9b06      	ldr	r3, [sp, #24]
 8024a8c:	3b01      	subs	r3, #1
 8024a8e:	9306      	str	r3, [sp, #24]
 8024a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a92:	3303      	adds	r3, #3
 8024a94:	930a      	str	r3, [sp, #40]	; 0x28
 8024a96:	e675      	b.n	8024784 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8024a98:	f47f ae86 	bne.w	80247a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8024a9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024a9e:	2b00      	cmp	r3, #0
 8024aa0:	f340 819e 	ble.w	8024de0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8024aa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024aa8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024aaa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024aae:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024ab2:	eef0 6a48 	vmov.f32	s13, s16
 8024ab6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024aba:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024abe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ac2:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8024ac6:	eef0 6a68 	vmov.f32	s13, s17
 8024aca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ace:	ee16 4a90 	vmov	r4, s13
 8024ad2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024ad6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024ada:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024ade:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024ae2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024ae6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024aea:	ee18 2a10 	vmov	r2, s16
 8024aee:	eeb0 8a47 	vmov.f32	s16, s14
 8024af2:	fb92 f3f3 	sdiv	r3, r2, r3
 8024af6:	ee18 2a90 	vmov	r2, s17
 8024afa:	932b      	str	r3, [sp, #172]	; 0xac
 8024afc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024afe:	eef0 8a67 	vmov.f32	s17, s15
 8024b02:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b06:	932c      	str	r3, [sp, #176]	; 0xb0
 8024b08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024b0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024b0c:	3b01      	subs	r3, #1
 8024b0e:	9312      	str	r3, [sp, #72]	; 0x48
 8024b10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024b12:	bf08      	it	eq
 8024b14:	4613      	moveq	r3, r2
 8024b16:	9306      	str	r3, [sp, #24]
 8024b18:	e62d      	b.n	8024776 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8024b1a:	b150      	cbz	r0, 8024b32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8024b1c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024b1e:	5871      	ldr	r1, [r6, r1]
 8024b20:	26ff      	movs	r6, #255	; 0xff
 8024b22:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8024b26:	9108      	str	r1, [sp, #32]
 8024b28:	46b6      	mov	lr, r6
 8024b2a:	e6ac      	b.n	8024886 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8024b2c:	26ff      	movs	r6, #255	; 0xff
 8024b2e:	46b1      	mov	r9, r6
 8024b30:	e6a9      	b.n	8024886 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8024b32:	26ff      	movs	r6, #255	; 0xff
 8024b34:	46b1      	mov	r9, r6
 8024b36:	e7f7      	b.n	8024b28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8024b38:	7028      	strb	r0, [r5, #0]
 8024b3a:	7069      	strb	r1, [r5, #1]
 8024b3c:	e793      	b.n	8024a66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8024b3e:	1c4f      	adds	r7, r1, #1
 8024b40:	d192      	bne.n	8024a68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8024b42:	9e07      	ldr	r6, [sp, #28]
 8024b44:	428e      	cmp	r6, r1
 8024b46:	dd8f      	ble.n	8024a68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8024b48:	1c5e      	adds	r6, r3, #1
 8024b4a:	db8d      	blt.n	8024a68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8024b4c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8024b4e:	429e      	cmp	r6, r3
 8024b50:	dd8a      	ble.n	8024a68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8024b52:	9600      	str	r6, [sp, #0]
 8024b54:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8024b58:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8024b5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024b5e:	4629      	mov	r1, r5
 8024b60:	9b07      	ldr	r3, [sp, #28]
 8024b62:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024b64:	f7ff fc8e 	bl	8024484 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8024b68:	e77e      	b.n	8024a68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8024b6a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024b6c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024b70:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8024b72:	9e07      	ldr	r6, [sp, #28]
 8024b74:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024b78:	1409      	asrs	r1, r1, #16
 8024b7a:	1423      	asrs	r3, r4, #16
 8024b7c:	fb06 1303 	mla	r3, r6, r3, r1
 8024b80:	9911      	ldr	r1, [sp, #68]	; 0x44
 8024b82:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8024b86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8024b8a:	0e1f      	lsrs	r7, r3, #24
 8024b8c:	2a00      	cmp	r2, #0
 8024b8e:	f000 8113 	beq.w	8024db8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8024b92:	6871      	ldr	r1, [r6, #4]
 8024b94:	910d      	str	r1, [sp, #52]	; 0x34
 8024b96:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8024b9a:	2800      	cmp	r0, #0
 8024b9c:	f000 8115 	beq.w	8024dca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8024ba0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024ba2:	eb06 0c01 	add.w	ip, r6, r1
 8024ba6:	5876      	ldr	r6, [r6, r1]
 8024ba8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8024bac:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8024bb0:	9609      	str	r6, [sp, #36]	; 0x24
 8024bb2:	0e0e      	lsrs	r6, r1, #24
 8024bb4:	910f      	str	r1, [sp, #60]	; 0x3c
 8024bb6:	b292      	uxth	r2, r2
 8024bb8:	b280      	uxth	r0, r0
 8024bba:	fb02 fa00 	mul.w	sl, r2, r0
 8024bbe:	0112      	lsls	r2, r2, #4
 8024bc0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024bc4:	eba2 080a 	sub.w	r8, r2, sl
 8024bc8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024bcc:	b280      	uxth	r0, r0
 8024bce:	fa1f f888 	uxth.w	r8, r8
 8024bd2:	1a09      	subs	r1, r1, r0
 8024bd4:	fb08 f20e 	mul.w	r2, r8, lr
 8024bd8:	b289      	uxth	r1, r1
 8024bda:	fb01 2207 	mla	r2, r1, r7, r2
 8024bde:	fb00 2209 	mla	r2, r0, r9, r2
 8024be2:	fb0a 2206 	mla	r2, sl, r6, r2
 8024be6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024bea:	2a00      	cmp	r2, #0
 8024bec:	f000 80da 	beq.w	8024da4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8024bf0:	2fff      	cmp	r7, #255	; 0xff
 8024bf2:	d01a      	beq.n	8024c2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8024bf4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024bf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024bfc:	fb07 fc0c 	mul.w	ip, r7, ip
 8024c00:	435f      	muls	r7, r3
 8024c02:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024c06:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024c0a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024c0e:	4463      	add	r3, ip
 8024c10:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8024c14:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8024c18:	0a1b      	lsrs	r3, r3, #8
 8024c1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024c22:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024c26:	ea43 030c 	orr.w	r3, r3, ip
 8024c2a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024c2e:	d021      	beq.n	8024c74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8024c30:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8024c32:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024c36:	fb0e f707 	mul.w	r7, lr, r7
 8024c3a:	9713      	str	r7, [sp, #76]	; 0x4c
 8024c3c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8024c3e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024c42:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8024c44:	fb0e fe0c 	mul.w	lr, lr, ip
 8024c48:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c4c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c54:	44bc      	add	ip, r7
 8024c56:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8024c5a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8024c5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024c66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c6a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024c6e:	ea4c 070e 	orr.w	r7, ip, lr
 8024c72:	970d      	str	r7, [sp, #52]	; 0x34
 8024c74:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024c78:	d01e      	beq.n	8024cb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8024c7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024c7c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8024c80:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024c84:	fb09 fe0e 	mul.w	lr, r9, lr
 8024c88:	fb09 f907 	mul.w	r9, r9, r7
 8024c8c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024c90:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024c94:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8024c98:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c9c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8024ca0:	44f4      	add	ip, lr
 8024ca2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024ca6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024caa:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024cae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024cb2:	ea4c 0709 	orr.w	r7, ip, r9
 8024cb6:	9709      	str	r7, [sp, #36]	; 0x24
 8024cb8:	2eff      	cmp	r6, #255	; 0xff
 8024cba:	d01c      	beq.n	8024cf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8024cbc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8024cbe:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8024cc2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024cc6:	fb06 fe0e 	mul.w	lr, r6, lr
 8024cca:	437e      	muls	r6, r7
 8024ccc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024cd0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024cd4:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8024cd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024cdc:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8024ce0:	44f4      	add	ip, lr
 8024ce2:	0a36      	lsrs	r6, r6, #8
 8024ce4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ce8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024cec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024cf0:	ea4c 0606 	orr.w	r6, ip, r6
 8024cf4:	960f      	str	r6, [sp, #60]	; 0x3c
 8024cf6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8024cf8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8024cfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024d00:	2aff      	cmp	r2, #255	; 0xff
 8024d02:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024d06:	fb08 f606 	mul.w	r6, r8, r6
 8024d0a:	fb01 6607 	mla	r6, r1, r7, r6
 8024d0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024d10:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024d14:	fb00 6607 	mla	r6, r0, r7, r6
 8024d18:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8024d1a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024d1e:	fb0a 6607 	mla	r6, sl, r7, r6
 8024d22:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8024d24:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024d28:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8024d2c:	fb08 f807 	mul.w	r8, r8, r7
 8024d30:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024d34:	fb01 8303 	mla	r3, r1, r3, r8
 8024d38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024d3a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024d3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024d40:	fb00 330c 	mla	r3, r0, ip, r3
 8024d44:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8024d48:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8024d4c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024d50:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024d54:	ea46 060e 	orr.w	r6, r6, lr
 8024d58:	b2f0      	uxtb	r0, r6
 8024d5a:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8024d5e:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8024d62:	d038      	beq.n	8024dd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8024d64:	43d2      	mvns	r2, r2
 8024d66:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8024d6a:	b2d2      	uxtb	r2, r2
 8024d6c:	4357      	muls	r7, r2
 8024d6e:	1c7b      	adds	r3, r7, #1
 8024d70:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024d74:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024d78:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8024d7c:	4350      	muls	r0, r2
 8024d7e:	f805 3c03 	strb.w	r3, [r5, #-3]
 8024d82:	1c43      	adds	r3, r0, #1
 8024d84:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024d88:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024d8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8024d90:	4353      	muls	r3, r2
 8024d92:	f805 1c02 	strb.w	r1, [r5, #-2]
 8024d96:	1c5a      	adds	r2, r3, #1
 8024d98:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024d9c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8024da0:	f805 6c01 	strb.w	r6, [r5, #-1]
 8024da4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024da6:	3503      	adds	r5, #3
 8024da8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024daa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024dae:	4413      	add	r3, r2
 8024db0:	9329      	str	r3, [sp, #164]	; 0xa4
 8024db2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024db4:	441c      	add	r4, r3
 8024db6:	e510      	b.n	80247da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8024db8:	b150      	cbz	r0, 8024dd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8024dba:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024dbc:	5871      	ldr	r1, [r6, r1]
 8024dbe:	26ff      	movs	r6, #255	; 0xff
 8024dc0:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8024dc4:	9109      	str	r1, [sp, #36]	; 0x24
 8024dc6:	46b6      	mov	lr, r6
 8024dc8:	e6f5      	b.n	8024bb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8024dca:	26ff      	movs	r6, #255	; 0xff
 8024dcc:	46b1      	mov	r9, r6
 8024dce:	e6f2      	b.n	8024bb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8024dd0:	26ff      	movs	r6, #255	; 0xff
 8024dd2:	46b1      	mov	r9, r6
 8024dd4:	e7f7      	b.n	8024dc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8024dd6:	f805 0c03 	strb.w	r0, [r5, #-3]
 8024dda:	f805 1c02 	strb.w	r1, [r5, #-2]
 8024dde:	e7df      	b.n	8024da0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8024de0:	b017      	add	sp, #92	; 0x5c
 8024de2:	ecbd 8b08 	vpop	{d8-d11}
 8024de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024dec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8024dec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024df0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8024df4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024df8:	2800      	cmp	r0, #0
 8024dfa:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8024dfe:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8024e02:	fb0c 0e03 	mla	lr, ip, r3, r0
 8024e06:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8024e0a:	db6b      	blt.n	8024ee4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024e0c:	4580      	cmp	r8, r0
 8024e0e:	dd69      	ble.n	8024ee4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024e10:	f1bc 0f00 	cmp.w	ip, #0
 8024e14:	db66      	blt.n	8024ee4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024e16:	45e1      	cmp	r9, ip
 8024e18:	dd64      	ble.n	8024ee4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024e1a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024e1e:	f01e 0f01 	tst.w	lr, #1
 8024e22:	5d16      	ldrb	r6, [r2, r4]
 8024e24:	bf0c      	ite	eq
 8024e26:	f006 060f 	andeq.w	r6, r6, #15
 8024e2a:	1136      	asrne	r6, r6, #4
 8024e2c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024e30:	b2f6      	uxtb	r6, r6
 8024e32:	f110 0a01 	adds.w	sl, r0, #1
 8024e36:	d457      	bmi.n	8024ee8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8024e38:	45d0      	cmp	r8, sl
 8024e3a:	dd55      	ble.n	8024ee8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8024e3c:	f1bc 0f00 	cmp.w	ip, #0
 8024e40:	db52      	blt.n	8024ee8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8024e42:	45e1      	cmp	r9, ip
 8024e44:	dd50      	ble.n	8024ee8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8024e46:	2f00      	cmp	r7, #0
 8024e48:	f000 80ac 	beq.w	8024fa4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8024e4c:	f10e 0b01 	add.w	fp, lr, #1
 8024e50:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8024e54:	f01b 0f01 	tst.w	fp, #1
 8024e58:	5d14      	ldrb	r4, [r2, r4]
 8024e5a:	bf0c      	ite	eq
 8024e5c:	f004 040f 	andeq.w	r4, r4, #15
 8024e60:	1124      	asrne	r4, r4, #4
 8024e62:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024e66:	b2e4      	uxtb	r4, r4
 8024e68:	2d00      	cmp	r5, #0
 8024e6a:	f000 8096 	beq.w	8024f9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8024e6e:	2800      	cmp	r0, #0
 8024e70:	f10c 0c01 	add.w	ip, ip, #1
 8024e74:	db3c      	blt.n	8024ef0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024e76:	4580      	cmp	r8, r0
 8024e78:	dd3a      	ble.n	8024ef0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024e7a:	f1bc 0f00 	cmp.w	ip, #0
 8024e7e:	db37      	blt.n	8024ef0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024e80:	45e1      	cmp	r9, ip
 8024e82:	dd35      	ble.n	8024ef0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024e84:	eb03 0b0e 	add.w	fp, r3, lr
 8024e88:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8024e8c:	f01b 0f01 	tst.w	fp, #1
 8024e90:	5c10      	ldrb	r0, [r2, r0]
 8024e92:	bf0c      	ite	eq
 8024e94:	f000 000f 	andeq.w	r0, r0, #15
 8024e98:	1100      	asrne	r0, r0, #4
 8024e9a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024e9e:	b2c0      	uxtb	r0, r0
 8024ea0:	f1ba 0f00 	cmp.w	sl, #0
 8024ea4:	db26      	blt.n	8024ef4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024ea6:	45d0      	cmp	r8, sl
 8024ea8:	dd24      	ble.n	8024ef4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024eaa:	f1bc 0f00 	cmp.w	ip, #0
 8024eae:	db21      	blt.n	8024ef4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024eb0:	45e1      	cmp	r9, ip
 8024eb2:	dd1f      	ble.n	8024ef4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024eb4:	b307      	cbz	r7, 8024ef8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8024eb6:	3301      	adds	r3, #1
 8024eb8:	449e      	add	lr, r3
 8024eba:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024ebe:	f01e 0f01 	tst.w	lr, #1
 8024ec2:	5cd3      	ldrb	r3, [r2, r3]
 8024ec4:	bf0c      	ite	eq
 8024ec6:	f003 030f 	andeq.w	r3, r3, #15
 8024eca:	111b      	asrne	r3, r3, #4
 8024ecc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024ed0:	b2db      	uxtb	r3, r3
 8024ed2:	2f0f      	cmp	r7, #15
 8024ed4:	d911      	bls.n	8024efa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8024ed6:	4b35      	ldr	r3, [pc, #212]	; (8024fac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8024ed8:	f240 11a5 	movw	r1, #421	; 0x1a5
 8024edc:	4a34      	ldr	r2, [pc, #208]	; (8024fb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8024ede:	4835      	ldr	r0, [pc, #212]	; (8024fb4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8024ee0:	f002 fb64 	bl	80275ac <__assert_func>
 8024ee4:	2600      	movs	r6, #0
 8024ee6:	e7a4      	b.n	8024e32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8024ee8:	2400      	movs	r4, #0
 8024eea:	e7bd      	b.n	8024e68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8024eec:	463c      	mov	r4, r7
 8024eee:	e7be      	b.n	8024e6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8024ef0:	2000      	movs	r0, #0
 8024ef2:	e7d5      	b.n	8024ea0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8024ef4:	2300      	movs	r3, #0
 8024ef6:	e7ec      	b.n	8024ed2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8024ef8:	463b      	mov	r3, r7
 8024efa:	2d0f      	cmp	r5, #15
 8024efc:	d8eb      	bhi.n	8024ed6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8024efe:	b2bf      	uxth	r7, r7
 8024f00:	b2ad      	uxth	r5, r5
 8024f02:	fb07 f205 	mul.w	r2, r7, r5
 8024f06:	013f      	lsls	r7, r7, #4
 8024f08:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8024f0c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8024f10:	1abf      	subs	r7, r7, r2
 8024f12:	b2ad      	uxth	r5, r5
 8024f14:	b2bf      	uxth	r7, r7
 8024f16:	ebac 0c05 	sub.w	ip, ip, r5
 8024f1a:	437c      	muls	r4, r7
 8024f1c:	fa1f fc8c 	uxth.w	ip, ip
 8024f20:	fb06 440c 	mla	r4, r6, ip, r4
 8024f24:	fb05 4400 	mla	r4, r5, r0, r4
 8024f28:	fb02 4203 	mla	r2, r2, r3, r4
 8024f2c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024f30:	b38a      	cbz	r2, 8024f96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8024f32:	4b21      	ldr	r3, [pc, #132]	; (8024fb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8024f34:	681c      	ldr	r4, [r3, #0]
 8024f36:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8024f3a:	b2e5      	uxtb	r5, r4
 8024f3c:	4353      	muls	r3, r2
 8024f3e:	1c5a      	adds	r2, r3, #1
 8024f40:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024f44:	1212      	asrs	r2, r2, #8
 8024f46:	b290      	uxth	r0, r2
 8024f48:	43d2      	mvns	r2, r2
 8024f4a:	fb15 f500 	smulbb	r5, r5, r0
 8024f4e:	b2d3      	uxtb	r3, r2
 8024f50:	780a      	ldrb	r2, [r1, #0]
 8024f52:	fb02 5203 	mla	r2, r2, r3, r5
 8024f56:	b292      	uxth	r2, r2
 8024f58:	1c55      	adds	r5, r2, #1
 8024f5a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8024f5e:	784d      	ldrb	r5, [r1, #1]
 8024f60:	fb15 f503 	smulbb	r5, r5, r3
 8024f64:	1212      	asrs	r2, r2, #8
 8024f66:	700a      	strb	r2, [r1, #0]
 8024f68:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8024f6c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8024f70:	fb02 5200 	mla	r2, r2, r0, r5
 8024f74:	b292      	uxth	r2, r2
 8024f76:	1c55      	adds	r5, r2, #1
 8024f78:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8024f7c:	1212      	asrs	r2, r2, #8
 8024f7e:	704a      	strb	r2, [r1, #1]
 8024f80:	788a      	ldrb	r2, [r1, #2]
 8024f82:	fb12 f303 	smulbb	r3, r2, r3
 8024f86:	fb04 3300 	mla	r3, r4, r0, r3
 8024f8a:	b29b      	uxth	r3, r3
 8024f8c:	1c5a      	adds	r2, r3, #1
 8024f8e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024f92:	121b      	asrs	r3, r3, #8
 8024f94:	708b      	strb	r3, [r1, #2]
 8024f96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f9a:	2f0f      	cmp	r7, #15
 8024f9c:	d89b      	bhi.n	8024ed6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8024f9e:	462b      	mov	r3, r5
 8024fa0:	4628      	mov	r0, r5
 8024fa2:	e7ac      	b.n	8024efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8024fa4:	2d00      	cmp	r5, #0
 8024fa6:	d1a1      	bne.n	8024eec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8024fa8:	462c      	mov	r4, r5
 8024faa:	e7f8      	b.n	8024f9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8024fac:	0802c715 	.word	0x0802c715
 8024fb0:	0802cc0a 	.word	0x0802cc0a
 8024fb4:	0802c7de 	.word	0x0802c7de
 8024fb8:	2000b33c 	.word	0x2000b33c

08024fbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fc0:	ed2d 8b08 	vpush	{d8-d11}
 8024fc4:	b097      	sub	sp, #92	; 0x5c
 8024fc6:	eeb0 aa40 	vmov.f32	s20, s0
 8024fca:	eef0 9a60 	vmov.f32	s19, s1
 8024fce:	9308      	str	r3, [sp, #32]
 8024fd0:	eeb0 9a41 	vmov.f32	s18, s2
 8024fd4:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8024fd8:	eeb0 8a62 	vmov.f32	s16, s5
 8024fdc:	9214      	str	r2, [sp, #80]	; 0x50
 8024fde:	eef0 8a43 	vmov.f32	s17, s6
 8024fe2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024fe4:	eef0 ba44 	vmov.f32	s23, s8
 8024fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8024fea:	eeb0 ba64 	vmov.f32	s22, s9
 8024fee:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8024ff2:	eef0 aa45 	vmov.f32	s21, s10
 8024ff6:	9015      	str	r0, [sp, #84]	; 0x54
 8024ff8:	910c      	str	r1, [sp, #48]	; 0x30
 8024ffa:	930e      	str	r3, [sp, #56]	; 0x38
 8024ffc:	6850      	ldr	r0, [r2, #4]
 8024ffe:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8025002:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025006:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802500a:	fb00 1803 	mla	r8, r0, r3, r1
 802500e:	6813      	ldr	r3, [r2, #0]
 8025010:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025014:	4498      	add	r8, r3
 8025016:	f10b 0301 	add.w	r3, fp, #1
 802501a:	f023 0301 	bic.w	r3, r3, #1
 802501e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025020:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025022:	681f      	ldr	r7, [r3, #0]
 8025024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025026:	2b00      	cmp	r3, #0
 8025028:	dc03      	bgt.n	8025032 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802502a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802502c:	2b00      	cmp	r3, #0
 802502e:	f340 8238 	ble.w	80254a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8025032:	9b08      	ldr	r3, [sp, #32]
 8025034:	2b00      	cmp	r3, #0
 8025036:	f340 810c 	ble.w	8025252 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802503a:	142a      	asrs	r2, r5, #16
 802503c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025040:	d42c      	bmi.n	802509c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8025042:	1c51      	adds	r1, r2, #1
 8025044:	458b      	cmp	fp, r1
 8025046:	dd2c      	ble.n	80250a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025048:	2b00      	cmp	r3, #0
 802504a:	db2a      	blt.n	80250a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802504c:	1c59      	adds	r1, r3, #1
 802504e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025050:	4288      	cmp	r0, r1
 8025052:	dd26      	ble.n	80250a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025054:	9b08      	ldr	r3, [sp, #32]
 8025056:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025058:	3b01      	subs	r3, #1
 802505a:	fb02 5203 	mla	r2, r2, r3, r5
 802505e:	1412      	asrs	r2, r2, #16
 8025060:	d429      	bmi.n	80250b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025062:	3201      	adds	r2, #1
 8025064:	4593      	cmp	fp, r2
 8025066:	dd26      	ble.n	80250b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025068:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802506a:	fb02 6303 	mla	r3, r2, r3, r6
 802506e:	141b      	asrs	r3, r3, #16
 8025070:	d421      	bmi.n	80250b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025072:	3301      	adds	r3, #1
 8025074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025076:	429a      	cmp	r2, r3
 8025078:	dd1d      	ble.n	80250b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802507a:	f108 0e03 	add.w	lr, r8, #3
 802507e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025082:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8025086:	f1b9 0f00 	cmp.w	r9, #0
 802508a:	f300 814f 	bgt.w	802532c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 802508e:	9b08      	ldr	r3, [sp, #32]
 8025090:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025094:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025098:	44a0      	add	r8, r4
 802509a:	e0dc      	b.n	8025256 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 802509c:	1c51      	adds	r1, r2, #1
 802509e:	f040 80ce 	bne.w	802523e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80250a2:	4593      	cmp	fp, r2
 80250a4:	f340 80cb 	ble.w	802523e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80250a8:	1c5a      	adds	r2, r3, #1
 80250aa:	f2c0 80c8 	blt.w	802523e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80250ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80250b0:	4293      	cmp	r3, r2
 80250b2:	f280 80c4 	bge.w	802523e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80250b6:	9b08      	ldr	r3, [sp, #32]
 80250b8:	46c1      	mov	r9, r8
 80250ba:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80250be:	930d      	str	r3, [sp, #52]	; 0x34
 80250c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80250c2:	2b00      	cmp	r3, #0
 80250c4:	dde3      	ble.n	802508e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80250c6:	1428      	asrs	r0, r5, #16
 80250c8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80250cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80250d0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80250d4:	f100 8111 	bmi.w	80252fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 80250d8:	f100 0c01 	add.w	ip, r0, #1
 80250dc:	45e3      	cmp	fp, ip
 80250de:	f340 810e 	ble.w	80252fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80250e2:	2b00      	cmp	r3, #0
 80250e4:	f2c0 810b 	blt.w	80252fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80250e8:	f103 0c01 	add.w	ip, r3, #1
 80250ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80250ee:	4564      	cmp	r4, ip
 80250f0:	f340 8105 	ble.w	80252fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80250f4:	fb03 030a 	mla	r3, r3, sl, r0
 80250f8:	0858      	lsrs	r0, r3, #1
 80250fa:	07dc      	lsls	r4, r3, #31
 80250fc:	5c38      	ldrb	r0, [r7, r0]
 80250fe:	bf54      	ite	pl
 8025100:	f000 000f 	andpl.w	r0, r0, #15
 8025104:	1100      	asrmi	r0, r0, #4
 8025106:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802510a:	b2c0      	uxtb	r0, r0
 802510c:	2a00      	cmp	r2, #0
 802510e:	f000 80e1 	beq.w	80252d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8025112:	f103 0e01 	add.w	lr, r3, #1
 8025116:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802511a:	f01e 0f01 	tst.w	lr, #1
 802511e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025122:	bf0c      	ite	eq
 8025124:	f00c 0c0f 	andeq.w	ip, ip, #15
 8025128:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802512c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025130:	fa5f f48c 	uxtb.w	r4, ip
 8025134:	9410      	str	r4, [sp, #64]	; 0x40
 8025136:	b1f9      	cbz	r1, 8025178 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8025138:	4453      	add	r3, sl
 802513a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802513e:	07dc      	lsls	r4, r3, #31
 8025140:	f103 0301 	add.w	r3, r3, #1
 8025144:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025148:	bf54      	ite	pl
 802514a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802514e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025152:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025156:	fa5f f48c 	uxtb.w	r4, ip
 802515a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802515e:	940a      	str	r4, [sp, #40]	; 0x28
 8025160:	07dc      	lsls	r4, r3, #31
 8025162:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025166:	bf54      	ite	pl
 8025168:	f00c 030f 	andpl.w	r3, ip, #15
 802516c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8025170:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025174:	b2db      	uxtb	r3, r3
 8025176:	9311      	str	r3, [sp, #68]	; 0x44
 8025178:	b292      	uxth	r2, r2
 802517a:	b289      	uxth	r1, r1
 802517c:	0113      	lsls	r3, r2, #4
 802517e:	fb02 fc01 	mul.w	ip, r2, r1
 8025182:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025184:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025188:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 802518c:	eba3 030c 	sub.w	r3, r3, ip
 8025190:	b289      	uxth	r1, r1
 8025192:	b29b      	uxth	r3, r3
 8025194:	ebae 0e01 	sub.w	lr, lr, r1
 8025198:	4353      	muls	r3, r2
 802519a:	fa1f fe8e 	uxth.w	lr, lr
 802519e:	fb00 320e 	mla	r2, r0, lr, r3
 80251a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80251a4:	fb01 2203 	mla	r2, r1, r3, r2
 80251a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80251aa:	fb0c 2203 	mla	r2, ip, r3, r2
 80251ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80251b2:	2a00      	cmp	r2, #0
 80251b4:	d039      	beq.n	802522a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80251b6:	4bbd      	ldr	r3, [pc, #756]	; (80254ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80251b8:	6819      	ldr	r1, [r3, #0]
 80251ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80251bc:	fa5f fc81 	uxtb.w	ip, r1
 80251c0:	435a      	muls	r2, r3
 80251c2:	1c53      	adds	r3, r2, #1
 80251c4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80251c8:	1212      	asrs	r2, r2, #8
 80251ca:	b290      	uxth	r0, r2
 80251cc:	43d2      	mvns	r2, r2
 80251ce:	fb1c fc00 	smulbb	ip, ip, r0
 80251d2:	b2d3      	uxtb	r3, r2
 80251d4:	f899 2000 	ldrb.w	r2, [r9]
 80251d8:	fb02 c203 	mla	r2, r2, r3, ip
 80251dc:	b292      	uxth	r2, r2
 80251de:	f102 0c01 	add.w	ip, r2, #1
 80251e2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80251e6:	f899 c001 	ldrb.w	ip, [r9, #1]
 80251ea:	fb1c fc03 	smulbb	ip, ip, r3
 80251ee:	1212      	asrs	r2, r2, #8
 80251f0:	f889 2000 	strb.w	r2, [r9]
 80251f4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80251f8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80251fc:	fb02 c200 	mla	r2, r2, r0, ip
 8025200:	b292      	uxth	r2, r2
 8025202:	f102 0c01 	add.w	ip, r2, #1
 8025206:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802520a:	1212      	asrs	r2, r2, #8
 802520c:	f889 2001 	strb.w	r2, [r9, #1]
 8025210:	f899 2002 	ldrb.w	r2, [r9, #2]
 8025214:	fb12 f303 	smulbb	r3, r2, r3
 8025218:	fb01 3300 	mla	r3, r1, r0, r3
 802521c:	b29b      	uxth	r3, r3
 802521e:	1c5a      	adds	r2, r3, #1
 8025220:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025224:	121b      	asrs	r3, r3, #8
 8025226:	f889 3002 	strb.w	r3, [r9, #2]
 802522a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802522c:	f109 0903 	add.w	r9, r9, #3
 8025230:	441d      	add	r5, r3
 8025232:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025234:	441e      	add	r6, r3
 8025236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025238:	3b01      	subs	r3, #1
 802523a:	930d      	str	r3, [sp, #52]	; 0x34
 802523c:	e740      	b.n	80250c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802523e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025240:	f108 0803 	add.w	r8, r8, #3
 8025244:	441d      	add	r5, r3
 8025246:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025248:	441e      	add	r6, r3
 802524a:	9b08      	ldr	r3, [sp, #32]
 802524c:	3b01      	subs	r3, #1
 802524e:	9308      	str	r3, [sp, #32]
 8025250:	e6ef      	b.n	8025032 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8025252:	f47f aeff 	bne.w	8025054 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8025256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025258:	2b00      	cmp	r3, #0
 802525a:	f340 8122 	ble.w	80254a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802525e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025262:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025264:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025268:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802526c:	eef0 6a48 	vmov.f32	s13, s16
 8025270:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025274:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025278:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802527c:	ee16 5a90 	vmov	r5, s13
 8025280:	eef0 6a68 	vmov.f32	s13, s17
 8025284:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025288:	ee16 6a90 	vmov	r6, s13
 802528c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025290:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025294:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025298:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802529c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80252a0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80252a4:	ee18 2a10 	vmov	r2, s16
 80252a8:	eeb0 8a47 	vmov.f32	s16, s14
 80252ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80252b0:	ee18 2a90 	vmov	r2, s17
 80252b4:	932b      	str	r3, [sp, #172]	; 0xac
 80252b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80252b8:	eef0 8a67 	vmov.f32	s17, s15
 80252bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80252c0:	932c      	str	r3, [sp, #176]	; 0xb0
 80252c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80252c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80252c6:	3b01      	subs	r3, #1
 80252c8:	930c      	str	r3, [sp, #48]	; 0x30
 80252ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80252cc:	bf08      	it	eq
 80252ce:	4613      	moveq	r3, r2
 80252d0:	9308      	str	r3, [sp, #32]
 80252d2:	e6a7      	b.n	8025024 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80252d4:	2900      	cmp	r1, #0
 80252d6:	f43f af4f 	beq.w	8025178 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80252da:	4453      	add	r3, sl
 80252dc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80252e0:	07db      	lsls	r3, r3, #31
 80252e2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80252e6:	bf54      	ite	pl
 80252e8:	f00c 030f 	andpl.w	r3, ip, #15
 80252ec:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80252f0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80252f4:	b2db      	uxtb	r3, r3
 80252f6:	930a      	str	r3, [sp, #40]	; 0x28
 80252f8:	e73e      	b.n	8025178 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80252fa:	1c44      	adds	r4, r0, #1
 80252fc:	d195      	bne.n	802522a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80252fe:	4583      	cmp	fp, r0
 8025300:	dd93      	ble.n	802522a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025302:	1c5c      	adds	r4, r3, #1
 8025304:	db91      	blt.n	802522a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025306:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025308:	429c      	cmp	r4, r3
 802530a:	dd8e      	ble.n	802522a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802530c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802530e:	9002      	str	r0, [sp, #8]
 8025310:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025312:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8025316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025318:	463a      	mov	r2, r7
 802531a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802531e:	e9cd b300 	strd	fp, r3, [sp]
 8025322:	4649      	mov	r1, r9
 8025324:	4653      	mov	r3, sl
 8025326:	f7ff fd61 	bl	8024dec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802532a:	e77e      	b.n	802522a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802532c:	142a      	asrs	r2, r5, #16
 802532e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025332:	1433      	asrs	r3, r6, #16
 8025334:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025338:	fb0a 2303 	mla	r3, sl, r3, r2
 802533c:	085a      	lsrs	r2, r3, #1
 802533e:	07dc      	lsls	r4, r3, #31
 8025340:	5cba      	ldrb	r2, [r7, r2]
 8025342:	bf54      	ite	pl
 8025344:	f002 020f 	andpl.w	r2, r2, #15
 8025348:	1112      	asrmi	r2, r2, #4
 802534a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802534e:	b2d2      	uxtb	r2, r2
 8025350:	2900      	cmp	r1, #0
 8025352:	f000 8093 	beq.w	802547c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8025356:	1c5c      	adds	r4, r3, #1
 8025358:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 802535c:	07e4      	lsls	r4, r4, #31
 802535e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025362:	bf54      	ite	pl
 8025364:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025368:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802536c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025370:	fa5f f48c 	uxtb.w	r4, ip
 8025374:	9412      	str	r4, [sp, #72]	; 0x48
 8025376:	b300      	cbz	r0, 80253ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8025378:	4453      	add	r3, sl
 802537a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802537e:	07dc      	lsls	r4, r3, #31
 8025380:	f103 0301 	add.w	r3, r3, #1
 8025384:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025388:	bf54      	ite	pl
 802538a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802538e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025392:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025396:	fa5f f48c 	uxtb.w	r4, ip
 802539a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802539e:	940b      	str	r4, [sp, #44]	; 0x2c
 80253a0:	07dc      	lsls	r4, r3, #31
 80253a2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80253a6:	bf54      	ite	pl
 80253a8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80253ac:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80253b0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80253b4:	fa5f f38c 	uxtb.w	r3, ip
 80253b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80253ba:	b289      	uxth	r1, r1
 80253bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80253be:	b280      	uxth	r0, r0
 80253c0:	fb01 f300 	mul.w	r3, r1, r0
 80253c4:	0109      	lsls	r1, r1, #4
 80253c6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80253ca:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80253ce:	1ac9      	subs	r1, r1, r3
 80253d0:	b280      	uxth	r0, r0
 80253d2:	b289      	uxth	r1, r1
 80253d4:	ebac 0c00 	sub.w	ip, ip, r0
 80253d8:	4361      	muls	r1, r4
 80253da:	fa1f fc8c 	uxth.w	ip, ip
 80253de:	fb02 120c 	mla	r2, r2, ip, r1
 80253e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80253e4:	fb00 2001 	mla	r0, r0, r1, r2
 80253e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80253ea:	fb03 0302 	mla	r3, r3, r2, r0
 80253ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80253f2:	2b00      	cmp	r3, #0
 80253f4:	d039      	beq.n	802546a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 80253f6:	4a2d      	ldr	r2, [pc, #180]	; (80254ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80253f8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80253fc:	6810      	ldr	r0, [r2, #0]
 80253fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025400:	fa5f fc80 	uxtb.w	ip, r0
 8025404:	4353      	muls	r3, r2
 8025406:	1c5a      	adds	r2, r3, #1
 8025408:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802540c:	121b      	asrs	r3, r3, #8
 802540e:	b29a      	uxth	r2, r3
 8025410:	43db      	mvns	r3, r3
 8025412:	fb1c fc02 	smulbb	ip, ip, r2
 8025416:	b2db      	uxtb	r3, r3
 8025418:	fb01 c103 	mla	r1, r1, r3, ip
 802541c:	b289      	uxth	r1, r1
 802541e:	f101 0c01 	add.w	ip, r1, #1
 8025422:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8025426:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802542a:	fb1c fc03 	smulbb	ip, ip, r3
 802542e:	1209      	asrs	r1, r1, #8
 8025430:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8025434:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8025438:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802543c:	fb01 c102 	mla	r1, r1, r2, ip
 8025440:	b289      	uxth	r1, r1
 8025442:	f101 0c01 	add.w	ip, r1, #1
 8025446:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802544a:	1209      	asrs	r1, r1, #8
 802544c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8025450:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8025454:	fb11 f303 	smulbb	r3, r1, r3
 8025458:	fb00 3002 	mla	r0, r0, r2, r3
 802545c:	b280      	uxth	r0, r0
 802545e:	1c42      	adds	r2, r0, #1
 8025460:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025464:	1200      	asrs	r0, r0, #8
 8025466:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802546a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802546c:	f10e 0e03 	add.w	lr, lr, #3
 8025470:	f109 39ff 	add.w	r9, r9, #4294967295
 8025474:	441d      	add	r5, r3
 8025476:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025478:	441e      	add	r6, r3
 802547a:	e604      	b.n	8025086 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 802547c:	2800      	cmp	r0, #0
 802547e:	d09c      	beq.n	80253ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8025480:	4453      	add	r3, sl
 8025482:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025486:	07db      	lsls	r3, r3, #31
 8025488:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802548c:	bf54      	ite	pl
 802548e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025492:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025496:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802549a:	fa5f f38c 	uxtb.w	r3, ip
 802549e:	930b      	str	r3, [sp, #44]	; 0x2c
 80254a0:	e78b      	b.n	80253ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80254a2:	b017      	add	sp, #92	; 0x5c
 80254a4:	ecbd 8b08 	vpop	{d8-d11}
 80254a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80254ac:	2000b33c 	.word	0x2000b33c

080254b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80254b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254b4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80254b8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80254bc:	2800      	cmp	r0, #0
 80254be:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80254c2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80254c6:	fb0c 0e03 	mla	lr, ip, r3, r0
 80254ca:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80254ce:	db6b      	blt.n	80255a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80254d0:	4580      	cmp	r8, r0
 80254d2:	dd69      	ble.n	80255a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80254d4:	f1bc 0f00 	cmp.w	ip, #0
 80254d8:	db66      	blt.n	80255a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80254da:	45e1      	cmp	r9, ip
 80254dc:	dd64      	ble.n	80255a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80254de:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80254e2:	f01e 0f01 	tst.w	lr, #1
 80254e6:	5d16      	ldrb	r6, [r2, r4]
 80254e8:	bf0c      	ite	eq
 80254ea:	f006 060f 	andeq.w	r6, r6, #15
 80254ee:	1136      	asrne	r6, r6, #4
 80254f0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80254f4:	b2f6      	uxtb	r6, r6
 80254f6:	f110 0a01 	adds.w	sl, r0, #1
 80254fa:	d457      	bmi.n	80255ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80254fc:	45d0      	cmp	r8, sl
 80254fe:	dd55      	ble.n	80255ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025500:	f1bc 0f00 	cmp.w	ip, #0
 8025504:	db52      	blt.n	80255ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025506:	45e1      	cmp	r9, ip
 8025508:	dd50      	ble.n	80255ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802550a:	2f00      	cmp	r7, #0
 802550c:	f000 80a5 	beq.w	802565a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8025510:	f10e 0b01 	add.w	fp, lr, #1
 8025514:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8025518:	f01b 0f01 	tst.w	fp, #1
 802551c:	5d14      	ldrb	r4, [r2, r4]
 802551e:	bf0c      	ite	eq
 8025520:	f004 040f 	andeq.w	r4, r4, #15
 8025524:	1124      	asrne	r4, r4, #4
 8025526:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802552a:	b2e4      	uxtb	r4, r4
 802552c:	2d00      	cmp	r5, #0
 802552e:	f000 808f 	beq.w	8025650 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8025532:	2800      	cmp	r0, #0
 8025534:	f10c 0c01 	add.w	ip, ip, #1
 8025538:	db3c      	blt.n	80255b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802553a:	4580      	cmp	r8, r0
 802553c:	dd3a      	ble.n	80255b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802553e:	f1bc 0f00 	cmp.w	ip, #0
 8025542:	db37      	blt.n	80255b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8025544:	45e1      	cmp	r9, ip
 8025546:	dd35      	ble.n	80255b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8025548:	eb03 0b0e 	add.w	fp, r3, lr
 802554c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8025550:	f01b 0f01 	tst.w	fp, #1
 8025554:	5c10      	ldrb	r0, [r2, r0]
 8025556:	bf0c      	ite	eq
 8025558:	f000 000f 	andeq.w	r0, r0, #15
 802555c:	1100      	asrne	r0, r0, #4
 802555e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025562:	b2c0      	uxtb	r0, r0
 8025564:	f1ba 0f00 	cmp.w	sl, #0
 8025568:	db26      	blt.n	80255b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802556a:	45d0      	cmp	r8, sl
 802556c:	dd24      	ble.n	80255b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802556e:	f1bc 0f00 	cmp.w	ip, #0
 8025572:	db21      	blt.n	80255b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8025574:	45e1      	cmp	r9, ip
 8025576:	dd1f      	ble.n	80255b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8025578:	b307      	cbz	r7, 80255bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 802557a:	3301      	adds	r3, #1
 802557c:	449e      	add	lr, r3
 802557e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025582:	f01e 0f01 	tst.w	lr, #1
 8025586:	5cd3      	ldrb	r3, [r2, r3]
 8025588:	bf0c      	ite	eq
 802558a:	f003 030f 	andeq.w	r3, r3, #15
 802558e:	111b      	asrne	r3, r3, #4
 8025590:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025594:	b2db      	uxtb	r3, r3
 8025596:	2f0f      	cmp	r7, #15
 8025598:	d911      	bls.n	80255be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 802559a:	4b32      	ldr	r3, [pc, #200]	; (8025664 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 802559c:	f240 11a5 	movw	r1, #421	; 0x1a5
 80255a0:	4a31      	ldr	r2, [pc, #196]	; (8025668 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80255a2:	4832      	ldr	r0, [pc, #200]	; (802566c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80255a4:	f002 f802 	bl	80275ac <__assert_func>
 80255a8:	2600      	movs	r6, #0
 80255aa:	e7a4      	b.n	80254f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80255ac:	2400      	movs	r4, #0
 80255ae:	e7bd      	b.n	802552c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80255b0:	463c      	mov	r4, r7
 80255b2:	e7be      	b.n	8025532 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80255b4:	2000      	movs	r0, #0
 80255b6:	e7d5      	b.n	8025564 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80255b8:	2300      	movs	r3, #0
 80255ba:	e7ec      	b.n	8025596 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80255bc:	463b      	mov	r3, r7
 80255be:	2d0f      	cmp	r5, #15
 80255c0:	d8eb      	bhi.n	802559a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80255c2:	b2bf      	uxth	r7, r7
 80255c4:	b2ad      	uxth	r5, r5
 80255c6:	fb07 f205 	mul.w	r2, r7, r5
 80255ca:	013f      	lsls	r7, r7, #4
 80255cc:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80255d0:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80255d4:	1abf      	subs	r7, r7, r2
 80255d6:	b2ad      	uxth	r5, r5
 80255d8:	b2bf      	uxth	r7, r7
 80255da:	ebac 0c05 	sub.w	ip, ip, r5
 80255de:	437c      	muls	r4, r7
 80255e0:	fa1f fc8c 	uxth.w	ip, ip
 80255e4:	fb06 440c 	mla	r4, r6, ip, r4
 80255e8:	fb05 4400 	mla	r4, r5, r0, r4
 80255ec:	fb02 4303 	mla	r3, r2, r3, r4
 80255f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80255f4:	b353      	cbz	r3, 802564c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 80255f6:	4a1e      	ldr	r2, [pc, #120]	; (8025670 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 80255f8:	7808      	ldrb	r0, [r1, #0]
 80255fa:	6814      	ldr	r4, [r2, #0]
 80255fc:	b29a      	uxth	r2, r3
 80255fe:	43db      	mvns	r3, r3
 8025600:	b2e5      	uxtb	r5, r4
 8025602:	b2db      	uxtb	r3, r3
 8025604:	fb15 f502 	smulbb	r5, r5, r2
 8025608:	fb00 5003 	mla	r0, r0, r3, r5
 802560c:	b280      	uxth	r0, r0
 802560e:	1c45      	adds	r5, r0, #1
 8025610:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025614:	784d      	ldrb	r5, [r1, #1]
 8025616:	fb15 f503 	smulbb	r5, r5, r3
 802561a:	1200      	asrs	r0, r0, #8
 802561c:	7008      	strb	r0, [r1, #0]
 802561e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8025622:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025626:	fb00 5002 	mla	r0, r0, r2, r5
 802562a:	b280      	uxth	r0, r0
 802562c:	1c45      	adds	r5, r0, #1
 802562e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025632:	1200      	asrs	r0, r0, #8
 8025634:	7048      	strb	r0, [r1, #1]
 8025636:	7888      	ldrb	r0, [r1, #2]
 8025638:	fb10 f303 	smulbb	r3, r0, r3
 802563c:	fb04 3202 	mla	r2, r4, r2, r3
 8025640:	b292      	uxth	r2, r2
 8025642:	1c53      	adds	r3, r2, #1
 8025644:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025648:	1212      	asrs	r2, r2, #8
 802564a:	708a      	strb	r2, [r1, #2]
 802564c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025650:	2f0f      	cmp	r7, #15
 8025652:	d8a2      	bhi.n	802559a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8025654:	462b      	mov	r3, r5
 8025656:	4628      	mov	r0, r5
 8025658:	e7b3      	b.n	80255c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 802565a:	2d00      	cmp	r5, #0
 802565c:	d1a8      	bne.n	80255b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 802565e:	462c      	mov	r4, r5
 8025660:	e7f8      	b.n	8025654 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8025662:	bf00      	nop
 8025664:	0802c715 	.word	0x0802c715
 8025668:	0802cc0a 	.word	0x0802cc0a
 802566c:	0802c7de 	.word	0x0802c7de
 8025670:	2000b33c 	.word	0x2000b33c

08025674 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025678:	ed2d 8b08 	vpush	{d8-d11}
 802567c:	b095      	sub	sp, #84	; 0x54
 802567e:	461c      	mov	r4, r3
 8025680:	eeb0 aa40 	vmov.f32	s20, s0
 8025684:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8025688:	eef0 9a60 	vmov.f32	s19, s1
 802568c:	920e      	str	r2, [sp, #56]	; 0x38
 802568e:	eeb0 9a41 	vmov.f32	s18, s2
 8025692:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025694:	eeb0 8a62 	vmov.f32	s16, s5
 8025698:	9307      	str	r3, [sp, #28]
 802569a:	eef0 8a43 	vmov.f32	s17, s6
 802569e:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80256a2:	eef0 ba44 	vmov.f32	s23, s8
 80256a6:	9013      	str	r0, [sp, #76]	; 0x4c
 80256a8:	eeb0 ba64 	vmov.f32	s22, s9
 80256ac:	9109      	str	r1, [sp, #36]	; 0x24
 80256ae:	eef0 aa45 	vmov.f32	s21, s10
 80256b2:	9308      	str	r3, [sp, #32]
 80256b4:	6850      	ldr	r0, [r2, #4]
 80256b6:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80256ba:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80256be:	fb00 1803 	mla	r8, r0, r3, r1
 80256c2:	6813      	ldr	r3, [r2, #0]
 80256c4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80256c8:	4498      	add	r8, r3
 80256ca:	9b07      	ldr	r3, [sp, #28]
 80256cc:	3301      	adds	r3, #1
 80256ce:	f023 0301 	bic.w	r3, r3, #1
 80256d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80256d4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80256d6:	681f      	ldr	r7, [r3, #0]
 80256d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80256da:	2b00      	cmp	r3, #0
 80256dc:	dc03      	bgt.n	80256e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80256de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80256e0:	2b00      	cmp	r3, #0
 80256e2:	f340 8238 	ble.w	8025b56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80256e6:	2c00      	cmp	r4, #0
 80256e8:	f340 8109 	ble.w	80258fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 80256ec:	142a      	asrs	r2, r5, #16
 80256ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 80256f2:	d42b      	bmi.n	802574c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80256f4:	1c51      	adds	r1, r2, #1
 80256f6:	9807      	ldr	r0, [sp, #28]
 80256f8:	4288      	cmp	r0, r1
 80256fa:	dd2a      	ble.n	8025752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80256fc:	2b00      	cmp	r3, #0
 80256fe:	db28      	blt.n	8025752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8025700:	1c59      	adds	r1, r3, #1
 8025702:	9808      	ldr	r0, [sp, #32]
 8025704:	4288      	cmp	r0, r1
 8025706:	dd24      	ble.n	8025752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8025708:	1e63      	subs	r3, r4, #1
 802570a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802570c:	fb02 5203 	mla	r2, r2, r3, r5
 8025710:	1412      	asrs	r2, r2, #16
 8025712:	d429      	bmi.n	8025768 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8025714:	3201      	adds	r2, #1
 8025716:	9907      	ldr	r1, [sp, #28]
 8025718:	4291      	cmp	r1, r2
 802571a:	dd25      	ble.n	8025768 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802571c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802571e:	fb02 6303 	mla	r3, r2, r3, r6
 8025722:	141b      	asrs	r3, r3, #16
 8025724:	d420      	bmi.n	8025768 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8025726:	3301      	adds	r3, #1
 8025728:	9a08      	ldr	r2, [sp, #32]
 802572a:	429a      	cmp	r2, r3
 802572c:	dd1c      	ble.n	8025768 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802572e:	f108 0e03 	add.w	lr, r8, #3
 8025732:	46a1      	mov	r9, r4
 8025734:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8025738:	f1b9 0f00 	cmp.w	r9, #0
 802573c:	f300 8155 	bgt.w	80259ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8025740:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8025744:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025748:	44a0      	add	r8, r4
 802574a:	e0da      	b.n	8025902 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802574c:	1c50      	adds	r0, r2, #1
 802574e:	f040 80ce 	bne.w	80258ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8025752:	9907      	ldr	r1, [sp, #28]
 8025754:	4291      	cmp	r1, r2
 8025756:	f340 80ca 	ble.w	80258ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802575a:	1c59      	adds	r1, r3, #1
 802575c:	f2c0 80c7 	blt.w	80258ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8025760:	9a08      	ldr	r2, [sp, #32]
 8025762:	4293      	cmp	r3, r2
 8025764:	f280 80c3 	bge.w	80258ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8025768:	46a3      	mov	fp, r4
 802576a:	46c1      	mov	r9, r8
 802576c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8025770:	f1bb 0f00 	cmp.w	fp, #0
 8025774:	dde4      	ble.n	8025740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8025776:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802577a:	1428      	asrs	r0, r5, #16
 802577c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025780:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025784:	920a      	str	r2, [sp, #40]	; 0x28
 8025786:	f100 8116 	bmi.w	80259b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802578a:	f100 0c01 	add.w	ip, r0, #1
 802578e:	9a07      	ldr	r2, [sp, #28]
 8025790:	4562      	cmp	r2, ip
 8025792:	f340 8112 	ble.w	80259ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8025796:	2b00      	cmp	r3, #0
 8025798:	f2c0 810f 	blt.w	80259ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802579c:	f103 0c01 	add.w	ip, r3, #1
 80257a0:	9a08      	ldr	r2, [sp, #32]
 80257a2:	4562      	cmp	r2, ip
 80257a4:	f340 8109 	ble.w	80259ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80257a8:	fb03 030a 	mla	r3, r3, sl, r0
 80257ac:	0858      	lsrs	r0, r3, #1
 80257ae:	07da      	lsls	r2, r3, #31
 80257b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80257b2:	5c38      	ldrb	r0, [r7, r0]
 80257b4:	bf54      	ite	pl
 80257b6:	f000 000f 	andpl.w	r0, r0, #15
 80257ba:	1100      	asrmi	r0, r0, #4
 80257bc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80257c0:	b2c0      	uxtb	r0, r0
 80257c2:	2a00      	cmp	r2, #0
 80257c4:	f000 80dd 	beq.w	8025982 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 80257c8:	f103 0e01 	add.w	lr, r3, #1
 80257cc:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80257d0:	f01e 0f01 	tst.w	lr, #1
 80257d4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80257d8:	bf0c      	ite	eq
 80257da:	f00c 0c0f 	andeq.w	ip, ip, #15
 80257de:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80257e2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80257e6:	fa5f fc8c 	uxtb.w	ip, ip
 80257ea:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80257ee:	b301      	cbz	r1, 8025832 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80257f0:	4453      	add	r3, sl
 80257f2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80257f6:	07da      	lsls	r2, r3, #31
 80257f8:	f103 0301 	add.w	r3, r3, #1
 80257fc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025800:	bf54      	ite	pl
 8025802:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025806:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802580a:	07da      	lsls	r2, r3, #31
 802580c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025810:	fa5f fc8c 	uxtb.w	ip, ip
 8025814:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8025818:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802581c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025820:	bf54      	ite	pl
 8025822:	f00c 030f 	andpl.w	r3, ip, #15
 8025826:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802582a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802582e:	b2db      	uxtb	r3, r3
 8025830:	9310      	str	r3, [sp, #64]	; 0x40
 8025832:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8025836:	b289      	uxth	r1, r1
 8025838:	fb02 f301 	mul.w	r3, r2, r1
 802583c:	0112      	lsls	r2, r2, #4
 802583e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025842:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8025846:	1ad2      	subs	r2, r2, r3
 8025848:	fa1f fe81 	uxth.w	lr, r1
 802584c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802584e:	b292      	uxth	r2, r2
 8025850:	ebac 0c0e 	sub.w	ip, ip, lr
 8025854:	434a      	muls	r2, r1
 8025856:	fa1f fc8c 	uxth.w	ip, ip
 802585a:	fb00 200c 	mla	r0, r0, ip, r2
 802585e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025860:	fb0e 0002 	mla	r0, lr, r2, r0
 8025864:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025866:	fb03 0002 	mla	r0, r3, r2, r0
 802586a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802586e:	b3a8      	cbz	r0, 80258dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8025870:	4bbb      	ldr	r3, [pc, #748]	; (8025b60 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8025872:	28ff      	cmp	r0, #255	; 0xff
 8025874:	681b      	ldr	r3, [r3, #0]
 8025876:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 802587a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 802587e:	b2db      	uxtb	r3, r3
 8025880:	f000 8092 	beq.w	80259a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8025884:	b282      	uxth	r2, r0
 8025886:	43c0      	mvns	r0, r0
 8025888:	f899 e000 	ldrb.w	lr, [r9]
 802588c:	fb13 f302 	smulbb	r3, r3, r2
 8025890:	b2c0      	uxtb	r0, r0
 8025892:	fb11 f102 	smulbb	r1, r1, r2
 8025896:	fb0e 3300 	mla	r3, lr, r0, r3
 802589a:	fb1c f202 	smulbb	r2, ip, r2
 802589e:	b29b      	uxth	r3, r3
 80258a0:	f103 0e01 	add.w	lr, r3, #1
 80258a4:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80258a8:	121b      	asrs	r3, r3, #8
 80258aa:	f889 3000 	strb.w	r3, [r9]
 80258ae:	f899 3001 	ldrb.w	r3, [r9, #1]
 80258b2:	fb03 1100 	mla	r1, r3, r0, r1
 80258b6:	b289      	uxth	r1, r1
 80258b8:	1c4b      	adds	r3, r1, #1
 80258ba:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80258be:	f899 3002 	ldrb.w	r3, [r9, #2]
 80258c2:	fb03 2000 	mla	r0, r3, r0, r2
 80258c6:	1209      	asrs	r1, r1, #8
 80258c8:	b280      	uxth	r0, r0
 80258ca:	f889 1001 	strb.w	r1, [r9, #1]
 80258ce:	f100 0c01 	add.w	ip, r0, #1
 80258d2:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80258d6:	1200      	asrs	r0, r0, #8
 80258d8:	f889 0002 	strb.w	r0, [r9, #2]
 80258dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80258de:	f109 0903 	add.w	r9, r9, #3
 80258e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80258e6:	441d      	add	r5, r3
 80258e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80258ea:	441e      	add	r6, r3
 80258ec:	e740      	b.n	8025770 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80258ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80258f0:	3c01      	subs	r4, #1
 80258f2:	f108 0803 	add.w	r8, r8, #3
 80258f6:	441d      	add	r5, r3
 80258f8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80258fa:	441e      	add	r6, r3
 80258fc:	e6f3      	b.n	80256e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80258fe:	f47f af03 	bne.w	8025708 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8025902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025904:	2b00      	cmp	r3, #0
 8025906:	f340 8126 	ble.w	8025b56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802590a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802590e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025910:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025914:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025918:	eef0 6a48 	vmov.f32	s13, s16
 802591c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025920:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025924:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025928:	ee16 5a90 	vmov	r5, s13
 802592c:	eef0 6a68 	vmov.f32	s13, s17
 8025930:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025934:	ee16 6a90 	vmov	r6, s13
 8025938:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802593c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025940:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025944:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025948:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802594c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025950:	ee18 2a10 	vmov	r2, s16
 8025954:	eeb0 8a47 	vmov.f32	s16, s14
 8025958:	fb92 f3f3 	sdiv	r3, r2, r3
 802595c:	ee18 2a90 	vmov	r2, s17
 8025960:	9329      	str	r3, [sp, #164]	; 0xa4
 8025962:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025964:	eef0 8a67 	vmov.f32	s17, s15
 8025968:	fb92 f3f3 	sdiv	r3, r2, r3
 802596c:	932a      	str	r3, [sp, #168]	; 0xa8
 802596e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025972:	3b01      	subs	r3, #1
 8025974:	9309      	str	r3, [sp, #36]	; 0x24
 8025976:	bf08      	it	eq
 8025978:	4614      	moveq	r4, r2
 802597a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802597c:	bf18      	it	ne
 802597e:	461c      	movne	r4, r3
 8025980:	e6aa      	b.n	80256d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8025982:	2900      	cmp	r1, #0
 8025984:	f43f af55 	beq.w	8025832 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8025988:	4453      	add	r3, sl
 802598a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802598e:	07db      	lsls	r3, r3, #31
 8025990:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025994:	bf54      	ite	pl
 8025996:	f00c 030f 	andpl.w	r3, ip, #15
 802599a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802599e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80259a2:	b2db      	uxtb	r3, r3
 80259a4:	930c      	str	r3, [sp, #48]	; 0x30
 80259a6:	e744      	b.n	8025832 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80259a8:	f889 3000 	strb.w	r3, [r9]
 80259ac:	f889 1001 	strb.w	r1, [r9, #1]
 80259b0:	f889 c002 	strb.w	ip, [r9, #2]
 80259b4:	e792      	b.n	80258dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80259b6:	1c42      	adds	r2, r0, #1
 80259b8:	d190      	bne.n	80258dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80259ba:	9a07      	ldr	r2, [sp, #28]
 80259bc:	4282      	cmp	r2, r0
 80259be:	dd8d      	ble.n	80258dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80259c0:	1c5a      	adds	r2, r3, #1
 80259c2:	db8b      	blt.n	80258dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80259c4:	9a08      	ldr	r2, [sp, #32]
 80259c6:	429a      	cmp	r2, r3
 80259c8:	dd88      	ble.n	80258dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80259ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80259cc:	9105      	str	r1, [sp, #20]
 80259ce:	4649      	mov	r1, r9
 80259d0:	9002      	str	r0, [sp, #8]
 80259d2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80259d4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80259d8:	9b08      	ldr	r3, [sp, #32]
 80259da:	463a      	mov	r2, r7
 80259dc:	9301      	str	r3, [sp, #4]
 80259de:	9b07      	ldr	r3, [sp, #28]
 80259e0:	9300      	str	r3, [sp, #0]
 80259e2:	4653      	mov	r3, sl
 80259e4:	f7ff fd64 	bl	80254b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80259e8:	e778      	b.n	80258dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80259ea:	142a      	asrs	r2, r5, #16
 80259ec:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80259f0:	1433      	asrs	r3, r6, #16
 80259f2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80259f6:	fb0a 2303 	mla	r3, sl, r3, r2
 80259fa:	085a      	lsrs	r2, r3, #1
 80259fc:	07d9      	lsls	r1, r3, #31
 80259fe:	5cba      	ldrb	r2, [r7, r2]
 8025a00:	bf54      	ite	pl
 8025a02:	f002 020f 	andpl.w	r2, r2, #15
 8025a06:	1112      	asrmi	r2, r2, #4
 8025a08:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025a0c:	b2d2      	uxtb	r2, r2
 8025a0e:	2800      	cmp	r0, #0
 8025a10:	f000 808a 	beq.w	8025b28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8025a14:	f103 0b01 	add.w	fp, r3, #1
 8025a18:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8025a1c:	f01b 0f01 	tst.w	fp, #1
 8025a20:	5c79      	ldrb	r1, [r7, r1]
 8025a22:	bf0c      	ite	eq
 8025a24:	f001 010f 	andeq.w	r1, r1, #15
 8025a28:	1109      	asrne	r1, r1, #4
 8025a2a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025a2e:	b2c9      	uxtb	r1, r1
 8025a30:	9111      	str	r1, [sp, #68]	; 0x44
 8025a32:	f1bc 0f00 	cmp.w	ip, #0
 8025a36:	d019      	beq.n	8025a6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8025a38:	4453      	add	r3, sl
 8025a3a:	0859      	lsrs	r1, r3, #1
 8025a3c:	f013 0f01 	tst.w	r3, #1
 8025a40:	f103 0301 	add.w	r3, r3, #1
 8025a44:	5c79      	ldrb	r1, [r7, r1]
 8025a46:	bf0c      	ite	eq
 8025a48:	f001 010f 	andeq.w	r1, r1, #15
 8025a4c:	1109      	asrne	r1, r1, #4
 8025a4e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025a52:	b2c9      	uxtb	r1, r1
 8025a54:	910d      	str	r1, [sp, #52]	; 0x34
 8025a56:	0859      	lsrs	r1, r3, #1
 8025a58:	07db      	lsls	r3, r3, #31
 8025a5a:	5c79      	ldrb	r1, [r7, r1]
 8025a5c:	bf54      	ite	pl
 8025a5e:	f001 010f 	andpl.w	r1, r1, #15
 8025a62:	1109      	asrmi	r1, r1, #4
 8025a64:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025a68:	b2c9      	uxtb	r1, r1
 8025a6a:	9112      	str	r1, [sp, #72]	; 0x48
 8025a6c:	b280      	uxth	r0, r0
 8025a6e:	fa1f fc8c 	uxth.w	ip, ip
 8025a72:	fb00 f30c 	mul.w	r3, r0, ip
 8025a76:	0100      	lsls	r0, r0, #4
 8025a78:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8025a7c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8025a80:	1ac0      	subs	r0, r0, r3
 8025a82:	fa1f fc8c 	uxth.w	ip, ip
 8025a86:	b280      	uxth	r0, r0
 8025a88:	eba1 010c 	sub.w	r1, r1, ip
 8025a8c:	fa1f fb81 	uxth.w	fp, r1
 8025a90:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025a92:	4348      	muls	r0, r1
 8025a94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025a96:	fb02 020b 	mla	r2, r2, fp, r0
 8025a9a:	fb0c 2c01 	mla	ip, ip, r1, r2
 8025a9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025aa0:	fb03 c302 	mla	r3, r3, r2, ip
 8025aa4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025aa8:	b3ab      	cbz	r3, 8025b16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025aaa:	4a2d      	ldr	r2, [pc, #180]	; (8025b60 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8025aac:	2bff      	cmp	r3, #255	; 0xff
 8025aae:	6811      	ldr	r1, [r2, #0]
 8025ab0:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8025ab4:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8025ab8:	b2c9      	uxtb	r1, r1
 8025aba:	d045      	beq.n	8025b48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8025abc:	b298      	uxth	r0, r3
 8025abe:	43db      	mvns	r3, r3
 8025ac0:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8025ac4:	fb11 f100 	smulbb	r1, r1, r0
 8025ac8:	b2db      	uxtb	r3, r3
 8025aca:	fb1c fc00 	smulbb	ip, ip, r0
 8025ace:	fb02 1103 	mla	r1, r2, r3, r1
 8025ad2:	fb1b f000 	smulbb	r0, fp, r0
 8025ad6:	b289      	uxth	r1, r1
 8025ad8:	1c4a      	adds	r2, r1, #1
 8025ada:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025ade:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025ae2:	fb02 cc03 	mla	ip, r2, r3, ip
 8025ae6:	1209      	asrs	r1, r1, #8
 8025ae8:	fa1f fc8c 	uxth.w	ip, ip
 8025aec:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8025af0:	f10c 0201 	add.w	r2, ip, #1
 8025af4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8025af8:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8025afc:	fb02 0303 	mla	r3, r2, r3, r0
 8025b00:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025b04:	b29b      	uxth	r3, r3
 8025b06:	f80e cc02 	strb.w	ip, [lr, #-2]
 8025b0a:	1c5a      	adds	r2, r3, #1
 8025b0c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025b10:	121b      	asrs	r3, r3, #8
 8025b12:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8025b16:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025b18:	f10e 0e03 	add.w	lr, lr, #3
 8025b1c:	f109 39ff 	add.w	r9, r9, #4294967295
 8025b20:	441d      	add	r5, r3
 8025b22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025b24:	441e      	add	r6, r3
 8025b26:	e607      	b.n	8025738 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8025b28:	f1bc 0f00 	cmp.w	ip, #0
 8025b2c:	d09e      	beq.n	8025a6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8025b2e:	4453      	add	r3, sl
 8025b30:	0859      	lsrs	r1, r3, #1
 8025b32:	07db      	lsls	r3, r3, #31
 8025b34:	5c79      	ldrb	r1, [r7, r1]
 8025b36:	bf54      	ite	pl
 8025b38:	f001 010f 	andpl.w	r1, r1, #15
 8025b3c:	1109      	asrmi	r1, r1, #4
 8025b3e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025b42:	b2c9      	uxtb	r1, r1
 8025b44:	910d      	str	r1, [sp, #52]	; 0x34
 8025b46:	e791      	b.n	8025a6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8025b48:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8025b4c:	f80e cc02 	strb.w	ip, [lr, #-2]
 8025b50:	f80e bc01 	strb.w	fp, [lr, #-1]
 8025b54:	e7df      	b.n	8025b16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025b56:	b015      	add	sp, #84	; 0x54
 8025b58:	ecbd 8b08 	vpop	{d8-d11}
 8025b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b60:	2000b33c 	.word	0x2000b33c

08025b64 <CRC_Lock>:
 8025b64:	4a1d      	ldr	r2, [pc, #116]	; (8025bdc <CRC_Lock+0x78>)
 8025b66:	b530      	push	{r4, r5, lr}
 8025b68:	6813      	ldr	r3, [r2, #0]
 8025b6a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8025b6e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8025b72:	f023 0301 	bic.w	r3, r3, #1
 8025b76:	6013      	str	r3, [r2, #0]
 8025b78:	4b19      	ldr	r3, [pc, #100]	; (8025be0 <CRC_Lock+0x7c>)
 8025b7a:	681a      	ldr	r2, [r3, #0]
 8025b7c:	4022      	ands	r2, r4
 8025b7e:	42aa      	cmp	r2, r5
 8025b80:	d005      	beq.n	8025b8e <CRC_Lock+0x2a>
 8025b82:	681b      	ldr	r3, [r3, #0]
 8025b84:	f24c 2270 	movw	r2, #49776	; 0xc270
 8025b88:	4023      	ands	r3, r4
 8025b8a:	4293      	cmp	r3, r2
 8025b8c:	d11d      	bne.n	8025bca <CRC_Lock+0x66>
 8025b8e:	4b15      	ldr	r3, [pc, #84]	; (8025be4 <CRC_Lock+0x80>)
 8025b90:	681b      	ldr	r3, [r3, #0]
 8025b92:	b9d3      	cbnz	r3, 8025bca <CRC_Lock+0x66>
 8025b94:	4a14      	ldr	r2, [pc, #80]	; (8025be8 <CRC_Lock+0x84>)
 8025b96:	6813      	ldr	r3, [r2, #0]
 8025b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025b9c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8025ba0:	d006      	beq.n	8025bb0 <CRC_Lock+0x4c>
 8025ba2:	6813      	ldr	r3, [r2, #0]
 8025ba4:	f240 4283 	movw	r2, #1155	; 0x483
 8025ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025bac:	4293      	cmp	r3, r2
 8025bae:	d10c      	bne.n	8025bca <CRC_Lock+0x66>
 8025bb0:	4b0e      	ldr	r3, [pc, #56]	; (8025bec <CRC_Lock+0x88>)
 8025bb2:	2201      	movs	r2, #1
 8025bb4:	601a      	str	r2, [r3, #0]
 8025bb6:	681a      	ldr	r2, [r3, #0]
 8025bb8:	2a00      	cmp	r2, #0
 8025bba:	d1fc      	bne.n	8025bb6 <CRC_Lock+0x52>
 8025bbc:	4b0c      	ldr	r3, [pc, #48]	; (8025bf0 <CRC_Lock+0x8c>)
 8025bbe:	6018      	str	r0, [r3, #0]
 8025bc0:	6818      	ldr	r0, [r3, #0]
 8025bc2:	1a43      	subs	r3, r0, r1
 8025bc4:	4258      	negs	r0, r3
 8025bc6:	4158      	adcs	r0, r3
 8025bc8:	bd30      	pop	{r4, r5, pc}
 8025bca:	4b0a      	ldr	r3, [pc, #40]	; (8025bf4 <CRC_Lock+0x90>)
 8025bcc:	2201      	movs	r2, #1
 8025bce:	601a      	str	r2, [r3, #0]
 8025bd0:	681a      	ldr	r2, [r3, #0]
 8025bd2:	2a00      	cmp	r2, #0
 8025bd4:	d1fc      	bne.n	8025bd0 <CRC_Lock+0x6c>
 8025bd6:	4b08      	ldr	r3, [pc, #32]	; (8025bf8 <CRC_Lock+0x94>)
 8025bd8:	e7f1      	b.n	8025bbe <CRC_Lock+0x5a>
 8025bda:	bf00      	nop
 8025bdc:	e0002000 	.word	0xe0002000
 8025be0:	e000ed00 	.word	0xe000ed00
 8025be4:	e0042000 	.word	0xe0042000
 8025be8:	5c001000 	.word	0x5c001000
 8025bec:	58024c08 	.word	0x58024c08
 8025bf0:	58024c00 	.word	0x58024c00
 8025bf4:	40023008 	.word	0x40023008
 8025bf8:	40023000 	.word	0x40023000

08025bfc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8025bfc:	6101      	str	r1, [r0, #16]
 8025bfe:	4770      	bx	lr

08025c00 <_ZN8touchgfx8Gestures4tickEv>:
 8025c00:	7b83      	ldrb	r3, [r0, #14]
 8025c02:	b14b      	cbz	r3, 8025c18 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8025c04:	8903      	ldrh	r3, [r0, #8]
 8025c06:	3301      	adds	r3, #1
 8025c08:	b29b      	uxth	r3, r3
 8025c0a:	2b07      	cmp	r3, #7
 8025c0c:	8103      	strh	r3, [r0, #8]
 8025c0e:	bf81      	itttt	hi
 8025c10:	2300      	movhi	r3, #0
 8025c12:	8143      	strhhi	r3, [r0, #10]
 8025c14:	8183      	strhhi	r3, [r0, #12]
 8025c16:	7383      	strbhi	r3, [r0, #14]
 8025c18:	4770      	bx	lr
	...

08025c1c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8025c1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8025c20:	4604      	mov	r4, r0
 8025c22:	4698      	mov	r8, r3
 8025c24:	8880      	ldrh	r0, [r0, #4]
 8025c26:	4617      	mov	r7, r2
 8025c28:	4b1d      	ldr	r3, [pc, #116]	; (8025ca0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8025c2a:	460e      	mov	r6, r1
 8025c2c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8025c30:	eba8 0000 	sub.w	r0, r8, r0
 8025c34:	9300      	str	r3, [sp, #0]
 8025c36:	2300      	movs	r3, #0
 8025c38:	b280      	uxth	r0, r0
 8025c3a:	8aa2      	ldrh	r2, [r4, #20]
 8025c3c:	f88d 3004 	strb.w	r3, [sp, #4]
 8025c40:	b203      	sxth	r3, r0
 8025c42:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8025c46:	88e1      	ldrh	r1, [r4, #6]
 8025c48:	2b00      	cmp	r3, #0
 8025c4a:	f8ad 800a 	strh.w	r8, [sp, #10]
 8025c4e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8025c52:	bfb8      	it	lt
 8025c54:	4240      	neglt	r0, r0
 8025c56:	f8ad 500c 	strh.w	r5, [sp, #12]
 8025c5a:	bfb8      	it	lt
 8025c5c:	b203      	sxthlt	r3, r0
 8025c5e:	4293      	cmp	r3, r2
 8025c60:	dc08      	bgt.n	8025c74 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8025c62:	1a69      	subs	r1, r5, r1
 8025c64:	b289      	uxth	r1, r1
 8025c66:	b20b      	sxth	r3, r1
 8025c68:	2b00      	cmp	r3, #0
 8025c6a:	bfbc      	itt	lt
 8025c6c:	4249      	neglt	r1, r1
 8025c6e:	b20b      	sxthlt	r3, r1
 8025c70:	429a      	cmp	r2, r3
 8025c72:	da13      	bge.n	8025c9c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8025c74:	6920      	ldr	r0, [r4, #16]
 8025c76:	4669      	mov	r1, sp
 8025c78:	eba8 0606 	sub.w	r6, r8, r6
 8025c7c:	1bef      	subs	r7, r5, r7
 8025c7e:	6803      	ldr	r3, [r0, #0]
 8025c80:	685b      	ldr	r3, [r3, #4]
 8025c82:	4798      	blx	r3
 8025c84:	2300      	movs	r3, #0
 8025c86:	2001      	movs	r0, #1
 8025c88:	8166      	strh	r6, [r4, #10]
 8025c8a:	8123      	strh	r3, [r4, #8]
 8025c8c:	81a7      	strh	r7, [r4, #12]
 8025c8e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025c92:	80e5      	strh	r5, [r4, #6]
 8025c94:	73a0      	strb	r0, [r4, #14]
 8025c96:	b004      	add	sp, #16
 8025c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025c9c:	2000      	movs	r0, #0
 8025c9e:	e7fa      	b.n	8025c96 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8025ca0:	0802bb70 	.word	0x0802bb70

08025ca4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025ca6:	461e      	mov	r6, r3
 8025ca8:	1e4b      	subs	r3, r1, #1
 8025caa:	b085      	sub	sp, #20
 8025cac:	4604      	mov	r4, r0
 8025cae:	2b01      	cmp	r3, #1
 8025cb0:	460d      	mov	r5, r1
 8025cb2:	4617      	mov	r7, r2
 8025cb4:	d84b      	bhi.n	8025d4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8025cb6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8025cba:	1cd3      	adds	r3, r2, #3
 8025cbc:	b29b      	uxth	r3, r3
 8025cbe:	2b06      	cmp	r3, #6
 8025cc0:	d916      	bls.n	8025cf0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8025cc2:	f8df c098 	ldr.w	ip, [pc, #152]	; 8025d5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8025cc6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025cca:	f8cd c004 	str.w	ip, [sp, #4]
 8025cce:	f04f 0c00 	mov.w	ip, #0
 8025cd2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025cd6:	6900      	ldr	r0, [r0, #16]
 8025cd8:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025cdc:	a901      	add	r1, sp, #4
 8025cde:	f88d c008 	strb.w	ip, [sp, #8]
 8025ce2:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025ce6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025cea:	6803      	ldr	r3, [r0, #0]
 8025cec:	689b      	ldr	r3, [r3, #8]
 8025cee:	4798      	blx	r3
 8025cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025cf4:	1cd3      	adds	r3, r2, #3
 8025cf6:	b29b      	uxth	r3, r3
 8025cf8:	2b06      	cmp	r3, #6
 8025cfa:	d916      	bls.n	8025d2a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025cfc:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8025d5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8025d00:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025d04:	f8cd c004 	str.w	ip, [sp, #4]
 8025d08:	f04f 0c01 	mov.w	ip, #1
 8025d0c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025d10:	6920      	ldr	r0, [r4, #16]
 8025d12:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025d16:	a901      	add	r1, sp, #4
 8025d18:	f88d c008 	strb.w	ip, [sp, #8]
 8025d1c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025d20:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025d24:	6803      	ldr	r3, [r0, #0]
 8025d26:	689b      	ldr	r3, [r3, #8]
 8025d28:	4798      	blx	r3
 8025d2a:	4b0b      	ldr	r3, [pc, #44]	; (8025d58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8025d2c:	a901      	add	r1, sp, #4
 8025d2e:	6920      	ldr	r0, [r4, #16]
 8025d30:	9301      	str	r3, [sp, #4]
 8025d32:	2300      	movs	r3, #0
 8025d34:	f88d 5008 	strb.w	r5, [sp, #8]
 8025d38:	f8ad 700a 	strh.w	r7, [sp, #10]
 8025d3c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8025d40:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025d44:	6803      	ldr	r3, [r0, #0]
 8025d46:	681b      	ldr	r3, [r3, #0]
 8025d48:	4798      	blx	r3
 8025d4a:	b005      	add	sp, #20
 8025d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025d4e:	2900      	cmp	r1, #0
 8025d50:	d1eb      	bne.n	8025d2a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025d52:	80a2      	strh	r2, [r4, #4]
 8025d54:	80c6      	strh	r6, [r0, #6]
 8025d56:	e7e8      	b.n	8025d2a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025d58:	0802bb5c 	.word	0x0802bb5c
 8025d5c:	0802bb84 	.word	0x0802bb84

08025d60 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>:
 8025d60:	10c9      	asrs	r1, r1, #3
 8025d62:	2900      	cmp	r1, #0
 8025d64:	bfb8      	it	lt
 8025d66:	4249      	neglt	r1, r1
 8025d68:	2801      	cmp	r0, #1
 8025d6a:	d108      	bne.n	8025d7e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8025d6c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8025d70:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8025d74:	4601      	mov	r1, r0
 8025d76:	dd02      	ble.n	8025d7e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8025d78:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8025d7c:	4770      	bx	lr
 8025d7e:	29ff      	cmp	r1, #255	; 0xff
 8025d80:	bfa8      	it	ge
 8025d82:	21ff      	movge	r1, #255	; 0xff
 8025d84:	4608      	mov	r0, r1
 8025d86:	4770      	bx	lr

08025d88 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8025d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d8c:	688c      	ldr	r4, [r1, #8]
 8025d8e:	b087      	sub	sp, #28
 8025d90:	4607      	mov	r7, r0
 8025d92:	2c00      	cmp	r4, #0
 8025d94:	db2b      	blt.n	8025dee <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8025d96:	6803      	ldr	r3, [r0, #0]
 8025d98:	691a      	ldr	r2, [r3, #16]
 8025d9a:	42a2      	cmp	r2, r4
 8025d9c:	dd27      	ble.n	8025dee <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8025d9e:	685a      	ldr	r2, [r3, #4]
 8025da0:	695e      	ldr	r6, [r3, #20]
 8025da2:	68cd      	ldr	r5, [r1, #12]
 8025da4:	fb06 2604 	mla	r6, r6, r4, r2
 8025da8:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8025dac:	698a      	ldr	r2, [r1, #24]
 8025dae:	f893 a008 	ldrb.w	sl, [r3, #8]
 8025db2:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8025db6:	9205      	str	r2, [sp, #20]
 8025db8:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8025dbc:	9b05      	ldr	r3, [sp, #20]
 8025dbe:	6839      	ldr	r1, [r7, #0]
 8025dc0:	eb03 0c02 	add.w	ip, r3, r2
 8025dc4:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8025dc8:	68c9      	ldr	r1, [r1, #12]
 8025dca:	1898      	adds	r0, r3, r2
 8025dcc:	4288      	cmp	r0, r1
 8025dce:	db02      	blt.n	8025dd6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8025dd0:	1a8b      	subs	r3, r1, r2
 8025dd2:	2b00      	cmp	r3, #0
 8025dd4:	dd09      	ble.n	8025dea <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8025dd6:	6878      	ldr	r0, [r7, #4]
 8025dd8:	6801      	ldr	r1, [r0, #0]
 8025dda:	9400      	str	r4, [sp, #0]
 8025ddc:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8025de0:	4653      	mov	r3, sl
 8025de2:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8025de6:	4631      	mov	r1, r6
 8025de8:	47d8      	blx	fp
 8025dea:	3d01      	subs	r5, #1
 8025dec:	d1e4      	bne.n	8025db8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8025dee:	b007      	add	sp, #28
 8025df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025df4 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8025df4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8025df8:	b90b      	cbnz	r3, 8025dfe <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8025dfa:	f001 b970 	b.w	80270de <_ZN8touchgfx7Outline6lineToEii>
 8025dfe:	4770      	bx	lr

08025e00 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8025e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025e04:	4604      	mov	r4, r0
 8025e06:	2600      	movs	r6, #0
 8025e08:	4b8e      	ldr	r3, [pc, #568]	; (8026044 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8025e0a:	f100 0518 	add.w	r5, r0, #24
 8025e0e:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8025e12:	b086      	sub	sp, #24
 8025e14:	4690      	mov	r8, r2
 8025e16:	e9c0 3100 	strd	r3, r1, [r0]
 8025e1a:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8025e1e:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8025e22:	4628      	mov	r0, r5
 8025e24:	f001 fb7a 	bl	802751c <_ZN8touchgfx15RenderingBufferC1Ev>
 8025e28:	4638      	mov	r0, r7
 8025e2a:	f000 fb41 	bl	80264b0 <_ZN8touchgfx7OutlineC1Ev>
 8025e2e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8025e32:	f001 fb1f 	bl	8027474 <_ZN8touchgfx8ScanlineC1Ev>
 8025e36:	2301      	movs	r3, #1
 8025e38:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8025e3c:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8025e40:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025e44:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8025e48:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8025e4c:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8025e50:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8025e54:	f7f4 fa1c 	bl	801a290 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8025e58:	b928      	cbnz	r0, 8025e66 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8025e5a:	4b7b      	ldr	r3, [pc, #492]	; (8026048 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8025e5c:	2118      	movs	r1, #24
 8025e5e:	4a7b      	ldr	r2, [pc, #492]	; (802604c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8025e60:	487b      	ldr	r0, [pc, #492]	; (8026050 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8025e62:	f001 fba3 	bl	80275ac <__assert_func>
 8025e66:	f9b8 2000 	ldrsh.w	r2, [r8]
 8025e6a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8025e6e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8025e72:	4410      	add	r0, r2
 8025e74:	9602      	str	r6, [sp, #8]
 8025e76:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8025e7a:	b280      	uxth	r0, r0
 8025e7c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8025e80:	fa0f fa80 	sxth.w	sl, r0
 8025e84:	f1ba 0f00 	cmp.w	sl, #0
 8025e88:	dd70      	ble.n	8025f6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8025e8a:	4591      	cmp	r9, r2
 8025e8c:	dd6e      	ble.n	8025f6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8025e8e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8025e92:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8025e96:	440b      	add	r3, r1
 8025e98:	b29b      	uxth	r3, r3
 8025e9a:	b21e      	sxth	r6, r3
 8025e9c:	2e00      	cmp	r6, #0
 8025e9e:	dd65      	ble.n	8025f6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8025ea0:	458e      	cmp	lr, r1
 8025ea2:	dd63      	ble.n	8025f6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8025ea4:	45d1      	cmp	r9, sl
 8025ea6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8025eaa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8025eae:	bfb8      	it	lt
 8025eb0:	fa1f f089 	uxthlt.w	r0, r9
 8025eb4:	45b6      	cmp	lr, r6
 8025eb6:	f8ad 2008 	strh.w	r2, [sp, #8]
 8025eba:	bfb8      	it	lt
 8025ebc:	fa1f f38e 	uxthlt.w	r3, lr
 8025ec0:	1a80      	subs	r0, r0, r2
 8025ec2:	f8ad 100a 	strh.w	r1, [sp, #10]
 8025ec6:	1a5b      	subs	r3, r3, r1
 8025ec8:	f8ad 000c 	strh.w	r0, [sp, #12]
 8025ecc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025ed0:	f10d 0808 	add.w	r8, sp, #8
 8025ed4:	ae04      	add	r6, sp, #16
 8025ed6:	e898 0003 	ldmia.w	r8, {r0, r1}
 8025eda:	e886 0003 	stmia.w	r6, {r0, r1}
 8025ede:	f8dc 3000 	ldr.w	r3, [ip]
 8025ee2:	4660      	mov	r0, ip
 8025ee4:	4631      	mov	r1, r6
 8025ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025ee8:	4798      	blx	r3
 8025eea:	6861      	ldr	r1, [r4, #4]
 8025eec:	4640      	mov	r0, r8
 8025eee:	3104      	adds	r1, #4
 8025ef0:	f7f5 f83a 	bl	801af68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025ef4:	4630      	mov	r0, r6
 8025ef6:	f7f5 f84f 	bl	801af98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025efa:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8025efe:	f7f4 f957 	bl	801a1b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8025f02:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8025f06:	4638      	mov	r0, r7
 8025f08:	f000 faae 	bl	8026468 <_ZN8touchgfx7Outline5resetEv>
 8025f0c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8025f10:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8025f14:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8025f18:	015b      	lsls	r3, r3, #5
 8025f1a:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 8025f1e:	0152      	lsls	r2, r2, #5
 8025f20:	60e3      	str	r3, [r4, #12]
 8025f22:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8025f26:	60a2      	str	r2, [r4, #8]
 8025f28:	015b      	lsls	r3, r3, #5
 8025f2a:	6123      	str	r3, [r4, #16]
 8025f2c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8025f30:	015b      	lsls	r3, r3, #5
 8025f32:	6163      	str	r3, [r4, #20]
 8025f34:	4b47      	ldr	r3, [pc, #284]	; (8026054 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8025f36:	6818      	ldr	r0, [r3, #0]
 8025f38:	6803      	ldr	r3, [r0, #0]
 8025f3a:	6a1b      	ldr	r3, [r3, #32]
 8025f3c:	4798      	blx	r3
 8025f3e:	4606      	mov	r6, r0
 8025f40:	f7e9 fe66 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8025f44:	6803      	ldr	r3, [r0, #0]
 8025f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025f48:	4798      	blx	r3
 8025f4a:	4607      	mov	r7, r0
 8025f4c:	f7e9 fe60 	bl	800fc10 <_ZN8touchgfx3HAL3lcdEv>
 8025f50:	6803      	ldr	r3, [r0, #0]
 8025f52:	6a1b      	ldr	r3, [r3, #32]
 8025f54:	4798      	blx	r3
 8025f56:	280c      	cmp	r0, #12
 8025f58:	d854      	bhi.n	8026004 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8025f5a:	e8df f000 	tbb	[pc, r0]
 8025f5e:	554b      	.short	0x554b
 8025f60:	2b6e0a66 	.word	0x2b6e0a66
 8025f64:	5f5f5f3b 	.word	0x5f5f5f3b
 8025f68:	5f5f      	.short	0x5f5f
 8025f6a:	6e          	.byte	0x6e
 8025f6b:	00          	.byte	0x00
 8025f6c:	2300      	movs	r3, #0
 8025f6e:	9303      	str	r3, [sp, #12]
 8025f70:	e7ae      	b.n	8025ed0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8025f72:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025f76:	2108      	movs	r1, #8
 8025f78:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025f7c:	fb92 f1f1 	sdiv	r1, r2, r1
 8025f80:	fb07 1303 	mla	r3, r7, r3, r1
 8025f84:	441e      	add	r6, r3
 8025f86:	4253      	negs	r3, r2
 8025f88:	f002 0207 	and.w	r2, r2, #7
 8025f8c:	f003 0307 	and.w	r3, r3, #7
 8025f90:	bf58      	it	pl
 8025f92:	425a      	negpl	r2, r3
 8025f94:	b2d2      	uxtb	r2, r2
 8025f96:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8025f9a:	4628      	mov	r0, r5
 8025f9c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8025fa0:	6721      	str	r1, [r4, #112]	; 0x70
 8025fa2:	e9cd 1700 	strd	r1, r7, [sp]
 8025fa6:	4631      	mov	r1, r6
 8025fa8:	f001 fac4 	bl	8027534 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8025fac:	4620      	mov	r0, r4
 8025fae:	b006      	add	sp, #24
 8025fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025fb4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025fb8:	2104      	movs	r1, #4
 8025fba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025fbe:	fb92 f1f1 	sdiv	r1, r2, r1
 8025fc2:	fb07 1303 	mla	r3, r7, r3, r1
 8025fc6:	441e      	add	r6, r3
 8025fc8:	4253      	negs	r3, r2
 8025fca:	f002 0203 	and.w	r2, r2, #3
 8025fce:	f003 0303 	and.w	r3, r3, #3
 8025fd2:	e7dd      	b.n	8025f90 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8025fd4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025fd8:	2102      	movs	r1, #2
 8025fda:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025fde:	2a00      	cmp	r2, #0
 8025fe0:	fb92 f1f1 	sdiv	r1, r2, r1
 8025fe4:	f002 0201 	and.w	r2, r2, #1
 8025fe8:	fb07 1303 	mla	r3, r7, r3, r1
 8025fec:	bfb8      	it	lt
 8025fee:	4252      	neglt	r2, r2
 8025ff0:	441e      	add	r6, r3
 8025ff2:	e7cf      	b.n	8025f94 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8025ff4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025ff8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025ffc:	437b      	muls	r3, r7
 8025ffe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8026002:	441e      	add	r6, r3
 8026004:	2200      	movs	r2, #0
 8026006:	e7c6      	b.n	8025f96 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8026008:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802600c:	2103      	movs	r1, #3
 802600e:	fb07 f203 	mul.w	r2, r7, r3
 8026012:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8026016:	fb13 2301 	smlabb	r3, r3, r1, r2
 802601a:	e7f2      	b.n	8026002 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802601c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026020:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026024:	fb07 2303 	mla	r3, r7, r3, r2
 8026028:	e7eb      	b.n	8026002 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802602a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802602e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026032:	437b      	muls	r3, r7
 8026034:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026038:	e7e3      	b.n	8026002 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802603a:	4b07      	ldr	r3, [pc, #28]	; (8026058 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 802603c:	2156      	movs	r1, #86	; 0x56
 802603e:	4a03      	ldr	r2, [pc, #12]	; (802604c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8026040:	e70e      	b.n	8025e60 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8026042:	bf00      	nop
 8026044:	0802cf30 	.word	0x0802cf30
 8026048:	0802ce7a 	.word	0x0802ce7a
 802604c:	0802cf38 	.word	0x0802cf38
 8026050:	0802ced6 	.word	0x0802ced6
 8026054:	2000b314 	.word	0x2000b314
 8026058:	0802cf0a 	.word	0x0802cf0a

0802605c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802605c:	6812      	ldr	r2, [r2, #0]
 802605e:	2a00      	cmp	r2, #0
 8026060:	db0b      	blt.n	802607a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8026062:	9800      	ldr	r0, [sp, #0]
 8026064:	6800      	ldr	r0, [r0, #0]
 8026066:	4290      	cmp	r0, r2
 8026068:	bfd4      	ite	le
 802606a:	2002      	movle	r0, #2
 802606c:	2000      	movgt	r0, #0
 802606e:	680a      	ldr	r2, [r1, #0]
 8026070:	2a00      	cmp	r2, #0
 8026072:	da04      	bge.n	802607e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8026074:	f040 0004 	orr.w	r0, r0, #4
 8026078:	4770      	bx	lr
 802607a:	2001      	movs	r0, #1
 802607c:	e7f7      	b.n	802606e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802607e:	681b      	ldr	r3, [r3, #0]
 8026080:	4293      	cmp	r3, r2
 8026082:	bfd8      	it	le
 8026084:	f040 0008 	orrle.w	r0, r0, #8
 8026088:	4770      	bx	lr
	...

0802608c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802608c:	4b07      	ldr	r3, [pc, #28]	; (80260ac <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802608e:	b510      	push	{r4, lr}
 8026090:	781b      	ldrb	r3, [r3, #0]
 8026092:	2b01      	cmp	r3, #1
 8026094:	d108      	bne.n	80260a8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8026096:	6843      	ldr	r3, [r0, #4]
 8026098:	6814      	ldr	r4, [r2, #0]
 802609a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802609e:	680b      	ldr	r3, [r1, #0]
 80260a0:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80260a4:	6013      	str	r3, [r2, #0]
 80260a6:	600c      	str	r4, [r1, #0]
 80260a8:	bd10      	pop	{r4, pc}
 80260aa:	bf00      	nop
 80260ac:	2000b30c 	.word	0x2000b30c

080260b0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80260b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80260b2:	b085      	sub	sp, #20
 80260b4:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 80260b8:	4604      	mov	r4, r0
 80260ba:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80260be:	b33b      	cbz	r3, 8026110 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80260c0:	aa02      	add	r2, sp, #8
 80260c2:	a903      	add	r1, sp, #12
 80260c4:	f7ff ffe2 	bl	802608c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80260c8:	68a3      	ldr	r3, [r4, #8]
 80260ca:	9e03      	ldr	r6, [sp, #12]
 80260cc:	aa02      	add	r2, sp, #8
 80260ce:	9f02      	ldr	r7, [sp, #8]
 80260d0:	a903      	add	r1, sp, #12
 80260d2:	1af6      	subs	r6, r6, r3
 80260d4:	68e3      	ldr	r3, [r4, #12]
 80260d6:	4620      	mov	r0, r4
 80260d8:	1aff      	subs	r7, r7, r3
 80260da:	f104 0314 	add.w	r3, r4, #20
 80260de:	9603      	str	r6, [sp, #12]
 80260e0:	9300      	str	r3, [sp, #0]
 80260e2:	f104 0310 	add.w	r3, r4, #16
 80260e6:	9702      	str	r7, [sp, #8]
 80260e8:	f7ff ffb8 	bl	802605c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80260ec:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80260f0:	4605      	mov	r5, r0
 80260f2:	b97b      	cbnz	r3, 8026114 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80260f4:	463a      	mov	r2, r7
 80260f6:	4631      	mov	r1, r6
 80260f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80260fc:	f7ff fe7a 	bl	8025df4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026100:	9b03      	ldr	r3, [sp, #12]
 8026102:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8026106:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802610a:	9b02      	ldr	r3, [sp, #8]
 802610c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8026110:	b005      	add	sp, #20
 8026112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026114:	b110      	cbz	r0, 802611c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8026116:	ea13 0200 	ands.w	r2, r3, r0
 802611a:	d11c      	bne.n	8026156 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802611c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8026120:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8026124:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 8026128:	b188      	cbz	r0, 802614e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802612a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802612e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8026132:	b913      	cbnz	r3, 802613a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8026134:	4630      	mov	r0, r6
 8026136:	f001 f802 	bl	802713e <_ZN8touchgfx7Outline6moveToEii>
 802613a:	2300      	movs	r3, #0
 802613c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8026140:	2301      	movs	r3, #1
 8026142:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8026146:	4630      	mov	r0, r6
 8026148:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802614c:	e7d6      	b.n	80260fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802614e:	4630      	mov	r0, r6
 8026150:	f7ff fe50 	bl	8025df4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026154:	e7f7      	b.n	8026146 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8026156:	4615      	mov	r5, r2
 8026158:	e7d2      	b.n	8026100 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802615a <_ZN8touchgfx6Canvas5closeEv>:
 802615a:	b538      	push	{r3, r4, r5, lr}
 802615c:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8026160:	4604      	mov	r4, r0
 8026162:	b993      	cbnz	r3, 802618a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8026164:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8026168:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802616c:	4213      	tst	r3, r2
 802616e:	d10c      	bne.n	802618a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8026170:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8026174:	b123      	cbz	r3, 8026180 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8026176:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802617a:	4628      	mov	r0, r5
 802617c:	f7ff fe3a 	bl	8025df4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026180:	4628      	mov	r0, r5
 8026182:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 8026186:	f7ff fe35 	bl	8025df4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802618a:	2300      	movs	r3, #0
 802618c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8026190:	bd38      	pop	{r3, r4, r5, pc}

08026192 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8026192:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026194:	b085      	sub	sp, #20
 8026196:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802619a:	4604      	mov	r4, r0
 802619c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80261a0:	b353      	cbz	r3, 80261f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80261a2:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 80261a6:	b90b      	cbnz	r3, 80261ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80261a8:	f7ff ffd7 	bl	802615a <_ZN8touchgfx6Canvas5closeEv>
 80261ac:	aa02      	add	r2, sp, #8
 80261ae:	a903      	add	r1, sp, #12
 80261b0:	4620      	mov	r0, r4
 80261b2:	f7ff ff6b 	bl	802608c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80261b6:	68a3      	ldr	r3, [r4, #8]
 80261b8:	9d03      	ldr	r5, [sp, #12]
 80261ba:	aa02      	add	r2, sp, #8
 80261bc:	9e02      	ldr	r6, [sp, #8]
 80261be:	a903      	add	r1, sp, #12
 80261c0:	1aed      	subs	r5, r5, r3
 80261c2:	68e3      	ldr	r3, [r4, #12]
 80261c4:	4620      	mov	r0, r4
 80261c6:	1af6      	subs	r6, r6, r3
 80261c8:	f104 0314 	add.w	r3, r4, #20
 80261cc:	9503      	str	r5, [sp, #12]
 80261ce:	9300      	str	r3, [sp, #0]
 80261d0:	f104 0310 	add.w	r3, r4, #16
 80261d4:	9602      	str	r6, [sp, #8]
 80261d6:	f7ff ff41 	bl	802605c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80261da:	4607      	mov	r7, r0
 80261dc:	b170      	cbz	r0, 80261fc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80261de:	2301      	movs	r3, #1
 80261e0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80261e4:	9a03      	ldr	r2, [sp, #12]
 80261e6:	9b02      	ldr	r3, [sp, #8]
 80261e8:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80261ec:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80261f0:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 80261f4:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 80261f8:	b005      	add	sp, #20
 80261fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80261fc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8026200:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 8026204:	b92b      	cbnz	r3, 8026212 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8026206:	4632      	mov	r2, r6
 8026208:	4629      	mov	r1, r5
 802620a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802620e:	f000 ff96 	bl	802713e <_ZN8touchgfx7Outline6moveToEii>
 8026212:	2300      	movs	r3, #0
 8026214:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8026218:	2301      	movs	r3, #1
 802621a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802621e:	e7e1      	b.n	80261e4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08026220 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8026220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026224:	4604      	mov	r4, r0
 8026226:	b087      	sub	sp, #28
 8026228:	9105      	str	r1, [sp, #20]
 802622a:	f001 f8cc 	bl	80273c6 <_ZN8touchgfx7Outline8getCellsEv>
 802622e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8026232:	4605      	mov	r5, r0
 8026234:	f1b9 0f00 	cmp.w	r9, #0
 8026238:	d103      	bne.n	8026242 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802623a:	2001      	movs	r0, #1
 802623c:	b007      	add	sp, #28
 802623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026242:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8026246:	2e00      	cmp	r6, #0
 8026248:	d139      	bne.n	80262be <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802624a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802624e:	f105 0708 	add.w	r7, r5, #8
 8026252:	4640      	mov	r0, r8
 8026254:	f001 f8f9 	bl	802744a <_ZN8touchgfx8Scanline5resetEv>
 8026258:	f109 33ff 	add.w	r3, r9, #4294967295
 802625c:	9303      	str	r3, [sp, #12]
 802625e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8026262:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8026266:	46da      	mov	sl, fp
 8026268:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802626c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8026270:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8026274:	9b03      	ldr	r3, [sp, #12]
 8026276:	4416      	add	r6, r2
 8026278:	9504      	str	r5, [sp, #16]
 802627a:	463d      	mov	r5, r7
 802627c:	3b01      	subs	r3, #1
 802627e:	9303      	str	r3, [sp, #12]
 8026280:	3301      	adds	r3, #1
 8026282:	d01e      	beq.n	80262c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8026284:	3708      	adds	r7, #8
 8026286:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802628a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802628e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8026292:	4290      	cmp	r0, r2
 8026294:	d11e      	bne.n	80262d4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8026296:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802629a:	4411      	add	r1, r2
 802629c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80262a0:	e7e8      	b.n	8026274 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80262a2:	1c91      	adds	r1, r2, #2
 80262a4:	f04f 0301 	mov.w	r3, #1
 80262a8:	65e1      	str	r1, [r4, #92]	; 0x5c
 80262aa:	8053      	strh	r3, [r2, #2]
 80262ac:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80262ae:	1c91      	adds	r1, r2, #2
 80262b0:	65a1      	str	r1, [r4, #88]	; 0x58
 80262b2:	f8a2 b002 	strh.w	fp, [r2, #2]
 80262b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80262b8:	3201      	adds	r2, #1
 80262ba:	6562      	str	r2, [r4, #84]	; 0x54
 80262bc:	e03a      	b.n	8026334 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80262be:	2000      	movs	r0, #0
 80262c0:	e7bc      	b.n	802623c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80262c2:	b951      	cbnz	r1, 80262da <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80262c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80262c6:	2b00      	cmp	r3, #0
 80262c8:	d0b7      	beq.n	802623a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80262ca:	4641      	mov	r1, r8
 80262cc:	9805      	ldr	r0, [sp, #20]
 80262ce:	f7ff fd5b 	bl	8025d88 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80262d2:	e7b2      	b.n	802623a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80262d4:	2900      	cmp	r1, #0
 80262d6:	d035      	beq.n	8026344 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80262d8:	9504      	str	r5, [sp, #16]
 80262da:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80262de:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80262e2:	f7ff fd3d 	bl	8025d60 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 80262e6:	4605      	mov	r5, r0
 80262e8:	b330      	cbz	r0, 8026338 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80262ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80262ec:	b182      	cbz	r2, 8026310 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80262ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80262f0:	454a      	cmp	r2, r9
 80262f2:	d00d      	beq.n	8026310 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80262f4:	4641      	mov	r1, r8
 80262f6:	9805      	ldr	r0, [sp, #20]
 80262f8:	f7ff fd46 	bl	8025d88 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80262fc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026300:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8026302:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8026306:	65e2      	str	r2, [r4, #92]	; 0x5c
 8026308:	2300      	movs	r3, #0
 802630a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802630c:	6563      	str	r3, [r4, #84]	; 0x54
 802630e:	65a2      	str	r2, [r4, #88]	; 0x58
 8026310:	f1bb 0f00 	cmp.w	fp, #0
 8026314:	db10      	blt.n	8026338 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8026316:	f7f3 ffc9 	bl	801a2ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802631a:	4583      	cmp	fp, r0
 802631c:	d20c      	bcs.n	8026338 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802631e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8026320:	f802 500b 	strb.w	r5, [r2, fp]
 8026324:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8026326:	3201      	adds	r2, #1
 8026328:	455a      	cmp	r2, fp
 802632a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802632c:	d1b9      	bne.n	80262a2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802632e:	8811      	ldrh	r1, [r2, #0]
 8026330:	3101      	adds	r1, #1
 8026332:	8011      	strh	r1, [r2, #0]
 8026334:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8026338:	9b03      	ldr	r3, [sp, #12]
 802633a:	3301      	adds	r3, #1
 802633c:	d0c2      	beq.n	80262c4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802633e:	f10b 0a01 	add.w	sl, fp, #1
 8026342:	9d04      	ldr	r5, [sp, #16]
 8026344:	f9b5 3000 	ldrsh.w	r3, [r5]
 8026348:	4553      	cmp	r3, sl
 802634a:	dd88      	ble.n	802625e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802634c:	01b1      	lsls	r1, r6, #6
 802634e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8026352:	f7ff fd05 	bl	8025d60 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 8026356:	4683      	mov	fp, r0
 8026358:	2800      	cmp	r0, #0
 802635a:	d080      	beq.n	802625e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802635c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802635e:	b183      	cbz	r3, 8026382 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8026360:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8026362:	454b      	cmp	r3, r9
 8026364:	d00d      	beq.n	8026382 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8026366:	4641      	mov	r1, r8
 8026368:	9805      	ldr	r0, [sp, #20]
 802636a:	f7ff fd0d 	bl	8025d88 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802636e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026372:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8026376:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8026378:	65e3      	str	r3, [r4, #92]	; 0x5c
 802637a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802637c:	65a3      	str	r3, [r4, #88]	; 0x58
 802637e:	2300      	movs	r3, #0
 8026380:	6563      	str	r3, [r4, #84]	; 0x54
 8026382:	f9b5 3000 	ldrsh.w	r3, [r5]
 8026386:	464a      	mov	r2, r9
 8026388:	f8cd b000 	str.w	fp, [sp]
 802638c:	4651      	mov	r1, sl
 802638e:	eba3 030a 	sub.w	r3, r3, sl
 8026392:	4640      	mov	r0, r8
 8026394:	f001 f880 	bl	8027498 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8026398:	e761      	b.n	802625e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802639a <_ZN8touchgfx6Canvas6renderEv>:
 802639a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802639c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 80263a0:	4604      	mov	r4, r0
 80263a2:	b913      	cbnz	r3, 80263aa <_ZN8touchgfx6Canvas6renderEv+0x10>
 80263a4:	2001      	movs	r0, #1
 80263a6:	b003      	add	sp, #12
 80263a8:	bd30      	pop	{r4, r5, pc}
 80263aa:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80263ae:	2b00      	cmp	r3, #0
 80263b0:	d12e      	bne.n	8026410 <_ZN8touchgfx6Canvas6renderEv+0x76>
 80263b2:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 80263b6:	2b00      	cmp	r3, #0
 80263b8:	d0f4      	beq.n	80263a4 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80263ba:	6840      	ldr	r0, [r0, #4]
 80263bc:	6803      	ldr	r3, [r0, #0]
 80263be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80263c0:	4798      	blx	r3
 80263c2:	2800      	cmp	r0, #0
 80263c4:	d0ee      	beq.n	80263a4 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80263c6:	4620      	mov	r0, r4
 80263c8:	f7ff fec7 	bl	802615a <_ZN8touchgfx6Canvas5closeEv>
 80263cc:	6860      	ldr	r0, [r4, #4]
 80263ce:	6803      	ldr	r3, [r0, #0]
 80263d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80263d2:	4798      	blx	r3
 80263d4:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 80263d8:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 80263dc:	8082      	strh	r2, [r0, #4]
 80263de:	80c3      	strh	r3, [r0, #6]
 80263e0:	6860      	ldr	r0, [r4, #4]
 80263e2:	6803      	ldr	r3, [r0, #0]
 80263e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80263e6:	4798      	blx	r3
 80263e8:	4605      	mov	r5, r0
 80263ea:	6860      	ldr	r0, [r4, #4]
 80263ec:	6803      	ldr	r3, [r0, #0]
 80263ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80263f0:	4798      	blx	r3
 80263f2:	7228      	strb	r0, [r5, #8]
 80263f4:	6860      	ldr	r0, [r4, #4]
 80263f6:	6803      	ldr	r3, [r0, #0]
 80263f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80263fa:	4798      	blx	r3
 80263fc:	f104 0318 	add.w	r3, r4, #24
 8026400:	4669      	mov	r1, sp
 8026402:	e9cd 3000 	strd	r3, r0, [sp]
 8026406:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802640a:	f7ff ff09 	bl	8026220 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802640e:	e7ca      	b.n	80263a6 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8026410:	2000      	movs	r0, #0
 8026412:	e7c8      	b.n	80263a6 <_ZN8touchgfx6Canvas6renderEv+0xc>

08026414 <_ZN8touchgfx6CanvasD1Ev>:
 8026414:	b538      	push	{r3, r4, r5, lr}
 8026416:	4605      	mov	r5, r0
 8026418:	4b08      	ldr	r3, [pc, #32]	; (802643c <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802641a:	4604      	mov	r4, r0
 802641c:	f845 3b30 	str.w	r3, [r5], #48
 8026420:	4b07      	ldr	r3, [pc, #28]	; (8026440 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8026422:	6818      	ldr	r0, [r3, #0]
 8026424:	6803      	ldr	r3, [r0, #0]
 8026426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026428:	4798      	blx	r3
 802642a:	4628      	mov	r0, r5
 802642c:	f000 f814 	bl	8026458 <_ZN8touchgfx7OutlineD1Ev>
 8026430:	f104 0018 	add.w	r0, r4, #24
 8026434:	f001 f869 	bl	802750a <_ZN8touchgfx15RenderingBufferD1Ev>
 8026438:	4620      	mov	r0, r4
 802643a:	bd38      	pop	{r3, r4, r5, pc}
 802643c:	0802cf30 	.word	0x0802cf30
 8026440:	2000b314 	.word	0x2000b314

08026444 <_ZN8touchgfx6CanvasD0Ev>:
 8026444:	b510      	push	{r4, lr}
 8026446:	4604      	mov	r4, r0
 8026448:	f7ff ffe4 	bl	8026414 <_ZN8touchgfx6CanvasD1Ev>
 802644c:	21bc      	movs	r1, #188	; 0xbc
 802644e:	4620      	mov	r0, r4
 8026450:	f001 f880 	bl	8027554 <_ZdlPvj>
 8026454:	4620      	mov	r0, r4
 8026456:	bd10      	pop	{r4, pc}

08026458 <_ZN8touchgfx7OutlineD1Ev>:
 8026458:	4770      	bx	lr

0802645a <_ZN8touchgfx7OutlineD0Ev>:
 802645a:	b510      	push	{r4, lr}
 802645c:	4604      	mov	r4, r0
 802645e:	2148      	movs	r1, #72	; 0x48
 8026460:	f001 f878 	bl	8027554 <_ZdlPvj>
 8026464:	4620      	mov	r0, r4
 8026466:	bd10      	pop	{r4, pc}

08026468 <_ZN8touchgfx7Outline5resetEv>:
 8026468:	b510      	push	{r4, lr}
 802646a:	4604      	mov	r4, r0
 802646c:	f7f3 ff36 	bl	801a2dc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8026470:	60e0      	str	r0, [r4, #12]
 8026472:	f7f3 ff39 	bl	801a2e8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8026476:	68e3      	ldr	r3, [r4, #12]
 8026478:	2200      	movs	r2, #0
 802647a:	08c0      	lsrs	r0, r0, #3
 802647c:	6123      	str	r3, [r4, #16]
 802647e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026482:	6060      	str	r0, [r4, #4]
 8026484:	82a3      	strh	r3, [r4, #20]
 8026486:	82e3      	strh	r3, [r4, #22]
 8026488:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802648a:	60a2      	str	r2, [r4, #8]
 802648c:	f023 0301 	bic.w	r3, r3, #1
 8026490:	8322      	strh	r2, [r4, #24]
 8026492:	8362      	strh	r2, [r4, #26]
 8026494:	f043 0302 	orr.w	r3, r3, #2
 8026498:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802649c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802649e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80264a2:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80264a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80264aa:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80264ae:	bd10      	pop	{r4, pc}

080264b0 <_ZN8touchgfx7OutlineC1Ev>:
 80264b0:	4b0f      	ldr	r3, [pc, #60]	; (80264f0 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80264b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80264b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80264ba:	b510      	push	{r4, lr}
 80264bc:	6003      	str	r3, [r0, #0]
 80264be:	2300      	movs	r3, #0
 80264c0:	4604      	mov	r4, r0
 80264c2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80264c6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80264ca:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80264ce:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80264d2:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80264d6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80264da:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80264de:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80264e2:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80264e6:	f7ff ffbf 	bl	8026468 <_ZN8touchgfx7Outline5resetEv>
 80264ea:	4620      	mov	r0, r4
 80264ec:	bd10      	pop	{r4, pc}
 80264ee:	bf00      	nop
 80264f0:	0802cf90 	.word	0x0802cf90

080264f4 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80264f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264f8:	b093      	sub	sp, #76	; 0x4c
 80264fa:	4604      	mov	r4, r0
 80264fc:	1156      	asrs	r6, r2, #5
 80264fe:	f002 0e1f 	and.w	lr, r2, #31
 8026502:	981c      	ldr	r0, [sp, #112]	; 0x70
 8026504:	9305      	str	r3, [sp, #20]
 8026506:	1143      	asrs	r3, r0, #5
 8026508:	1145      	asrs	r5, r0, #5
 802650a:	930c      	str	r3, [sp, #48]	; 0x30
 802650c:	f000 031f 	and.w	r3, r0, #31
 8026510:	9303      	str	r3, [sp, #12]
 8026512:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8026514:	42b3      	cmp	r3, r6
 8026516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026518:	bfc8      	it	gt
 802651a:	6326      	strgt	r6, [r4, #48]	; 0x30
 802651c:	42b3      	cmp	r3, r6
 802651e:	bfdc      	itt	le
 8026520:	1c73      	addle	r3, r6, #1
 8026522:	63a3      	strle	r3, [r4, #56]	; 0x38
 8026524:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8026526:	42ab      	cmp	r3, r5
 8026528:	bfc8      	it	gt
 802652a:	462b      	movgt	r3, r5
 802652c:	ea4f 1560 	mov.w	r5, r0, asr #5
 8026530:	bfc8      	it	gt
 8026532:	6323      	strgt	r3, [r4, #48]	; 0x30
 8026534:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026536:	42ab      	cmp	r3, r5
 8026538:	bfd8      	it	le
 802653a:	462b      	movle	r3, r5
 802653c:	ea4f 1561 	mov.w	r5, r1, asr #5
 8026540:	bfdc      	itt	le
 8026542:	3301      	addle	r3, #1
 8026544:	63a3      	strle	r3, [r4, #56]	; 0x38
 8026546:	9b05      	ldr	r3, [sp, #20]
 8026548:	eba3 0a01 	sub.w	sl, r3, r1
 802654c:	1143      	asrs	r3, r0, #5
 802654e:	429e      	cmp	r6, r3
 8026550:	f040 8119 	bne.w	8026786 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8026554:	9b05      	ldr	r3, [sp, #20]
 8026556:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802655a:	9b03      	ldr	r3, [sp, #12]
 802655c:	459e      	cmp	lr, r3
 802655e:	d12c      	bne.n	80265ba <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8026560:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026564:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8026568:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802656c:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8026570:	4291      	cmp	r1, r2
 8026572:	d037      	beq.n	80265e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8026574:	8b61      	ldrh	r1, [r4, #26]
 8026576:	8b22      	ldrh	r2, [r4, #24]
 8026578:	430a      	orrs	r2, r1
 802657a:	d00b      	beq.n	8026594 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802657c:	2b00      	cmp	r3, #0
 802657e:	db09      	blt.n	8026594 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8026580:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8026582:	429a      	cmp	r2, r3
 8026584:	dd06      	ble.n	8026594 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8026586:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802658a:	429a      	cmp	r2, r3
 802658c:	d308      	bcc.n	80265a0 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 802658e:	2301      	movs	r3, #1
 8026590:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026594:	f8a4 c014 	strh.w	ip, [r4, #20]
 8026598:	82e6      	strh	r6, [r4, #22]
 802659a:	2300      	movs	r3, #0
 802659c:	8323      	strh	r3, [r4, #24]
 802659e:	e0c6      	b.n	802672e <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80265a0:	f104 0314 	add.w	r3, r4, #20
 80265a4:	6922      	ldr	r2, [r4, #16]
 80265a6:	cb03      	ldmia	r3!, {r0, r1}
 80265a8:	6010      	str	r0, [r2, #0]
 80265aa:	6051      	str	r1, [r2, #4]
 80265ac:	6923      	ldr	r3, [r4, #16]
 80265ae:	3308      	adds	r3, #8
 80265b0:	6123      	str	r3, [r4, #16]
 80265b2:	68a3      	ldr	r3, [r4, #8]
 80265b4:	3301      	adds	r3, #1
 80265b6:	60a3      	str	r3, [r4, #8]
 80265b8:	e7ec      	b.n	8026594 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80265ba:	9b05      	ldr	r3, [sp, #20]
 80265bc:	45ac      	cmp	ip, r5
 80265be:	f001 011f 	and.w	r1, r1, #31
 80265c2:	8b20      	ldrh	r0, [r4, #24]
 80265c4:	f003 031f 	and.w	r3, r3, #31
 80265c8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80265cc:	9304      	str	r3, [sp, #16]
 80265ce:	9b03      	ldr	r3, [sp, #12]
 80265d0:	eba3 020e 	sub.w	r2, r3, lr
 80265d4:	d109      	bne.n	80265ea <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 80265d6:	9b04      	ldr	r3, [sp, #16]
 80265d8:	4410      	add	r0, r2
 80265da:	4419      	add	r1, r3
 80265dc:	8320      	strh	r0, [r4, #24]
 80265de:	fb02 8201 	mla	r2, r2, r1, r8
 80265e2:	8362      	strh	r2, [r4, #26]
 80265e4:	b013      	add	sp, #76	; 0x4c
 80265e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265ea:	f1ba 0f00 	cmp.w	sl, #0
 80265ee:	f2c0 80a0 	blt.w	8026732 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 80265f2:	f1c1 0320 	rsb	r3, r1, #32
 80265f6:	f04f 0b20 	mov.w	fp, #32
 80265fa:	435a      	muls	r2, r3
 80265fc:	2301      	movs	r3, #1
 80265fe:	9302      	str	r3, [sp, #8]
 8026600:	4459      	add	r1, fp
 8026602:	fb92 f7fa 	sdiv	r7, r2, sl
 8026606:	fb0a 2217 	mls	r2, sl, r7, r2
 802660a:	2a00      	cmp	r2, #0
 802660c:	bfbc      	itt	lt
 802660e:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8026612:	4452      	addlt	r2, sl
 8026614:	fb07 8101 	mla	r1, r7, r1, r8
 8026618:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802661c:	4438      	add	r0, r7
 802661e:	b20b      	sxth	r3, r1
 8026620:	9902      	ldr	r1, [sp, #8]
 8026622:	b200      	sxth	r0, r0
 8026624:	9301      	str	r3, [sp, #4]
 8026626:	8363      	strh	r3, [r4, #26]
 8026628:	186b      	adds	r3, r5, r1
 802662a:	0435      	lsls	r5, r6, #16
 802662c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8026630:	8320      	strh	r0, [r4, #24]
 8026632:	eb03 0905 	add.w	r9, r3, r5
 8026636:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 802663a:	9300      	str	r3, [sp, #0]
 802663c:	45c1      	cmp	r9, r8
 802663e:	9505      	str	r5, [sp, #20]
 8026640:	d014      	beq.n	802666c <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8026642:	9b01      	ldr	r3, [sp, #4]
 8026644:	4303      	orrs	r3, r0
 8026646:	d00b      	beq.n	8026660 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8026648:	2900      	cmp	r1, #0
 802664a:	db09      	blt.n	8026660 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802664c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802664e:	428b      	cmp	r3, r1
 8026650:	dd06      	ble.n	8026660 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8026652:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026656:	4299      	cmp	r1, r3
 8026658:	d374      	bcc.n	8026744 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 802665a:	2301      	movs	r3, #1
 802665c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026660:	9b00      	ldr	r3, [sp, #0]
 8026662:	82e6      	strh	r6, [r4, #22]
 8026664:	82a3      	strh	r3, [r4, #20]
 8026666:	2300      	movs	r3, #0
 8026668:	8323      	strh	r3, [r4, #24]
 802666a:	8363      	strh	r3, [r4, #26]
 802666c:	9900      	ldr	r1, [sp, #0]
 802666e:	eb0e 0307 	add.w	r3, lr, r7
 8026672:	458c      	cmp	ip, r1
 8026674:	d04e      	beq.n	8026714 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8026676:	9903      	ldr	r1, [sp, #12]
 8026678:	eba2 020a 	sub.w	r2, r2, sl
 802667c:	1ac9      	subs	r1, r1, r3
 802667e:	9201      	str	r2, [sp, #4]
 8026680:	440f      	add	r7, r1
 8026682:	017f      	lsls	r7, r7, #5
 8026684:	fb97 fefa 	sdiv	lr, r7, sl
 8026688:	fb0a 771e 	mls	r7, sl, lr, r7
 802668c:	2f00      	cmp	r7, #0
 802668e:	bfbc      	itt	lt
 8026690:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8026694:	4457      	addlt	r7, sl
 8026696:	f10e 0101 	add.w	r1, lr, #1
 802669a:	9106      	str	r1, [sp, #24]
 802669c:	9a01      	ldr	r2, [sp, #4]
 802669e:	8b20      	ldrh	r0, [r4, #24]
 80266a0:	19d2      	adds	r2, r2, r7
 80266a2:	8b61      	ldrh	r1, [r4, #26]
 80266a4:	9d02      	ldr	r5, [sp, #8]
 80266a6:	9201      	str	r2, [sp, #4]
 80266a8:	bf5b      	ittet	pl
 80266aa:	eba2 020a 	subpl.w	r2, r2, sl
 80266ae:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 80266b2:	46f0      	movmi	r8, lr
 80266b4:	9201      	strpl	r2, [sp, #4]
 80266b6:	9a00      	ldr	r2, [sp, #0]
 80266b8:	4440      	add	r0, r8
 80266ba:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80266be:	4443      	add	r3, r8
 80266c0:	442a      	add	r2, r5
 80266c2:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80266c6:	9d05      	ldr	r5, [sp, #20]
 80266c8:	b200      	sxth	r0, r0
 80266ca:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80266ce:	b209      	sxth	r1, r1
 80266d0:	4415      	add	r5, r2
 80266d2:	8320      	strh	r0, [r4, #24]
 80266d4:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80266d8:	8361      	strh	r1, [r4, #26]
 80266da:	9200      	str	r2, [sp, #0]
 80266dc:	454d      	cmp	r5, r9
 80266de:	d016      	beq.n	802670e <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 80266e0:	4301      	orrs	r1, r0
 80266e2:	d00d      	beq.n	8026700 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80266e4:	f1b8 0f00 	cmp.w	r8, #0
 80266e8:	db0a      	blt.n	8026700 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80266ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80266ec:	4541      	cmp	r1, r8
 80266ee:	dd07      	ble.n	8026700 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80266f0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80266f4:	4288      	cmp	r0, r1
 80266f6:	d335      	bcc.n	8026764 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 80266f8:	f04f 0101 	mov.w	r1, #1
 80266fc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8026700:	9900      	ldr	r1, [sp, #0]
 8026702:	82e6      	strh	r6, [r4, #22]
 8026704:	82a1      	strh	r1, [r4, #20]
 8026706:	f04f 0100 	mov.w	r1, #0
 802670a:	8321      	strh	r1, [r4, #24]
 802670c:	8361      	strh	r1, [r4, #26]
 802670e:	9a00      	ldr	r2, [sp, #0]
 8026710:	4594      	cmp	ip, r2
 8026712:	d1c3      	bne.n	802669c <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8026714:	9a03      	ldr	r2, [sp, #12]
 8026716:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 802671a:	1ad3      	subs	r3, r2, r3
 802671c:	8b22      	ldrh	r2, [r4, #24]
 802671e:	441a      	add	r2, r3
 8026720:	8322      	strh	r2, [r4, #24]
 8026722:	9a04      	ldr	r2, [sp, #16]
 8026724:	3220      	adds	r2, #32
 8026726:	eba2 020b 	sub.w	r2, r2, fp
 802672a:	fb03 c302 	mla	r3, r3, r2, ip
 802672e:	8363      	strh	r3, [r4, #26]
 8026730:	e758      	b.n	80265e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8026732:	f04f 33ff 	mov.w	r3, #4294967295
 8026736:	434a      	muls	r2, r1
 8026738:	f1ca 0a00 	rsb	sl, sl, #0
 802673c:	f04f 0b00 	mov.w	fp, #0
 8026740:	9302      	str	r3, [sp, #8]
 8026742:	e75d      	b.n	8026600 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8026744:	f104 0314 	add.w	r3, r4, #20
 8026748:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802674c:	cb03      	ldmia	r3!, {r0, r1}
 802674e:	f8c8 0000 	str.w	r0, [r8]
 8026752:	f8c8 1004 	str.w	r1, [r8, #4]
 8026756:	6923      	ldr	r3, [r4, #16]
 8026758:	3308      	adds	r3, #8
 802675a:	6123      	str	r3, [r4, #16]
 802675c:	68a3      	ldr	r3, [r4, #8]
 802675e:	3301      	adds	r3, #1
 8026760:	60a3      	str	r3, [r4, #8]
 8026762:	e77d      	b.n	8026660 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8026764:	f104 0814 	add.w	r8, r4, #20
 8026768:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802676c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8026770:	f8c9 0000 	str.w	r0, [r9]
 8026774:	f8c9 1004 	str.w	r1, [r9, #4]
 8026778:	6921      	ldr	r1, [r4, #16]
 802677a:	3108      	adds	r1, #8
 802677c:	6121      	str	r1, [r4, #16]
 802677e:	68a1      	ldr	r1, [r4, #8]
 8026780:	3101      	adds	r1, #1
 8026782:	60a1      	str	r1, [r4, #8]
 8026784:	e7bc      	b.n	8026700 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8026786:	1a83      	subs	r3, r0, r2
 8026788:	9301      	str	r3, [sp, #4]
 802678a:	f1ba 0f00 	cmp.w	sl, #0
 802678e:	f040 8094 	bne.w	80268ba <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8026792:	9a01      	ldr	r2, [sp, #4]
 8026794:	0049      	lsls	r1, r1, #1
 8026796:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802679a:	2a00      	cmp	r2, #0
 802679c:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 80267a0:	8b62      	ldrh	r2, [r4, #26]
 80267a2:	bfaa      	itet	ge
 80267a4:	f04f 0a20 	movge.w	sl, #32
 80267a8:	f04f 38ff 	movlt.w	r8, #4294967295
 80267ac:	f04f 0801 	movge.w	r8, #1
 80267b0:	8b21      	ldrh	r1, [r4, #24]
 80267b2:	ebaa 0e0e 	sub.w	lr, sl, lr
 80267b6:	4471      	add	r1, lr
 80267b8:	fb0e 2e03 	mla	lr, lr, r3, r2
 80267bc:	eb08 0206 	add.w	r2, r8, r6
 80267c0:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80267c4:	b209      	sxth	r1, r1
 80267c6:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 80267ca:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 80267ce:	8321      	strh	r1, [r4, #24]
 80267d0:	fa0f fe8e 	sxth.w	lr, lr
 80267d4:	42b7      	cmp	r7, r6
 80267d6:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80267da:	d013      	beq.n	8026804 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 80267dc:	ea51 010e 	orrs.w	r1, r1, lr
 80267e0:	d00b      	beq.n	80267fa <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80267e2:	2800      	cmp	r0, #0
 80267e4:	db09      	blt.n	80267fa <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80267e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80267e8:	4281      	cmp	r1, r0
 80267ea:	dd06      	ble.n	80267fa <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80267ec:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80267f0:	4288      	cmp	r0, r1
 80267f2:	d339      	bcc.n	8026868 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 80267f4:	2101      	movs	r1, #1
 80267f6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80267fa:	2100      	movs	r1, #0
 80267fc:	82a5      	strh	r5, [r4, #20]
 80267fe:	82e2      	strh	r2, [r4, #22]
 8026800:	8321      	strh	r1, [r4, #24]
 8026802:	8361      	strh	r1, [r4, #26]
 8026804:	f1aa 0610 	sub.w	r6, sl, #16
 8026808:	f04f 0e00 	mov.w	lr, #0
 802680c:	f04f 0b01 	mov.w	fp, #1
 8026810:	0076      	lsls	r6, r6, #1
 8026812:	fb06 f703 	mul.w	r7, r6, r3
 8026816:	b236      	sxth	r6, r6
 8026818:	b23f      	sxth	r7, r7
 802681a:	ea46 0107 	orr.w	r1, r6, r7
 802681e:	9100      	str	r1, [sp, #0]
 8026820:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026822:	428a      	cmp	r2, r1
 8026824:	d03e      	beq.n	80268a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8026826:	4442      	add	r2, r8
 8026828:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802682c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8026830:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8026834:	8326      	strh	r6, [r4, #24]
 8026836:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802683a:	8367      	strh	r7, [r4, #26]
 802683c:	4584      	cmp	ip, r0
 802683e:	d0ef      	beq.n	8026820 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8026840:	9800      	ldr	r0, [sp, #0]
 8026842:	b150      	cbz	r0, 802685a <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8026844:	2900      	cmp	r1, #0
 8026846:	db08      	blt.n	802685a <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8026848:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802684a:	4288      	cmp	r0, r1
 802684c:	dd05      	ble.n	802685a <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802684e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026852:	4288      	cmp	r0, r1
 8026854:	d315      	bcc.n	8026882 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8026856:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 802685a:	82a5      	strh	r5, [r4, #20]
 802685c:	82e2      	strh	r2, [r4, #22]
 802685e:	f8a4 e018 	strh.w	lr, [r4, #24]
 8026862:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8026866:	e7db      	b.n	8026820 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8026868:	f104 0614 	add.w	r6, r4, #20
 802686c:	6927      	ldr	r7, [r4, #16]
 802686e:	ce03      	ldmia	r6!, {r0, r1}
 8026870:	6038      	str	r0, [r7, #0]
 8026872:	6079      	str	r1, [r7, #4]
 8026874:	6921      	ldr	r1, [r4, #16]
 8026876:	3108      	adds	r1, #8
 8026878:	6121      	str	r1, [r4, #16]
 802687a:	68a1      	ldr	r1, [r4, #8]
 802687c:	3101      	adds	r1, #1
 802687e:	60a1      	str	r1, [r4, #8]
 8026880:	e7bb      	b.n	80267fa <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8026882:	f104 0c14 	add.w	ip, r4, #20
 8026886:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802688a:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 802688e:	f8c9 0000 	str.w	r0, [r9]
 8026892:	f8c9 1004 	str.w	r1, [r9, #4]
 8026896:	6921      	ldr	r1, [r4, #16]
 8026898:	3108      	adds	r1, #8
 802689a:	6121      	str	r1, [r4, #16]
 802689c:	68a1      	ldr	r1, [r4, #8]
 802689e:	3101      	adds	r1, #1
 80268a0:	60a1      	str	r1, [r4, #8]
 80268a2:	e7da      	b.n	802685a <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80268a4:	9a03      	ldr	r2, [sp, #12]
 80268a6:	8b61      	ldrh	r1, [r4, #26]
 80268a8:	f1a2 0c20 	sub.w	ip, r2, #32
 80268ac:	8b22      	ldrh	r2, [r4, #24]
 80268ae:	44d4      	add	ip, sl
 80268b0:	4462      	add	r2, ip
 80268b2:	fb0c 1303 	mla	r3, ip, r3, r1
 80268b6:	8322      	strh	r2, [r4, #24]
 80268b8:	e739      	b.n	802672e <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80268ba:	9b01      	ldr	r3, [sp, #4]
 80268bc:	2b00      	cmp	r3, #0
 80268be:	db3f      	blt.n	8026940 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 80268c0:	2201      	movs	r2, #1
 80268c2:	f1ce 0320 	rsb	r3, lr, #32
 80268c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80268c8:	2220      	movs	r2, #32
 80268ca:	fb0a f303 	mul.w	r3, sl, r3
 80268ce:	9202      	str	r2, [sp, #8]
 80268d0:	9a01      	ldr	r2, [sp, #4]
 80268d2:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80268d6:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80268da:	fb93 f7f2 	sdiv	r7, r3, r2
 80268de:	fb02 3317 	mls	r3, r2, r7, r3
 80268e2:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80268e6:	2b00      	cmp	r3, #0
 80268e8:	9308      	str	r3, [sp, #32]
 80268ea:	bfbc      	itt	lt
 80268ec:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80268f0:	189b      	addlt	r3, r3, r2
 80268f2:	eb07 0b01 	add.w	fp, r7, r1
 80268f6:	bfb8      	it	lt
 80268f8:	9308      	strlt	r3, [sp, #32]
 80268fa:	ea4f 136b 	mov.w	r3, fp, asr #5
 80268fe:	9304      	str	r3, [sp, #16]
 8026900:	9b02      	ldr	r3, [sp, #8]
 8026902:	4573      	cmp	r3, lr
 8026904:	d133      	bne.n	802696e <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8026906:	9b04      	ldr	r3, [sp, #16]
 8026908:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 802690c:	454b      	cmp	r3, r9
 802690e:	d045      	beq.n	802699c <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8026910:	8b62      	ldrh	r2, [r4, #26]
 8026912:	8b23      	ldrh	r3, [r4, #24]
 8026914:	4313      	orrs	r3, r2
 8026916:	d00c      	beq.n	8026932 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8026918:	f1b8 0f00 	cmp.w	r8, #0
 802691c:	db09      	blt.n	8026932 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802691e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026920:	4543      	cmp	r3, r8
 8026922:	dd06      	ble.n	8026932 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8026924:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8026928:	429a      	cmp	r2, r3
 802692a:	d313      	bcc.n	8026954 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 802692c:	2301      	movs	r3, #1
 802692e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026932:	9b04      	ldr	r3, [sp, #16]
 8026934:	82e6      	strh	r6, [r4, #22]
 8026936:	82a3      	strh	r3, [r4, #20]
 8026938:	2300      	movs	r3, #0
 802693a:	8323      	strh	r3, [r4, #24]
 802693c:	8363      	strh	r3, [r4, #26]
 802693e:	e02d      	b.n	802699c <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8026940:	9a01      	ldr	r2, [sp, #4]
 8026942:	fb0a f30e 	mul.w	r3, sl, lr
 8026946:	4252      	negs	r2, r2
 8026948:	9201      	str	r2, [sp, #4]
 802694a:	f04f 32ff 	mov.w	r2, #4294967295
 802694e:	920b      	str	r2, [sp, #44]	; 0x2c
 8026950:	2200      	movs	r2, #0
 8026952:	e7bc      	b.n	80268ce <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8026954:	f104 0314 	add.w	r3, r4, #20
 8026958:	6922      	ldr	r2, [r4, #16]
 802695a:	cb03      	ldmia	r3!, {r0, r1}
 802695c:	6010      	str	r0, [r2, #0]
 802695e:	6051      	str	r1, [r2, #4]
 8026960:	6923      	ldr	r3, [r4, #16]
 8026962:	3308      	adds	r3, #8
 8026964:	6123      	str	r3, [r4, #16]
 8026966:	68a3      	ldr	r3, [r4, #8]
 8026968:	3301      	adds	r3, #1
 802696a:	60a3      	str	r3, [r4, #8]
 802696c:	e7e1      	b.n	8026932 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802696e:	f00b 031f 	and.w	r3, fp, #31
 8026972:	f001 011f 	and.w	r1, r1, #31
 8026976:	8b20      	ldrh	r0, [r4, #24]
 8026978:	9309      	str	r3, [sp, #36]	; 0x24
 802697a:	9b02      	ldr	r3, [sp, #8]
 802697c:	eba3 020e 	sub.w	r2, r3, lr
 8026980:	8b63      	ldrh	r3, [r4, #26]
 8026982:	9300      	str	r3, [sp, #0]
 8026984:	9b04      	ldr	r3, [sp, #16]
 8026986:	42ab      	cmp	r3, r5
 8026988:	f040 80ef 	bne.w	8026b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 802698c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802698e:	4410      	add	r0, r2
 8026990:	4419      	add	r1, r3
 8026992:	9b00      	ldr	r3, [sp, #0]
 8026994:	8320      	strh	r0, [r4, #24]
 8026996:	fb02 3101 	mla	r1, r2, r1, r3
 802699a:	8361      	strh	r1, [r4, #26]
 802699c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802699e:	9904      	ldr	r1, [sp, #16]
 80269a0:	4433      	add	r3, r6
 80269a2:	9300      	str	r3, [sp, #0]
 80269a4:	9a00      	ldr	r2, [sp, #0]
 80269a6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80269aa:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 80269ae:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80269b2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80269b6:	4288      	cmp	r0, r1
 80269b8:	d018      	beq.n	80269ec <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 80269ba:	8b60      	ldrh	r0, [r4, #26]
 80269bc:	8b21      	ldrh	r1, [r4, #24]
 80269be:	ea50 0201 	orrs.w	r2, r0, r1
 80269c2:	d00c      	beq.n	80269de <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80269c4:	2b00      	cmp	r3, #0
 80269c6:	db0a      	blt.n	80269de <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80269c8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80269ca:	4299      	cmp	r1, r3
 80269cc:	dd07      	ble.n	80269de <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80269ce:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80269d2:	4299      	cmp	r1, r3
 80269d4:	f0c0 818b 	bcc.w	8026cee <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 80269d8:	2301      	movs	r3, #1
 80269da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80269de:	9b04      	ldr	r3, [sp, #16]
 80269e0:	82a3      	strh	r3, [r4, #20]
 80269e2:	9b00      	ldr	r3, [sp, #0]
 80269e4:	82e3      	strh	r3, [r4, #22]
 80269e6:	2300      	movs	r3, #0
 80269e8:	8323      	strh	r3, [r4, #24]
 80269ea:	8363      	strh	r3, [r4, #26]
 80269ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80269ee:	9a00      	ldr	r2, [sp, #0]
 80269f0:	4293      	cmp	r3, r2
 80269f2:	f000 808d 	beq.w	8026b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 80269f6:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80269fa:	9901      	ldr	r1, [sp, #4]
 80269fc:	9801      	ldr	r0, [sp, #4]
 80269fe:	fb93 f1f1 	sdiv	r1, r3, r1
 8026a02:	fb00 3311 	mls	r3, r0, r1, r3
 8026a06:	9106      	str	r1, [sp, #24]
 8026a08:	2b00      	cmp	r3, #0
 8026a0a:	9307      	str	r3, [sp, #28]
 8026a0c:	da04      	bge.n	8026a18 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8026a0e:	1e4b      	subs	r3, r1, #1
 8026a10:	9306      	str	r3, [sp, #24]
 8026a12:	9b07      	ldr	r3, [sp, #28]
 8026a14:	4403      	add	r3, r0
 8026a16:	9307      	str	r3, [sp, #28]
 8026a18:	9b08      	ldr	r3, [sp, #32]
 8026a1a:	f04f 0c00 	mov.w	ip, #0
 8026a1e:	9901      	ldr	r1, [sp, #4]
 8026a20:	1a5b      	subs	r3, r3, r1
 8026a22:	4659      	mov	r1, fp
 8026a24:	9308      	str	r3, [sp, #32]
 8026a26:	9b02      	ldr	r3, [sp, #8]
 8026a28:	f1c3 0320 	rsb	r3, r3, #32
 8026a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8026a2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026a30:	9b02      	ldr	r3, [sp, #8]
 8026a32:	1a1b      	subs	r3, r3, r0
 8026a34:	9309      	str	r3, [sp, #36]	; 0x24
 8026a36:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8026a3a:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8026a3e:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8026a42:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8026a46:	181b      	adds	r3, r3, r0
 8026a48:	bf58      	it	pl
 8026a4a:	9801      	ldrpl	r0, [sp, #4]
 8026a4c:	9308      	str	r3, [sp, #32]
 8026a4e:	bf54      	ite	pl
 8026a50:	1a1b      	subpl	r3, r3, r0
 8026a52:	9d06      	ldrmi	r5, [sp, #24]
 8026a54:	9802      	ldr	r0, [sp, #8]
 8026a56:	bf5e      	ittt	pl
 8026a58:	9308      	strpl	r3, [sp, #32]
 8026a5a:	9b06      	ldrpl	r3, [sp, #24]
 8026a5c:	1c5d      	addpl	r5, r3, #1
 8026a5e:	44ab      	add	fp, r5
 8026a60:	ea4f 136b 	mov.w	r3, fp, asr #5
 8026a64:	9304      	str	r3, [sp, #16]
 8026a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026a68:	4283      	cmp	r3, r0
 8026a6a:	f040 815a 	bne.w	8026d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8026a6e:	9b04      	ldr	r3, [sp, #16]
 8026a70:	9a00      	ldr	r2, [sp, #0]
 8026a72:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8026a76:	4543      	cmp	r3, r8
 8026a78:	d01a      	beq.n	8026ab0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8026a7a:	8b61      	ldrh	r1, [r4, #26]
 8026a7c:	8b23      	ldrh	r3, [r4, #24]
 8026a7e:	430b      	orrs	r3, r1
 8026a80:	d00e      	beq.n	8026aa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026a82:	f1be 0f00 	cmp.w	lr, #0
 8026a86:	db0b      	blt.n	8026aa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026a8a:	4573      	cmp	r3, lr
 8026a8c:	dd08      	ble.n	8026aa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026a8e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026a92:	4299      	cmp	r1, r3
 8026a94:	f0c0 8138 	bcc.w	8026d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8026a98:	f04f 0301 	mov.w	r3, #1
 8026a9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026aa0:	9b04      	ldr	r3, [sp, #16]
 8026aa2:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026aa6:	82a3      	strh	r3, [r4, #20]
 8026aa8:	9b00      	ldr	r3, [sp, #0]
 8026aaa:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026aae:	82e3      	strh	r3, [r4, #22]
 8026ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026ab2:	9a00      	ldr	r2, [sp, #0]
 8026ab4:	441a      	add	r2, r3
 8026ab6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026aba:	9200      	str	r2, [sp, #0]
 8026abc:	9900      	ldr	r1, [sp, #0]
 8026abe:	9a04      	ldr	r2, [sp, #16]
 8026ac0:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8026ac4:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8026ac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026acc:	4288      	cmp	r0, r1
 8026ace:	d01a      	beq.n	8026b06 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8026ad0:	8b60      	ldrh	r0, [r4, #26]
 8026ad2:	8b21      	ldrh	r1, [r4, #24]
 8026ad4:	ea50 0201 	orrs.w	r2, r0, r1
 8026ad8:	d00d      	beq.n	8026af6 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8026ada:	2b00      	cmp	r3, #0
 8026adc:	db0b      	blt.n	8026af6 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8026ade:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026ae0:	4299      	cmp	r1, r3
 8026ae2:	dd08      	ble.n	8026af6 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8026ae4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026ae8:	4299      	cmp	r1, r3
 8026aea:	f0c0 81f9 	bcc.w	8026ee0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8026aee:	f04f 0301 	mov.w	r3, #1
 8026af2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026af6:	9b04      	ldr	r3, [sp, #16]
 8026af8:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026afc:	82a3      	strh	r3, [r4, #20]
 8026afe:	9b00      	ldr	r3, [sp, #0]
 8026b00:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026b04:	82e3      	strh	r3, [r4, #22]
 8026b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026b08:	4659      	mov	r1, fp
 8026b0a:	9a00      	ldr	r2, [sp, #0]
 8026b0c:	4293      	cmp	r3, r2
 8026b0e:	d192      	bne.n	8026a36 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8026b10:	9b02      	ldr	r3, [sp, #8]
 8026b12:	f1c3 0c20 	rsb	ip, r3, #32
 8026b16:	9b05      	ldr	r3, [sp, #20]
 8026b18:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8026b1c:	9b03      	ldr	r3, [sp, #12]
 8026b1e:	459c      	cmp	ip, r3
 8026b20:	f040 81f8 	bne.w	8026f14 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8026b24:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026b28:	9a00      	ldr	r2, [sp, #0]
 8026b2a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8026b2e:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8026b32:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026b36:	4288      	cmp	r0, r1
 8026b38:	f43f ad54 	beq.w	80265e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8026b3c:	8b60      	ldrh	r0, [r4, #26]
 8026b3e:	8b21      	ldrh	r1, [r4, #24]
 8026b40:	ea50 0201 	orrs.w	r2, r0, r1
 8026b44:	d00c      	beq.n	8026b60 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8026b46:	2b00      	cmp	r3, #0
 8026b48:	db0a      	blt.n	8026b60 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8026b4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026b4c:	4299      	cmp	r1, r3
 8026b4e:	dd07      	ble.n	8026b60 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8026b50:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026b54:	4299      	cmp	r1, r3
 8026b56:	f0c0 81d0 	bcc.w	8026efa <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8026b5a:	2301      	movs	r3, #1
 8026b5c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026b60:	9b00      	ldr	r3, [sp, #0]
 8026b62:	f8a4 e014 	strh.w	lr, [r4, #20]
 8026b66:	82e3      	strh	r3, [r4, #22]
 8026b68:	e517      	b.n	802659a <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8026b6a:	2f00      	cmp	r7, #0
 8026b6c:	f2c0 8097 	blt.w	8026c9e <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8026b70:	2301      	movs	r3, #1
 8026b72:	f1c1 0c20 	rsb	ip, r1, #32
 8026b76:	9307      	str	r3, [sp, #28]
 8026b78:	2320      	movs	r3, #32
 8026b7a:	fb02 f20c 	mul.w	r2, r2, ip
 8026b7e:	9306      	str	r3, [sp, #24]
 8026b80:	9b06      	ldr	r3, [sp, #24]
 8026b82:	fb92 fcf7 	sdiv	ip, r2, r7
 8026b86:	fb07 221c 	mls	r2, r7, ip, r2
 8026b8a:	4419      	add	r1, r3
 8026b8c:	9b00      	ldr	r3, [sp, #0]
 8026b8e:	2a00      	cmp	r2, #0
 8026b90:	bfbc      	itt	lt
 8026b92:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8026b96:	19d2      	addlt	r2, r2, r7
 8026b98:	fb0c 3101 	mla	r1, ip, r1, r3
 8026b9c:	9b07      	ldr	r3, [sp, #28]
 8026b9e:	4460      	add	r0, ip
 8026ba0:	441d      	add	r5, r3
 8026ba2:	0433      	lsls	r3, r6, #16
 8026ba4:	b200      	sxth	r0, r0
 8026ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8026ba8:	18eb      	adds	r3, r5, r3
 8026baa:	b209      	sxth	r1, r1
 8026bac:	8320      	strh	r0, [r4, #24]
 8026bae:	454b      	cmp	r3, r9
 8026bb0:	8361      	strh	r1, [r4, #26]
 8026bb2:	d014      	beq.n	8026bde <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8026bb4:	ea50 0301 	orrs.w	r3, r0, r1
 8026bb8:	d00c      	beq.n	8026bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8026bba:	f1b8 0f00 	cmp.w	r8, #0
 8026bbe:	db09      	blt.n	8026bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8026bc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026bc2:	4543      	cmp	r3, r8
 8026bc4:	dd06      	ble.n	8026bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8026bc6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026bca:	4299      	cmp	r1, r3
 8026bcc:	d36e      	bcc.n	8026cac <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8026bce:	2301      	movs	r3, #1
 8026bd0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026bd4:	2300      	movs	r3, #0
 8026bd6:	82a5      	strh	r5, [r4, #20]
 8026bd8:	82e6      	strh	r6, [r4, #22]
 8026bda:	8323      	strh	r3, [r4, #24]
 8026bdc:	8363      	strh	r3, [r4, #26]
 8026bde:	9904      	ldr	r1, [sp, #16]
 8026be0:	eb0e 030c 	add.w	r3, lr, ip
 8026be4:	42a9      	cmp	r1, r5
 8026be6:	d04d      	beq.n	8026c84 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8026be8:	9902      	ldr	r1, [sp, #8]
 8026bea:	1bd2      	subs	r2, r2, r7
 8026bec:	1ac9      	subs	r1, r1, r3
 8026bee:	9200      	str	r2, [sp, #0]
 8026bf0:	448c      	add	ip, r1
 8026bf2:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8026bf6:	fb9c fef7 	sdiv	lr, ip, r7
 8026bfa:	fb07 cc1e 	mls	ip, r7, lr, ip
 8026bfe:	f1bc 0f00 	cmp.w	ip, #0
 8026c02:	bfbc      	itt	lt
 8026c04:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8026c08:	44bc      	addlt	ip, r7
 8026c0a:	f10e 0101 	add.w	r1, lr, #1
 8026c0e:	910d      	str	r1, [sp, #52]	; 0x34
 8026c10:	9a00      	ldr	r2, [sp, #0]
 8026c12:	8b20      	ldrh	r0, [r4, #24]
 8026c14:	eb12 020c 	adds.w	r2, r2, ip
 8026c18:	8b61      	ldrh	r1, [r4, #26]
 8026c1a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8026c1e:	9200      	str	r2, [sp, #0]
 8026c20:	bf5b      	ittet	pl
 8026c22:	1bd2      	subpl	r2, r2, r7
 8026c24:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8026c28:	46f0      	movmi	r8, lr
 8026c2a:	9200      	strpl	r2, [sp, #0]
 8026c2c:	9a07      	ldr	r2, [sp, #28]
 8026c2e:	4440      	add	r0, r8
 8026c30:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8026c34:	4443      	add	r3, r8
 8026c36:	4415      	add	r5, r2
 8026c38:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026c3e:	b200      	sxth	r0, r0
 8026c40:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8026c44:	442a      	add	r2, r5
 8026c46:	b209      	sxth	r1, r1
 8026c48:	8320      	strh	r0, [r4, #24]
 8026c4a:	454a      	cmp	r2, r9
 8026c4c:	8361      	strh	r1, [r4, #26]
 8026c4e:	d016      	beq.n	8026c7e <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8026c50:	ea50 0201 	orrs.w	r2, r0, r1
 8026c54:	d00d      	beq.n	8026c72 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8026c56:	f1b8 0f00 	cmp.w	r8, #0
 8026c5a:	db0a      	blt.n	8026c72 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8026c5c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026c5e:	4541      	cmp	r1, r8
 8026c60:	dd07      	ble.n	8026c72 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8026c62:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026c66:	4288      	cmp	r0, r1
 8026c68:	d330      	bcc.n	8026ccc <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8026c6a:	f04f 0201 	mov.w	r2, #1
 8026c6e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8026c72:	f04f 0200 	mov.w	r2, #0
 8026c76:	82a5      	strh	r5, [r4, #20]
 8026c78:	82e6      	strh	r6, [r4, #22]
 8026c7a:	8322      	strh	r2, [r4, #24]
 8026c7c:	8362      	strh	r2, [r4, #26]
 8026c7e:	9904      	ldr	r1, [sp, #16]
 8026c80:	42a9      	cmp	r1, r5
 8026c82:	d1c5      	bne.n	8026c10 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8026c84:	9a02      	ldr	r2, [sp, #8]
 8026c86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026c88:	1ad3      	subs	r3, r2, r3
 8026c8a:	8b22      	ldrh	r2, [r4, #24]
 8026c8c:	3120      	adds	r1, #32
 8026c8e:	441a      	add	r2, r3
 8026c90:	8322      	strh	r2, [r4, #24]
 8026c92:	9a06      	ldr	r2, [sp, #24]
 8026c94:	1a89      	subs	r1, r1, r2
 8026c96:	8b62      	ldrh	r2, [r4, #26]
 8026c98:	fb03 2301 	mla	r3, r3, r1, r2
 8026c9c:	e64e      	b.n	802693c <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8026c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8026ca2:	434a      	muls	r2, r1
 8026ca4:	427f      	negs	r7, r7
 8026ca6:	9307      	str	r3, [sp, #28]
 8026ca8:	2300      	movs	r3, #0
 8026caa:	e768      	b.n	8026b7e <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8026cac:	f104 0314 	add.w	r3, r4, #20
 8026cb0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8026cb4:	cb03      	ldmia	r3!, {r0, r1}
 8026cb6:	f8c8 0000 	str.w	r0, [r8]
 8026cba:	f8c8 1004 	str.w	r1, [r8, #4]
 8026cbe:	6923      	ldr	r3, [r4, #16]
 8026cc0:	3308      	adds	r3, #8
 8026cc2:	6123      	str	r3, [r4, #16]
 8026cc4:	68a3      	ldr	r3, [r4, #8]
 8026cc6:	3301      	adds	r3, #1
 8026cc8:	60a3      	str	r3, [r4, #8]
 8026cca:	e783      	b.n	8026bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8026ccc:	f104 0814 	add.w	r8, r4, #20
 8026cd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8026cd4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8026cd8:	f8c9 0000 	str.w	r0, [r9]
 8026cdc:	f8c9 1004 	str.w	r1, [r9, #4]
 8026ce0:	6921      	ldr	r1, [r4, #16]
 8026ce2:	3108      	adds	r1, #8
 8026ce4:	6121      	str	r1, [r4, #16]
 8026ce6:	68a1      	ldr	r1, [r4, #8]
 8026ce8:	3101      	adds	r1, #1
 8026cea:	60a1      	str	r1, [r4, #8]
 8026cec:	e7c1      	b.n	8026c72 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8026cee:	f104 0314 	add.w	r3, r4, #20
 8026cf2:	6925      	ldr	r5, [r4, #16]
 8026cf4:	cb03      	ldmia	r3!, {r0, r1}
 8026cf6:	6028      	str	r0, [r5, #0]
 8026cf8:	6069      	str	r1, [r5, #4]
 8026cfa:	6923      	ldr	r3, [r4, #16]
 8026cfc:	3308      	adds	r3, #8
 8026cfe:	6123      	str	r3, [r4, #16]
 8026d00:	68a3      	ldr	r3, [r4, #8]
 8026d02:	3301      	adds	r3, #1
 8026d04:	60a3      	str	r3, [r4, #8]
 8026d06:	e66a      	b.n	80269de <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8026d08:	f104 0314 	add.w	r3, r4, #20
 8026d0c:	6925      	ldr	r5, [r4, #16]
 8026d0e:	cb03      	ldmia	r3!, {r0, r1}
 8026d10:	6028      	str	r0, [r5, #0]
 8026d12:	6069      	str	r1, [r5, #4]
 8026d14:	6923      	ldr	r3, [r4, #16]
 8026d16:	3308      	adds	r3, #8
 8026d18:	6123      	str	r3, [r4, #16]
 8026d1a:	68a3      	ldr	r3, [r4, #8]
 8026d1c:	3301      	adds	r3, #1
 8026d1e:	60a3      	str	r3, [r4, #8]
 8026d20:	e6be      	b.n	8026aa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026d22:	f00b 031f 	and.w	r3, fp, #31
 8026d26:	114f      	asrs	r7, r1, #5
 8026d28:	8b20      	ldrh	r0, [r4, #24]
 8026d2a:	f001 011f 	and.w	r1, r1, #31
 8026d2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026d30:	9b04      	ldr	r3, [sp, #16]
 8026d32:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8026d36:	429f      	cmp	r7, r3
 8026d38:	d10a      	bne.n	8026d50 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8026d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d3c:	4418      	add	r0, r3
 8026d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026d40:	4419      	add	r1, r3
 8026d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d44:	8320      	strh	r0, [r4, #24]
 8026d46:	fb03 9901 	mla	r9, r3, r1, r9
 8026d4a:	f8a4 901a 	strh.w	r9, [r4, #26]
 8026d4e:	e6af      	b.n	8026ab0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8026d50:	2d00      	cmp	r5, #0
 8026d52:	f2c0 809b 	blt.w	8026e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8026d56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8026d58:	f1c1 0320 	rsb	r3, r1, #32
 8026d5c:	4373      	muls	r3, r6
 8026d5e:	2601      	movs	r6, #1
 8026d60:	960e      	str	r6, [sp, #56]	; 0x38
 8026d62:	2620      	movs	r6, #32
 8026d64:	960d      	str	r6, [sp, #52]	; 0x34
 8026d66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026d68:	fb93 f6f5 	sdiv	r6, r3, r5
 8026d6c:	4411      	add	r1, r2
 8026d6e:	fb05 3316 	mls	r3, r5, r6, r3
 8026d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026d74:	2b00      	cmp	r3, #0
 8026d76:	4417      	add	r7, r2
 8026d78:	9a00      	ldr	r2, [sp, #0]
 8026d7a:	bfbc      	itt	lt
 8026d7c:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8026d80:	195b      	addlt	r3, r3, r5
 8026d82:	0412      	lsls	r2, r2, #16
 8026d84:	fb06 9101 	mla	r1, r6, r1, r9
 8026d88:	4430      	add	r0, r6
 8026d8a:	eb07 0902 	add.w	r9, r7, r2
 8026d8e:	9210      	str	r2, [sp, #64]	; 0x40
 8026d90:	b200      	sxth	r0, r0
 8026d92:	b209      	sxth	r1, r1
 8026d94:	45c1      	cmp	r9, r8
 8026d96:	8320      	strh	r0, [r4, #24]
 8026d98:	8361      	strh	r1, [r4, #26]
 8026d9a:	d017      	beq.n	8026dcc <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8026d9c:	ea50 0201 	orrs.w	r2, r0, r1
 8026da0:	d00d      	beq.n	8026dbe <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8026da2:	f1be 0f00 	cmp.w	lr, #0
 8026da6:	db0a      	blt.n	8026dbe <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8026da8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026daa:	4571      	cmp	r1, lr
 8026dac:	dd07      	ble.n	8026dbe <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8026dae:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026db2:	4288      	cmp	r0, r1
 8026db4:	d372      	bcc.n	8026e9c <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8026db6:	f04f 0201 	mov.w	r2, #1
 8026dba:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8026dbe:	9a00      	ldr	r2, [sp, #0]
 8026dc0:	82a7      	strh	r7, [r4, #20]
 8026dc2:	82e2      	strh	r2, [r4, #22]
 8026dc4:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026dc8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026dce:	eb02 0e06 	add.w	lr, r2, r6
 8026dd2:	9a04      	ldr	r2, [sp, #16]
 8026dd4:	42ba      	cmp	r2, r7
 8026dd6:	d049      	beq.n	8026e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8026dd8:	9a02      	ldr	r2, [sp, #8]
 8026dda:	1b5b      	subs	r3, r3, r5
 8026ddc:	eba2 010e 	sub.w	r1, r2, lr
 8026de0:	440e      	add	r6, r1
 8026de2:	0176      	lsls	r6, r6, #5
 8026de4:	fb96 f8f5 	sdiv	r8, r6, r5
 8026de8:	fb05 6618 	mls	r6, r5, r8, r6
 8026dec:	2e00      	cmp	r6, #0
 8026dee:	bfbc      	itt	lt
 8026df0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8026df4:	1976      	addlt	r6, r6, r5
 8026df6:	f108 0201 	add.w	r2, r8, #1
 8026dfa:	9211      	str	r2, [sp, #68]	; 0x44
 8026dfc:	199b      	adds	r3, r3, r6
 8026dfe:	8b20      	ldrh	r0, [r4, #24]
 8026e00:	8b61      	ldrh	r1, [r4, #26]
 8026e02:	bf54      	ite	pl
 8026e04:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8026e08:	46c1      	movmi	r9, r8
 8026e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026e0c:	bf58      	it	pl
 8026e0e:	1b5b      	subpl	r3, r3, r5
 8026e10:	4448      	add	r0, r9
 8026e12:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8026e16:	4417      	add	r7, r2
 8026e18:	44ce      	add	lr, r9
 8026e1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026e1c:	b200      	sxth	r0, r0
 8026e1e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8026e22:	b209      	sxth	r1, r1
 8026e24:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8026e28:	443a      	add	r2, r7
 8026e2a:	8320      	strh	r0, [r4, #24]
 8026e2c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8026e30:	8361      	strh	r1, [r4, #26]
 8026e32:	4552      	cmp	r2, sl
 8026e34:	d017      	beq.n	8026e66 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8026e36:	ea50 0201 	orrs.w	r2, r0, r1
 8026e3a:	d00d      	beq.n	8026e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8026e3c:	f1b9 0f00 	cmp.w	r9, #0
 8026e40:	db0a      	blt.n	8026e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8026e42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026e44:	4549      	cmp	r1, r9
 8026e46:	dd07      	ble.n	8026e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8026e48:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026e4c:	4288      	cmp	r0, r1
 8026e4e:	d336      	bcc.n	8026ebe <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8026e50:	f04f 0201 	mov.w	r2, #1
 8026e54:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8026e58:	9a00      	ldr	r2, [sp, #0]
 8026e5a:	82a7      	strh	r7, [r4, #20]
 8026e5c:	82e2      	strh	r2, [r4, #22]
 8026e5e:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026e62:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026e66:	9a04      	ldr	r2, [sp, #16]
 8026e68:	42ba      	cmp	r2, r7
 8026e6a:	d1c7      	bne.n	8026dfc <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8026e6c:	9b02      	ldr	r3, [sp, #8]
 8026e6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026e70:	eba3 0e0e 	sub.w	lr, r3, lr
 8026e74:	8b23      	ldrh	r3, [r4, #24]
 8026e76:	3120      	adds	r1, #32
 8026e78:	4473      	add	r3, lr
 8026e7a:	8323      	strh	r3, [r4, #24]
 8026e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026e7e:	1ac9      	subs	r1, r1, r3
 8026e80:	8b63      	ldrh	r3, [r4, #26]
 8026e82:	fb0e 3e01 	mla	lr, lr, r1, r3
 8026e86:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8026e8a:	e611      	b.n	8026ab0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8026e8c:	f04f 36ff 	mov.w	r6, #4294967295
 8026e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e92:	426d      	negs	r5, r5
 8026e94:	960e      	str	r6, [sp, #56]	; 0x38
 8026e96:	2600      	movs	r6, #0
 8026e98:	434b      	muls	r3, r1
 8026e9a:	e763      	b.n	8026d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8026e9c:	f104 0e14 	add.w	lr, r4, #20
 8026ea0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8026ea4:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8026ea8:	f8c8 0000 	str.w	r0, [r8]
 8026eac:	f8c8 1004 	str.w	r1, [r8, #4]
 8026eb0:	6921      	ldr	r1, [r4, #16]
 8026eb2:	3108      	adds	r1, #8
 8026eb4:	6121      	str	r1, [r4, #16]
 8026eb6:	68a1      	ldr	r1, [r4, #8]
 8026eb8:	3101      	adds	r1, #1
 8026eba:	60a1      	str	r1, [r4, #8]
 8026ebc:	e77f      	b.n	8026dbe <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8026ebe:	f104 0914 	add.w	r9, r4, #20
 8026ec2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8026ec6:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8026eca:	f8ca 0000 	str.w	r0, [sl]
 8026ece:	f8ca 1004 	str.w	r1, [sl, #4]
 8026ed2:	6921      	ldr	r1, [r4, #16]
 8026ed4:	3108      	adds	r1, #8
 8026ed6:	6121      	str	r1, [r4, #16]
 8026ed8:	68a1      	ldr	r1, [r4, #8]
 8026eda:	3101      	adds	r1, #1
 8026edc:	60a1      	str	r1, [r4, #8]
 8026ede:	e7bb      	b.n	8026e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8026ee0:	f104 0314 	add.w	r3, r4, #20
 8026ee4:	6925      	ldr	r5, [r4, #16]
 8026ee6:	cb03      	ldmia	r3!, {r0, r1}
 8026ee8:	6028      	str	r0, [r5, #0]
 8026eea:	6069      	str	r1, [r5, #4]
 8026eec:	6923      	ldr	r3, [r4, #16]
 8026eee:	3308      	adds	r3, #8
 8026ef0:	6123      	str	r3, [r4, #16]
 8026ef2:	68a3      	ldr	r3, [r4, #8]
 8026ef4:	3301      	adds	r3, #1
 8026ef6:	60a3      	str	r3, [r4, #8]
 8026ef8:	e5fd      	b.n	8026af6 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8026efa:	f104 0314 	add.w	r3, r4, #20
 8026efe:	6925      	ldr	r5, [r4, #16]
 8026f00:	cb03      	ldmia	r3!, {r0, r1}
 8026f02:	6028      	str	r0, [r5, #0]
 8026f04:	6069      	str	r1, [r5, #4]
 8026f06:	6923      	ldr	r3, [r4, #16]
 8026f08:	3308      	adds	r3, #8
 8026f0a:	6123      	str	r3, [r4, #16]
 8026f0c:	68a3      	ldr	r3, [r4, #8]
 8026f0e:	3301      	adds	r3, #1
 8026f10:	60a3      	str	r3, [r4, #8]
 8026f12:	e625      	b.n	8026b60 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8026f14:	9b05      	ldr	r3, [sp, #20]
 8026f16:	ea4f 176b 	mov.w	r7, fp, asr #5
 8026f1a:	f00b 081f 	and.w	r8, fp, #31
 8026f1e:	8b20      	ldrh	r0, [r4, #24]
 8026f20:	f003 031f 	and.w	r3, r3, #31
 8026f24:	4577      	cmp	r7, lr
 8026f26:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8026f2a:	9302      	str	r3, [sp, #8]
 8026f2c:	9b03      	ldr	r3, [sp, #12]
 8026f2e:	eba3 050c 	sub.w	r5, r3, ip
 8026f32:	d108      	bne.n	8026f46 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8026f34:	9b02      	ldr	r3, [sp, #8]
 8026f36:	4428      	add	r0, r5
 8026f38:	4498      	add	r8, r3
 8026f3a:	8320      	strh	r0, [r4, #24]
 8026f3c:	fb05 9508 	mla	r5, r5, r8, r9
 8026f40:	8365      	strh	r5, [r4, #26]
 8026f42:	f7ff bb4f 	b.w	80265e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8026f46:	9b05      	ldr	r3, [sp, #20]
 8026f48:	ebb3 030b 	subs.w	r3, r3, fp
 8026f4c:	f100 809c 	bmi.w	8027088 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8026f50:	f1c8 0120 	rsb	r1, r8, #32
 8026f54:	2201      	movs	r2, #1
 8026f56:	f04f 0b20 	mov.w	fp, #32
 8026f5a:	434d      	muls	r5, r1
 8026f5c:	9201      	str	r2, [sp, #4]
 8026f5e:	9a01      	ldr	r2, [sp, #4]
 8026f60:	44d8      	add	r8, fp
 8026f62:	fb95 f6f3 	sdiv	r6, r5, r3
 8026f66:	fb03 5516 	mls	r5, r3, r6, r5
 8026f6a:	4417      	add	r7, r2
 8026f6c:	9a00      	ldr	r2, [sp, #0]
 8026f6e:	2d00      	cmp	r5, #0
 8026f70:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8026f74:	bfbc      	itt	lt
 8026f76:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8026f7a:	18ed      	addlt	r5, r5, r3
 8026f7c:	eb07 0a02 	add.w	sl, r7, r2
 8026f80:	9204      	str	r2, [sp, #16]
 8026f82:	fb06 9808 	mla	r8, r6, r8, r9
 8026f86:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8026f8a:	4430      	add	r0, r6
 8026f8c:	fa0f f188 	sxth.w	r1, r8
 8026f90:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026f94:	b200      	sxth	r0, r0
 8026f96:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8026f9a:	8361      	strh	r1, [r4, #26]
 8026f9c:	8320      	strh	r0, [r4, #24]
 8026f9e:	45ca      	cmp	sl, r9
 8026fa0:	d015      	beq.n	8026fce <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8026fa2:	ea50 0201 	orrs.w	r2, r0, r1
 8026fa6:	d00c      	beq.n	8026fc2 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8026fa8:	f1b8 0f00 	cmp.w	r8, #0
 8026fac:	db09      	blt.n	8026fc2 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8026fae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026fb0:	4541      	cmp	r1, r8
 8026fb2:	dd06      	ble.n	8026fc2 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8026fb4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026fb8:	4288      	cmp	r0, r1
 8026fba:	d36e      	bcc.n	802709a <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8026fbc:	2101      	movs	r1, #1
 8026fbe:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8026fc2:	2100      	movs	r1, #0
 8026fc4:	9a00      	ldr	r2, [sp, #0]
 8026fc6:	82a7      	strh	r7, [r4, #20]
 8026fc8:	82e2      	strh	r2, [r4, #22]
 8026fca:	8321      	strh	r1, [r4, #24]
 8026fcc:	8361      	strh	r1, [r4, #26]
 8026fce:	45be      	cmp	lr, r7
 8026fd0:	44b4      	add	ip, r6
 8026fd2:	d048      	beq.n	8027066 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8026fd4:	9a03      	ldr	r2, [sp, #12]
 8026fd6:	1aed      	subs	r5, r5, r3
 8026fd8:	eba2 010c 	sub.w	r1, r2, ip
 8026fdc:	440e      	add	r6, r1
 8026fde:	0176      	lsls	r6, r6, #5
 8026fe0:	fb96 f8f3 	sdiv	r8, r6, r3
 8026fe4:	fb03 6618 	mls	r6, r3, r8, r6
 8026fe8:	2e00      	cmp	r6, #0
 8026fea:	bfbc      	itt	lt
 8026fec:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8026ff0:	18f6      	addlt	r6, r6, r3
 8026ff2:	f108 0201 	add.w	r2, r8, #1
 8026ff6:	9205      	str	r2, [sp, #20]
 8026ff8:	19ad      	adds	r5, r5, r6
 8026ffa:	8b20      	ldrh	r0, [r4, #24]
 8026ffc:	8b61      	ldrh	r1, [r4, #26]
 8026ffe:	bf54      	ite	pl
 8027000:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8027004:	46c1      	movmi	r9, r8
 8027006:	9a01      	ldr	r2, [sp, #4]
 8027008:	bf58      	it	pl
 802700a:	1aed      	subpl	r5, r5, r3
 802700c:	4448      	add	r0, r9
 802700e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8027012:	4417      	add	r7, r2
 8027014:	44cc      	add	ip, r9
 8027016:	9a04      	ldr	r2, [sp, #16]
 8027018:	b200      	sxth	r0, r0
 802701a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802701e:	b209      	sxth	r1, r1
 8027020:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8027024:	443a      	add	r2, r7
 8027026:	8320      	strh	r0, [r4, #24]
 8027028:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802702c:	8361      	strh	r1, [r4, #26]
 802702e:	4552      	cmp	r2, sl
 8027030:	d017      	beq.n	8027062 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8027032:	ea50 0201 	orrs.w	r2, r0, r1
 8027036:	d00d      	beq.n	8027054 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8027038:	f1b9 0f00 	cmp.w	r9, #0
 802703c:	db0a      	blt.n	8027054 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802703e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027040:	4549      	cmp	r1, r9
 8027042:	dd07      	ble.n	8027054 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8027044:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027048:	4288      	cmp	r0, r1
 802704a:	d337      	bcc.n	80270bc <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 802704c:	f04f 0201 	mov.w	r2, #1
 8027050:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027054:	9a00      	ldr	r2, [sp, #0]
 8027056:	82a7      	strh	r7, [r4, #20]
 8027058:	82e2      	strh	r2, [r4, #22]
 802705a:	f04f 0200 	mov.w	r2, #0
 802705e:	8322      	strh	r2, [r4, #24]
 8027060:	8362      	strh	r2, [r4, #26]
 8027062:	45be      	cmp	lr, r7
 8027064:	d1c8      	bne.n	8026ff8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8027066:	9b03      	ldr	r3, [sp, #12]
 8027068:	8b62      	ldrh	r2, [r4, #26]
 802706a:	eba3 0c0c 	sub.w	ip, r3, ip
 802706e:	8b23      	ldrh	r3, [r4, #24]
 8027070:	4463      	add	r3, ip
 8027072:	8323      	strh	r3, [r4, #24]
 8027074:	9b02      	ldr	r3, [sp, #8]
 8027076:	3320      	adds	r3, #32
 8027078:	eba3 030b 	sub.w	r3, r3, fp
 802707c:	fb0c 2c03 	mla	ip, ip, r3, r2
 8027080:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027084:	f7ff baae 	b.w	80265e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027088:	f04f 32ff 	mov.w	r2, #4294967295
 802708c:	fb05 f508 	mul.w	r5, r5, r8
 8027090:	425b      	negs	r3, r3
 8027092:	f04f 0b00 	mov.w	fp, #0
 8027096:	9201      	str	r2, [sp, #4]
 8027098:	e761      	b.n	8026f5e <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 802709a:	f104 0814 	add.w	r8, r4, #20
 802709e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80270a2:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80270a6:	f8c9 0000 	str.w	r0, [r9]
 80270aa:	f8c9 1004 	str.w	r1, [r9, #4]
 80270ae:	6921      	ldr	r1, [r4, #16]
 80270b0:	3108      	adds	r1, #8
 80270b2:	6121      	str	r1, [r4, #16]
 80270b4:	68a1      	ldr	r1, [r4, #8]
 80270b6:	3101      	adds	r1, #1
 80270b8:	60a1      	str	r1, [r4, #8]
 80270ba:	e782      	b.n	8026fc2 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80270bc:	f104 0914 	add.w	r9, r4, #20
 80270c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80270c4:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80270c8:	f8ca 0000 	str.w	r0, [sl]
 80270cc:	f8ca 1004 	str.w	r1, [sl, #4]
 80270d0:	6921      	ldr	r1, [r4, #16]
 80270d2:	3108      	adds	r1, #8
 80270d4:	6121      	str	r1, [r4, #16]
 80270d6:	68a1      	ldr	r1, [r4, #8]
 80270d8:	3101      	adds	r1, #1
 80270da:	60a1      	str	r1, [r4, #8]
 80270dc:	e7ba      	b.n	8027054 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

080270de <_ZN8touchgfx7Outline6lineToEii>:
 80270de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80270e0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80270e2:	4604      	mov	r4, r0
 80270e4:	460d      	mov	r5, r1
 80270e6:	4616      	mov	r6, r2
 80270e8:	079b      	lsls	r3, r3, #30
 80270ea:	d526      	bpl.n	802713a <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80270ec:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80270f0:	ea85 0001 	eor.w	r0, r5, r1
 80270f4:	ea86 0302 	eor.w	r3, r6, r2
 80270f8:	4303      	orrs	r3, r0
 80270fa:	d01e      	beq.n	802713a <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80270fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80270fe:	114b      	asrs	r3, r1, #5
 8027100:	9600      	str	r6, [sp, #0]
 8027102:	4283      	cmp	r3, r0
 8027104:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8027106:	bfb8      	it	lt
 8027108:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802710a:	3301      	adds	r3, #1
 802710c:	4283      	cmp	r3, r0
 802710e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027110:	bfc8      	it	gt
 8027112:	6363      	strgt	r3, [r4, #52]	; 0x34
 8027114:	116b      	asrs	r3, r5, #5
 8027116:	4283      	cmp	r3, r0
 8027118:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802711a:	bfb8      	it	lt
 802711c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802711e:	3301      	adds	r3, #1
 8027120:	4283      	cmp	r3, r0
 8027122:	4620      	mov	r0, r4
 8027124:	bfc8      	it	gt
 8027126:	6363      	strgt	r3, [r4, #52]	; 0x34
 8027128:	462b      	mov	r3, r5
 802712a:	f7ff f9e3 	bl	80264f4 <_ZN8touchgfx7Outline10renderLineEiiii>
 802712e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027130:	f043 0301 	orr.w	r3, r3, #1
 8027134:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8027138:	63e3      	str	r3, [r4, #60]	; 0x3c
 802713a:	b002      	add	sp, #8
 802713c:	bd70      	pop	{r4, r5, r6, pc}

0802713e <_ZN8touchgfx7Outline6moveToEii>:
 802713e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027140:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8027142:	4615      	mov	r5, r2
 8027144:	4604      	mov	r4, r0
 8027146:	460e      	mov	r6, r1
 8027148:	079a      	lsls	r2, r3, #30
 802714a:	d401      	bmi.n	8027150 <_ZN8touchgfx7Outline6moveToEii+0x12>
 802714c:	f7ff f98c 	bl	8026468 <_ZN8touchgfx7Outline5resetEv>
 8027150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027152:	07db      	lsls	r3, r3, #31
 8027154:	d504      	bpl.n	8027160 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8027156:	4620      	mov	r0, r4
 8027158:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802715c:	f7ff ffbf 	bl	80270de <_ZN8touchgfx7Outline6lineToEii>
 8027160:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8027164:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027168:	116f      	asrs	r7, r5, #5
 802716a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802716e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8027172:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8027176:	4291      	cmp	r1, r2
 8027178:	d015      	beq.n	80271a6 <_ZN8touchgfx7Outline6moveToEii+0x68>
 802717a:	8b61      	ldrh	r1, [r4, #26]
 802717c:	8b22      	ldrh	r2, [r4, #24]
 802717e:	430a      	orrs	r2, r1
 8027180:	d00b      	beq.n	802719a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8027182:	2b00      	cmp	r3, #0
 8027184:	db09      	blt.n	802719a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8027186:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8027188:	429a      	cmp	r2, r3
 802718a:	dd06      	ble.n	802719a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802718c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8027190:	429a      	cmp	r2, r3
 8027192:	d30d      	bcc.n	80271b0 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8027194:	2301      	movs	r3, #1
 8027196:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802719a:	2300      	movs	r3, #0
 802719c:	f8a4 c014 	strh.w	ip, [r4, #20]
 80271a0:	82e7      	strh	r7, [r4, #22]
 80271a2:	8323      	strh	r3, [r4, #24]
 80271a4:	8363      	strh	r3, [r4, #26]
 80271a6:	61e6      	str	r6, [r4, #28]
 80271a8:	62a5      	str	r5, [r4, #40]	; 0x28
 80271aa:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80271ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80271b0:	f104 0314 	add.w	r3, r4, #20
 80271b4:	6922      	ldr	r2, [r4, #16]
 80271b6:	cb03      	ldmia	r3!, {r0, r1}
 80271b8:	6010      	str	r0, [r2, #0]
 80271ba:	6051      	str	r1, [r2, #4]
 80271bc:	6923      	ldr	r3, [r4, #16]
 80271be:	3308      	adds	r3, #8
 80271c0:	6123      	str	r3, [r4, #16]
 80271c2:	68a3      	ldr	r3, [r4, #8]
 80271c4:	3301      	adds	r3, #1
 80271c6:	60a3      	str	r3, [r4, #8]
 80271c8:	e7e7      	b.n	802719a <_ZN8touchgfx7Outline6moveToEii+0x5c>

080271ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80271ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271ce:	b0d1      	sub	sp, #324	; 0x144
 80271d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80271d4:	466c      	mov	r4, sp
 80271d6:	1a0d      	subs	r5, r1, r0
 80271d8:	f100 0208 	add.w	r2, r0, #8
 80271dc:	2d48      	cmp	r5, #72	; 0x48
 80271de:	f340 80ba 	ble.w	8027356 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80271e2:	112d      	asrs	r5, r5, #4
 80271e4:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80271e8:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80271ec:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 80271f0:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80271f4:	f9b0 8000 	ldrsh.w	r8, [r0]
 80271f8:	681e      	ldr	r6, [r3, #0]
 80271fa:	6006      	str	r6, [r0, #0]
 80271fc:	685e      	ldr	r6, [r3, #4]
 80271fe:	6046      	str	r6, [r0, #4]
 8027200:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8027204:	f8a3 c004 	strh.w	ip, [r3, #4]
 8027208:	f8a3 e002 	strh.w	lr, [r3, #2]
 802720c:	80df      	strh	r7, [r3, #6]
 802720e:	f1a1 0308 	sub.w	r3, r1, #8
 8027212:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8027216:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802721a:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802721e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8027222:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8027226:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802722a:	45ac      	cmp	ip, r5
 802722c:	dd0f      	ble.n	802724e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802722e:	681d      	ldr	r5, [r3, #0]
 8027230:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8027234:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8027238:	6015      	str	r5, [r2, #0]
 802723a:	685d      	ldr	r5, [r3, #4]
 802723c:	6055      	str	r5, [r2, #4]
 802723e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8027242:	f821 6c06 	strh.w	r6, [r1, #-6]
 8027246:	f821 ec04 	strh.w	lr, [r1, #-4]
 802724a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802724e:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8027252:	f9b0 7000 	ldrsh.w	r7, [r0]
 8027256:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802725a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802725e:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8027262:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8027266:	4565      	cmp	r5, ip
 8027268:	dd0d      	ble.n	8027286 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802726a:	6815      	ldr	r5, [r2, #0]
 802726c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8027270:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8027274:	6005      	str	r5, [r0, #0]
 8027276:	6855      	ldr	r5, [r2, #4]
 8027278:	8107      	strh	r7, [r0, #8]
 802727a:	6045      	str	r5, [r0, #4]
 802727c:	8146      	strh	r6, [r0, #10]
 802727e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8027282:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8027286:	f9b0 7000 	ldrsh.w	r7, [r0]
 802728a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802728e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8027292:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8027296:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802729a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802729e:	45ac      	cmp	ip, r5
 80272a0:	dd0f      	ble.n	80272c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80272a2:	681d      	ldr	r5, [r3, #0]
 80272a4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80272a8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80272ac:	6005      	str	r5, [r0, #0]
 80272ae:	685d      	ldr	r5, [r3, #4]
 80272b0:	6045      	str	r5, [r0, #4]
 80272b2:	f821 7c08 	strh.w	r7, [r1, #-8]
 80272b6:	f821 6c06 	strh.w	r6, [r1, #-6]
 80272ba:	f821 ec04 	strh.w	lr, [r1, #-4]
 80272be:	f821 cc02 	strh.w	ip, [r1, #-2]
 80272c2:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80272c6:	f102 0508 	add.w	r5, r2, #8
 80272ca:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80272ce:	f9b0 e000 	ldrsh.w	lr, [r0]
 80272d2:	462f      	mov	r7, r5
 80272d4:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80272d8:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 80272dc:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 80272e0:	45b2      	cmp	sl, r6
 80272e2:	dc18      	bgt.n	8027316 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 80272e4:	3b08      	subs	r3, #8
 80272e6:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80272ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80272ee:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 80272f2:	45b2      	cmp	sl, r6
 80272f4:	dbf6      	blt.n	80272e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 80272f6:	42ab      	cmp	r3, r5
 80272f8:	681e      	ldr	r6, [r3, #0]
 80272fa:	d30e      	bcc.n	802731a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 80272fc:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8027300:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8027304:	602e      	str	r6, [r5, #0]
 8027306:	685e      	ldr	r6, [r3, #4]
 8027308:	606e      	str	r6, [r5, #4]
 802730a:	f8a3 9000 	strh.w	r9, [r3]
 802730e:	f8a3 8002 	strh.w	r8, [r3, #2]
 8027312:	809f      	strh	r7, [r3, #4]
 8027314:	80da      	strh	r2, [r3, #6]
 8027316:	462a      	mov	r2, r5
 8027318:	e7d3      	b.n	80272c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802731a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802731e:	6006      	str	r6, [r0, #0]
 8027320:	685e      	ldr	r6, [r3, #4]
 8027322:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8027326:	6046      	str	r6, [r0, #4]
 8027328:	1a1e      	subs	r6, r3, r0
 802732a:	80da      	strh	r2, [r3, #6]
 802732c:	1b4a      	subs	r2, r1, r5
 802732e:	f8a3 e000 	strh.w	lr, [r3]
 8027332:	10d2      	asrs	r2, r2, #3
 8027334:	f8a3 c002 	strh.w	ip, [r3, #2]
 8027338:	f8a3 8004 	strh.w	r8, [r3, #4]
 802733c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8027340:	bfb5      	itete	lt
 8027342:	e9c4 0300 	strdlt	r0, r3, [r4]
 8027346:	4607      	movge	r7, r0
 8027348:	460b      	movlt	r3, r1
 802734a:	e9c4 5100 	strdge	r5, r1, [r4]
 802734e:	4638      	mov	r0, r7
 8027350:	3408      	adds	r4, #8
 8027352:	4619      	mov	r1, r3
 8027354:	e73f      	b.n	80271d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8027356:	4291      	cmp	r1, r2
 8027358:	d925      	bls.n	80273a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802735a:	f1a2 0310 	sub.w	r3, r2, #16
 802735e:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8027362:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8027366:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802736a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802736e:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8027372:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8027376:	42b5      	cmp	r5, r6
 8027378:	dd13      	ble.n	80273a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802737a:	461d      	mov	r5, r3
 802737c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8027380:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8027384:	3b08      	subs	r3, #8
 8027386:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802738a:	619e      	str	r6, [r3, #24]
 802738c:	42a8      	cmp	r0, r5
 802738e:	686e      	ldr	r6, [r5, #4]
 8027390:	f8a3 c010 	strh.w	ip, [r3, #16]
 8027394:	61de      	str	r6, [r3, #28]
 8027396:	825f      	strh	r7, [r3, #18]
 8027398:	f8a3 8014 	strh.w	r8, [r3, #20]
 802739c:	f8a3 e016 	strh.w	lr, [r3, #22]
 80273a0:	d1dd      	bne.n	802735e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80273a2:	3208      	adds	r2, #8
 80273a4:	e7d7      	b.n	8027356 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80273a6:	466b      	mov	r3, sp
 80273a8:	429c      	cmp	r4, r3
 80273aa:	d903      	bls.n	80273b4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80273ac:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80273b0:	3c08      	subs	r4, #8
 80273b2:	e710      	b.n	80271d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80273b4:	b051      	add	sp, #324	; 0x144
 80273b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080273ba <_ZN8touchgfx7Outline9sortCellsEv>:
 80273ba:	6881      	ldr	r1, [r0, #8]
 80273bc:	b111      	cbz	r1, 80273c4 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 80273be:	68c0      	ldr	r0, [r0, #12]
 80273c0:	f7ff bf03 	b.w	80271ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80273c4:	4770      	bx	lr

080273c6 <_ZN8touchgfx7Outline8getCellsEv>:
 80273c6:	b510      	push	{r4, lr}
 80273c8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80273ca:	4604      	mov	r4, r0
 80273cc:	07da      	lsls	r2, r3, #31
 80273ce:	d507      	bpl.n	80273e0 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80273d0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 80273d4:	f7ff fe83 	bl	80270de <_ZN8touchgfx7Outline6lineToEii>
 80273d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80273da:	f023 0301 	bic.w	r3, r3, #1
 80273de:	63e3      	str	r3, [r4, #60]	; 0x3c
 80273e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80273e2:	079b      	lsls	r3, r3, #30
 80273e4:	d51a      	bpl.n	802741c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 80273e6:	8b62      	ldrh	r2, [r4, #26]
 80273e8:	8b23      	ldrh	r3, [r4, #24]
 80273ea:	4313      	orrs	r3, r2
 80273ec:	d00d      	beq.n	802740a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80273ee:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80273f2:	2b00      	cmp	r3, #0
 80273f4:	db09      	blt.n	802740a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80273f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80273f8:	4293      	cmp	r3, r2
 80273fa:	da06      	bge.n	802740a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80273fc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8027400:	429a      	cmp	r2, r3
 8027402:	d80d      	bhi.n	8027420 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8027404:	2301      	movs	r3, #1
 8027406:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802740a:	68a0      	ldr	r0, [r4, #8]
 802740c:	b138      	cbz	r0, 802741e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802740e:	4620      	mov	r0, r4
 8027410:	f7ff ffd3 	bl	80273ba <_ZN8touchgfx7Outline9sortCellsEv>
 8027414:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027416:	f023 0302 	bic.w	r3, r3, #2
 802741a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802741c:	68e0      	ldr	r0, [r4, #12]
 802741e:	bd10      	pop	{r4, pc}
 8027420:	f104 0314 	add.w	r3, r4, #20
 8027424:	6922      	ldr	r2, [r4, #16]
 8027426:	cb03      	ldmia	r3!, {r0, r1}
 8027428:	6010      	str	r0, [r2, #0]
 802742a:	6051      	str	r1, [r2, #4]
 802742c:	6923      	ldr	r3, [r4, #16]
 802742e:	3308      	adds	r3, #8
 8027430:	6123      	str	r3, [r4, #16]
 8027432:	68a3      	ldr	r3, [r4, #8]
 8027434:	3301      	adds	r3, #1
 8027436:	60a3      	str	r3, [r4, #8]
 8027438:	e7e7      	b.n	802740a <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802743a <_ZN8touchgfx8ScanlineD1Ev>:
 802743a:	4770      	bx	lr

0802743c <_ZN8touchgfx8ScanlineD0Ev>:
 802743c:	b510      	push	{r4, lr}
 802743e:	4604      	mov	r4, r0
 8027440:	2124      	movs	r1, #36	; 0x24
 8027442:	f000 f887 	bl	8027554 <_ZdlPvj>
 8027446:	4620      	mov	r0, r4
 8027448:	bd10      	pop	{r4, pc}

0802744a <_ZN8touchgfx8Scanline5resetEv>:
 802744a:	b510      	push	{r4, lr}
 802744c:	4604      	mov	r4, r0
 802744e:	f7f2 ff33 	bl	801a2b8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8027452:	61a0      	str	r0, [r4, #24]
 8027454:	f7f2 ff36 	bl	801a2c4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8027458:	61e0      	str	r0, [r4, #28]
 802745a:	f7f2 ff39 	bl	801a2d0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802745e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8027462:	6220      	str	r0, [r4, #32]
 8027464:	6160      	str	r0, [r4, #20]
 8027466:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802746a:	69e3      	ldr	r3, [r4, #28]
 802746c:	6123      	str	r3, [r4, #16]
 802746e:	2300      	movs	r3, #0
 8027470:	60e3      	str	r3, [r4, #12]
 8027472:	bd10      	pop	{r4, pc}

08027474 <_ZN8touchgfx8ScanlineC1Ev>:
 8027474:	4b07      	ldr	r3, [pc, #28]	; (8027494 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8027476:	b510      	push	{r4, lr}
 8027478:	6003      	str	r3, [r0, #0]
 802747a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802747e:	4604      	mov	r4, r0
 8027480:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8027484:	2300      	movs	r3, #0
 8027486:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802748a:	6143      	str	r3, [r0, #20]
 802748c:	f7ff ffdd 	bl	802744a <_ZN8touchgfx8Scanline5resetEv>
 8027490:	4620      	mov	r0, r4
 8027492:	bd10      	pop	{r4, pc}
 8027494:	0802cfa0 	.word	0x0802cfa0

08027498 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8027498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802749c:	1e0c      	subs	r4, r1, #0
 802749e:	4605      	mov	r5, r0
 80274a0:	4617      	mov	r7, r2
 80274a2:	461e      	mov	r6, r3
 80274a4:	da03      	bge.n	80274ae <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80274a6:	4426      	add	r6, r4
 80274a8:	2e01      	cmp	r6, #1
 80274aa:	d421      	bmi.n	80274f0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80274ac:	2400      	movs	r4, #0
 80274ae:	f7f2 fefd 	bl	801a2ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80274b2:	42a0      	cmp	r0, r4
 80274b4:	d91c      	bls.n	80274f0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80274b6:	eb04 0806 	add.w	r8, r4, r6
 80274ba:	f7f2 fef7 	bl	801a2ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80274be:	4580      	cmp	r8, r0
 80274c0:	d902      	bls.n	80274c8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 80274c2:	f7f2 fef3 	bl	801a2ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80274c6:	1b06      	subs	r6, r0, r4
 80274c8:	69a8      	ldr	r0, [r5, #24]
 80274ca:	4632      	mov	r2, r6
 80274cc:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80274d0:	4420      	add	r0, r4
 80274d2:	f7f4 fc53 	bl	801bd7c <_ZN8touchgfx6memsetEPvhm>
 80274d6:	686b      	ldr	r3, [r5, #4]
 80274d8:	b2b2      	uxth	r2, r6
 80274da:	3301      	adds	r3, #1
 80274dc:	42a3      	cmp	r3, r4
 80274de:	696b      	ldr	r3, [r5, #20]
 80274e0:	d108      	bne.n	80274f4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 80274e2:	8819      	ldrh	r1, [r3, #0]
 80274e4:	440a      	add	r2, r1
 80274e6:	801a      	strh	r2, [r3, #0]
 80274e8:	3c01      	subs	r4, #1
 80274ea:	4434      	add	r4, r6
 80274ec:	e9c5 4701 	strd	r4, r7, [r5, #4]
 80274f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80274f4:	1c99      	adds	r1, r3, #2
 80274f6:	6169      	str	r1, [r5, #20]
 80274f8:	805a      	strh	r2, [r3, #2]
 80274fa:	692b      	ldr	r3, [r5, #16]
 80274fc:	1c9a      	adds	r2, r3, #2
 80274fe:	612a      	str	r2, [r5, #16]
 8027500:	805c      	strh	r4, [r3, #2]
 8027502:	68eb      	ldr	r3, [r5, #12]
 8027504:	3301      	adds	r3, #1
 8027506:	60eb      	str	r3, [r5, #12]
 8027508:	e7ee      	b.n	80274e8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802750a <_ZN8touchgfx15RenderingBufferD1Ev>:
 802750a:	4770      	bx	lr

0802750c <_ZN8touchgfx15RenderingBufferD0Ev>:
 802750c:	b510      	push	{r4, lr}
 802750e:	4604      	mov	r4, r0
 8027510:	2118      	movs	r1, #24
 8027512:	f000 f81f 	bl	8027554 <_ZdlPvj>
 8027516:	4620      	mov	r0, r4
 8027518:	bd10      	pop	{r4, pc}
	...

0802751c <_ZN8touchgfx15RenderingBufferC1Ev>:
 802751c:	4a04      	ldr	r2, [pc, #16]	; (8027530 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 802751e:	6002      	str	r2, [r0, #0]
 8027520:	2200      	movs	r2, #0
 8027522:	6042      	str	r2, [r0, #4]
 8027524:	7202      	strb	r2, [r0, #8]
 8027526:	6142      	str	r2, [r0, #20]
 8027528:	e9c0 2203 	strd	r2, r2, [r0, #12]
 802752c:	4770      	bx	lr
 802752e:	bf00      	nop
 8027530:	0802cfb0 	.word	0x0802cfb0

08027534 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8027534:	60c3      	str	r3, [r0, #12]
 8027536:	9b00      	ldr	r3, [sp, #0]
 8027538:	6041      	str	r1, [r0, #4]
 802753a:	6103      	str	r3, [r0, #16]
 802753c:	9b01      	ldr	r3, [sp, #4]
 802753e:	7202      	strb	r2, [r0, #8]
 8027540:	6143      	str	r3, [r0, #20]
 8027542:	4770      	bx	lr

08027544 <__aeabi_atexit>:
 8027544:	460b      	mov	r3, r1
 8027546:	4601      	mov	r1, r0
 8027548:	4618      	mov	r0, r3
 802754a:	f000 b853 	b.w	80275f4 <__cxa_atexit>

0802754e <__cxa_pure_virtual>:
 802754e:	b508      	push	{r3, lr}
 8027550:	f000 f820 	bl	8027594 <_ZSt9terminatev>

08027554 <_ZdlPvj>:
 8027554:	f000 b80f 	b.w	8027576 <_ZdlPv>

08027558 <__cxa_guard_acquire>:
 8027558:	6803      	ldr	r3, [r0, #0]
 802755a:	07db      	lsls	r3, r3, #31
 802755c:	d406      	bmi.n	802756c <__cxa_guard_acquire+0x14>
 802755e:	7843      	ldrb	r3, [r0, #1]
 8027560:	b103      	cbz	r3, 8027564 <__cxa_guard_acquire+0xc>
 8027562:	deff      	udf	#255	; 0xff
 8027564:	2301      	movs	r3, #1
 8027566:	7043      	strb	r3, [r0, #1]
 8027568:	4618      	mov	r0, r3
 802756a:	4770      	bx	lr
 802756c:	2000      	movs	r0, #0
 802756e:	4770      	bx	lr

08027570 <__cxa_guard_release>:
 8027570:	2301      	movs	r3, #1
 8027572:	6003      	str	r3, [r0, #0]
 8027574:	4770      	bx	lr

08027576 <_ZdlPv>:
 8027576:	f000 b88f 	b.w	8027698 <free>

0802757a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802757a:	b508      	push	{r3, lr}
 802757c:	4780      	blx	r0
 802757e:	f000 f80e 	bl	802759e <abort>
	...

08027584 <_ZSt13get_terminatev>:
 8027584:	4b02      	ldr	r3, [pc, #8]	; (8027590 <_ZSt13get_terminatev+0xc>)
 8027586:	6818      	ldr	r0, [r3, #0]
 8027588:	f3bf 8f5b 	dmb	ish
 802758c:	4770      	bx	lr
 802758e:	bf00      	nop
 8027590:	20000094 	.word	0x20000094

08027594 <_ZSt9terminatev>:
 8027594:	b508      	push	{r3, lr}
 8027596:	f7ff fff5 	bl	8027584 <_ZSt13get_terminatev>
 802759a:	f7ff ffee 	bl	802757a <_ZN10__cxxabiv111__terminateEPFvvE>

0802759e <abort>:
 802759e:	b508      	push	{r3, lr}
 80275a0:	2006      	movs	r0, #6
 80275a2:	f000 fc3d 	bl	8027e20 <raise>
 80275a6:	2001      	movs	r0, #1
 80275a8:	f7db fc6a 	bl	8002e80 <_exit>

080275ac <__assert_func>:
 80275ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80275ae:	461c      	mov	r4, r3
 80275b0:	4b09      	ldr	r3, [pc, #36]	; (80275d8 <__assert_func+0x2c>)
 80275b2:	681b      	ldr	r3, [r3, #0]
 80275b4:	4605      	mov	r5, r0
 80275b6:	68d8      	ldr	r0, [r3, #12]
 80275b8:	b152      	cbz	r2, 80275d0 <__assert_func+0x24>
 80275ba:	4b08      	ldr	r3, [pc, #32]	; (80275dc <__assert_func+0x30>)
 80275bc:	9100      	str	r1, [sp, #0]
 80275be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80275c2:	4907      	ldr	r1, [pc, #28]	; (80275e0 <__assert_func+0x34>)
 80275c4:	462b      	mov	r3, r5
 80275c6:	4622      	mov	r2, r4
 80275c8:	f000 f828 	bl	802761c <fiprintf>
 80275cc:	f7ff ffe7 	bl	802759e <abort>
 80275d0:	4b04      	ldr	r3, [pc, #16]	; (80275e4 <__assert_func+0x38>)
 80275d2:	461a      	mov	r2, r3
 80275d4:	e7f2      	b.n	80275bc <__assert_func+0x10>
 80275d6:	bf00      	nop
 80275d8:	20000098 	.word	0x20000098
 80275dc:	0802cfb8 	.word	0x0802cfb8
 80275e0:	0802cfc5 	.word	0x0802cfc5
 80275e4:	0802cff3 	.word	0x0802cff3

080275e8 <atexit>:
 80275e8:	2300      	movs	r3, #0
 80275ea:	4601      	mov	r1, r0
 80275ec:	461a      	mov	r2, r3
 80275ee:	4618      	mov	r0, r3
 80275f0:	f000 bcf2 	b.w	8027fd8 <__register_exitproc>

080275f4 <__cxa_atexit>:
 80275f4:	b510      	push	{r4, lr}
 80275f6:	4c05      	ldr	r4, [pc, #20]	; (802760c <__cxa_atexit+0x18>)
 80275f8:	4613      	mov	r3, r2
 80275fa:	b12c      	cbz	r4, 8027608 <__cxa_atexit+0x14>
 80275fc:	460a      	mov	r2, r1
 80275fe:	4601      	mov	r1, r0
 8027600:	2002      	movs	r0, #2
 8027602:	f000 fce9 	bl	8027fd8 <__register_exitproc>
 8027606:	bd10      	pop	{r4, pc}
 8027608:	4620      	mov	r0, r4
 802760a:	e7fc      	b.n	8027606 <__cxa_atexit+0x12>
 802760c:	08027fd9 	.word	0x08027fd9

08027610 <__errno>:
 8027610:	4b01      	ldr	r3, [pc, #4]	; (8027618 <__errno+0x8>)
 8027612:	6818      	ldr	r0, [r3, #0]
 8027614:	4770      	bx	lr
 8027616:	bf00      	nop
 8027618:	20000098 	.word	0x20000098

0802761c <fiprintf>:
 802761c:	b40e      	push	{r1, r2, r3}
 802761e:	b503      	push	{r0, r1, lr}
 8027620:	4601      	mov	r1, r0
 8027622:	ab03      	add	r3, sp, #12
 8027624:	4805      	ldr	r0, [pc, #20]	; (802763c <fiprintf+0x20>)
 8027626:	f853 2b04 	ldr.w	r2, [r3], #4
 802762a:	6800      	ldr	r0, [r0, #0]
 802762c:	9301      	str	r3, [sp, #4]
 802762e:	f000 f921 	bl	8027874 <_vfiprintf_r>
 8027632:	b002      	add	sp, #8
 8027634:	f85d eb04 	ldr.w	lr, [sp], #4
 8027638:	b003      	add	sp, #12
 802763a:	4770      	bx	lr
 802763c:	20000098 	.word	0x20000098

08027640 <__libc_init_array>:
 8027640:	b570      	push	{r4, r5, r6, lr}
 8027642:	4e0d      	ldr	r6, [pc, #52]	; (8027678 <__libc_init_array+0x38>)
 8027644:	4c0d      	ldr	r4, [pc, #52]	; (802767c <__libc_init_array+0x3c>)
 8027646:	1ba4      	subs	r4, r4, r6
 8027648:	10a4      	asrs	r4, r4, #2
 802764a:	2500      	movs	r5, #0
 802764c:	42a5      	cmp	r5, r4
 802764e:	d109      	bne.n	8027664 <__libc_init_array+0x24>
 8027650:	4e0b      	ldr	r6, [pc, #44]	; (8027680 <__libc_init_array+0x40>)
 8027652:	4c0c      	ldr	r4, [pc, #48]	; (8027684 <__libc_init_array+0x44>)
 8027654:	f000 ffb0 	bl	80285b8 <_init>
 8027658:	1ba4      	subs	r4, r4, r6
 802765a:	10a4      	asrs	r4, r4, #2
 802765c:	2500      	movs	r5, #0
 802765e:	42a5      	cmp	r5, r4
 8027660:	d105      	bne.n	802766e <__libc_init_array+0x2e>
 8027662:	bd70      	pop	{r4, r5, r6, pc}
 8027664:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8027668:	4798      	blx	r3
 802766a:	3501      	adds	r5, #1
 802766c:	e7ee      	b.n	802764c <__libc_init_array+0xc>
 802766e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8027672:	4798      	blx	r3
 8027674:	3501      	adds	r5, #1
 8027676:	e7f2      	b.n	802765e <__libc_init_array+0x1e>
 8027678:	080561cc 	.word	0x080561cc
 802767c:	080561cc 	.word	0x080561cc
 8027680:	080561cc 	.word	0x080561cc
 8027684:	080561e0 	.word	0x080561e0

08027688 <malloc>:
 8027688:	4b02      	ldr	r3, [pc, #8]	; (8027694 <malloc+0xc>)
 802768a:	4601      	mov	r1, r0
 802768c:	6818      	ldr	r0, [r3, #0]
 802768e:	f000 b86d 	b.w	802776c <_malloc_r>
 8027692:	bf00      	nop
 8027694:	20000098 	.word	0x20000098

08027698 <free>:
 8027698:	4b02      	ldr	r3, [pc, #8]	; (80276a4 <free+0xc>)
 802769a:	4601      	mov	r1, r0
 802769c:	6818      	ldr	r0, [r3, #0]
 802769e:	f000 b817 	b.w	80276d0 <_free_r>
 80276a2:	bf00      	nop
 80276a4:	20000098 	.word	0x20000098

080276a8 <memcpy>:
 80276a8:	b510      	push	{r4, lr}
 80276aa:	1e43      	subs	r3, r0, #1
 80276ac:	440a      	add	r2, r1
 80276ae:	4291      	cmp	r1, r2
 80276b0:	d100      	bne.n	80276b4 <memcpy+0xc>
 80276b2:	bd10      	pop	{r4, pc}
 80276b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80276b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80276bc:	e7f7      	b.n	80276ae <memcpy+0x6>

080276be <memset>:
 80276be:	4402      	add	r2, r0
 80276c0:	4603      	mov	r3, r0
 80276c2:	4293      	cmp	r3, r2
 80276c4:	d100      	bne.n	80276c8 <memset+0xa>
 80276c6:	4770      	bx	lr
 80276c8:	f803 1b01 	strb.w	r1, [r3], #1
 80276cc:	e7f9      	b.n	80276c2 <memset+0x4>
	...

080276d0 <_free_r>:
 80276d0:	b538      	push	{r3, r4, r5, lr}
 80276d2:	4605      	mov	r5, r0
 80276d4:	2900      	cmp	r1, #0
 80276d6:	d045      	beq.n	8027764 <_free_r+0x94>
 80276d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80276dc:	1f0c      	subs	r4, r1, #4
 80276de:	2b00      	cmp	r3, #0
 80276e0:	bfb8      	it	lt
 80276e2:	18e4      	addlt	r4, r4, r3
 80276e4:	f000 feba 	bl	802845c <__malloc_lock>
 80276e8:	4a1f      	ldr	r2, [pc, #124]	; (8027768 <_free_r+0x98>)
 80276ea:	6813      	ldr	r3, [r2, #0]
 80276ec:	4610      	mov	r0, r2
 80276ee:	b933      	cbnz	r3, 80276fe <_free_r+0x2e>
 80276f0:	6063      	str	r3, [r4, #4]
 80276f2:	6014      	str	r4, [r2, #0]
 80276f4:	4628      	mov	r0, r5
 80276f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80276fa:	f000 beb0 	b.w	802845e <__malloc_unlock>
 80276fe:	42a3      	cmp	r3, r4
 8027700:	d90c      	bls.n	802771c <_free_r+0x4c>
 8027702:	6821      	ldr	r1, [r4, #0]
 8027704:	1862      	adds	r2, r4, r1
 8027706:	4293      	cmp	r3, r2
 8027708:	bf04      	itt	eq
 802770a:	681a      	ldreq	r2, [r3, #0]
 802770c:	685b      	ldreq	r3, [r3, #4]
 802770e:	6063      	str	r3, [r4, #4]
 8027710:	bf04      	itt	eq
 8027712:	1852      	addeq	r2, r2, r1
 8027714:	6022      	streq	r2, [r4, #0]
 8027716:	6004      	str	r4, [r0, #0]
 8027718:	e7ec      	b.n	80276f4 <_free_r+0x24>
 802771a:	4613      	mov	r3, r2
 802771c:	685a      	ldr	r2, [r3, #4]
 802771e:	b10a      	cbz	r2, 8027724 <_free_r+0x54>
 8027720:	42a2      	cmp	r2, r4
 8027722:	d9fa      	bls.n	802771a <_free_r+0x4a>
 8027724:	6819      	ldr	r1, [r3, #0]
 8027726:	1858      	adds	r0, r3, r1
 8027728:	42a0      	cmp	r0, r4
 802772a:	d10b      	bne.n	8027744 <_free_r+0x74>
 802772c:	6820      	ldr	r0, [r4, #0]
 802772e:	4401      	add	r1, r0
 8027730:	1858      	adds	r0, r3, r1
 8027732:	4282      	cmp	r2, r0
 8027734:	6019      	str	r1, [r3, #0]
 8027736:	d1dd      	bne.n	80276f4 <_free_r+0x24>
 8027738:	6810      	ldr	r0, [r2, #0]
 802773a:	6852      	ldr	r2, [r2, #4]
 802773c:	605a      	str	r2, [r3, #4]
 802773e:	4401      	add	r1, r0
 8027740:	6019      	str	r1, [r3, #0]
 8027742:	e7d7      	b.n	80276f4 <_free_r+0x24>
 8027744:	d902      	bls.n	802774c <_free_r+0x7c>
 8027746:	230c      	movs	r3, #12
 8027748:	602b      	str	r3, [r5, #0]
 802774a:	e7d3      	b.n	80276f4 <_free_r+0x24>
 802774c:	6820      	ldr	r0, [r4, #0]
 802774e:	1821      	adds	r1, r4, r0
 8027750:	428a      	cmp	r2, r1
 8027752:	bf04      	itt	eq
 8027754:	6811      	ldreq	r1, [r2, #0]
 8027756:	6852      	ldreq	r2, [r2, #4]
 8027758:	6062      	str	r2, [r4, #4]
 802775a:	bf04      	itt	eq
 802775c:	1809      	addeq	r1, r1, r0
 802775e:	6021      	streq	r1, [r4, #0]
 8027760:	605c      	str	r4, [r3, #4]
 8027762:	e7c7      	b.n	80276f4 <_free_r+0x24>
 8027764:	bd38      	pop	{r3, r4, r5, pc}
 8027766:	bf00      	nop
 8027768:	2000b430 	.word	0x2000b430

0802776c <_malloc_r>:
 802776c:	b570      	push	{r4, r5, r6, lr}
 802776e:	1ccd      	adds	r5, r1, #3
 8027770:	f025 0503 	bic.w	r5, r5, #3
 8027774:	3508      	adds	r5, #8
 8027776:	2d0c      	cmp	r5, #12
 8027778:	bf38      	it	cc
 802777a:	250c      	movcc	r5, #12
 802777c:	2d00      	cmp	r5, #0
 802777e:	4606      	mov	r6, r0
 8027780:	db01      	blt.n	8027786 <_malloc_r+0x1a>
 8027782:	42a9      	cmp	r1, r5
 8027784:	d903      	bls.n	802778e <_malloc_r+0x22>
 8027786:	230c      	movs	r3, #12
 8027788:	6033      	str	r3, [r6, #0]
 802778a:	2000      	movs	r0, #0
 802778c:	bd70      	pop	{r4, r5, r6, pc}
 802778e:	f000 fe65 	bl	802845c <__malloc_lock>
 8027792:	4a21      	ldr	r2, [pc, #132]	; (8027818 <_malloc_r+0xac>)
 8027794:	6814      	ldr	r4, [r2, #0]
 8027796:	4621      	mov	r1, r4
 8027798:	b991      	cbnz	r1, 80277c0 <_malloc_r+0x54>
 802779a:	4c20      	ldr	r4, [pc, #128]	; (802781c <_malloc_r+0xb0>)
 802779c:	6823      	ldr	r3, [r4, #0]
 802779e:	b91b      	cbnz	r3, 80277a8 <_malloc_r+0x3c>
 80277a0:	4630      	mov	r0, r6
 80277a2:	f000 fb05 	bl	8027db0 <_sbrk_r>
 80277a6:	6020      	str	r0, [r4, #0]
 80277a8:	4629      	mov	r1, r5
 80277aa:	4630      	mov	r0, r6
 80277ac:	f000 fb00 	bl	8027db0 <_sbrk_r>
 80277b0:	1c43      	adds	r3, r0, #1
 80277b2:	d124      	bne.n	80277fe <_malloc_r+0x92>
 80277b4:	230c      	movs	r3, #12
 80277b6:	6033      	str	r3, [r6, #0]
 80277b8:	4630      	mov	r0, r6
 80277ba:	f000 fe50 	bl	802845e <__malloc_unlock>
 80277be:	e7e4      	b.n	802778a <_malloc_r+0x1e>
 80277c0:	680b      	ldr	r3, [r1, #0]
 80277c2:	1b5b      	subs	r3, r3, r5
 80277c4:	d418      	bmi.n	80277f8 <_malloc_r+0x8c>
 80277c6:	2b0b      	cmp	r3, #11
 80277c8:	d90f      	bls.n	80277ea <_malloc_r+0x7e>
 80277ca:	600b      	str	r3, [r1, #0]
 80277cc:	50cd      	str	r5, [r1, r3]
 80277ce:	18cc      	adds	r4, r1, r3
 80277d0:	4630      	mov	r0, r6
 80277d2:	f000 fe44 	bl	802845e <__malloc_unlock>
 80277d6:	f104 000b 	add.w	r0, r4, #11
 80277da:	1d23      	adds	r3, r4, #4
 80277dc:	f020 0007 	bic.w	r0, r0, #7
 80277e0:	1ac3      	subs	r3, r0, r3
 80277e2:	d0d3      	beq.n	802778c <_malloc_r+0x20>
 80277e4:	425a      	negs	r2, r3
 80277e6:	50e2      	str	r2, [r4, r3]
 80277e8:	e7d0      	b.n	802778c <_malloc_r+0x20>
 80277ea:	428c      	cmp	r4, r1
 80277ec:	684b      	ldr	r3, [r1, #4]
 80277ee:	bf16      	itet	ne
 80277f0:	6063      	strne	r3, [r4, #4]
 80277f2:	6013      	streq	r3, [r2, #0]
 80277f4:	460c      	movne	r4, r1
 80277f6:	e7eb      	b.n	80277d0 <_malloc_r+0x64>
 80277f8:	460c      	mov	r4, r1
 80277fa:	6849      	ldr	r1, [r1, #4]
 80277fc:	e7cc      	b.n	8027798 <_malloc_r+0x2c>
 80277fe:	1cc4      	adds	r4, r0, #3
 8027800:	f024 0403 	bic.w	r4, r4, #3
 8027804:	42a0      	cmp	r0, r4
 8027806:	d005      	beq.n	8027814 <_malloc_r+0xa8>
 8027808:	1a21      	subs	r1, r4, r0
 802780a:	4630      	mov	r0, r6
 802780c:	f000 fad0 	bl	8027db0 <_sbrk_r>
 8027810:	3001      	adds	r0, #1
 8027812:	d0cf      	beq.n	80277b4 <_malloc_r+0x48>
 8027814:	6025      	str	r5, [r4, #0]
 8027816:	e7db      	b.n	80277d0 <_malloc_r+0x64>
 8027818:	2000b430 	.word	0x2000b430
 802781c:	2000b434 	.word	0x2000b434

08027820 <__sfputc_r>:
 8027820:	6893      	ldr	r3, [r2, #8]
 8027822:	3b01      	subs	r3, #1
 8027824:	2b00      	cmp	r3, #0
 8027826:	b410      	push	{r4}
 8027828:	6093      	str	r3, [r2, #8]
 802782a:	da08      	bge.n	802783e <__sfputc_r+0x1e>
 802782c:	6994      	ldr	r4, [r2, #24]
 802782e:	42a3      	cmp	r3, r4
 8027830:	db01      	blt.n	8027836 <__sfputc_r+0x16>
 8027832:	290a      	cmp	r1, #10
 8027834:	d103      	bne.n	802783e <__sfputc_r+0x1e>
 8027836:	f85d 4b04 	ldr.w	r4, [sp], #4
 802783a:	f000 bb0d 	b.w	8027e58 <__swbuf_r>
 802783e:	6813      	ldr	r3, [r2, #0]
 8027840:	1c58      	adds	r0, r3, #1
 8027842:	6010      	str	r0, [r2, #0]
 8027844:	7019      	strb	r1, [r3, #0]
 8027846:	4608      	mov	r0, r1
 8027848:	f85d 4b04 	ldr.w	r4, [sp], #4
 802784c:	4770      	bx	lr

0802784e <__sfputs_r>:
 802784e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027850:	4606      	mov	r6, r0
 8027852:	460f      	mov	r7, r1
 8027854:	4614      	mov	r4, r2
 8027856:	18d5      	adds	r5, r2, r3
 8027858:	42ac      	cmp	r4, r5
 802785a:	d101      	bne.n	8027860 <__sfputs_r+0x12>
 802785c:	2000      	movs	r0, #0
 802785e:	e007      	b.n	8027870 <__sfputs_r+0x22>
 8027860:	463a      	mov	r2, r7
 8027862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027866:	4630      	mov	r0, r6
 8027868:	f7ff ffda 	bl	8027820 <__sfputc_r>
 802786c:	1c43      	adds	r3, r0, #1
 802786e:	d1f3      	bne.n	8027858 <__sfputs_r+0xa>
 8027870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027874 <_vfiprintf_r>:
 8027874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027878:	460c      	mov	r4, r1
 802787a:	b09d      	sub	sp, #116	; 0x74
 802787c:	4617      	mov	r7, r2
 802787e:	461d      	mov	r5, r3
 8027880:	4606      	mov	r6, r0
 8027882:	b118      	cbz	r0, 802788c <_vfiprintf_r+0x18>
 8027884:	6983      	ldr	r3, [r0, #24]
 8027886:	b90b      	cbnz	r3, 802788c <_vfiprintf_r+0x18>
 8027888:	f000 fcfa 	bl	8028280 <__sinit>
 802788c:	4b7c      	ldr	r3, [pc, #496]	; (8027a80 <_vfiprintf_r+0x20c>)
 802788e:	429c      	cmp	r4, r3
 8027890:	d158      	bne.n	8027944 <_vfiprintf_r+0xd0>
 8027892:	6874      	ldr	r4, [r6, #4]
 8027894:	89a3      	ldrh	r3, [r4, #12]
 8027896:	0718      	lsls	r0, r3, #28
 8027898:	d55e      	bpl.n	8027958 <_vfiprintf_r+0xe4>
 802789a:	6923      	ldr	r3, [r4, #16]
 802789c:	2b00      	cmp	r3, #0
 802789e:	d05b      	beq.n	8027958 <_vfiprintf_r+0xe4>
 80278a0:	2300      	movs	r3, #0
 80278a2:	9309      	str	r3, [sp, #36]	; 0x24
 80278a4:	2320      	movs	r3, #32
 80278a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80278aa:	2330      	movs	r3, #48	; 0x30
 80278ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80278b0:	9503      	str	r5, [sp, #12]
 80278b2:	f04f 0b01 	mov.w	fp, #1
 80278b6:	46b8      	mov	r8, r7
 80278b8:	4645      	mov	r5, r8
 80278ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80278be:	b10b      	cbz	r3, 80278c4 <_vfiprintf_r+0x50>
 80278c0:	2b25      	cmp	r3, #37	; 0x25
 80278c2:	d154      	bne.n	802796e <_vfiprintf_r+0xfa>
 80278c4:	ebb8 0a07 	subs.w	sl, r8, r7
 80278c8:	d00b      	beq.n	80278e2 <_vfiprintf_r+0x6e>
 80278ca:	4653      	mov	r3, sl
 80278cc:	463a      	mov	r2, r7
 80278ce:	4621      	mov	r1, r4
 80278d0:	4630      	mov	r0, r6
 80278d2:	f7ff ffbc 	bl	802784e <__sfputs_r>
 80278d6:	3001      	adds	r0, #1
 80278d8:	f000 80c2 	beq.w	8027a60 <_vfiprintf_r+0x1ec>
 80278dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80278de:	4453      	add	r3, sl
 80278e0:	9309      	str	r3, [sp, #36]	; 0x24
 80278e2:	f898 3000 	ldrb.w	r3, [r8]
 80278e6:	2b00      	cmp	r3, #0
 80278e8:	f000 80ba 	beq.w	8027a60 <_vfiprintf_r+0x1ec>
 80278ec:	2300      	movs	r3, #0
 80278ee:	f04f 32ff 	mov.w	r2, #4294967295
 80278f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80278f6:	9304      	str	r3, [sp, #16]
 80278f8:	9307      	str	r3, [sp, #28]
 80278fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80278fe:	931a      	str	r3, [sp, #104]	; 0x68
 8027900:	46a8      	mov	r8, r5
 8027902:	2205      	movs	r2, #5
 8027904:	f818 1b01 	ldrb.w	r1, [r8], #1
 8027908:	485e      	ldr	r0, [pc, #376]	; (8027a84 <_vfiprintf_r+0x210>)
 802790a:	f7d8 fc81 	bl	8000210 <memchr>
 802790e:	9b04      	ldr	r3, [sp, #16]
 8027910:	bb78      	cbnz	r0, 8027972 <_vfiprintf_r+0xfe>
 8027912:	06d9      	lsls	r1, r3, #27
 8027914:	bf44      	itt	mi
 8027916:	2220      	movmi	r2, #32
 8027918:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802791c:	071a      	lsls	r2, r3, #28
 802791e:	bf44      	itt	mi
 8027920:	222b      	movmi	r2, #43	; 0x2b
 8027922:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8027926:	782a      	ldrb	r2, [r5, #0]
 8027928:	2a2a      	cmp	r2, #42	; 0x2a
 802792a:	d02a      	beq.n	8027982 <_vfiprintf_r+0x10e>
 802792c:	9a07      	ldr	r2, [sp, #28]
 802792e:	46a8      	mov	r8, r5
 8027930:	2000      	movs	r0, #0
 8027932:	250a      	movs	r5, #10
 8027934:	4641      	mov	r1, r8
 8027936:	f811 3b01 	ldrb.w	r3, [r1], #1
 802793a:	3b30      	subs	r3, #48	; 0x30
 802793c:	2b09      	cmp	r3, #9
 802793e:	d969      	bls.n	8027a14 <_vfiprintf_r+0x1a0>
 8027940:	b360      	cbz	r0, 802799c <_vfiprintf_r+0x128>
 8027942:	e024      	b.n	802798e <_vfiprintf_r+0x11a>
 8027944:	4b50      	ldr	r3, [pc, #320]	; (8027a88 <_vfiprintf_r+0x214>)
 8027946:	429c      	cmp	r4, r3
 8027948:	d101      	bne.n	802794e <_vfiprintf_r+0xda>
 802794a:	68b4      	ldr	r4, [r6, #8]
 802794c:	e7a2      	b.n	8027894 <_vfiprintf_r+0x20>
 802794e:	4b4f      	ldr	r3, [pc, #316]	; (8027a8c <_vfiprintf_r+0x218>)
 8027950:	429c      	cmp	r4, r3
 8027952:	bf08      	it	eq
 8027954:	68f4      	ldreq	r4, [r6, #12]
 8027956:	e79d      	b.n	8027894 <_vfiprintf_r+0x20>
 8027958:	4621      	mov	r1, r4
 802795a:	4630      	mov	r0, r6
 802795c:	f000 face 	bl	8027efc <__swsetup_r>
 8027960:	2800      	cmp	r0, #0
 8027962:	d09d      	beq.n	80278a0 <_vfiprintf_r+0x2c>
 8027964:	f04f 30ff 	mov.w	r0, #4294967295
 8027968:	b01d      	add	sp, #116	; 0x74
 802796a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802796e:	46a8      	mov	r8, r5
 8027970:	e7a2      	b.n	80278b8 <_vfiprintf_r+0x44>
 8027972:	4a44      	ldr	r2, [pc, #272]	; (8027a84 <_vfiprintf_r+0x210>)
 8027974:	1a80      	subs	r0, r0, r2
 8027976:	fa0b f000 	lsl.w	r0, fp, r0
 802797a:	4318      	orrs	r0, r3
 802797c:	9004      	str	r0, [sp, #16]
 802797e:	4645      	mov	r5, r8
 8027980:	e7be      	b.n	8027900 <_vfiprintf_r+0x8c>
 8027982:	9a03      	ldr	r2, [sp, #12]
 8027984:	1d11      	adds	r1, r2, #4
 8027986:	6812      	ldr	r2, [r2, #0]
 8027988:	9103      	str	r1, [sp, #12]
 802798a:	2a00      	cmp	r2, #0
 802798c:	db01      	blt.n	8027992 <_vfiprintf_r+0x11e>
 802798e:	9207      	str	r2, [sp, #28]
 8027990:	e004      	b.n	802799c <_vfiprintf_r+0x128>
 8027992:	4252      	negs	r2, r2
 8027994:	f043 0302 	orr.w	r3, r3, #2
 8027998:	9207      	str	r2, [sp, #28]
 802799a:	9304      	str	r3, [sp, #16]
 802799c:	f898 3000 	ldrb.w	r3, [r8]
 80279a0:	2b2e      	cmp	r3, #46	; 0x2e
 80279a2:	d10e      	bne.n	80279c2 <_vfiprintf_r+0x14e>
 80279a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80279a8:	2b2a      	cmp	r3, #42	; 0x2a
 80279aa:	d138      	bne.n	8027a1e <_vfiprintf_r+0x1aa>
 80279ac:	9b03      	ldr	r3, [sp, #12]
 80279ae:	1d1a      	adds	r2, r3, #4
 80279b0:	681b      	ldr	r3, [r3, #0]
 80279b2:	9203      	str	r2, [sp, #12]
 80279b4:	2b00      	cmp	r3, #0
 80279b6:	bfb8      	it	lt
 80279b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80279bc:	f108 0802 	add.w	r8, r8, #2
 80279c0:	9305      	str	r3, [sp, #20]
 80279c2:	4d33      	ldr	r5, [pc, #204]	; (8027a90 <_vfiprintf_r+0x21c>)
 80279c4:	f898 1000 	ldrb.w	r1, [r8]
 80279c8:	2203      	movs	r2, #3
 80279ca:	4628      	mov	r0, r5
 80279cc:	f7d8 fc20 	bl	8000210 <memchr>
 80279d0:	b140      	cbz	r0, 80279e4 <_vfiprintf_r+0x170>
 80279d2:	2340      	movs	r3, #64	; 0x40
 80279d4:	1b40      	subs	r0, r0, r5
 80279d6:	fa03 f000 	lsl.w	r0, r3, r0
 80279da:	9b04      	ldr	r3, [sp, #16]
 80279dc:	4303      	orrs	r3, r0
 80279de:	f108 0801 	add.w	r8, r8, #1
 80279e2:	9304      	str	r3, [sp, #16]
 80279e4:	f898 1000 	ldrb.w	r1, [r8]
 80279e8:	482a      	ldr	r0, [pc, #168]	; (8027a94 <_vfiprintf_r+0x220>)
 80279ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80279ee:	2206      	movs	r2, #6
 80279f0:	f108 0701 	add.w	r7, r8, #1
 80279f4:	f7d8 fc0c 	bl	8000210 <memchr>
 80279f8:	2800      	cmp	r0, #0
 80279fa:	d037      	beq.n	8027a6c <_vfiprintf_r+0x1f8>
 80279fc:	4b26      	ldr	r3, [pc, #152]	; (8027a98 <_vfiprintf_r+0x224>)
 80279fe:	bb1b      	cbnz	r3, 8027a48 <_vfiprintf_r+0x1d4>
 8027a00:	9b03      	ldr	r3, [sp, #12]
 8027a02:	3307      	adds	r3, #7
 8027a04:	f023 0307 	bic.w	r3, r3, #7
 8027a08:	3308      	adds	r3, #8
 8027a0a:	9303      	str	r3, [sp, #12]
 8027a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a0e:	444b      	add	r3, r9
 8027a10:	9309      	str	r3, [sp, #36]	; 0x24
 8027a12:	e750      	b.n	80278b6 <_vfiprintf_r+0x42>
 8027a14:	fb05 3202 	mla	r2, r5, r2, r3
 8027a18:	2001      	movs	r0, #1
 8027a1a:	4688      	mov	r8, r1
 8027a1c:	e78a      	b.n	8027934 <_vfiprintf_r+0xc0>
 8027a1e:	2300      	movs	r3, #0
 8027a20:	f108 0801 	add.w	r8, r8, #1
 8027a24:	9305      	str	r3, [sp, #20]
 8027a26:	4619      	mov	r1, r3
 8027a28:	250a      	movs	r5, #10
 8027a2a:	4640      	mov	r0, r8
 8027a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027a30:	3a30      	subs	r2, #48	; 0x30
 8027a32:	2a09      	cmp	r2, #9
 8027a34:	d903      	bls.n	8027a3e <_vfiprintf_r+0x1ca>
 8027a36:	2b00      	cmp	r3, #0
 8027a38:	d0c3      	beq.n	80279c2 <_vfiprintf_r+0x14e>
 8027a3a:	9105      	str	r1, [sp, #20]
 8027a3c:	e7c1      	b.n	80279c2 <_vfiprintf_r+0x14e>
 8027a3e:	fb05 2101 	mla	r1, r5, r1, r2
 8027a42:	2301      	movs	r3, #1
 8027a44:	4680      	mov	r8, r0
 8027a46:	e7f0      	b.n	8027a2a <_vfiprintf_r+0x1b6>
 8027a48:	ab03      	add	r3, sp, #12
 8027a4a:	9300      	str	r3, [sp, #0]
 8027a4c:	4622      	mov	r2, r4
 8027a4e:	4b13      	ldr	r3, [pc, #76]	; (8027a9c <_vfiprintf_r+0x228>)
 8027a50:	a904      	add	r1, sp, #16
 8027a52:	4630      	mov	r0, r6
 8027a54:	f3af 8000 	nop.w
 8027a58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8027a5c:	4681      	mov	r9, r0
 8027a5e:	d1d5      	bne.n	8027a0c <_vfiprintf_r+0x198>
 8027a60:	89a3      	ldrh	r3, [r4, #12]
 8027a62:	065b      	lsls	r3, r3, #25
 8027a64:	f53f af7e 	bmi.w	8027964 <_vfiprintf_r+0xf0>
 8027a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027a6a:	e77d      	b.n	8027968 <_vfiprintf_r+0xf4>
 8027a6c:	ab03      	add	r3, sp, #12
 8027a6e:	9300      	str	r3, [sp, #0]
 8027a70:	4622      	mov	r2, r4
 8027a72:	4b0a      	ldr	r3, [pc, #40]	; (8027a9c <_vfiprintf_r+0x228>)
 8027a74:	a904      	add	r1, sp, #16
 8027a76:	4630      	mov	r0, r6
 8027a78:	f000 f888 	bl	8027b8c <_printf_i>
 8027a7c:	e7ec      	b.n	8027a58 <_vfiprintf_r+0x1e4>
 8027a7e:	bf00      	nop
 8027a80:	0802d050 	.word	0x0802d050
 8027a84:	0802cff8 	.word	0x0802cff8
 8027a88:	0802d070 	.word	0x0802d070
 8027a8c:	0802d030 	.word	0x0802d030
 8027a90:	0802cffe 	.word	0x0802cffe
 8027a94:	0802d002 	.word	0x0802d002
 8027a98:	00000000 	.word	0x00000000
 8027a9c:	0802784f 	.word	0x0802784f

08027aa0 <_printf_common>:
 8027aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027aa4:	4691      	mov	r9, r2
 8027aa6:	461f      	mov	r7, r3
 8027aa8:	688a      	ldr	r2, [r1, #8]
 8027aaa:	690b      	ldr	r3, [r1, #16]
 8027aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027ab0:	4293      	cmp	r3, r2
 8027ab2:	bfb8      	it	lt
 8027ab4:	4613      	movlt	r3, r2
 8027ab6:	f8c9 3000 	str.w	r3, [r9]
 8027aba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027abe:	4606      	mov	r6, r0
 8027ac0:	460c      	mov	r4, r1
 8027ac2:	b112      	cbz	r2, 8027aca <_printf_common+0x2a>
 8027ac4:	3301      	adds	r3, #1
 8027ac6:	f8c9 3000 	str.w	r3, [r9]
 8027aca:	6823      	ldr	r3, [r4, #0]
 8027acc:	0699      	lsls	r1, r3, #26
 8027ace:	bf42      	ittt	mi
 8027ad0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8027ad4:	3302      	addmi	r3, #2
 8027ad6:	f8c9 3000 	strmi.w	r3, [r9]
 8027ada:	6825      	ldr	r5, [r4, #0]
 8027adc:	f015 0506 	ands.w	r5, r5, #6
 8027ae0:	d107      	bne.n	8027af2 <_printf_common+0x52>
 8027ae2:	f104 0a19 	add.w	sl, r4, #25
 8027ae6:	68e3      	ldr	r3, [r4, #12]
 8027ae8:	f8d9 2000 	ldr.w	r2, [r9]
 8027aec:	1a9b      	subs	r3, r3, r2
 8027aee:	42ab      	cmp	r3, r5
 8027af0:	dc28      	bgt.n	8027b44 <_printf_common+0xa4>
 8027af2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8027af6:	6822      	ldr	r2, [r4, #0]
 8027af8:	3300      	adds	r3, #0
 8027afa:	bf18      	it	ne
 8027afc:	2301      	movne	r3, #1
 8027afe:	0692      	lsls	r2, r2, #26
 8027b00:	d42d      	bmi.n	8027b5e <_printf_common+0xbe>
 8027b02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027b06:	4639      	mov	r1, r7
 8027b08:	4630      	mov	r0, r6
 8027b0a:	47c0      	blx	r8
 8027b0c:	3001      	adds	r0, #1
 8027b0e:	d020      	beq.n	8027b52 <_printf_common+0xb2>
 8027b10:	6823      	ldr	r3, [r4, #0]
 8027b12:	68e5      	ldr	r5, [r4, #12]
 8027b14:	f8d9 2000 	ldr.w	r2, [r9]
 8027b18:	f003 0306 	and.w	r3, r3, #6
 8027b1c:	2b04      	cmp	r3, #4
 8027b1e:	bf08      	it	eq
 8027b20:	1aad      	subeq	r5, r5, r2
 8027b22:	68a3      	ldr	r3, [r4, #8]
 8027b24:	6922      	ldr	r2, [r4, #16]
 8027b26:	bf0c      	ite	eq
 8027b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027b2c:	2500      	movne	r5, #0
 8027b2e:	4293      	cmp	r3, r2
 8027b30:	bfc4      	itt	gt
 8027b32:	1a9b      	subgt	r3, r3, r2
 8027b34:	18ed      	addgt	r5, r5, r3
 8027b36:	f04f 0900 	mov.w	r9, #0
 8027b3a:	341a      	adds	r4, #26
 8027b3c:	454d      	cmp	r5, r9
 8027b3e:	d11a      	bne.n	8027b76 <_printf_common+0xd6>
 8027b40:	2000      	movs	r0, #0
 8027b42:	e008      	b.n	8027b56 <_printf_common+0xb6>
 8027b44:	2301      	movs	r3, #1
 8027b46:	4652      	mov	r2, sl
 8027b48:	4639      	mov	r1, r7
 8027b4a:	4630      	mov	r0, r6
 8027b4c:	47c0      	blx	r8
 8027b4e:	3001      	adds	r0, #1
 8027b50:	d103      	bne.n	8027b5a <_printf_common+0xba>
 8027b52:	f04f 30ff 	mov.w	r0, #4294967295
 8027b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027b5a:	3501      	adds	r5, #1
 8027b5c:	e7c3      	b.n	8027ae6 <_printf_common+0x46>
 8027b5e:	18e1      	adds	r1, r4, r3
 8027b60:	1c5a      	adds	r2, r3, #1
 8027b62:	2030      	movs	r0, #48	; 0x30
 8027b64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027b68:	4422      	add	r2, r4
 8027b6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027b6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027b72:	3302      	adds	r3, #2
 8027b74:	e7c5      	b.n	8027b02 <_printf_common+0x62>
 8027b76:	2301      	movs	r3, #1
 8027b78:	4622      	mov	r2, r4
 8027b7a:	4639      	mov	r1, r7
 8027b7c:	4630      	mov	r0, r6
 8027b7e:	47c0      	blx	r8
 8027b80:	3001      	adds	r0, #1
 8027b82:	d0e6      	beq.n	8027b52 <_printf_common+0xb2>
 8027b84:	f109 0901 	add.w	r9, r9, #1
 8027b88:	e7d8      	b.n	8027b3c <_printf_common+0x9c>
	...

08027b8c <_printf_i>:
 8027b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027b90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8027b94:	460c      	mov	r4, r1
 8027b96:	7e09      	ldrb	r1, [r1, #24]
 8027b98:	b085      	sub	sp, #20
 8027b9a:	296e      	cmp	r1, #110	; 0x6e
 8027b9c:	4617      	mov	r7, r2
 8027b9e:	4606      	mov	r6, r0
 8027ba0:	4698      	mov	r8, r3
 8027ba2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027ba4:	f000 80b3 	beq.w	8027d0e <_printf_i+0x182>
 8027ba8:	d822      	bhi.n	8027bf0 <_printf_i+0x64>
 8027baa:	2963      	cmp	r1, #99	; 0x63
 8027bac:	d036      	beq.n	8027c1c <_printf_i+0x90>
 8027bae:	d80a      	bhi.n	8027bc6 <_printf_i+0x3a>
 8027bb0:	2900      	cmp	r1, #0
 8027bb2:	f000 80b9 	beq.w	8027d28 <_printf_i+0x19c>
 8027bb6:	2958      	cmp	r1, #88	; 0x58
 8027bb8:	f000 8083 	beq.w	8027cc2 <_printf_i+0x136>
 8027bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027bc0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8027bc4:	e032      	b.n	8027c2c <_printf_i+0xa0>
 8027bc6:	2964      	cmp	r1, #100	; 0x64
 8027bc8:	d001      	beq.n	8027bce <_printf_i+0x42>
 8027bca:	2969      	cmp	r1, #105	; 0x69
 8027bcc:	d1f6      	bne.n	8027bbc <_printf_i+0x30>
 8027bce:	6820      	ldr	r0, [r4, #0]
 8027bd0:	6813      	ldr	r3, [r2, #0]
 8027bd2:	0605      	lsls	r5, r0, #24
 8027bd4:	f103 0104 	add.w	r1, r3, #4
 8027bd8:	d52a      	bpl.n	8027c30 <_printf_i+0xa4>
 8027bda:	681b      	ldr	r3, [r3, #0]
 8027bdc:	6011      	str	r1, [r2, #0]
 8027bde:	2b00      	cmp	r3, #0
 8027be0:	da03      	bge.n	8027bea <_printf_i+0x5e>
 8027be2:	222d      	movs	r2, #45	; 0x2d
 8027be4:	425b      	negs	r3, r3
 8027be6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8027bea:	486f      	ldr	r0, [pc, #444]	; (8027da8 <_printf_i+0x21c>)
 8027bec:	220a      	movs	r2, #10
 8027bee:	e039      	b.n	8027c64 <_printf_i+0xd8>
 8027bf0:	2973      	cmp	r1, #115	; 0x73
 8027bf2:	f000 809d 	beq.w	8027d30 <_printf_i+0x1a4>
 8027bf6:	d808      	bhi.n	8027c0a <_printf_i+0x7e>
 8027bf8:	296f      	cmp	r1, #111	; 0x6f
 8027bfa:	d020      	beq.n	8027c3e <_printf_i+0xb2>
 8027bfc:	2970      	cmp	r1, #112	; 0x70
 8027bfe:	d1dd      	bne.n	8027bbc <_printf_i+0x30>
 8027c00:	6823      	ldr	r3, [r4, #0]
 8027c02:	f043 0320 	orr.w	r3, r3, #32
 8027c06:	6023      	str	r3, [r4, #0]
 8027c08:	e003      	b.n	8027c12 <_printf_i+0x86>
 8027c0a:	2975      	cmp	r1, #117	; 0x75
 8027c0c:	d017      	beq.n	8027c3e <_printf_i+0xb2>
 8027c0e:	2978      	cmp	r1, #120	; 0x78
 8027c10:	d1d4      	bne.n	8027bbc <_printf_i+0x30>
 8027c12:	2378      	movs	r3, #120	; 0x78
 8027c14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027c18:	4864      	ldr	r0, [pc, #400]	; (8027dac <_printf_i+0x220>)
 8027c1a:	e055      	b.n	8027cc8 <_printf_i+0x13c>
 8027c1c:	6813      	ldr	r3, [r2, #0]
 8027c1e:	1d19      	adds	r1, r3, #4
 8027c20:	681b      	ldr	r3, [r3, #0]
 8027c22:	6011      	str	r1, [r2, #0]
 8027c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027c2c:	2301      	movs	r3, #1
 8027c2e:	e08c      	b.n	8027d4a <_printf_i+0x1be>
 8027c30:	681b      	ldr	r3, [r3, #0]
 8027c32:	6011      	str	r1, [r2, #0]
 8027c34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8027c38:	bf18      	it	ne
 8027c3a:	b21b      	sxthne	r3, r3
 8027c3c:	e7cf      	b.n	8027bde <_printf_i+0x52>
 8027c3e:	6813      	ldr	r3, [r2, #0]
 8027c40:	6825      	ldr	r5, [r4, #0]
 8027c42:	1d18      	adds	r0, r3, #4
 8027c44:	6010      	str	r0, [r2, #0]
 8027c46:	0628      	lsls	r0, r5, #24
 8027c48:	d501      	bpl.n	8027c4e <_printf_i+0xc2>
 8027c4a:	681b      	ldr	r3, [r3, #0]
 8027c4c:	e002      	b.n	8027c54 <_printf_i+0xc8>
 8027c4e:	0668      	lsls	r0, r5, #25
 8027c50:	d5fb      	bpl.n	8027c4a <_printf_i+0xbe>
 8027c52:	881b      	ldrh	r3, [r3, #0]
 8027c54:	4854      	ldr	r0, [pc, #336]	; (8027da8 <_printf_i+0x21c>)
 8027c56:	296f      	cmp	r1, #111	; 0x6f
 8027c58:	bf14      	ite	ne
 8027c5a:	220a      	movne	r2, #10
 8027c5c:	2208      	moveq	r2, #8
 8027c5e:	2100      	movs	r1, #0
 8027c60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027c64:	6865      	ldr	r5, [r4, #4]
 8027c66:	60a5      	str	r5, [r4, #8]
 8027c68:	2d00      	cmp	r5, #0
 8027c6a:	f2c0 8095 	blt.w	8027d98 <_printf_i+0x20c>
 8027c6e:	6821      	ldr	r1, [r4, #0]
 8027c70:	f021 0104 	bic.w	r1, r1, #4
 8027c74:	6021      	str	r1, [r4, #0]
 8027c76:	2b00      	cmp	r3, #0
 8027c78:	d13d      	bne.n	8027cf6 <_printf_i+0x16a>
 8027c7a:	2d00      	cmp	r5, #0
 8027c7c:	f040 808e 	bne.w	8027d9c <_printf_i+0x210>
 8027c80:	4665      	mov	r5, ip
 8027c82:	2a08      	cmp	r2, #8
 8027c84:	d10b      	bne.n	8027c9e <_printf_i+0x112>
 8027c86:	6823      	ldr	r3, [r4, #0]
 8027c88:	07db      	lsls	r3, r3, #31
 8027c8a:	d508      	bpl.n	8027c9e <_printf_i+0x112>
 8027c8c:	6923      	ldr	r3, [r4, #16]
 8027c8e:	6862      	ldr	r2, [r4, #4]
 8027c90:	429a      	cmp	r2, r3
 8027c92:	bfde      	ittt	le
 8027c94:	2330      	movle	r3, #48	; 0x30
 8027c96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027c9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8027c9e:	ebac 0305 	sub.w	r3, ip, r5
 8027ca2:	6123      	str	r3, [r4, #16]
 8027ca4:	f8cd 8000 	str.w	r8, [sp]
 8027ca8:	463b      	mov	r3, r7
 8027caa:	aa03      	add	r2, sp, #12
 8027cac:	4621      	mov	r1, r4
 8027cae:	4630      	mov	r0, r6
 8027cb0:	f7ff fef6 	bl	8027aa0 <_printf_common>
 8027cb4:	3001      	adds	r0, #1
 8027cb6:	d14d      	bne.n	8027d54 <_printf_i+0x1c8>
 8027cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8027cbc:	b005      	add	sp, #20
 8027cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027cc2:	4839      	ldr	r0, [pc, #228]	; (8027da8 <_printf_i+0x21c>)
 8027cc4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8027cc8:	6813      	ldr	r3, [r2, #0]
 8027cca:	6821      	ldr	r1, [r4, #0]
 8027ccc:	1d1d      	adds	r5, r3, #4
 8027cce:	681b      	ldr	r3, [r3, #0]
 8027cd0:	6015      	str	r5, [r2, #0]
 8027cd2:	060a      	lsls	r2, r1, #24
 8027cd4:	d50b      	bpl.n	8027cee <_printf_i+0x162>
 8027cd6:	07ca      	lsls	r2, r1, #31
 8027cd8:	bf44      	itt	mi
 8027cda:	f041 0120 	orrmi.w	r1, r1, #32
 8027cde:	6021      	strmi	r1, [r4, #0]
 8027ce0:	b91b      	cbnz	r3, 8027cea <_printf_i+0x15e>
 8027ce2:	6822      	ldr	r2, [r4, #0]
 8027ce4:	f022 0220 	bic.w	r2, r2, #32
 8027ce8:	6022      	str	r2, [r4, #0]
 8027cea:	2210      	movs	r2, #16
 8027cec:	e7b7      	b.n	8027c5e <_printf_i+0xd2>
 8027cee:	064d      	lsls	r5, r1, #25
 8027cf0:	bf48      	it	mi
 8027cf2:	b29b      	uxthmi	r3, r3
 8027cf4:	e7ef      	b.n	8027cd6 <_printf_i+0x14a>
 8027cf6:	4665      	mov	r5, ip
 8027cf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8027cfc:	fb02 3311 	mls	r3, r2, r1, r3
 8027d00:	5cc3      	ldrb	r3, [r0, r3]
 8027d02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8027d06:	460b      	mov	r3, r1
 8027d08:	2900      	cmp	r1, #0
 8027d0a:	d1f5      	bne.n	8027cf8 <_printf_i+0x16c>
 8027d0c:	e7b9      	b.n	8027c82 <_printf_i+0xf6>
 8027d0e:	6813      	ldr	r3, [r2, #0]
 8027d10:	6825      	ldr	r5, [r4, #0]
 8027d12:	6961      	ldr	r1, [r4, #20]
 8027d14:	1d18      	adds	r0, r3, #4
 8027d16:	6010      	str	r0, [r2, #0]
 8027d18:	0628      	lsls	r0, r5, #24
 8027d1a:	681b      	ldr	r3, [r3, #0]
 8027d1c:	d501      	bpl.n	8027d22 <_printf_i+0x196>
 8027d1e:	6019      	str	r1, [r3, #0]
 8027d20:	e002      	b.n	8027d28 <_printf_i+0x19c>
 8027d22:	066a      	lsls	r2, r5, #25
 8027d24:	d5fb      	bpl.n	8027d1e <_printf_i+0x192>
 8027d26:	8019      	strh	r1, [r3, #0]
 8027d28:	2300      	movs	r3, #0
 8027d2a:	6123      	str	r3, [r4, #16]
 8027d2c:	4665      	mov	r5, ip
 8027d2e:	e7b9      	b.n	8027ca4 <_printf_i+0x118>
 8027d30:	6813      	ldr	r3, [r2, #0]
 8027d32:	1d19      	adds	r1, r3, #4
 8027d34:	6011      	str	r1, [r2, #0]
 8027d36:	681d      	ldr	r5, [r3, #0]
 8027d38:	6862      	ldr	r2, [r4, #4]
 8027d3a:	2100      	movs	r1, #0
 8027d3c:	4628      	mov	r0, r5
 8027d3e:	f7d8 fa67 	bl	8000210 <memchr>
 8027d42:	b108      	cbz	r0, 8027d48 <_printf_i+0x1bc>
 8027d44:	1b40      	subs	r0, r0, r5
 8027d46:	6060      	str	r0, [r4, #4]
 8027d48:	6863      	ldr	r3, [r4, #4]
 8027d4a:	6123      	str	r3, [r4, #16]
 8027d4c:	2300      	movs	r3, #0
 8027d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027d52:	e7a7      	b.n	8027ca4 <_printf_i+0x118>
 8027d54:	6923      	ldr	r3, [r4, #16]
 8027d56:	462a      	mov	r2, r5
 8027d58:	4639      	mov	r1, r7
 8027d5a:	4630      	mov	r0, r6
 8027d5c:	47c0      	blx	r8
 8027d5e:	3001      	adds	r0, #1
 8027d60:	d0aa      	beq.n	8027cb8 <_printf_i+0x12c>
 8027d62:	6823      	ldr	r3, [r4, #0]
 8027d64:	079b      	lsls	r3, r3, #30
 8027d66:	d413      	bmi.n	8027d90 <_printf_i+0x204>
 8027d68:	68e0      	ldr	r0, [r4, #12]
 8027d6a:	9b03      	ldr	r3, [sp, #12]
 8027d6c:	4298      	cmp	r0, r3
 8027d6e:	bfb8      	it	lt
 8027d70:	4618      	movlt	r0, r3
 8027d72:	e7a3      	b.n	8027cbc <_printf_i+0x130>
 8027d74:	2301      	movs	r3, #1
 8027d76:	464a      	mov	r2, r9
 8027d78:	4639      	mov	r1, r7
 8027d7a:	4630      	mov	r0, r6
 8027d7c:	47c0      	blx	r8
 8027d7e:	3001      	adds	r0, #1
 8027d80:	d09a      	beq.n	8027cb8 <_printf_i+0x12c>
 8027d82:	3501      	adds	r5, #1
 8027d84:	68e3      	ldr	r3, [r4, #12]
 8027d86:	9a03      	ldr	r2, [sp, #12]
 8027d88:	1a9b      	subs	r3, r3, r2
 8027d8a:	42ab      	cmp	r3, r5
 8027d8c:	dcf2      	bgt.n	8027d74 <_printf_i+0x1e8>
 8027d8e:	e7eb      	b.n	8027d68 <_printf_i+0x1dc>
 8027d90:	2500      	movs	r5, #0
 8027d92:	f104 0919 	add.w	r9, r4, #25
 8027d96:	e7f5      	b.n	8027d84 <_printf_i+0x1f8>
 8027d98:	2b00      	cmp	r3, #0
 8027d9a:	d1ac      	bne.n	8027cf6 <_printf_i+0x16a>
 8027d9c:	7803      	ldrb	r3, [r0, #0]
 8027d9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027da2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027da6:	e76c      	b.n	8027c82 <_printf_i+0xf6>
 8027da8:	0802d009 	.word	0x0802d009
 8027dac:	0802d01a 	.word	0x0802d01a

08027db0 <_sbrk_r>:
 8027db0:	b538      	push	{r3, r4, r5, lr}
 8027db2:	4c06      	ldr	r4, [pc, #24]	; (8027dcc <_sbrk_r+0x1c>)
 8027db4:	2300      	movs	r3, #0
 8027db6:	4605      	mov	r5, r0
 8027db8:	4608      	mov	r0, r1
 8027dba:	6023      	str	r3, [r4, #0]
 8027dbc:	f7db f8d8 	bl	8002f70 <_sbrk>
 8027dc0:	1c43      	adds	r3, r0, #1
 8027dc2:	d102      	bne.n	8027dca <_sbrk_r+0x1a>
 8027dc4:	6823      	ldr	r3, [r4, #0]
 8027dc6:	b103      	cbz	r3, 8027dca <_sbrk_r+0x1a>
 8027dc8:	602b      	str	r3, [r5, #0]
 8027dca:	bd38      	pop	{r3, r4, r5, pc}
 8027dcc:	2000c15c 	.word	0x2000c15c

08027dd0 <_raise_r>:
 8027dd0:	291f      	cmp	r1, #31
 8027dd2:	b538      	push	{r3, r4, r5, lr}
 8027dd4:	4604      	mov	r4, r0
 8027dd6:	460d      	mov	r5, r1
 8027dd8:	d904      	bls.n	8027de4 <_raise_r+0x14>
 8027dda:	2316      	movs	r3, #22
 8027ddc:	6003      	str	r3, [r0, #0]
 8027dde:	f04f 30ff 	mov.w	r0, #4294967295
 8027de2:	bd38      	pop	{r3, r4, r5, pc}
 8027de4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8027de6:	b112      	cbz	r2, 8027dee <_raise_r+0x1e>
 8027de8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027dec:	b94b      	cbnz	r3, 8027e02 <_raise_r+0x32>
 8027dee:	4620      	mov	r0, r4
 8027df0:	f000 f830 	bl	8027e54 <_getpid_r>
 8027df4:	462a      	mov	r2, r5
 8027df6:	4601      	mov	r1, r0
 8027df8:	4620      	mov	r0, r4
 8027dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027dfe:	f000 b817 	b.w	8027e30 <_kill_r>
 8027e02:	2b01      	cmp	r3, #1
 8027e04:	d00a      	beq.n	8027e1c <_raise_r+0x4c>
 8027e06:	1c59      	adds	r1, r3, #1
 8027e08:	d103      	bne.n	8027e12 <_raise_r+0x42>
 8027e0a:	2316      	movs	r3, #22
 8027e0c:	6003      	str	r3, [r0, #0]
 8027e0e:	2001      	movs	r0, #1
 8027e10:	e7e7      	b.n	8027de2 <_raise_r+0x12>
 8027e12:	2400      	movs	r4, #0
 8027e14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027e18:	4628      	mov	r0, r5
 8027e1a:	4798      	blx	r3
 8027e1c:	2000      	movs	r0, #0
 8027e1e:	e7e0      	b.n	8027de2 <_raise_r+0x12>

08027e20 <raise>:
 8027e20:	4b02      	ldr	r3, [pc, #8]	; (8027e2c <raise+0xc>)
 8027e22:	4601      	mov	r1, r0
 8027e24:	6818      	ldr	r0, [r3, #0]
 8027e26:	f7ff bfd3 	b.w	8027dd0 <_raise_r>
 8027e2a:	bf00      	nop
 8027e2c:	20000098 	.word	0x20000098

08027e30 <_kill_r>:
 8027e30:	b538      	push	{r3, r4, r5, lr}
 8027e32:	4c07      	ldr	r4, [pc, #28]	; (8027e50 <_kill_r+0x20>)
 8027e34:	2300      	movs	r3, #0
 8027e36:	4605      	mov	r5, r0
 8027e38:	4608      	mov	r0, r1
 8027e3a:	4611      	mov	r1, r2
 8027e3c:	6023      	str	r3, [r4, #0]
 8027e3e:	f7db f80f 	bl	8002e60 <_kill>
 8027e42:	1c43      	adds	r3, r0, #1
 8027e44:	d102      	bne.n	8027e4c <_kill_r+0x1c>
 8027e46:	6823      	ldr	r3, [r4, #0]
 8027e48:	b103      	cbz	r3, 8027e4c <_kill_r+0x1c>
 8027e4a:	602b      	str	r3, [r5, #0]
 8027e4c:	bd38      	pop	{r3, r4, r5, pc}
 8027e4e:	bf00      	nop
 8027e50:	2000c15c 	.word	0x2000c15c

08027e54 <_getpid_r>:
 8027e54:	f7da bffc 	b.w	8002e50 <_getpid>

08027e58 <__swbuf_r>:
 8027e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027e5a:	460e      	mov	r6, r1
 8027e5c:	4614      	mov	r4, r2
 8027e5e:	4605      	mov	r5, r0
 8027e60:	b118      	cbz	r0, 8027e6a <__swbuf_r+0x12>
 8027e62:	6983      	ldr	r3, [r0, #24]
 8027e64:	b90b      	cbnz	r3, 8027e6a <__swbuf_r+0x12>
 8027e66:	f000 fa0b 	bl	8028280 <__sinit>
 8027e6a:	4b21      	ldr	r3, [pc, #132]	; (8027ef0 <__swbuf_r+0x98>)
 8027e6c:	429c      	cmp	r4, r3
 8027e6e:	d12a      	bne.n	8027ec6 <__swbuf_r+0x6e>
 8027e70:	686c      	ldr	r4, [r5, #4]
 8027e72:	69a3      	ldr	r3, [r4, #24]
 8027e74:	60a3      	str	r3, [r4, #8]
 8027e76:	89a3      	ldrh	r3, [r4, #12]
 8027e78:	071a      	lsls	r2, r3, #28
 8027e7a:	d52e      	bpl.n	8027eda <__swbuf_r+0x82>
 8027e7c:	6923      	ldr	r3, [r4, #16]
 8027e7e:	b363      	cbz	r3, 8027eda <__swbuf_r+0x82>
 8027e80:	6923      	ldr	r3, [r4, #16]
 8027e82:	6820      	ldr	r0, [r4, #0]
 8027e84:	1ac0      	subs	r0, r0, r3
 8027e86:	6963      	ldr	r3, [r4, #20]
 8027e88:	b2f6      	uxtb	r6, r6
 8027e8a:	4283      	cmp	r3, r0
 8027e8c:	4637      	mov	r7, r6
 8027e8e:	dc04      	bgt.n	8027e9a <__swbuf_r+0x42>
 8027e90:	4621      	mov	r1, r4
 8027e92:	4628      	mov	r0, r5
 8027e94:	f000 f98a 	bl	80281ac <_fflush_r>
 8027e98:	bb28      	cbnz	r0, 8027ee6 <__swbuf_r+0x8e>
 8027e9a:	68a3      	ldr	r3, [r4, #8]
 8027e9c:	3b01      	subs	r3, #1
 8027e9e:	60a3      	str	r3, [r4, #8]
 8027ea0:	6823      	ldr	r3, [r4, #0]
 8027ea2:	1c5a      	adds	r2, r3, #1
 8027ea4:	6022      	str	r2, [r4, #0]
 8027ea6:	701e      	strb	r6, [r3, #0]
 8027ea8:	6963      	ldr	r3, [r4, #20]
 8027eaa:	3001      	adds	r0, #1
 8027eac:	4283      	cmp	r3, r0
 8027eae:	d004      	beq.n	8027eba <__swbuf_r+0x62>
 8027eb0:	89a3      	ldrh	r3, [r4, #12]
 8027eb2:	07db      	lsls	r3, r3, #31
 8027eb4:	d519      	bpl.n	8027eea <__swbuf_r+0x92>
 8027eb6:	2e0a      	cmp	r6, #10
 8027eb8:	d117      	bne.n	8027eea <__swbuf_r+0x92>
 8027eba:	4621      	mov	r1, r4
 8027ebc:	4628      	mov	r0, r5
 8027ebe:	f000 f975 	bl	80281ac <_fflush_r>
 8027ec2:	b190      	cbz	r0, 8027eea <__swbuf_r+0x92>
 8027ec4:	e00f      	b.n	8027ee6 <__swbuf_r+0x8e>
 8027ec6:	4b0b      	ldr	r3, [pc, #44]	; (8027ef4 <__swbuf_r+0x9c>)
 8027ec8:	429c      	cmp	r4, r3
 8027eca:	d101      	bne.n	8027ed0 <__swbuf_r+0x78>
 8027ecc:	68ac      	ldr	r4, [r5, #8]
 8027ece:	e7d0      	b.n	8027e72 <__swbuf_r+0x1a>
 8027ed0:	4b09      	ldr	r3, [pc, #36]	; (8027ef8 <__swbuf_r+0xa0>)
 8027ed2:	429c      	cmp	r4, r3
 8027ed4:	bf08      	it	eq
 8027ed6:	68ec      	ldreq	r4, [r5, #12]
 8027ed8:	e7cb      	b.n	8027e72 <__swbuf_r+0x1a>
 8027eda:	4621      	mov	r1, r4
 8027edc:	4628      	mov	r0, r5
 8027ede:	f000 f80d 	bl	8027efc <__swsetup_r>
 8027ee2:	2800      	cmp	r0, #0
 8027ee4:	d0cc      	beq.n	8027e80 <__swbuf_r+0x28>
 8027ee6:	f04f 37ff 	mov.w	r7, #4294967295
 8027eea:	4638      	mov	r0, r7
 8027eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027eee:	bf00      	nop
 8027ef0:	0802d050 	.word	0x0802d050
 8027ef4:	0802d070 	.word	0x0802d070
 8027ef8:	0802d030 	.word	0x0802d030

08027efc <__swsetup_r>:
 8027efc:	4b32      	ldr	r3, [pc, #200]	; (8027fc8 <__swsetup_r+0xcc>)
 8027efe:	b570      	push	{r4, r5, r6, lr}
 8027f00:	681d      	ldr	r5, [r3, #0]
 8027f02:	4606      	mov	r6, r0
 8027f04:	460c      	mov	r4, r1
 8027f06:	b125      	cbz	r5, 8027f12 <__swsetup_r+0x16>
 8027f08:	69ab      	ldr	r3, [r5, #24]
 8027f0a:	b913      	cbnz	r3, 8027f12 <__swsetup_r+0x16>
 8027f0c:	4628      	mov	r0, r5
 8027f0e:	f000 f9b7 	bl	8028280 <__sinit>
 8027f12:	4b2e      	ldr	r3, [pc, #184]	; (8027fcc <__swsetup_r+0xd0>)
 8027f14:	429c      	cmp	r4, r3
 8027f16:	d10f      	bne.n	8027f38 <__swsetup_r+0x3c>
 8027f18:	686c      	ldr	r4, [r5, #4]
 8027f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027f1e:	b29a      	uxth	r2, r3
 8027f20:	0715      	lsls	r5, r2, #28
 8027f22:	d42c      	bmi.n	8027f7e <__swsetup_r+0x82>
 8027f24:	06d0      	lsls	r0, r2, #27
 8027f26:	d411      	bmi.n	8027f4c <__swsetup_r+0x50>
 8027f28:	2209      	movs	r2, #9
 8027f2a:	6032      	str	r2, [r6, #0]
 8027f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027f30:	81a3      	strh	r3, [r4, #12]
 8027f32:	f04f 30ff 	mov.w	r0, #4294967295
 8027f36:	e03e      	b.n	8027fb6 <__swsetup_r+0xba>
 8027f38:	4b25      	ldr	r3, [pc, #148]	; (8027fd0 <__swsetup_r+0xd4>)
 8027f3a:	429c      	cmp	r4, r3
 8027f3c:	d101      	bne.n	8027f42 <__swsetup_r+0x46>
 8027f3e:	68ac      	ldr	r4, [r5, #8]
 8027f40:	e7eb      	b.n	8027f1a <__swsetup_r+0x1e>
 8027f42:	4b24      	ldr	r3, [pc, #144]	; (8027fd4 <__swsetup_r+0xd8>)
 8027f44:	429c      	cmp	r4, r3
 8027f46:	bf08      	it	eq
 8027f48:	68ec      	ldreq	r4, [r5, #12]
 8027f4a:	e7e6      	b.n	8027f1a <__swsetup_r+0x1e>
 8027f4c:	0751      	lsls	r1, r2, #29
 8027f4e:	d512      	bpl.n	8027f76 <__swsetup_r+0x7a>
 8027f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027f52:	b141      	cbz	r1, 8027f66 <__swsetup_r+0x6a>
 8027f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027f58:	4299      	cmp	r1, r3
 8027f5a:	d002      	beq.n	8027f62 <__swsetup_r+0x66>
 8027f5c:	4630      	mov	r0, r6
 8027f5e:	f7ff fbb7 	bl	80276d0 <_free_r>
 8027f62:	2300      	movs	r3, #0
 8027f64:	6363      	str	r3, [r4, #52]	; 0x34
 8027f66:	89a3      	ldrh	r3, [r4, #12]
 8027f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027f6c:	81a3      	strh	r3, [r4, #12]
 8027f6e:	2300      	movs	r3, #0
 8027f70:	6063      	str	r3, [r4, #4]
 8027f72:	6923      	ldr	r3, [r4, #16]
 8027f74:	6023      	str	r3, [r4, #0]
 8027f76:	89a3      	ldrh	r3, [r4, #12]
 8027f78:	f043 0308 	orr.w	r3, r3, #8
 8027f7c:	81a3      	strh	r3, [r4, #12]
 8027f7e:	6923      	ldr	r3, [r4, #16]
 8027f80:	b94b      	cbnz	r3, 8027f96 <__swsetup_r+0x9a>
 8027f82:	89a3      	ldrh	r3, [r4, #12]
 8027f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027f8c:	d003      	beq.n	8027f96 <__swsetup_r+0x9a>
 8027f8e:	4621      	mov	r1, r4
 8027f90:	4630      	mov	r0, r6
 8027f92:	f000 fa23 	bl	80283dc <__smakebuf_r>
 8027f96:	89a2      	ldrh	r2, [r4, #12]
 8027f98:	f012 0301 	ands.w	r3, r2, #1
 8027f9c:	d00c      	beq.n	8027fb8 <__swsetup_r+0xbc>
 8027f9e:	2300      	movs	r3, #0
 8027fa0:	60a3      	str	r3, [r4, #8]
 8027fa2:	6963      	ldr	r3, [r4, #20]
 8027fa4:	425b      	negs	r3, r3
 8027fa6:	61a3      	str	r3, [r4, #24]
 8027fa8:	6923      	ldr	r3, [r4, #16]
 8027faa:	b953      	cbnz	r3, 8027fc2 <__swsetup_r+0xc6>
 8027fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027fb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8027fb4:	d1ba      	bne.n	8027f2c <__swsetup_r+0x30>
 8027fb6:	bd70      	pop	{r4, r5, r6, pc}
 8027fb8:	0792      	lsls	r2, r2, #30
 8027fba:	bf58      	it	pl
 8027fbc:	6963      	ldrpl	r3, [r4, #20]
 8027fbe:	60a3      	str	r3, [r4, #8]
 8027fc0:	e7f2      	b.n	8027fa8 <__swsetup_r+0xac>
 8027fc2:	2000      	movs	r0, #0
 8027fc4:	e7f7      	b.n	8027fb6 <__swsetup_r+0xba>
 8027fc6:	bf00      	nop
 8027fc8:	20000098 	.word	0x20000098
 8027fcc:	0802d050 	.word	0x0802d050
 8027fd0:	0802d070 	.word	0x0802d070
 8027fd4:	0802d030 	.word	0x0802d030

08027fd8 <__register_exitproc>:
 8027fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027fdc:	4d2c      	ldr	r5, [pc, #176]	; (8028090 <__register_exitproc+0xb8>)
 8027fde:	682c      	ldr	r4, [r5, #0]
 8027fe0:	4607      	mov	r7, r0
 8027fe2:	460e      	mov	r6, r1
 8027fe4:	4691      	mov	r9, r2
 8027fe6:	4698      	mov	r8, r3
 8027fe8:	b934      	cbnz	r4, 8027ff8 <__register_exitproc+0x20>
 8027fea:	4b2a      	ldr	r3, [pc, #168]	; (8028094 <__register_exitproc+0xbc>)
 8027fec:	4c2a      	ldr	r4, [pc, #168]	; (8028098 <__register_exitproc+0xc0>)
 8027fee:	602c      	str	r4, [r5, #0]
 8027ff0:	b113      	cbz	r3, 8027ff8 <__register_exitproc+0x20>
 8027ff2:	681b      	ldr	r3, [r3, #0]
 8027ff4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8027ff8:	6863      	ldr	r3, [r4, #4]
 8027ffa:	2b1f      	cmp	r3, #31
 8027ffc:	dd3d      	ble.n	802807a <__register_exitproc+0xa2>
 8027ffe:	4b27      	ldr	r3, [pc, #156]	; (802809c <__register_exitproc+0xc4>)
 8028000:	b91b      	cbnz	r3, 802800a <__register_exitproc+0x32>
 8028002:	f04f 30ff 	mov.w	r0, #4294967295
 8028006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802800a:	208c      	movs	r0, #140	; 0x8c
 802800c:	f7ff fb3c 	bl	8027688 <malloc>
 8028010:	4604      	mov	r4, r0
 8028012:	2800      	cmp	r0, #0
 8028014:	d0f5      	beq.n	8028002 <__register_exitproc+0x2a>
 8028016:	2300      	movs	r3, #0
 8028018:	682a      	ldr	r2, [r5, #0]
 802801a:	6002      	str	r2, [r0, #0]
 802801c:	6043      	str	r3, [r0, #4]
 802801e:	6028      	str	r0, [r5, #0]
 8028020:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8028024:	b30f      	cbz	r7, 802806a <__register_exitproc+0x92>
 8028026:	f44f 7084 	mov.w	r0, #264	; 0x108
 802802a:	f7ff fb2d 	bl	8027688 <malloc>
 802802e:	2800      	cmp	r0, #0
 8028030:	d0e7      	beq.n	8028002 <__register_exitproc+0x2a>
 8028032:	2300      	movs	r3, #0
 8028034:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028038:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802803c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8028040:	6862      	ldr	r2, [r4, #4]
 8028042:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8028046:	2301      	movs	r3, #1
 8028048:	4093      	lsls	r3, r2
 802804a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802804e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8028052:	431a      	orrs	r2, r3
 8028054:	2f02      	cmp	r7, #2
 8028056:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802805a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802805e:	bf02      	ittt	eq
 8028060:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8028064:	4313      	orreq	r3, r2
 8028066:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802806a:	6863      	ldr	r3, [r4, #4]
 802806c:	1c5a      	adds	r2, r3, #1
 802806e:	3302      	adds	r3, #2
 8028070:	6062      	str	r2, [r4, #4]
 8028072:	2000      	movs	r0, #0
 8028074:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8028078:	e7c5      	b.n	8028006 <__register_exitproc+0x2e>
 802807a:	2f00      	cmp	r7, #0
 802807c:	d0f5      	beq.n	802806a <__register_exitproc+0x92>
 802807e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028082:	2800      	cmp	r0, #0
 8028084:	d1dc      	bne.n	8028040 <__register_exitproc+0x68>
 8028086:	4b05      	ldr	r3, [pc, #20]	; (802809c <__register_exitproc+0xc4>)
 8028088:	2b00      	cmp	r3, #0
 802808a:	d0ba      	beq.n	8028002 <__register_exitproc+0x2a>
 802808c:	e7cb      	b.n	8028026 <__register_exitproc+0x4e>
 802808e:	bf00      	nop
 8028090:	2000b5cc 	.word	0x2000b5cc
 8028094:	0802d02c 	.word	0x0802d02c
 8028098:	2000b540 	.word	0x2000b540
 802809c:	08027689 	.word	0x08027689

080280a0 <__sflush_r>:
 80280a0:	898a      	ldrh	r2, [r1, #12]
 80280a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80280a6:	4605      	mov	r5, r0
 80280a8:	0710      	lsls	r0, r2, #28
 80280aa:	460c      	mov	r4, r1
 80280ac:	d458      	bmi.n	8028160 <__sflush_r+0xc0>
 80280ae:	684b      	ldr	r3, [r1, #4]
 80280b0:	2b00      	cmp	r3, #0
 80280b2:	dc05      	bgt.n	80280c0 <__sflush_r+0x20>
 80280b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80280b6:	2b00      	cmp	r3, #0
 80280b8:	dc02      	bgt.n	80280c0 <__sflush_r+0x20>
 80280ba:	2000      	movs	r0, #0
 80280bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80280c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80280c2:	2e00      	cmp	r6, #0
 80280c4:	d0f9      	beq.n	80280ba <__sflush_r+0x1a>
 80280c6:	2300      	movs	r3, #0
 80280c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80280cc:	682f      	ldr	r7, [r5, #0]
 80280ce:	6a21      	ldr	r1, [r4, #32]
 80280d0:	602b      	str	r3, [r5, #0]
 80280d2:	d032      	beq.n	802813a <__sflush_r+0x9a>
 80280d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80280d6:	89a3      	ldrh	r3, [r4, #12]
 80280d8:	075a      	lsls	r2, r3, #29
 80280da:	d505      	bpl.n	80280e8 <__sflush_r+0x48>
 80280dc:	6863      	ldr	r3, [r4, #4]
 80280de:	1ac0      	subs	r0, r0, r3
 80280e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80280e2:	b10b      	cbz	r3, 80280e8 <__sflush_r+0x48>
 80280e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80280e6:	1ac0      	subs	r0, r0, r3
 80280e8:	2300      	movs	r3, #0
 80280ea:	4602      	mov	r2, r0
 80280ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80280ee:	6a21      	ldr	r1, [r4, #32]
 80280f0:	4628      	mov	r0, r5
 80280f2:	47b0      	blx	r6
 80280f4:	1c43      	adds	r3, r0, #1
 80280f6:	89a3      	ldrh	r3, [r4, #12]
 80280f8:	d106      	bne.n	8028108 <__sflush_r+0x68>
 80280fa:	6829      	ldr	r1, [r5, #0]
 80280fc:	291d      	cmp	r1, #29
 80280fe:	d848      	bhi.n	8028192 <__sflush_r+0xf2>
 8028100:	4a29      	ldr	r2, [pc, #164]	; (80281a8 <__sflush_r+0x108>)
 8028102:	40ca      	lsrs	r2, r1
 8028104:	07d6      	lsls	r6, r2, #31
 8028106:	d544      	bpl.n	8028192 <__sflush_r+0xf2>
 8028108:	2200      	movs	r2, #0
 802810a:	6062      	str	r2, [r4, #4]
 802810c:	04d9      	lsls	r1, r3, #19
 802810e:	6922      	ldr	r2, [r4, #16]
 8028110:	6022      	str	r2, [r4, #0]
 8028112:	d504      	bpl.n	802811e <__sflush_r+0x7e>
 8028114:	1c42      	adds	r2, r0, #1
 8028116:	d101      	bne.n	802811c <__sflush_r+0x7c>
 8028118:	682b      	ldr	r3, [r5, #0]
 802811a:	b903      	cbnz	r3, 802811e <__sflush_r+0x7e>
 802811c:	6560      	str	r0, [r4, #84]	; 0x54
 802811e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028120:	602f      	str	r7, [r5, #0]
 8028122:	2900      	cmp	r1, #0
 8028124:	d0c9      	beq.n	80280ba <__sflush_r+0x1a>
 8028126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802812a:	4299      	cmp	r1, r3
 802812c:	d002      	beq.n	8028134 <__sflush_r+0x94>
 802812e:	4628      	mov	r0, r5
 8028130:	f7ff face 	bl	80276d0 <_free_r>
 8028134:	2000      	movs	r0, #0
 8028136:	6360      	str	r0, [r4, #52]	; 0x34
 8028138:	e7c0      	b.n	80280bc <__sflush_r+0x1c>
 802813a:	2301      	movs	r3, #1
 802813c:	4628      	mov	r0, r5
 802813e:	47b0      	blx	r6
 8028140:	1c41      	adds	r1, r0, #1
 8028142:	d1c8      	bne.n	80280d6 <__sflush_r+0x36>
 8028144:	682b      	ldr	r3, [r5, #0]
 8028146:	2b00      	cmp	r3, #0
 8028148:	d0c5      	beq.n	80280d6 <__sflush_r+0x36>
 802814a:	2b1d      	cmp	r3, #29
 802814c:	d001      	beq.n	8028152 <__sflush_r+0xb2>
 802814e:	2b16      	cmp	r3, #22
 8028150:	d101      	bne.n	8028156 <__sflush_r+0xb6>
 8028152:	602f      	str	r7, [r5, #0]
 8028154:	e7b1      	b.n	80280ba <__sflush_r+0x1a>
 8028156:	89a3      	ldrh	r3, [r4, #12]
 8028158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802815c:	81a3      	strh	r3, [r4, #12]
 802815e:	e7ad      	b.n	80280bc <__sflush_r+0x1c>
 8028160:	690f      	ldr	r7, [r1, #16]
 8028162:	2f00      	cmp	r7, #0
 8028164:	d0a9      	beq.n	80280ba <__sflush_r+0x1a>
 8028166:	0793      	lsls	r3, r2, #30
 8028168:	680e      	ldr	r6, [r1, #0]
 802816a:	bf08      	it	eq
 802816c:	694b      	ldreq	r3, [r1, #20]
 802816e:	600f      	str	r7, [r1, #0]
 8028170:	bf18      	it	ne
 8028172:	2300      	movne	r3, #0
 8028174:	eba6 0807 	sub.w	r8, r6, r7
 8028178:	608b      	str	r3, [r1, #8]
 802817a:	f1b8 0f00 	cmp.w	r8, #0
 802817e:	dd9c      	ble.n	80280ba <__sflush_r+0x1a>
 8028180:	4643      	mov	r3, r8
 8028182:	463a      	mov	r2, r7
 8028184:	6a21      	ldr	r1, [r4, #32]
 8028186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028188:	4628      	mov	r0, r5
 802818a:	47b0      	blx	r6
 802818c:	2800      	cmp	r0, #0
 802818e:	dc06      	bgt.n	802819e <__sflush_r+0xfe>
 8028190:	89a3      	ldrh	r3, [r4, #12]
 8028192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028196:	81a3      	strh	r3, [r4, #12]
 8028198:	f04f 30ff 	mov.w	r0, #4294967295
 802819c:	e78e      	b.n	80280bc <__sflush_r+0x1c>
 802819e:	4407      	add	r7, r0
 80281a0:	eba8 0800 	sub.w	r8, r8, r0
 80281a4:	e7e9      	b.n	802817a <__sflush_r+0xda>
 80281a6:	bf00      	nop
 80281a8:	20400001 	.word	0x20400001

080281ac <_fflush_r>:
 80281ac:	b538      	push	{r3, r4, r5, lr}
 80281ae:	690b      	ldr	r3, [r1, #16]
 80281b0:	4605      	mov	r5, r0
 80281b2:	460c      	mov	r4, r1
 80281b4:	b1db      	cbz	r3, 80281ee <_fflush_r+0x42>
 80281b6:	b118      	cbz	r0, 80281c0 <_fflush_r+0x14>
 80281b8:	6983      	ldr	r3, [r0, #24]
 80281ba:	b90b      	cbnz	r3, 80281c0 <_fflush_r+0x14>
 80281bc:	f000 f860 	bl	8028280 <__sinit>
 80281c0:	4b0c      	ldr	r3, [pc, #48]	; (80281f4 <_fflush_r+0x48>)
 80281c2:	429c      	cmp	r4, r3
 80281c4:	d109      	bne.n	80281da <_fflush_r+0x2e>
 80281c6:	686c      	ldr	r4, [r5, #4]
 80281c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80281cc:	b17b      	cbz	r3, 80281ee <_fflush_r+0x42>
 80281ce:	4621      	mov	r1, r4
 80281d0:	4628      	mov	r0, r5
 80281d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80281d6:	f7ff bf63 	b.w	80280a0 <__sflush_r>
 80281da:	4b07      	ldr	r3, [pc, #28]	; (80281f8 <_fflush_r+0x4c>)
 80281dc:	429c      	cmp	r4, r3
 80281de:	d101      	bne.n	80281e4 <_fflush_r+0x38>
 80281e0:	68ac      	ldr	r4, [r5, #8]
 80281e2:	e7f1      	b.n	80281c8 <_fflush_r+0x1c>
 80281e4:	4b05      	ldr	r3, [pc, #20]	; (80281fc <_fflush_r+0x50>)
 80281e6:	429c      	cmp	r4, r3
 80281e8:	bf08      	it	eq
 80281ea:	68ec      	ldreq	r4, [r5, #12]
 80281ec:	e7ec      	b.n	80281c8 <_fflush_r+0x1c>
 80281ee:	2000      	movs	r0, #0
 80281f0:	bd38      	pop	{r3, r4, r5, pc}
 80281f2:	bf00      	nop
 80281f4:	0802d050 	.word	0x0802d050
 80281f8:	0802d070 	.word	0x0802d070
 80281fc:	0802d030 	.word	0x0802d030

08028200 <std>:
 8028200:	2300      	movs	r3, #0
 8028202:	b510      	push	{r4, lr}
 8028204:	4604      	mov	r4, r0
 8028206:	e9c0 3300 	strd	r3, r3, [r0]
 802820a:	6083      	str	r3, [r0, #8]
 802820c:	8181      	strh	r1, [r0, #12]
 802820e:	6643      	str	r3, [r0, #100]	; 0x64
 8028210:	81c2      	strh	r2, [r0, #14]
 8028212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028216:	6183      	str	r3, [r0, #24]
 8028218:	4619      	mov	r1, r3
 802821a:	2208      	movs	r2, #8
 802821c:	305c      	adds	r0, #92	; 0x5c
 802821e:	f7ff fa4e 	bl	80276be <memset>
 8028222:	4b05      	ldr	r3, [pc, #20]	; (8028238 <std+0x38>)
 8028224:	6263      	str	r3, [r4, #36]	; 0x24
 8028226:	4b05      	ldr	r3, [pc, #20]	; (802823c <std+0x3c>)
 8028228:	62a3      	str	r3, [r4, #40]	; 0x28
 802822a:	4b05      	ldr	r3, [pc, #20]	; (8028240 <std+0x40>)
 802822c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802822e:	4b05      	ldr	r3, [pc, #20]	; (8028244 <std+0x44>)
 8028230:	6224      	str	r4, [r4, #32]
 8028232:	6323      	str	r3, [r4, #48]	; 0x30
 8028234:	bd10      	pop	{r4, pc}
 8028236:	bf00      	nop
 8028238:	08028461 	.word	0x08028461
 802823c:	08028483 	.word	0x08028483
 8028240:	080284bb 	.word	0x080284bb
 8028244:	080284df 	.word	0x080284df

08028248 <_cleanup_r>:
 8028248:	4901      	ldr	r1, [pc, #4]	; (8028250 <_cleanup_r+0x8>)
 802824a:	f000 b885 	b.w	8028358 <_fwalk_reent>
 802824e:	bf00      	nop
 8028250:	080281ad 	.word	0x080281ad

08028254 <__sfmoreglue>:
 8028254:	b570      	push	{r4, r5, r6, lr}
 8028256:	1e4a      	subs	r2, r1, #1
 8028258:	2568      	movs	r5, #104	; 0x68
 802825a:	4355      	muls	r5, r2
 802825c:	460e      	mov	r6, r1
 802825e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028262:	f7ff fa83 	bl	802776c <_malloc_r>
 8028266:	4604      	mov	r4, r0
 8028268:	b140      	cbz	r0, 802827c <__sfmoreglue+0x28>
 802826a:	2100      	movs	r1, #0
 802826c:	e9c0 1600 	strd	r1, r6, [r0]
 8028270:	300c      	adds	r0, #12
 8028272:	60a0      	str	r0, [r4, #8]
 8028274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028278:	f7ff fa21 	bl	80276be <memset>
 802827c:	4620      	mov	r0, r4
 802827e:	bd70      	pop	{r4, r5, r6, pc}

08028280 <__sinit>:
 8028280:	6983      	ldr	r3, [r0, #24]
 8028282:	b510      	push	{r4, lr}
 8028284:	4604      	mov	r4, r0
 8028286:	bb33      	cbnz	r3, 80282d6 <__sinit+0x56>
 8028288:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802828c:	6503      	str	r3, [r0, #80]	; 0x50
 802828e:	4b12      	ldr	r3, [pc, #72]	; (80282d8 <__sinit+0x58>)
 8028290:	4a12      	ldr	r2, [pc, #72]	; (80282dc <__sinit+0x5c>)
 8028292:	681b      	ldr	r3, [r3, #0]
 8028294:	6282      	str	r2, [r0, #40]	; 0x28
 8028296:	4298      	cmp	r0, r3
 8028298:	bf04      	itt	eq
 802829a:	2301      	moveq	r3, #1
 802829c:	6183      	streq	r3, [r0, #24]
 802829e:	f000 f81f 	bl	80282e0 <__sfp>
 80282a2:	6060      	str	r0, [r4, #4]
 80282a4:	4620      	mov	r0, r4
 80282a6:	f000 f81b 	bl	80282e0 <__sfp>
 80282aa:	60a0      	str	r0, [r4, #8]
 80282ac:	4620      	mov	r0, r4
 80282ae:	f000 f817 	bl	80282e0 <__sfp>
 80282b2:	2200      	movs	r2, #0
 80282b4:	60e0      	str	r0, [r4, #12]
 80282b6:	2104      	movs	r1, #4
 80282b8:	6860      	ldr	r0, [r4, #4]
 80282ba:	f7ff ffa1 	bl	8028200 <std>
 80282be:	2201      	movs	r2, #1
 80282c0:	2109      	movs	r1, #9
 80282c2:	68a0      	ldr	r0, [r4, #8]
 80282c4:	f7ff ff9c 	bl	8028200 <std>
 80282c8:	2202      	movs	r2, #2
 80282ca:	2112      	movs	r1, #18
 80282cc:	68e0      	ldr	r0, [r4, #12]
 80282ce:	f7ff ff97 	bl	8028200 <std>
 80282d2:	2301      	movs	r3, #1
 80282d4:	61a3      	str	r3, [r4, #24]
 80282d6:	bd10      	pop	{r4, pc}
 80282d8:	0802cff4 	.word	0x0802cff4
 80282dc:	08028249 	.word	0x08028249

080282e0 <__sfp>:
 80282e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80282e2:	4b1b      	ldr	r3, [pc, #108]	; (8028350 <__sfp+0x70>)
 80282e4:	681e      	ldr	r6, [r3, #0]
 80282e6:	69b3      	ldr	r3, [r6, #24]
 80282e8:	4607      	mov	r7, r0
 80282ea:	b913      	cbnz	r3, 80282f2 <__sfp+0x12>
 80282ec:	4630      	mov	r0, r6
 80282ee:	f7ff ffc7 	bl	8028280 <__sinit>
 80282f2:	3648      	adds	r6, #72	; 0x48
 80282f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80282f8:	3b01      	subs	r3, #1
 80282fa:	d503      	bpl.n	8028304 <__sfp+0x24>
 80282fc:	6833      	ldr	r3, [r6, #0]
 80282fe:	b133      	cbz	r3, 802830e <__sfp+0x2e>
 8028300:	6836      	ldr	r6, [r6, #0]
 8028302:	e7f7      	b.n	80282f4 <__sfp+0x14>
 8028304:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028308:	b16d      	cbz	r5, 8028326 <__sfp+0x46>
 802830a:	3468      	adds	r4, #104	; 0x68
 802830c:	e7f4      	b.n	80282f8 <__sfp+0x18>
 802830e:	2104      	movs	r1, #4
 8028310:	4638      	mov	r0, r7
 8028312:	f7ff ff9f 	bl	8028254 <__sfmoreglue>
 8028316:	6030      	str	r0, [r6, #0]
 8028318:	2800      	cmp	r0, #0
 802831a:	d1f1      	bne.n	8028300 <__sfp+0x20>
 802831c:	230c      	movs	r3, #12
 802831e:	603b      	str	r3, [r7, #0]
 8028320:	4604      	mov	r4, r0
 8028322:	4620      	mov	r0, r4
 8028324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028326:	4b0b      	ldr	r3, [pc, #44]	; (8028354 <__sfp+0x74>)
 8028328:	6665      	str	r5, [r4, #100]	; 0x64
 802832a:	e9c4 5500 	strd	r5, r5, [r4]
 802832e:	60a5      	str	r5, [r4, #8]
 8028330:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8028334:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8028338:	2208      	movs	r2, #8
 802833a:	4629      	mov	r1, r5
 802833c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8028340:	f7ff f9bd 	bl	80276be <memset>
 8028344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8028348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802834c:	e7e9      	b.n	8028322 <__sfp+0x42>
 802834e:	bf00      	nop
 8028350:	0802cff4 	.word	0x0802cff4
 8028354:	ffff0001 	.word	0xffff0001

08028358 <_fwalk_reent>:
 8028358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802835c:	4680      	mov	r8, r0
 802835e:	4689      	mov	r9, r1
 8028360:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8028364:	2600      	movs	r6, #0
 8028366:	b914      	cbnz	r4, 802836e <_fwalk_reent+0x16>
 8028368:	4630      	mov	r0, r6
 802836a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802836e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8028372:	3f01      	subs	r7, #1
 8028374:	d501      	bpl.n	802837a <_fwalk_reent+0x22>
 8028376:	6824      	ldr	r4, [r4, #0]
 8028378:	e7f5      	b.n	8028366 <_fwalk_reent+0xe>
 802837a:	89ab      	ldrh	r3, [r5, #12]
 802837c:	2b01      	cmp	r3, #1
 802837e:	d907      	bls.n	8028390 <_fwalk_reent+0x38>
 8028380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8028384:	3301      	adds	r3, #1
 8028386:	d003      	beq.n	8028390 <_fwalk_reent+0x38>
 8028388:	4629      	mov	r1, r5
 802838a:	4640      	mov	r0, r8
 802838c:	47c8      	blx	r9
 802838e:	4306      	orrs	r6, r0
 8028390:	3568      	adds	r5, #104	; 0x68
 8028392:	e7ee      	b.n	8028372 <_fwalk_reent+0x1a>

08028394 <__swhatbuf_r>:
 8028394:	b570      	push	{r4, r5, r6, lr}
 8028396:	460e      	mov	r6, r1
 8028398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802839c:	2900      	cmp	r1, #0
 802839e:	b096      	sub	sp, #88	; 0x58
 80283a0:	4614      	mov	r4, r2
 80283a2:	461d      	mov	r5, r3
 80283a4:	da07      	bge.n	80283b6 <__swhatbuf_r+0x22>
 80283a6:	2300      	movs	r3, #0
 80283a8:	602b      	str	r3, [r5, #0]
 80283aa:	89b3      	ldrh	r3, [r6, #12]
 80283ac:	061a      	lsls	r2, r3, #24
 80283ae:	d410      	bmi.n	80283d2 <__swhatbuf_r+0x3e>
 80283b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80283b4:	e00e      	b.n	80283d4 <__swhatbuf_r+0x40>
 80283b6:	466a      	mov	r2, sp
 80283b8:	f000 f8b8 	bl	802852c <_fstat_r>
 80283bc:	2800      	cmp	r0, #0
 80283be:	dbf2      	blt.n	80283a6 <__swhatbuf_r+0x12>
 80283c0:	9a01      	ldr	r2, [sp, #4]
 80283c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80283c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80283ca:	425a      	negs	r2, r3
 80283cc:	415a      	adcs	r2, r3
 80283ce:	602a      	str	r2, [r5, #0]
 80283d0:	e7ee      	b.n	80283b0 <__swhatbuf_r+0x1c>
 80283d2:	2340      	movs	r3, #64	; 0x40
 80283d4:	2000      	movs	r0, #0
 80283d6:	6023      	str	r3, [r4, #0]
 80283d8:	b016      	add	sp, #88	; 0x58
 80283da:	bd70      	pop	{r4, r5, r6, pc}

080283dc <__smakebuf_r>:
 80283dc:	898b      	ldrh	r3, [r1, #12]
 80283de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80283e0:	079d      	lsls	r5, r3, #30
 80283e2:	4606      	mov	r6, r0
 80283e4:	460c      	mov	r4, r1
 80283e6:	d507      	bpl.n	80283f8 <__smakebuf_r+0x1c>
 80283e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80283ec:	6023      	str	r3, [r4, #0]
 80283ee:	6123      	str	r3, [r4, #16]
 80283f0:	2301      	movs	r3, #1
 80283f2:	6163      	str	r3, [r4, #20]
 80283f4:	b002      	add	sp, #8
 80283f6:	bd70      	pop	{r4, r5, r6, pc}
 80283f8:	ab01      	add	r3, sp, #4
 80283fa:	466a      	mov	r2, sp
 80283fc:	f7ff ffca 	bl	8028394 <__swhatbuf_r>
 8028400:	9900      	ldr	r1, [sp, #0]
 8028402:	4605      	mov	r5, r0
 8028404:	4630      	mov	r0, r6
 8028406:	f7ff f9b1 	bl	802776c <_malloc_r>
 802840a:	b948      	cbnz	r0, 8028420 <__smakebuf_r+0x44>
 802840c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028410:	059a      	lsls	r2, r3, #22
 8028412:	d4ef      	bmi.n	80283f4 <__smakebuf_r+0x18>
 8028414:	f023 0303 	bic.w	r3, r3, #3
 8028418:	f043 0302 	orr.w	r3, r3, #2
 802841c:	81a3      	strh	r3, [r4, #12]
 802841e:	e7e3      	b.n	80283e8 <__smakebuf_r+0xc>
 8028420:	4b0d      	ldr	r3, [pc, #52]	; (8028458 <__smakebuf_r+0x7c>)
 8028422:	62b3      	str	r3, [r6, #40]	; 0x28
 8028424:	89a3      	ldrh	r3, [r4, #12]
 8028426:	6020      	str	r0, [r4, #0]
 8028428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802842c:	81a3      	strh	r3, [r4, #12]
 802842e:	9b00      	ldr	r3, [sp, #0]
 8028430:	6163      	str	r3, [r4, #20]
 8028432:	9b01      	ldr	r3, [sp, #4]
 8028434:	6120      	str	r0, [r4, #16]
 8028436:	b15b      	cbz	r3, 8028450 <__smakebuf_r+0x74>
 8028438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802843c:	4630      	mov	r0, r6
 802843e:	f000 f887 	bl	8028550 <_isatty_r>
 8028442:	b128      	cbz	r0, 8028450 <__smakebuf_r+0x74>
 8028444:	89a3      	ldrh	r3, [r4, #12]
 8028446:	f023 0303 	bic.w	r3, r3, #3
 802844a:	f043 0301 	orr.w	r3, r3, #1
 802844e:	81a3      	strh	r3, [r4, #12]
 8028450:	89a3      	ldrh	r3, [r4, #12]
 8028452:	431d      	orrs	r5, r3
 8028454:	81a5      	strh	r5, [r4, #12]
 8028456:	e7cd      	b.n	80283f4 <__smakebuf_r+0x18>
 8028458:	08028249 	.word	0x08028249

0802845c <__malloc_lock>:
 802845c:	4770      	bx	lr

0802845e <__malloc_unlock>:
 802845e:	4770      	bx	lr

08028460 <__sread>:
 8028460:	b510      	push	{r4, lr}
 8028462:	460c      	mov	r4, r1
 8028464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028468:	f000 f894 	bl	8028594 <_read_r>
 802846c:	2800      	cmp	r0, #0
 802846e:	bfab      	itete	ge
 8028470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8028472:	89a3      	ldrhlt	r3, [r4, #12]
 8028474:	181b      	addge	r3, r3, r0
 8028476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802847a:	bfac      	ite	ge
 802847c:	6563      	strge	r3, [r4, #84]	; 0x54
 802847e:	81a3      	strhlt	r3, [r4, #12]
 8028480:	bd10      	pop	{r4, pc}

08028482 <__swrite>:
 8028482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028486:	461f      	mov	r7, r3
 8028488:	898b      	ldrh	r3, [r1, #12]
 802848a:	05db      	lsls	r3, r3, #23
 802848c:	4605      	mov	r5, r0
 802848e:	460c      	mov	r4, r1
 8028490:	4616      	mov	r6, r2
 8028492:	d505      	bpl.n	80284a0 <__swrite+0x1e>
 8028494:	2302      	movs	r3, #2
 8028496:	2200      	movs	r2, #0
 8028498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802849c:	f000 f868 	bl	8028570 <_lseek_r>
 80284a0:	89a3      	ldrh	r3, [r4, #12]
 80284a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80284a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80284aa:	81a3      	strh	r3, [r4, #12]
 80284ac:	4632      	mov	r2, r6
 80284ae:	463b      	mov	r3, r7
 80284b0:	4628      	mov	r0, r5
 80284b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80284b6:	f000 b817 	b.w	80284e8 <_write_r>

080284ba <__sseek>:
 80284ba:	b510      	push	{r4, lr}
 80284bc:	460c      	mov	r4, r1
 80284be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80284c2:	f000 f855 	bl	8028570 <_lseek_r>
 80284c6:	1c43      	adds	r3, r0, #1
 80284c8:	89a3      	ldrh	r3, [r4, #12]
 80284ca:	bf15      	itete	ne
 80284cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80284ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80284d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80284d6:	81a3      	strheq	r3, [r4, #12]
 80284d8:	bf18      	it	ne
 80284da:	81a3      	strhne	r3, [r4, #12]
 80284dc:	bd10      	pop	{r4, pc}

080284de <__sclose>:
 80284de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80284e2:	f000 b813 	b.w	802850c <_close_r>
	...

080284e8 <_write_r>:
 80284e8:	b538      	push	{r3, r4, r5, lr}
 80284ea:	4c07      	ldr	r4, [pc, #28]	; (8028508 <_write_r+0x20>)
 80284ec:	4605      	mov	r5, r0
 80284ee:	4608      	mov	r0, r1
 80284f0:	4611      	mov	r1, r2
 80284f2:	2200      	movs	r2, #0
 80284f4:	6022      	str	r2, [r4, #0]
 80284f6:	461a      	mov	r2, r3
 80284f8:	f7da fce9 	bl	8002ece <_write>
 80284fc:	1c43      	adds	r3, r0, #1
 80284fe:	d102      	bne.n	8028506 <_write_r+0x1e>
 8028500:	6823      	ldr	r3, [r4, #0]
 8028502:	b103      	cbz	r3, 8028506 <_write_r+0x1e>
 8028504:	602b      	str	r3, [r5, #0]
 8028506:	bd38      	pop	{r3, r4, r5, pc}
 8028508:	2000c15c 	.word	0x2000c15c

0802850c <_close_r>:
 802850c:	b538      	push	{r3, r4, r5, lr}
 802850e:	4c06      	ldr	r4, [pc, #24]	; (8028528 <_close_r+0x1c>)
 8028510:	2300      	movs	r3, #0
 8028512:	4605      	mov	r5, r0
 8028514:	4608      	mov	r0, r1
 8028516:	6023      	str	r3, [r4, #0]
 8028518:	f7da fcf5 	bl	8002f06 <_close>
 802851c:	1c43      	adds	r3, r0, #1
 802851e:	d102      	bne.n	8028526 <_close_r+0x1a>
 8028520:	6823      	ldr	r3, [r4, #0]
 8028522:	b103      	cbz	r3, 8028526 <_close_r+0x1a>
 8028524:	602b      	str	r3, [r5, #0]
 8028526:	bd38      	pop	{r3, r4, r5, pc}
 8028528:	2000c15c 	.word	0x2000c15c

0802852c <_fstat_r>:
 802852c:	b538      	push	{r3, r4, r5, lr}
 802852e:	4c07      	ldr	r4, [pc, #28]	; (802854c <_fstat_r+0x20>)
 8028530:	2300      	movs	r3, #0
 8028532:	4605      	mov	r5, r0
 8028534:	4608      	mov	r0, r1
 8028536:	4611      	mov	r1, r2
 8028538:	6023      	str	r3, [r4, #0]
 802853a:	f7da fcf0 	bl	8002f1e <_fstat>
 802853e:	1c43      	adds	r3, r0, #1
 8028540:	d102      	bne.n	8028548 <_fstat_r+0x1c>
 8028542:	6823      	ldr	r3, [r4, #0]
 8028544:	b103      	cbz	r3, 8028548 <_fstat_r+0x1c>
 8028546:	602b      	str	r3, [r5, #0]
 8028548:	bd38      	pop	{r3, r4, r5, pc}
 802854a:	bf00      	nop
 802854c:	2000c15c 	.word	0x2000c15c

08028550 <_isatty_r>:
 8028550:	b538      	push	{r3, r4, r5, lr}
 8028552:	4c06      	ldr	r4, [pc, #24]	; (802856c <_isatty_r+0x1c>)
 8028554:	2300      	movs	r3, #0
 8028556:	4605      	mov	r5, r0
 8028558:	4608      	mov	r0, r1
 802855a:	6023      	str	r3, [r4, #0]
 802855c:	f7da fcef 	bl	8002f3e <_isatty>
 8028560:	1c43      	adds	r3, r0, #1
 8028562:	d102      	bne.n	802856a <_isatty_r+0x1a>
 8028564:	6823      	ldr	r3, [r4, #0]
 8028566:	b103      	cbz	r3, 802856a <_isatty_r+0x1a>
 8028568:	602b      	str	r3, [r5, #0]
 802856a:	bd38      	pop	{r3, r4, r5, pc}
 802856c:	2000c15c 	.word	0x2000c15c

08028570 <_lseek_r>:
 8028570:	b538      	push	{r3, r4, r5, lr}
 8028572:	4c07      	ldr	r4, [pc, #28]	; (8028590 <_lseek_r+0x20>)
 8028574:	4605      	mov	r5, r0
 8028576:	4608      	mov	r0, r1
 8028578:	4611      	mov	r1, r2
 802857a:	2200      	movs	r2, #0
 802857c:	6022      	str	r2, [r4, #0]
 802857e:	461a      	mov	r2, r3
 8028580:	f7da fce8 	bl	8002f54 <_lseek>
 8028584:	1c43      	adds	r3, r0, #1
 8028586:	d102      	bne.n	802858e <_lseek_r+0x1e>
 8028588:	6823      	ldr	r3, [r4, #0]
 802858a:	b103      	cbz	r3, 802858e <_lseek_r+0x1e>
 802858c:	602b      	str	r3, [r5, #0]
 802858e:	bd38      	pop	{r3, r4, r5, pc}
 8028590:	2000c15c 	.word	0x2000c15c

08028594 <_read_r>:
 8028594:	b538      	push	{r3, r4, r5, lr}
 8028596:	4c07      	ldr	r4, [pc, #28]	; (80285b4 <_read_r+0x20>)
 8028598:	4605      	mov	r5, r0
 802859a:	4608      	mov	r0, r1
 802859c:	4611      	mov	r1, r2
 802859e:	2200      	movs	r2, #0
 80285a0:	6022      	str	r2, [r4, #0]
 80285a2:	461a      	mov	r2, r3
 80285a4:	f7da fc76 	bl	8002e94 <_read>
 80285a8:	1c43      	adds	r3, r0, #1
 80285aa:	d102      	bne.n	80285b2 <_read_r+0x1e>
 80285ac:	6823      	ldr	r3, [r4, #0]
 80285ae:	b103      	cbz	r3, 80285b2 <_read_r+0x1e>
 80285b0:	602b      	str	r3, [r5, #0]
 80285b2:	bd38      	pop	{r3, r4, r5, pc}
 80285b4:	2000c15c 	.word	0x2000c15c

080285b8 <_init>:
 80285b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80285ba:	bf00      	nop
 80285bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80285be:	bc08      	pop	{r3}
 80285c0:	469e      	mov	lr, r3
 80285c2:	4770      	bx	lr

080285c4 <_fini>:
 80285c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80285c6:	bf00      	nop
 80285c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80285ca:	bc08      	pop	{r3}
 80285cc:	469e      	mov	lr, r3
 80285ce:	4770      	bx	lr
